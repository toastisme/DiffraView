(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const o of document.querySelectorAll('link[rel="modulepreload"]'))s(o);new MutationObserver(o=>{for(const f of o)if(f.type==="childList")for(const m of f.addedNodes)m.tagName==="LINK"&&m.rel==="modulepreload"&&s(m)}).observe(document,{childList:!0,subtree:!0});function i(o){const f={};return o.integrity&&(f.integrity=o.integrity),o.referrerPolicy&&(f.referrerPolicy=o.referrerPolicy),o.crossOrigin==="use-credentials"?f.credentials="include":o.crossOrigin==="anonymous"?f.credentials="omit":f.credentials="same-origin",f}function s(o){if(o.ep)return;o.ep=!0;const f=i(o);fetch(o.href,f)}})();/**
 * @license
 * Copyright 2010-2023 Three.js Authors
 * SPDX-License-Identifier: MIT
 */const bm="152",vl={ROTATE:0,DOLLY:1,PAN:2},yl={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3},b1=0,O0=1,T1=2,Rv=1,w1=2,qs=3,Aa=0,ur=1,Ks=2,Sa=0,Yl=1,B0=2,z0=3,k0=4,A1=5,Vl=100,R1=101,C1=102,G0=103,H0=104,P1=200,L1=201,D1=202,U1=203,Cv=204,Pv=205,I1=206,N1=207,F1=208,O1=209,B1=210,z1=0,k1=1,G1=2,em=3,H1=4,V1=5,W1=6,X1=7,Lv=0,q1=1,Y1=2,$s=0,Z1=1,K1=2,$1=3,J1=4,j1=5,Dv=300,Ql=301,ec=302,tm=303,nm=304,If=306,im=1e3,os=1001,rm=1002,rr=1003,V0=1004,up=1005,Or=1006,Q1=1007,Eh=1008,wo=1009,eR=1010,tR=1011,Uv=1012,nR=1013,_o=1014,xo=1015,bh=1016,iR=1017,rR=1018,Zl=1020,sR=1021,ls=1023,aR=1024,oR=1025,yo=1026,tc=1027,lR=1028,cR=1029,hR=1030,uR=1031,fR=1033,fp=33776,dp=33777,pp=33778,mp=33779,W0=35840,X0=35841,q0=35842,Y0=35843,dR=36196,Z0=37492,K0=37496,$0=37808,J0=37809,j0=37810,Q0=37811,ex=37812,tx=37813,nx=37814,ix=37815,rx=37816,sx=37817,ax=37818,ox=37819,lx=37820,cx=37821,gp=36492,pR=36283,hx=36284,ux=36285,fx=36286,Iv=3e3,Mo=3001,mR=3200,gR=3201,_R=0,xR=1,So="",vn="srgb",bs="srgb-linear",Nv="display-p3",_p=7680,vR=519,Sf=35044,xp=35048,dx="300 es",sm=1035;class Lo{addEventListener(t,i){this._listeners===void 0&&(this._listeners={});const s=this._listeners;s[t]===void 0&&(s[t]=[]),s[t].indexOf(i)===-1&&s[t].push(i)}hasEventListener(t,i){if(this._listeners===void 0)return!1;const s=this._listeners;return s[t]!==void 0&&s[t].indexOf(i)!==-1}removeEventListener(t,i){if(this._listeners===void 0)return;const o=this._listeners[t];if(o!==void 0){const f=o.indexOf(i);f!==-1&&o.splice(f,1)}}dispatchEvent(t){if(this._listeners===void 0)return;const s=this._listeners[t.type];if(s!==void 0){t.target=this;const o=s.slice(0);for(let f=0,m=o.length;f<m;f++)o[f].call(this,t);t.target=null}}}const Wi=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"],vp=Math.PI/180,am=180/Math.PI;function Ea(){const h=Math.random()*4294967295|0,t=Math.random()*4294967295|0,i=Math.random()*4294967295|0,s=Math.random()*4294967295|0;return(Wi[h&255]+Wi[h>>8&255]+Wi[h>>16&255]+Wi[h>>24&255]+"-"+Wi[t&255]+Wi[t>>8&255]+"-"+Wi[t>>16&15|64]+Wi[t>>24&255]+"-"+Wi[i&63|128]+Wi[i>>8&255]+"-"+Wi[i>>16&255]+Wi[i>>24&255]+Wi[s&255]+Wi[s>>8&255]+Wi[s>>16&255]+Wi[s>>24&255]).toLowerCase()}function sr(h,t,i){return Math.max(t,Math.min(i,h))}function yR(h,t){return(h%t+t)%t}function yp(h,t,i){return(1-i)*h+i*t}function px(h){return(h&h-1)===0&&h!==0}function MR(h){return Math.pow(2,Math.floor(Math.log(h)/Math.LN2))}function xa(h,t){switch(t.constructor){case Float32Array:return h;case Uint16Array:return h/65535;case Uint8Array:return h/255;case Int16Array:return Math.max(h/32767,-1);case Int8Array:return Math.max(h/127,-1);default:throw new Error("Invalid component type.")}}function jn(h,t){switch(t.constructor){case Float32Array:return h;case Uint16Array:return Math.round(h*65535);case Uint8Array:return Math.round(h*255);case Int16Array:return Math.round(h*32767);case Int8Array:return Math.round(h*127);default:throw new Error("Invalid component type.")}}class cn{constructor(t=0,i=0){cn.prototype.isVector2=!0,this.x=t,this.y=i}get width(){return this.x}set width(t){this.x=t}get height(){return this.y}set height(t){this.y=t}set(t,i){return this.x=t,this.y=i,this}setScalar(t){return this.x=t,this.y=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setComponent(t,i){switch(t){case 0:this.x=i;break;case 1:this.y=i;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y)}copy(t){return this.x=t.x,this.y=t.y,this}add(t){return this.x+=t.x,this.y+=t.y,this}addScalar(t){return this.x+=t,this.y+=t,this}addVectors(t,i){return this.x=t.x+i.x,this.y=t.y+i.y,this}addScaledVector(t,i){return this.x+=t.x*i,this.y+=t.y*i,this}sub(t){return this.x-=t.x,this.y-=t.y,this}subScalar(t){return this.x-=t,this.y-=t,this}subVectors(t,i){return this.x=t.x-i.x,this.y=t.y-i.y,this}multiply(t){return this.x*=t.x,this.y*=t.y,this}multiplyScalar(t){return this.x*=t,this.y*=t,this}divide(t){return this.x/=t.x,this.y/=t.y,this}divideScalar(t){return this.multiplyScalar(1/t)}applyMatrix3(t){const i=this.x,s=this.y,o=t.elements;return this.x=o[0]*i+o[3]*s+o[6],this.y=o[1]*i+o[4]*s+o[7],this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this}clamp(t,i){return this.x=Math.max(t.x,Math.min(i.x,this.x)),this.y=Math.max(t.y,Math.min(i.y,this.y)),this}clampScalar(t,i){return this.x=Math.max(t,Math.min(i,this.x)),this.y=Math.max(t,Math.min(i,this.y)),this}clampLength(t,i){const s=this.length();return this.divideScalar(s||1).multiplyScalar(Math.max(t,Math.min(i,s)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(t){return this.x*t.x+this.y*t.y}cross(t){return this.x*t.y-this.y*t.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}angleTo(t){const i=Math.sqrt(this.lengthSq()*t.lengthSq());if(i===0)return Math.PI/2;const s=this.dot(t)/i;return Math.acos(sr(s,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const i=this.x-t.x,s=this.y-t.y;return i*i+s*s}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,i){return this.x+=(t.x-this.x)*i,this.y+=(t.y-this.y)*i,this}lerpVectors(t,i,s){return this.x=t.x+(i.x-t.x)*s,this.y=t.y+(i.y-t.y)*s,this}equals(t){return t.x===this.x&&t.y===this.y}fromArray(t,i=0){return this.x=t[i],this.y=t[i+1],this}toArray(t=[],i=0){return t[i]=this.x,t[i+1]=this.y,t}fromBufferAttribute(t,i){return this.x=t.getX(i),this.y=t.getY(i),this}rotateAround(t,i){const s=Math.cos(i),o=Math.sin(i),f=this.x-t.x,m=this.y-t.y;return this.x=f*s-m*o+t.x,this.y=f*o+m*s+t.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}}class Ln{constructor(){Ln.prototype.isMatrix3=!0,this.elements=[1,0,0,0,1,0,0,0,1]}set(t,i,s,o,f,m,p,v,x){const M=this.elements;return M[0]=t,M[1]=o,M[2]=p,M[3]=i,M[4]=f,M[5]=v,M[6]=s,M[7]=m,M[8]=x,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(t){const i=this.elements,s=t.elements;return i[0]=s[0],i[1]=s[1],i[2]=s[2],i[3]=s[3],i[4]=s[4],i[5]=s[5],i[6]=s[6],i[7]=s[7],i[8]=s[8],this}extractBasis(t,i,s){return t.setFromMatrix3Column(this,0),i.setFromMatrix3Column(this,1),s.setFromMatrix3Column(this,2),this}setFromMatrix4(t){const i=t.elements;return this.set(i[0],i[4],i[8],i[1],i[5],i[9],i[2],i[6],i[10]),this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,i){const s=t.elements,o=i.elements,f=this.elements,m=s[0],p=s[3],v=s[6],x=s[1],M=s[4],b=s[7],T=s[2],P=s[5],N=s[8],L=o[0],D=o[3],R=o[6],W=o[1],V=o[4],q=o[7],H=o[2],Q=o[5],re=o[8];return f[0]=m*L+p*W+v*H,f[3]=m*D+p*V+v*Q,f[6]=m*R+p*q+v*re,f[1]=x*L+M*W+b*H,f[4]=x*D+M*V+b*Q,f[7]=x*R+M*q+b*re,f[2]=T*L+P*W+N*H,f[5]=T*D+P*V+N*Q,f[8]=T*R+P*q+N*re,this}multiplyScalar(t){const i=this.elements;return i[0]*=t,i[3]*=t,i[6]*=t,i[1]*=t,i[4]*=t,i[7]*=t,i[2]*=t,i[5]*=t,i[8]*=t,this}determinant(){const t=this.elements,i=t[0],s=t[1],o=t[2],f=t[3],m=t[4],p=t[5],v=t[6],x=t[7],M=t[8];return i*m*M-i*p*x-s*f*M+s*p*v+o*f*x-o*m*v}invert(){const t=this.elements,i=t[0],s=t[1],o=t[2],f=t[3],m=t[4],p=t[5],v=t[6],x=t[7],M=t[8],b=M*m-p*x,T=p*v-M*f,P=x*f-m*v,N=i*b+s*T+o*P;if(N===0)return this.set(0,0,0,0,0,0,0,0,0);const L=1/N;return t[0]=b*L,t[1]=(o*x-M*s)*L,t[2]=(p*s-o*m)*L,t[3]=T*L,t[4]=(M*i-o*v)*L,t[5]=(o*f-p*i)*L,t[6]=P*L,t[7]=(s*v-x*i)*L,t[8]=(m*i-s*f)*L,this}transpose(){let t;const i=this.elements;return t=i[1],i[1]=i[3],i[3]=t,t=i[2],i[2]=i[6],i[6]=t,t=i[5],i[5]=i[7],i[7]=t,this}getNormalMatrix(t){return this.setFromMatrix4(t).invert().transpose()}transposeIntoArray(t){const i=this.elements;return t[0]=i[0],t[1]=i[3],t[2]=i[6],t[3]=i[1],t[4]=i[4],t[5]=i[7],t[6]=i[2],t[7]=i[5],t[8]=i[8],this}setUvTransform(t,i,s,o,f,m,p){const v=Math.cos(f),x=Math.sin(f);return this.set(s*v,s*x,-s*(v*m+x*p)+m+t,-o*x,o*v,-o*(-x*m+v*p)+p+i,0,0,1),this}scale(t,i){return this.premultiply(Mp.makeScale(t,i)),this}rotate(t){return this.premultiply(Mp.makeRotation(-t)),this}translate(t,i){return this.premultiply(Mp.makeTranslation(t,i)),this}makeTranslation(t,i){return this.set(1,0,t,0,1,i,0,0,1),this}makeRotation(t){const i=Math.cos(t),s=Math.sin(t);return this.set(i,-s,0,s,i,0,0,0,1),this}makeScale(t,i){return this.set(t,0,0,0,i,0,0,0,1),this}equals(t){const i=this.elements,s=t.elements;for(let o=0;o<9;o++)if(i[o]!==s[o])return!1;return!0}fromArray(t,i=0){for(let s=0;s<9;s++)this.elements[s]=t[s+i];return this}toArray(t=[],i=0){const s=this.elements;return t[i]=s[0],t[i+1]=s[1],t[i+2]=s[2],t[i+3]=s[3],t[i+4]=s[4],t[i+5]=s[5],t[i+6]=s[6],t[i+7]=s[7],t[i+8]=s[8],t}clone(){return new this.constructor().fromArray(this.elements)}}const Mp=new Ln;function Fv(h){for(let t=h.length-1;t>=0;--t)if(h[t]>=65535)return!0;return!1}function Ef(h){return document.createElementNS("http://www.w3.org/1999/xhtml",h)}const mx={};function vh(h){h in mx||(mx[h]=!0,console.warn(h))}function Kl(h){return h<.04045?h*.0773993808:Math.pow(h*.9478672986+.0521327014,2.4)}function Sp(h){return h<.0031308?h*12.92:1.055*Math.pow(h,.41666)-.055}const SR=new Ln().fromArray([.8224621,.0331941,.0170827,.177538,.9668058,.0723974,-1e-7,1e-7,.9105199]),ER=new Ln().fromArray([1.2249401,-.0420569,-.0196376,-.2249404,1.0420571,-.0786361,1e-7,0,1.0982735]);function bR(h){return h.convertSRGBToLinear().applyMatrix3(ER)}function TR(h){return h.applyMatrix3(SR).convertLinearToSRGB()}const wR={[bs]:h=>h,[vn]:h=>h.convertSRGBToLinear(),[Nv]:bR},AR={[bs]:h=>h,[vn]:h=>h.convertLinearToSRGB(),[Nv]:TR},is={enabled:!0,get legacyMode(){return console.warn("THREE.ColorManagement: .legacyMode=false renamed to .enabled=true in r150."),!this.enabled},set legacyMode(h){console.warn("THREE.ColorManagement: .legacyMode=false renamed to .enabled=true in r150."),this.enabled=!h},get workingColorSpace(){return bs},set workingColorSpace(h){console.warn("THREE.ColorManagement: .workingColorSpace is readonly.")},convert:function(h,t,i){if(this.enabled===!1||t===i||!t||!i)return h;const s=wR[t],o=AR[i];if(s===void 0||o===void 0)throw new Error(`Unsupported color space conversion, "${t}" to "${i}".`);return o(s(h))},fromWorkingColorSpace:function(h,t){return this.convert(h,this.workingColorSpace,t)},toWorkingColorSpace:function(h,t){return this.convert(h,t,this.workingColorSpace)}};let Ml;class Ov{static getDataURL(t){if(/^data:/i.test(t.src)||typeof HTMLCanvasElement>"u")return t.src;let i;if(t instanceof HTMLCanvasElement)i=t;else{Ml===void 0&&(Ml=Ef("canvas")),Ml.width=t.width,Ml.height=t.height;const s=Ml.getContext("2d");t instanceof ImageData?s.putImageData(t,0,0):s.drawImage(t,0,0,t.width,t.height),i=Ml}return i.width>2048||i.height>2048?(console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",t),i.toDataURL("image/jpeg",.6)):i.toDataURL("image/png")}static sRGBToLinear(t){if(typeof HTMLImageElement<"u"&&t instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&t instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&t instanceof ImageBitmap){const i=Ef("canvas");i.width=t.width,i.height=t.height;const s=i.getContext("2d");s.drawImage(t,0,0,t.width,t.height);const o=s.getImageData(0,0,t.width,t.height),f=o.data;for(let m=0;m<f.length;m++)f[m]=Kl(f[m]/255)*255;return s.putImageData(o,0,0),i}else if(t.data){const i=t.data.slice(0);for(let s=0;s<i.length;s++)i instanceof Uint8Array||i instanceof Uint8ClampedArray?i[s]=Math.floor(Kl(i[s]/255)*255):i[s]=Kl(i[s]);return{data:i,width:t.width,height:t.height}}else return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),t}}class Bv{constructor(t=null){this.isSource=!0,this.uuid=Ea(),this.data=t,this.version=0}set needsUpdate(t){t===!0&&this.version++}toJSON(t){const i=t===void 0||typeof t=="string";if(!i&&t.images[this.uuid]!==void 0)return t.images[this.uuid];const s={uuid:this.uuid,url:""},o=this.data;if(o!==null){let f;if(Array.isArray(o)){f=[];for(let m=0,p=o.length;m<p;m++)o[m].isDataTexture?f.push(Ep(o[m].image)):f.push(Ep(o[m]))}else f=Ep(o);s.url=f}return i||(t.images[this.uuid]=s),s}}function Ep(h){return typeof HTMLImageElement<"u"&&h instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&h instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&h instanceof ImageBitmap?Ov.getDataURL(h):h.data?{data:Array.from(h.data),width:h.width,height:h.height,type:h.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}let RR=0;class fr extends Lo{constructor(t=fr.DEFAULT_IMAGE,i=fr.DEFAULT_MAPPING,s=os,o=os,f=Or,m=Eh,p=ls,v=wo,x=fr.DEFAULT_ANISOTROPY,M=So){super(),this.isTexture=!0,Object.defineProperty(this,"id",{value:RR++}),this.uuid=Ea(),this.name="",this.source=new Bv(t),this.mipmaps=[],this.mapping=i,this.channel=0,this.wrapS=s,this.wrapT=o,this.magFilter=f,this.minFilter=m,this.anisotropy=x,this.format=p,this.internalFormat=null,this.type=v,this.offset=new cn(0,0),this.repeat=new cn(1,1),this.center=new cn(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new Ln,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,typeof M=="string"?this.colorSpace=M:(vh("THREE.Texture: Property .encoding has been replaced by .colorSpace."),this.colorSpace=M===Mo?vn:So),this.userData={},this.version=0,this.onUpdate=null,this.isRenderTargetTexture=!1,this.needsPMREMUpdate=!1}get image(){return this.source.data}set image(t=null){this.source.data=t}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return new this.constructor().copy(this)}copy(t){return this.name=t.name,this.source=t.source,this.mipmaps=t.mipmaps.slice(0),this.mapping=t.mapping,this.channel=t.channel,this.wrapS=t.wrapS,this.wrapT=t.wrapT,this.magFilter=t.magFilter,this.minFilter=t.minFilter,this.anisotropy=t.anisotropy,this.format=t.format,this.internalFormat=t.internalFormat,this.type=t.type,this.offset.copy(t.offset),this.repeat.copy(t.repeat),this.center.copy(t.center),this.rotation=t.rotation,this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrix.copy(t.matrix),this.generateMipmaps=t.generateMipmaps,this.premultiplyAlpha=t.premultiplyAlpha,this.flipY=t.flipY,this.unpackAlignment=t.unpackAlignment,this.colorSpace=t.colorSpace,this.userData=JSON.parse(JSON.stringify(t.userData)),this.needsUpdate=!0,this}toJSON(t){const i=t===void 0||typeof t=="string";if(!i&&t.textures[this.uuid]!==void 0)return t.textures[this.uuid];const s={metadata:{version:4.5,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(t).uuid,mapping:this.mapping,channel:this.channel,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,internalFormat:this.internalFormat,type:this.type,colorSpace:this.colorSpace,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,generateMipmaps:this.generateMipmaps,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return Object.keys(this.userData).length>0&&(s.userData=this.userData),i||(t.textures[this.uuid]=s),s}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(t){if(this.mapping!==Dv)return t;if(t.applyMatrix3(this.matrix),t.x<0||t.x>1)switch(this.wrapS){case im:t.x=t.x-Math.floor(t.x);break;case os:t.x=t.x<0?0:1;break;case rm:Math.abs(Math.floor(t.x)%2)===1?t.x=Math.ceil(t.x)-t.x:t.x=t.x-Math.floor(t.x);break}if(t.y<0||t.y>1)switch(this.wrapT){case im:t.y=t.y-Math.floor(t.y);break;case os:t.y=t.y<0?0:1;break;case rm:Math.abs(Math.floor(t.y)%2)===1?t.y=Math.ceil(t.y)-t.y:t.y=t.y-Math.floor(t.y);break}return this.flipY&&(t.y=1-t.y),t}set needsUpdate(t){t===!0&&(this.version++,this.source.needsUpdate=!0)}get encoding(){return vh("THREE.Texture: Property .encoding has been replaced by .colorSpace."),this.colorSpace===vn?Mo:Iv}set encoding(t){vh("THREE.Texture: Property .encoding has been replaced by .colorSpace."),this.colorSpace=t===Mo?vn:So}}fr.DEFAULT_IMAGE=null;fr.DEFAULT_MAPPING=Dv;fr.DEFAULT_ANISOTROPY=1;class Bi{constructor(t=0,i=0,s=0,o=1){Bi.prototype.isVector4=!0,this.x=t,this.y=i,this.z=s,this.w=o}get width(){return this.z}set width(t){this.z=t}get height(){return this.w}set height(t){this.w=t}set(t,i,s,o){return this.x=t,this.y=i,this.z=s,this.w=o,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this.w=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setW(t){return this.w=t,this}setComponent(t,i){switch(t){case 0:this.x=i;break;case 1:this.y=i;break;case 2:this.z=i;break;case 3:this.w=i;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w!==void 0?t.w:1,this}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this.w+=t.w,this}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this.w+=t,this}addVectors(t,i){return this.x=t.x+i.x,this.y=t.y+i.y,this.z=t.z+i.z,this.w=t.w+i.w,this}addScaledVector(t,i){return this.x+=t.x*i,this.y+=t.y*i,this.z+=t.z*i,this.w+=t.w*i,this}sub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this.w-=t.w,this}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this.w-=t,this}subVectors(t,i){return this.x=t.x-i.x,this.y=t.y-i.y,this.z=t.z-i.z,this.w=t.w-i.w,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this.w*=t.w,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this.w*=t,this}applyMatrix4(t){const i=this.x,s=this.y,o=this.z,f=this.w,m=t.elements;return this.x=m[0]*i+m[4]*s+m[8]*o+m[12]*f,this.y=m[1]*i+m[5]*s+m[9]*o+m[13]*f,this.z=m[2]*i+m[6]*s+m[10]*o+m[14]*f,this.w=m[3]*i+m[7]*s+m[11]*o+m[15]*f,this}divideScalar(t){return this.multiplyScalar(1/t)}setAxisAngleFromQuaternion(t){this.w=2*Math.acos(t.w);const i=Math.sqrt(1-t.w*t.w);return i<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=t.x/i,this.y=t.y/i,this.z=t.z/i),this}setAxisAngleFromRotationMatrix(t){let i,s,o,f;const v=t.elements,x=v[0],M=v[4],b=v[8],T=v[1],P=v[5],N=v[9],L=v[2],D=v[6],R=v[10];if(Math.abs(M-T)<.01&&Math.abs(b-L)<.01&&Math.abs(N-D)<.01){if(Math.abs(M+T)<.1&&Math.abs(b+L)<.1&&Math.abs(N+D)<.1&&Math.abs(x+P+R-3)<.1)return this.set(1,0,0,0),this;i=Math.PI;const V=(x+1)/2,q=(P+1)/2,H=(R+1)/2,Q=(M+T)/4,re=(b+L)/4,oe=(N+D)/4;return V>q&&V>H?V<.01?(s=0,o=.707106781,f=.707106781):(s=Math.sqrt(V),o=Q/s,f=re/s):q>H?q<.01?(s=.707106781,o=0,f=.707106781):(o=Math.sqrt(q),s=Q/o,f=oe/o):H<.01?(s=.707106781,o=.707106781,f=0):(f=Math.sqrt(H),s=re/f,o=oe/f),this.set(s,o,f,i),this}let W=Math.sqrt((D-N)*(D-N)+(b-L)*(b-L)+(T-M)*(T-M));return Math.abs(W)<.001&&(W=1),this.x=(D-N)/W,this.y=(b-L)/W,this.z=(T-M)/W,this.w=Math.acos((x+P+R-1)/2),this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this.w=Math.min(this.w,t.w),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this.w=Math.max(this.w,t.w),this}clamp(t,i){return this.x=Math.max(t.x,Math.min(i.x,this.x)),this.y=Math.max(t.y,Math.min(i.y,this.y)),this.z=Math.max(t.z,Math.min(i.z,this.z)),this.w=Math.max(t.w,Math.min(i.w,this.w)),this}clampScalar(t,i){return this.x=Math.max(t,Math.min(i,this.x)),this.y=Math.max(t,Math.min(i,this.y)),this.z=Math.max(t,Math.min(i,this.z)),this.w=Math.max(t,Math.min(i,this.w)),this}clampLength(t,i){const s=this.length();return this.divideScalar(s||1).multiplyScalar(Math.max(t,Math.min(i,s)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,i){return this.x+=(t.x-this.x)*i,this.y+=(t.y-this.y)*i,this.z+=(t.z-this.z)*i,this.w+=(t.w-this.w)*i,this}lerpVectors(t,i,s){return this.x=t.x+(i.x-t.x)*s,this.y=t.y+(i.y-t.y)*s,this.z=t.z+(i.z-t.z)*s,this.w=t.w+(i.w-t.w)*s,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z&&t.w===this.w}fromArray(t,i=0){return this.x=t[i],this.y=t[i+1],this.z=t[i+2],this.w=t[i+3],this}toArray(t=[],i=0){return t[i]=this.x,t[i+1]=this.y,t[i+2]=this.z,t[i+3]=this.w,t}fromBufferAttribute(t,i){return this.x=t.getX(i),this.y=t.getY(i),this.z=t.getZ(i),this.w=t.getW(i),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}}class Ao extends Lo{constructor(t=1,i=1,s={}){super(),this.isWebGLRenderTarget=!0,this.width=t,this.height=i,this.depth=1,this.scissor=new Bi(0,0,t,i),this.scissorTest=!1,this.viewport=new Bi(0,0,t,i);const o={width:t,height:i,depth:1};s.encoding!==void 0&&(vh("THREE.WebGLRenderTarget: option.encoding has been replaced by option.colorSpace."),s.colorSpace=s.encoding===Mo?vn:So),this.texture=new fr(o,s.mapping,s.wrapS,s.wrapT,s.magFilter,s.minFilter,s.format,s.type,s.anisotropy,s.colorSpace),this.texture.isRenderTargetTexture=!0,this.texture.flipY=!1,this.texture.generateMipmaps=s.generateMipmaps!==void 0?s.generateMipmaps:!1,this.texture.internalFormat=s.internalFormat!==void 0?s.internalFormat:null,this.texture.minFilter=s.minFilter!==void 0?s.minFilter:Or,this.depthBuffer=s.depthBuffer!==void 0?s.depthBuffer:!0,this.stencilBuffer=s.stencilBuffer!==void 0?s.stencilBuffer:!1,this.depthTexture=s.depthTexture!==void 0?s.depthTexture:null,this.samples=s.samples!==void 0?s.samples:0}setSize(t,i,s=1){(this.width!==t||this.height!==i||this.depth!==s)&&(this.width=t,this.height=i,this.depth=s,this.texture.image.width=t,this.texture.image.height=i,this.texture.image.depth=s,this.dispose()),this.viewport.set(0,0,t,i),this.scissor.set(0,0,t,i)}clone(){return new this.constructor().copy(this)}copy(t){this.width=t.width,this.height=t.height,this.depth=t.depth,this.scissor.copy(t.scissor),this.scissorTest=t.scissorTest,this.viewport.copy(t.viewport),this.texture=t.texture.clone(),this.texture.isRenderTargetTexture=!0;const i=Object.assign({},t.texture.image);return this.texture.source=new Bv(i),this.depthBuffer=t.depthBuffer,this.stencilBuffer=t.stencilBuffer,t.depthTexture!==null&&(this.depthTexture=t.depthTexture.clone()),this.samples=t.samples,this}dispose(){this.dispatchEvent({type:"dispose"})}}class zv extends fr{constructor(t=null,i=1,s=1,o=1){super(null),this.isDataArrayTexture=!0,this.image={data:t,width:i,height:s,depth:o},this.magFilter=rr,this.minFilter=rr,this.wrapR=os,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class CR extends fr{constructor(t=null,i=1,s=1,o=1){super(null),this.isData3DTexture=!0,this.image={data:t,width:i,height:s,depth:o},this.magFilter=rr,this.minFilter=rr,this.wrapR=os,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class Ro{constructor(t=0,i=0,s=0,o=1){this.isQuaternion=!0,this._x=t,this._y=i,this._z=s,this._w=o}static slerpFlat(t,i,s,o,f,m,p){let v=s[o+0],x=s[o+1],M=s[o+2],b=s[o+3];const T=f[m+0],P=f[m+1],N=f[m+2],L=f[m+3];if(p===0){t[i+0]=v,t[i+1]=x,t[i+2]=M,t[i+3]=b;return}if(p===1){t[i+0]=T,t[i+1]=P,t[i+2]=N,t[i+3]=L;return}if(b!==L||v!==T||x!==P||M!==N){let D=1-p;const R=v*T+x*P+M*N+b*L,W=R>=0?1:-1,V=1-R*R;if(V>Number.EPSILON){const H=Math.sqrt(V),Q=Math.atan2(H,R*W);D=Math.sin(D*Q)/H,p=Math.sin(p*Q)/H}const q=p*W;if(v=v*D+T*q,x=x*D+P*q,M=M*D+N*q,b=b*D+L*q,D===1-p){const H=1/Math.sqrt(v*v+x*x+M*M+b*b);v*=H,x*=H,M*=H,b*=H}}t[i]=v,t[i+1]=x,t[i+2]=M,t[i+3]=b}static multiplyQuaternionsFlat(t,i,s,o,f,m){const p=s[o],v=s[o+1],x=s[o+2],M=s[o+3],b=f[m],T=f[m+1],P=f[m+2],N=f[m+3];return t[i]=p*N+M*b+v*P-x*T,t[i+1]=v*N+M*T+x*b-p*P,t[i+2]=x*N+M*P+p*T-v*b,t[i+3]=M*N-p*b-v*T-x*P,t}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get w(){return this._w}set w(t){this._w=t,this._onChangeCallback()}set(t,i,s,o){return this._x=t,this._y=i,this._z=s,this._w=o,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(t){return this._x=t.x,this._y=t.y,this._z=t.z,this._w=t.w,this._onChangeCallback(),this}setFromEuler(t,i){const s=t._x,o=t._y,f=t._z,m=t._order,p=Math.cos,v=Math.sin,x=p(s/2),M=p(o/2),b=p(f/2),T=v(s/2),P=v(o/2),N=v(f/2);switch(m){case"XYZ":this._x=T*M*b+x*P*N,this._y=x*P*b-T*M*N,this._z=x*M*N+T*P*b,this._w=x*M*b-T*P*N;break;case"YXZ":this._x=T*M*b+x*P*N,this._y=x*P*b-T*M*N,this._z=x*M*N-T*P*b,this._w=x*M*b+T*P*N;break;case"ZXY":this._x=T*M*b-x*P*N,this._y=x*P*b+T*M*N,this._z=x*M*N+T*P*b,this._w=x*M*b-T*P*N;break;case"ZYX":this._x=T*M*b-x*P*N,this._y=x*P*b+T*M*N,this._z=x*M*N-T*P*b,this._w=x*M*b+T*P*N;break;case"YZX":this._x=T*M*b+x*P*N,this._y=x*P*b+T*M*N,this._z=x*M*N-T*P*b,this._w=x*M*b-T*P*N;break;case"XZY":this._x=T*M*b-x*P*N,this._y=x*P*b-T*M*N,this._z=x*M*N+T*P*b,this._w=x*M*b+T*P*N;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+m)}return i!==!1&&this._onChangeCallback(),this}setFromAxisAngle(t,i){const s=i/2,o=Math.sin(s);return this._x=t.x*o,this._y=t.y*o,this._z=t.z*o,this._w=Math.cos(s),this._onChangeCallback(),this}setFromRotationMatrix(t){const i=t.elements,s=i[0],o=i[4],f=i[8],m=i[1],p=i[5],v=i[9],x=i[2],M=i[6],b=i[10],T=s+p+b;if(T>0){const P=.5/Math.sqrt(T+1);this._w=.25/P,this._x=(M-v)*P,this._y=(f-x)*P,this._z=(m-o)*P}else if(s>p&&s>b){const P=2*Math.sqrt(1+s-p-b);this._w=(M-v)/P,this._x=.25*P,this._y=(o+m)/P,this._z=(f+x)/P}else if(p>b){const P=2*Math.sqrt(1+p-s-b);this._w=(f-x)/P,this._x=(o+m)/P,this._y=.25*P,this._z=(v+M)/P}else{const P=2*Math.sqrt(1+b-s-p);this._w=(m-o)/P,this._x=(f+x)/P,this._y=(v+M)/P,this._z=.25*P}return this._onChangeCallback(),this}setFromUnitVectors(t,i){let s=t.dot(i)+1;return s<Number.EPSILON?(s=0,Math.abs(t.x)>Math.abs(t.z)?(this._x=-t.y,this._y=t.x,this._z=0,this._w=s):(this._x=0,this._y=-t.z,this._z=t.y,this._w=s)):(this._x=t.y*i.z-t.z*i.y,this._y=t.z*i.x-t.x*i.z,this._z=t.x*i.y-t.y*i.x,this._w=s),this.normalize()}angleTo(t){return 2*Math.acos(Math.abs(sr(this.dot(t),-1,1)))}rotateTowards(t,i){const s=this.angleTo(t);if(s===0)return this;const o=Math.min(1,i/s);return this.slerp(t,o),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(t){return this._x*t._x+this._y*t._y+this._z*t._z+this._w*t._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let t=this.length();return t===0?(this._x=0,this._y=0,this._z=0,this._w=1):(t=1/t,this._x=this._x*t,this._y=this._y*t,this._z=this._z*t,this._w=this._w*t),this._onChangeCallback(),this}multiply(t){return this.multiplyQuaternions(this,t)}premultiply(t){return this.multiplyQuaternions(t,this)}multiplyQuaternions(t,i){const s=t._x,o=t._y,f=t._z,m=t._w,p=i._x,v=i._y,x=i._z,M=i._w;return this._x=s*M+m*p+o*x-f*v,this._y=o*M+m*v+f*p-s*x,this._z=f*M+m*x+s*v-o*p,this._w=m*M-s*p-o*v-f*x,this._onChangeCallback(),this}slerp(t,i){if(i===0)return this;if(i===1)return this.copy(t);const s=this._x,o=this._y,f=this._z,m=this._w;let p=m*t._w+s*t._x+o*t._y+f*t._z;if(p<0?(this._w=-t._w,this._x=-t._x,this._y=-t._y,this._z=-t._z,p=-p):this.copy(t),p>=1)return this._w=m,this._x=s,this._y=o,this._z=f,this;const v=1-p*p;if(v<=Number.EPSILON){const P=1-i;return this._w=P*m+i*this._w,this._x=P*s+i*this._x,this._y=P*o+i*this._y,this._z=P*f+i*this._z,this.normalize(),this._onChangeCallback(),this}const x=Math.sqrt(v),M=Math.atan2(x,p),b=Math.sin((1-i)*M)/x,T=Math.sin(i*M)/x;return this._w=m*b+this._w*T,this._x=s*b+this._x*T,this._y=o*b+this._y*T,this._z=f*b+this._z*T,this._onChangeCallback(),this}slerpQuaternions(t,i,s){return this.copy(t).slerp(i,s)}random(){const t=Math.random(),i=Math.sqrt(1-t),s=Math.sqrt(t),o=2*Math.PI*Math.random(),f=2*Math.PI*Math.random();return this.set(i*Math.cos(o),s*Math.sin(f),s*Math.cos(f),i*Math.sin(o))}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._w===this._w}fromArray(t,i=0){return this._x=t[i],this._y=t[i+1],this._z=t[i+2],this._w=t[i+3],this._onChangeCallback(),this}toArray(t=[],i=0){return t[i]=this._x,t[i+1]=this._y,t[i+2]=this._z,t[i+3]=this._w,t}fromBufferAttribute(t,i){return this._x=t.getX(i),this._y=t.getY(i),this._z=t.getZ(i),this._w=t.getW(i),this}toJSON(){return this.toArray()}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w}}class pe{constructor(t=0,i=0,s=0){pe.prototype.isVector3=!0,this.x=t,this.y=i,this.z=s}set(t,i,s){return s===void 0&&(s=this.z),this.x=t,this.y=i,this.z=s,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setComponent(t,i){switch(t){case 0:this.x=i;break;case 1:this.y=i;break;case 2:this.z=i;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this}addVectors(t,i){return this.x=t.x+i.x,this.y=t.y+i.y,this.z=t.z+i.z,this}addScaledVector(t,i){return this.x+=t.x*i,this.y+=t.y*i,this.z+=t.z*i,this}sub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this}subVectors(t,i){return this.x=t.x-i.x,this.y=t.y-i.y,this.z=t.z-i.z,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this}multiplyVectors(t,i){return this.x=t.x*i.x,this.y=t.y*i.y,this.z=t.z*i.z,this}applyEuler(t){return this.applyQuaternion(gx.setFromEuler(t))}applyAxisAngle(t,i){return this.applyQuaternion(gx.setFromAxisAngle(t,i))}applyMatrix3(t){const i=this.x,s=this.y,o=this.z,f=t.elements;return this.x=f[0]*i+f[3]*s+f[6]*o,this.y=f[1]*i+f[4]*s+f[7]*o,this.z=f[2]*i+f[5]*s+f[8]*o,this}applyNormalMatrix(t){return this.applyMatrix3(t).normalize()}applyMatrix4(t){const i=this.x,s=this.y,o=this.z,f=t.elements,m=1/(f[3]*i+f[7]*s+f[11]*o+f[15]);return this.x=(f[0]*i+f[4]*s+f[8]*o+f[12])*m,this.y=(f[1]*i+f[5]*s+f[9]*o+f[13])*m,this.z=(f[2]*i+f[6]*s+f[10]*o+f[14])*m,this}applyQuaternion(t){const i=this.x,s=this.y,o=this.z,f=t.x,m=t.y,p=t.z,v=t.w,x=v*i+m*o-p*s,M=v*s+p*i-f*o,b=v*o+f*s-m*i,T=-f*i-m*s-p*o;return this.x=x*v+T*-f+M*-p-b*-m,this.y=M*v+T*-m+b*-f-x*-p,this.z=b*v+T*-p+x*-m-M*-f,this}project(t){return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(t.projectionMatrix)}unproject(t){return this.applyMatrix4(t.projectionMatrixInverse).applyMatrix4(t.matrixWorld)}transformDirection(t){const i=this.x,s=this.y,o=this.z,f=t.elements;return this.x=f[0]*i+f[4]*s+f[8]*o,this.y=f[1]*i+f[5]*s+f[9]*o,this.z=f[2]*i+f[6]*s+f[10]*o,this.normalize()}divide(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this}divideScalar(t){return this.multiplyScalar(1/t)}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this}clamp(t,i){return this.x=Math.max(t.x,Math.min(i.x,this.x)),this.y=Math.max(t.y,Math.min(i.y,this.y)),this.z=Math.max(t.z,Math.min(i.z,this.z)),this}clampScalar(t,i){return this.x=Math.max(t,Math.min(i,this.x)),this.y=Math.max(t,Math.min(i,this.y)),this.z=Math.max(t,Math.min(i,this.z)),this}clampLength(t,i){const s=this.length();return this.divideScalar(s||1).multiplyScalar(Math.max(t,Math.min(i,s)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,i){return this.x+=(t.x-this.x)*i,this.y+=(t.y-this.y)*i,this.z+=(t.z-this.z)*i,this}lerpVectors(t,i,s){return this.x=t.x+(i.x-t.x)*s,this.y=t.y+(i.y-t.y)*s,this.z=t.z+(i.z-t.z)*s,this}cross(t){return this.crossVectors(this,t)}crossVectors(t,i){const s=t.x,o=t.y,f=t.z,m=i.x,p=i.y,v=i.z;return this.x=o*v-f*p,this.y=f*m-s*v,this.z=s*p-o*m,this}projectOnVector(t){const i=t.lengthSq();if(i===0)return this.set(0,0,0);const s=t.dot(this)/i;return this.copy(t).multiplyScalar(s)}projectOnPlane(t){return bp.copy(this).projectOnVector(t),this.sub(bp)}reflect(t){return this.sub(bp.copy(t).multiplyScalar(2*this.dot(t)))}angleTo(t){const i=Math.sqrt(this.lengthSq()*t.lengthSq());if(i===0)return Math.PI/2;const s=this.dot(t)/i;return Math.acos(sr(s,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const i=this.x-t.x,s=this.y-t.y,o=this.z-t.z;return i*i+s*s+o*o}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)+Math.abs(this.z-t.z)}setFromSpherical(t){return this.setFromSphericalCoords(t.radius,t.phi,t.theta)}setFromSphericalCoords(t,i,s){const o=Math.sin(i)*t;return this.x=o*Math.sin(s),this.y=Math.cos(i)*t,this.z=o*Math.cos(s),this}setFromCylindrical(t){return this.setFromCylindricalCoords(t.radius,t.theta,t.y)}setFromCylindricalCoords(t,i,s){return this.x=t*Math.sin(i),this.y=s,this.z=t*Math.cos(i),this}setFromMatrixPosition(t){const i=t.elements;return this.x=i[12],this.y=i[13],this.z=i[14],this}setFromMatrixScale(t){const i=this.setFromMatrixColumn(t,0).length(),s=this.setFromMatrixColumn(t,1).length(),o=this.setFromMatrixColumn(t,2).length();return this.x=i,this.y=s,this.z=o,this}setFromMatrixColumn(t,i){return this.fromArray(t.elements,i*4)}setFromMatrix3Column(t,i){return this.fromArray(t.elements,i*3)}setFromEuler(t){return this.x=t._x,this.y=t._y,this.z=t._z,this}setFromColor(t){return this.x=t.r,this.y=t.g,this.z=t.b,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z}fromArray(t,i=0){return this.x=t[i],this.y=t[i+1],this.z=t[i+2],this}toArray(t=[],i=0){return t[i]=this.x,t[i+1]=this.y,t[i+2]=this.z,t}fromBufferAttribute(t,i){return this.x=t.getX(i),this.y=t.getY(i),this.z=t.getZ(i),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const t=(Math.random()-.5)*2,i=Math.random()*Math.PI*2,s=Math.sqrt(1-t**2);return this.x=s*Math.cos(i),this.y=s*Math.sin(i),this.z=t,this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}}const bp=new pe,gx=new Ro;class Do{constructor(t=new pe(1/0,1/0,1/0),i=new pe(-1/0,-1/0,-1/0)){this.isBox3=!0,this.min=t,this.max=i}set(t,i){return this.min.copy(t),this.max.copy(i),this}setFromArray(t){this.makeEmpty();for(let i=0,s=t.length;i<s;i+=3)this.expandByPoint(Gs.fromArray(t,i));return this}setFromBufferAttribute(t){this.makeEmpty();for(let i=0,s=t.count;i<s;i++)this.expandByPoint(Gs.fromBufferAttribute(t,i));return this}setFromPoints(t){this.makeEmpty();for(let i=0,s=t.length;i<s;i++)this.expandByPoint(t[i]);return this}setFromCenterAndSize(t,i){const s=Gs.copy(i).multiplyScalar(.5);return this.min.copy(t).sub(s),this.max.copy(t).add(s),this}setFromObject(t,i=!1){return this.makeEmpty(),this.expandByObject(t,i)}clone(){return new this.constructor().copy(this)}copy(t){return this.min.copy(t.min),this.max.copy(t.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(t){return this.isEmpty()?t.set(0,0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(t){return this.isEmpty()?t.set(0,0,0):t.subVectors(this.max,this.min)}expandByPoint(t){return this.min.min(t),this.max.max(t),this}expandByVector(t){return this.min.sub(t),this.max.add(t),this}expandByScalar(t){return this.min.addScalar(-t),this.max.addScalar(t),this}expandByObject(t,i=!1){if(t.updateWorldMatrix(!1,!1),t.boundingBox!==void 0)t.boundingBox===null&&t.computeBoundingBox(),Sl.copy(t.boundingBox),Sl.applyMatrix4(t.matrixWorld),this.union(Sl);else{const o=t.geometry;if(o!==void 0)if(i&&o.attributes!==void 0&&o.attributes.position!==void 0){const f=o.attributes.position;for(let m=0,p=f.count;m<p;m++)Gs.fromBufferAttribute(f,m).applyMatrix4(t.matrixWorld),this.expandByPoint(Gs)}else o.boundingBox===null&&o.computeBoundingBox(),Sl.copy(o.boundingBox),Sl.applyMatrix4(t.matrixWorld),this.union(Sl)}const s=t.children;for(let o=0,f=s.length;o<f;o++)this.expandByObject(s[o],i);return this}containsPoint(t){return!(t.x<this.min.x||t.x>this.max.x||t.y<this.min.y||t.y>this.max.y||t.z<this.min.z||t.z>this.max.z)}containsBox(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y&&this.min.z<=t.min.z&&t.max.z<=this.max.z}getParameter(t,i){return i.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y),(t.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(t){return!(t.max.x<this.min.x||t.min.x>this.max.x||t.max.y<this.min.y||t.min.y>this.max.y||t.max.z<this.min.z||t.min.z>this.max.z)}intersectsSphere(t){return this.clampPoint(t.center,Gs),Gs.distanceToSquared(t.center)<=t.radius*t.radius}intersectsPlane(t){let i,s;return t.normal.x>0?(i=t.normal.x*this.min.x,s=t.normal.x*this.max.x):(i=t.normal.x*this.max.x,s=t.normal.x*this.min.x),t.normal.y>0?(i+=t.normal.y*this.min.y,s+=t.normal.y*this.max.y):(i+=t.normal.y*this.max.y,s+=t.normal.y*this.min.y),t.normal.z>0?(i+=t.normal.z*this.min.z,s+=t.normal.z*this.max.z):(i+=t.normal.z*this.max.z,s+=t.normal.z*this.min.z),i<=-t.constant&&s>=-t.constant}intersectsTriangle(t){if(this.isEmpty())return!1;this.getCenter(sh),Wu.subVectors(this.max,sh),El.subVectors(t.a,sh),bl.subVectors(t.b,sh),Tl.subVectors(t.c,sh),pa.subVectors(bl,El),ma.subVectors(Tl,bl),oo.subVectors(El,Tl);let i=[0,-pa.z,pa.y,0,-ma.z,ma.y,0,-oo.z,oo.y,pa.z,0,-pa.x,ma.z,0,-ma.x,oo.z,0,-oo.x,-pa.y,pa.x,0,-ma.y,ma.x,0,-oo.y,oo.x,0];return!Tp(i,El,bl,Tl,Wu)||(i=[1,0,0,0,1,0,0,0,1],!Tp(i,El,bl,Tl,Wu))?!1:(Xu.crossVectors(pa,ma),i=[Xu.x,Xu.y,Xu.z],Tp(i,El,bl,Tl,Wu))}clampPoint(t,i){return i.copy(t).clamp(this.min,this.max)}distanceToPoint(t){return this.clampPoint(t,Gs).distanceTo(t)}getBoundingSphere(t){return this.isEmpty()?t.makeEmpty():(this.getCenter(t.center),t.radius=this.getSize(Gs).length()*.5),t}intersect(t){return this.min.max(t.min),this.max.min(t.max),this.isEmpty()&&this.makeEmpty(),this}union(t){return this.min.min(t.min),this.max.max(t.max),this}applyMatrix4(t){return this.isEmpty()?this:(ks[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(t),ks[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(t),ks[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(t),ks[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(t),ks[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(t),ks[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(t),ks[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(t),ks[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(t),this.setFromPoints(ks),this)}translate(t){return this.min.add(t),this.max.add(t),this}equals(t){return t.min.equals(this.min)&&t.max.equals(this.max)}}const ks=[new pe,new pe,new pe,new pe,new pe,new pe,new pe,new pe],Gs=new pe,Sl=new Do,El=new pe,bl=new pe,Tl=new pe,pa=new pe,ma=new pe,oo=new pe,sh=new pe,Wu=new pe,Xu=new pe,lo=new pe;function Tp(h,t,i,s,o){for(let f=0,m=h.length-3;f<=m;f+=3){lo.fromArray(h,f);const p=o.x*Math.abs(lo.x)+o.y*Math.abs(lo.y)+o.z*Math.abs(lo.z),v=t.dot(lo),x=i.dot(lo),M=s.dot(lo);if(Math.max(-Math.max(v,x,M),Math.min(v,x,M))>p)return!1}return!0}const PR=new Do,ah=new pe,wp=new pe;class hc{constructor(t=new pe,i=-1){this.center=t,this.radius=i}set(t,i){return this.center.copy(t),this.radius=i,this}setFromPoints(t,i){const s=this.center;i!==void 0?s.copy(i):PR.setFromPoints(t).getCenter(s);let o=0;for(let f=0,m=t.length;f<m;f++)o=Math.max(o,s.distanceToSquared(t[f]));return this.radius=Math.sqrt(o),this}copy(t){return this.center.copy(t.center),this.radius=t.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(t){return t.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(t){return t.distanceTo(this.center)-this.radius}intersectsSphere(t){const i=this.radius+t.radius;return t.center.distanceToSquared(this.center)<=i*i}intersectsBox(t){return t.intersectsSphere(this)}intersectsPlane(t){return Math.abs(t.distanceToPoint(this.center))<=this.radius}clampPoint(t,i){const s=this.center.distanceToSquared(t);return i.copy(t),s>this.radius*this.radius&&(i.sub(this.center).normalize(),i.multiplyScalar(this.radius).add(this.center)),i}getBoundingBox(t){return this.isEmpty()?(t.makeEmpty(),t):(t.set(this.center,this.center),t.expandByScalar(this.radius),t)}applyMatrix4(t){return this.center.applyMatrix4(t),this.radius=this.radius*t.getMaxScaleOnAxis(),this}translate(t){return this.center.add(t),this}expandByPoint(t){if(this.isEmpty())return this.center.copy(t),this.radius=0,this;ah.subVectors(t,this.center);const i=ah.lengthSq();if(i>this.radius*this.radius){const s=Math.sqrt(i),o=(s-this.radius)*.5;this.center.addScaledVector(ah,o/s),this.radius+=o}return this}union(t){return t.isEmpty()?this:this.isEmpty()?(this.copy(t),this):(this.center.equals(t.center)===!0?this.radius=Math.max(this.radius,t.radius):(wp.subVectors(t.center,this.center).setLength(t.radius),this.expandByPoint(ah.copy(t.center).add(wp)),this.expandByPoint(ah.copy(t.center).sub(wp))),this)}equals(t){return t.center.equals(this.center)&&t.radius===this.radius}clone(){return new this.constructor().copy(this)}}const Hs=new pe,Ap=new pe,qu=new pe,ga=new pe,Rp=new pe,Yu=new pe,Cp=new pe;class Tm{constructor(t=new pe,i=new pe(0,0,-1)){this.origin=t,this.direction=i}set(t,i){return this.origin.copy(t),this.direction.copy(i),this}copy(t){return this.origin.copy(t.origin),this.direction.copy(t.direction),this}at(t,i){return i.copy(this.origin).addScaledVector(this.direction,t)}lookAt(t){return this.direction.copy(t).sub(this.origin).normalize(),this}recast(t){return this.origin.copy(this.at(t,Hs)),this}closestPointToPoint(t,i){i.subVectors(t,this.origin);const s=i.dot(this.direction);return s<0?i.copy(this.origin):i.copy(this.origin).addScaledVector(this.direction,s)}distanceToPoint(t){return Math.sqrt(this.distanceSqToPoint(t))}distanceSqToPoint(t){const i=Hs.subVectors(t,this.origin).dot(this.direction);return i<0?this.origin.distanceToSquared(t):(Hs.copy(this.origin).addScaledVector(this.direction,i),Hs.distanceToSquared(t))}distanceSqToSegment(t,i,s,o){Ap.copy(t).add(i).multiplyScalar(.5),qu.copy(i).sub(t).normalize(),ga.copy(this.origin).sub(Ap);const f=t.distanceTo(i)*.5,m=-this.direction.dot(qu),p=ga.dot(this.direction),v=-ga.dot(qu),x=ga.lengthSq(),M=Math.abs(1-m*m);let b,T,P,N;if(M>0)if(b=m*v-p,T=m*p-v,N=f*M,b>=0)if(T>=-N)if(T<=N){const L=1/M;b*=L,T*=L,P=b*(b+m*T+2*p)+T*(m*b+T+2*v)+x}else T=f,b=Math.max(0,-(m*T+p)),P=-b*b+T*(T+2*v)+x;else T=-f,b=Math.max(0,-(m*T+p)),P=-b*b+T*(T+2*v)+x;else T<=-N?(b=Math.max(0,-(-m*f+p)),T=b>0?-f:Math.min(Math.max(-f,-v),f),P=-b*b+T*(T+2*v)+x):T<=N?(b=0,T=Math.min(Math.max(-f,-v),f),P=T*(T+2*v)+x):(b=Math.max(0,-(m*f+p)),T=b>0?f:Math.min(Math.max(-f,-v),f),P=-b*b+T*(T+2*v)+x);else T=m>0?-f:f,b=Math.max(0,-(m*T+p)),P=-b*b+T*(T+2*v)+x;return s&&s.copy(this.origin).addScaledVector(this.direction,b),o&&o.copy(Ap).addScaledVector(qu,T),P}intersectSphere(t,i){Hs.subVectors(t.center,this.origin);const s=Hs.dot(this.direction),o=Hs.dot(Hs)-s*s,f=t.radius*t.radius;if(o>f)return null;const m=Math.sqrt(f-o),p=s-m,v=s+m;return v<0?null:p<0?this.at(v,i):this.at(p,i)}intersectsSphere(t){return this.distanceSqToPoint(t.center)<=t.radius*t.radius}distanceToPlane(t){const i=t.normal.dot(this.direction);if(i===0)return t.distanceToPoint(this.origin)===0?0:null;const s=-(this.origin.dot(t.normal)+t.constant)/i;return s>=0?s:null}intersectPlane(t,i){const s=this.distanceToPlane(t);return s===null?null:this.at(s,i)}intersectsPlane(t){const i=t.distanceToPoint(this.origin);return i===0||t.normal.dot(this.direction)*i<0}intersectBox(t,i){let s,o,f,m,p,v;const x=1/this.direction.x,M=1/this.direction.y,b=1/this.direction.z,T=this.origin;return x>=0?(s=(t.min.x-T.x)*x,o=(t.max.x-T.x)*x):(s=(t.max.x-T.x)*x,o=(t.min.x-T.x)*x),M>=0?(f=(t.min.y-T.y)*M,m=(t.max.y-T.y)*M):(f=(t.max.y-T.y)*M,m=(t.min.y-T.y)*M),s>m||f>o||((f>s||isNaN(s))&&(s=f),(m<o||isNaN(o))&&(o=m),b>=0?(p=(t.min.z-T.z)*b,v=(t.max.z-T.z)*b):(p=(t.max.z-T.z)*b,v=(t.min.z-T.z)*b),s>v||p>o)||((p>s||s!==s)&&(s=p),(v<o||o!==o)&&(o=v),o<0)?null:this.at(s>=0?s:o,i)}intersectsBox(t){return this.intersectBox(t,Hs)!==null}intersectTriangle(t,i,s,o,f){Rp.subVectors(i,t),Yu.subVectors(s,t),Cp.crossVectors(Rp,Yu);let m=this.direction.dot(Cp),p;if(m>0){if(o)return null;p=1}else if(m<0)p=-1,m=-m;else return null;ga.subVectors(this.origin,t);const v=p*this.direction.dot(Yu.crossVectors(ga,Yu));if(v<0)return null;const x=p*this.direction.dot(Rp.cross(ga));if(x<0||v+x>m)return null;const M=-p*ga.dot(Cp);return M<0?null:this.at(M/m,f)}applyMatrix4(t){return this.origin.applyMatrix4(t),this.direction.transformDirection(t),this}equals(t){return t.origin.equals(this.origin)&&t.direction.equals(this.direction)}clone(){return new this.constructor().copy(this)}}class oi{constructor(){oi.prototype.isMatrix4=!0,this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]}set(t,i,s,o,f,m,p,v,x,M,b,T,P,N,L,D){const R=this.elements;return R[0]=t,R[4]=i,R[8]=s,R[12]=o,R[1]=f,R[5]=m,R[9]=p,R[13]=v,R[2]=x,R[6]=M,R[10]=b,R[14]=T,R[3]=P,R[7]=N,R[11]=L,R[15]=D,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return new oi().fromArray(this.elements)}copy(t){const i=this.elements,s=t.elements;return i[0]=s[0],i[1]=s[1],i[2]=s[2],i[3]=s[3],i[4]=s[4],i[5]=s[5],i[6]=s[6],i[7]=s[7],i[8]=s[8],i[9]=s[9],i[10]=s[10],i[11]=s[11],i[12]=s[12],i[13]=s[13],i[14]=s[14],i[15]=s[15],this}copyPosition(t){const i=this.elements,s=t.elements;return i[12]=s[12],i[13]=s[13],i[14]=s[14],this}setFromMatrix3(t){const i=t.elements;return this.set(i[0],i[3],i[6],0,i[1],i[4],i[7],0,i[2],i[5],i[8],0,0,0,0,1),this}extractBasis(t,i,s){return t.setFromMatrixColumn(this,0),i.setFromMatrixColumn(this,1),s.setFromMatrixColumn(this,2),this}makeBasis(t,i,s){return this.set(t.x,i.x,s.x,0,t.y,i.y,s.y,0,t.z,i.z,s.z,0,0,0,0,1),this}extractRotation(t){const i=this.elements,s=t.elements,o=1/wl.setFromMatrixColumn(t,0).length(),f=1/wl.setFromMatrixColumn(t,1).length(),m=1/wl.setFromMatrixColumn(t,2).length();return i[0]=s[0]*o,i[1]=s[1]*o,i[2]=s[2]*o,i[3]=0,i[4]=s[4]*f,i[5]=s[5]*f,i[6]=s[6]*f,i[7]=0,i[8]=s[8]*m,i[9]=s[9]*m,i[10]=s[10]*m,i[11]=0,i[12]=0,i[13]=0,i[14]=0,i[15]=1,this}makeRotationFromEuler(t){const i=this.elements,s=t.x,o=t.y,f=t.z,m=Math.cos(s),p=Math.sin(s),v=Math.cos(o),x=Math.sin(o),M=Math.cos(f),b=Math.sin(f);if(t.order==="XYZ"){const T=m*M,P=m*b,N=p*M,L=p*b;i[0]=v*M,i[4]=-v*b,i[8]=x,i[1]=P+N*x,i[5]=T-L*x,i[9]=-p*v,i[2]=L-T*x,i[6]=N+P*x,i[10]=m*v}else if(t.order==="YXZ"){const T=v*M,P=v*b,N=x*M,L=x*b;i[0]=T+L*p,i[4]=N*p-P,i[8]=m*x,i[1]=m*b,i[5]=m*M,i[9]=-p,i[2]=P*p-N,i[6]=L+T*p,i[10]=m*v}else if(t.order==="ZXY"){const T=v*M,P=v*b,N=x*M,L=x*b;i[0]=T-L*p,i[4]=-m*b,i[8]=N+P*p,i[1]=P+N*p,i[5]=m*M,i[9]=L-T*p,i[2]=-m*x,i[6]=p,i[10]=m*v}else if(t.order==="ZYX"){const T=m*M,P=m*b,N=p*M,L=p*b;i[0]=v*M,i[4]=N*x-P,i[8]=T*x+L,i[1]=v*b,i[5]=L*x+T,i[9]=P*x-N,i[2]=-x,i[6]=p*v,i[10]=m*v}else if(t.order==="YZX"){const T=m*v,P=m*x,N=p*v,L=p*x;i[0]=v*M,i[4]=L-T*b,i[8]=N*b+P,i[1]=b,i[5]=m*M,i[9]=-p*M,i[2]=-x*M,i[6]=P*b+N,i[10]=T-L*b}else if(t.order==="XZY"){const T=m*v,P=m*x,N=p*v,L=p*x;i[0]=v*M,i[4]=-b,i[8]=x*M,i[1]=T*b+L,i[5]=m*M,i[9]=P*b-N,i[2]=N*b-P,i[6]=p*M,i[10]=L*b+T}return i[3]=0,i[7]=0,i[11]=0,i[12]=0,i[13]=0,i[14]=0,i[15]=1,this}makeRotationFromQuaternion(t){return this.compose(LR,t,DR)}lookAt(t,i,s){const o=this.elements;return br.subVectors(t,i),br.lengthSq()===0&&(br.z=1),br.normalize(),_a.crossVectors(s,br),_a.lengthSq()===0&&(Math.abs(s.z)===1?br.x+=1e-4:br.z+=1e-4,br.normalize(),_a.crossVectors(s,br)),_a.normalize(),Zu.crossVectors(br,_a),o[0]=_a.x,o[4]=Zu.x,o[8]=br.x,o[1]=_a.y,o[5]=Zu.y,o[9]=br.y,o[2]=_a.z,o[6]=Zu.z,o[10]=br.z,this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,i){const s=t.elements,o=i.elements,f=this.elements,m=s[0],p=s[4],v=s[8],x=s[12],M=s[1],b=s[5],T=s[9],P=s[13],N=s[2],L=s[6],D=s[10],R=s[14],W=s[3],V=s[7],q=s[11],H=s[15],Q=o[0],re=o[4],oe=o[8],B=o[12],te=o[1],we=o[5],Ae=o[9],de=o[13],xe=o[2],ye=o[6],He=o[10],be=o[14],Le=o[3],nt=o[7],Ye=o[11],It=o[15];return f[0]=m*Q+p*te+v*xe+x*Le,f[4]=m*re+p*we+v*ye+x*nt,f[8]=m*oe+p*Ae+v*He+x*Ye,f[12]=m*B+p*de+v*be+x*It,f[1]=M*Q+b*te+T*xe+P*Le,f[5]=M*re+b*we+T*ye+P*nt,f[9]=M*oe+b*Ae+T*He+P*Ye,f[13]=M*B+b*de+T*be+P*It,f[2]=N*Q+L*te+D*xe+R*Le,f[6]=N*re+L*we+D*ye+R*nt,f[10]=N*oe+L*Ae+D*He+R*Ye,f[14]=N*B+L*de+D*be+R*It,f[3]=W*Q+V*te+q*xe+H*Le,f[7]=W*re+V*we+q*ye+H*nt,f[11]=W*oe+V*Ae+q*He+H*Ye,f[15]=W*B+V*de+q*be+H*It,this}multiplyScalar(t){const i=this.elements;return i[0]*=t,i[4]*=t,i[8]*=t,i[12]*=t,i[1]*=t,i[5]*=t,i[9]*=t,i[13]*=t,i[2]*=t,i[6]*=t,i[10]*=t,i[14]*=t,i[3]*=t,i[7]*=t,i[11]*=t,i[15]*=t,this}determinant(){const t=this.elements,i=t[0],s=t[4],o=t[8],f=t[12],m=t[1],p=t[5],v=t[9],x=t[13],M=t[2],b=t[6],T=t[10],P=t[14],N=t[3],L=t[7],D=t[11],R=t[15];return N*(+f*v*b-o*x*b-f*p*T+s*x*T+o*p*P-s*v*P)+L*(+i*v*P-i*x*T+f*m*T-o*m*P+o*x*M-f*v*M)+D*(+i*x*b-i*p*P-f*m*b+s*m*P+f*p*M-s*x*M)+R*(-o*p*M-i*v*b+i*p*T+o*m*b-s*m*T+s*v*M)}transpose(){const t=this.elements;let i;return i=t[1],t[1]=t[4],t[4]=i,i=t[2],t[2]=t[8],t[8]=i,i=t[6],t[6]=t[9],t[9]=i,i=t[3],t[3]=t[12],t[12]=i,i=t[7],t[7]=t[13],t[13]=i,i=t[11],t[11]=t[14],t[14]=i,this}setPosition(t,i,s){const o=this.elements;return t.isVector3?(o[12]=t.x,o[13]=t.y,o[14]=t.z):(o[12]=t,o[13]=i,o[14]=s),this}invert(){const t=this.elements,i=t[0],s=t[1],o=t[2],f=t[3],m=t[4],p=t[5],v=t[6],x=t[7],M=t[8],b=t[9],T=t[10],P=t[11],N=t[12],L=t[13],D=t[14],R=t[15],W=b*D*x-L*T*x+L*v*P-p*D*P-b*v*R+p*T*R,V=N*T*x-M*D*x-N*v*P+m*D*P+M*v*R-m*T*R,q=M*L*x-N*b*x+N*p*P-m*L*P-M*p*R+m*b*R,H=N*b*v-M*L*v-N*p*T+m*L*T+M*p*D-m*b*D,Q=i*W+s*V+o*q+f*H;if(Q===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const re=1/Q;return t[0]=W*re,t[1]=(L*T*f-b*D*f-L*o*P+s*D*P+b*o*R-s*T*R)*re,t[2]=(p*D*f-L*v*f+L*o*x-s*D*x-p*o*R+s*v*R)*re,t[3]=(b*v*f-p*T*f-b*o*x+s*T*x+p*o*P-s*v*P)*re,t[4]=V*re,t[5]=(M*D*f-N*T*f+N*o*P-i*D*P-M*o*R+i*T*R)*re,t[6]=(N*v*f-m*D*f-N*o*x+i*D*x+m*o*R-i*v*R)*re,t[7]=(m*T*f-M*v*f+M*o*x-i*T*x-m*o*P+i*v*P)*re,t[8]=q*re,t[9]=(N*b*f-M*L*f-N*s*P+i*L*P+M*s*R-i*b*R)*re,t[10]=(m*L*f-N*p*f+N*s*x-i*L*x-m*s*R+i*p*R)*re,t[11]=(M*p*f-m*b*f-M*s*x+i*b*x+m*s*P-i*p*P)*re,t[12]=H*re,t[13]=(M*L*o-N*b*o+N*s*T-i*L*T-M*s*D+i*b*D)*re,t[14]=(N*p*o-m*L*o-N*s*v+i*L*v+m*s*D-i*p*D)*re,t[15]=(m*b*o-M*p*o+M*s*v-i*b*v-m*s*T+i*p*T)*re,this}scale(t){const i=this.elements,s=t.x,o=t.y,f=t.z;return i[0]*=s,i[4]*=o,i[8]*=f,i[1]*=s,i[5]*=o,i[9]*=f,i[2]*=s,i[6]*=o,i[10]*=f,i[3]*=s,i[7]*=o,i[11]*=f,this}getMaxScaleOnAxis(){const t=this.elements,i=t[0]*t[0]+t[1]*t[1]+t[2]*t[2],s=t[4]*t[4]+t[5]*t[5]+t[6]*t[6],o=t[8]*t[8]+t[9]*t[9]+t[10]*t[10];return Math.sqrt(Math.max(i,s,o))}makeTranslation(t,i,s){return this.set(1,0,0,t,0,1,0,i,0,0,1,s,0,0,0,1),this}makeRotationX(t){const i=Math.cos(t),s=Math.sin(t);return this.set(1,0,0,0,0,i,-s,0,0,s,i,0,0,0,0,1),this}makeRotationY(t){const i=Math.cos(t),s=Math.sin(t);return this.set(i,0,s,0,0,1,0,0,-s,0,i,0,0,0,0,1),this}makeRotationZ(t){const i=Math.cos(t),s=Math.sin(t);return this.set(i,-s,0,0,s,i,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(t,i){const s=Math.cos(i),o=Math.sin(i),f=1-s,m=t.x,p=t.y,v=t.z,x=f*m,M=f*p;return this.set(x*m+s,x*p-o*v,x*v+o*p,0,x*p+o*v,M*p+s,M*v-o*m,0,x*v-o*p,M*v+o*m,f*v*v+s,0,0,0,0,1),this}makeScale(t,i,s){return this.set(t,0,0,0,0,i,0,0,0,0,s,0,0,0,0,1),this}makeShear(t,i,s,o,f,m){return this.set(1,s,f,0,t,1,m,0,i,o,1,0,0,0,0,1),this}compose(t,i,s){const o=this.elements,f=i._x,m=i._y,p=i._z,v=i._w,x=f+f,M=m+m,b=p+p,T=f*x,P=f*M,N=f*b,L=m*M,D=m*b,R=p*b,W=v*x,V=v*M,q=v*b,H=s.x,Q=s.y,re=s.z;return o[0]=(1-(L+R))*H,o[1]=(P+q)*H,o[2]=(N-V)*H,o[3]=0,o[4]=(P-q)*Q,o[5]=(1-(T+R))*Q,o[6]=(D+W)*Q,o[7]=0,o[8]=(N+V)*re,o[9]=(D-W)*re,o[10]=(1-(T+L))*re,o[11]=0,o[12]=t.x,o[13]=t.y,o[14]=t.z,o[15]=1,this}decompose(t,i,s){const o=this.elements;let f=wl.set(o[0],o[1],o[2]).length();const m=wl.set(o[4],o[5],o[6]).length(),p=wl.set(o[8],o[9],o[10]).length();this.determinant()<0&&(f=-f),t.x=o[12],t.y=o[13],t.z=o[14],rs.copy(this);const x=1/f,M=1/m,b=1/p;return rs.elements[0]*=x,rs.elements[1]*=x,rs.elements[2]*=x,rs.elements[4]*=M,rs.elements[5]*=M,rs.elements[6]*=M,rs.elements[8]*=b,rs.elements[9]*=b,rs.elements[10]*=b,i.setFromRotationMatrix(rs),s.x=f,s.y=m,s.z=p,this}makePerspective(t,i,s,o,f,m){const p=this.elements,v=2*f/(i-t),x=2*f/(s-o),M=(i+t)/(i-t),b=(s+o)/(s-o),T=-(m+f)/(m-f),P=-2*m*f/(m-f);return p[0]=v,p[4]=0,p[8]=M,p[12]=0,p[1]=0,p[5]=x,p[9]=b,p[13]=0,p[2]=0,p[6]=0,p[10]=T,p[14]=P,p[3]=0,p[7]=0,p[11]=-1,p[15]=0,this}makeOrthographic(t,i,s,o,f,m){const p=this.elements,v=1/(i-t),x=1/(s-o),M=1/(m-f),b=(i+t)*v,T=(s+o)*x,P=(m+f)*M;return p[0]=2*v,p[4]=0,p[8]=0,p[12]=-b,p[1]=0,p[5]=2*x,p[9]=0,p[13]=-T,p[2]=0,p[6]=0,p[10]=-2*M,p[14]=-P,p[3]=0,p[7]=0,p[11]=0,p[15]=1,this}equals(t){const i=this.elements,s=t.elements;for(let o=0;o<16;o++)if(i[o]!==s[o])return!1;return!0}fromArray(t,i=0){for(let s=0;s<16;s++)this.elements[s]=t[s+i];return this}toArray(t=[],i=0){const s=this.elements;return t[i]=s[0],t[i+1]=s[1],t[i+2]=s[2],t[i+3]=s[3],t[i+4]=s[4],t[i+5]=s[5],t[i+6]=s[6],t[i+7]=s[7],t[i+8]=s[8],t[i+9]=s[9],t[i+10]=s[10],t[i+11]=s[11],t[i+12]=s[12],t[i+13]=s[13],t[i+14]=s[14],t[i+15]=s[15],t}}const wl=new pe,rs=new oi,LR=new pe(0,0,0),DR=new pe(1,1,1),_a=new pe,Zu=new pe,br=new pe,_x=new oi,xx=new Ro;class Nf{constructor(t=0,i=0,s=0,o=Nf.DEFAULT_ORDER){this.isEuler=!0,this._x=t,this._y=i,this._z=s,this._order=o}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get order(){return this._order}set order(t){this._order=t,this._onChangeCallback()}set(t,i,s,o=this._order){return this._x=t,this._y=i,this._z=s,this._order=o,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(t){return this._x=t._x,this._y=t._y,this._z=t._z,this._order=t._order,this._onChangeCallback(),this}setFromRotationMatrix(t,i=this._order,s=!0){const o=t.elements,f=o[0],m=o[4],p=o[8],v=o[1],x=o[5],M=o[9],b=o[2],T=o[6],P=o[10];switch(i){case"XYZ":this._y=Math.asin(sr(p,-1,1)),Math.abs(p)<.9999999?(this._x=Math.atan2(-M,P),this._z=Math.atan2(-m,f)):(this._x=Math.atan2(T,x),this._z=0);break;case"YXZ":this._x=Math.asin(-sr(M,-1,1)),Math.abs(M)<.9999999?(this._y=Math.atan2(p,P),this._z=Math.atan2(v,x)):(this._y=Math.atan2(-b,f),this._z=0);break;case"ZXY":this._x=Math.asin(sr(T,-1,1)),Math.abs(T)<.9999999?(this._y=Math.atan2(-b,P),this._z=Math.atan2(-m,x)):(this._y=0,this._z=Math.atan2(v,f));break;case"ZYX":this._y=Math.asin(-sr(b,-1,1)),Math.abs(b)<.9999999?(this._x=Math.atan2(T,P),this._z=Math.atan2(v,f)):(this._x=0,this._z=Math.atan2(-m,x));break;case"YZX":this._z=Math.asin(sr(v,-1,1)),Math.abs(v)<.9999999?(this._x=Math.atan2(-M,x),this._y=Math.atan2(-b,f)):(this._x=0,this._y=Math.atan2(p,P));break;case"XZY":this._z=Math.asin(-sr(m,-1,1)),Math.abs(m)<.9999999?(this._x=Math.atan2(T,x),this._y=Math.atan2(p,f)):(this._x=Math.atan2(-M,P),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+i)}return this._order=i,s===!0&&this._onChangeCallback(),this}setFromQuaternion(t,i,s){return _x.makeRotationFromQuaternion(t),this.setFromRotationMatrix(_x,i,s)}setFromVector3(t,i=this._order){return this.set(t.x,t.y,t.z,i)}reorder(t){return xx.setFromEuler(this),this.setFromQuaternion(xx,t)}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._order===this._order}fromArray(t){return this._x=t[0],this._y=t[1],this._z=t[2],t[3]!==void 0&&(this._order=t[3]),this._onChangeCallback(),this}toArray(t=[],i=0){return t[i]=this._x,t[i+1]=this._y,t[i+2]=this._z,t[i+3]=this._order,t}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._order}}Nf.DEFAULT_ORDER="XYZ";class wm{constructor(){this.mask=1}set(t){this.mask=(1<<t|0)>>>0}enable(t){this.mask|=1<<t|0}enableAll(){this.mask=-1}toggle(t){this.mask^=1<<t|0}disable(t){this.mask&=~(1<<t|0)}disableAll(){this.mask=0}test(t){return(this.mask&t.mask)!==0}isEnabled(t){return(this.mask&(1<<t|0))!==0}}let UR=0;const vx=new pe,Al=new Ro,Vs=new oi,Ku=new pe,oh=new pe,IR=new pe,NR=new Ro,yx=new pe(1,0,0),Mx=new pe(0,1,0),Sx=new pe(0,0,1),FR={type:"added"},Ex={type:"removed"};class ar extends Lo{constructor(){super(),this.isObject3D=!0,Object.defineProperty(this,"id",{value:UR++}),this.uuid=Ea(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=ar.DEFAULT_UP.clone();const t=new pe,i=new Nf,s=new Ro,o=new pe(1,1,1);function f(){s.setFromEuler(i,!1)}function m(){i.setFromQuaternion(s,void 0,!1)}i._onChange(f),s._onChange(m),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:t},rotation:{configurable:!0,enumerable:!0,value:i},quaternion:{configurable:!0,enumerable:!0,value:s},scale:{configurable:!0,enumerable:!0,value:o},modelViewMatrix:{value:new oi},normalMatrix:{value:new Ln}}),this.matrix=new oi,this.matrixWorld=new oi,this.matrixAutoUpdate=ar.DEFAULT_MATRIX_AUTO_UPDATE,this.matrixWorldNeedsUpdate=!1,this.matrixWorldAutoUpdate=ar.DEFAULT_MATRIX_WORLD_AUTO_UPDATE,this.layers=new wm,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeRender(){}onAfterRender(){}applyMatrix4(t){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(t),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(t){return this.quaternion.premultiply(t),this}setRotationFromAxisAngle(t,i){this.quaternion.setFromAxisAngle(t,i)}setRotationFromEuler(t){this.quaternion.setFromEuler(t,!0)}setRotationFromMatrix(t){this.quaternion.setFromRotationMatrix(t)}setRotationFromQuaternion(t){this.quaternion.copy(t)}rotateOnAxis(t,i){return Al.setFromAxisAngle(t,i),this.quaternion.multiply(Al),this}rotateOnWorldAxis(t,i){return Al.setFromAxisAngle(t,i),this.quaternion.premultiply(Al),this}rotateX(t){return this.rotateOnAxis(yx,t)}rotateY(t){return this.rotateOnAxis(Mx,t)}rotateZ(t){return this.rotateOnAxis(Sx,t)}translateOnAxis(t,i){return vx.copy(t).applyQuaternion(this.quaternion),this.position.add(vx.multiplyScalar(i)),this}translateX(t){return this.translateOnAxis(yx,t)}translateY(t){return this.translateOnAxis(Mx,t)}translateZ(t){return this.translateOnAxis(Sx,t)}localToWorld(t){return this.updateWorldMatrix(!0,!1),t.applyMatrix4(this.matrixWorld)}worldToLocal(t){return this.updateWorldMatrix(!0,!1),t.applyMatrix4(Vs.copy(this.matrixWorld).invert())}lookAt(t,i,s){t.isVector3?Ku.copy(t):Ku.set(t,i,s);const o=this.parent;this.updateWorldMatrix(!0,!1),oh.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?Vs.lookAt(oh,Ku,this.up):Vs.lookAt(Ku,oh,this.up),this.quaternion.setFromRotationMatrix(Vs),o&&(Vs.extractRotation(o.matrixWorld),Al.setFromRotationMatrix(Vs),this.quaternion.premultiply(Al.invert()))}add(t){if(arguments.length>1){for(let i=0;i<arguments.length;i++)this.add(arguments[i]);return this}return t===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",t),this):(t&&t.isObject3D?(t.parent!==null&&t.parent.remove(t),t.parent=this,this.children.push(t),t.dispatchEvent(FR)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",t),this)}remove(t){if(arguments.length>1){for(let s=0;s<arguments.length;s++)this.remove(arguments[s]);return this}const i=this.children.indexOf(t);return i!==-1&&(t.parent=null,this.children.splice(i,1),t.dispatchEvent(Ex)),this}removeFromParent(){const t=this.parent;return t!==null&&t.remove(this),this}clear(){for(let t=0;t<this.children.length;t++){const i=this.children[t];i.parent=null,i.dispatchEvent(Ex)}return this.children.length=0,this}attach(t){return this.updateWorldMatrix(!0,!1),Vs.copy(this.matrixWorld).invert(),t.parent!==null&&(t.parent.updateWorldMatrix(!0,!1),Vs.multiply(t.parent.matrixWorld)),t.applyMatrix4(Vs),this.add(t),t.updateWorldMatrix(!1,!0),this}getObjectById(t){return this.getObjectByProperty("id",t)}getObjectByName(t){return this.getObjectByProperty("name",t)}getObjectByProperty(t,i){if(this[t]===i)return this;for(let s=0,o=this.children.length;s<o;s++){const m=this.children[s].getObjectByProperty(t,i);if(m!==void 0)return m}}getObjectsByProperty(t,i){let s=[];this[t]===i&&s.push(this);for(let o=0,f=this.children.length;o<f;o++){const m=this.children[o].getObjectsByProperty(t,i);m.length>0&&(s=s.concat(m))}return s}getWorldPosition(t){return this.updateWorldMatrix(!0,!1),t.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(oh,t,IR),t}getWorldScale(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(oh,NR,t),t}getWorldDirection(t){this.updateWorldMatrix(!0,!1);const i=this.matrixWorld.elements;return t.set(i[8],i[9],i[10]).normalize()}raycast(){}traverse(t){t(this);const i=this.children;for(let s=0,o=i.length;s<o;s++)i[s].traverse(t)}traverseVisible(t){if(this.visible===!1)return;t(this);const i=this.children;for(let s=0,o=i.length;s<o;s++)i[s].traverseVisible(t)}traverseAncestors(t){const i=this.parent;i!==null&&(t(i),i.traverseAncestors(t))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||t)&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,t=!0);const i=this.children;for(let s=0,o=i.length;s<o;s++){const f=i[s];(f.matrixWorldAutoUpdate===!0||t===!0)&&f.updateMatrixWorld(t)}}updateWorldMatrix(t,i){const s=this.parent;if(t===!0&&s!==null&&s.matrixWorldAutoUpdate===!0&&s.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),i===!0){const o=this.children;for(let f=0,m=o.length;f<m;f++){const p=o[f];p.matrixWorldAutoUpdate===!0&&p.updateWorldMatrix(!1,!0)}}}toJSON(t){const i=t===void 0||typeof t=="string",s={};i&&(t={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},s.metadata={version:4.5,type:"Object",generator:"Object3D.toJSON"});const o={};o.uuid=this.uuid,o.type=this.type,this.name!==""&&(o.name=this.name),this.castShadow===!0&&(o.castShadow=!0),this.receiveShadow===!0&&(o.receiveShadow=!0),this.visible===!1&&(o.visible=!1),this.frustumCulled===!1&&(o.frustumCulled=!1),this.renderOrder!==0&&(o.renderOrder=this.renderOrder),Object.keys(this.userData).length>0&&(o.userData=this.userData),o.layers=this.layers.mask,o.matrix=this.matrix.toArray(),o.up=this.up.toArray(),this.matrixAutoUpdate===!1&&(o.matrixAutoUpdate=!1),this.isInstancedMesh&&(o.type="InstancedMesh",o.count=this.count,o.instanceMatrix=this.instanceMatrix.toJSON(),this.instanceColor!==null&&(o.instanceColor=this.instanceColor.toJSON()));function f(p,v){return p[v.uuid]===void 0&&(p[v.uuid]=v.toJSON(t)),v.uuid}if(this.isScene)this.background&&(this.background.isColor?o.background=this.background.toJSON():this.background.isTexture&&(o.background=this.background.toJSON(t).uuid)),this.environment&&this.environment.isTexture&&this.environment.isRenderTargetTexture!==!0&&(o.environment=this.environment.toJSON(t).uuid);else if(this.isMesh||this.isLine||this.isPoints){o.geometry=f(t.geometries,this.geometry);const p=this.geometry.parameters;if(p!==void 0&&p.shapes!==void 0){const v=p.shapes;if(Array.isArray(v))for(let x=0,M=v.length;x<M;x++){const b=v[x];f(t.shapes,b)}else f(t.shapes,v)}}if(this.isSkinnedMesh&&(o.bindMode=this.bindMode,o.bindMatrix=this.bindMatrix.toArray(),this.skeleton!==void 0&&(f(t.skeletons,this.skeleton),o.skeleton=this.skeleton.uuid)),this.material!==void 0)if(Array.isArray(this.material)){const p=[];for(let v=0,x=this.material.length;v<x;v++)p.push(f(t.materials,this.material[v]));o.material=p}else o.material=f(t.materials,this.material);if(this.children.length>0){o.children=[];for(let p=0;p<this.children.length;p++)o.children.push(this.children[p].toJSON(t).object)}if(this.animations.length>0){o.animations=[];for(let p=0;p<this.animations.length;p++){const v=this.animations[p];o.animations.push(f(t.animations,v))}}if(i){const p=m(t.geometries),v=m(t.materials),x=m(t.textures),M=m(t.images),b=m(t.shapes),T=m(t.skeletons),P=m(t.animations),N=m(t.nodes);p.length>0&&(s.geometries=p),v.length>0&&(s.materials=v),x.length>0&&(s.textures=x),M.length>0&&(s.images=M),b.length>0&&(s.shapes=b),T.length>0&&(s.skeletons=T),P.length>0&&(s.animations=P),N.length>0&&(s.nodes=N)}return s.object=o,s;function m(p){const v=[];for(const x in p){const M=p[x];delete M.metadata,v.push(M)}return v}}clone(t){return new this.constructor().copy(this,t)}copy(t,i=!0){if(this.name=t.name,this.up.copy(t.up),this.position.copy(t.position),this.rotation.order=t.rotation.order,this.quaternion.copy(t.quaternion),this.scale.copy(t.scale),this.matrix.copy(t.matrix),this.matrixWorld.copy(t.matrixWorld),this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrixWorldNeedsUpdate=t.matrixWorldNeedsUpdate,this.matrixWorldAutoUpdate=t.matrixWorldAutoUpdate,this.layers.mask=t.layers.mask,this.visible=t.visible,this.castShadow=t.castShadow,this.receiveShadow=t.receiveShadow,this.frustumCulled=t.frustumCulled,this.renderOrder=t.renderOrder,this.animations=t.animations,this.userData=JSON.parse(JSON.stringify(t.userData)),i===!0)for(let s=0;s<t.children.length;s++){const o=t.children[s];this.add(o.clone())}return this}}ar.DEFAULT_UP=new pe(0,1,0);ar.DEFAULT_MATRIX_AUTO_UPDATE=!0;ar.DEFAULT_MATRIX_WORLD_AUTO_UPDATE=!0;const ss=new pe,Ws=new pe,Pp=new pe,Xs=new pe,Rl=new pe,Cl=new pe,bx=new pe,Lp=new pe,Dp=new pe,Up=new pe;let $u=!1;class Br{constructor(t=new pe,i=new pe,s=new pe){this.a=t,this.b=i,this.c=s}static getNormal(t,i,s,o){o.subVectors(s,i),ss.subVectors(t,i),o.cross(ss);const f=o.lengthSq();return f>0?o.multiplyScalar(1/Math.sqrt(f)):o.set(0,0,0)}static getBarycoord(t,i,s,o,f){ss.subVectors(o,i),Ws.subVectors(s,i),Pp.subVectors(t,i);const m=ss.dot(ss),p=ss.dot(Ws),v=ss.dot(Pp),x=Ws.dot(Ws),M=Ws.dot(Pp),b=m*x-p*p;if(b===0)return f.set(-2,-1,-1);const T=1/b,P=(x*v-p*M)*T,N=(m*M-p*v)*T;return f.set(1-P-N,N,P)}static containsPoint(t,i,s,o){return this.getBarycoord(t,i,s,o,Xs),Xs.x>=0&&Xs.y>=0&&Xs.x+Xs.y<=1}static getUV(t,i,s,o,f,m,p,v){return $u===!1&&(console.warn("THREE.Triangle.getUV() has been renamed to THREE.Triangle.getInterpolation()."),$u=!0),this.getInterpolation(t,i,s,o,f,m,p,v)}static getInterpolation(t,i,s,o,f,m,p,v){return this.getBarycoord(t,i,s,o,Xs),v.setScalar(0),v.addScaledVector(f,Xs.x),v.addScaledVector(m,Xs.y),v.addScaledVector(p,Xs.z),v}static isFrontFacing(t,i,s,o){return ss.subVectors(s,i),Ws.subVectors(t,i),ss.cross(Ws).dot(o)<0}set(t,i,s){return this.a.copy(t),this.b.copy(i),this.c.copy(s),this}setFromPointsAndIndices(t,i,s,o){return this.a.copy(t[i]),this.b.copy(t[s]),this.c.copy(t[o]),this}setFromAttributeAndIndices(t,i,s,o){return this.a.fromBufferAttribute(t,i),this.b.fromBufferAttribute(t,s),this.c.fromBufferAttribute(t,o),this}clone(){return new this.constructor().copy(this)}copy(t){return this.a.copy(t.a),this.b.copy(t.b),this.c.copy(t.c),this}getArea(){return ss.subVectors(this.c,this.b),Ws.subVectors(this.a,this.b),ss.cross(Ws).length()*.5}getMidpoint(t){return t.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(t){return Br.getNormal(this.a,this.b,this.c,t)}getPlane(t){return t.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(t,i){return Br.getBarycoord(t,this.a,this.b,this.c,i)}getUV(t,i,s,o,f){return $u===!1&&(console.warn("THREE.Triangle.getUV() has been renamed to THREE.Triangle.getInterpolation()."),$u=!0),Br.getInterpolation(t,this.a,this.b,this.c,i,s,o,f)}getInterpolation(t,i,s,o,f){return Br.getInterpolation(t,this.a,this.b,this.c,i,s,o,f)}containsPoint(t){return Br.containsPoint(t,this.a,this.b,this.c)}isFrontFacing(t){return Br.isFrontFacing(this.a,this.b,this.c,t)}intersectsBox(t){return t.intersectsTriangle(this)}closestPointToPoint(t,i){const s=this.a,o=this.b,f=this.c;let m,p;Rl.subVectors(o,s),Cl.subVectors(f,s),Lp.subVectors(t,s);const v=Rl.dot(Lp),x=Cl.dot(Lp);if(v<=0&&x<=0)return i.copy(s);Dp.subVectors(t,o);const M=Rl.dot(Dp),b=Cl.dot(Dp);if(M>=0&&b<=M)return i.copy(o);const T=v*b-M*x;if(T<=0&&v>=0&&M<=0)return m=v/(v-M),i.copy(s).addScaledVector(Rl,m);Up.subVectors(t,f);const P=Rl.dot(Up),N=Cl.dot(Up);if(N>=0&&P<=N)return i.copy(f);const L=P*x-v*N;if(L<=0&&x>=0&&N<=0)return p=x/(x-N),i.copy(s).addScaledVector(Cl,p);const D=M*N-P*b;if(D<=0&&b-M>=0&&P-N>=0)return bx.subVectors(f,o),p=(b-M)/(b-M+(P-N)),i.copy(o).addScaledVector(bx,p);const R=1/(D+L+T);return m=L*R,p=T*R,i.copy(s).addScaledVector(Rl,m).addScaledVector(Cl,p)}equals(t){return t.a.equals(this.a)&&t.b.equals(this.b)&&t.c.equals(this.c)}}let OR=0;class uc extends Lo{constructor(){super(),this.isMaterial=!0,Object.defineProperty(this,"id",{value:OR++}),this.uuid=Ea(),this.name="",this.type="Material",this.blending=Yl,this.side=Aa,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.blendSrc=Cv,this.blendDst=Pv,this.blendEquation=Vl,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=em,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=vR,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=_p,this.stencilZFail=_p,this.stencilZPass=_p,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.forceSinglePass=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(t){this._alphaTest>0!=t>0&&this.version++,this._alphaTest=t}onBuild(){}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(t){if(t!==void 0)for(const i in t){const s=t[i];if(s===void 0){console.warn(`THREE.Material: parameter '${i}' has value of undefined.`);continue}const o=this[i];if(o===void 0){console.warn(`THREE.Material: '${i}' is not a property of THREE.${this.type}.`);continue}o&&o.isColor?o.set(s):o&&o.isVector3&&s&&s.isVector3?o.copy(s):this[i]=s}}toJSON(t){const i=t===void 0||typeof t=="string";i&&(t={textures:{},images:{}});const s={metadata:{version:4.5,type:"Material",generator:"Material.toJSON"}};s.uuid=this.uuid,s.type=this.type,this.name!==""&&(s.name=this.name),this.color&&this.color.isColor&&(s.color=this.color.getHex()),this.roughness!==void 0&&(s.roughness=this.roughness),this.metalness!==void 0&&(s.metalness=this.metalness),this.sheen!==void 0&&(s.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(s.sheenColor=this.sheenColor.getHex()),this.sheenRoughness!==void 0&&(s.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(s.emissive=this.emissive.getHex()),this.emissiveIntensity&&this.emissiveIntensity!==1&&(s.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(s.specular=this.specular.getHex()),this.specularIntensity!==void 0&&(s.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(s.specularColor=this.specularColor.getHex()),this.shininess!==void 0&&(s.shininess=this.shininess),this.clearcoat!==void 0&&(s.clearcoat=this.clearcoat),this.clearcoatRoughness!==void 0&&(s.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(s.clearcoatMap=this.clearcoatMap.toJSON(t).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(s.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(t).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(s.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(t).uuid,s.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.iridescence!==void 0&&(s.iridescence=this.iridescence),this.iridescenceIOR!==void 0&&(s.iridescenceIOR=this.iridescenceIOR),this.iridescenceThicknessRange!==void 0&&(s.iridescenceThicknessRange=this.iridescenceThicknessRange),this.iridescenceMap&&this.iridescenceMap.isTexture&&(s.iridescenceMap=this.iridescenceMap.toJSON(t).uuid),this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture&&(s.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(t).uuid),this.map&&this.map.isTexture&&(s.map=this.map.toJSON(t).uuid),this.matcap&&this.matcap.isTexture&&(s.matcap=this.matcap.toJSON(t).uuid),this.alphaMap&&this.alphaMap.isTexture&&(s.alphaMap=this.alphaMap.toJSON(t).uuid),this.lightMap&&this.lightMap.isTexture&&(s.lightMap=this.lightMap.toJSON(t).uuid,s.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(s.aoMap=this.aoMap.toJSON(t).uuid,s.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(s.bumpMap=this.bumpMap.toJSON(t).uuid,s.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(s.normalMap=this.normalMap.toJSON(t).uuid,s.normalMapType=this.normalMapType,s.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(s.displacementMap=this.displacementMap.toJSON(t).uuid,s.displacementScale=this.displacementScale,s.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(s.roughnessMap=this.roughnessMap.toJSON(t).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(s.metalnessMap=this.metalnessMap.toJSON(t).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(s.emissiveMap=this.emissiveMap.toJSON(t).uuid),this.specularMap&&this.specularMap.isTexture&&(s.specularMap=this.specularMap.toJSON(t).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(s.specularIntensityMap=this.specularIntensityMap.toJSON(t).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(s.specularColorMap=this.specularColorMap.toJSON(t).uuid),this.envMap&&this.envMap.isTexture&&(s.envMap=this.envMap.toJSON(t).uuid,this.combine!==void 0&&(s.combine=this.combine)),this.envMapIntensity!==void 0&&(s.envMapIntensity=this.envMapIntensity),this.reflectivity!==void 0&&(s.reflectivity=this.reflectivity),this.refractionRatio!==void 0&&(s.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(s.gradientMap=this.gradientMap.toJSON(t).uuid),this.transmission!==void 0&&(s.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(s.transmissionMap=this.transmissionMap.toJSON(t).uuid),this.thickness!==void 0&&(s.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(s.thicknessMap=this.thicknessMap.toJSON(t).uuid),this.attenuationDistance!==void 0&&this.attenuationDistance!==1/0&&(s.attenuationDistance=this.attenuationDistance),this.attenuationColor!==void 0&&(s.attenuationColor=this.attenuationColor.getHex()),this.size!==void 0&&(s.size=this.size),this.shadowSide!==null&&(s.shadowSide=this.shadowSide),this.sizeAttenuation!==void 0&&(s.sizeAttenuation=this.sizeAttenuation),this.blending!==Yl&&(s.blending=this.blending),this.side!==Aa&&(s.side=this.side),this.vertexColors&&(s.vertexColors=!0),this.opacity<1&&(s.opacity=this.opacity),this.transparent===!0&&(s.transparent=this.transparent),s.depthFunc=this.depthFunc,s.depthTest=this.depthTest,s.depthWrite=this.depthWrite,s.colorWrite=this.colorWrite,s.stencilWrite=this.stencilWrite,s.stencilWriteMask=this.stencilWriteMask,s.stencilFunc=this.stencilFunc,s.stencilRef=this.stencilRef,s.stencilFuncMask=this.stencilFuncMask,s.stencilFail=this.stencilFail,s.stencilZFail=this.stencilZFail,s.stencilZPass=this.stencilZPass,this.rotation!==void 0&&this.rotation!==0&&(s.rotation=this.rotation),this.polygonOffset===!0&&(s.polygonOffset=!0),this.polygonOffsetFactor!==0&&(s.polygonOffsetFactor=this.polygonOffsetFactor),this.polygonOffsetUnits!==0&&(s.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth!==void 0&&this.linewidth!==1&&(s.linewidth=this.linewidth),this.dashSize!==void 0&&(s.dashSize=this.dashSize),this.gapSize!==void 0&&(s.gapSize=this.gapSize),this.scale!==void 0&&(s.scale=this.scale),this.dithering===!0&&(s.dithering=!0),this.alphaTest>0&&(s.alphaTest=this.alphaTest),this.alphaToCoverage===!0&&(s.alphaToCoverage=this.alphaToCoverage),this.premultipliedAlpha===!0&&(s.premultipliedAlpha=this.premultipliedAlpha),this.forceSinglePass===!0&&(s.forceSinglePass=this.forceSinglePass),this.wireframe===!0&&(s.wireframe=this.wireframe),this.wireframeLinewidth>1&&(s.wireframeLinewidth=this.wireframeLinewidth),this.wireframeLinecap!=="round"&&(s.wireframeLinecap=this.wireframeLinecap),this.wireframeLinejoin!=="round"&&(s.wireframeLinejoin=this.wireframeLinejoin),this.flatShading===!0&&(s.flatShading=this.flatShading),this.visible===!1&&(s.visible=!1),this.toneMapped===!1&&(s.toneMapped=!1),this.fog===!1&&(s.fog=!1),Object.keys(this.userData).length>0&&(s.userData=this.userData);function o(f){const m=[];for(const p in f){const v=f[p];delete v.metadata,m.push(v)}return m}if(i){const f=o(t.textures),m=o(t.images);f.length>0&&(s.textures=f),m.length>0&&(s.images=m)}return s}clone(){return new this.constructor().copy(this)}copy(t){this.name=t.name,this.blending=t.blending,this.side=t.side,this.vertexColors=t.vertexColors,this.opacity=t.opacity,this.transparent=t.transparent,this.blendSrc=t.blendSrc,this.blendDst=t.blendDst,this.blendEquation=t.blendEquation,this.blendSrcAlpha=t.blendSrcAlpha,this.blendDstAlpha=t.blendDstAlpha,this.blendEquationAlpha=t.blendEquationAlpha,this.depthFunc=t.depthFunc,this.depthTest=t.depthTest,this.depthWrite=t.depthWrite,this.stencilWriteMask=t.stencilWriteMask,this.stencilFunc=t.stencilFunc,this.stencilRef=t.stencilRef,this.stencilFuncMask=t.stencilFuncMask,this.stencilFail=t.stencilFail,this.stencilZFail=t.stencilZFail,this.stencilZPass=t.stencilZPass,this.stencilWrite=t.stencilWrite;const i=t.clippingPlanes;let s=null;if(i!==null){const o=i.length;s=new Array(o);for(let f=0;f!==o;++f)s[f]=i[f].clone()}return this.clippingPlanes=s,this.clipIntersection=t.clipIntersection,this.clipShadows=t.clipShadows,this.shadowSide=t.shadowSide,this.colorWrite=t.colorWrite,this.precision=t.precision,this.polygonOffset=t.polygonOffset,this.polygonOffsetFactor=t.polygonOffsetFactor,this.polygonOffsetUnits=t.polygonOffsetUnits,this.dithering=t.dithering,this.alphaTest=t.alphaTest,this.alphaToCoverage=t.alphaToCoverage,this.premultipliedAlpha=t.premultipliedAlpha,this.forceSinglePass=t.forceSinglePass,this.visible=t.visible,this.toneMapped=t.toneMapped,this.userData=JSON.parse(JSON.stringify(t.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(t){t===!0&&this.version++}}const kv={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},as={h:0,s:0,l:0},Ju={h:0,s:0,l:0};function Ip(h,t,i){return i<0&&(i+=1),i>1&&(i-=1),i<1/6?h+(t-h)*6*i:i<1/2?t:i<2/3?h+(t-h)*6*(2/3-i):h}class kn{constructor(t,i,s){return this.isColor=!0,this.r=1,this.g=1,this.b=1,i===void 0&&s===void 0?this.set(t):this.setRGB(t,i,s)}set(t){return t&&t.isColor?this.copy(t):typeof t=="number"?this.setHex(t):typeof t=="string"&&this.setStyle(t),this}setScalar(t){return this.r=t,this.g=t,this.b=t,this}setHex(t,i=vn){return t=Math.floor(t),this.r=(t>>16&255)/255,this.g=(t>>8&255)/255,this.b=(t&255)/255,is.toWorkingColorSpace(this,i),this}setRGB(t,i,s,o=is.workingColorSpace){return this.r=t,this.g=i,this.b=s,is.toWorkingColorSpace(this,o),this}setHSL(t,i,s,o=is.workingColorSpace){if(t=yR(t,1),i=sr(i,0,1),s=sr(s,0,1),i===0)this.r=this.g=this.b=s;else{const f=s<=.5?s*(1+i):s+i-s*i,m=2*s-f;this.r=Ip(m,f,t+1/3),this.g=Ip(m,f,t),this.b=Ip(m,f,t-1/3)}return is.toWorkingColorSpace(this,o),this}setStyle(t,i=vn){function s(f){f!==void 0&&parseFloat(f)<1&&console.warn("THREE.Color: Alpha component of "+t+" will be ignored.")}let o;if(o=/^(\w+)\(([^\)]*)\)/.exec(t)){let f;const m=o[1],p=o[2];switch(m){case"rgb":case"rgba":if(f=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(p))return s(f[4]),this.setRGB(Math.min(255,parseInt(f[1],10))/255,Math.min(255,parseInt(f[2],10))/255,Math.min(255,parseInt(f[3],10))/255,i);if(f=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(p))return s(f[4]),this.setRGB(Math.min(100,parseInt(f[1],10))/100,Math.min(100,parseInt(f[2],10))/100,Math.min(100,parseInt(f[3],10))/100,i);break;case"hsl":case"hsla":if(f=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(p))return s(f[4]),this.setHSL(parseFloat(f[1])/360,parseFloat(f[2])/100,parseFloat(f[3])/100,i);break;default:console.warn("THREE.Color: Unknown color model "+t)}}else if(o=/^\#([A-Fa-f\d]+)$/.exec(t)){const f=o[1],m=f.length;if(m===3)return this.setRGB(parseInt(f.charAt(0),16)/15,parseInt(f.charAt(1),16)/15,parseInt(f.charAt(2),16)/15,i);if(m===6)return this.setHex(parseInt(f,16),i);console.warn("THREE.Color: Invalid hex color "+t)}else if(t&&t.length>0)return this.setColorName(t,i);return this}setColorName(t,i=vn){const s=kv[t.toLowerCase()];return s!==void 0?this.setHex(s,i):console.warn("THREE.Color: Unknown color "+t),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(t){return this.r=t.r,this.g=t.g,this.b=t.b,this}copySRGBToLinear(t){return this.r=Kl(t.r),this.g=Kl(t.g),this.b=Kl(t.b),this}copyLinearToSRGB(t){return this.r=Sp(t.r),this.g=Sp(t.g),this.b=Sp(t.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(t=vn){return is.fromWorkingColorSpace(Xi.copy(this),t),Math.round(sr(Xi.r*255,0,255))*65536+Math.round(sr(Xi.g*255,0,255))*256+Math.round(sr(Xi.b*255,0,255))}getHexString(t=vn){return("000000"+this.getHex(t).toString(16)).slice(-6)}getHSL(t,i=is.workingColorSpace){is.fromWorkingColorSpace(Xi.copy(this),i);const s=Xi.r,o=Xi.g,f=Xi.b,m=Math.max(s,o,f),p=Math.min(s,o,f);let v,x;const M=(p+m)/2;if(p===m)v=0,x=0;else{const b=m-p;switch(x=M<=.5?b/(m+p):b/(2-m-p),m){case s:v=(o-f)/b+(o<f?6:0);break;case o:v=(f-s)/b+2;break;case f:v=(s-o)/b+4;break}v/=6}return t.h=v,t.s=x,t.l=M,t}getRGB(t,i=is.workingColorSpace){return is.fromWorkingColorSpace(Xi.copy(this),i),t.r=Xi.r,t.g=Xi.g,t.b=Xi.b,t}getStyle(t=vn){is.fromWorkingColorSpace(Xi.copy(this),t);const i=Xi.r,s=Xi.g,o=Xi.b;return t!==vn?`color(${t} ${i.toFixed(3)} ${s.toFixed(3)} ${o.toFixed(3)})`:`rgb(${Math.round(i*255)},${Math.round(s*255)},${Math.round(o*255)})`}offsetHSL(t,i,s){return this.getHSL(as),as.h+=t,as.s+=i,as.l+=s,this.setHSL(as.h,as.s,as.l),this}add(t){return this.r+=t.r,this.g+=t.g,this.b+=t.b,this}addColors(t,i){return this.r=t.r+i.r,this.g=t.g+i.g,this.b=t.b+i.b,this}addScalar(t){return this.r+=t,this.g+=t,this.b+=t,this}sub(t){return this.r=Math.max(0,this.r-t.r),this.g=Math.max(0,this.g-t.g),this.b=Math.max(0,this.b-t.b),this}multiply(t){return this.r*=t.r,this.g*=t.g,this.b*=t.b,this}multiplyScalar(t){return this.r*=t,this.g*=t,this.b*=t,this}lerp(t,i){return this.r+=(t.r-this.r)*i,this.g+=(t.g-this.g)*i,this.b+=(t.b-this.b)*i,this}lerpColors(t,i,s){return this.r=t.r+(i.r-t.r)*s,this.g=t.g+(i.g-t.g)*s,this.b=t.b+(i.b-t.b)*s,this}lerpHSL(t,i){this.getHSL(as),t.getHSL(Ju);const s=yp(as.h,Ju.h,i),o=yp(as.s,Ju.s,i),f=yp(as.l,Ju.l,i);return this.setHSL(s,o,f),this}setFromVector3(t){return this.r=t.x,this.g=t.y,this.b=t.z,this}applyMatrix3(t){const i=this.r,s=this.g,o=this.b,f=t.elements;return this.r=f[0]*i+f[3]*s+f[6]*o,this.g=f[1]*i+f[4]*s+f[7]*o,this.b=f[2]*i+f[5]*s+f[8]*o,this}equals(t){return t.r===this.r&&t.g===this.g&&t.b===this.b}fromArray(t,i=0){return this.r=t[i],this.g=t[i+1],this.b=t[i+2],this}toArray(t=[],i=0){return t[i]=this.r,t[i+1]=this.g,t[i+2]=this.b,t}fromBufferAttribute(t,i){return this.r=t.getX(i),this.g=t.getY(i),this.b=t.getZ(i),this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b}}const Xi=new kn;kn.NAMES=kv;class Gv extends uc{constructor(t){super(),this.isMeshBasicMaterial=!0,this.type="MeshBasicMaterial",this.color=new kn(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=Lv,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.fog=t.fog,this}}const yi=new pe,ju=new cn;class Hr{constructor(t,i,s=!1){if(Array.isArray(t))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.isBufferAttribute=!0,this.name="",this.array=t,this.itemSize=i,this.count=t!==void 0?t.length/i:0,this.normalized=s,this.usage=Sf,this.updateRange={offset:0,count:-1},this.version=0}onUploadCallback(){}set needsUpdate(t){t===!0&&this.version++}setUsage(t){return this.usage=t,this}copy(t){return this.name=t.name,this.array=new t.array.constructor(t.array),this.itemSize=t.itemSize,this.count=t.count,this.normalized=t.normalized,this.usage=t.usage,this}copyAt(t,i,s){t*=this.itemSize,s*=i.itemSize;for(let o=0,f=this.itemSize;o<f;o++)this.array[t+o]=i.array[s+o];return this}copyArray(t){return this.array.set(t),this}applyMatrix3(t){if(this.itemSize===2)for(let i=0,s=this.count;i<s;i++)ju.fromBufferAttribute(this,i),ju.applyMatrix3(t),this.setXY(i,ju.x,ju.y);else if(this.itemSize===3)for(let i=0,s=this.count;i<s;i++)yi.fromBufferAttribute(this,i),yi.applyMatrix3(t),this.setXYZ(i,yi.x,yi.y,yi.z);return this}applyMatrix4(t){for(let i=0,s=this.count;i<s;i++)yi.fromBufferAttribute(this,i),yi.applyMatrix4(t),this.setXYZ(i,yi.x,yi.y,yi.z);return this}applyNormalMatrix(t){for(let i=0,s=this.count;i<s;i++)yi.fromBufferAttribute(this,i),yi.applyNormalMatrix(t),this.setXYZ(i,yi.x,yi.y,yi.z);return this}transformDirection(t){for(let i=0,s=this.count;i<s;i++)yi.fromBufferAttribute(this,i),yi.transformDirection(t),this.setXYZ(i,yi.x,yi.y,yi.z);return this}set(t,i=0){return this.array.set(t,i),this}getX(t){let i=this.array[t*this.itemSize];return this.normalized&&(i=xa(i,this.array)),i}setX(t,i){return this.normalized&&(i=jn(i,this.array)),this.array[t*this.itemSize]=i,this}getY(t){let i=this.array[t*this.itemSize+1];return this.normalized&&(i=xa(i,this.array)),i}setY(t,i){return this.normalized&&(i=jn(i,this.array)),this.array[t*this.itemSize+1]=i,this}getZ(t){let i=this.array[t*this.itemSize+2];return this.normalized&&(i=xa(i,this.array)),i}setZ(t,i){return this.normalized&&(i=jn(i,this.array)),this.array[t*this.itemSize+2]=i,this}getW(t){let i=this.array[t*this.itemSize+3];return this.normalized&&(i=xa(i,this.array)),i}setW(t,i){return this.normalized&&(i=jn(i,this.array)),this.array[t*this.itemSize+3]=i,this}setXY(t,i,s){return t*=this.itemSize,this.normalized&&(i=jn(i,this.array),s=jn(s,this.array)),this.array[t+0]=i,this.array[t+1]=s,this}setXYZ(t,i,s,o){return t*=this.itemSize,this.normalized&&(i=jn(i,this.array),s=jn(s,this.array),o=jn(o,this.array)),this.array[t+0]=i,this.array[t+1]=s,this.array[t+2]=o,this}setXYZW(t,i,s,o,f){return t*=this.itemSize,this.normalized&&(i=jn(i,this.array),s=jn(s,this.array),o=jn(o,this.array),f=jn(f,this.array)),this.array[t+0]=i,this.array[t+1]=s,this.array[t+2]=o,this.array[t+3]=f,this}onUpload(t){return this.onUploadCallback=t,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const t={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};return this.name!==""&&(t.name=this.name),this.usage!==Sf&&(t.usage=this.usage),(this.updateRange.offset!==0||this.updateRange.count!==-1)&&(t.updateRange=this.updateRange),t}copyColorsArray(){console.error("THREE.BufferAttribute: copyColorsArray() was removed in r144.")}copyVector2sArray(){console.error("THREE.BufferAttribute: copyVector2sArray() was removed in r144.")}copyVector3sArray(){console.error("THREE.BufferAttribute: copyVector3sArray() was removed in r144.")}copyVector4sArray(){console.error("THREE.BufferAttribute: copyVector4sArray() was removed in r144.")}}class Hv extends Hr{constructor(t,i,s){super(new Uint16Array(t),i,s)}}class Vv extends Hr{constructor(t,i,s){super(new Uint32Array(t),i,s)}}class ba extends Hr{constructor(t,i,s){super(new Float32Array(t),i,s)}}let BR=0;const Ir=new oi,Np=new ar,Pl=new pe,Tr=new Do,lh=new Do,Di=new pe;class ws extends Lo{constructor(){super(),this.isBufferGeometry=!0,Object.defineProperty(this,"id",{value:BR++}),this.uuid=Ea(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(t){return Array.isArray(t)?this.index=new(Fv(t)?Vv:Hv)(t,1):this.index=t,this}getAttribute(t){return this.attributes[t]}setAttribute(t,i){return this.attributes[t]=i,this}deleteAttribute(t){return delete this.attributes[t],this}hasAttribute(t){return this.attributes[t]!==void 0}addGroup(t,i,s=0){this.groups.push({start:t,count:i,materialIndex:s})}clearGroups(){this.groups=[]}setDrawRange(t,i){this.drawRange.start=t,this.drawRange.count=i}applyMatrix4(t){const i=this.attributes.position;i!==void 0&&(i.applyMatrix4(t),i.needsUpdate=!0);const s=this.attributes.normal;if(s!==void 0){const f=new Ln().getNormalMatrix(t);s.applyNormalMatrix(f),s.needsUpdate=!0}const o=this.attributes.tangent;return o!==void 0&&(o.transformDirection(t),o.needsUpdate=!0),this.boundingBox!==null&&this.computeBoundingBox(),this.boundingSphere!==null&&this.computeBoundingSphere(),this}applyQuaternion(t){return Ir.makeRotationFromQuaternion(t),this.applyMatrix4(Ir),this}rotateX(t){return Ir.makeRotationX(t),this.applyMatrix4(Ir),this}rotateY(t){return Ir.makeRotationY(t),this.applyMatrix4(Ir),this}rotateZ(t){return Ir.makeRotationZ(t),this.applyMatrix4(Ir),this}translate(t,i,s){return Ir.makeTranslation(t,i,s),this.applyMatrix4(Ir),this}scale(t,i,s){return Ir.makeScale(t,i,s),this.applyMatrix4(Ir),this}lookAt(t){return Np.lookAt(t),Np.updateMatrix(),this.applyMatrix4(Np.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(Pl).negate(),this.translate(Pl.x,Pl.y,Pl.z),this}setFromPoints(t){const i=[];for(let s=0,o=t.length;s<o;s++){const f=t[s];i.push(f.x,f.y,f.z||0)}return this.setAttribute("position",new ba(i,3)),this}computeBoundingBox(){this.boundingBox===null&&(this.boundingBox=new Do);const t=this.attributes.position,i=this.morphAttributes.position;if(t&&t.isGLBufferAttribute){console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".',this),this.boundingBox.set(new pe(-1/0,-1/0,-1/0),new pe(1/0,1/0,1/0));return}if(t!==void 0){if(this.boundingBox.setFromBufferAttribute(t),i)for(let s=0,o=i.length;s<o;s++){const f=i[s];Tr.setFromBufferAttribute(f),this.morphTargetsRelative?(Di.addVectors(this.boundingBox.min,Tr.min),this.boundingBox.expandByPoint(Di),Di.addVectors(this.boundingBox.max,Tr.max),this.boundingBox.expandByPoint(Di)):(this.boundingBox.expandByPoint(Tr.min),this.boundingBox.expandByPoint(Tr.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){this.boundingSphere===null&&(this.boundingSphere=new hc);const t=this.attributes.position,i=this.morphAttributes.position;if(t&&t.isGLBufferAttribute){console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".',this),this.boundingSphere.set(new pe,1/0);return}if(t){const s=this.boundingSphere.center;if(Tr.setFromBufferAttribute(t),i)for(let f=0,m=i.length;f<m;f++){const p=i[f];lh.setFromBufferAttribute(p),this.morphTargetsRelative?(Di.addVectors(Tr.min,lh.min),Tr.expandByPoint(Di),Di.addVectors(Tr.max,lh.max),Tr.expandByPoint(Di)):(Tr.expandByPoint(lh.min),Tr.expandByPoint(lh.max))}Tr.getCenter(s);let o=0;for(let f=0,m=t.count;f<m;f++)Di.fromBufferAttribute(t,f),o=Math.max(o,s.distanceToSquared(Di));if(i)for(let f=0,m=i.length;f<m;f++){const p=i[f],v=this.morphTargetsRelative;for(let x=0,M=p.count;x<M;x++)Di.fromBufferAttribute(p,x),v&&(Pl.fromBufferAttribute(t,x),Di.add(Pl)),o=Math.max(o,s.distanceToSquared(Di))}this.boundingSphere.radius=Math.sqrt(o),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const t=this.index,i=this.attributes;if(t===null||i.position===void 0||i.normal===void 0||i.uv===void 0){console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");return}const s=t.array,o=i.position.array,f=i.normal.array,m=i.uv.array,p=o.length/3;this.hasAttribute("tangent")===!1&&this.setAttribute("tangent",new Hr(new Float32Array(4*p),4));const v=this.getAttribute("tangent").array,x=[],M=[];for(let te=0;te<p;te++)x[te]=new pe,M[te]=new pe;const b=new pe,T=new pe,P=new pe,N=new cn,L=new cn,D=new cn,R=new pe,W=new pe;function V(te,we,Ae){b.fromArray(o,te*3),T.fromArray(o,we*3),P.fromArray(o,Ae*3),N.fromArray(m,te*2),L.fromArray(m,we*2),D.fromArray(m,Ae*2),T.sub(b),P.sub(b),L.sub(N),D.sub(N);const de=1/(L.x*D.y-D.x*L.y);isFinite(de)&&(R.copy(T).multiplyScalar(D.y).addScaledVector(P,-L.y).multiplyScalar(de),W.copy(P).multiplyScalar(L.x).addScaledVector(T,-D.x).multiplyScalar(de),x[te].add(R),x[we].add(R),x[Ae].add(R),M[te].add(W),M[we].add(W),M[Ae].add(W))}let q=this.groups;q.length===0&&(q=[{start:0,count:s.length}]);for(let te=0,we=q.length;te<we;++te){const Ae=q[te],de=Ae.start,xe=Ae.count;for(let ye=de,He=de+xe;ye<He;ye+=3)V(s[ye+0],s[ye+1],s[ye+2])}const H=new pe,Q=new pe,re=new pe,oe=new pe;function B(te){re.fromArray(f,te*3),oe.copy(re);const we=x[te];H.copy(we),H.sub(re.multiplyScalar(re.dot(we))).normalize(),Q.crossVectors(oe,we);const de=Q.dot(M[te])<0?-1:1;v[te*4]=H.x,v[te*4+1]=H.y,v[te*4+2]=H.z,v[te*4+3]=de}for(let te=0,we=q.length;te<we;++te){const Ae=q[te],de=Ae.start,xe=Ae.count;for(let ye=de,He=de+xe;ye<He;ye+=3)B(s[ye+0]),B(s[ye+1]),B(s[ye+2])}}computeVertexNormals(){const t=this.index,i=this.getAttribute("position");if(i!==void 0){let s=this.getAttribute("normal");if(s===void 0)s=new Hr(new Float32Array(i.count*3),3),this.setAttribute("normal",s);else for(let T=0,P=s.count;T<P;T++)s.setXYZ(T,0,0,0);const o=new pe,f=new pe,m=new pe,p=new pe,v=new pe,x=new pe,M=new pe,b=new pe;if(t)for(let T=0,P=t.count;T<P;T+=3){const N=t.getX(T+0),L=t.getX(T+1),D=t.getX(T+2);o.fromBufferAttribute(i,N),f.fromBufferAttribute(i,L),m.fromBufferAttribute(i,D),M.subVectors(m,f),b.subVectors(o,f),M.cross(b),p.fromBufferAttribute(s,N),v.fromBufferAttribute(s,L),x.fromBufferAttribute(s,D),p.add(M),v.add(M),x.add(M),s.setXYZ(N,p.x,p.y,p.z),s.setXYZ(L,v.x,v.y,v.z),s.setXYZ(D,x.x,x.y,x.z)}else for(let T=0,P=i.count;T<P;T+=3)o.fromBufferAttribute(i,T+0),f.fromBufferAttribute(i,T+1),m.fromBufferAttribute(i,T+2),M.subVectors(m,f),b.subVectors(o,f),M.cross(b),s.setXYZ(T+0,M.x,M.y,M.z),s.setXYZ(T+1,M.x,M.y,M.z),s.setXYZ(T+2,M.x,M.y,M.z);this.normalizeNormals(),s.needsUpdate=!0}}merge(){return console.error("THREE.BufferGeometry.merge() has been removed. Use THREE.BufferGeometryUtils.mergeGeometries() instead."),this}normalizeNormals(){const t=this.attributes.normal;for(let i=0,s=t.count;i<s;i++)Di.fromBufferAttribute(t,i),Di.normalize(),t.setXYZ(i,Di.x,Di.y,Di.z)}toNonIndexed(){function t(p,v){const x=p.array,M=p.itemSize,b=p.normalized,T=new x.constructor(v.length*M);let P=0,N=0;for(let L=0,D=v.length;L<D;L++){p.isInterleavedBufferAttribute?P=v[L]*p.data.stride+p.offset:P=v[L]*M;for(let R=0;R<M;R++)T[N++]=x[P++]}return new Hr(T,M,b)}if(this.index===null)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const i=new ws,s=this.index.array,o=this.attributes;for(const p in o){const v=o[p],x=t(v,s);i.setAttribute(p,x)}const f=this.morphAttributes;for(const p in f){const v=[],x=f[p];for(let M=0,b=x.length;M<b;M++){const T=x[M],P=t(T,s);v.push(P)}i.morphAttributes[p]=v}i.morphTargetsRelative=this.morphTargetsRelative;const m=this.groups;for(let p=0,v=m.length;p<v;p++){const x=m[p];i.addGroup(x.start,x.count,x.materialIndex)}return i}toJSON(){const t={metadata:{version:4.5,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(t.uuid=this.uuid,t.type=this.type,this.name!==""&&(t.name=this.name),Object.keys(this.userData).length>0&&(t.userData=this.userData),this.parameters!==void 0){const v=this.parameters;for(const x in v)v[x]!==void 0&&(t[x]=v[x]);return t}t.data={attributes:{}};const i=this.index;i!==null&&(t.data.index={type:i.array.constructor.name,array:Array.prototype.slice.call(i.array)});const s=this.attributes;for(const v in s){const x=s[v];t.data.attributes[v]=x.toJSON(t.data)}const o={};let f=!1;for(const v in this.morphAttributes){const x=this.morphAttributes[v],M=[];for(let b=0,T=x.length;b<T;b++){const P=x[b];M.push(P.toJSON(t.data))}M.length>0&&(o[v]=M,f=!0)}f&&(t.data.morphAttributes=o,t.data.morphTargetsRelative=this.morphTargetsRelative);const m=this.groups;m.length>0&&(t.data.groups=JSON.parse(JSON.stringify(m)));const p=this.boundingSphere;return p!==null&&(t.data.boundingSphere={center:p.center.toArray(),radius:p.radius}),t}clone(){return new this.constructor().copy(this)}copy(t){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const i={};this.name=t.name;const s=t.index;s!==null&&this.setIndex(s.clone(i));const o=t.attributes;for(const x in o){const M=o[x];this.setAttribute(x,M.clone(i))}const f=t.morphAttributes;for(const x in f){const M=[],b=f[x];for(let T=0,P=b.length;T<P;T++)M.push(b[T].clone(i));this.morphAttributes[x]=M}this.morphTargetsRelative=t.morphTargetsRelative;const m=t.groups;for(let x=0,M=m.length;x<M;x++){const b=m[x];this.addGroup(b.start,b.count,b.materialIndex)}const p=t.boundingBox;p!==null&&(this.boundingBox=p.clone());const v=t.boundingSphere;return v!==null&&(this.boundingSphere=v.clone()),this.drawRange.start=t.drawRange.start,this.drawRange.count=t.drawRange.count,this.userData=t.userData,this}dispose(){this.dispatchEvent({type:"dispose"})}}const Tx=new oi,xs=new Tm,Qu=new hc,wx=new pe,Ll=new pe,Dl=new pe,Ul=new pe,Fp=new pe,ef=new pe,tf=new cn,nf=new cn,rf=new cn,Ax=new pe,Rx=new pe,Cx=new pe,sf=new pe,af=new pe;class cs extends ar{constructor(t=new ws,i=new Gv){super(),this.isMesh=!0,this.type="Mesh",this.geometry=t,this.material=i,this.updateMorphTargets()}copy(t,i){return super.copy(t,i),t.morphTargetInfluences!==void 0&&(this.morphTargetInfluences=t.morphTargetInfluences.slice()),t.morphTargetDictionary!==void 0&&(this.morphTargetDictionary=Object.assign({},t.morphTargetDictionary)),this.material=t.material,this.geometry=t.geometry,this}updateMorphTargets(){const i=this.geometry.morphAttributes,s=Object.keys(i);if(s.length>0){const o=i[s[0]];if(o!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let f=0,m=o.length;f<m;f++){const p=o[f].name||String(f);this.morphTargetInfluences.push(0),this.morphTargetDictionary[p]=f}}}}getVertexPosition(t,i){const s=this.geometry,o=s.attributes.position,f=s.morphAttributes.position,m=s.morphTargetsRelative;i.fromBufferAttribute(o,t);const p=this.morphTargetInfluences;if(f&&p){ef.set(0,0,0);for(let v=0,x=f.length;v<x;v++){const M=p[v],b=f[v];M!==0&&(Fp.fromBufferAttribute(b,t),m?ef.addScaledVector(Fp,M):ef.addScaledVector(Fp.sub(i),M))}i.add(ef)}return i}raycast(t,i){const s=this.geometry,o=this.material,f=this.matrixWorld;o!==void 0&&(s.boundingSphere===null&&s.computeBoundingSphere(),Qu.copy(s.boundingSphere),Qu.applyMatrix4(f),xs.copy(t.ray).recast(t.near),!(Qu.containsPoint(xs.origin)===!1&&(xs.intersectSphere(Qu,wx)===null||xs.origin.distanceToSquared(wx)>(t.far-t.near)**2))&&(Tx.copy(f).invert(),xs.copy(t.ray).applyMatrix4(Tx),!(s.boundingBox!==null&&xs.intersectsBox(s.boundingBox)===!1)&&this._computeIntersections(t,i)))}_computeIntersections(t,i){let s;const o=this.geometry,f=this.material,m=o.index,p=o.attributes.position,v=o.attributes.uv,x=o.attributes.uv1,M=o.attributes.normal,b=o.groups,T=o.drawRange;if(m!==null)if(Array.isArray(f))for(let P=0,N=b.length;P<N;P++){const L=b[P],D=f[L.materialIndex],R=Math.max(L.start,T.start),W=Math.min(m.count,Math.min(L.start+L.count,T.start+T.count));for(let V=R,q=W;V<q;V+=3){const H=m.getX(V),Q=m.getX(V+1),re=m.getX(V+2);s=of(this,D,t,xs,v,x,M,H,Q,re),s&&(s.faceIndex=Math.floor(V/3),s.face.materialIndex=L.materialIndex,i.push(s))}}else{const P=Math.max(0,T.start),N=Math.min(m.count,T.start+T.count);for(let L=P,D=N;L<D;L+=3){const R=m.getX(L),W=m.getX(L+1),V=m.getX(L+2);s=of(this,f,t,xs,v,x,M,R,W,V),s&&(s.faceIndex=Math.floor(L/3),i.push(s))}}else if(p!==void 0)if(Array.isArray(f))for(let P=0,N=b.length;P<N;P++){const L=b[P],D=f[L.materialIndex],R=Math.max(L.start,T.start),W=Math.min(p.count,Math.min(L.start+L.count,T.start+T.count));for(let V=R,q=W;V<q;V+=3){const H=V,Q=V+1,re=V+2;s=of(this,D,t,xs,v,x,M,H,Q,re),s&&(s.faceIndex=Math.floor(V/3),s.face.materialIndex=L.materialIndex,i.push(s))}}else{const P=Math.max(0,T.start),N=Math.min(p.count,T.start+T.count);for(let L=P,D=N;L<D;L+=3){const R=L,W=L+1,V=L+2;s=of(this,f,t,xs,v,x,M,R,W,V),s&&(s.faceIndex=Math.floor(L/3),i.push(s))}}}}function zR(h,t,i,s,o,f,m,p){let v;if(t.side===ur?v=s.intersectTriangle(m,f,o,!0,p):v=s.intersectTriangle(o,f,m,t.side===Aa,p),v===null)return null;af.copy(p),af.applyMatrix4(h.matrixWorld);const x=i.ray.origin.distanceTo(af);return x<i.near||x>i.far?null:{distance:x,point:af.clone(),object:h}}function of(h,t,i,s,o,f,m,p,v,x){h.getVertexPosition(p,Ll),h.getVertexPosition(v,Dl),h.getVertexPosition(x,Ul);const M=zR(h,t,i,s,Ll,Dl,Ul,sf);if(M){o&&(tf.fromBufferAttribute(o,p),nf.fromBufferAttribute(o,v),rf.fromBufferAttribute(o,x),M.uv=Br.getInterpolation(sf,Ll,Dl,Ul,tf,nf,rf,new cn)),f&&(tf.fromBufferAttribute(f,p),nf.fromBufferAttribute(f,v),rf.fromBufferAttribute(f,x),M.uv1=Br.getInterpolation(sf,Ll,Dl,Ul,tf,nf,rf,new cn),M.uv2=M.uv1),m&&(Ax.fromBufferAttribute(m,p),Rx.fromBufferAttribute(m,v),Cx.fromBufferAttribute(m,x),M.normal=Br.getInterpolation(sf,Ll,Dl,Ul,Ax,Rx,Cx,new pe),M.normal.dot(s.direction)>0&&M.normal.multiplyScalar(-1));const b={a:p,b:v,c:x,normal:new pe,materialIndex:0};Br.getNormal(Ll,Dl,Ul,b.normal),M.face=b}return M}class Co extends ws{constructor(t=1,i=1,s=1,o=1,f=1,m=1){super(),this.type="BoxGeometry",this.parameters={width:t,height:i,depth:s,widthSegments:o,heightSegments:f,depthSegments:m};const p=this;o=Math.floor(o),f=Math.floor(f),m=Math.floor(m);const v=[],x=[],M=[],b=[];let T=0,P=0;N("z","y","x",-1,-1,s,i,t,m,f,0),N("z","y","x",1,-1,s,i,-t,m,f,1),N("x","z","y",1,1,t,s,i,o,m,2),N("x","z","y",1,-1,t,s,-i,o,m,3),N("x","y","z",1,-1,t,i,s,o,f,4),N("x","y","z",-1,-1,t,i,-s,o,f,5),this.setIndex(v),this.setAttribute("position",new ba(x,3)),this.setAttribute("normal",new ba(M,3)),this.setAttribute("uv",new ba(b,2));function N(L,D,R,W,V,q,H,Q,re,oe,B){const te=q/re,we=H/oe,Ae=q/2,de=H/2,xe=Q/2,ye=re+1,He=oe+1;let be=0,Le=0;const nt=new pe;for(let Ye=0;Ye<He;Ye++){const It=Ye*we-de;for(let lt=0;lt<ye;lt++){const Ce=lt*te-Ae;nt[L]=Ce*W,nt[D]=It*V,nt[R]=xe,x.push(nt.x,nt.y,nt.z),nt[L]=0,nt[D]=0,nt[R]=Q>0?1:-1,M.push(nt.x,nt.y,nt.z),b.push(lt/re),b.push(1-Ye/oe),be+=1}}for(let Ye=0;Ye<oe;Ye++)for(let It=0;It<re;It++){const lt=T+It+ye*Ye,Ce=T+It+ye*(Ye+1),ke=T+(It+1)+ye*(Ye+1),ut=T+(It+1)+ye*Ye;v.push(lt,Ce,ut),v.push(Ce,ke,ut),Le+=6}p.addGroup(P,Le,B),P+=Le,T+=be}}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new Co(t.width,t.height,t.depth,t.widthSegments,t.heightSegments,t.depthSegments)}}function nc(h){const t={};for(const i in h){t[i]={};for(const s in h[i]){const o=h[i][s];o&&(o.isColor||o.isMatrix3||o.isMatrix4||o.isVector2||o.isVector3||o.isVector4||o.isTexture||o.isQuaternion)?o.isRenderTargetTexture?(console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."),t[i][s]=null):t[i][s]=o.clone():Array.isArray(o)?t[i][s]=o.slice():t[i][s]=o}}return t}function ir(h){const t={};for(let i=0;i<h.length;i++){const s=nc(h[i]);for(const o in s)t[o]=s[o]}return t}function kR(h){const t=[];for(let i=0;i<h.length;i++)t.push(h[i].clone());return t}function Wv(h){return h.getRenderTarget()===null?h.outputColorSpace:bs}const GR={clone:nc,merge:ir};var HR=`void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`,VR=`void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}`;class Ra extends uc{constructor(t){super(),this.isShaderMaterial=!0,this.type="ShaderMaterial",this.defines={},this.uniforms={},this.uniformsGroups=[],this.vertexShader=HR,this.fragmentShader=VR,this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.forceSinglePass=!0,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv1:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,t!==void 0&&this.setValues(t)}copy(t){return super.copy(t),this.fragmentShader=t.fragmentShader,this.vertexShader=t.vertexShader,this.uniforms=nc(t.uniforms),this.uniformsGroups=kR(t.uniformsGroups),this.defines=Object.assign({},t.defines),this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.fog=t.fog,this.lights=t.lights,this.clipping=t.clipping,this.extensions=Object.assign({},t.extensions),this.glslVersion=t.glslVersion,this}toJSON(t){const i=super.toJSON(t);i.glslVersion=this.glslVersion,i.uniforms={};for(const o in this.uniforms){const m=this.uniforms[o].value;m&&m.isTexture?i.uniforms[o]={type:"t",value:m.toJSON(t).uuid}:m&&m.isColor?i.uniforms[o]={type:"c",value:m.getHex()}:m&&m.isVector2?i.uniforms[o]={type:"v2",value:m.toArray()}:m&&m.isVector3?i.uniforms[o]={type:"v3",value:m.toArray()}:m&&m.isVector4?i.uniforms[o]={type:"v4",value:m.toArray()}:m&&m.isMatrix3?i.uniforms[o]={type:"m3",value:m.toArray()}:m&&m.isMatrix4?i.uniforms[o]={type:"m4",value:m.toArray()}:i.uniforms[o]={value:m}}Object.keys(this.defines).length>0&&(i.defines=this.defines),i.vertexShader=this.vertexShader,i.fragmentShader=this.fragmentShader,i.lights=this.lights,i.clipping=this.clipping;const s={};for(const o in this.extensions)this.extensions[o]===!0&&(s[o]=!0);return Object.keys(s).length>0&&(i.extensions=s),i}}class Xv extends ar{constructor(){super(),this.isCamera=!0,this.type="Camera",this.matrixWorldInverse=new oi,this.projectionMatrix=new oi,this.projectionMatrixInverse=new oi}copy(t,i){return super.copy(t,i),this.matrixWorldInverse.copy(t.matrixWorldInverse),this.projectionMatrix.copy(t.projectionMatrix),this.projectionMatrixInverse.copy(t.projectionMatrixInverse),this}getWorldDirection(t){this.updateWorldMatrix(!0,!1);const i=this.matrixWorld.elements;return t.set(-i[8],-i[9],-i[10]).normalize()}updateMatrixWorld(t){super.updateMatrixWorld(t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(t,i){super.updateWorldMatrix(t,i),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return new this.constructor().copy(this)}}class zr extends Xv{constructor(t=50,i=1,s=.1,o=2e3){super(),this.isPerspectiveCamera=!0,this.type="PerspectiveCamera",this.fov=t,this.zoom=1,this.near=s,this.far=o,this.focus=10,this.aspect=i,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(t,i){return super.copy(t,i),this.fov=t.fov,this.zoom=t.zoom,this.near=t.near,this.far=t.far,this.focus=t.focus,this.aspect=t.aspect,this.view=t.view===null?null:Object.assign({},t.view),this.filmGauge=t.filmGauge,this.filmOffset=t.filmOffset,this}setFocalLength(t){const i=.5*this.getFilmHeight()/t;this.fov=am*2*Math.atan(i),this.updateProjectionMatrix()}getFocalLength(){const t=Math.tan(vp*.5*this.fov);return .5*this.getFilmHeight()/t}getEffectiveFOV(){return am*2*Math.atan(Math.tan(vp*.5*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}setViewOffset(t,i,s,o,f,m){this.aspect=t/i,this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=i,this.view.offsetX=s,this.view.offsetY=o,this.view.width=f,this.view.height=m,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=this.near;let i=t*Math.tan(vp*.5*this.fov)/this.zoom,s=2*i,o=this.aspect*s,f=-.5*o;const m=this.view;if(this.view!==null&&this.view.enabled){const v=m.fullWidth,x=m.fullHeight;f+=m.offsetX*o/v,i-=m.offsetY*s/x,o*=m.width/v,s*=m.height/x}const p=this.filmOffset;p!==0&&(f+=t*p/this.getFilmWidth()),this.projectionMatrix.makePerspective(f,f+o,i,i-s,t,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const i=super.toJSON(t);return i.object.fov=this.fov,i.object.zoom=this.zoom,i.object.near=this.near,i.object.far=this.far,i.object.focus=this.focus,i.object.aspect=this.aspect,this.view!==null&&(i.object.view=Object.assign({},this.view)),i.object.filmGauge=this.filmGauge,i.object.filmOffset=this.filmOffset,i}}const Il=-90,Nl=1;class WR extends ar{constructor(t,i,s){super(),this.type="CubeCamera",this.renderTarget=s;const o=new zr(Il,Nl,t,i);o.layers=this.layers,o.up.set(0,1,0),o.lookAt(1,0,0),this.add(o);const f=new zr(Il,Nl,t,i);f.layers=this.layers,f.up.set(0,1,0),f.lookAt(-1,0,0),this.add(f);const m=new zr(Il,Nl,t,i);m.layers=this.layers,m.up.set(0,0,-1),m.lookAt(0,1,0),this.add(m);const p=new zr(Il,Nl,t,i);p.layers=this.layers,p.up.set(0,0,1),p.lookAt(0,-1,0),this.add(p);const v=new zr(Il,Nl,t,i);v.layers=this.layers,v.up.set(0,1,0),v.lookAt(0,0,1),this.add(v);const x=new zr(Il,Nl,t,i);x.layers=this.layers,x.up.set(0,1,0),x.lookAt(0,0,-1),this.add(x)}update(t,i){this.parent===null&&this.updateMatrixWorld();const s=this.renderTarget,[o,f,m,p,v,x]=this.children,M=t.getRenderTarget(),b=t.toneMapping,T=t.xr.enabled;t.toneMapping=$s,t.xr.enabled=!1;const P=s.texture.generateMipmaps;s.texture.generateMipmaps=!1,t.setRenderTarget(s,0),t.render(i,o),t.setRenderTarget(s,1),t.render(i,f),t.setRenderTarget(s,2),t.render(i,m),t.setRenderTarget(s,3),t.render(i,p),t.setRenderTarget(s,4),t.render(i,v),s.texture.generateMipmaps=P,t.setRenderTarget(s,5),t.render(i,x),t.setRenderTarget(M),t.toneMapping=b,t.xr.enabled=T,s.texture.needsPMREMUpdate=!0}}class qv extends fr{constructor(t,i,s,o,f,m,p,v,x,M){t=t!==void 0?t:[],i=i!==void 0?i:Ql,super(t,i,s,o,f,m,p,v,x,M),this.isCubeTexture=!0,this.flipY=!1}get images(){return this.image}set images(t){this.image=t}}class XR extends Ao{constructor(t=1,i={}){super(t,t,i),this.isWebGLCubeRenderTarget=!0;const s={width:t,height:t,depth:1},o=[s,s,s,s,s,s];i.encoding!==void 0&&(vh("THREE.WebGLCubeRenderTarget: option.encoding has been replaced by option.colorSpace."),i.colorSpace=i.encoding===Mo?vn:So),this.texture=new qv(o,i.mapping,i.wrapS,i.wrapT,i.magFilter,i.minFilter,i.format,i.type,i.anisotropy,i.colorSpace),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=i.generateMipmaps!==void 0?i.generateMipmaps:!1,this.texture.minFilter=i.minFilter!==void 0?i.minFilter:Or}fromEquirectangularTexture(t,i){this.texture.type=i.type,this.texture.colorSpace=i.colorSpace,this.texture.generateMipmaps=i.generateMipmaps,this.texture.minFilter=i.minFilter,this.texture.magFilter=i.magFilter;const s={uniforms:{tEquirect:{value:null}},vertexShader:`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,fragmentShader:`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`},o=new Co(5,5,5),f=new Ra({name:"CubemapFromEquirect",uniforms:nc(s.uniforms),vertexShader:s.vertexShader,fragmentShader:s.fragmentShader,side:ur,blending:Sa});f.uniforms.tEquirect.value=i;const m=new cs(o,f),p=i.minFilter;return i.minFilter===Eh&&(i.minFilter=Or),new WR(1,10,this).update(t,m),i.minFilter=p,m.geometry.dispose(),m.material.dispose(),this}clear(t,i,s,o){const f=t.getRenderTarget();for(let m=0;m<6;m++)t.setRenderTarget(this,m),t.clear(i,s,o);t.setRenderTarget(f)}}const Op=new pe,qR=new pe,YR=new Ln;class fo{constructor(t=new pe(1,0,0),i=0){this.isPlane=!0,this.normal=t,this.constant=i}set(t,i){return this.normal.copy(t),this.constant=i,this}setComponents(t,i,s,o){return this.normal.set(t,i,s),this.constant=o,this}setFromNormalAndCoplanarPoint(t,i){return this.normal.copy(t),this.constant=-i.dot(this.normal),this}setFromCoplanarPoints(t,i,s){const o=Op.subVectors(s,i).cross(qR.subVectors(t,i)).normalize();return this.setFromNormalAndCoplanarPoint(o,t),this}copy(t){return this.normal.copy(t.normal),this.constant=t.constant,this}normalize(){const t=1/this.normal.length();return this.normal.multiplyScalar(t),this.constant*=t,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(t){return this.normal.dot(t)+this.constant}distanceToSphere(t){return this.distanceToPoint(t.center)-t.radius}projectPoint(t,i){return i.copy(t).addScaledVector(this.normal,-this.distanceToPoint(t))}intersectLine(t,i){const s=t.delta(Op),o=this.normal.dot(s);if(o===0)return this.distanceToPoint(t.start)===0?i.copy(t.start):null;const f=-(t.start.dot(this.normal)+this.constant)/o;return f<0||f>1?null:i.copy(t.start).addScaledVector(s,f)}intersectsLine(t){const i=this.distanceToPoint(t.start),s=this.distanceToPoint(t.end);return i<0&&s>0||s<0&&i>0}intersectsBox(t){return t.intersectsPlane(this)}intersectsSphere(t){return t.intersectsPlane(this)}coplanarPoint(t){return t.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(t,i){const s=i||YR.getNormalMatrix(t),o=this.coplanarPoint(Op).applyMatrix4(t),f=this.normal.applyMatrix3(s).normalize();return this.constant=-o.dot(f),this}translate(t){return this.constant-=t.dot(this.normal),this}equals(t){return t.normal.equals(this.normal)&&t.constant===this.constant}clone(){return new this.constructor().copy(this)}}const co=new hc,lf=new pe;class Yv{constructor(t=new fo,i=new fo,s=new fo,o=new fo,f=new fo,m=new fo){this.planes=[t,i,s,o,f,m]}set(t,i,s,o,f,m){const p=this.planes;return p[0].copy(t),p[1].copy(i),p[2].copy(s),p[3].copy(o),p[4].copy(f),p[5].copy(m),this}copy(t){const i=this.planes;for(let s=0;s<6;s++)i[s].copy(t.planes[s]);return this}setFromProjectionMatrix(t){const i=this.planes,s=t.elements,o=s[0],f=s[1],m=s[2],p=s[3],v=s[4],x=s[5],M=s[6],b=s[7],T=s[8],P=s[9],N=s[10],L=s[11],D=s[12],R=s[13],W=s[14],V=s[15];return i[0].setComponents(p-o,b-v,L-T,V-D).normalize(),i[1].setComponents(p+o,b+v,L+T,V+D).normalize(),i[2].setComponents(p+f,b+x,L+P,V+R).normalize(),i[3].setComponents(p-f,b-x,L-P,V-R).normalize(),i[4].setComponents(p-m,b-M,L-N,V-W).normalize(),i[5].setComponents(p+m,b+M,L+N,V+W).normalize(),this}intersectsObject(t){if(t.boundingSphere!==void 0)t.boundingSphere===null&&t.computeBoundingSphere(),co.copy(t.boundingSphere).applyMatrix4(t.matrixWorld);else{const i=t.geometry;i.boundingSphere===null&&i.computeBoundingSphere(),co.copy(i.boundingSphere).applyMatrix4(t.matrixWorld)}return this.intersectsSphere(co)}intersectsSprite(t){return co.center.set(0,0,0),co.radius=.7071067811865476,co.applyMatrix4(t.matrixWorld),this.intersectsSphere(co)}intersectsSphere(t){const i=this.planes,s=t.center,o=-t.radius;for(let f=0;f<6;f++)if(i[f].distanceToPoint(s)<o)return!1;return!0}intersectsBox(t){const i=this.planes;for(let s=0;s<6;s++){const o=i[s];if(lf.x=o.normal.x>0?t.max.x:t.min.x,lf.y=o.normal.y>0?t.max.y:t.min.y,lf.z=o.normal.z>0?t.max.z:t.min.z,o.distanceToPoint(lf)<0)return!1}return!0}containsPoint(t){const i=this.planes;for(let s=0;s<6;s++)if(i[s].distanceToPoint(t)<0)return!1;return!0}clone(){return new this.constructor().copy(this)}}function Zv(){let h=null,t=!1,i=null,s=null;function o(f,m){i(f,m),s=h.requestAnimationFrame(o)}return{start:function(){t!==!0&&i!==null&&(s=h.requestAnimationFrame(o),t=!0)},stop:function(){h.cancelAnimationFrame(s),t=!1},setAnimationLoop:function(f){i=f},setContext:function(f){h=f}}}function ZR(h,t){const i=t.isWebGL2,s=new WeakMap;function o(x,M){const b=x.array,T=x.usage,P=h.createBuffer();h.bindBuffer(M,P),h.bufferData(M,b,T),x.onUploadCallback();let N;if(b instanceof Float32Array)N=h.FLOAT;else if(b instanceof Uint16Array)if(x.isFloat16BufferAttribute)if(i)N=h.HALF_FLOAT;else throw new Error("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.");else N=h.UNSIGNED_SHORT;else if(b instanceof Int16Array)N=h.SHORT;else if(b instanceof Uint32Array)N=h.UNSIGNED_INT;else if(b instanceof Int32Array)N=h.INT;else if(b instanceof Int8Array)N=h.BYTE;else if(b instanceof Uint8Array)N=h.UNSIGNED_BYTE;else if(b instanceof Uint8ClampedArray)N=h.UNSIGNED_BYTE;else throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: "+b);return{buffer:P,type:N,bytesPerElement:b.BYTES_PER_ELEMENT,version:x.version}}function f(x,M,b){const T=M.array,P=M.updateRange;h.bindBuffer(b,x),P.count===-1?h.bufferSubData(b,0,T):(i?h.bufferSubData(b,P.offset*T.BYTES_PER_ELEMENT,T,P.offset,P.count):h.bufferSubData(b,P.offset*T.BYTES_PER_ELEMENT,T.subarray(P.offset,P.offset+P.count)),P.count=-1),M.onUploadCallback()}function m(x){return x.isInterleavedBufferAttribute&&(x=x.data),s.get(x)}function p(x){x.isInterleavedBufferAttribute&&(x=x.data);const M=s.get(x);M&&(h.deleteBuffer(M.buffer),s.delete(x))}function v(x,M){if(x.isGLBufferAttribute){const T=s.get(x);(!T||T.version<x.version)&&s.set(x,{buffer:x.buffer,type:x.type,bytesPerElement:x.elementSize,version:x.version});return}x.isInterleavedBufferAttribute&&(x=x.data);const b=s.get(x);b===void 0?s.set(x,o(x,M)):b.version<x.version&&(f(b.buffer,x,M),b.version=x.version)}return{get:m,remove:p,update:v}}class Am extends ws{constructor(t=1,i=1,s=1,o=1){super(),this.type="PlaneGeometry",this.parameters={width:t,height:i,widthSegments:s,heightSegments:o};const f=t/2,m=i/2,p=Math.floor(s),v=Math.floor(o),x=p+1,M=v+1,b=t/p,T=i/v,P=[],N=[],L=[],D=[];for(let R=0;R<M;R++){const W=R*T-m;for(let V=0;V<x;V++){const q=V*b-f;N.push(q,-W,0),L.push(0,0,1),D.push(V/p),D.push(1-R/v)}}for(let R=0;R<v;R++)for(let W=0;W<p;W++){const V=W+x*R,q=W+x*(R+1),H=W+1+x*(R+1),Q=W+1+x*R;P.push(V,q,Q),P.push(q,H,Q)}this.setIndex(P),this.setAttribute("position",new ba(N,3)),this.setAttribute("normal",new ba(L,3)),this.setAttribute("uv",new ba(D,2))}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new Am(t.width,t.height,t.widthSegments,t.heightSegments)}}var KR=`#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;
#endif`,$R=`#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,JR=`#ifdef USE_ALPHATEST
	if ( diffuseColor.a < alphaTest ) discard;
#endif`,jR=`#ifdef USE_ALPHATEST
	uniform float alphaTest;
#endif`,QR=`#ifdef USE_AOMAP
	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;
	reflectedLight.indirectDiffuse *= ambientOcclusion;
	#if defined( USE_ENVMAP ) && defined( STANDARD )
		float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );
		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );
	#endif
#endif`,eC=`#ifdef USE_AOMAP
	uniform sampler2D aoMap;
	uniform float aoMapIntensity;
#endif`,tC="vec3 transformed = vec3( position );",nC=`vec3 objectNormal = vec3( normal );
#ifdef USE_TANGENT
	vec3 objectTangent = vec3( tangent.xyz );
#endif`,iC=`float G_BlinnPhong_Implicit( ) {
	return 0.25;
}
float D_BlinnPhong( const in float shininess, const in float dotNH ) {
	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );
}
vec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( specularColor, 1.0, dotVH );
	float G = G_BlinnPhong_Implicit( );
	float D = D_BlinnPhong( shininess, dotNH );
	return F * ( G * D );
} // validated`,rC=`#ifdef USE_IRIDESCENCE
	const mat3 XYZ_TO_REC709 = mat3(
		 3.2404542, -0.9692660,  0.0556434,
		-1.5371385,  1.8760108, -0.2040259,
		-0.4985314,  0.0415560,  1.0572252
	);
	vec3 Fresnel0ToIor( vec3 fresnel0 ) {
		vec3 sqrtF0 = sqrt( fresnel0 );
		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );
	}
	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );
	}
	float IorToFresnel0( float transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));
	}
	vec3 evalSensitivity( float OPD, vec3 shift ) {
		float phase = 2.0 * PI * OPD * 1.0e-9;
		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );
		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );
		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );
		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );
		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );
		xyz /= 1.0685e-7;
		vec3 rgb = XYZ_TO_REC709 * xyz;
		return rgb;
	}
	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {
		vec3 I;
		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );
		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );
		float cosTheta2Sq = 1.0 - sinTheta2Sq;
		if ( cosTheta2Sq < 0.0 ) {
			 return vec3( 1.0 );
		}
		float cosTheta2 = sqrt( cosTheta2Sq );
		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );
		float R12 = F_Schlick( R0, 1.0, cosTheta1 );
		float R21 = R12;
		float T121 = 1.0 - R12;
		float phi12 = 0.0;
		if ( iridescenceIOR < outsideIOR ) phi12 = PI;
		float phi21 = PI - phi12;
		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );
		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );
		vec3 phi23 = vec3( 0.0 );
		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;
		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;
		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;
		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;
		vec3 phi = vec3( phi21 ) + phi23;
		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );
		vec3 r123 = sqrt( R123 );
		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );
		vec3 C0 = R12 + Rs;
		I = C0;
		vec3 Cm = Rs - T121;
		for ( int m = 1; m <= 2; ++ m ) {
			Cm *= r123;
			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );
			I += Cm * Sm;
		}
		return max( I, vec3( 0.0 ) );
	}
#endif`,sC=`#ifdef USE_BUMPMAP
	uniform sampler2D bumpMap;
	uniform float bumpScale;
	vec2 dHdxy_fwd() {
		vec2 dSTdx = dFdx( vBumpMapUv );
		vec2 dSTdy = dFdy( vBumpMapUv );
		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;
		return vec2( dBx, dBy );
	}
	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {
		vec3 vSigmaX = dFdx( surf_pos.xyz );
		vec3 vSigmaY = dFdy( surf_pos.xyz );
		vec3 vN = surf_norm;
		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );
		float fDet = dot( vSigmaX, R1 ) * faceDirection;
		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );
	}
#endif`,aC=`#if NUM_CLIPPING_PLANES > 0
	vec4 plane;
	#pragma unroll_loop_start
	for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
		plane = clippingPlanes[ i ];
		if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;
	}
	#pragma unroll_loop_end
	#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
		bool clipped = true;
		#pragma unroll_loop_start
		for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;
		}
		#pragma unroll_loop_end
		if ( clipped ) discard;
	#endif
#endif`,oC=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];
#endif`,lC=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
#endif`,cC=`#if NUM_CLIPPING_PLANES > 0
	vClipPosition = - mvPosition.xyz;
#endif`,hC=`#if defined( USE_COLOR_ALPHA )
	diffuseColor *= vColor;
#elif defined( USE_COLOR )
	diffuseColor.rgb *= vColor;
#endif`,uC=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR )
	varying vec3 vColor;
#endif`,fC=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )
	varying vec3 vColor;
#endif`,dC=`#if defined( USE_COLOR_ALPHA )
	vColor = vec4( 1.0 );
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )
	vColor = vec3( 1.0 );
#endif
#ifdef USE_COLOR
	vColor *= color;
#endif
#ifdef USE_INSTANCING_COLOR
	vColor.xyz *= instanceColor.xyz;
#endif`,pC=`#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement( a ) ( 1.0 - saturate( a ) )
float pow2( const in float x ) { return x*x; }
vec3 pow2( const in vec3 x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }
float average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }
highp float rand( const in vec2 uv ) {
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
	return fract( sin( sn ) * c );
}
#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif
struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};
struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};
struct GeometricContext {
	vec3 position;
	vec3 normal;
	vec3 viewDir;
#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal;
#endif
};
vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
}
vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
}
mat3 transposeMat3( const in mat3 m ) {
	mat3 tmp;
	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
	return tmp;
}
float luminance( const in vec3 rgb ) {
	const vec3 weights = vec3( 0.2126729, 0.7151522, 0.0721750 );
	return dot( weights, rgb );
}
bool isPerspectiveMatrix( mat4 m ) {
	return m[ 2 ][ 3 ] == - 1.0;
}
vec2 equirectUv( in vec3 dir ) {
	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;
	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;
	return vec2( u, v );
}
vec3 BRDF_Lambert( const in vec3 diffuseColor ) {
	return RECIPROCAL_PI * diffuseColor;
}
vec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
float F_Schlick( const in float f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
} // validated`,mC=`#ifdef ENVMAP_TYPE_CUBE_UV
	#define cubeUV_minMipLevel 4.0
	#define cubeUV_minTileSize 16.0
	float getFace( vec3 direction ) {
		vec3 absDirection = abs( direction );
		float face = - 1.0;
		if ( absDirection.x > absDirection.z ) {
			if ( absDirection.x > absDirection.y )
				face = direction.x > 0.0 ? 0.0 : 3.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		} else {
			if ( absDirection.z > absDirection.y )
				face = direction.z > 0.0 ? 2.0 : 5.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		}
		return face;
	}
	vec2 getUV( vec3 direction, float face ) {
		vec2 uv;
		if ( face == 0.0 ) {
			uv = vec2( direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 1.0 ) {
			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );
		} else if ( face == 2.0 ) {
			uv = vec2( - direction.x, direction.y ) / abs( direction.z );
		} else if ( face == 3.0 ) {
			uv = vec2( - direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 4.0 ) {
			uv = vec2( - direction.x, direction.z ) / abs( direction.y );
		} else {
			uv = vec2( direction.x, direction.y ) / abs( direction.z );
		}
		return 0.5 * ( uv + 1.0 );
	}
	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {
		float face = getFace( direction );
		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );
		mipInt = max( mipInt, cubeUV_minMipLevel );
		float faceSize = exp2( mipInt );
		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;
		if ( face > 2.0 ) {
			uv.y += faceSize;
			face -= 3.0;
		}
		uv.x += face * faceSize;
		uv.x += filterInt * 3.0 * cubeUV_minTileSize;
		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );
		uv.x *= CUBEUV_TEXEL_WIDTH;
		uv.y *= CUBEUV_TEXEL_HEIGHT;
		#ifdef texture2DGradEXT
			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;
		#else
			return texture2D( envMap, uv ).rgb;
		#endif
	}
	#define cubeUV_r0 1.0
	#define cubeUV_v0 0.339
	#define cubeUV_m0 - 2.0
	#define cubeUV_r1 0.8
	#define cubeUV_v1 0.276
	#define cubeUV_m1 - 1.0
	#define cubeUV_r4 0.4
	#define cubeUV_v4 0.046
	#define cubeUV_m4 2.0
	#define cubeUV_r5 0.305
	#define cubeUV_v5 0.016
	#define cubeUV_m5 3.0
	#define cubeUV_r6 0.21
	#define cubeUV_v6 0.0038
	#define cubeUV_m6 4.0
	float roughnessToMip( float roughness ) {
		float mip = 0.0;
		if ( roughness >= cubeUV_r1 ) {
			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;
		} else if ( roughness >= cubeUV_r4 ) {
			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;
		} else if ( roughness >= cubeUV_r5 ) {
			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;
		} else if ( roughness >= cubeUV_r6 ) {
			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;
		} else {
			mip = - 2.0 * log2( 1.16 * roughness );		}
		return mip;
	}
	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {
		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );
		float mipF = fract( mip );
		float mipInt = floor( mip );
		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );
		if ( mipF == 0.0 ) {
			return vec4( color0, 1.0 );
		} else {
			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );
			return vec4( mix( color0, color1, mipF ), 1.0 );
		}
	}
#endif`,gC=`vec3 transformedNormal = objectNormal;
#ifdef USE_INSTANCING
	mat3 m = mat3( instanceMatrix );
	transformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );
	transformedNormal = m * transformedNormal;
#endif
transformedNormal = normalMatrix * transformedNormal;
#ifdef FLIP_SIDED
	transformedNormal = - transformedNormal;
#endif
#ifdef USE_TANGENT
	vec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#ifdef FLIP_SIDED
		transformedTangent = - transformedTangent;
	#endif
#endif`,_C=`#ifdef USE_DISPLACEMENTMAP
	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;
#endif`,xC=`#ifdef USE_DISPLACEMENTMAP
	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );
#endif`,vC=`#ifdef USE_EMISSIVEMAP
	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );
	totalEmissiveRadiance *= emissiveColor.rgb;
#endif`,yC=`#ifdef USE_EMISSIVEMAP
	uniform sampler2D emissiveMap;
#endif`,MC="gl_FragColor = linearToOutputTexel( gl_FragColor );",SC=`vec4 LinearToLinear( in vec4 value ) {
	return value;
}
vec4 LinearTosRGB( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}`,EC=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vec3 cameraToFrag;
		if ( isOrthographic ) {
			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToFrag = normalize( vWorldPosition - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( cameraToFrag, worldNormal );
		#else
			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );
		#endif
	#else
		vec3 reflectVec = vReflect;
	#endif
	#ifdef ENVMAP_TYPE_CUBE
		vec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );
	#else
		vec4 envColor = vec4( 0.0 );
	#endif
	#ifdef ENVMAP_BLENDING_MULTIPLY
		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_MIX )
		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_ADD )
		outgoingLight += envColor.xyz * specularStrength * reflectivity;
	#endif
#endif`,bC=`#ifdef USE_ENVMAP
	uniform float envMapIntensity;
	uniform float flipEnvMap;
	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif`,TC=`#ifdef USE_ENVMAP
	uniform float reflectivity;
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif
#endif`,wC=`#ifdef USE_ENVMAP
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;
	#else
		varying vec3 vReflect;
		uniform float refractionRatio;
	#endif
#endif`,AC=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vWorldPosition = worldPosition.xyz;
	#else
		vec3 cameraToVertex;
		if ( isOrthographic ) {
			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vReflect = reflect( cameraToVertex, worldNormal );
		#else
			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );
		#endif
	#endif
#endif`,RC=`#ifdef USE_FOG
	vFogDepth = - mvPosition.z;
#endif`,CC=`#ifdef USE_FOG
	varying float vFogDepth;
#endif`,PC=`#ifdef USE_FOG
	#ifdef FOG_EXP2
		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );
	#else
		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );
	#endif
	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );
#endif`,LC=`#ifdef USE_FOG
	uniform vec3 fogColor;
	varying float vFogDepth;
	#ifdef FOG_EXP2
		uniform float fogDensity;
	#else
		uniform float fogNear;
		uniform float fogFar;
	#endif
#endif`,DC=`#ifdef USE_GRADIENTMAP
	uniform sampler2D gradientMap;
#endif
vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );
	#ifdef USE_GRADIENTMAP
		return vec3( texture2D( gradientMap, coord ).r );
	#else
		vec2 fw = fwidth( coord ) * 0.5;
		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );
	#endif
}`,UC=`#ifdef USE_LIGHTMAP
	vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
	vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
	reflectedLight.indirectDiffuse += lightMapIrradiance;
#endif`,IC=`#ifdef USE_LIGHTMAP
	uniform sampler2D lightMap;
	uniform float lightMapIntensity;
#endif`,NC=`LambertMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularStrength = specularStrength;`,FC=`varying vec3 vViewPosition;
struct LambertMaterial {
	vec3 diffuseColor;
	float specularStrength;
};
void RE_Direct_Lambert( const in IncidentLight directLight, const in GeometricContext geometry, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in GeometricContext geometry, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Lambert
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert`,OC=`uniform bool receiveShadow;
uniform vec3 ambientLightColor;
uniform vec3 lightProbe[ 9 ];
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {
	float x = normal.x, y = normal.y, z = normal.z;
	vec3 result = shCoefficients[ 0 ] * 0.886227;
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
	return result;
}
vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {
	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );
	return irradiance;
}
vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {
	vec3 irradiance = ambientLightColor;
	return irradiance;
}
float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {
	#if defined ( LEGACY_LIGHTS )
		if ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {
			return pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );
		}
		return 1.0;
	#else
		float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );
		if ( cutoffDistance > 0.0 ) {
			distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );
		}
		return distanceFalloff;
	#endif
}
float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {
	return smoothstep( coneCosine, penumbraCosine, angleCosine );
}
#if NUM_DIR_LIGHTS > 0
	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};
	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];
	void getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {
		light.color = directionalLight.color;
		light.direction = directionalLight.direction;
		light.visible = true;
	}
#endif
#if NUM_POINT_LIGHTS > 0
	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};
	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];
	void getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {
		vec3 lVector = pointLight.position - geometry.position;
		light.direction = normalize( lVector );
		float lightDistance = length( lVector );
		light.color = pointLight.color;
		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );
		light.visible = ( light.color != vec3( 0.0 ) );
	}
#endif
#if NUM_SPOT_LIGHTS > 0
	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};
	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];
	void getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {
		vec3 lVector = spotLight.position - geometry.position;
		light.direction = normalize( lVector );
		float angleCos = dot( light.direction, spotLight.direction );
		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );
		if ( spotAttenuation > 0.0 ) {
			float lightDistance = length( lVector );
			light.color = spotLight.color * spotAttenuation;
			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );
			light.visible = ( light.color != vec3( 0.0 ) );
		} else {
			light.color = vec3( 0.0 );
			light.visible = false;
		}
	}
#endif
#if NUM_RECT_AREA_LIGHTS > 0
	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};
	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;
	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];
#endif
#if NUM_HEMI_LIGHTS > 0
	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};
	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];
	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {
		float dotNL = dot( normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;
		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );
		return irradiance;
	}
#endif`,BC=`#if defined( USE_ENVMAP )
	vec3 getIBLIrradiance( const in vec3 normal ) {
		#if defined( ENVMAP_TYPE_CUBE_UV )
			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );
			return PI * envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {
		#if defined( ENVMAP_TYPE_CUBE_UV )
			vec3 reflectVec = reflect( - viewDir, normal );
			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );
			return envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
#endif`,zC=`ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;`,kC=`varying vec3 vViewPosition;
struct ToonMaterial {
	vec3 diffuseColor;
};
void RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	vec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon`,GC=`BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;`,HC=`varying vec3 vViewPosition;
struct BlinnPhongMaterial {
	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;
};
void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;
}
void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong`,VC=`PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
vec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );
material.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;
material.roughness = min( material.roughness, 1.0 );
#ifdef IOR
	material.ior = ior;
	#ifdef USE_SPECULAR
		float specularIntensityFactor = specularIntensity;
		vec3 specularColorFactor = specularColor;
		#ifdef USE_SPECULAR_COLORMAP
			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;
		#endif
		#ifdef USE_SPECULAR_INTENSITYMAP
			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;
		#endif
		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );
	#else
		float specularIntensityFactor = 1.0;
		vec3 specularColorFactor = vec3( 1.0 );
		material.specularF90 = 1.0;
	#endif
	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );
#else
	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );
	material.specularF90 = 1.0;
#endif
#ifdef USE_CLEARCOAT
	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	material.clearcoatF0 = vec3( 0.04 );
	material.clearcoatF90 = 1.0;
	#ifdef USE_CLEARCOATMAP
		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;
	#endif
	#ifdef USE_CLEARCOAT_ROUGHNESSMAP
		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;
	#endif
	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
#endif
#ifdef USE_IRIDESCENCE
	material.iridescence = iridescence;
	material.iridescenceIOR = iridescenceIOR;
	#ifdef USE_IRIDESCENCEMAP
		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;
	#endif
	#ifdef USE_IRIDESCENCE_THICKNESSMAP
		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;
	#else
		material.iridescenceThickness = iridescenceThicknessMaximum;
	#endif
#endif
#ifdef USE_SHEEN
	material.sheenColor = sheenColor;
	#ifdef USE_SHEEN_COLORMAP
		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;
	#endif
	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );
	#ifdef USE_SHEEN_ROUGHNESSMAP
		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;
	#endif
#endif`,WC=`struct PhysicalMaterial {
	vec3 diffuseColor;
	float roughness;
	vec3 specularColor;
	float specularF90;
	#ifdef USE_CLEARCOAT
		float clearcoat;
		float clearcoatRoughness;
		vec3 clearcoatF0;
		float clearcoatF90;
	#endif
	#ifdef USE_IRIDESCENCE
		float iridescence;
		float iridescenceIOR;
		float iridescenceThickness;
		vec3 iridescenceFresnel;
		vec3 iridescenceF0;
	#endif
	#ifdef USE_SHEEN
		vec3 sheenColor;
		float sheenRoughness;
	#endif
	#ifdef IOR
		float ior;
	#endif
	#ifdef USE_TRANSMISSION
		float transmission;
		float transmissionAlpha;
		float thickness;
		float attenuationDistance;
		vec3 attenuationColor;
	#endif
};
vec3 clearcoatSpecular = vec3( 0.0 );
vec3 sheenSpecular = vec3( 0.0 );
vec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {
    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );
    float x2 = x * x;
    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );
    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );
}
float V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	return 0.5 / max( gv + gl, EPSILON );
}
float D_GGX( const in float alpha, const in float dotNH ) {
	float a2 = pow2( alpha );
	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;
	return RECIPROCAL_PI * a2 / pow2( denom );
}
#ifdef USE_CLEARCOAT
	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {
		vec3 f0 = material.clearcoatF0;
		float f90 = material.clearcoatF90;
		float roughness = material.clearcoatRoughness;
		float alpha = pow2( roughness );
		vec3 halfDir = normalize( lightDir + viewDir );
		float dotNL = saturate( dot( normal, lightDir ) );
		float dotNV = saturate( dot( normal, viewDir ) );
		float dotNH = saturate( dot( normal, halfDir ) );
		float dotVH = saturate( dot( viewDir, halfDir ) );
		vec3 F = F_Schlick( f0, f90, dotVH );
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
		return F * ( V * D );
	}
#endif
vec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {
	vec3 f0 = material.specularColor;
	float f90 = material.specularF90;
	float roughness = material.roughness;
	float alpha = pow2( roughness );
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( f0, f90, dotVH );
	#ifdef USE_IRIDESCENCE
		F = mix( F, material.iridescenceFresnel, material.iridescence );
	#endif
	float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
	float D = D_GGX( alpha, dotNH );
	return F * ( V * D );
}
vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	float dotNV = saturate( dot( N, V ) );
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
	uv = uv * LUT_SCALE + LUT_BIAS;
	return uv;
}
float LTC_ClippedSphereFormFactor( const in vec3 f ) {
	float l = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
	float x = dot( v1, v2 );
	float y = abs( x );
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;
	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
	return cross( v1, v2 ) * theta_sintheta;
}
vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );
	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 );
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return vec3( result );
}
#if defined( USE_SHEEN )
float D_Charlie( float roughness, float dotNH ) {
	float alpha = pow2( roughness );
	float invAlpha = 1.0 / alpha;
	float cos2h = dotNH * dotNH;
	float sin2h = max( 1.0 - cos2h, 0.0078125 );
	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
}
float V_Neubelt( float dotNV, float dotNL ) {
	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );
}
vec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float D = D_Charlie( sheenRoughness, dotNH );
	float V = V_Neubelt( dotNV, dotNL );
	return sheenColor * ( D * V );
}
#endif
float IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	float r2 = roughness * roughness;
	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;
	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;
	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );
	return saturate( DG * RECIPROCAL_PI );
}
vec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;
	return fab;
}
vec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	return specularColor * fab.x + specularF90 * fab.y;
}
#ifdef USE_IRIDESCENCE
void computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#else
void computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#endif
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	#ifdef USE_IRIDESCENCE
		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );
	#else
		vec3 Fr = specularColor;
	#endif
	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;
	float Ess = fab.x + fab.y;
	float Ems = 1.0 - Ess;
	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );
	singleScatter += FssEss;
	multiScatter += Fms * Ems;
}
#if NUM_RECT_AREA_LIGHTS > 0
	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
		vec3 normal = geometry.normal;
		vec3 viewDir = geometry.viewDir;
		vec3 position = geometry.position;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.roughness;
		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;
		vec2 uv = LTC_Uv( normal, viewDir, roughness );
		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );
		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(    0, 1,    0 ),
			vec3( t1.z, 0, t1.w )
		);
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );
		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );
		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );
	}
#endif
void RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifdef USE_CLEARCOAT
		float dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );
		vec3 ccIrradiance = dotNLcc * directLight.color;
		clearcoatSpecular += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material );
	#endif
	#ifdef USE_SHEEN
		sheenSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );
	#endif
	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material );
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {
	#ifdef USE_CLEARCOAT
		clearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		sheenSpecular += irradiance * material.sheenColor * IBLSheenBRDF( geometry.normal, geometry.viewDir, material.sheenRoughness );
	#endif
	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;
	#ifdef USE_IRIDESCENCE
		computeMultiscatteringIridescence( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );
	#else
		computeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );
	#endif
	vec3 totalScattering = singleScattering + multiScattering;
	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );
	reflectedLight.indirectSpecular += radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;
	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {
	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
}`,XC=`
GeometricContext geometry;
geometry.position = - vViewPosition;
geometry.normal = normal;
geometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );
#ifdef USE_CLEARCOAT
	geometry.clearcoatNormal = clearcoatNormal;
#endif
#ifdef USE_IRIDESCENCE
	float dotNVi = saturate( dot( normal, geometry.viewDir ) );
	if ( material.iridescenceThickness == 0.0 ) {
		material.iridescence = 0.0;
	} else {
		material.iridescence = saturate( material.iridescence );
	}
	if ( material.iridescence > 0.0 ) {
		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );
		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );
	}
#endif
IncidentLight directLight;
#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )
	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		pointLight = pointLights[ i ];
		getPointLightInfo( pointLight, geometry, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )
	SpotLight spotLight;
	vec4 spotColor;
	vec3 spotLightCoord;
	bool inSpotLightMap;
	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		spotLight = spotLights[ i ];
		getSpotLightInfo( spotLight, geometry, directLight );
		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX
		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS
		#else
		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#endif
		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )
			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;
			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );
			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );
			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;
		#endif
		#undef SPOT_LIGHT_MAP_INDEX
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )
	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		directionalLight = directionalLights[ i ];
		getDirectionalLightInfo( directionalLight, geometry, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )
	RectAreaLight rectAreaLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {
		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if defined( RE_IndirectDiffuse )
	vec3 iblIrradiance = vec3( 0.0 );
	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );
	irradiance += getLightProbeIrradiance( lightProbe, geometry.normal );
	#if ( NUM_HEMI_LIGHTS > 0 )
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );
		}
		#pragma unroll_loop_end
	#endif
#endif
#if defined( RE_IndirectSpecular )
	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );
#endif`,qC=`#if defined( RE_IndirectDiffuse )
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
		irradiance += lightMapIrradiance;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )
		iblIrradiance += getIBLIrradiance( geometry.normal );
	#endif
#endif
#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )
	radiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );
	#ifdef USE_CLEARCOAT
		clearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );
	#endif
#endif`,YC=`#if defined( RE_IndirectDiffuse )
	RE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );
#endif
#if defined( RE_IndirectSpecular )
	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );
#endif`,ZC=`#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )
	gl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;
#endif`,KC=`#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )
	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,$C=`#ifdef USE_LOGDEPTHBUF
	#ifdef USE_LOGDEPTHBUF_EXT
		varying float vFragDepth;
		varying float vIsPerspective;
	#else
		uniform float logDepthBufFC;
	#endif
#endif`,JC=`#ifdef USE_LOGDEPTHBUF
	#ifdef USE_LOGDEPTHBUF_EXT
		vFragDepth = 1.0 + gl_Position.w;
		vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );
	#else
		if ( isPerspectiveMatrix( projectionMatrix ) ) {
			gl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;
			gl_Position.z *= gl_Position.w;
		}
	#endif
#endif`,jC=`#ifdef USE_MAP
	diffuseColor *= texture2D( map, vMapUv );
#endif`,QC=`#ifdef USE_MAP
	uniform sampler2D map;
#endif`,eP=`#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	#if defined( USE_POINTS_UV )
		vec2 uv = vUv;
	#else
		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;
	#endif
#endif
#ifdef USE_MAP
	diffuseColor *= texture2D( map, uv );
#endif
#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, uv ).g;
#endif`,tP=`#if defined( USE_POINTS_UV )
	varying vec2 vUv;
#else
	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
		uniform mat3 uvTransform;
	#endif
#endif
#ifdef USE_MAP
	uniform sampler2D map;
#endif
#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,nP=`float metalnessFactor = metalness;
#ifdef USE_METALNESSMAP
	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );
	metalnessFactor *= texelMetalness.b;
#endif`,iP=`#ifdef USE_METALNESSMAP
	uniform sampler2D metalnessMap;
#endif`,rP=`#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )
	vColor *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		#if defined( USE_COLOR_ALPHA )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];
		#elif defined( USE_COLOR )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];
		#endif
	}
#endif`,sP=`#ifdef USE_MORPHNORMALS
	objectNormal *= morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
			if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];
		}
	#else
		objectNormal += morphNormal0 * morphTargetInfluences[ 0 ];
		objectNormal += morphNormal1 * morphTargetInfluences[ 1 ];
		objectNormal += morphNormal2 * morphTargetInfluences[ 2 ];
		objectNormal += morphNormal3 * morphTargetInfluences[ 3 ];
	#endif
#endif`,aP=`#ifdef USE_MORPHTARGETS
	uniform float morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];
		uniform sampler2DArray morphTargetsTexture;
		uniform ivec2 morphTargetsTextureSize;
		vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {
			int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;
			int y = texelIndex / morphTargetsTextureSize.x;
			int x = texelIndex - y * morphTargetsTextureSize.x;
			ivec3 morphUV = ivec3( x, y, morphTargetIndex );
			return texelFetch( morphTargetsTexture, morphUV, 0 );
		}
	#else
		#ifndef USE_MORPHNORMALS
			uniform float morphTargetInfluences[ 8 ];
		#else
			uniform float morphTargetInfluences[ 4 ];
		#endif
	#endif
#endif`,oP=`#ifdef USE_MORPHTARGETS
	transformed *= morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
			if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];
		}
	#else
		transformed += morphTarget0 * morphTargetInfluences[ 0 ];
		transformed += morphTarget1 * morphTargetInfluences[ 1 ];
		transformed += morphTarget2 * morphTargetInfluences[ 2 ];
		transformed += morphTarget3 * morphTargetInfluences[ 3 ];
		#ifndef USE_MORPHNORMALS
			transformed += morphTarget4 * morphTargetInfluences[ 4 ];
			transformed += morphTarget5 * morphTargetInfluences[ 5 ];
			transformed += morphTarget6 * morphTargetInfluences[ 6 ];
			transformed += morphTarget7 * morphTargetInfluences[ 7 ];
		#endif
	#endif
#endif`,lP=`float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;
#ifdef FLAT_SHADED
	vec3 fdx = dFdx( vViewPosition );
	vec3 fdy = dFdy( vViewPosition );
	vec3 normal = normalize( cross( fdx, fdy ) );
#else
	vec3 normal = normalize( vNormal );
	#ifdef DOUBLE_SIDED
		normal *= faceDirection;
	#endif
#endif
#ifdef USE_NORMALMAP_TANGENTSPACE
	#ifdef USE_TANGENT
		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn = getTangentFrame( - vViewPosition, normal, vNormalMapUv );
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn[0] *= faceDirection;
		tbn[1] *= faceDirection;
	#endif
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	#ifdef USE_TANGENT
		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn2[0] *= faceDirection;
		tbn2[1] *= faceDirection;
	#endif
#endif
vec3 geometryNormal = normal;`,cP=`#ifdef USE_NORMALMAP_OBJECTSPACE
	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	#ifdef FLIP_SIDED
		normal = - normal;
	#endif
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	normal = normalize( normalMatrix * normal );
#elif defined( USE_NORMALMAP_TANGENTSPACE )
	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;
	normal = normalize( tbn * mapN );
#elif defined( USE_BUMPMAP )
	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );
#endif`,hP=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,uP=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,fP=`#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif`,dP=`#ifdef USE_NORMALMAP
	uniform sampler2D normalMap;
	uniform vec2 normalScale;
#endif
#ifdef USE_NORMALMAP_OBJECTSPACE
	uniform mat3 normalMatrix;
#endif
#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) )
	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {
		vec3 q0 = dFdx( eye_pos.xyz );
		vec3 q1 = dFdy( eye_pos.xyz );
		vec2 st0 = dFdx( uv.st );
		vec2 st1 = dFdy( uv.st );
		vec3 N = surf_norm;
		vec3 q1perp = cross( q1, N );
		vec3 q0perp = cross( N, q0 );
		vec3 T = q1perp * st0.x + q0perp * st1.x;
		vec3 B = q1perp * st0.y + q0perp * st1.y;
		float det = max( dot( T, T ), dot( B, B ) );
		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );
		return mat3( T * scale, B * scale, N );
	}
#endif`,pP=`#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal = geometryNormal;
#endif`,mP=`#ifdef USE_CLEARCOAT_NORMALMAP
	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;
	clearcoatNormal = normalize( tbn2 * clearcoatMapN );
#endif`,gP=`#ifdef USE_CLEARCOATMAP
	uniform sampler2D clearcoatMap;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform sampler2D clearcoatRoughnessMap;
#endif`,_P=`#ifdef USE_IRIDESCENCEMAP
	uniform sampler2D iridescenceMap;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform sampler2D iridescenceThicknessMap;
#endif`,xP=`#ifdef OPAQUE
diffuseColor.a = 1.0;
#endif
#ifdef USE_TRANSMISSION
diffuseColor.a *= material.transmissionAlpha + 0.1;
#endif
gl_FragColor = vec4( outgoingLight, diffuseColor.a );`,vP=`vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}
vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}
const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;
const vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );
const vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );
const float ShiftRight8 = 1. / 256.;
vec4 packDepthToRGBA( const in float v ) {
	vec4 r = vec4( fract( v * PackFactors ), v );
	r.yzw -= r.xyz * ShiftRight8;	return r * PackUpscale;
}
float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors );
}
vec2 packDepthToRG( in highp float v ) {
	return packDepthToRGBA( v ).yx;
}
float unpackRGToDepth( const in highp vec2 v ) {
	return unpackRGBAToDepth( vec4( v.xy, 0.0, 0.0 ) );
}
vec4 pack2HalfToRGBA( vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );
}
vec2 unpackRGBATo2Half( vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}
float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	return ( viewZ + near ) / ( near - far );
}
float orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return depth * ( near - far ) - near;
}
float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );
}
float perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return ( near * far ) / ( ( far - near ) * depth - far );
}`,yP=`#ifdef PREMULTIPLIED_ALPHA
	gl_FragColor.rgb *= gl_FragColor.a;
#endif`,MP=`vec4 mvPosition = vec4( transformed, 1.0 );
#ifdef USE_INSTANCING
	mvPosition = instanceMatrix * mvPosition;
#endif
mvPosition = modelViewMatrix * mvPosition;
gl_Position = projectionMatrix * mvPosition;`,SP=`#ifdef DITHERING
	gl_FragColor.rgb = dithering( gl_FragColor.rgb );
#endif`,EP=`#ifdef DITHERING
	vec3 dithering( vec3 color ) {
		float grid_position = rand( gl_FragCoord.xy );
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
		return color + dither_shift_RGB;
	}
#endif`,bP=`float roughnessFactor = roughness;
#ifdef USE_ROUGHNESSMAP
	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );
	roughnessFactor *= texelRoughness.g;
#endif`,TP=`#ifdef USE_ROUGHNESSMAP
	uniform sampler2D roughnessMap;
#endif`,wP=`#if NUM_SPOT_LIGHT_COORDS > 0
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#if NUM_SPOT_LIGHT_MAPS > 0
	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {
		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );
	}
	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {
		return unpackRGBATo2Half( texture2D( shadow, uv ) );
	}
	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){
		float occlusion = 1.0;
		vec2 distribution = texture2DDistribution( shadow, uv );
		float hard_shadow = step( compare , distribution.x );
		if (hard_shadow != 1.0 ) {
			float distance = compare - distribution.x ;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );
		}
		return occlusion;
	}
	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {
		float shadow = 1.0;
		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;
		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;
		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;
		if ( frustumTest ) {
		#if defined( SHADOWMAP_TYPE_PCF )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;
			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );
		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;
			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;
			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );
		#elif defined( SHADOWMAP_TYPE_VSM )
			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );
		#else
			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );
		#endif
		}
		return shadow;
	}
	vec2 cubeToUV( vec3 v, float texelSizeY ) {
		vec3 absV = abs( v );
		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );
		vec2 planar = v.xy;
		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;
		if ( absV.z >= almostOne ) {
			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;
		} else if ( absV.x >= almostOne ) {
			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;
		} else if ( absV.y >= almostOne ) {
			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;
		}
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );
	}
	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {
		vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );
		vec3 lightToPosition = shadowCoord.xyz;
		float dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );		dp += shadowBias;
		vec3 bd3D = normalize( lightToPosition );
		#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )
			vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;
			return (
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
			) * ( 1.0 / 9.0 );
		#else
			return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );
		#endif
	}
#endif`,AP=`#if NUM_SPOT_LIGHT_COORDS > 0
	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
#endif`,RP=`#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )
	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
	vec4 shadowWorldPosition;
#endif
#if defined( USE_SHADOWMAP )
	#if NUM_DIR_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
#endif
#if NUM_SPOT_LIGHT_COORDS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {
		shadowWorldPosition = worldPosition;
		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;
		#endif
		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
#endif`,CP=`float getShadowMask() {
	float shadow = 1.0;
	#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#endif
	return shadow;
}`,PP=`#ifdef USE_SKINNING
	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );
#endif`,LP=`#ifdef USE_SKINNING
	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;
	uniform highp sampler2D boneTexture;
	uniform int boneTextureSize;
	mat4 getBoneMatrix( const in float i ) {
		float j = i * 4.0;
		float x = mod( j, float( boneTextureSize ) );
		float y = floor( j / float( boneTextureSize ) );
		float dx = 1.0 / float( boneTextureSize );
		float dy = 1.0 / float( boneTextureSize );
		y = dy * ( y + 0.5 );
		vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );
		vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );
		vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );
		vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );
		mat4 bone = mat4( v1, v2, v3, v4 );
		return bone;
	}
#endif`,DP=`#ifdef USE_SKINNING
	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;
	transformed = ( bindMatrixInverse * skinned ).xyz;
#endif`,UP=`#ifdef USE_SKINNING
	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;
	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;
	#ifdef USE_TANGENT
		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#endif
#endif`,IP=`float specularStrength;
#ifdef USE_SPECULARMAP
	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );
	specularStrength = texelSpecular.r;
#else
	specularStrength = 1.0;
#endif`,NP=`#ifdef USE_SPECULARMAP
	uniform sampler2D specularMap;
#endif`,FP=`#if defined( TONE_MAPPING )
	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );
#endif`,OP=`#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
uniform float toneMappingExposure;
vec3 LinearToneMapping( vec3 color ) {
	return toneMappingExposure * color;
}
vec3 ReinhardToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );
}
vec3 OptimizedCineonToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );
}
vec3 RRTAndODTFit( vec3 v ) {
	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;
}
vec3 ACESFilmicToneMapping( vec3 color ) {
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);
	const mat3 ACESOutputMat = mat3(
		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,  1.07602 )
	);
	color *= toneMappingExposure / 0.6;
	color = ACESInputMat * color;
	color = RRTAndODTFit( color );
	color = ACESOutputMat * color;
	return saturate( color );
}
vec3 CustomToneMapping( vec3 color ) { return color; }`,BP=`#ifdef USE_TRANSMISSION
	material.transmission = transmission;
	material.transmissionAlpha = 1.0;
	material.thickness = thickness;
	material.attenuationDistance = attenuationDistance;
	material.attenuationColor = attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;
	#endif
	#ifdef USE_THICKNESSMAP
		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;
	#endif
	vec3 pos = vWorldPosition;
	vec3 v = normalize( cameraPosition - pos );
	vec3 n = inverseTransformDirection( normal, viewMatrix );
	vec4 transmission = getIBLVolumeRefraction(
		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,
		pos, modelMatrix, viewMatrix, projectionMatrix, material.ior, material.thickness,
		material.attenuationColor, material.attenuationDistance );
	material.transmissionAlpha = mix( material.transmissionAlpha, transmission.a, material.transmission );
	totalDiffuse = mix( totalDiffuse, transmission.rgb, material.transmission );
#endif`,zP=`#ifdef USE_TRANSMISSION
	uniform float transmission;
	uniform float thickness;
	uniform float attenuationDistance;
	uniform vec3 attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		uniform sampler2D transmissionMap;
	#endif
	#ifdef USE_THICKNESSMAP
		uniform sampler2D thicknessMap;
	#endif
	uniform vec2 transmissionSamplerSize;
	uniform sampler2D transmissionSamplerMap;
	uniform mat4 modelMatrix;
	uniform mat4 projectionMatrix;
	varying vec3 vWorldPosition;
	float w0( float a ) {
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );
	}
	float w1( float a ) {
		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );
	}
	float w2( float a ){
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );
	}
	float w3( float a ) {
		return ( 1.0 / 6.0 ) * ( a * a * a );
	}
	float g0( float a ) {
		return w0( a ) + w1( a );
	}
	float g1( float a ) {
		return w2( a ) + w3( a );
	}
	float h0( float a ) {
		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );
	}
	float h1( float a ) {
		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );
	}
	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {
		uv = uv * texelSize.zw + 0.5;
		vec2 iuv = floor( uv );
		vec2 fuv = fract( uv );
		float g0x = g0( fuv.x );
		float g1x = g1( fuv.x );
		float h0x = h0( fuv.x );
		float h1x = h1( fuv.x );
		float h0y = h0( fuv.y );
		float h1y = h1( fuv.y );
		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +
			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );
	}
	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {
		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );
		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );
		vec2 fLodSizeInv = 1.0 / fLodSize;
		vec2 cLodSizeInv = 1.0 / cLodSize;
		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );
		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );
		return mix( fSample, cSample, fract( lod ) );
	}
	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {
		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );
		vec3 modelScale;
		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );
		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );
		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );
		return normalize( refractionVector ) * thickness * modelScale;
	}
	float applyIorToRoughness( const in float roughness, const in float ior ) {
		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );
	}
	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {
		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );
	}
	vec3 applyVolumeAttenuation( const in vec3 radiance, const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {
		if ( isinf( attenuationDistance ) ) {
			return radiance;
		} else {
			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;
			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance * radiance;
		}
	}
	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,
		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,
		const in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,
		const in vec3 attenuationColor, const in float attenuationDistance ) {
		vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
		vec3 refractedRayExit = position + transmissionRay;
		vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
		vec2 refractionCoords = ndcPos.xy / ndcPos.w;
		refractionCoords += 1.0;
		refractionCoords /= 2.0;
		vec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );
		vec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );
		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );
		return vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );
	}
#endif`,kP=`#ifdef USE_UV
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_SPECULARMAP
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`,GP=`#ifdef USE_UV
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	uniform mat3 mapTransform;
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	uniform mat3 alphaMapTransform;
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	uniform mat3 lightMapTransform;
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	uniform mat3 aoMapTransform;
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	uniform mat3 bumpMapTransform;
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	uniform mat3 normalMapTransform;
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_DISPLACEMENTMAP
	uniform mat3 displacementMapTransform;
	varying vec2 vDisplacementMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	uniform mat3 emissiveMapTransform;
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	uniform mat3 metalnessMapTransform;
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	uniform mat3 roughnessMapTransform;
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	uniform mat3 clearcoatMapTransform;
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform mat3 clearcoatNormalMapTransform;
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform mat3 clearcoatRoughnessMapTransform;
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	uniform mat3 sheenColorMapTransform;
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	uniform mat3 sheenRoughnessMapTransform;
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	uniform mat3 iridescenceMapTransform;
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform mat3 iridescenceThicknessMapTransform;
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SPECULARMAP
	uniform mat3 specularMapTransform;
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	uniform mat3 specularColorMapTransform;
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	uniform mat3 specularIntensityMapTransform;
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`,HP=`#ifdef USE_UV
	vUv = vec3( uv, 1 ).xy;
#endif
#ifdef USE_MAP
	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ALPHAMAP
	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_LIGHTMAP
	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_AOMAP
	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_BUMPMAP
	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_NORMALMAP
	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_DISPLACEMENTMAP
	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_EMISSIVEMAP
	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_METALNESSMAP
	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ROUGHNESSMAP
	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOATMAP
	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCEMAP
	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_COLORMAP
	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULARMAP
	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_COLORMAP
	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_TRANSMISSIONMAP
	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_THICKNESSMAP
	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;
#endif`,VP=`#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0
	vec4 worldPosition = vec4( transformed, 1.0 );
	#ifdef USE_INSTANCING
		worldPosition = instanceMatrix * worldPosition;
	#endif
	worldPosition = modelMatrix * worldPosition;
#endif`;const WP=`varying vec2 vUv;
uniform mat3 uvTransform;
void main() {
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	gl_Position = vec4( position.xy, 1.0, 1.0 );
}`,XP=`uniform sampler2D t2D;
uniform float backgroundIntensity;
varying vec2 vUv;
void main() {
	vec4 texColor = texture2D( t2D, vUv );
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`,qP=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,YP=`#ifdef ENVMAP_TYPE_CUBE
	uniform samplerCube envMap;
#elif defined( ENVMAP_TYPE_CUBE_UV )
	uniform sampler2D envMap;
#endif
uniform float flipEnvMap;
uniform float backgroundBlurriness;
uniform float backgroundIntensity;
varying vec3 vWorldDirection;
#include <cube_uv_reflection_fragment>
void main() {
	#ifdef ENVMAP_TYPE_CUBE
		vec4 texColor = textureCube( envMap, vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );
	#elif defined( ENVMAP_TYPE_CUBE_UV )
		vec4 texColor = textureCubeUV( envMap, vWorldDirection, backgroundBlurriness );
	#else
		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`,ZP=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,KP=`uniform samplerCube tCube;
uniform float tFlip;
uniform float opacity;
varying vec3 vWorldDirection;
void main() {
	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );
	gl_FragColor = texColor;
	gl_FragColor.a *= opacity;
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`,$P=`#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
varying vec2 vHighPrecisionZW;
void main() {
	#include <uv_vertex>
	#include <skinbase_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vHighPrecisionZW = gl_Position.zw;
}`,JP=`#if DEPTH_PACKING == 3200
	uniform float opacity;
#endif
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
varying vec2 vHighPrecisionZW;
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( 1.0 );
	#if DEPTH_PACKING == 3200
		diffuseColor.a = opacity;
	#endif
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <logdepthbuf_fragment>
	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;
	#if DEPTH_PACKING == 3200
		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );
	#elif DEPTH_PACKING == 3201
		gl_FragColor = packDepthToRGBA( fragCoordZ );
	#endif
}`,jP=`#define DISTANCE
varying vec3 vWorldPosition;
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <skinbase_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	vWorldPosition = worldPosition.xyz;
}`,QP=`#define DISTANCE
uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <clipping_planes_pars_fragment>
void main () {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( 1.0 );
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist );
	gl_FragColor = packDepthToRGBA( dist );
}`,eL=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
}`,tL=`uniform sampler2D tEquirect;
varying vec3 vWorldDirection;
#include <common>
void main() {
	vec3 direction = normalize( vWorldDirection );
	vec2 sampleUV = equirectUv( direction );
	gl_FragColor = texture2D( tEquirect, sampleUV );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`,nL=`uniform float scale;
attribute float lineDistance;
varying float vLineDistance;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	vLineDistance = scale * lineDistance;
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,iL=`uniform vec3 diffuse;
uniform float opacity;
uniform float dashSize;
uniform float totalSize;
varying float vLineDistance;
#include <common>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	if ( mod( vLineDistance, totalSize ) > dashSize ) {
		discard;
	}
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,rL=`#include <common>
#include <uv_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinbase_vertex>
		#include <skinnormal_vertex>
		#include <defaultnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>
}`,sL=`uniform vec3 diffuse;
uniform float opacity;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;
	#else
		reflectedLight.indirectDiffuse += vec3( 1.0 );
	#endif
	#include <aomap_fragment>
	reflectedLight.indirectDiffuse *= diffuseColor.rgb;
	vec3 outgoingLight = reflectedLight.indirectDiffuse;
	#include <envmap_fragment>
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,aL=`#define LAMBERT
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,oL=`#define LAMBERT
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_lambert_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_lambert_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,lL=`#define MATCAP
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
	vViewPosition = - mvPosition.xyz;
}`,cL=`#define MATCAP
uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;
varying vec3 vViewPosition;
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <fog_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;
	#ifdef USE_MATCAP
		vec4 matcapColor = texture2D( matcap, uv );
	#else
		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );
	#endif
	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,hL=`#define NORMAL
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	vViewPosition = - mvPosition.xyz;
#endif
}`,uL=`#define NORMAL
uniform float opacity;
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <packing>
#include <uv_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	gl_FragColor = vec4( packNormalToRGB( normal ), opacity );
	#ifdef OPAQUE
		gl_FragColor.a = 1.0;
	#endif
}`,fL=`#define PHONG
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,dL=`#define PHONG
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,pL=`#define STANDARD
varying vec3 vViewPosition;
#ifdef USE_TRANSMISSION
	varying vec3 vWorldPosition;
#endif
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
#ifdef USE_TRANSMISSION
	vWorldPosition = worldPosition.xyz;
#endif
}`,mL=`#define STANDARD
#ifdef PHYSICAL
	#define IOR
	#define USE_SPECULAR
#endif
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;
#ifdef IOR
	uniform float ior;
#endif
#ifdef USE_SPECULAR
	uniform float specularIntensity;
	uniform vec3 specularColor;
	#ifdef USE_SPECULAR_COLORMAP
		uniform sampler2D specularColorMap;
	#endif
	#ifdef USE_SPECULAR_INTENSITYMAP
		uniform sampler2D specularIntensityMap;
	#endif
#endif
#ifdef USE_CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif
#ifdef USE_IRIDESCENCE
	uniform float iridescence;
	uniform float iridescenceIOR;
	uniform float iridescenceThicknessMinimum;
	uniform float iridescenceThicknessMaximum;
#endif
#ifdef USE_SHEEN
	uniform vec3 sheenColor;
	uniform float sheenRoughness;
	#ifdef USE_SHEEN_COLORMAP
		uniform sampler2D sheenColorMap;
	#endif
	#ifdef USE_SHEEN_ROUGHNESSMAP
		uniform sampler2D sheenRoughnessMap;
	#endif
#endif
varying vec3 vViewPosition;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <iridescence_fragment>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_physical_pars_fragment>
#include <transmission_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <iridescence_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;
	#include <transmission_fragment>
	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;
	#ifdef USE_SHEEN
		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );
		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecular;
	#endif
	#ifdef USE_CLEARCOAT
		float dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );
		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );
		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;
	#endif
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,gL=`#define TOON
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,_L=`#define TOON
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,xL=`uniform float size;
uniform float scale;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
#ifdef USE_POINTS_UV
	varying vec2 vUv;
	uniform mat3 uvTransform;
#endif
void main() {
	#ifdef USE_POINTS_UV
		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	#endif
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	gl_PointSize = size;
	#ifdef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );
	#endif
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>
}`,vL=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <alphatest_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,yL=`#include <common>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <shadowmap_pars_vertex>
void main() {
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,ML=`uniform vec3 color;
uniform float opacity;
#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <logdepthbuf_pars_fragment>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
void main() {
	#include <logdepthbuf_fragment>
	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
}`,SL=`uniform float rotation;
uniform vec2 center;
#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );
	vec2 scale;
	scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );
	scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );
	#ifndef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) scale *= - mvPosition.z;
	#endif
	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;
	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
	mvPosition.xy += rotatedPosition;
	gl_Position = projectionMatrix * mvPosition;
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,EL=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
}`,En={alphamap_fragment:KR,alphamap_pars_fragment:$R,alphatest_fragment:JR,alphatest_pars_fragment:jR,aomap_fragment:QR,aomap_pars_fragment:eC,begin_vertex:tC,beginnormal_vertex:nC,bsdfs:iC,iridescence_fragment:rC,bumpmap_pars_fragment:sC,clipping_planes_fragment:aC,clipping_planes_pars_fragment:oC,clipping_planes_pars_vertex:lC,clipping_planes_vertex:cC,color_fragment:hC,color_pars_fragment:uC,color_pars_vertex:fC,color_vertex:dC,common:pC,cube_uv_reflection_fragment:mC,defaultnormal_vertex:gC,displacementmap_pars_vertex:_C,displacementmap_vertex:xC,emissivemap_fragment:vC,emissivemap_pars_fragment:yC,encodings_fragment:MC,encodings_pars_fragment:SC,envmap_fragment:EC,envmap_common_pars_fragment:bC,envmap_pars_fragment:TC,envmap_pars_vertex:wC,envmap_physical_pars_fragment:BC,envmap_vertex:AC,fog_vertex:RC,fog_pars_vertex:CC,fog_fragment:PC,fog_pars_fragment:LC,gradientmap_pars_fragment:DC,lightmap_fragment:UC,lightmap_pars_fragment:IC,lights_lambert_fragment:NC,lights_lambert_pars_fragment:FC,lights_pars_begin:OC,lights_toon_fragment:zC,lights_toon_pars_fragment:kC,lights_phong_fragment:GC,lights_phong_pars_fragment:HC,lights_physical_fragment:VC,lights_physical_pars_fragment:WC,lights_fragment_begin:XC,lights_fragment_maps:qC,lights_fragment_end:YC,logdepthbuf_fragment:ZC,logdepthbuf_pars_fragment:KC,logdepthbuf_pars_vertex:$C,logdepthbuf_vertex:JC,map_fragment:jC,map_pars_fragment:QC,map_particle_fragment:eP,map_particle_pars_fragment:tP,metalnessmap_fragment:nP,metalnessmap_pars_fragment:iP,morphcolor_vertex:rP,morphnormal_vertex:sP,morphtarget_pars_vertex:aP,morphtarget_vertex:oP,normal_fragment_begin:lP,normal_fragment_maps:cP,normal_pars_fragment:hP,normal_pars_vertex:uP,normal_vertex:fP,normalmap_pars_fragment:dP,clearcoat_normal_fragment_begin:pP,clearcoat_normal_fragment_maps:mP,clearcoat_pars_fragment:gP,iridescence_pars_fragment:_P,output_fragment:xP,packing:vP,premultiplied_alpha_fragment:yP,project_vertex:MP,dithering_fragment:SP,dithering_pars_fragment:EP,roughnessmap_fragment:bP,roughnessmap_pars_fragment:TP,shadowmap_pars_fragment:wP,shadowmap_pars_vertex:AP,shadowmap_vertex:RP,shadowmask_pars_fragment:CP,skinbase_vertex:PP,skinning_pars_vertex:LP,skinning_vertex:DP,skinnormal_vertex:UP,specularmap_fragment:IP,specularmap_pars_fragment:NP,tonemapping_fragment:FP,tonemapping_pars_fragment:OP,transmission_fragment:BP,transmission_pars_fragment:zP,uv_pars_fragment:kP,uv_pars_vertex:GP,uv_vertex:HP,worldpos_vertex:VP,background_vert:WP,background_frag:XP,backgroundCube_vert:qP,backgroundCube_frag:YP,cube_vert:ZP,cube_frag:KP,depth_vert:$P,depth_frag:JP,distanceRGBA_vert:jP,distanceRGBA_frag:QP,equirect_vert:eL,equirect_frag:tL,linedashed_vert:nL,linedashed_frag:iL,meshbasic_vert:rL,meshbasic_frag:sL,meshlambert_vert:aL,meshlambert_frag:oL,meshmatcap_vert:lL,meshmatcap_frag:cL,meshnormal_vert:hL,meshnormal_frag:uL,meshphong_vert:fL,meshphong_frag:dL,meshphysical_vert:pL,meshphysical_frag:mL,meshtoon_vert:gL,meshtoon_frag:_L,points_vert:xL,points_frag:vL,shadow_vert:yL,shadow_frag:ML,sprite_vert:SL,sprite_frag:EL},_t={common:{diffuse:{value:new kn(16777215)},opacity:{value:1},map:{value:null},mapTransform:{value:new Ln},alphaMap:{value:null},alphaMapTransform:{value:new Ln},alphaTest:{value:0}},specularmap:{specularMap:{value:null},specularMapTransform:{value:new Ln}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1},aoMapTransform:{value:new Ln}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1},lightMapTransform:{value:new Ln}},bumpmap:{bumpMap:{value:null},bumpMapTransform:{value:new Ln},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalMapTransform:{value:new Ln},normalScale:{value:new cn(1,1)}},displacementmap:{displacementMap:{value:null},displacementMapTransform:{value:new Ln},displacementScale:{value:1},displacementBias:{value:0}},emissivemap:{emissiveMap:{value:null},emissiveMapTransform:{value:new Ln}},metalnessmap:{metalnessMap:{value:null},metalnessMapTransform:{value:new Ln}},roughnessmap:{roughnessMap:{value:null},roughnessMapTransform:{value:new Ln}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new kn(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotLightMap:{value:[]},spotShadowMap:{value:[]},spotLightMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new kn(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaTest:{value:0},uvTransform:{value:new Ln}},sprite:{diffuse:{value:new kn(16777215)},opacity:{value:1},center:{value:new cn(.5,.5)},rotation:{value:0},map:{value:null},mapTransform:{value:new Ln},alphaMap:{value:null},alphaTest:{value:0}}},vs={basic:{uniforms:ir([_t.common,_t.specularmap,_t.envmap,_t.aomap,_t.lightmap,_t.fog]),vertexShader:En.meshbasic_vert,fragmentShader:En.meshbasic_frag},lambert:{uniforms:ir([_t.common,_t.specularmap,_t.envmap,_t.aomap,_t.lightmap,_t.emissivemap,_t.bumpmap,_t.normalmap,_t.displacementmap,_t.fog,_t.lights,{emissive:{value:new kn(0)}}]),vertexShader:En.meshlambert_vert,fragmentShader:En.meshlambert_frag},phong:{uniforms:ir([_t.common,_t.specularmap,_t.envmap,_t.aomap,_t.lightmap,_t.emissivemap,_t.bumpmap,_t.normalmap,_t.displacementmap,_t.fog,_t.lights,{emissive:{value:new kn(0)},specular:{value:new kn(1118481)},shininess:{value:30}}]),vertexShader:En.meshphong_vert,fragmentShader:En.meshphong_frag},standard:{uniforms:ir([_t.common,_t.envmap,_t.aomap,_t.lightmap,_t.emissivemap,_t.bumpmap,_t.normalmap,_t.displacementmap,_t.roughnessmap,_t.metalnessmap,_t.fog,_t.lights,{emissive:{value:new kn(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:En.meshphysical_vert,fragmentShader:En.meshphysical_frag},toon:{uniforms:ir([_t.common,_t.aomap,_t.lightmap,_t.emissivemap,_t.bumpmap,_t.normalmap,_t.displacementmap,_t.gradientmap,_t.fog,_t.lights,{emissive:{value:new kn(0)}}]),vertexShader:En.meshtoon_vert,fragmentShader:En.meshtoon_frag},matcap:{uniforms:ir([_t.common,_t.bumpmap,_t.normalmap,_t.displacementmap,_t.fog,{matcap:{value:null}}]),vertexShader:En.meshmatcap_vert,fragmentShader:En.meshmatcap_frag},points:{uniforms:ir([_t.points,_t.fog]),vertexShader:En.points_vert,fragmentShader:En.points_frag},dashed:{uniforms:ir([_t.common,_t.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:En.linedashed_vert,fragmentShader:En.linedashed_frag},depth:{uniforms:ir([_t.common,_t.displacementmap]),vertexShader:En.depth_vert,fragmentShader:En.depth_frag},normal:{uniforms:ir([_t.common,_t.bumpmap,_t.normalmap,_t.displacementmap,{opacity:{value:1}}]),vertexShader:En.meshnormal_vert,fragmentShader:En.meshnormal_frag},sprite:{uniforms:ir([_t.sprite,_t.fog]),vertexShader:En.sprite_vert,fragmentShader:En.sprite_frag},background:{uniforms:{uvTransform:{value:new Ln},t2D:{value:null},backgroundIntensity:{value:1}},vertexShader:En.background_vert,fragmentShader:En.background_frag},backgroundCube:{uniforms:{envMap:{value:null},flipEnvMap:{value:-1},backgroundBlurriness:{value:0},backgroundIntensity:{value:1}},vertexShader:En.backgroundCube_vert,fragmentShader:En.backgroundCube_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:En.cube_vert,fragmentShader:En.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:En.equirect_vert,fragmentShader:En.equirect_frag},distanceRGBA:{uniforms:ir([_t.common,_t.displacementmap,{referencePosition:{value:new pe},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:En.distanceRGBA_vert,fragmentShader:En.distanceRGBA_frag},shadow:{uniforms:ir([_t.lights,_t.fog,{color:{value:new kn(0)},opacity:{value:1}}]),vertexShader:En.shadow_vert,fragmentShader:En.shadow_frag}};vs.physical={uniforms:ir([vs.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatMapTransform:{value:new Ln},clearcoatNormalMap:{value:null},clearcoatNormalMapTransform:{value:new Ln},clearcoatNormalScale:{value:new cn(1,1)},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatRoughnessMapTransform:{value:new Ln},iridescence:{value:0},iridescenceMap:{value:null},iridescenceMapTransform:{value:new Ln},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},iridescenceThicknessMapTransform:{value:new Ln},sheen:{value:0},sheenColor:{value:new kn(0)},sheenColorMap:{value:null},sheenColorMapTransform:{value:new Ln},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},sheenRoughnessMapTransform:{value:new Ln},transmission:{value:0},transmissionMap:{value:null},transmissionMapTransform:{value:new Ln},transmissionSamplerSize:{value:new cn},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},thicknessMapTransform:{value:new Ln},attenuationDistance:{value:0},attenuationColor:{value:new kn(0)},specularColor:{value:new kn(1,1,1)},specularColorMap:{value:null},specularColorMapTransform:{value:new Ln},specularIntensity:{value:1},specularIntensityMap:{value:null},specularIntensityMapTransform:{value:new Ln}}]),vertexShader:En.meshphysical_vert,fragmentShader:En.meshphysical_frag};const cf={r:0,b:0,g:0};function bL(h,t,i,s,o,f,m){const p=new kn(0);let v=f===!0?0:1,x,M,b=null,T=0,P=null;function N(D,R){let W=!1,V=R.isScene===!0?R.background:null;switch(V&&V.isTexture&&(V=(R.backgroundBlurriness>0?i:t).get(V)),V===null?L(p,v):V&&V.isColor&&(L(V,1),W=!0),h.xr.getEnvironmentBlendMode()){case"opaque":W=!0;break;case"additive":s.buffers.color.setClear(0,0,0,1,m),W=!0;break;case"alpha-blend":s.buffers.color.setClear(0,0,0,0,m),W=!0;break}(h.autoClear||W)&&h.clear(h.autoClearColor,h.autoClearDepth,h.autoClearStencil),V&&(V.isCubeTexture||V.mapping===If)?(M===void 0&&(M=new cs(new Co(1,1,1),new Ra({name:"BackgroundCubeMaterial",uniforms:nc(vs.backgroundCube.uniforms),vertexShader:vs.backgroundCube.vertexShader,fragmentShader:vs.backgroundCube.fragmentShader,side:ur,depthTest:!1,depthWrite:!1,fog:!1})),M.geometry.deleteAttribute("normal"),M.geometry.deleteAttribute("uv"),M.onBeforeRender=function(Q,re,oe){this.matrixWorld.copyPosition(oe.matrixWorld)},Object.defineProperty(M.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),o.update(M)),M.material.uniforms.envMap.value=V,M.material.uniforms.flipEnvMap.value=V.isCubeTexture&&V.isRenderTargetTexture===!1?-1:1,M.material.uniforms.backgroundBlurriness.value=R.backgroundBlurriness,M.material.uniforms.backgroundIntensity.value=R.backgroundIntensity,M.material.toneMapped=V.colorSpace!==vn,(b!==V||T!==V.version||P!==h.toneMapping)&&(M.material.needsUpdate=!0,b=V,T=V.version,P=h.toneMapping),M.layers.enableAll(),D.unshift(M,M.geometry,M.material,0,0,null)):V&&V.isTexture&&(x===void 0&&(x=new cs(new Am(2,2),new Ra({name:"BackgroundMaterial",uniforms:nc(vs.background.uniforms),vertexShader:vs.background.vertexShader,fragmentShader:vs.background.fragmentShader,side:Aa,depthTest:!1,depthWrite:!1,fog:!1})),x.geometry.deleteAttribute("normal"),Object.defineProperty(x.material,"map",{get:function(){return this.uniforms.t2D.value}}),o.update(x)),x.material.uniforms.t2D.value=V,x.material.uniforms.backgroundIntensity.value=R.backgroundIntensity,x.material.toneMapped=V.colorSpace!==vn,V.matrixAutoUpdate===!0&&V.updateMatrix(),x.material.uniforms.uvTransform.value.copy(V.matrix),(b!==V||T!==V.version||P!==h.toneMapping)&&(x.material.needsUpdate=!0,b=V,T=V.version,P=h.toneMapping),x.layers.enableAll(),D.unshift(x,x.geometry,x.material,0,0,null))}function L(D,R){D.getRGB(cf,Wv(h)),s.buffers.color.setClear(cf.r,cf.g,cf.b,R,m)}return{getClearColor:function(){return p},setClearColor:function(D,R=1){p.set(D),v=R,L(p,v)},getClearAlpha:function(){return v},setClearAlpha:function(D){v=D,L(p,v)},render:N}}function TL(h,t,i,s){const o=h.getParameter(h.MAX_VERTEX_ATTRIBS),f=s.isWebGL2?null:t.get("OES_vertex_array_object"),m=s.isWebGL2||f!==null,p={},v=D(null);let x=v,M=!1;function b(xe,ye,He,be,Le){let nt=!1;if(m){const Ye=L(be,He,ye);x!==Ye&&(x=Ye,P(x.object)),nt=R(xe,be,He,Le),nt&&W(xe,be,He,Le)}else{const Ye=ye.wireframe===!0;(x.geometry!==be.id||x.program!==He.id||x.wireframe!==Ye)&&(x.geometry=be.id,x.program=He.id,x.wireframe=Ye,nt=!0)}Le!==null&&i.update(Le,h.ELEMENT_ARRAY_BUFFER),(nt||M)&&(M=!1,oe(xe,ye,He,be),Le!==null&&h.bindBuffer(h.ELEMENT_ARRAY_BUFFER,i.get(Le).buffer))}function T(){return s.isWebGL2?h.createVertexArray():f.createVertexArrayOES()}function P(xe){return s.isWebGL2?h.bindVertexArray(xe):f.bindVertexArrayOES(xe)}function N(xe){return s.isWebGL2?h.deleteVertexArray(xe):f.deleteVertexArrayOES(xe)}function L(xe,ye,He){const be=He.wireframe===!0;let Le=p[xe.id];Le===void 0&&(Le={},p[xe.id]=Le);let nt=Le[ye.id];nt===void 0&&(nt={},Le[ye.id]=nt);let Ye=nt[be];return Ye===void 0&&(Ye=D(T()),nt[be]=Ye),Ye}function D(xe){const ye=[],He=[],be=[];for(let Le=0;Le<o;Le++)ye[Le]=0,He[Le]=0,be[Le]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:ye,enabledAttributes:He,attributeDivisors:be,object:xe,attributes:{},index:null}}function R(xe,ye,He,be){const Le=x.attributes,nt=ye.attributes;let Ye=0;const It=He.getAttributes();for(const lt in It)if(It[lt].location>=0){const ke=Le[lt];let ut=nt[lt];if(ut===void 0&&(lt==="instanceMatrix"&&xe.instanceMatrix&&(ut=xe.instanceMatrix),lt==="instanceColor"&&xe.instanceColor&&(ut=xe.instanceColor)),ke===void 0||ke.attribute!==ut||ut&&ke.data!==ut.data)return!0;Ye++}return x.attributesNum!==Ye||x.index!==be}function W(xe,ye,He,be){const Le={},nt=ye.attributes;let Ye=0;const It=He.getAttributes();for(const lt in It)if(It[lt].location>=0){let ke=nt[lt];ke===void 0&&(lt==="instanceMatrix"&&xe.instanceMatrix&&(ke=xe.instanceMatrix),lt==="instanceColor"&&xe.instanceColor&&(ke=xe.instanceColor));const ut={};ut.attribute=ke,ke&&ke.data&&(ut.data=ke.data),Le[lt]=ut,Ye++}x.attributes=Le,x.attributesNum=Ye,x.index=be}function V(){const xe=x.newAttributes;for(let ye=0,He=xe.length;ye<He;ye++)xe[ye]=0}function q(xe){H(xe,0)}function H(xe,ye){const He=x.newAttributes,be=x.enabledAttributes,Le=x.attributeDivisors;He[xe]=1,be[xe]===0&&(h.enableVertexAttribArray(xe),be[xe]=1),Le[xe]!==ye&&((s.isWebGL2?h:t.get("ANGLE_instanced_arrays"))[s.isWebGL2?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](xe,ye),Le[xe]=ye)}function Q(){const xe=x.newAttributes,ye=x.enabledAttributes;for(let He=0,be=ye.length;He<be;He++)ye[He]!==xe[He]&&(h.disableVertexAttribArray(He),ye[He]=0)}function re(xe,ye,He,be,Le,nt){s.isWebGL2===!0&&(He===h.INT||He===h.UNSIGNED_INT)?h.vertexAttribIPointer(xe,ye,He,Le,nt):h.vertexAttribPointer(xe,ye,He,be,Le,nt)}function oe(xe,ye,He,be){if(s.isWebGL2===!1&&(xe.isInstancedMesh||be.isInstancedBufferGeometry)&&t.get("ANGLE_instanced_arrays")===null)return;V();const Le=be.attributes,nt=He.getAttributes(),Ye=ye.defaultAttributeValues;for(const It in nt){const lt=nt[It];if(lt.location>=0){let Ce=Le[It];if(Ce===void 0&&(It==="instanceMatrix"&&xe.instanceMatrix&&(Ce=xe.instanceMatrix),It==="instanceColor"&&xe.instanceColor&&(Ce=xe.instanceColor)),Ce!==void 0){const ke=Ce.normalized,ut=Ce.itemSize,St=i.get(Ce);if(St===void 0)continue;const fe=St.buffer,tn=St.type,Wt=St.bytesPerElement;if(Ce.isInterleavedBufferAttribute){const mt=Ce.data,Xt=mt.stride,hn=Ce.offset;if(mt.isInstancedInterleavedBuffer){for(let Ft=0;Ft<lt.locationSize;Ft++)H(lt.location+Ft,mt.meshPerAttribute);xe.isInstancedMesh!==!0&&be._maxInstanceCount===void 0&&(be._maxInstanceCount=mt.meshPerAttribute*mt.count)}else for(let Ft=0;Ft<lt.locationSize;Ft++)q(lt.location+Ft);h.bindBuffer(h.ARRAY_BUFFER,fe);for(let Ft=0;Ft<lt.locationSize;Ft++)re(lt.location+Ft,ut/lt.locationSize,tn,ke,Xt*Wt,(hn+ut/lt.locationSize*Ft)*Wt)}else{if(Ce.isInstancedBufferAttribute){for(let mt=0;mt<lt.locationSize;mt++)H(lt.location+mt,Ce.meshPerAttribute);xe.isInstancedMesh!==!0&&be._maxInstanceCount===void 0&&(be._maxInstanceCount=Ce.meshPerAttribute*Ce.count)}else for(let mt=0;mt<lt.locationSize;mt++)q(lt.location+mt);h.bindBuffer(h.ARRAY_BUFFER,fe);for(let mt=0;mt<lt.locationSize;mt++)re(lt.location+mt,ut/lt.locationSize,tn,ke,ut*Wt,ut/lt.locationSize*mt*Wt)}}else if(Ye!==void 0){const ke=Ye[It];if(ke!==void 0)switch(ke.length){case 2:h.vertexAttrib2fv(lt.location,ke);break;case 3:h.vertexAttrib3fv(lt.location,ke);break;case 4:h.vertexAttrib4fv(lt.location,ke);break;default:h.vertexAttrib1fv(lt.location,ke)}}}}Q()}function B(){Ae();for(const xe in p){const ye=p[xe];for(const He in ye){const be=ye[He];for(const Le in be)N(be[Le].object),delete be[Le];delete ye[He]}delete p[xe]}}function te(xe){if(p[xe.id]===void 0)return;const ye=p[xe.id];for(const He in ye){const be=ye[He];for(const Le in be)N(be[Le].object),delete be[Le];delete ye[He]}delete p[xe.id]}function we(xe){for(const ye in p){const He=p[ye];if(He[xe.id]===void 0)continue;const be=He[xe.id];for(const Le in be)N(be[Le].object),delete be[Le];delete He[xe.id]}}function Ae(){de(),M=!0,x!==v&&(x=v,P(x.object))}function de(){v.geometry=null,v.program=null,v.wireframe=!1}return{setup:b,reset:Ae,resetDefaultState:de,dispose:B,releaseStatesOfGeometry:te,releaseStatesOfProgram:we,initAttributes:V,enableAttribute:q,disableUnusedAttributes:Q}}function wL(h,t,i,s){const o=s.isWebGL2;let f;function m(x){f=x}function p(x,M){h.drawArrays(f,x,M),i.update(M,f,1)}function v(x,M,b){if(b===0)return;let T,P;if(o)T=h,P="drawArraysInstanced";else if(T=t.get("ANGLE_instanced_arrays"),P="drawArraysInstancedANGLE",T===null){console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}T[P](f,x,M,b),i.update(M,f,b)}this.setMode=m,this.render=p,this.renderInstances=v}function AL(h,t,i){let s;function o(){if(s!==void 0)return s;if(t.has("EXT_texture_filter_anisotropic")===!0){const re=t.get("EXT_texture_filter_anisotropic");s=h.getParameter(re.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else s=0;return s}function f(re){if(re==="highp"){if(h.getShaderPrecisionFormat(h.VERTEX_SHADER,h.HIGH_FLOAT).precision>0&&h.getShaderPrecisionFormat(h.FRAGMENT_SHADER,h.HIGH_FLOAT).precision>0)return"highp";re="mediump"}return re==="mediump"&&h.getShaderPrecisionFormat(h.VERTEX_SHADER,h.MEDIUM_FLOAT).precision>0&&h.getShaderPrecisionFormat(h.FRAGMENT_SHADER,h.MEDIUM_FLOAT).precision>0?"mediump":"lowp"}const m=typeof WebGL2RenderingContext<"u"&&h.constructor.name==="WebGL2RenderingContext";let p=i.precision!==void 0?i.precision:"highp";const v=f(p);v!==p&&(console.warn("THREE.WebGLRenderer:",p,"not supported, using",v,"instead."),p=v);const x=m||t.has("WEBGL_draw_buffers"),M=i.logarithmicDepthBuffer===!0,b=h.getParameter(h.MAX_TEXTURE_IMAGE_UNITS),T=h.getParameter(h.MAX_VERTEX_TEXTURE_IMAGE_UNITS),P=h.getParameter(h.MAX_TEXTURE_SIZE),N=h.getParameter(h.MAX_CUBE_MAP_TEXTURE_SIZE),L=h.getParameter(h.MAX_VERTEX_ATTRIBS),D=h.getParameter(h.MAX_VERTEX_UNIFORM_VECTORS),R=h.getParameter(h.MAX_VARYING_VECTORS),W=h.getParameter(h.MAX_FRAGMENT_UNIFORM_VECTORS),V=T>0,q=m||t.has("OES_texture_float"),H=V&&q,Q=m?h.getParameter(h.MAX_SAMPLES):0;return{isWebGL2:m,drawBuffers:x,getMaxAnisotropy:o,getMaxPrecision:f,precision:p,logarithmicDepthBuffer:M,maxTextures:b,maxVertexTextures:T,maxTextureSize:P,maxCubemapSize:N,maxAttributes:L,maxVertexUniforms:D,maxVaryings:R,maxFragmentUniforms:W,vertexTextures:V,floatFragmentTextures:q,floatVertexTextures:H,maxSamples:Q}}function RL(h){const t=this;let i=null,s=0,o=!1,f=!1;const m=new fo,p=new Ln,v={value:null,needsUpdate:!1};this.uniform=v,this.numPlanes=0,this.numIntersection=0,this.init=function(b,T){const P=b.length!==0||T||s!==0||o;return o=T,s=b.length,P},this.beginShadows=function(){f=!0,M(null)},this.endShadows=function(){f=!1},this.setGlobalState=function(b,T){i=M(b,T,0)},this.setState=function(b,T,P){const N=b.clippingPlanes,L=b.clipIntersection,D=b.clipShadows,R=h.get(b);if(!o||N===null||N.length===0||f&&!D)f?M(null):x();else{const W=f?0:s,V=W*4;let q=R.clippingState||null;v.value=q,q=M(N,T,V,P);for(let H=0;H!==V;++H)q[H]=i[H];R.clippingState=q,this.numIntersection=L?this.numPlanes:0,this.numPlanes+=W}};function x(){v.value!==i&&(v.value=i,v.needsUpdate=s>0),t.numPlanes=s,t.numIntersection=0}function M(b,T,P,N){const L=b!==null?b.length:0;let D=null;if(L!==0){if(D=v.value,N!==!0||D===null){const R=P+L*4,W=T.matrixWorldInverse;p.getNormalMatrix(W),(D===null||D.length<R)&&(D=new Float32Array(R));for(let V=0,q=P;V!==L;++V,q+=4)m.copy(b[V]).applyMatrix4(W,p),m.normal.toArray(D,q),D[q+3]=m.constant}v.value=D,v.needsUpdate=!0}return t.numPlanes=L,t.numIntersection=0,D}}function CL(h){let t=new WeakMap;function i(m,p){return p===tm?m.mapping=Ql:p===nm&&(m.mapping=ec),m}function s(m){if(m&&m.isTexture&&m.isRenderTargetTexture===!1){const p=m.mapping;if(p===tm||p===nm)if(t.has(m)){const v=t.get(m).texture;return i(v,m.mapping)}else{const v=m.image;if(v&&v.height>0){const x=new XR(v.height/2);return x.fromEquirectangularTexture(h,m),t.set(m,x),m.addEventListener("dispose",o),i(x.texture,m.mapping)}else return null}}return m}function o(m){const p=m.target;p.removeEventListener("dispose",o);const v=t.get(p);v!==void 0&&(t.delete(p),v.dispose())}function f(){t=new WeakMap}return{get:s,dispose:f}}class PL extends Xv{constructor(t=-1,i=1,s=1,o=-1,f=.1,m=2e3){super(),this.isOrthographicCamera=!0,this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=t,this.right=i,this.top=s,this.bottom=o,this.near=f,this.far=m,this.updateProjectionMatrix()}copy(t,i){return super.copy(t,i),this.left=t.left,this.right=t.right,this.top=t.top,this.bottom=t.bottom,this.near=t.near,this.far=t.far,this.zoom=t.zoom,this.view=t.view===null?null:Object.assign({},t.view),this}setViewOffset(t,i,s,o,f,m){this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=i,this.view.offsetX=s,this.view.offsetY=o,this.view.width=f,this.view.height=m,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=(this.right-this.left)/(2*this.zoom),i=(this.top-this.bottom)/(2*this.zoom),s=(this.right+this.left)/2,o=(this.top+this.bottom)/2;let f=s-t,m=s+t,p=o+i,v=o-i;if(this.view!==null&&this.view.enabled){const x=(this.right-this.left)/this.view.fullWidth/this.zoom,M=(this.top-this.bottom)/this.view.fullHeight/this.zoom;f+=x*this.view.offsetX,m=f+x*this.view.width,p-=M*this.view.offsetY,v=p-M*this.view.height}this.projectionMatrix.makeOrthographic(f,m,p,v,this.near,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const i=super.toJSON(t);return i.object.zoom=this.zoom,i.object.left=this.left,i.object.right=this.right,i.object.top=this.top,i.object.bottom=this.bottom,i.object.near=this.near,i.object.far=this.far,this.view!==null&&(i.object.view=Object.assign({},this.view)),i}}const Wl=4,Px=[.125,.215,.35,.446,.526,.582],go=20,Bp=new PL,Lx=new kn;let zp=null;const po=(1+Math.sqrt(5))/2,Fl=1/po,Dx=[new pe(1,1,1),new pe(-1,1,1),new pe(1,1,-1),new pe(-1,1,-1),new pe(0,po,Fl),new pe(0,po,-Fl),new pe(Fl,0,po),new pe(-Fl,0,po),new pe(po,Fl,0),new pe(-po,Fl,0)];class Ux{constructor(t){this._renderer=t,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._compileMaterial(this._blurMaterial)}fromScene(t,i=0,s=.1,o=100){zp=this._renderer.getRenderTarget(),this._setSize(256);const f=this._allocateTargets();return f.depthBuffer=!0,this._sceneToCubeUV(t,s,o,f),i>0&&this._blur(f,0,0,i),this._applyPMREM(f),this._cleanup(f),f}fromEquirectangular(t,i=null){return this._fromTexture(t,i)}fromCubemap(t,i=null){return this._fromTexture(t,i)}compileCubemapShader(){this._cubemapMaterial===null&&(this._cubemapMaterial=Fx(),this._compileMaterial(this._cubemapMaterial))}compileEquirectangularShader(){this._equirectMaterial===null&&(this._equirectMaterial=Nx(),this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),this._cubemapMaterial!==null&&this._cubemapMaterial.dispose(),this._equirectMaterial!==null&&this._equirectMaterial.dispose()}_setSize(t){this._lodMax=Math.floor(Math.log2(t)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){this._blurMaterial!==null&&this._blurMaterial.dispose(),this._pingPongRenderTarget!==null&&this._pingPongRenderTarget.dispose();for(let t=0;t<this._lodPlanes.length;t++)this._lodPlanes[t].dispose()}_cleanup(t){this._renderer.setRenderTarget(zp),t.scissorTest=!1,hf(t,0,0,t.width,t.height)}_fromTexture(t,i){t.mapping===Ql||t.mapping===ec?this._setSize(t.image.length===0?16:t.image[0].width||t.image[0].image.width):this._setSize(t.image.width/4),zp=this._renderer.getRenderTarget();const s=i||this._allocateTargets();return this._textureToCubeUV(t,s),this._applyPMREM(s),this._cleanup(s),s}_allocateTargets(){const t=3*Math.max(this._cubeSize,112),i=4*this._cubeSize,s={magFilter:Or,minFilter:Or,generateMipmaps:!1,type:bh,format:ls,colorSpace:bs,depthBuffer:!1},o=Ix(t,i,s);if(this._pingPongRenderTarget===null||this._pingPongRenderTarget.width!==t||this._pingPongRenderTarget.height!==i){this._pingPongRenderTarget!==null&&this._dispose(),this._pingPongRenderTarget=Ix(t,i,s);const{_lodMax:f}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=LL(f)),this._blurMaterial=DL(f,t,i)}return o}_compileMaterial(t){const i=new cs(this._lodPlanes[0],t);this._renderer.compile(i,Bp)}_sceneToCubeUV(t,i,s,o){const p=new zr(90,1,i,s),v=[1,-1,1,1,1,1],x=[1,1,1,-1,-1,-1],M=this._renderer,b=M.autoClear,T=M.toneMapping;M.getClearColor(Lx),M.toneMapping=$s,M.autoClear=!1;const P=new Gv({name:"PMREM.Background",side:ur,depthWrite:!1,depthTest:!1}),N=new cs(new Co,P);let L=!1;const D=t.background;D?D.isColor&&(P.color.copy(D),t.background=null,L=!0):(P.color.copy(Lx),L=!0);for(let R=0;R<6;R++){const W=R%3;W===0?(p.up.set(0,v[R],0),p.lookAt(x[R],0,0)):W===1?(p.up.set(0,0,v[R]),p.lookAt(0,x[R],0)):(p.up.set(0,v[R],0),p.lookAt(0,0,x[R]));const V=this._cubeSize;hf(o,W*V,R>2?V:0,V,V),M.setRenderTarget(o),L&&M.render(N,p),M.render(t,p)}N.geometry.dispose(),N.material.dispose(),M.toneMapping=T,M.autoClear=b,t.background=D}_textureToCubeUV(t,i){const s=this._renderer,o=t.mapping===Ql||t.mapping===ec;o?(this._cubemapMaterial===null&&(this._cubemapMaterial=Fx()),this._cubemapMaterial.uniforms.flipEnvMap.value=t.isRenderTargetTexture===!1?-1:1):this._equirectMaterial===null&&(this._equirectMaterial=Nx());const f=o?this._cubemapMaterial:this._equirectMaterial,m=new cs(this._lodPlanes[0],f),p=f.uniforms;p.envMap.value=t;const v=this._cubeSize;hf(i,0,0,3*v,2*v),s.setRenderTarget(i),s.render(m,Bp)}_applyPMREM(t){const i=this._renderer,s=i.autoClear;i.autoClear=!1;for(let o=1;o<this._lodPlanes.length;o++){const f=Math.sqrt(this._sigmas[o]*this._sigmas[o]-this._sigmas[o-1]*this._sigmas[o-1]),m=Dx[(o-1)%Dx.length];this._blur(t,o-1,o,f,m)}i.autoClear=s}_blur(t,i,s,o,f){const m=this._pingPongRenderTarget;this._halfBlur(t,m,i,s,o,"latitudinal",f),this._halfBlur(m,t,s,s,o,"longitudinal",f)}_halfBlur(t,i,s,o,f,m,p){const v=this._renderer,x=this._blurMaterial;m!=="latitudinal"&&m!=="longitudinal"&&console.error("blur direction must be either latitudinal or longitudinal!");const M=3,b=new cs(this._lodPlanes[o],x),T=x.uniforms,P=this._sizeLods[s]-1,N=isFinite(f)?Math.PI/(2*P):2*Math.PI/(2*go-1),L=f/N,D=isFinite(f)?1+Math.floor(M*L):go;D>go&&console.warn(`sigmaRadians, ${f}, is too large and will clip, as it requested ${D} samples when the maximum is set to ${go}`);const R=[];let W=0;for(let re=0;re<go;++re){const oe=re/L,B=Math.exp(-oe*oe/2);R.push(B),re===0?W+=B:re<D&&(W+=2*B)}for(let re=0;re<R.length;re++)R[re]=R[re]/W;T.envMap.value=t.texture,T.samples.value=D,T.weights.value=R,T.latitudinal.value=m==="latitudinal",p&&(T.poleAxis.value=p);const{_lodMax:V}=this;T.dTheta.value=N,T.mipInt.value=V-s;const q=this._sizeLods[o],H=3*q*(o>V-Wl?o-V+Wl:0),Q=4*(this._cubeSize-q);hf(i,H,Q,3*q,2*q),v.setRenderTarget(i),v.render(b,Bp)}}function LL(h){const t=[],i=[],s=[];let o=h;const f=h-Wl+1+Px.length;for(let m=0;m<f;m++){const p=Math.pow(2,o);i.push(p);let v=1/p;m>h-Wl?v=Px[m-h+Wl-1]:m===0&&(v=0),s.push(v);const x=1/(p-2),M=-x,b=1+x,T=[M,M,b,M,b,b,M,M,b,b,M,b],P=6,N=6,L=3,D=2,R=1,W=new Float32Array(L*N*P),V=new Float32Array(D*N*P),q=new Float32Array(R*N*P);for(let Q=0;Q<P;Q++){const re=Q%3*2/3-1,oe=Q>2?0:-1,B=[re,oe,0,re+2/3,oe,0,re+2/3,oe+1,0,re,oe,0,re+2/3,oe+1,0,re,oe+1,0];W.set(B,L*N*Q),V.set(T,D*N*Q);const te=[Q,Q,Q,Q,Q,Q];q.set(te,R*N*Q)}const H=new ws;H.setAttribute("position",new Hr(W,L)),H.setAttribute("uv",new Hr(V,D)),H.setAttribute("faceIndex",new Hr(q,R)),t.push(H),o>Wl&&o--}return{lodPlanes:t,sizeLods:i,sigmas:s}}function Ix(h,t,i){const s=new Ao(h,t,i);return s.texture.mapping=If,s.texture.name="PMREM.cubeUv",s.scissorTest=!0,s}function hf(h,t,i,s,o){h.viewport.set(t,i,s,o),h.scissor.set(t,i,s,o)}function DL(h,t,i){const s=new Float32Array(go),o=new pe(0,1,0);return new Ra({name:"SphericalGaussianBlur",defines:{n:go,CUBEUV_TEXEL_WIDTH:1/t,CUBEUV_TEXEL_HEIGHT:1/i,CUBEUV_MAX_MIP:`${h}.0`},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:s},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:o}},vertexShader:Rm(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,blending:Sa,depthTest:!1,depthWrite:!1})}function Nx(){return new Ra({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null}},vertexShader:Rm(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`,blending:Sa,depthTest:!1,depthWrite:!1})}function Fx(){return new Ra({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:Rm(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`,blending:Sa,depthTest:!1,depthWrite:!1})}function Rm(){return`

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`}function UL(h){let t=new WeakMap,i=null;function s(p){if(p&&p.isTexture){const v=p.mapping,x=v===tm||v===nm,M=v===Ql||v===ec;if(x||M)if(p.isRenderTargetTexture&&p.needsPMREMUpdate===!0){p.needsPMREMUpdate=!1;let b=t.get(p);return i===null&&(i=new Ux(h)),b=x?i.fromEquirectangular(p,b):i.fromCubemap(p,b),t.set(p,b),b.texture}else{if(t.has(p))return t.get(p).texture;{const b=p.image;if(x&&b&&b.height>0||M&&b&&o(b)){i===null&&(i=new Ux(h));const T=x?i.fromEquirectangular(p):i.fromCubemap(p);return t.set(p,T),p.addEventListener("dispose",f),T.texture}else return null}}}return p}function o(p){let v=0;const x=6;for(let M=0;M<x;M++)p[M]!==void 0&&v++;return v===x}function f(p){const v=p.target;v.removeEventListener("dispose",f);const x=t.get(v);x!==void 0&&(t.delete(v),x.dispose())}function m(){t=new WeakMap,i!==null&&(i.dispose(),i=null)}return{get:s,dispose:m}}function IL(h){const t={};function i(s){if(t[s]!==void 0)return t[s];let o;switch(s){case"WEBGL_depth_texture":o=h.getExtension("WEBGL_depth_texture")||h.getExtension("MOZ_WEBGL_depth_texture")||h.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":o=h.getExtension("EXT_texture_filter_anisotropic")||h.getExtension("MOZ_EXT_texture_filter_anisotropic")||h.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":o=h.getExtension("WEBGL_compressed_texture_s3tc")||h.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||h.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":o=h.getExtension("WEBGL_compressed_texture_pvrtc")||h.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:o=h.getExtension(s)}return t[s]=o,o}return{has:function(s){return i(s)!==null},init:function(s){s.isWebGL2?i("EXT_color_buffer_float"):(i("WEBGL_depth_texture"),i("OES_texture_float"),i("OES_texture_half_float"),i("OES_texture_half_float_linear"),i("OES_standard_derivatives"),i("OES_element_index_uint"),i("OES_vertex_array_object"),i("ANGLE_instanced_arrays")),i("OES_texture_float_linear"),i("EXT_color_buffer_half_float"),i("WEBGL_multisampled_render_to_texture")},get:function(s){const o=i(s);return o===null&&console.warn("THREE.WebGLRenderer: "+s+" extension not supported."),o}}}function NL(h,t,i,s){const o={},f=new WeakMap;function m(b){const T=b.target;T.index!==null&&t.remove(T.index);for(const N in T.attributes)t.remove(T.attributes[N]);T.removeEventListener("dispose",m),delete o[T.id];const P=f.get(T);P&&(t.remove(P),f.delete(T)),s.releaseStatesOfGeometry(T),T.isInstancedBufferGeometry===!0&&delete T._maxInstanceCount,i.memory.geometries--}function p(b,T){return o[T.id]===!0||(T.addEventListener("dispose",m),o[T.id]=!0,i.memory.geometries++),T}function v(b){const T=b.attributes;for(const N in T)t.update(T[N],h.ARRAY_BUFFER);const P=b.morphAttributes;for(const N in P){const L=P[N];for(let D=0,R=L.length;D<R;D++)t.update(L[D],h.ARRAY_BUFFER)}}function x(b){const T=[],P=b.index,N=b.attributes.position;let L=0;if(P!==null){const W=P.array;L=P.version;for(let V=0,q=W.length;V<q;V+=3){const H=W[V+0],Q=W[V+1],re=W[V+2];T.push(H,Q,Q,re,re,H)}}else{const W=N.array;L=N.version;for(let V=0,q=W.length/3-1;V<q;V+=3){const H=V+0,Q=V+1,re=V+2;T.push(H,Q,Q,re,re,H)}}const D=new(Fv(T)?Vv:Hv)(T,1);D.version=L;const R=f.get(b);R&&t.remove(R),f.set(b,D)}function M(b){const T=f.get(b);if(T){const P=b.index;P!==null&&T.version<P.version&&x(b)}else x(b);return f.get(b)}return{get:p,update:v,getWireframeAttribute:M}}function FL(h,t,i,s){const o=s.isWebGL2;let f;function m(T){f=T}let p,v;function x(T){p=T.type,v=T.bytesPerElement}function M(T,P){h.drawElements(f,P,p,T*v),i.update(P,f,1)}function b(T,P,N){if(N===0)return;let L,D;if(o)L=h,D="drawElementsInstanced";else if(L=t.get("ANGLE_instanced_arrays"),D="drawElementsInstancedANGLE",L===null){console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}L[D](f,P,p,T*v,N),i.update(P,f,N)}this.setMode=m,this.setIndex=x,this.render=M,this.renderInstances=b}function OL(h){const t={geometries:0,textures:0},i={frame:0,calls:0,triangles:0,points:0,lines:0};function s(f,m,p){switch(i.calls++,m){case h.TRIANGLES:i.triangles+=p*(f/3);break;case h.LINES:i.lines+=p*(f/2);break;case h.LINE_STRIP:i.lines+=p*(f-1);break;case h.LINE_LOOP:i.lines+=p*f;break;case h.POINTS:i.points+=p*f;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",m);break}}function o(){i.frame++,i.calls=0,i.triangles=0,i.points=0,i.lines=0}return{memory:t,render:i,programs:null,autoReset:!0,reset:o,update:s}}function BL(h,t){return h[0]-t[0]}function zL(h,t){return Math.abs(t[1])-Math.abs(h[1])}function kL(h,t,i){const s={},o=new Float32Array(8),f=new WeakMap,m=new Bi,p=[];for(let x=0;x<8;x++)p[x]=[x,0];function v(x,M,b){const T=x.morphTargetInfluences;if(t.isWebGL2===!0){const N=M.morphAttributes.position||M.morphAttributes.normal||M.morphAttributes.color,L=N!==void 0?N.length:0;let D=f.get(M);if(D===void 0||D.count!==L){let ye=function(){de.dispose(),f.delete(M),M.removeEventListener("dispose",ye)};var P=ye;D!==void 0&&D.texture.dispose();const V=M.morphAttributes.position!==void 0,q=M.morphAttributes.normal!==void 0,H=M.morphAttributes.color!==void 0,Q=M.morphAttributes.position||[],re=M.morphAttributes.normal||[],oe=M.morphAttributes.color||[];let B=0;V===!0&&(B=1),q===!0&&(B=2),H===!0&&(B=3);let te=M.attributes.position.count*B,we=1;te>t.maxTextureSize&&(we=Math.ceil(te/t.maxTextureSize),te=t.maxTextureSize);const Ae=new Float32Array(te*we*4*L),de=new zv(Ae,te,we,L);de.type=xo,de.needsUpdate=!0;const xe=B*4;for(let He=0;He<L;He++){const be=Q[He],Le=re[He],nt=oe[He],Ye=te*we*4*He;for(let It=0;It<be.count;It++){const lt=It*xe;V===!0&&(m.fromBufferAttribute(be,It),Ae[Ye+lt+0]=m.x,Ae[Ye+lt+1]=m.y,Ae[Ye+lt+2]=m.z,Ae[Ye+lt+3]=0),q===!0&&(m.fromBufferAttribute(Le,It),Ae[Ye+lt+4]=m.x,Ae[Ye+lt+5]=m.y,Ae[Ye+lt+6]=m.z,Ae[Ye+lt+7]=0),H===!0&&(m.fromBufferAttribute(nt,It),Ae[Ye+lt+8]=m.x,Ae[Ye+lt+9]=m.y,Ae[Ye+lt+10]=m.z,Ae[Ye+lt+11]=nt.itemSize===4?m.w:1)}}D={count:L,texture:de,size:new cn(te,we)},f.set(M,D),M.addEventListener("dispose",ye)}let R=0;for(let V=0;V<T.length;V++)R+=T[V];const W=M.morphTargetsRelative?1:1-R;b.getUniforms().setValue(h,"morphTargetBaseInfluence",W),b.getUniforms().setValue(h,"morphTargetInfluences",T),b.getUniforms().setValue(h,"morphTargetsTexture",D.texture,i),b.getUniforms().setValue(h,"morphTargetsTextureSize",D.size)}else{const N=T===void 0?0:T.length;let L=s[M.id];if(L===void 0||L.length!==N){L=[];for(let q=0;q<N;q++)L[q]=[q,0];s[M.id]=L}for(let q=0;q<N;q++){const H=L[q];H[0]=q,H[1]=T[q]}L.sort(zL);for(let q=0;q<8;q++)q<N&&L[q][1]?(p[q][0]=L[q][0],p[q][1]=L[q][1]):(p[q][0]=Number.MAX_SAFE_INTEGER,p[q][1]=0);p.sort(BL);const D=M.morphAttributes.position,R=M.morphAttributes.normal;let W=0;for(let q=0;q<8;q++){const H=p[q],Q=H[0],re=H[1];Q!==Number.MAX_SAFE_INTEGER&&re?(D&&M.getAttribute("morphTarget"+q)!==D[Q]&&M.setAttribute("morphTarget"+q,D[Q]),R&&M.getAttribute("morphNormal"+q)!==R[Q]&&M.setAttribute("morphNormal"+q,R[Q]),o[q]=re,W+=re):(D&&M.hasAttribute("morphTarget"+q)===!0&&M.deleteAttribute("morphTarget"+q),R&&M.hasAttribute("morphNormal"+q)===!0&&M.deleteAttribute("morphNormal"+q),o[q]=0)}const V=M.morphTargetsRelative?1:1-W;b.getUniforms().setValue(h,"morphTargetBaseInfluence",V),b.getUniforms().setValue(h,"morphTargetInfluences",o)}}return{update:v}}function GL(h,t,i,s){let o=new WeakMap;function f(v){const x=s.render.frame,M=v.geometry,b=t.get(v,M);return o.get(b)!==x&&(t.update(b),o.set(b,x)),v.isInstancedMesh&&(v.hasEventListener("dispose",p)===!1&&v.addEventListener("dispose",p),i.update(v.instanceMatrix,h.ARRAY_BUFFER),v.instanceColor!==null&&i.update(v.instanceColor,h.ARRAY_BUFFER)),b}function m(){o=new WeakMap}function p(v){const x=v.target;x.removeEventListener("dispose",p),i.remove(x.instanceMatrix),x.instanceColor!==null&&i.remove(x.instanceColor)}return{update:f,dispose:m}}const Kv=new fr,$v=new zv,Jv=new CR,jv=new qv,Ox=[],Bx=[],zx=new Float32Array(16),kx=new Float32Array(9),Gx=new Float32Array(4);function fc(h,t,i){const s=h[0];if(s<=0||s>0)return h;const o=t*i;let f=Ox[o];if(f===void 0&&(f=new Float32Array(o),Ox[o]=f),t!==0){s.toArray(f,0);for(let m=1,p=0;m!==t;++m)p+=i,h[m].toArray(f,p)}return f}function Ri(h,t){if(h.length!==t.length)return!1;for(let i=0,s=h.length;i<s;i++)if(h[i]!==t[i])return!1;return!0}function Ci(h,t){for(let i=0,s=t.length;i<s;i++)h[i]=t[i]}function Ff(h,t){let i=Bx[t];i===void 0&&(i=new Int32Array(t),Bx[t]=i);for(let s=0;s!==t;++s)i[s]=h.allocateTextureUnit();return i}function HL(h,t){const i=this.cache;i[0]!==t&&(h.uniform1f(this.addr,t),i[0]=t)}function VL(h,t){const i=this.cache;if(t.x!==void 0)(i[0]!==t.x||i[1]!==t.y)&&(h.uniform2f(this.addr,t.x,t.y),i[0]=t.x,i[1]=t.y);else{if(Ri(i,t))return;h.uniform2fv(this.addr,t),Ci(i,t)}}function WL(h,t){const i=this.cache;if(t.x!==void 0)(i[0]!==t.x||i[1]!==t.y||i[2]!==t.z)&&(h.uniform3f(this.addr,t.x,t.y,t.z),i[0]=t.x,i[1]=t.y,i[2]=t.z);else if(t.r!==void 0)(i[0]!==t.r||i[1]!==t.g||i[2]!==t.b)&&(h.uniform3f(this.addr,t.r,t.g,t.b),i[0]=t.r,i[1]=t.g,i[2]=t.b);else{if(Ri(i,t))return;h.uniform3fv(this.addr,t),Ci(i,t)}}function XL(h,t){const i=this.cache;if(t.x!==void 0)(i[0]!==t.x||i[1]!==t.y||i[2]!==t.z||i[3]!==t.w)&&(h.uniform4f(this.addr,t.x,t.y,t.z,t.w),i[0]=t.x,i[1]=t.y,i[2]=t.z,i[3]=t.w);else{if(Ri(i,t))return;h.uniform4fv(this.addr,t),Ci(i,t)}}function qL(h,t){const i=this.cache,s=t.elements;if(s===void 0){if(Ri(i,t))return;h.uniformMatrix2fv(this.addr,!1,t),Ci(i,t)}else{if(Ri(i,s))return;Gx.set(s),h.uniformMatrix2fv(this.addr,!1,Gx),Ci(i,s)}}function YL(h,t){const i=this.cache,s=t.elements;if(s===void 0){if(Ri(i,t))return;h.uniformMatrix3fv(this.addr,!1,t),Ci(i,t)}else{if(Ri(i,s))return;kx.set(s),h.uniformMatrix3fv(this.addr,!1,kx),Ci(i,s)}}function ZL(h,t){const i=this.cache,s=t.elements;if(s===void 0){if(Ri(i,t))return;h.uniformMatrix4fv(this.addr,!1,t),Ci(i,t)}else{if(Ri(i,s))return;zx.set(s),h.uniformMatrix4fv(this.addr,!1,zx),Ci(i,s)}}function KL(h,t){const i=this.cache;i[0]!==t&&(h.uniform1i(this.addr,t),i[0]=t)}function $L(h,t){const i=this.cache;if(t.x!==void 0)(i[0]!==t.x||i[1]!==t.y)&&(h.uniform2i(this.addr,t.x,t.y),i[0]=t.x,i[1]=t.y);else{if(Ri(i,t))return;h.uniform2iv(this.addr,t),Ci(i,t)}}function JL(h,t){const i=this.cache;if(t.x!==void 0)(i[0]!==t.x||i[1]!==t.y||i[2]!==t.z)&&(h.uniform3i(this.addr,t.x,t.y,t.z),i[0]=t.x,i[1]=t.y,i[2]=t.z);else{if(Ri(i,t))return;h.uniform3iv(this.addr,t),Ci(i,t)}}function jL(h,t){const i=this.cache;if(t.x!==void 0)(i[0]!==t.x||i[1]!==t.y||i[2]!==t.z||i[3]!==t.w)&&(h.uniform4i(this.addr,t.x,t.y,t.z,t.w),i[0]=t.x,i[1]=t.y,i[2]=t.z,i[3]=t.w);else{if(Ri(i,t))return;h.uniform4iv(this.addr,t),Ci(i,t)}}function QL(h,t){const i=this.cache;i[0]!==t&&(h.uniform1ui(this.addr,t),i[0]=t)}function e2(h,t){const i=this.cache;if(t.x!==void 0)(i[0]!==t.x||i[1]!==t.y)&&(h.uniform2ui(this.addr,t.x,t.y),i[0]=t.x,i[1]=t.y);else{if(Ri(i,t))return;h.uniform2uiv(this.addr,t),Ci(i,t)}}function t2(h,t){const i=this.cache;if(t.x!==void 0)(i[0]!==t.x||i[1]!==t.y||i[2]!==t.z)&&(h.uniform3ui(this.addr,t.x,t.y,t.z),i[0]=t.x,i[1]=t.y,i[2]=t.z);else{if(Ri(i,t))return;h.uniform3uiv(this.addr,t),Ci(i,t)}}function n2(h,t){const i=this.cache;if(t.x!==void 0)(i[0]!==t.x||i[1]!==t.y||i[2]!==t.z||i[3]!==t.w)&&(h.uniform4ui(this.addr,t.x,t.y,t.z,t.w),i[0]=t.x,i[1]=t.y,i[2]=t.z,i[3]=t.w);else{if(Ri(i,t))return;h.uniform4uiv(this.addr,t),Ci(i,t)}}function i2(h,t,i){const s=this.cache,o=i.allocateTextureUnit();s[0]!==o&&(h.uniform1i(this.addr,o),s[0]=o),i.setTexture2D(t||Kv,o)}function r2(h,t,i){const s=this.cache,o=i.allocateTextureUnit();s[0]!==o&&(h.uniform1i(this.addr,o),s[0]=o),i.setTexture3D(t||Jv,o)}function s2(h,t,i){const s=this.cache,o=i.allocateTextureUnit();s[0]!==o&&(h.uniform1i(this.addr,o),s[0]=o),i.setTextureCube(t||jv,o)}function a2(h,t,i){const s=this.cache,o=i.allocateTextureUnit();s[0]!==o&&(h.uniform1i(this.addr,o),s[0]=o),i.setTexture2DArray(t||$v,o)}function o2(h){switch(h){case 5126:return HL;case 35664:return VL;case 35665:return WL;case 35666:return XL;case 35674:return qL;case 35675:return YL;case 35676:return ZL;case 5124:case 35670:return KL;case 35667:case 35671:return $L;case 35668:case 35672:return JL;case 35669:case 35673:return jL;case 5125:return QL;case 36294:return e2;case 36295:return t2;case 36296:return n2;case 35678:case 36198:case 36298:case 36306:case 35682:return i2;case 35679:case 36299:case 36307:return r2;case 35680:case 36300:case 36308:case 36293:return s2;case 36289:case 36303:case 36311:case 36292:return a2}}function l2(h,t){h.uniform1fv(this.addr,t)}function c2(h,t){const i=fc(t,this.size,2);h.uniform2fv(this.addr,i)}function h2(h,t){const i=fc(t,this.size,3);h.uniform3fv(this.addr,i)}function u2(h,t){const i=fc(t,this.size,4);h.uniform4fv(this.addr,i)}function f2(h,t){const i=fc(t,this.size,4);h.uniformMatrix2fv(this.addr,!1,i)}function d2(h,t){const i=fc(t,this.size,9);h.uniformMatrix3fv(this.addr,!1,i)}function p2(h,t){const i=fc(t,this.size,16);h.uniformMatrix4fv(this.addr,!1,i)}function m2(h,t){h.uniform1iv(this.addr,t)}function g2(h,t){h.uniform2iv(this.addr,t)}function _2(h,t){h.uniform3iv(this.addr,t)}function x2(h,t){h.uniform4iv(this.addr,t)}function v2(h,t){h.uniform1uiv(this.addr,t)}function y2(h,t){h.uniform2uiv(this.addr,t)}function M2(h,t){h.uniform3uiv(this.addr,t)}function S2(h,t){h.uniform4uiv(this.addr,t)}function E2(h,t,i){const s=this.cache,o=t.length,f=Ff(i,o);Ri(s,f)||(h.uniform1iv(this.addr,f),Ci(s,f));for(let m=0;m!==o;++m)i.setTexture2D(t[m]||Kv,f[m])}function b2(h,t,i){const s=this.cache,o=t.length,f=Ff(i,o);Ri(s,f)||(h.uniform1iv(this.addr,f),Ci(s,f));for(let m=0;m!==o;++m)i.setTexture3D(t[m]||Jv,f[m])}function T2(h,t,i){const s=this.cache,o=t.length,f=Ff(i,o);Ri(s,f)||(h.uniform1iv(this.addr,f),Ci(s,f));for(let m=0;m!==o;++m)i.setTextureCube(t[m]||jv,f[m])}function w2(h,t,i){const s=this.cache,o=t.length,f=Ff(i,o);Ri(s,f)||(h.uniform1iv(this.addr,f),Ci(s,f));for(let m=0;m!==o;++m)i.setTexture2DArray(t[m]||$v,f[m])}function A2(h){switch(h){case 5126:return l2;case 35664:return c2;case 35665:return h2;case 35666:return u2;case 35674:return f2;case 35675:return d2;case 35676:return p2;case 5124:case 35670:return m2;case 35667:case 35671:return g2;case 35668:case 35672:return _2;case 35669:case 35673:return x2;case 5125:return v2;case 36294:return y2;case 36295:return M2;case 36296:return S2;case 35678:case 36198:case 36298:case 36306:case 35682:return E2;case 35679:case 36299:case 36307:return b2;case 35680:case 36300:case 36308:case 36293:return T2;case 36289:case 36303:case 36311:case 36292:return w2}}class R2{constructor(t,i,s){this.id=t,this.addr=s,this.cache=[],this.setValue=o2(i.type)}}class C2{constructor(t,i,s){this.id=t,this.addr=s,this.cache=[],this.size=i.size,this.setValue=A2(i.type)}}class P2{constructor(t){this.id=t,this.seq=[],this.map={}}setValue(t,i,s){const o=this.seq;for(let f=0,m=o.length;f!==m;++f){const p=o[f];p.setValue(t,i[p.id],s)}}}const kp=/(\w+)(\])?(\[|\.)?/g;function Hx(h,t){h.seq.push(t),h.map[t.id]=t}function L2(h,t,i){const s=h.name,o=s.length;for(kp.lastIndex=0;;){const f=kp.exec(s),m=kp.lastIndex;let p=f[1];const v=f[2]==="]",x=f[3];if(v&&(p=p|0),x===void 0||x==="["&&m+2===o){Hx(i,x===void 0?new R2(p,h,t):new C2(p,h,t));break}else{let b=i.map[p];b===void 0&&(b=new P2(p),Hx(i,b)),i=b}}}class xf{constructor(t,i){this.seq=[],this.map={};const s=t.getProgramParameter(i,t.ACTIVE_UNIFORMS);for(let o=0;o<s;++o){const f=t.getActiveUniform(i,o),m=t.getUniformLocation(i,f.name);L2(f,m,this)}}setValue(t,i,s,o){const f=this.map[i];f!==void 0&&f.setValue(t,s,o)}setOptional(t,i,s){const o=i[s];o!==void 0&&this.setValue(t,s,o)}static upload(t,i,s,o){for(let f=0,m=i.length;f!==m;++f){const p=i[f],v=s[p.id];v.needsUpdate!==!1&&p.setValue(t,v.value,o)}}static seqWithValue(t,i){const s=[];for(let o=0,f=t.length;o!==f;++o){const m=t[o];m.id in i&&s.push(m)}return s}}function Vx(h,t,i){const s=h.createShader(t);return h.shaderSource(s,i),h.compileShader(s),s}let D2=0;function U2(h,t){const i=h.split(`
`),s=[],o=Math.max(t-6,0),f=Math.min(t+6,i.length);for(let m=o;m<f;m++){const p=m+1;s.push(`${p===t?">":" "} ${p}: ${i[m]}`)}return s.join(`
`)}function I2(h){switch(h){case bs:return["Linear","( value )"];case vn:return["sRGB","( value )"];default:return console.warn("THREE.WebGLProgram: Unsupported color space:",h),["Linear","( value )"]}}function Wx(h,t,i){const s=h.getShaderParameter(t,h.COMPILE_STATUS),o=h.getShaderInfoLog(t).trim();if(s&&o==="")return"";const f=/ERROR: 0:(\d+)/.exec(o);if(f){const m=parseInt(f[1]);return i.toUpperCase()+`

`+o+`

`+U2(h.getShaderSource(t),m)}else return o}function N2(h,t){const i=I2(t);return"vec4 "+h+"( vec4 value ) { return LinearTo"+i[0]+i[1]+"; }"}function F2(h,t){let i;switch(t){case Z1:i="Linear";break;case K1:i="Reinhard";break;case $1:i="OptimizedCineon";break;case J1:i="ACESFilmic";break;case j1:i="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",t),i="Linear"}return"vec3 "+h+"( vec3 color ) { return "+i+"ToneMapping( color ); }"}function O2(h){return[h.extensionDerivatives||h.envMapCubeUVHeight||h.bumpMap||h.normalMapTangentSpace||h.clearcoatNormalMap||h.flatShading||h.shaderID==="physical"?"#extension GL_OES_standard_derivatives : enable":"",(h.extensionFragDepth||h.logarithmicDepthBuffer)&&h.rendererExtensionFragDepth?"#extension GL_EXT_frag_depth : enable":"",h.extensionDrawBuffers&&h.rendererExtensionDrawBuffers?"#extension GL_EXT_draw_buffers : require":"",(h.extensionShaderTextureLOD||h.envMap||h.transmission)&&h.rendererExtensionShaderTextureLod?"#extension GL_EXT_shader_texture_lod : enable":""].filter(mh).join(`
`)}function B2(h){const t=[];for(const i in h){const s=h[i];s!==!1&&t.push("#define "+i+" "+s)}return t.join(`
`)}function z2(h,t){const i={},s=h.getProgramParameter(t,h.ACTIVE_ATTRIBUTES);for(let o=0;o<s;o++){const f=h.getActiveAttrib(t,o),m=f.name;let p=1;f.type===h.FLOAT_MAT2&&(p=2),f.type===h.FLOAT_MAT3&&(p=3),f.type===h.FLOAT_MAT4&&(p=4),i[m]={type:f.type,location:h.getAttribLocation(t,m),locationSize:p}}return i}function mh(h){return h!==""}function Xx(h,t){const i=t.numSpotLightShadows+t.numSpotLightMaps-t.numSpotLightShadowsWithMaps;return h.replace(/NUM_DIR_LIGHTS/g,t.numDirLights).replace(/NUM_SPOT_LIGHTS/g,t.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g,t.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g,i).replace(/NUM_RECT_AREA_LIGHTS/g,t.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,t.numPointLights).replace(/NUM_HEMI_LIGHTS/g,t.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,t.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g,t.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g,t.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,t.numPointLightShadows)}function qx(h,t){return h.replace(/NUM_CLIPPING_PLANES/g,t.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,t.numClippingPlanes-t.numClipIntersection)}const k2=/^[ \t]*#include +<([\w\d./]+)>/gm;function om(h){return h.replace(k2,G2)}function G2(h,t){const i=En[t];if(i===void 0)throw new Error("Can not resolve #include <"+t+">");return om(i)}const H2=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function Yx(h){return h.replace(H2,V2)}function V2(h,t,i,s){let o="";for(let f=parseInt(t);f<parseInt(i);f++)o+=s.replace(/\[\s*i\s*\]/g,"[ "+f+" ]").replace(/UNROLLED_LOOP_INDEX/g,f);return o}function Zx(h){let t="precision "+h.precision+` float;
precision `+h.precision+" int;";return h.precision==="highp"?t+=`
#define HIGH_PRECISION`:h.precision==="mediump"?t+=`
#define MEDIUM_PRECISION`:h.precision==="lowp"&&(t+=`
#define LOW_PRECISION`),t}function W2(h){let t="SHADOWMAP_TYPE_BASIC";return h.shadowMapType===Rv?t="SHADOWMAP_TYPE_PCF":h.shadowMapType===w1?t="SHADOWMAP_TYPE_PCF_SOFT":h.shadowMapType===qs&&(t="SHADOWMAP_TYPE_VSM"),t}function X2(h){let t="ENVMAP_TYPE_CUBE";if(h.envMap)switch(h.envMapMode){case Ql:case ec:t="ENVMAP_TYPE_CUBE";break;case If:t="ENVMAP_TYPE_CUBE_UV";break}return t}function q2(h){let t="ENVMAP_MODE_REFLECTION";if(h.envMap)switch(h.envMapMode){case ec:t="ENVMAP_MODE_REFRACTION";break}return t}function Y2(h){let t="ENVMAP_BLENDING_NONE";if(h.envMap)switch(h.combine){case Lv:t="ENVMAP_BLENDING_MULTIPLY";break;case q1:t="ENVMAP_BLENDING_MIX";break;case Y1:t="ENVMAP_BLENDING_ADD";break}return t}function Z2(h){const t=h.envMapCubeUVHeight;if(t===null)return null;const i=Math.log2(t)-2,s=1/t;return{texelWidth:1/(3*Math.max(Math.pow(2,i),7*16)),texelHeight:s,maxMip:i}}function K2(h,t,i,s){const o=h.getContext(),f=i.defines;let m=i.vertexShader,p=i.fragmentShader;const v=W2(i),x=X2(i),M=q2(i),b=Y2(i),T=Z2(i),P=i.isWebGL2?"":O2(i),N=B2(f),L=o.createProgram();let D,R,W=i.glslVersion?"#version "+i.glslVersion+`
`:"";i.isRawShaderMaterial?(D=[N].filter(mh).join(`
`),D.length>0&&(D+=`
`),R=[P,N].filter(mh).join(`
`),R.length>0&&(R+=`
`)):(D=[Zx(i),"#define SHADER_NAME "+i.shaderName,N,i.instancing?"#define USE_INSTANCING":"",i.instancingColor?"#define USE_INSTANCING_COLOR":"",i.useFog&&i.fog?"#define USE_FOG":"",i.useFog&&i.fogExp2?"#define FOG_EXP2":"",i.map?"#define USE_MAP":"",i.envMap?"#define USE_ENVMAP":"",i.envMap?"#define "+M:"",i.lightMap?"#define USE_LIGHTMAP":"",i.aoMap?"#define USE_AOMAP":"",i.bumpMap?"#define USE_BUMPMAP":"",i.normalMap?"#define USE_NORMALMAP":"",i.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",i.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",i.displacementMap?"#define USE_DISPLACEMENTMAP":"",i.emissiveMap?"#define USE_EMISSIVEMAP":"",i.clearcoatMap?"#define USE_CLEARCOATMAP":"",i.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",i.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",i.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",i.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",i.specularMap?"#define USE_SPECULARMAP":"",i.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",i.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",i.roughnessMap?"#define USE_ROUGHNESSMAP":"",i.metalnessMap?"#define USE_METALNESSMAP":"",i.alphaMap?"#define USE_ALPHAMAP":"",i.transmission?"#define USE_TRANSMISSION":"",i.transmissionMap?"#define USE_TRANSMISSIONMAP":"",i.thicknessMap?"#define USE_THICKNESSMAP":"",i.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",i.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",i.mapUv?"#define MAP_UV "+i.mapUv:"",i.alphaMapUv?"#define ALPHAMAP_UV "+i.alphaMapUv:"",i.lightMapUv?"#define LIGHTMAP_UV "+i.lightMapUv:"",i.aoMapUv?"#define AOMAP_UV "+i.aoMapUv:"",i.emissiveMapUv?"#define EMISSIVEMAP_UV "+i.emissiveMapUv:"",i.bumpMapUv?"#define BUMPMAP_UV "+i.bumpMapUv:"",i.normalMapUv?"#define NORMALMAP_UV "+i.normalMapUv:"",i.displacementMapUv?"#define DISPLACEMENTMAP_UV "+i.displacementMapUv:"",i.metalnessMapUv?"#define METALNESSMAP_UV "+i.metalnessMapUv:"",i.roughnessMapUv?"#define ROUGHNESSMAP_UV "+i.roughnessMapUv:"",i.clearcoatMapUv?"#define CLEARCOATMAP_UV "+i.clearcoatMapUv:"",i.clearcoatNormalMapUv?"#define CLEARCOAT_NORMALMAP_UV "+i.clearcoatNormalMapUv:"",i.clearcoatRoughnessMapUv?"#define CLEARCOAT_ROUGHNESSMAP_UV "+i.clearcoatRoughnessMapUv:"",i.iridescenceMapUv?"#define IRIDESCENCEMAP_UV "+i.iridescenceMapUv:"",i.iridescenceThicknessMapUv?"#define IRIDESCENCE_THICKNESSMAP_UV "+i.iridescenceThicknessMapUv:"",i.sheenColorMapUv?"#define SHEEN_COLORMAP_UV "+i.sheenColorMapUv:"",i.sheenRoughnessMapUv?"#define SHEEN_ROUGHNESSMAP_UV "+i.sheenRoughnessMapUv:"",i.specularMapUv?"#define SPECULARMAP_UV "+i.specularMapUv:"",i.specularColorMapUv?"#define SPECULAR_COLORMAP_UV "+i.specularColorMapUv:"",i.specularIntensityMapUv?"#define SPECULAR_INTENSITYMAP_UV "+i.specularIntensityMapUv:"",i.transmissionMapUv?"#define TRANSMISSIONMAP_UV "+i.transmissionMapUv:"",i.thicknessMapUv?"#define THICKNESSMAP_UV "+i.thicknessMapUv:"",i.vertexTangents?"#define USE_TANGENT":"",i.vertexColors?"#define USE_COLOR":"",i.vertexAlphas?"#define USE_COLOR_ALPHA":"",i.vertexUv1s?"#define USE_UV1":"",i.vertexUv2s?"#define USE_UV2":"",i.vertexUv3s?"#define USE_UV3":"",i.pointsUvs?"#define USE_POINTS_UV":"",i.flatShading?"#define FLAT_SHADED":"",i.skinning?"#define USE_SKINNING":"",i.morphTargets?"#define USE_MORPHTARGETS":"",i.morphNormals&&i.flatShading===!1?"#define USE_MORPHNORMALS":"",i.morphColors&&i.isWebGL2?"#define USE_MORPHCOLORS":"",i.morphTargetsCount>0&&i.isWebGL2?"#define MORPHTARGETS_TEXTURE":"",i.morphTargetsCount>0&&i.isWebGL2?"#define MORPHTARGETS_TEXTURE_STRIDE "+i.morphTextureStride:"",i.morphTargetsCount>0&&i.isWebGL2?"#define MORPHTARGETS_COUNT "+i.morphTargetsCount:"",i.doubleSided?"#define DOUBLE_SIDED":"",i.flipSided?"#define FLIP_SIDED":"",i.shadowMapEnabled?"#define USE_SHADOWMAP":"",i.shadowMapEnabled?"#define "+v:"",i.sizeAttenuation?"#define USE_SIZEATTENUATION":"",i.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",i.logarithmicDepthBuffer&&i.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","	attribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","	attribute vec3 instanceColor;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_UV1","	attribute vec2 uv1;","#endif","#ifdef USE_UV2","	attribute vec2 uv2;","#endif","#ifdef USE_UV3","	attribute vec2 uv3;","#endif","#ifdef USE_TANGENT","	attribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","	attribute vec4 color;","#elif defined( USE_COLOR )","	attribute vec3 color;","#endif","#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )","	attribute vec3 morphTarget0;","	attribute vec3 morphTarget1;","	attribute vec3 morphTarget2;","	attribute vec3 morphTarget3;","	#ifdef USE_MORPHNORMALS","		attribute vec3 morphNormal0;","		attribute vec3 morphNormal1;","		attribute vec3 morphNormal2;","		attribute vec3 morphNormal3;","	#else","		attribute vec3 morphTarget4;","		attribute vec3 morphTarget5;","		attribute vec3 morphTarget6;","		attribute vec3 morphTarget7;","	#endif","#endif","#ifdef USE_SKINNING","	attribute vec4 skinIndex;","	attribute vec4 skinWeight;","#endif",`
`].filter(mh).join(`
`),R=[P,Zx(i),"#define SHADER_NAME "+i.shaderName,N,i.useFog&&i.fog?"#define USE_FOG":"",i.useFog&&i.fogExp2?"#define FOG_EXP2":"",i.map?"#define USE_MAP":"",i.matcap?"#define USE_MATCAP":"",i.envMap?"#define USE_ENVMAP":"",i.envMap?"#define "+x:"",i.envMap?"#define "+M:"",i.envMap?"#define "+b:"",T?"#define CUBEUV_TEXEL_WIDTH "+T.texelWidth:"",T?"#define CUBEUV_TEXEL_HEIGHT "+T.texelHeight:"",T?"#define CUBEUV_MAX_MIP "+T.maxMip+".0":"",i.lightMap?"#define USE_LIGHTMAP":"",i.aoMap?"#define USE_AOMAP":"",i.bumpMap?"#define USE_BUMPMAP":"",i.normalMap?"#define USE_NORMALMAP":"",i.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",i.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",i.emissiveMap?"#define USE_EMISSIVEMAP":"",i.clearcoat?"#define USE_CLEARCOAT":"",i.clearcoatMap?"#define USE_CLEARCOATMAP":"",i.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",i.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",i.iridescence?"#define USE_IRIDESCENCE":"",i.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",i.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",i.specularMap?"#define USE_SPECULARMAP":"",i.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",i.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",i.roughnessMap?"#define USE_ROUGHNESSMAP":"",i.metalnessMap?"#define USE_METALNESSMAP":"",i.alphaMap?"#define USE_ALPHAMAP":"",i.alphaTest?"#define USE_ALPHATEST":"",i.sheen?"#define USE_SHEEN":"",i.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",i.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",i.transmission?"#define USE_TRANSMISSION":"",i.transmissionMap?"#define USE_TRANSMISSIONMAP":"",i.thicknessMap?"#define USE_THICKNESSMAP":"",i.vertexTangents?"#define USE_TANGENT":"",i.vertexColors||i.instancingColor?"#define USE_COLOR":"",i.vertexAlphas?"#define USE_COLOR_ALPHA":"",i.vertexUv1s?"#define USE_UV1":"",i.vertexUv2s?"#define USE_UV2":"",i.vertexUv3s?"#define USE_UV3":"",i.pointsUvs?"#define USE_POINTS_UV":"",i.gradientMap?"#define USE_GRADIENTMAP":"",i.flatShading?"#define FLAT_SHADED":"",i.doubleSided?"#define DOUBLE_SIDED":"",i.flipSided?"#define FLIP_SIDED":"",i.shadowMapEnabled?"#define USE_SHADOWMAP":"",i.shadowMapEnabled?"#define "+v:"",i.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",i.useLegacyLights?"#define LEGACY_LIGHTS":"",i.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",i.logarithmicDepthBuffer&&i.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",i.toneMapping!==$s?"#define TONE_MAPPING":"",i.toneMapping!==$s?En.tonemapping_pars_fragment:"",i.toneMapping!==$s?F2("toneMapping",i.toneMapping):"",i.dithering?"#define DITHERING":"",i.opaque?"#define OPAQUE":"",En.encodings_pars_fragment,N2("linearToOutputTexel",i.outputColorSpace),i.useDepthPacking?"#define DEPTH_PACKING "+i.depthPacking:"",`
`].filter(mh).join(`
`)),m=om(m),m=Xx(m,i),m=qx(m,i),p=om(p),p=Xx(p,i),p=qx(p,i),m=Yx(m),p=Yx(p),i.isWebGL2&&i.isRawShaderMaterial!==!0&&(W=`#version 300 es
`,D=["precision mediump sampler2DArray;","#define attribute in","#define varying out","#define texture2D texture"].join(`
`)+`
`+D,R=["#define varying in",i.glslVersion===dx?"":"layout(location = 0) out highp vec4 pc_fragColor;",i.glslVersion===dx?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join(`
`)+`
`+R);const V=W+D+m,q=W+R+p,H=Vx(o,o.VERTEX_SHADER,V),Q=Vx(o,o.FRAGMENT_SHADER,q);if(o.attachShader(L,H),o.attachShader(L,Q),i.index0AttributeName!==void 0?o.bindAttribLocation(L,0,i.index0AttributeName):i.morphTargets===!0&&o.bindAttribLocation(L,0,"position"),o.linkProgram(L),h.debug.checkShaderErrors){const B=o.getProgramInfoLog(L).trim(),te=o.getShaderInfoLog(H).trim(),we=o.getShaderInfoLog(Q).trim();let Ae=!0,de=!0;if(o.getProgramParameter(L,o.LINK_STATUS)===!1)if(Ae=!1,typeof h.debug.onShaderError=="function")h.debug.onShaderError(o,L,H,Q);else{const xe=Wx(o,H,"vertex"),ye=Wx(o,Q,"fragment");console.error("THREE.WebGLProgram: Shader Error "+o.getError()+" - VALIDATE_STATUS "+o.getProgramParameter(L,o.VALIDATE_STATUS)+`

Program Info Log: `+B+`
`+xe+`
`+ye)}else B!==""?console.warn("THREE.WebGLProgram: Program Info Log:",B):(te===""||we==="")&&(de=!1);de&&(this.diagnostics={runnable:Ae,programLog:B,vertexShader:{log:te,prefix:D},fragmentShader:{log:we,prefix:R}})}o.deleteShader(H),o.deleteShader(Q);let re;this.getUniforms=function(){return re===void 0&&(re=new xf(o,L)),re};let oe;return this.getAttributes=function(){return oe===void 0&&(oe=z2(o,L)),oe},this.destroy=function(){s.releaseStatesOfProgram(this),o.deleteProgram(L),this.program=void 0},this.name=i.shaderName,this.id=D2++,this.cacheKey=t,this.usedTimes=1,this.program=L,this.vertexShader=H,this.fragmentShader=Q,this}let $2=0;class J2{constructor(){this.shaderCache=new Map,this.materialCache=new Map}update(t){const i=t.vertexShader,s=t.fragmentShader,o=this._getShaderStage(i),f=this._getShaderStage(s),m=this._getShaderCacheForMaterial(t);return m.has(o)===!1&&(m.add(o),o.usedTimes++),m.has(f)===!1&&(m.add(f),f.usedTimes++),this}remove(t){const i=this.materialCache.get(t);for(const s of i)s.usedTimes--,s.usedTimes===0&&this.shaderCache.delete(s.code);return this.materialCache.delete(t),this}getVertexShaderID(t){return this._getShaderStage(t.vertexShader).id}getFragmentShaderID(t){return this._getShaderStage(t.fragmentShader).id}dispose(){this.shaderCache.clear(),this.materialCache.clear()}_getShaderCacheForMaterial(t){const i=this.materialCache;let s=i.get(t);return s===void 0&&(s=new Set,i.set(t,s)),s}_getShaderStage(t){const i=this.shaderCache;let s=i.get(t);return s===void 0&&(s=new j2(t),i.set(t,s)),s}}class j2{constructor(t){this.id=$2++,this.code=t,this.usedTimes=0}}function Q2(h,t,i,s,o,f,m){const p=new wm,v=new J2,x=[],M=o.isWebGL2,b=o.logarithmicDepthBuffer,T=o.vertexTextures;let P=o.precision;const N={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};function L(B){return B===1?"uv1":B===2?"uv2":B===3?"uv3":"uv"}function D(B,te,we,Ae,de){const xe=Ae.fog,ye=de.geometry,He=B.isMeshStandardMaterial?Ae.environment:null,be=(B.isMeshStandardMaterial?i:t).get(B.envMap||He),Le=be&&be.mapping===If?be.image.height:null,nt=N[B.type];B.precision!==null&&(P=o.getMaxPrecision(B.precision),P!==B.precision&&console.warn("THREE.WebGLProgram.getParameters:",B.precision,"not supported, using",P,"instead."));const Ye=ye.morphAttributes.position||ye.morphAttributes.normal||ye.morphAttributes.color,It=Ye!==void 0?Ye.length:0;let lt=0;ye.morphAttributes.position!==void 0&&(lt=1),ye.morphAttributes.normal!==void 0&&(lt=2),ye.morphAttributes.color!==void 0&&(lt=3);let Ce,ke,ut,St;if(nt){const Un=vs[nt];Ce=Un.vertexShader,ke=Un.fragmentShader}else Ce=B.vertexShader,ke=B.fragmentShader,v.update(B),ut=v.getVertexShaderID(B),St=v.getFragmentShaderID(B);const fe=h.getRenderTarget(),tn=de.isInstancedMesh===!0,Wt=!!B.map,mt=!!B.matcap,Xt=!!be,hn=!!B.aoMap,Ft=!!B.lightMap,un=!!B.bumpMap,Qn=!!B.normalMap,Kn=!!B.displacementMap,ii=!!B.emissiveMap,$n=!!B.metalnessMap,dn=!!B.roughnessMap,Pn=B.clearcoat>0,li=B.iridescence>0,ne=B.sheen>0,X=B.transmission>0,Re=Pn&&!!B.clearcoatMap,qe=Pn&&!!B.clearcoatNormalMap,it=Pn&&!!B.clearcoatRoughnessMap,st=li&&!!B.iridescenceMap,ae=li&&!!B.iridescenceThicknessMap,Xe=ne&&!!B.sheenColorMap,Ee=ne&&!!B.sheenRoughnessMap,yt=!!B.specularMap,ft=!!B.specularColorMap,Nt=!!B.specularIntensityMap,Tt=X&&!!B.transmissionMap,wt=X&&!!B.thicknessMap,sn=!!B.gradientMap,nn=!!B.alphaMap,ei=B.alphaTest>0,ce=!!B.extensions,Ie=!!ye.attributes.uv1,rt=!!ye.attributes.uv2,xt=!!ye.attributes.uv3;return{isWebGL2:M,shaderID:nt,shaderName:B.type,vertexShader:Ce,fragmentShader:ke,defines:B.defines,customVertexShaderID:ut,customFragmentShaderID:St,isRawShaderMaterial:B.isRawShaderMaterial===!0,glslVersion:B.glslVersion,precision:P,instancing:tn,instancingColor:tn&&de.instanceColor!==null,supportsVertexTextures:T,outputColorSpace:fe===null?h.outputColorSpace:fe.isXRRenderTarget===!0?fe.texture.colorSpace:bs,map:Wt,matcap:mt,envMap:Xt,envMapMode:Xt&&be.mapping,envMapCubeUVHeight:Le,aoMap:hn,lightMap:Ft,bumpMap:un,normalMap:Qn,displacementMap:T&&Kn,emissiveMap:ii,normalMapObjectSpace:Qn&&B.normalMapType===xR,normalMapTangentSpace:Qn&&B.normalMapType===_R,metalnessMap:$n,roughnessMap:dn,clearcoat:Pn,clearcoatMap:Re,clearcoatNormalMap:qe,clearcoatRoughnessMap:it,iridescence:li,iridescenceMap:st,iridescenceThicknessMap:ae,sheen:ne,sheenColorMap:Xe,sheenRoughnessMap:Ee,specularMap:yt,specularColorMap:ft,specularIntensityMap:Nt,transmission:X,transmissionMap:Tt,thicknessMap:wt,gradientMap:sn,opaque:B.transparent===!1&&B.blending===Yl,alphaMap:nn,alphaTest:ei,combine:B.combine,mapUv:Wt&&L(B.map.channel),aoMapUv:hn&&L(B.aoMap.channel),lightMapUv:Ft&&L(B.lightMap.channel),bumpMapUv:un&&L(B.bumpMap.channel),normalMapUv:Qn&&L(B.normalMap.channel),displacementMapUv:Kn&&L(B.displacementMap.channel),emissiveMapUv:ii&&L(B.emissiveMap.channel),metalnessMapUv:$n&&L(B.metalnessMap.channel),roughnessMapUv:dn&&L(B.roughnessMap.channel),clearcoatMapUv:Re&&L(B.clearcoatMap.channel),clearcoatNormalMapUv:qe&&L(B.clearcoatNormalMap.channel),clearcoatRoughnessMapUv:it&&L(B.clearcoatRoughnessMap.channel),iridescenceMapUv:st&&L(B.iridescenceMap.channel),iridescenceThicknessMapUv:ae&&L(B.iridescenceThicknessMap.channel),sheenColorMapUv:Xe&&L(B.sheenColorMap.channel),sheenRoughnessMapUv:Ee&&L(B.sheenRoughnessMap.channel),specularMapUv:yt&&L(B.specularMap.channel),specularColorMapUv:ft&&L(B.specularColorMap.channel),specularIntensityMapUv:Nt&&L(B.specularIntensityMap.channel),transmissionMapUv:Tt&&L(B.transmissionMap.channel),thicknessMapUv:wt&&L(B.thicknessMap.channel),alphaMapUv:nn&&L(B.alphaMap.channel),vertexTangents:Qn&&!!ye.attributes.tangent,vertexColors:B.vertexColors,vertexAlphas:B.vertexColors===!0&&!!ye.attributes.color&&ye.attributes.color.itemSize===4,vertexUv1s:Ie,vertexUv2s:rt,vertexUv3s:xt,pointsUvs:de.isPoints===!0&&!!ye.attributes.uv&&(Wt||nn),fog:!!xe,useFog:B.fog===!0,fogExp2:xe&&xe.isFogExp2,flatShading:B.flatShading===!0,sizeAttenuation:B.sizeAttenuation===!0,logarithmicDepthBuffer:b,skinning:de.isSkinnedMesh===!0,morphTargets:ye.morphAttributes.position!==void 0,morphNormals:ye.morphAttributes.normal!==void 0,morphColors:ye.morphAttributes.color!==void 0,morphTargetsCount:It,morphTextureStride:lt,numDirLights:te.directional.length,numPointLights:te.point.length,numSpotLights:te.spot.length,numSpotLightMaps:te.spotLightMap.length,numRectAreaLights:te.rectArea.length,numHemiLights:te.hemi.length,numDirLightShadows:te.directionalShadowMap.length,numPointLightShadows:te.pointShadowMap.length,numSpotLightShadows:te.spotShadowMap.length,numSpotLightShadowsWithMaps:te.numSpotLightShadowsWithMaps,numClippingPlanes:m.numPlanes,numClipIntersection:m.numIntersection,dithering:B.dithering,shadowMapEnabled:h.shadowMap.enabled&&we.length>0,shadowMapType:h.shadowMap.type,toneMapping:B.toneMapped?h.toneMapping:$s,useLegacyLights:h.useLegacyLights,premultipliedAlpha:B.premultipliedAlpha,doubleSided:B.side===Ks,flipSided:B.side===ur,useDepthPacking:B.depthPacking>=0,depthPacking:B.depthPacking||0,index0AttributeName:B.index0AttributeName,extensionDerivatives:ce&&B.extensions.derivatives===!0,extensionFragDepth:ce&&B.extensions.fragDepth===!0,extensionDrawBuffers:ce&&B.extensions.drawBuffers===!0,extensionShaderTextureLOD:ce&&B.extensions.shaderTextureLOD===!0,rendererExtensionFragDepth:M||s.has("EXT_frag_depth"),rendererExtensionDrawBuffers:M||s.has("WEBGL_draw_buffers"),rendererExtensionShaderTextureLod:M||s.has("EXT_shader_texture_lod"),customProgramCacheKey:B.customProgramCacheKey()}}function R(B){const te=[];if(B.shaderID?te.push(B.shaderID):(te.push(B.customVertexShaderID),te.push(B.customFragmentShaderID)),B.defines!==void 0)for(const we in B.defines)te.push(we),te.push(B.defines[we]);return B.isRawShaderMaterial===!1&&(W(te,B),V(te,B),te.push(h.outputColorSpace)),te.push(B.customProgramCacheKey),te.join()}function W(B,te){B.push(te.precision),B.push(te.outputColorSpace),B.push(te.envMapMode),B.push(te.envMapCubeUVHeight),B.push(te.mapUv),B.push(te.alphaMapUv),B.push(te.lightMapUv),B.push(te.aoMapUv),B.push(te.bumpMapUv),B.push(te.normalMapUv),B.push(te.displacementMapUv),B.push(te.emissiveMapUv),B.push(te.metalnessMapUv),B.push(te.roughnessMapUv),B.push(te.clearcoatMapUv),B.push(te.clearcoatNormalMapUv),B.push(te.clearcoatRoughnessMapUv),B.push(te.iridescenceMapUv),B.push(te.iridescenceThicknessMapUv),B.push(te.sheenColorMapUv),B.push(te.sheenRoughnessMapUv),B.push(te.specularMapUv),B.push(te.specularColorMapUv),B.push(te.specularIntensityMapUv),B.push(te.transmissionMapUv),B.push(te.thicknessMapUv),B.push(te.combine),B.push(te.fogExp2),B.push(te.sizeAttenuation),B.push(te.morphTargetsCount),B.push(te.morphAttributeCount),B.push(te.numDirLights),B.push(te.numPointLights),B.push(te.numSpotLights),B.push(te.numSpotLightMaps),B.push(te.numHemiLights),B.push(te.numRectAreaLights),B.push(te.numDirLightShadows),B.push(te.numPointLightShadows),B.push(te.numSpotLightShadows),B.push(te.numSpotLightShadowsWithMaps),B.push(te.shadowMapType),B.push(te.toneMapping),B.push(te.numClippingPlanes),B.push(te.numClipIntersection),B.push(te.depthPacking)}function V(B,te){p.disableAll(),te.isWebGL2&&p.enable(0),te.supportsVertexTextures&&p.enable(1),te.instancing&&p.enable(2),te.instancingColor&&p.enable(3),te.matcap&&p.enable(4),te.envMap&&p.enable(5),te.normalMapObjectSpace&&p.enable(6),te.normalMapTangentSpace&&p.enable(7),te.clearcoat&&p.enable(8),te.iridescence&&p.enable(9),te.alphaTest&&p.enable(10),te.vertexColors&&p.enable(11),te.vertexAlphas&&p.enable(12),te.vertexUv1s&&p.enable(13),te.vertexUv2s&&p.enable(14),te.vertexUv3s&&p.enable(15),te.vertexTangents&&p.enable(16),B.push(p.mask),p.disableAll(),te.fog&&p.enable(0),te.useFog&&p.enable(1),te.flatShading&&p.enable(2),te.logarithmicDepthBuffer&&p.enable(3),te.skinning&&p.enable(4),te.morphTargets&&p.enable(5),te.morphNormals&&p.enable(6),te.morphColors&&p.enable(7),te.premultipliedAlpha&&p.enable(8),te.shadowMapEnabled&&p.enable(9),te.useLegacyLights&&p.enable(10),te.doubleSided&&p.enable(11),te.flipSided&&p.enable(12),te.useDepthPacking&&p.enable(13),te.dithering&&p.enable(14),te.transmission&&p.enable(15),te.sheen&&p.enable(16),te.opaque&&p.enable(17),te.pointsUvs&&p.enable(18),B.push(p.mask)}function q(B){const te=N[B.type];let we;if(te){const Ae=vs[te];we=GR.clone(Ae.uniforms)}else we=B.uniforms;return we}function H(B,te){let we;for(let Ae=0,de=x.length;Ae<de;Ae++){const xe=x[Ae];if(xe.cacheKey===te){we=xe,++we.usedTimes;break}}return we===void 0&&(we=new K2(h,te,B,f),x.push(we)),we}function Q(B){if(--B.usedTimes===0){const te=x.indexOf(B);x[te]=x[x.length-1],x.pop(),B.destroy()}}function re(B){v.remove(B)}function oe(){v.dispose()}return{getParameters:D,getProgramCacheKey:R,getUniforms:q,acquireProgram:H,releaseProgram:Q,releaseShaderCache:re,programs:x,dispose:oe}}function eD(){let h=new WeakMap;function t(f){let m=h.get(f);return m===void 0&&(m={},h.set(f,m)),m}function i(f){h.delete(f)}function s(f,m,p){h.get(f)[m]=p}function o(){h=new WeakMap}return{get:t,remove:i,update:s,dispose:o}}function tD(h,t){return h.groupOrder!==t.groupOrder?h.groupOrder-t.groupOrder:h.renderOrder!==t.renderOrder?h.renderOrder-t.renderOrder:h.material.id!==t.material.id?h.material.id-t.material.id:h.z!==t.z?h.z-t.z:h.id-t.id}function Kx(h,t){return h.groupOrder!==t.groupOrder?h.groupOrder-t.groupOrder:h.renderOrder!==t.renderOrder?h.renderOrder-t.renderOrder:h.z!==t.z?t.z-h.z:h.id-t.id}function $x(){const h=[];let t=0;const i=[],s=[],o=[];function f(){t=0,i.length=0,s.length=0,o.length=0}function m(b,T,P,N,L,D){let R=h[t];return R===void 0?(R={id:b.id,object:b,geometry:T,material:P,groupOrder:N,renderOrder:b.renderOrder,z:L,group:D},h[t]=R):(R.id=b.id,R.object=b,R.geometry=T,R.material=P,R.groupOrder=N,R.renderOrder=b.renderOrder,R.z=L,R.group=D),t++,R}function p(b,T,P,N,L,D){const R=m(b,T,P,N,L,D);P.transmission>0?s.push(R):P.transparent===!0?o.push(R):i.push(R)}function v(b,T,P,N,L,D){const R=m(b,T,P,N,L,D);P.transmission>0?s.unshift(R):P.transparent===!0?o.unshift(R):i.unshift(R)}function x(b,T){i.length>1&&i.sort(b||tD),s.length>1&&s.sort(T||Kx),o.length>1&&o.sort(T||Kx)}function M(){for(let b=t,T=h.length;b<T;b++){const P=h[b];if(P.id===null)break;P.id=null,P.object=null,P.geometry=null,P.material=null,P.group=null}}return{opaque:i,transmissive:s,transparent:o,init:f,push:p,unshift:v,finish:M,sort:x}}function nD(){let h=new WeakMap;function t(s,o){const f=h.get(s);let m;return f===void 0?(m=new $x,h.set(s,[m])):o>=f.length?(m=new $x,f.push(m)):m=f[o],m}function i(){h=new WeakMap}return{get:t,dispose:i}}function iD(){const h={};return{get:function(t){if(h[t.id]!==void 0)return h[t.id];let i;switch(t.type){case"DirectionalLight":i={direction:new pe,color:new kn};break;case"SpotLight":i={position:new pe,direction:new pe,color:new kn,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":i={position:new pe,color:new kn,distance:0,decay:0};break;case"HemisphereLight":i={direction:new pe,skyColor:new kn,groundColor:new kn};break;case"RectAreaLight":i={color:new kn,position:new pe,halfWidth:new pe,halfHeight:new pe};break}return h[t.id]=i,i}}}function rD(){const h={};return{get:function(t){if(h[t.id]!==void 0)return h[t.id];let i;switch(t.type){case"DirectionalLight":i={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new cn};break;case"SpotLight":i={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new cn};break;case"PointLight":i={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new cn,shadowCameraNear:1,shadowCameraFar:1e3};break}return h[t.id]=i,i}}}let sD=0;function aD(h,t){return(t.castShadow?2:0)-(h.castShadow?2:0)+(t.map?1:0)-(h.map?1:0)}function oD(h,t){const i=new iD,s=rD(),o={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1,numSpotMaps:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotLightMap:[],spotShadow:[],spotShadowMap:[],spotLightMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],numSpotLightShadowsWithMaps:0};for(let M=0;M<9;M++)o.probe.push(new pe);const f=new pe,m=new oi,p=new oi;function v(M,b){let T=0,P=0,N=0;for(let we=0;we<9;we++)o.probe[we].set(0,0,0);let L=0,D=0,R=0,W=0,V=0,q=0,H=0,Q=0,re=0,oe=0;M.sort(aD);const B=b===!0?Math.PI:1;for(let we=0,Ae=M.length;we<Ae;we++){const de=M[we],xe=de.color,ye=de.intensity,He=de.distance,be=de.shadow&&de.shadow.map?de.shadow.map.texture:null;if(de.isAmbientLight)T+=xe.r*ye*B,P+=xe.g*ye*B,N+=xe.b*ye*B;else if(de.isLightProbe)for(let Le=0;Le<9;Le++)o.probe[Le].addScaledVector(de.sh.coefficients[Le],ye);else if(de.isDirectionalLight){const Le=i.get(de);if(Le.color.copy(de.color).multiplyScalar(de.intensity*B),de.castShadow){const nt=de.shadow,Ye=s.get(de);Ye.shadowBias=nt.bias,Ye.shadowNormalBias=nt.normalBias,Ye.shadowRadius=nt.radius,Ye.shadowMapSize=nt.mapSize,o.directionalShadow[L]=Ye,o.directionalShadowMap[L]=be,o.directionalShadowMatrix[L]=de.shadow.matrix,q++}o.directional[L]=Le,L++}else if(de.isSpotLight){const Le=i.get(de);Le.position.setFromMatrixPosition(de.matrixWorld),Le.color.copy(xe).multiplyScalar(ye*B),Le.distance=He,Le.coneCos=Math.cos(de.angle),Le.penumbraCos=Math.cos(de.angle*(1-de.penumbra)),Le.decay=de.decay,o.spot[R]=Le;const nt=de.shadow;if(de.map&&(o.spotLightMap[re]=de.map,re++,nt.updateMatrices(de),de.castShadow&&oe++),o.spotLightMatrix[R]=nt.matrix,de.castShadow){const Ye=s.get(de);Ye.shadowBias=nt.bias,Ye.shadowNormalBias=nt.normalBias,Ye.shadowRadius=nt.radius,Ye.shadowMapSize=nt.mapSize,o.spotShadow[R]=Ye,o.spotShadowMap[R]=be,Q++}R++}else if(de.isRectAreaLight){const Le=i.get(de);Le.color.copy(xe).multiplyScalar(ye),Le.halfWidth.set(de.width*.5,0,0),Le.halfHeight.set(0,de.height*.5,0),o.rectArea[W]=Le,W++}else if(de.isPointLight){const Le=i.get(de);if(Le.color.copy(de.color).multiplyScalar(de.intensity*B),Le.distance=de.distance,Le.decay=de.decay,de.castShadow){const nt=de.shadow,Ye=s.get(de);Ye.shadowBias=nt.bias,Ye.shadowNormalBias=nt.normalBias,Ye.shadowRadius=nt.radius,Ye.shadowMapSize=nt.mapSize,Ye.shadowCameraNear=nt.camera.near,Ye.shadowCameraFar=nt.camera.far,o.pointShadow[D]=Ye,o.pointShadowMap[D]=be,o.pointShadowMatrix[D]=de.shadow.matrix,H++}o.point[D]=Le,D++}else if(de.isHemisphereLight){const Le=i.get(de);Le.skyColor.copy(de.color).multiplyScalar(ye*B),Le.groundColor.copy(de.groundColor).multiplyScalar(ye*B),o.hemi[V]=Le,V++}}W>0&&(t.isWebGL2||h.has("OES_texture_float_linear")===!0?(o.rectAreaLTC1=_t.LTC_FLOAT_1,o.rectAreaLTC2=_t.LTC_FLOAT_2):h.has("OES_texture_half_float_linear")===!0?(o.rectAreaLTC1=_t.LTC_HALF_1,o.rectAreaLTC2=_t.LTC_HALF_2):console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.")),o.ambient[0]=T,o.ambient[1]=P,o.ambient[2]=N;const te=o.hash;(te.directionalLength!==L||te.pointLength!==D||te.spotLength!==R||te.rectAreaLength!==W||te.hemiLength!==V||te.numDirectionalShadows!==q||te.numPointShadows!==H||te.numSpotShadows!==Q||te.numSpotMaps!==re)&&(o.directional.length=L,o.spot.length=R,o.rectArea.length=W,o.point.length=D,o.hemi.length=V,o.directionalShadow.length=q,o.directionalShadowMap.length=q,o.pointShadow.length=H,o.pointShadowMap.length=H,o.spotShadow.length=Q,o.spotShadowMap.length=Q,o.directionalShadowMatrix.length=q,o.pointShadowMatrix.length=H,o.spotLightMatrix.length=Q+re-oe,o.spotLightMap.length=re,o.numSpotLightShadowsWithMaps=oe,te.directionalLength=L,te.pointLength=D,te.spotLength=R,te.rectAreaLength=W,te.hemiLength=V,te.numDirectionalShadows=q,te.numPointShadows=H,te.numSpotShadows=Q,te.numSpotMaps=re,o.version=sD++)}function x(M,b){let T=0,P=0,N=0,L=0,D=0;const R=b.matrixWorldInverse;for(let W=0,V=M.length;W<V;W++){const q=M[W];if(q.isDirectionalLight){const H=o.directional[T];H.direction.setFromMatrixPosition(q.matrixWorld),f.setFromMatrixPosition(q.target.matrixWorld),H.direction.sub(f),H.direction.transformDirection(R),T++}else if(q.isSpotLight){const H=o.spot[N];H.position.setFromMatrixPosition(q.matrixWorld),H.position.applyMatrix4(R),H.direction.setFromMatrixPosition(q.matrixWorld),f.setFromMatrixPosition(q.target.matrixWorld),H.direction.sub(f),H.direction.transformDirection(R),N++}else if(q.isRectAreaLight){const H=o.rectArea[L];H.position.setFromMatrixPosition(q.matrixWorld),H.position.applyMatrix4(R),p.identity(),m.copy(q.matrixWorld),m.premultiply(R),p.extractRotation(m),H.halfWidth.set(q.width*.5,0,0),H.halfHeight.set(0,q.height*.5,0),H.halfWidth.applyMatrix4(p),H.halfHeight.applyMatrix4(p),L++}else if(q.isPointLight){const H=o.point[P];H.position.setFromMatrixPosition(q.matrixWorld),H.position.applyMatrix4(R),P++}else if(q.isHemisphereLight){const H=o.hemi[D];H.direction.setFromMatrixPosition(q.matrixWorld),H.direction.transformDirection(R),D++}}}return{setup:v,setupView:x,state:o}}function Jx(h,t){const i=new oD(h,t),s=[],o=[];function f(){s.length=0,o.length=0}function m(b){s.push(b)}function p(b){o.push(b)}function v(b){i.setup(s,b)}function x(b){i.setupView(s,b)}return{init:f,state:{lightsArray:s,shadowsArray:o,lights:i},setupLights:v,setupLightsView:x,pushLight:m,pushShadow:p}}function lD(h,t){let i=new WeakMap;function s(f,m=0){const p=i.get(f);let v;return p===void 0?(v=new Jx(h,t),i.set(f,[v])):m>=p.length?(v=new Jx(h,t),p.push(v)):v=p[m],v}function o(){i=new WeakMap}return{get:s,dispose:o}}class cD extends uc{constructor(t){super(),this.isMeshDepthMaterial=!0,this.type="MeshDepthMaterial",this.depthPacking=mR,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.setValues(t)}copy(t){return super.copy(t),this.depthPacking=t.depthPacking,this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this}}class hD extends uc{constructor(t){super(),this.isMeshDistanceMaterial=!0,this.type="MeshDistanceMaterial",this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.setValues(t)}copy(t){return super.copy(t),this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this}}const uD=`void main() {
	gl_Position = vec4( position, 1.0 );
}`,fD=`uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;
#include <packing>
void main() {
	const float samples = float( VSM_SAMPLES );
	float mean = 0.0;
	float squared_mean = 0.0;
	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );
	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;
	for ( float i = 0.0; i < samples; i ++ ) {
		float uvOffset = uvStart + i * uvStride;
		#ifdef HORIZONTAL_PASS
			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );
			mean += distribution.x;
			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;
		#else
			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );
			mean += depth;
			squared_mean += depth * depth;
		#endif
	}
	mean = mean / samples;
	squared_mean = squared_mean / samples;
	float std_dev = sqrt( squared_mean - mean * mean );
	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );
}`;function dD(h,t,i){let s=new Yv;const o=new cn,f=new cn,m=new Bi,p=new cD({depthPacking:gR}),v=new hD,x={},M=i.maxTextureSize,b={[Aa]:ur,[ur]:Aa,[Ks]:Ks},T=new Ra({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new cn},radius:{value:4}},vertexShader:uD,fragmentShader:fD}),P=T.clone();P.defines.HORIZONTAL_PASS=1;const N=new ws;N.setAttribute("position",new Hr(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const L=new cs(N,T),D=this;this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=Rv;let R=this.type;this.render=function(H,Q,re){if(D.enabled===!1||D.autoUpdate===!1&&D.needsUpdate===!1||H.length===0)return;const oe=h.getRenderTarget(),B=h.getActiveCubeFace(),te=h.getActiveMipmapLevel(),we=h.state;we.setBlending(Sa),we.buffers.color.setClear(1,1,1,1),we.buffers.depth.setTest(!0),we.setScissorTest(!1);const Ae=R!==qs&&this.type===qs,de=R===qs&&this.type!==qs;for(let xe=0,ye=H.length;xe<ye;xe++){const He=H[xe],be=He.shadow;if(be===void 0){console.warn("THREE.WebGLShadowMap:",He,"has no shadow.");continue}if(be.autoUpdate===!1&&be.needsUpdate===!1)continue;o.copy(be.mapSize);const Le=be.getFrameExtents();if(o.multiply(Le),f.copy(be.mapSize),(o.x>M||o.y>M)&&(o.x>M&&(f.x=Math.floor(M/Le.x),o.x=f.x*Le.x,be.mapSize.x=f.x),o.y>M&&(f.y=Math.floor(M/Le.y),o.y=f.y*Le.y,be.mapSize.y=f.y)),be.map===null||Ae===!0||de===!0){const Ye=this.type!==qs?{minFilter:rr,magFilter:rr}:{};be.map!==null&&be.map.dispose(),be.map=new Ao(o.x,o.y,Ye),be.map.texture.name=He.name+".shadowMap",be.camera.updateProjectionMatrix()}h.setRenderTarget(be.map),h.clear();const nt=be.getViewportCount();for(let Ye=0;Ye<nt;Ye++){const It=be.getViewport(Ye);m.set(f.x*It.x,f.y*It.y,f.x*It.z,f.y*It.w),we.viewport(m),be.updateMatrices(He,Ye),s=be.getFrustum(),q(Q,re,be.camera,He,this.type)}be.isPointLightShadow!==!0&&this.type===qs&&W(be,re),be.needsUpdate=!1}R=this.type,D.needsUpdate=!1,h.setRenderTarget(oe,B,te)};function W(H,Q){const re=t.update(L);T.defines.VSM_SAMPLES!==H.blurSamples&&(T.defines.VSM_SAMPLES=H.blurSamples,P.defines.VSM_SAMPLES=H.blurSamples,T.needsUpdate=!0,P.needsUpdate=!0),H.mapPass===null&&(H.mapPass=new Ao(o.x,o.y)),T.uniforms.shadow_pass.value=H.map.texture,T.uniforms.resolution.value=H.mapSize,T.uniforms.radius.value=H.radius,h.setRenderTarget(H.mapPass),h.clear(),h.renderBufferDirect(Q,null,re,T,L,null),P.uniforms.shadow_pass.value=H.mapPass.texture,P.uniforms.resolution.value=H.mapSize,P.uniforms.radius.value=H.radius,h.setRenderTarget(H.map),h.clear(),h.renderBufferDirect(Q,null,re,P,L,null)}function V(H,Q,re,oe){let B=null;const te=re.isPointLight===!0?H.customDistanceMaterial:H.customDepthMaterial;if(te!==void 0)B=te;else if(B=re.isPointLight===!0?v:p,h.localClippingEnabled&&Q.clipShadows===!0&&Array.isArray(Q.clippingPlanes)&&Q.clippingPlanes.length!==0||Q.displacementMap&&Q.displacementScale!==0||Q.alphaMap&&Q.alphaTest>0||Q.map&&Q.alphaTest>0){const we=B.uuid,Ae=Q.uuid;let de=x[we];de===void 0&&(de={},x[we]=de);let xe=de[Ae];xe===void 0&&(xe=B.clone(),de[Ae]=xe),B=xe}if(B.visible=Q.visible,B.wireframe=Q.wireframe,oe===qs?B.side=Q.shadowSide!==null?Q.shadowSide:Q.side:B.side=Q.shadowSide!==null?Q.shadowSide:b[Q.side],B.alphaMap=Q.alphaMap,B.alphaTest=Q.alphaTest,B.map=Q.map,B.clipShadows=Q.clipShadows,B.clippingPlanes=Q.clippingPlanes,B.clipIntersection=Q.clipIntersection,B.displacementMap=Q.displacementMap,B.displacementScale=Q.displacementScale,B.displacementBias=Q.displacementBias,B.wireframeLinewidth=Q.wireframeLinewidth,B.linewidth=Q.linewidth,re.isPointLight===!0&&B.isMeshDistanceMaterial===!0){const we=h.properties.get(B);we.light=re}return B}function q(H,Q,re,oe,B){if(H.visible===!1)return;if(H.layers.test(Q.layers)&&(H.isMesh||H.isLine||H.isPoints)&&(H.castShadow||H.receiveShadow&&B===qs)&&(!H.frustumCulled||s.intersectsObject(H))){H.modelViewMatrix.multiplyMatrices(re.matrixWorldInverse,H.matrixWorld);const Ae=t.update(H),de=H.material;if(Array.isArray(de)){const xe=Ae.groups;for(let ye=0,He=xe.length;ye<He;ye++){const be=xe[ye],Le=de[be.materialIndex];if(Le&&Le.visible){const nt=V(H,Le,oe,B);h.renderBufferDirect(re,null,Ae,nt,H,be)}}}else if(de.visible){const xe=V(H,de,oe,B);h.renderBufferDirect(re,null,Ae,xe,H,null)}}const we=H.children;for(let Ae=0,de=we.length;Ae<de;Ae++)q(we[Ae],Q,re,oe,B)}}function pD(h,t,i){const s=i.isWebGL2;function o(){let ce=!1;const Ie=new Bi;let rt=null;const xt=new Bi(0,0,0,0);return{setMask:function(Ct){rt!==Ct&&!ce&&(h.colorMask(Ct,Ct,Ct,Ct),rt=Ct)},setLocked:function(Ct){ce=Ct},setClear:function(Ct,Un,Gn,Si,zi){zi===!0&&(Ct*=Si,Un*=Si,Gn*=Si),Ie.set(Ct,Un,Gn,Si),xt.equals(Ie)===!1&&(h.clearColor(Ct,Un,Gn,Si),xt.copy(Ie))},reset:function(){ce=!1,rt=null,xt.set(-1,0,0,0)}}}function f(){let ce=!1,Ie=null,rt=null,xt=null;return{setTest:function(Ct){Ct?fe(h.DEPTH_TEST):tn(h.DEPTH_TEST)},setMask:function(Ct){Ie!==Ct&&!ce&&(h.depthMask(Ct),Ie=Ct)},setFunc:function(Ct){if(rt!==Ct){switch(Ct){case z1:h.depthFunc(h.NEVER);break;case k1:h.depthFunc(h.ALWAYS);break;case G1:h.depthFunc(h.LESS);break;case em:h.depthFunc(h.LEQUAL);break;case H1:h.depthFunc(h.EQUAL);break;case V1:h.depthFunc(h.GEQUAL);break;case W1:h.depthFunc(h.GREATER);break;case X1:h.depthFunc(h.NOTEQUAL);break;default:h.depthFunc(h.LEQUAL)}rt=Ct}},setLocked:function(Ct){ce=Ct},setClear:function(Ct){xt!==Ct&&(h.clearDepth(Ct),xt=Ct)},reset:function(){ce=!1,Ie=null,rt=null,xt=null}}}function m(){let ce=!1,Ie=null,rt=null,xt=null,Ct=null,Un=null,Gn=null,Si=null,zi=null;return{setTest:function(ti){ce||(ti?fe(h.STENCIL_TEST):tn(h.STENCIL_TEST))},setMask:function(ti){Ie!==ti&&!ce&&(h.stencilMask(ti),Ie=ti)},setFunc:function(ti,Jn,_r){(rt!==ti||xt!==Jn||Ct!==_r)&&(h.stencilFunc(ti,Jn,_r),rt=ti,xt=Jn,Ct=_r)},setOp:function(ti,Jn,_r){(Un!==ti||Gn!==Jn||Si!==_r)&&(h.stencilOp(ti,Jn,_r),Un=ti,Gn=Jn,Si=_r)},setLocked:function(ti){ce=ti},setClear:function(ti){zi!==ti&&(h.clearStencil(ti),zi=ti)},reset:function(){ce=!1,Ie=null,rt=null,xt=null,Ct=null,Un=null,Gn=null,Si=null,zi=null}}}const p=new o,v=new f,x=new m,M=new WeakMap,b=new WeakMap;let T={},P={},N=new WeakMap,L=[],D=null,R=!1,W=null,V=null,q=null,H=null,Q=null,re=null,oe=null,B=!1,te=null,we=null,Ae=null,de=null,xe=null;const ye=h.getParameter(h.MAX_COMBINED_TEXTURE_IMAGE_UNITS);let He=!1,be=0;const Le=h.getParameter(h.VERSION);Le.indexOf("WebGL")!==-1?(be=parseFloat(/^WebGL (\d)/.exec(Le)[1]),He=be>=1):Le.indexOf("OpenGL ES")!==-1&&(be=parseFloat(/^OpenGL ES (\d)/.exec(Le)[1]),He=be>=2);let nt=null,Ye={};const It=h.getParameter(h.SCISSOR_BOX),lt=h.getParameter(h.VIEWPORT),Ce=new Bi().fromArray(It),ke=new Bi().fromArray(lt);function ut(ce,Ie,rt,xt){const Ct=new Uint8Array(4),Un=h.createTexture();h.bindTexture(ce,Un),h.texParameteri(ce,h.TEXTURE_MIN_FILTER,h.NEAREST),h.texParameteri(ce,h.TEXTURE_MAG_FILTER,h.NEAREST);for(let Gn=0;Gn<rt;Gn++)s&&(ce===h.TEXTURE_3D||ce===h.TEXTURE_2D_ARRAY)?h.texImage3D(Ie,0,h.RGBA,1,1,xt,0,h.RGBA,h.UNSIGNED_BYTE,Ct):h.texImage2D(Ie+Gn,0,h.RGBA,1,1,0,h.RGBA,h.UNSIGNED_BYTE,Ct);return Un}const St={};St[h.TEXTURE_2D]=ut(h.TEXTURE_2D,h.TEXTURE_2D,1),St[h.TEXTURE_CUBE_MAP]=ut(h.TEXTURE_CUBE_MAP,h.TEXTURE_CUBE_MAP_POSITIVE_X,6),s&&(St[h.TEXTURE_2D_ARRAY]=ut(h.TEXTURE_2D_ARRAY,h.TEXTURE_2D_ARRAY,1,1),St[h.TEXTURE_3D]=ut(h.TEXTURE_3D,h.TEXTURE_3D,1,1)),p.setClear(0,0,0,1),v.setClear(1),x.setClear(0),fe(h.DEPTH_TEST),v.setFunc(em),Kn(!1),ii(O0),fe(h.CULL_FACE),un(Sa);function fe(ce){T[ce]!==!0&&(h.enable(ce),T[ce]=!0)}function tn(ce){T[ce]!==!1&&(h.disable(ce),T[ce]=!1)}function Wt(ce,Ie){return P[ce]!==Ie?(h.bindFramebuffer(ce,Ie),P[ce]=Ie,s&&(ce===h.DRAW_FRAMEBUFFER&&(P[h.FRAMEBUFFER]=Ie),ce===h.FRAMEBUFFER&&(P[h.DRAW_FRAMEBUFFER]=Ie)),!0):!1}function mt(ce,Ie){let rt=L,xt=!1;if(ce)if(rt=N.get(Ie),rt===void 0&&(rt=[],N.set(Ie,rt)),ce.isWebGLMultipleRenderTargets){const Ct=ce.texture;if(rt.length!==Ct.length||rt[0]!==h.COLOR_ATTACHMENT0){for(let Un=0,Gn=Ct.length;Un<Gn;Un++)rt[Un]=h.COLOR_ATTACHMENT0+Un;rt.length=Ct.length,xt=!0}}else rt[0]!==h.COLOR_ATTACHMENT0&&(rt[0]=h.COLOR_ATTACHMENT0,xt=!0);else rt[0]!==h.BACK&&(rt[0]=h.BACK,xt=!0);xt&&(i.isWebGL2?h.drawBuffers(rt):t.get("WEBGL_draw_buffers").drawBuffersWEBGL(rt))}function Xt(ce){return D!==ce?(h.useProgram(ce),D=ce,!0):!1}const hn={[Vl]:h.FUNC_ADD,[R1]:h.FUNC_SUBTRACT,[C1]:h.FUNC_REVERSE_SUBTRACT};if(s)hn[G0]=h.MIN,hn[H0]=h.MAX;else{const ce=t.get("EXT_blend_minmax");ce!==null&&(hn[G0]=ce.MIN_EXT,hn[H0]=ce.MAX_EXT)}const Ft={[P1]:h.ZERO,[L1]:h.ONE,[D1]:h.SRC_COLOR,[Cv]:h.SRC_ALPHA,[B1]:h.SRC_ALPHA_SATURATE,[F1]:h.DST_COLOR,[I1]:h.DST_ALPHA,[U1]:h.ONE_MINUS_SRC_COLOR,[Pv]:h.ONE_MINUS_SRC_ALPHA,[O1]:h.ONE_MINUS_DST_COLOR,[N1]:h.ONE_MINUS_DST_ALPHA};function un(ce,Ie,rt,xt,Ct,Un,Gn,Si){if(ce===Sa){R===!0&&(tn(h.BLEND),R=!1);return}if(R===!1&&(fe(h.BLEND),R=!0),ce!==A1){if(ce!==W||Si!==B){if((V!==Vl||Q!==Vl)&&(h.blendEquation(h.FUNC_ADD),V=Vl,Q=Vl),Si)switch(ce){case Yl:h.blendFuncSeparate(h.ONE,h.ONE_MINUS_SRC_ALPHA,h.ONE,h.ONE_MINUS_SRC_ALPHA);break;case B0:h.blendFunc(h.ONE,h.ONE);break;case z0:h.blendFuncSeparate(h.ZERO,h.ONE_MINUS_SRC_COLOR,h.ZERO,h.ONE);break;case k0:h.blendFuncSeparate(h.ZERO,h.SRC_COLOR,h.ZERO,h.SRC_ALPHA);break;default:console.error("THREE.WebGLState: Invalid blending: ",ce);break}else switch(ce){case Yl:h.blendFuncSeparate(h.SRC_ALPHA,h.ONE_MINUS_SRC_ALPHA,h.ONE,h.ONE_MINUS_SRC_ALPHA);break;case B0:h.blendFunc(h.SRC_ALPHA,h.ONE);break;case z0:h.blendFuncSeparate(h.ZERO,h.ONE_MINUS_SRC_COLOR,h.ZERO,h.ONE);break;case k0:h.blendFunc(h.ZERO,h.SRC_COLOR);break;default:console.error("THREE.WebGLState: Invalid blending: ",ce);break}q=null,H=null,re=null,oe=null,W=ce,B=Si}return}Ct=Ct||Ie,Un=Un||rt,Gn=Gn||xt,(Ie!==V||Ct!==Q)&&(h.blendEquationSeparate(hn[Ie],hn[Ct]),V=Ie,Q=Ct),(rt!==q||xt!==H||Un!==re||Gn!==oe)&&(h.blendFuncSeparate(Ft[rt],Ft[xt],Ft[Un],Ft[Gn]),q=rt,H=xt,re=Un,oe=Gn),W=ce,B=!1}function Qn(ce,Ie){ce.side===Ks?tn(h.CULL_FACE):fe(h.CULL_FACE);let rt=ce.side===ur;Ie&&(rt=!rt),Kn(rt),ce.blending===Yl&&ce.transparent===!1?un(Sa):un(ce.blending,ce.blendEquation,ce.blendSrc,ce.blendDst,ce.blendEquationAlpha,ce.blendSrcAlpha,ce.blendDstAlpha,ce.premultipliedAlpha),v.setFunc(ce.depthFunc),v.setTest(ce.depthTest),v.setMask(ce.depthWrite),p.setMask(ce.colorWrite);const xt=ce.stencilWrite;x.setTest(xt),xt&&(x.setMask(ce.stencilWriteMask),x.setFunc(ce.stencilFunc,ce.stencilRef,ce.stencilFuncMask),x.setOp(ce.stencilFail,ce.stencilZFail,ce.stencilZPass)),dn(ce.polygonOffset,ce.polygonOffsetFactor,ce.polygonOffsetUnits),ce.alphaToCoverage===!0?fe(h.SAMPLE_ALPHA_TO_COVERAGE):tn(h.SAMPLE_ALPHA_TO_COVERAGE)}function Kn(ce){te!==ce&&(ce?h.frontFace(h.CW):h.frontFace(h.CCW),te=ce)}function ii(ce){ce!==b1?(fe(h.CULL_FACE),ce!==we&&(ce===O0?h.cullFace(h.BACK):ce===T1?h.cullFace(h.FRONT):h.cullFace(h.FRONT_AND_BACK))):tn(h.CULL_FACE),we=ce}function $n(ce){ce!==Ae&&(He&&h.lineWidth(ce),Ae=ce)}function dn(ce,Ie,rt){ce?(fe(h.POLYGON_OFFSET_FILL),(de!==Ie||xe!==rt)&&(h.polygonOffset(Ie,rt),de=Ie,xe=rt)):tn(h.POLYGON_OFFSET_FILL)}function Pn(ce){ce?fe(h.SCISSOR_TEST):tn(h.SCISSOR_TEST)}function li(ce){ce===void 0&&(ce=h.TEXTURE0+ye-1),nt!==ce&&(h.activeTexture(ce),nt=ce)}function ne(ce,Ie,rt){rt===void 0&&(nt===null?rt=h.TEXTURE0+ye-1:rt=nt);let xt=Ye[rt];xt===void 0&&(xt={type:void 0,texture:void 0},Ye[rt]=xt),(xt.type!==ce||xt.texture!==Ie)&&(nt!==rt&&(h.activeTexture(rt),nt=rt),h.bindTexture(ce,Ie||St[ce]),xt.type=ce,xt.texture=Ie)}function X(){const ce=Ye[nt];ce!==void 0&&ce.type!==void 0&&(h.bindTexture(ce.type,null),ce.type=void 0,ce.texture=void 0)}function Re(){try{h.compressedTexImage2D.apply(h,arguments)}catch(ce){console.error("THREE.WebGLState:",ce)}}function qe(){try{h.compressedTexImage3D.apply(h,arguments)}catch(ce){console.error("THREE.WebGLState:",ce)}}function it(){try{h.texSubImage2D.apply(h,arguments)}catch(ce){console.error("THREE.WebGLState:",ce)}}function st(){try{h.texSubImage3D.apply(h,arguments)}catch(ce){console.error("THREE.WebGLState:",ce)}}function ae(){try{h.compressedTexSubImage2D.apply(h,arguments)}catch(ce){console.error("THREE.WebGLState:",ce)}}function Xe(){try{h.compressedTexSubImage3D.apply(h,arguments)}catch(ce){console.error("THREE.WebGLState:",ce)}}function Ee(){try{h.texStorage2D.apply(h,arguments)}catch(ce){console.error("THREE.WebGLState:",ce)}}function yt(){try{h.texStorage3D.apply(h,arguments)}catch(ce){console.error("THREE.WebGLState:",ce)}}function ft(){try{h.texImage2D.apply(h,arguments)}catch(ce){console.error("THREE.WebGLState:",ce)}}function Nt(){try{h.texImage3D.apply(h,arguments)}catch(ce){console.error("THREE.WebGLState:",ce)}}function Tt(ce){Ce.equals(ce)===!1&&(h.scissor(ce.x,ce.y,ce.z,ce.w),Ce.copy(ce))}function wt(ce){ke.equals(ce)===!1&&(h.viewport(ce.x,ce.y,ce.z,ce.w),ke.copy(ce))}function sn(ce,Ie){let rt=b.get(Ie);rt===void 0&&(rt=new WeakMap,b.set(Ie,rt));let xt=rt.get(ce);xt===void 0&&(xt=h.getUniformBlockIndex(Ie,ce.name),rt.set(ce,xt))}function nn(ce,Ie){const xt=b.get(Ie).get(ce);M.get(Ie)!==xt&&(h.uniformBlockBinding(Ie,xt,ce.__bindingPointIndex),M.set(Ie,xt))}function ei(){h.disable(h.BLEND),h.disable(h.CULL_FACE),h.disable(h.DEPTH_TEST),h.disable(h.POLYGON_OFFSET_FILL),h.disable(h.SCISSOR_TEST),h.disable(h.STENCIL_TEST),h.disable(h.SAMPLE_ALPHA_TO_COVERAGE),h.blendEquation(h.FUNC_ADD),h.blendFunc(h.ONE,h.ZERO),h.blendFuncSeparate(h.ONE,h.ZERO,h.ONE,h.ZERO),h.colorMask(!0,!0,!0,!0),h.clearColor(0,0,0,0),h.depthMask(!0),h.depthFunc(h.LESS),h.clearDepth(1),h.stencilMask(4294967295),h.stencilFunc(h.ALWAYS,0,4294967295),h.stencilOp(h.KEEP,h.KEEP,h.KEEP),h.clearStencil(0),h.cullFace(h.BACK),h.frontFace(h.CCW),h.polygonOffset(0,0),h.activeTexture(h.TEXTURE0),h.bindFramebuffer(h.FRAMEBUFFER,null),s===!0&&(h.bindFramebuffer(h.DRAW_FRAMEBUFFER,null),h.bindFramebuffer(h.READ_FRAMEBUFFER,null)),h.useProgram(null),h.lineWidth(1),h.scissor(0,0,h.canvas.width,h.canvas.height),h.viewport(0,0,h.canvas.width,h.canvas.height),T={},nt=null,Ye={},P={},N=new WeakMap,L=[],D=null,R=!1,W=null,V=null,q=null,H=null,Q=null,re=null,oe=null,B=!1,te=null,we=null,Ae=null,de=null,xe=null,Ce.set(0,0,h.canvas.width,h.canvas.height),ke.set(0,0,h.canvas.width,h.canvas.height),p.reset(),v.reset(),x.reset()}return{buffers:{color:p,depth:v,stencil:x},enable:fe,disable:tn,bindFramebuffer:Wt,drawBuffers:mt,useProgram:Xt,setBlending:un,setMaterial:Qn,setFlipSided:Kn,setCullFace:ii,setLineWidth:$n,setPolygonOffset:dn,setScissorTest:Pn,activeTexture:li,bindTexture:ne,unbindTexture:X,compressedTexImage2D:Re,compressedTexImage3D:qe,texImage2D:ft,texImage3D:Nt,updateUBOMapping:sn,uniformBlockBinding:nn,texStorage2D:Ee,texStorage3D:yt,texSubImage2D:it,texSubImage3D:st,compressedTexSubImage2D:ae,compressedTexSubImage3D:Xe,scissor:Tt,viewport:wt,reset:ei}}function mD(h,t,i,s,o,f,m){const p=o.isWebGL2,v=o.maxTextures,x=o.maxCubemapSize,M=o.maxTextureSize,b=o.maxSamples,T=t.has("WEBGL_multisampled_render_to_texture")?t.get("WEBGL_multisampled_render_to_texture"):null,P=typeof navigator>"u"?!1:/OculusBrowser/g.test(navigator.userAgent),N=new WeakMap;let L;const D=new WeakMap;let R=!1;try{R=typeof OffscreenCanvas<"u"&&new OffscreenCanvas(1,1).getContext("2d")!==null}catch{}function W(ne,X){return R?new OffscreenCanvas(ne,X):Ef("canvas")}function V(ne,X,Re,qe){let it=1;if((ne.width>qe||ne.height>qe)&&(it=qe/Math.max(ne.width,ne.height)),it<1||X===!0)if(typeof HTMLImageElement<"u"&&ne instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&ne instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&ne instanceof ImageBitmap){const st=X?MR:Math.floor,ae=st(it*ne.width),Xe=st(it*ne.height);L===void 0&&(L=W(ae,Xe));const Ee=Re?W(ae,Xe):L;return Ee.width=ae,Ee.height=Xe,Ee.getContext("2d").drawImage(ne,0,0,ae,Xe),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+ne.width+"x"+ne.height+") to ("+ae+"x"+Xe+")."),Ee}else return"data"in ne&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+ne.width+"x"+ne.height+")."),ne;return ne}function q(ne){return px(ne.width)&&px(ne.height)}function H(ne){return p?!1:ne.wrapS!==os||ne.wrapT!==os||ne.minFilter!==rr&&ne.minFilter!==Or}function Q(ne,X){return ne.generateMipmaps&&X&&ne.minFilter!==rr&&ne.minFilter!==Or}function re(ne){h.generateMipmap(ne)}function oe(ne,X,Re,qe,it=!1){if(p===!1)return X;if(ne!==null){if(h[ne]!==void 0)return h[ne];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+ne+"'")}let st=X;return X===h.RED&&(Re===h.FLOAT&&(st=h.R32F),Re===h.HALF_FLOAT&&(st=h.R16F),Re===h.UNSIGNED_BYTE&&(st=h.R8)),X===h.RG&&(Re===h.FLOAT&&(st=h.RG32F),Re===h.HALF_FLOAT&&(st=h.RG16F),Re===h.UNSIGNED_BYTE&&(st=h.RG8)),X===h.RGBA&&(Re===h.FLOAT&&(st=h.RGBA32F),Re===h.HALF_FLOAT&&(st=h.RGBA16F),Re===h.UNSIGNED_BYTE&&(st=qe===vn&&it===!1?h.SRGB8_ALPHA8:h.RGBA8),Re===h.UNSIGNED_SHORT_4_4_4_4&&(st=h.RGBA4),Re===h.UNSIGNED_SHORT_5_5_5_1&&(st=h.RGB5_A1)),(st===h.R16F||st===h.R32F||st===h.RG16F||st===h.RG32F||st===h.RGBA16F||st===h.RGBA32F)&&t.get("EXT_color_buffer_float"),st}function B(ne,X,Re){return Q(ne,Re)===!0||ne.isFramebufferTexture&&ne.minFilter!==rr&&ne.minFilter!==Or?Math.log2(Math.max(X.width,X.height))+1:ne.mipmaps!==void 0&&ne.mipmaps.length>0?ne.mipmaps.length:ne.isCompressedTexture&&Array.isArray(ne.image)?X.mipmaps.length:1}function te(ne){return ne===rr||ne===V0||ne===up?h.NEAREST:h.LINEAR}function we(ne){const X=ne.target;X.removeEventListener("dispose",we),de(X),X.isVideoTexture&&N.delete(X)}function Ae(ne){const X=ne.target;X.removeEventListener("dispose",Ae),ye(X)}function de(ne){const X=s.get(ne);if(X.__webglInit===void 0)return;const Re=ne.source,qe=D.get(Re);if(qe){const it=qe[X.__cacheKey];it.usedTimes--,it.usedTimes===0&&xe(ne),Object.keys(qe).length===0&&D.delete(Re)}s.remove(ne)}function xe(ne){const X=s.get(ne);h.deleteTexture(X.__webglTexture);const Re=ne.source,qe=D.get(Re);delete qe[X.__cacheKey],m.memory.textures--}function ye(ne){const X=ne.texture,Re=s.get(ne),qe=s.get(X);if(qe.__webglTexture!==void 0&&(h.deleteTexture(qe.__webglTexture),m.memory.textures--),ne.depthTexture&&ne.depthTexture.dispose(),ne.isWebGLCubeRenderTarget)for(let it=0;it<6;it++)h.deleteFramebuffer(Re.__webglFramebuffer[it]),Re.__webglDepthbuffer&&h.deleteRenderbuffer(Re.__webglDepthbuffer[it]);else{if(h.deleteFramebuffer(Re.__webglFramebuffer),Re.__webglDepthbuffer&&h.deleteRenderbuffer(Re.__webglDepthbuffer),Re.__webglMultisampledFramebuffer&&h.deleteFramebuffer(Re.__webglMultisampledFramebuffer),Re.__webglColorRenderbuffer)for(let it=0;it<Re.__webglColorRenderbuffer.length;it++)Re.__webglColorRenderbuffer[it]&&h.deleteRenderbuffer(Re.__webglColorRenderbuffer[it]);Re.__webglDepthRenderbuffer&&h.deleteRenderbuffer(Re.__webglDepthRenderbuffer)}if(ne.isWebGLMultipleRenderTargets)for(let it=0,st=X.length;it<st;it++){const ae=s.get(X[it]);ae.__webglTexture&&(h.deleteTexture(ae.__webglTexture),m.memory.textures--),s.remove(X[it])}s.remove(X),s.remove(ne)}let He=0;function be(){He=0}function Le(){const ne=He;return ne>=v&&console.warn("THREE.WebGLTextures: Trying to use "+ne+" texture units while this GPU supports only "+v),He+=1,ne}function nt(ne){const X=[];return X.push(ne.wrapS),X.push(ne.wrapT),X.push(ne.wrapR||0),X.push(ne.magFilter),X.push(ne.minFilter),X.push(ne.anisotropy),X.push(ne.internalFormat),X.push(ne.format),X.push(ne.type),X.push(ne.generateMipmaps),X.push(ne.premultiplyAlpha),X.push(ne.flipY),X.push(ne.unpackAlignment),X.push(ne.colorSpace),X.join()}function Ye(ne,X){const Re=s.get(ne);if(ne.isVideoTexture&&Pn(ne),ne.isRenderTargetTexture===!1&&ne.version>0&&Re.__version!==ne.version){const qe=ne.image;if(qe===null)console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");else if(qe.complete===!1)console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");else{tn(Re,ne,X);return}}i.bindTexture(h.TEXTURE_2D,Re.__webglTexture,h.TEXTURE0+X)}function It(ne,X){const Re=s.get(ne);if(ne.version>0&&Re.__version!==ne.version){tn(Re,ne,X);return}i.bindTexture(h.TEXTURE_2D_ARRAY,Re.__webglTexture,h.TEXTURE0+X)}function lt(ne,X){const Re=s.get(ne);if(ne.version>0&&Re.__version!==ne.version){tn(Re,ne,X);return}i.bindTexture(h.TEXTURE_3D,Re.__webglTexture,h.TEXTURE0+X)}function Ce(ne,X){const Re=s.get(ne);if(ne.version>0&&Re.__version!==ne.version){Wt(Re,ne,X);return}i.bindTexture(h.TEXTURE_CUBE_MAP,Re.__webglTexture,h.TEXTURE0+X)}const ke={[im]:h.REPEAT,[os]:h.CLAMP_TO_EDGE,[rm]:h.MIRRORED_REPEAT},ut={[rr]:h.NEAREST,[V0]:h.NEAREST_MIPMAP_NEAREST,[up]:h.NEAREST_MIPMAP_LINEAR,[Or]:h.LINEAR,[Q1]:h.LINEAR_MIPMAP_NEAREST,[Eh]:h.LINEAR_MIPMAP_LINEAR};function St(ne,X,Re){if(Re?(h.texParameteri(ne,h.TEXTURE_WRAP_S,ke[X.wrapS]),h.texParameteri(ne,h.TEXTURE_WRAP_T,ke[X.wrapT]),(ne===h.TEXTURE_3D||ne===h.TEXTURE_2D_ARRAY)&&h.texParameteri(ne,h.TEXTURE_WRAP_R,ke[X.wrapR]),h.texParameteri(ne,h.TEXTURE_MAG_FILTER,ut[X.magFilter]),h.texParameteri(ne,h.TEXTURE_MIN_FILTER,ut[X.minFilter])):(h.texParameteri(ne,h.TEXTURE_WRAP_S,h.CLAMP_TO_EDGE),h.texParameteri(ne,h.TEXTURE_WRAP_T,h.CLAMP_TO_EDGE),(ne===h.TEXTURE_3D||ne===h.TEXTURE_2D_ARRAY)&&h.texParameteri(ne,h.TEXTURE_WRAP_R,h.CLAMP_TO_EDGE),(X.wrapS!==os||X.wrapT!==os)&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."),h.texParameteri(ne,h.TEXTURE_MAG_FILTER,te(X.magFilter)),h.texParameteri(ne,h.TEXTURE_MIN_FILTER,te(X.minFilter)),X.minFilter!==rr&&X.minFilter!==Or&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")),t.has("EXT_texture_filter_anisotropic")===!0){const qe=t.get("EXT_texture_filter_anisotropic");if(X.magFilter===rr||X.minFilter!==up&&X.minFilter!==Eh||X.type===xo&&t.has("OES_texture_float_linear")===!1||p===!1&&X.type===bh&&t.has("OES_texture_half_float_linear")===!1)return;(X.anisotropy>1||s.get(X).__currentAnisotropy)&&(h.texParameterf(ne,qe.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(X.anisotropy,o.getMaxAnisotropy())),s.get(X).__currentAnisotropy=X.anisotropy)}}function fe(ne,X){let Re=!1;ne.__webglInit===void 0&&(ne.__webglInit=!0,X.addEventListener("dispose",we));const qe=X.source;let it=D.get(qe);it===void 0&&(it={},D.set(qe,it));const st=nt(X);if(st!==ne.__cacheKey){it[st]===void 0&&(it[st]={texture:h.createTexture(),usedTimes:0},m.memory.textures++,Re=!0),it[st].usedTimes++;const ae=it[ne.__cacheKey];ae!==void 0&&(it[ne.__cacheKey].usedTimes--,ae.usedTimes===0&&xe(X)),ne.__cacheKey=st,ne.__webglTexture=it[st].texture}return Re}function tn(ne,X,Re){let qe=h.TEXTURE_2D;(X.isDataArrayTexture||X.isCompressedArrayTexture)&&(qe=h.TEXTURE_2D_ARRAY),X.isData3DTexture&&(qe=h.TEXTURE_3D);const it=fe(ne,X),st=X.source;i.bindTexture(qe,ne.__webglTexture,h.TEXTURE0+Re);const ae=s.get(st);if(st.version!==ae.__version||it===!0){i.activeTexture(h.TEXTURE0+Re),h.pixelStorei(h.UNPACK_FLIP_Y_WEBGL,X.flipY),h.pixelStorei(h.UNPACK_PREMULTIPLY_ALPHA_WEBGL,X.premultiplyAlpha),h.pixelStorei(h.UNPACK_ALIGNMENT,X.unpackAlignment),h.pixelStorei(h.UNPACK_COLORSPACE_CONVERSION_WEBGL,h.NONE);const Xe=H(X)&&q(X.image)===!1;let Ee=V(X.image,Xe,!1,M);Ee=li(X,Ee);const yt=q(Ee)||p,ft=f.convert(X.format,X.colorSpace);let Nt=f.convert(X.type),Tt=oe(X.internalFormat,ft,Nt,X.colorSpace);St(qe,X,yt);let wt;const sn=X.mipmaps,nn=p&&X.isVideoTexture!==!0,ei=ae.__version===void 0||it===!0,ce=B(X,Ee,yt);if(X.isDepthTexture)Tt=h.DEPTH_COMPONENT,p?X.type===xo?Tt=h.DEPTH_COMPONENT32F:X.type===_o?Tt=h.DEPTH_COMPONENT24:X.type===Zl?Tt=h.DEPTH24_STENCIL8:Tt=h.DEPTH_COMPONENT16:X.type===xo&&console.error("WebGLRenderer: Floating point depth texture requires WebGL2."),X.format===yo&&Tt===h.DEPTH_COMPONENT&&X.type!==Uv&&X.type!==_o&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),X.type=_o,Nt=f.convert(X.type)),X.format===tc&&Tt===h.DEPTH_COMPONENT&&(Tt=h.DEPTH_STENCIL,X.type!==Zl&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),X.type=Zl,Nt=f.convert(X.type))),ei&&(nn?i.texStorage2D(h.TEXTURE_2D,1,Tt,Ee.width,Ee.height):i.texImage2D(h.TEXTURE_2D,0,Tt,Ee.width,Ee.height,0,ft,Nt,null));else if(X.isDataTexture)if(sn.length>0&&yt){nn&&ei&&i.texStorage2D(h.TEXTURE_2D,ce,Tt,sn[0].width,sn[0].height);for(let Ie=0,rt=sn.length;Ie<rt;Ie++)wt=sn[Ie],nn?i.texSubImage2D(h.TEXTURE_2D,Ie,0,0,wt.width,wt.height,ft,Nt,wt.data):i.texImage2D(h.TEXTURE_2D,Ie,Tt,wt.width,wt.height,0,ft,Nt,wt.data);X.generateMipmaps=!1}else nn?(ei&&i.texStorage2D(h.TEXTURE_2D,ce,Tt,Ee.width,Ee.height),i.texSubImage2D(h.TEXTURE_2D,0,0,0,Ee.width,Ee.height,ft,Nt,Ee.data)):i.texImage2D(h.TEXTURE_2D,0,Tt,Ee.width,Ee.height,0,ft,Nt,Ee.data);else if(X.isCompressedTexture)if(X.isCompressedArrayTexture){nn&&ei&&i.texStorage3D(h.TEXTURE_2D_ARRAY,ce,Tt,sn[0].width,sn[0].height,Ee.depth);for(let Ie=0,rt=sn.length;Ie<rt;Ie++)wt=sn[Ie],X.format!==ls?ft!==null?nn?i.compressedTexSubImage3D(h.TEXTURE_2D_ARRAY,Ie,0,0,0,wt.width,wt.height,Ee.depth,ft,wt.data,0,0):i.compressedTexImage3D(h.TEXTURE_2D_ARRAY,Ie,Tt,wt.width,wt.height,Ee.depth,0,wt.data,0,0):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):nn?i.texSubImage3D(h.TEXTURE_2D_ARRAY,Ie,0,0,0,wt.width,wt.height,Ee.depth,ft,Nt,wt.data):i.texImage3D(h.TEXTURE_2D_ARRAY,Ie,Tt,wt.width,wt.height,Ee.depth,0,ft,Nt,wt.data)}else{nn&&ei&&i.texStorage2D(h.TEXTURE_2D,ce,Tt,sn[0].width,sn[0].height);for(let Ie=0,rt=sn.length;Ie<rt;Ie++)wt=sn[Ie],X.format!==ls?ft!==null?nn?i.compressedTexSubImage2D(h.TEXTURE_2D,Ie,0,0,wt.width,wt.height,ft,wt.data):i.compressedTexImage2D(h.TEXTURE_2D,Ie,Tt,wt.width,wt.height,0,wt.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):nn?i.texSubImage2D(h.TEXTURE_2D,Ie,0,0,wt.width,wt.height,ft,Nt,wt.data):i.texImage2D(h.TEXTURE_2D,Ie,Tt,wt.width,wt.height,0,ft,Nt,wt.data)}else if(X.isDataArrayTexture)nn?(ei&&i.texStorage3D(h.TEXTURE_2D_ARRAY,ce,Tt,Ee.width,Ee.height,Ee.depth),i.texSubImage3D(h.TEXTURE_2D_ARRAY,0,0,0,0,Ee.width,Ee.height,Ee.depth,ft,Nt,Ee.data)):i.texImage3D(h.TEXTURE_2D_ARRAY,0,Tt,Ee.width,Ee.height,Ee.depth,0,ft,Nt,Ee.data);else if(X.isData3DTexture)nn?(ei&&i.texStorage3D(h.TEXTURE_3D,ce,Tt,Ee.width,Ee.height,Ee.depth),i.texSubImage3D(h.TEXTURE_3D,0,0,0,0,Ee.width,Ee.height,Ee.depth,ft,Nt,Ee.data)):i.texImage3D(h.TEXTURE_3D,0,Tt,Ee.width,Ee.height,Ee.depth,0,ft,Nt,Ee.data);else if(X.isFramebufferTexture){if(ei)if(nn)i.texStorage2D(h.TEXTURE_2D,ce,Tt,Ee.width,Ee.height);else{let Ie=Ee.width,rt=Ee.height;for(let xt=0;xt<ce;xt++)i.texImage2D(h.TEXTURE_2D,xt,Tt,Ie,rt,0,ft,Nt,null),Ie>>=1,rt>>=1}}else if(sn.length>0&&yt){nn&&ei&&i.texStorage2D(h.TEXTURE_2D,ce,Tt,sn[0].width,sn[0].height);for(let Ie=0,rt=sn.length;Ie<rt;Ie++)wt=sn[Ie],nn?i.texSubImage2D(h.TEXTURE_2D,Ie,0,0,ft,Nt,wt):i.texImage2D(h.TEXTURE_2D,Ie,Tt,ft,Nt,wt);X.generateMipmaps=!1}else nn?(ei&&i.texStorage2D(h.TEXTURE_2D,ce,Tt,Ee.width,Ee.height),i.texSubImage2D(h.TEXTURE_2D,0,0,0,ft,Nt,Ee)):i.texImage2D(h.TEXTURE_2D,0,Tt,ft,Nt,Ee);Q(X,yt)&&re(qe),ae.__version=st.version,X.onUpdate&&X.onUpdate(X)}ne.__version=X.version}function Wt(ne,X,Re){if(X.image.length!==6)return;const qe=fe(ne,X),it=X.source;i.bindTexture(h.TEXTURE_CUBE_MAP,ne.__webglTexture,h.TEXTURE0+Re);const st=s.get(it);if(it.version!==st.__version||qe===!0){i.activeTexture(h.TEXTURE0+Re),h.pixelStorei(h.UNPACK_FLIP_Y_WEBGL,X.flipY),h.pixelStorei(h.UNPACK_PREMULTIPLY_ALPHA_WEBGL,X.premultiplyAlpha),h.pixelStorei(h.UNPACK_ALIGNMENT,X.unpackAlignment),h.pixelStorei(h.UNPACK_COLORSPACE_CONVERSION_WEBGL,h.NONE);const ae=X.isCompressedTexture||X.image[0].isCompressedTexture,Xe=X.image[0]&&X.image[0].isDataTexture,Ee=[];for(let Ie=0;Ie<6;Ie++)!ae&&!Xe?Ee[Ie]=V(X.image[Ie],!1,!0,x):Ee[Ie]=Xe?X.image[Ie].image:X.image[Ie],Ee[Ie]=li(X,Ee[Ie]);const yt=Ee[0],ft=q(yt)||p,Nt=f.convert(X.format,X.colorSpace),Tt=f.convert(X.type),wt=oe(X.internalFormat,Nt,Tt,X.colorSpace),sn=p&&X.isVideoTexture!==!0,nn=st.__version===void 0||qe===!0;let ei=B(X,yt,ft);St(h.TEXTURE_CUBE_MAP,X,ft);let ce;if(ae){sn&&nn&&i.texStorage2D(h.TEXTURE_CUBE_MAP,ei,wt,yt.width,yt.height);for(let Ie=0;Ie<6;Ie++){ce=Ee[Ie].mipmaps;for(let rt=0;rt<ce.length;rt++){const xt=ce[rt];X.format!==ls?Nt!==null?sn?i.compressedTexSubImage2D(h.TEXTURE_CUBE_MAP_POSITIVE_X+Ie,rt,0,0,xt.width,xt.height,Nt,xt.data):i.compressedTexImage2D(h.TEXTURE_CUBE_MAP_POSITIVE_X+Ie,rt,wt,xt.width,xt.height,0,xt.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):sn?i.texSubImage2D(h.TEXTURE_CUBE_MAP_POSITIVE_X+Ie,rt,0,0,xt.width,xt.height,Nt,Tt,xt.data):i.texImage2D(h.TEXTURE_CUBE_MAP_POSITIVE_X+Ie,rt,wt,xt.width,xt.height,0,Nt,Tt,xt.data)}}}else{ce=X.mipmaps,sn&&nn&&(ce.length>0&&ei++,i.texStorage2D(h.TEXTURE_CUBE_MAP,ei,wt,Ee[0].width,Ee[0].height));for(let Ie=0;Ie<6;Ie++)if(Xe){sn?i.texSubImage2D(h.TEXTURE_CUBE_MAP_POSITIVE_X+Ie,0,0,0,Ee[Ie].width,Ee[Ie].height,Nt,Tt,Ee[Ie].data):i.texImage2D(h.TEXTURE_CUBE_MAP_POSITIVE_X+Ie,0,wt,Ee[Ie].width,Ee[Ie].height,0,Nt,Tt,Ee[Ie].data);for(let rt=0;rt<ce.length;rt++){const Ct=ce[rt].image[Ie].image;sn?i.texSubImage2D(h.TEXTURE_CUBE_MAP_POSITIVE_X+Ie,rt+1,0,0,Ct.width,Ct.height,Nt,Tt,Ct.data):i.texImage2D(h.TEXTURE_CUBE_MAP_POSITIVE_X+Ie,rt+1,wt,Ct.width,Ct.height,0,Nt,Tt,Ct.data)}}else{sn?i.texSubImage2D(h.TEXTURE_CUBE_MAP_POSITIVE_X+Ie,0,0,0,Nt,Tt,Ee[Ie]):i.texImage2D(h.TEXTURE_CUBE_MAP_POSITIVE_X+Ie,0,wt,Nt,Tt,Ee[Ie]);for(let rt=0;rt<ce.length;rt++){const xt=ce[rt];sn?i.texSubImage2D(h.TEXTURE_CUBE_MAP_POSITIVE_X+Ie,rt+1,0,0,Nt,Tt,xt.image[Ie]):i.texImage2D(h.TEXTURE_CUBE_MAP_POSITIVE_X+Ie,rt+1,wt,Nt,Tt,xt.image[Ie])}}}Q(X,ft)&&re(h.TEXTURE_CUBE_MAP),st.__version=it.version,X.onUpdate&&X.onUpdate(X)}ne.__version=X.version}function mt(ne,X,Re,qe,it){const st=f.convert(Re.format,Re.colorSpace),ae=f.convert(Re.type),Xe=oe(Re.internalFormat,st,ae,Re.colorSpace);s.get(X).__hasExternalTextures||(it===h.TEXTURE_3D||it===h.TEXTURE_2D_ARRAY?i.texImage3D(it,0,Xe,X.width,X.height,X.depth,0,st,ae,null):i.texImage2D(it,0,Xe,X.width,X.height,0,st,ae,null)),i.bindFramebuffer(h.FRAMEBUFFER,ne),dn(X)?T.framebufferTexture2DMultisampleEXT(h.FRAMEBUFFER,qe,it,s.get(Re).__webglTexture,0,$n(X)):(it===h.TEXTURE_2D||it>=h.TEXTURE_CUBE_MAP_POSITIVE_X&&it<=h.TEXTURE_CUBE_MAP_NEGATIVE_Z)&&h.framebufferTexture2D(h.FRAMEBUFFER,qe,it,s.get(Re).__webglTexture,0),i.bindFramebuffer(h.FRAMEBUFFER,null)}function Xt(ne,X,Re){if(h.bindRenderbuffer(h.RENDERBUFFER,ne),X.depthBuffer&&!X.stencilBuffer){let qe=h.DEPTH_COMPONENT16;if(Re||dn(X)){const it=X.depthTexture;it&&it.isDepthTexture&&(it.type===xo?qe=h.DEPTH_COMPONENT32F:it.type===_o&&(qe=h.DEPTH_COMPONENT24));const st=$n(X);dn(X)?T.renderbufferStorageMultisampleEXT(h.RENDERBUFFER,st,qe,X.width,X.height):h.renderbufferStorageMultisample(h.RENDERBUFFER,st,qe,X.width,X.height)}else h.renderbufferStorage(h.RENDERBUFFER,qe,X.width,X.height);h.framebufferRenderbuffer(h.FRAMEBUFFER,h.DEPTH_ATTACHMENT,h.RENDERBUFFER,ne)}else if(X.depthBuffer&&X.stencilBuffer){const qe=$n(X);Re&&dn(X)===!1?h.renderbufferStorageMultisample(h.RENDERBUFFER,qe,h.DEPTH24_STENCIL8,X.width,X.height):dn(X)?T.renderbufferStorageMultisampleEXT(h.RENDERBUFFER,qe,h.DEPTH24_STENCIL8,X.width,X.height):h.renderbufferStorage(h.RENDERBUFFER,h.DEPTH_STENCIL,X.width,X.height),h.framebufferRenderbuffer(h.FRAMEBUFFER,h.DEPTH_STENCIL_ATTACHMENT,h.RENDERBUFFER,ne)}else{const qe=X.isWebGLMultipleRenderTargets===!0?X.texture:[X.texture];for(let it=0;it<qe.length;it++){const st=qe[it],ae=f.convert(st.format,st.colorSpace),Xe=f.convert(st.type),Ee=oe(st.internalFormat,ae,Xe,st.colorSpace),yt=$n(X);Re&&dn(X)===!1?h.renderbufferStorageMultisample(h.RENDERBUFFER,yt,Ee,X.width,X.height):dn(X)?T.renderbufferStorageMultisampleEXT(h.RENDERBUFFER,yt,Ee,X.width,X.height):h.renderbufferStorage(h.RENDERBUFFER,Ee,X.width,X.height)}}h.bindRenderbuffer(h.RENDERBUFFER,null)}function hn(ne,X){if(X&&X.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(i.bindFramebuffer(h.FRAMEBUFFER,ne),!(X.depthTexture&&X.depthTexture.isDepthTexture))throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");(!s.get(X.depthTexture).__webglTexture||X.depthTexture.image.width!==X.width||X.depthTexture.image.height!==X.height)&&(X.depthTexture.image.width=X.width,X.depthTexture.image.height=X.height,X.depthTexture.needsUpdate=!0),Ye(X.depthTexture,0);const qe=s.get(X.depthTexture).__webglTexture,it=$n(X);if(X.depthTexture.format===yo)dn(X)?T.framebufferTexture2DMultisampleEXT(h.FRAMEBUFFER,h.DEPTH_ATTACHMENT,h.TEXTURE_2D,qe,0,it):h.framebufferTexture2D(h.FRAMEBUFFER,h.DEPTH_ATTACHMENT,h.TEXTURE_2D,qe,0);else if(X.depthTexture.format===tc)dn(X)?T.framebufferTexture2DMultisampleEXT(h.FRAMEBUFFER,h.DEPTH_STENCIL_ATTACHMENT,h.TEXTURE_2D,qe,0,it):h.framebufferTexture2D(h.FRAMEBUFFER,h.DEPTH_STENCIL_ATTACHMENT,h.TEXTURE_2D,qe,0);else throw new Error("Unknown depthTexture format")}function Ft(ne){const X=s.get(ne),Re=ne.isWebGLCubeRenderTarget===!0;if(ne.depthTexture&&!X.__autoAllocateDepthBuffer){if(Re)throw new Error("target.depthTexture not supported in Cube render targets");hn(X.__webglFramebuffer,ne)}else if(Re){X.__webglDepthbuffer=[];for(let qe=0;qe<6;qe++)i.bindFramebuffer(h.FRAMEBUFFER,X.__webglFramebuffer[qe]),X.__webglDepthbuffer[qe]=h.createRenderbuffer(),Xt(X.__webglDepthbuffer[qe],ne,!1)}else i.bindFramebuffer(h.FRAMEBUFFER,X.__webglFramebuffer),X.__webglDepthbuffer=h.createRenderbuffer(),Xt(X.__webglDepthbuffer,ne,!1);i.bindFramebuffer(h.FRAMEBUFFER,null)}function un(ne,X,Re){const qe=s.get(ne);X!==void 0&&mt(qe.__webglFramebuffer,ne,ne.texture,h.COLOR_ATTACHMENT0,h.TEXTURE_2D),Re!==void 0&&Ft(ne)}function Qn(ne){const X=ne.texture,Re=s.get(ne),qe=s.get(X);ne.addEventListener("dispose",Ae),ne.isWebGLMultipleRenderTargets!==!0&&(qe.__webglTexture===void 0&&(qe.__webglTexture=h.createTexture()),qe.__version=X.version,m.memory.textures++);const it=ne.isWebGLCubeRenderTarget===!0,st=ne.isWebGLMultipleRenderTargets===!0,ae=q(ne)||p;if(it){Re.__webglFramebuffer=[];for(let Xe=0;Xe<6;Xe++)Re.__webglFramebuffer[Xe]=h.createFramebuffer()}else{if(Re.__webglFramebuffer=h.createFramebuffer(),st)if(o.drawBuffers){const Xe=ne.texture;for(let Ee=0,yt=Xe.length;Ee<yt;Ee++){const ft=s.get(Xe[Ee]);ft.__webglTexture===void 0&&(ft.__webglTexture=h.createTexture(),m.memory.textures++)}}else console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.");if(p&&ne.samples>0&&dn(ne)===!1){const Xe=st?X:[X];Re.__webglMultisampledFramebuffer=h.createFramebuffer(),Re.__webglColorRenderbuffer=[],i.bindFramebuffer(h.FRAMEBUFFER,Re.__webglMultisampledFramebuffer);for(let Ee=0;Ee<Xe.length;Ee++){const yt=Xe[Ee];Re.__webglColorRenderbuffer[Ee]=h.createRenderbuffer(),h.bindRenderbuffer(h.RENDERBUFFER,Re.__webglColorRenderbuffer[Ee]);const ft=f.convert(yt.format,yt.colorSpace),Nt=f.convert(yt.type),Tt=oe(yt.internalFormat,ft,Nt,yt.colorSpace,ne.isXRRenderTarget===!0),wt=$n(ne);h.renderbufferStorageMultisample(h.RENDERBUFFER,wt,Tt,ne.width,ne.height),h.framebufferRenderbuffer(h.FRAMEBUFFER,h.COLOR_ATTACHMENT0+Ee,h.RENDERBUFFER,Re.__webglColorRenderbuffer[Ee])}h.bindRenderbuffer(h.RENDERBUFFER,null),ne.depthBuffer&&(Re.__webglDepthRenderbuffer=h.createRenderbuffer(),Xt(Re.__webglDepthRenderbuffer,ne,!0)),i.bindFramebuffer(h.FRAMEBUFFER,null)}}if(it){i.bindTexture(h.TEXTURE_CUBE_MAP,qe.__webglTexture),St(h.TEXTURE_CUBE_MAP,X,ae);for(let Xe=0;Xe<6;Xe++)mt(Re.__webglFramebuffer[Xe],ne,X,h.COLOR_ATTACHMENT0,h.TEXTURE_CUBE_MAP_POSITIVE_X+Xe);Q(X,ae)&&re(h.TEXTURE_CUBE_MAP),i.unbindTexture()}else if(st){const Xe=ne.texture;for(let Ee=0,yt=Xe.length;Ee<yt;Ee++){const ft=Xe[Ee],Nt=s.get(ft);i.bindTexture(h.TEXTURE_2D,Nt.__webglTexture),St(h.TEXTURE_2D,ft,ae),mt(Re.__webglFramebuffer,ne,ft,h.COLOR_ATTACHMENT0+Ee,h.TEXTURE_2D),Q(ft,ae)&&re(h.TEXTURE_2D)}i.unbindTexture()}else{let Xe=h.TEXTURE_2D;(ne.isWebGL3DRenderTarget||ne.isWebGLArrayRenderTarget)&&(p?Xe=ne.isWebGL3DRenderTarget?h.TEXTURE_3D:h.TEXTURE_2D_ARRAY:console.error("THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.")),i.bindTexture(Xe,qe.__webglTexture),St(Xe,X,ae),mt(Re.__webglFramebuffer,ne,X,h.COLOR_ATTACHMENT0,Xe),Q(X,ae)&&re(Xe),i.unbindTexture()}ne.depthBuffer&&Ft(ne)}function Kn(ne){const X=q(ne)||p,Re=ne.isWebGLMultipleRenderTargets===!0?ne.texture:[ne.texture];for(let qe=0,it=Re.length;qe<it;qe++){const st=Re[qe];if(Q(st,X)){const ae=ne.isWebGLCubeRenderTarget?h.TEXTURE_CUBE_MAP:h.TEXTURE_2D,Xe=s.get(st).__webglTexture;i.bindTexture(ae,Xe),re(ae),i.unbindTexture()}}}function ii(ne){if(p&&ne.samples>0&&dn(ne)===!1){const X=ne.isWebGLMultipleRenderTargets?ne.texture:[ne.texture],Re=ne.width,qe=ne.height;let it=h.COLOR_BUFFER_BIT;const st=[],ae=ne.stencilBuffer?h.DEPTH_STENCIL_ATTACHMENT:h.DEPTH_ATTACHMENT,Xe=s.get(ne),Ee=ne.isWebGLMultipleRenderTargets===!0;if(Ee)for(let yt=0;yt<X.length;yt++)i.bindFramebuffer(h.FRAMEBUFFER,Xe.__webglMultisampledFramebuffer),h.framebufferRenderbuffer(h.FRAMEBUFFER,h.COLOR_ATTACHMENT0+yt,h.RENDERBUFFER,null),i.bindFramebuffer(h.FRAMEBUFFER,Xe.__webglFramebuffer),h.framebufferTexture2D(h.DRAW_FRAMEBUFFER,h.COLOR_ATTACHMENT0+yt,h.TEXTURE_2D,null,0);i.bindFramebuffer(h.READ_FRAMEBUFFER,Xe.__webglMultisampledFramebuffer),i.bindFramebuffer(h.DRAW_FRAMEBUFFER,Xe.__webglFramebuffer);for(let yt=0;yt<X.length;yt++){st.push(h.COLOR_ATTACHMENT0+yt),ne.depthBuffer&&st.push(ae);const ft=Xe.__ignoreDepthValues!==void 0?Xe.__ignoreDepthValues:!1;if(ft===!1&&(ne.depthBuffer&&(it|=h.DEPTH_BUFFER_BIT),ne.stencilBuffer&&(it|=h.STENCIL_BUFFER_BIT)),Ee&&h.framebufferRenderbuffer(h.READ_FRAMEBUFFER,h.COLOR_ATTACHMENT0,h.RENDERBUFFER,Xe.__webglColorRenderbuffer[yt]),ft===!0&&(h.invalidateFramebuffer(h.READ_FRAMEBUFFER,[ae]),h.invalidateFramebuffer(h.DRAW_FRAMEBUFFER,[ae])),Ee){const Nt=s.get(X[yt]).__webglTexture;h.framebufferTexture2D(h.DRAW_FRAMEBUFFER,h.COLOR_ATTACHMENT0,h.TEXTURE_2D,Nt,0)}h.blitFramebuffer(0,0,Re,qe,0,0,Re,qe,it,h.NEAREST),P&&h.invalidateFramebuffer(h.READ_FRAMEBUFFER,st)}if(i.bindFramebuffer(h.READ_FRAMEBUFFER,null),i.bindFramebuffer(h.DRAW_FRAMEBUFFER,null),Ee)for(let yt=0;yt<X.length;yt++){i.bindFramebuffer(h.FRAMEBUFFER,Xe.__webglMultisampledFramebuffer),h.framebufferRenderbuffer(h.FRAMEBUFFER,h.COLOR_ATTACHMENT0+yt,h.RENDERBUFFER,Xe.__webglColorRenderbuffer[yt]);const ft=s.get(X[yt]).__webglTexture;i.bindFramebuffer(h.FRAMEBUFFER,Xe.__webglFramebuffer),h.framebufferTexture2D(h.DRAW_FRAMEBUFFER,h.COLOR_ATTACHMENT0+yt,h.TEXTURE_2D,ft,0)}i.bindFramebuffer(h.DRAW_FRAMEBUFFER,Xe.__webglMultisampledFramebuffer)}}function $n(ne){return Math.min(b,ne.samples)}function dn(ne){const X=s.get(ne);return p&&ne.samples>0&&t.has("WEBGL_multisampled_render_to_texture")===!0&&X.__useRenderToTexture!==!1}function Pn(ne){const X=m.render.frame;N.get(ne)!==X&&(N.set(ne,X),ne.update())}function li(ne,X){const Re=ne.colorSpace,qe=ne.format,it=ne.type;return ne.isCompressedTexture===!0||ne.format===sm||Re!==bs&&Re!==So&&(Re===vn?p===!1?t.has("EXT_sRGB")===!0&&qe===ls?(ne.format=sm,ne.minFilter=Or,ne.generateMipmaps=!1):X=Ov.sRGBToLinear(X):(qe!==ls||it!==wo)&&console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType."):console.error("THREE.WebGLTextures: Unsupported texture color space:",Re)),X}this.allocateTextureUnit=Le,this.resetTextureUnits=be,this.setTexture2D=Ye,this.setTexture2DArray=It,this.setTexture3D=lt,this.setTextureCube=Ce,this.rebindTextures=un,this.setupRenderTarget=Qn,this.updateRenderTargetMipmap=Kn,this.updateMultisampleRenderTarget=ii,this.setupDepthRenderbuffer=Ft,this.setupFrameBufferTexture=mt,this.useMultisampledRTT=dn}function gD(h,t,i){const s=i.isWebGL2;function o(f,m=So){let p;if(f===wo)return h.UNSIGNED_BYTE;if(f===iR)return h.UNSIGNED_SHORT_4_4_4_4;if(f===rR)return h.UNSIGNED_SHORT_5_5_5_1;if(f===eR)return h.BYTE;if(f===tR)return h.SHORT;if(f===Uv)return h.UNSIGNED_SHORT;if(f===nR)return h.INT;if(f===_o)return h.UNSIGNED_INT;if(f===xo)return h.FLOAT;if(f===bh)return s?h.HALF_FLOAT:(p=t.get("OES_texture_half_float"),p!==null?p.HALF_FLOAT_OES:null);if(f===sR)return h.ALPHA;if(f===ls)return h.RGBA;if(f===aR)return h.LUMINANCE;if(f===oR)return h.LUMINANCE_ALPHA;if(f===yo)return h.DEPTH_COMPONENT;if(f===tc)return h.DEPTH_STENCIL;if(f===sm)return p=t.get("EXT_sRGB"),p!==null?p.SRGB_ALPHA_EXT:null;if(f===lR)return h.RED;if(f===cR)return h.RED_INTEGER;if(f===hR)return h.RG;if(f===uR)return h.RG_INTEGER;if(f===fR)return h.RGBA_INTEGER;if(f===fp||f===dp||f===pp||f===mp)if(m===vn)if(p=t.get("WEBGL_compressed_texture_s3tc_srgb"),p!==null){if(f===fp)return p.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(f===dp)return p.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(f===pp)return p.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(f===mp)return p.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else return null;else if(p=t.get("WEBGL_compressed_texture_s3tc"),p!==null){if(f===fp)return p.COMPRESSED_RGB_S3TC_DXT1_EXT;if(f===dp)return p.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(f===pp)return p.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(f===mp)return p.COMPRESSED_RGBA_S3TC_DXT5_EXT}else return null;if(f===W0||f===X0||f===q0||f===Y0)if(p=t.get("WEBGL_compressed_texture_pvrtc"),p!==null){if(f===W0)return p.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(f===X0)return p.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(f===q0)return p.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(f===Y0)return p.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}else return null;if(f===dR)return p=t.get("WEBGL_compressed_texture_etc1"),p!==null?p.COMPRESSED_RGB_ETC1_WEBGL:null;if(f===Z0||f===K0)if(p=t.get("WEBGL_compressed_texture_etc"),p!==null){if(f===Z0)return m===vn?p.COMPRESSED_SRGB8_ETC2:p.COMPRESSED_RGB8_ETC2;if(f===K0)return m===vn?p.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:p.COMPRESSED_RGBA8_ETC2_EAC}else return null;if(f===$0||f===J0||f===j0||f===Q0||f===ex||f===tx||f===nx||f===ix||f===rx||f===sx||f===ax||f===ox||f===lx||f===cx)if(p=t.get("WEBGL_compressed_texture_astc"),p!==null){if(f===$0)return m===vn?p.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:p.COMPRESSED_RGBA_ASTC_4x4_KHR;if(f===J0)return m===vn?p.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:p.COMPRESSED_RGBA_ASTC_5x4_KHR;if(f===j0)return m===vn?p.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:p.COMPRESSED_RGBA_ASTC_5x5_KHR;if(f===Q0)return m===vn?p.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:p.COMPRESSED_RGBA_ASTC_6x5_KHR;if(f===ex)return m===vn?p.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:p.COMPRESSED_RGBA_ASTC_6x6_KHR;if(f===tx)return m===vn?p.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:p.COMPRESSED_RGBA_ASTC_8x5_KHR;if(f===nx)return m===vn?p.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:p.COMPRESSED_RGBA_ASTC_8x6_KHR;if(f===ix)return m===vn?p.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:p.COMPRESSED_RGBA_ASTC_8x8_KHR;if(f===rx)return m===vn?p.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:p.COMPRESSED_RGBA_ASTC_10x5_KHR;if(f===sx)return m===vn?p.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:p.COMPRESSED_RGBA_ASTC_10x6_KHR;if(f===ax)return m===vn?p.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:p.COMPRESSED_RGBA_ASTC_10x8_KHR;if(f===ox)return m===vn?p.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:p.COMPRESSED_RGBA_ASTC_10x10_KHR;if(f===lx)return m===vn?p.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:p.COMPRESSED_RGBA_ASTC_12x10_KHR;if(f===cx)return m===vn?p.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:p.COMPRESSED_RGBA_ASTC_12x12_KHR}else return null;if(f===gp)if(p=t.get("EXT_texture_compression_bptc"),p!==null){if(f===gp)return m===vn?p.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:p.COMPRESSED_RGBA_BPTC_UNORM_EXT}else return null;if(f===pR||f===hx||f===ux||f===fx)if(p=t.get("EXT_texture_compression_rgtc"),p!==null){if(f===gp)return p.COMPRESSED_RED_RGTC1_EXT;if(f===hx)return p.COMPRESSED_SIGNED_RED_RGTC1_EXT;if(f===ux)return p.COMPRESSED_RED_GREEN_RGTC2_EXT;if(f===fx)return p.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}else return null;return f===Zl?s?h.UNSIGNED_INT_24_8:(p=t.get("WEBGL_depth_texture"),p!==null?p.UNSIGNED_INT_24_8_WEBGL:null):h[f]!==void 0?h[f]:null}return{convert:o}}class _D extends zr{constructor(t=[]){super(),this.isArrayCamera=!0,this.cameras=t}}class uf extends ar{constructor(){super(),this.isGroup=!0,this.type="Group"}}const xD={type:"move"};class Gp{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return this._hand===null&&(this._hand=new uf,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return this._targetRay===null&&(this._targetRay=new uf,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new pe,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new pe),this._targetRay}getGripSpace(){return this._grip===null&&(this._grip=new uf,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new pe,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new pe),this._grip}dispatchEvent(t){return this._targetRay!==null&&this._targetRay.dispatchEvent(t),this._grip!==null&&this._grip.dispatchEvent(t),this._hand!==null&&this._hand.dispatchEvent(t),this}connect(t){if(t&&t.hand){const i=this._hand;if(i)for(const s of t.hand.values())this._getHandJoint(i,s)}return this.dispatchEvent({type:"connected",data:t}),this}disconnect(t){return this.dispatchEvent({type:"disconnected",data:t}),this._targetRay!==null&&(this._targetRay.visible=!1),this._grip!==null&&(this._grip.visible=!1),this._hand!==null&&(this._hand.visible=!1),this}update(t,i,s){let o=null,f=null,m=null;const p=this._targetRay,v=this._grip,x=this._hand;if(t&&i.session.visibilityState!=="visible-blurred"){if(x&&t.hand){m=!0;for(const L of t.hand.values()){const D=i.getJointPose(L,s),R=this._getHandJoint(x,L);D!==null&&(R.matrix.fromArray(D.transform.matrix),R.matrix.decompose(R.position,R.rotation,R.scale),R.matrixWorldNeedsUpdate=!0,R.jointRadius=D.radius),R.visible=D!==null}const M=x.joints["index-finger-tip"],b=x.joints["thumb-tip"],T=M.position.distanceTo(b.position),P=.02,N=.005;x.inputState.pinching&&T>P+N?(x.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:t.handedness,target:this})):!x.inputState.pinching&&T<=P-N&&(x.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:t.handedness,target:this}))}else v!==null&&t.gripSpace&&(f=i.getPose(t.gripSpace,s),f!==null&&(v.matrix.fromArray(f.transform.matrix),v.matrix.decompose(v.position,v.rotation,v.scale),v.matrixWorldNeedsUpdate=!0,f.linearVelocity?(v.hasLinearVelocity=!0,v.linearVelocity.copy(f.linearVelocity)):v.hasLinearVelocity=!1,f.angularVelocity?(v.hasAngularVelocity=!0,v.angularVelocity.copy(f.angularVelocity)):v.hasAngularVelocity=!1));p!==null&&(o=i.getPose(t.targetRaySpace,s),o===null&&f!==null&&(o=f),o!==null&&(p.matrix.fromArray(o.transform.matrix),p.matrix.decompose(p.position,p.rotation,p.scale),p.matrixWorldNeedsUpdate=!0,o.linearVelocity?(p.hasLinearVelocity=!0,p.linearVelocity.copy(o.linearVelocity)):p.hasLinearVelocity=!1,o.angularVelocity?(p.hasAngularVelocity=!0,p.angularVelocity.copy(o.angularVelocity)):p.hasAngularVelocity=!1,this.dispatchEvent(xD)))}return p!==null&&(p.visible=o!==null),v!==null&&(v.visible=f!==null),x!==null&&(x.visible=m!==null),this}_getHandJoint(t,i){if(t.joints[i.jointName]===void 0){const s=new uf;s.matrixAutoUpdate=!1,s.visible=!1,t.joints[i.jointName]=s,t.add(s)}return t.joints[i.jointName]}}class vD extends fr{constructor(t,i,s,o,f,m,p,v,x,M){if(M=M!==void 0?M:yo,M!==yo&&M!==tc)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");s===void 0&&M===yo&&(s=_o),s===void 0&&M===tc&&(s=Zl),super(null,o,f,m,p,v,M,s,x),this.isDepthTexture=!0,this.image={width:t,height:i},this.magFilter=p!==void 0?p:rr,this.minFilter=v!==void 0?v:rr,this.flipY=!1,this.generateMipmaps=!1}}class yD extends Lo{constructor(t,i){super();const s=this;let o=null,f=1,m=null,p="local-floor",v=1,x=null,M=null,b=null,T=null,P=null,N=null;const L=i.getContextAttributes();let D=null,R=null;const W=[],V=[],q=new Set,H=new Map,Q=new zr;Q.layers.enable(1),Q.viewport=new Bi;const re=new zr;re.layers.enable(2),re.viewport=new Bi;const oe=[Q,re],B=new _D;B.layers.enable(1),B.layers.enable(2);let te=null,we=null;this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(Ce){let ke=W[Ce];return ke===void 0&&(ke=new Gp,W[Ce]=ke),ke.getTargetRaySpace()},this.getControllerGrip=function(Ce){let ke=W[Ce];return ke===void 0&&(ke=new Gp,W[Ce]=ke),ke.getGripSpace()},this.getHand=function(Ce){let ke=W[Ce];return ke===void 0&&(ke=new Gp,W[Ce]=ke),ke.getHandSpace()};function Ae(Ce){const ke=V.indexOf(Ce.inputSource);if(ke===-1)return;const ut=W[ke];ut!==void 0&&(ut.update(Ce.inputSource,Ce.frame,x||m),ut.dispatchEvent({type:Ce.type,data:Ce.inputSource}))}function de(){o.removeEventListener("select",Ae),o.removeEventListener("selectstart",Ae),o.removeEventListener("selectend",Ae),o.removeEventListener("squeeze",Ae),o.removeEventListener("squeezestart",Ae),o.removeEventListener("squeezeend",Ae),o.removeEventListener("end",de),o.removeEventListener("inputsourceschange",xe);for(let Ce=0;Ce<W.length;Ce++){const ke=V[Ce];ke!==null&&(V[Ce]=null,W[Ce].disconnect(ke))}te=null,we=null,t.setRenderTarget(D),P=null,T=null,b=null,o=null,R=null,lt.stop(),s.isPresenting=!1,s.dispatchEvent({type:"sessionend"})}this.setFramebufferScaleFactor=function(Ce){f=Ce,s.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(Ce){p=Ce,s.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return x||m},this.setReferenceSpace=function(Ce){x=Ce},this.getBaseLayer=function(){return T!==null?T:P},this.getBinding=function(){return b},this.getFrame=function(){return N},this.getSession=function(){return o},this.setSession=async function(Ce){if(o=Ce,o!==null){if(D=t.getRenderTarget(),o.addEventListener("select",Ae),o.addEventListener("selectstart",Ae),o.addEventListener("selectend",Ae),o.addEventListener("squeeze",Ae),o.addEventListener("squeezestart",Ae),o.addEventListener("squeezeend",Ae),o.addEventListener("end",de),o.addEventListener("inputsourceschange",xe),L.xrCompatible!==!0&&await i.makeXRCompatible(),o.renderState.layers===void 0||t.capabilities.isWebGL2===!1){const ke={antialias:o.renderState.layers===void 0?L.antialias:!0,alpha:!0,depth:L.depth,stencil:L.stencil,framebufferScaleFactor:f};P=new XRWebGLLayer(o,i,ke),o.updateRenderState({baseLayer:P}),R=new Ao(P.framebufferWidth,P.framebufferHeight,{format:ls,type:wo,colorSpace:t.outputColorSpace,stencilBuffer:L.stencil})}else{let ke=null,ut=null,St=null;L.depth&&(St=L.stencil?i.DEPTH24_STENCIL8:i.DEPTH_COMPONENT24,ke=L.stencil?tc:yo,ut=L.stencil?Zl:_o);const fe={colorFormat:i.RGBA8,depthFormat:St,scaleFactor:f};b=new XRWebGLBinding(o,i),T=b.createProjectionLayer(fe),o.updateRenderState({layers:[T]}),R=new Ao(T.textureWidth,T.textureHeight,{format:ls,type:wo,depthTexture:new vD(T.textureWidth,T.textureHeight,ut,void 0,void 0,void 0,void 0,void 0,void 0,ke),stencilBuffer:L.stencil,colorSpace:t.outputColorSpace,samples:L.antialias?4:0});const tn=t.properties.get(R);tn.__ignoreDepthValues=T.ignoreDepthValues}R.isXRRenderTarget=!0,this.setFoveation(v),x=null,m=await o.requestReferenceSpace(p),lt.setContext(o),lt.start(),s.isPresenting=!0,s.dispatchEvent({type:"sessionstart"})}},this.getEnvironmentBlendMode=function(){if(o!==null)return o.environmentBlendMode};function xe(Ce){for(let ke=0;ke<Ce.removed.length;ke++){const ut=Ce.removed[ke],St=V.indexOf(ut);St>=0&&(V[St]=null,W[St].disconnect(ut))}for(let ke=0;ke<Ce.added.length;ke++){const ut=Ce.added[ke];let St=V.indexOf(ut);if(St===-1){for(let tn=0;tn<W.length;tn++)if(tn>=V.length){V.push(ut),St=tn;break}else if(V[tn]===null){V[tn]=ut,St=tn;break}if(St===-1)break}const fe=W[St];fe&&fe.connect(ut)}}const ye=new pe,He=new pe;function be(Ce,ke,ut){ye.setFromMatrixPosition(ke.matrixWorld),He.setFromMatrixPosition(ut.matrixWorld);const St=ye.distanceTo(He),fe=ke.projectionMatrix.elements,tn=ut.projectionMatrix.elements,Wt=fe[14]/(fe[10]-1),mt=fe[14]/(fe[10]+1),Xt=(fe[9]+1)/fe[5],hn=(fe[9]-1)/fe[5],Ft=(fe[8]-1)/fe[0],un=(tn[8]+1)/tn[0],Qn=Wt*Ft,Kn=Wt*un,ii=St/(-Ft+un),$n=ii*-Ft;ke.matrixWorld.decompose(Ce.position,Ce.quaternion,Ce.scale),Ce.translateX($n),Ce.translateZ(ii),Ce.matrixWorld.compose(Ce.position,Ce.quaternion,Ce.scale),Ce.matrixWorldInverse.copy(Ce.matrixWorld).invert();const dn=Wt+ii,Pn=mt+ii,li=Qn-$n,ne=Kn+(St-$n),X=Xt*mt/Pn*dn,Re=hn*mt/Pn*dn;Ce.projectionMatrix.makePerspective(li,ne,X,Re,dn,Pn),Ce.projectionMatrixInverse.copy(Ce.projectionMatrix).invert()}function Le(Ce,ke){ke===null?Ce.matrixWorld.copy(Ce.matrix):Ce.matrixWorld.multiplyMatrices(ke.matrixWorld,Ce.matrix),Ce.matrixWorldInverse.copy(Ce.matrixWorld).invert()}this.updateCamera=function(Ce){if(o===null)return;B.near=re.near=Q.near=Ce.near,B.far=re.far=Q.far=Ce.far,(te!==B.near||we!==B.far)&&(o.updateRenderState({depthNear:B.near,depthFar:B.far}),te=B.near,we=B.far);const ke=Ce.parent,ut=B.cameras;Le(B,ke);for(let St=0;St<ut.length;St++)Le(ut[St],ke);ut.length===2?be(B,Q,re):B.projectionMatrix.copy(Q.projectionMatrix),nt(Ce,B,ke)};function nt(Ce,ke,ut){ut===null?Ce.matrix.copy(ke.matrixWorld):(Ce.matrix.copy(ut.matrixWorld),Ce.matrix.invert(),Ce.matrix.multiply(ke.matrixWorld)),Ce.matrix.decompose(Ce.position,Ce.quaternion,Ce.scale),Ce.updateMatrixWorld(!0);const St=Ce.children;for(let fe=0,tn=St.length;fe<tn;fe++)St[fe].updateMatrixWorld(!0);Ce.projectionMatrix.copy(ke.projectionMatrix),Ce.projectionMatrixInverse.copy(ke.projectionMatrixInverse),Ce.isPerspectiveCamera&&(Ce.fov=am*2*Math.atan(1/Ce.projectionMatrix.elements[5]),Ce.zoom=1)}this.getCamera=function(){return B},this.getFoveation=function(){if(!(T===null&&P===null))return v},this.setFoveation=function(Ce){v=Ce,T!==null&&(T.fixedFoveation=Ce),P!==null&&P.fixedFoveation!==void 0&&(P.fixedFoveation=Ce)},this.getPlanes=function(){return q};let Ye=null;function It(Ce,ke){if(M=ke.getViewerPose(x||m),N=ke,M!==null){const ut=M.views;P!==null&&(t.setRenderTargetFramebuffer(R,P.framebuffer),t.setRenderTarget(R));let St=!1;ut.length!==B.cameras.length&&(B.cameras.length=0,St=!0);for(let fe=0;fe<ut.length;fe++){const tn=ut[fe];let Wt=null;if(P!==null)Wt=P.getViewport(tn);else{const Xt=b.getViewSubImage(T,tn);Wt=Xt.viewport,fe===0&&(t.setRenderTargetTextures(R,Xt.colorTexture,T.ignoreDepthValues?void 0:Xt.depthStencilTexture),t.setRenderTarget(R))}let mt=oe[fe];mt===void 0&&(mt=new zr,mt.layers.enable(fe),mt.viewport=new Bi,oe[fe]=mt),mt.matrix.fromArray(tn.transform.matrix),mt.matrix.decompose(mt.position,mt.quaternion,mt.scale),mt.projectionMatrix.fromArray(tn.projectionMatrix),mt.projectionMatrixInverse.copy(mt.projectionMatrix).invert(),mt.viewport.set(Wt.x,Wt.y,Wt.width,Wt.height),fe===0&&(B.matrix.copy(mt.matrix),B.matrix.decompose(B.position,B.quaternion,B.scale)),St===!0&&B.cameras.push(mt)}}for(let ut=0;ut<W.length;ut++){const St=V[ut],fe=W[ut];St!==null&&fe!==void 0&&fe.update(St,ke,x||m)}if(Ye&&Ye(Ce,ke),ke.detectedPlanes){s.dispatchEvent({type:"planesdetected",data:ke.detectedPlanes});let ut=null;for(const St of q)ke.detectedPlanes.has(St)||(ut===null&&(ut=[]),ut.push(St));if(ut!==null)for(const St of ut)q.delete(St),H.delete(St),s.dispatchEvent({type:"planeremoved",data:St});for(const St of ke.detectedPlanes)if(!q.has(St))q.add(St),H.set(St,ke.lastChangedTime),s.dispatchEvent({type:"planeadded",data:St});else{const fe=H.get(St);St.lastChangedTime>fe&&(H.set(St,St.lastChangedTime),s.dispatchEvent({type:"planechanged",data:St}))}}N=null}const lt=new Zv;lt.setAnimationLoop(It),this.setAnimationLoop=function(Ce){Ye=Ce},this.dispose=function(){}}}function MD(h,t){function i(D,R){D.matrixAutoUpdate===!0&&D.updateMatrix(),R.value.copy(D.matrix)}function s(D,R){R.color.getRGB(D.fogColor.value,Wv(h)),R.isFog?(D.fogNear.value=R.near,D.fogFar.value=R.far):R.isFogExp2&&(D.fogDensity.value=R.density)}function o(D,R,W,V,q){R.isMeshBasicMaterial||R.isMeshLambertMaterial?f(D,R):R.isMeshToonMaterial?(f(D,R),b(D,R)):R.isMeshPhongMaterial?(f(D,R),M(D,R)):R.isMeshStandardMaterial?(f(D,R),T(D,R),R.isMeshPhysicalMaterial&&P(D,R,q)):R.isMeshMatcapMaterial?(f(D,R),N(D,R)):R.isMeshDepthMaterial?f(D,R):R.isMeshDistanceMaterial?(f(D,R),L(D,R)):R.isMeshNormalMaterial?f(D,R):R.isLineBasicMaterial?(m(D,R),R.isLineDashedMaterial&&p(D,R)):R.isPointsMaterial?v(D,R,W,V):R.isSpriteMaterial?x(D,R):R.isShadowMaterial?(D.color.value.copy(R.color),D.opacity.value=R.opacity):R.isShaderMaterial&&(R.uniformsNeedUpdate=!1)}function f(D,R){D.opacity.value=R.opacity,R.color&&D.diffuse.value.copy(R.color),R.emissive&&D.emissive.value.copy(R.emissive).multiplyScalar(R.emissiveIntensity),R.map&&(D.map.value=R.map,i(R.map,D.mapTransform)),R.alphaMap&&(D.alphaMap.value=R.alphaMap,i(R.alphaMap,D.alphaMapTransform)),R.bumpMap&&(D.bumpMap.value=R.bumpMap,i(R.bumpMap,D.bumpMapTransform),D.bumpScale.value=R.bumpScale,R.side===ur&&(D.bumpScale.value*=-1)),R.normalMap&&(D.normalMap.value=R.normalMap,i(R.normalMap,D.normalMapTransform),D.normalScale.value.copy(R.normalScale),R.side===ur&&D.normalScale.value.negate()),R.displacementMap&&(D.displacementMap.value=R.displacementMap,i(R.displacementMap,D.displacementMapTransform),D.displacementScale.value=R.displacementScale,D.displacementBias.value=R.displacementBias),R.emissiveMap&&(D.emissiveMap.value=R.emissiveMap,i(R.emissiveMap,D.emissiveMapTransform)),R.specularMap&&(D.specularMap.value=R.specularMap,i(R.specularMap,D.specularMapTransform)),R.alphaTest>0&&(D.alphaTest.value=R.alphaTest);const W=t.get(R).envMap;if(W&&(D.envMap.value=W,D.flipEnvMap.value=W.isCubeTexture&&W.isRenderTargetTexture===!1?-1:1,D.reflectivity.value=R.reflectivity,D.ior.value=R.ior,D.refractionRatio.value=R.refractionRatio),R.lightMap){D.lightMap.value=R.lightMap;const V=h.useLegacyLights===!0?Math.PI:1;D.lightMapIntensity.value=R.lightMapIntensity*V,i(R.lightMap,D.lightMapTransform)}R.aoMap&&(D.aoMap.value=R.aoMap,D.aoMapIntensity.value=R.aoMapIntensity,i(R.aoMap,D.aoMapTransform))}function m(D,R){D.diffuse.value.copy(R.color),D.opacity.value=R.opacity,R.map&&(D.map.value=R.map,i(R.map,D.mapTransform))}function p(D,R){D.dashSize.value=R.dashSize,D.totalSize.value=R.dashSize+R.gapSize,D.scale.value=R.scale}function v(D,R,W,V){D.diffuse.value.copy(R.color),D.opacity.value=R.opacity,D.size.value=R.size*W,D.scale.value=V*.5,R.map&&(D.map.value=R.map,i(R.map,D.uvTransform)),R.alphaMap&&(D.alphaMap.value=R.alphaMap),R.alphaTest>0&&(D.alphaTest.value=R.alphaTest)}function x(D,R){D.diffuse.value.copy(R.color),D.opacity.value=R.opacity,D.rotation.value=R.rotation,R.map&&(D.map.value=R.map,i(R.map,D.mapTransform)),R.alphaMap&&(D.alphaMap.value=R.alphaMap),R.alphaTest>0&&(D.alphaTest.value=R.alphaTest)}function M(D,R){D.specular.value.copy(R.specular),D.shininess.value=Math.max(R.shininess,1e-4)}function b(D,R){R.gradientMap&&(D.gradientMap.value=R.gradientMap)}function T(D,R){D.metalness.value=R.metalness,R.metalnessMap&&(D.metalnessMap.value=R.metalnessMap,i(R.metalnessMap,D.metalnessMapTransform)),D.roughness.value=R.roughness,R.roughnessMap&&(D.roughnessMap.value=R.roughnessMap,i(R.roughnessMap,D.roughnessMapTransform)),t.get(R).envMap&&(D.envMapIntensity.value=R.envMapIntensity)}function P(D,R,W){D.ior.value=R.ior,R.sheen>0&&(D.sheenColor.value.copy(R.sheenColor).multiplyScalar(R.sheen),D.sheenRoughness.value=R.sheenRoughness,R.sheenColorMap&&(D.sheenColorMap.value=R.sheenColorMap,i(R.sheenColorMap,D.sheenColorMapTransform)),R.sheenRoughnessMap&&(D.sheenRoughnessMap.value=R.sheenRoughnessMap,i(R.sheenRoughnessMap,D.sheenRoughnessMapTransform))),R.clearcoat>0&&(D.clearcoat.value=R.clearcoat,D.clearcoatRoughness.value=R.clearcoatRoughness,R.clearcoatMap&&(D.clearcoatMap.value=R.clearcoatMap,i(R.clearcoatMap,D.clearcoatMapTransform)),R.clearcoatRoughnessMap&&(D.clearcoatRoughnessMap.value=R.clearcoatRoughnessMap,i(R.clearcoatRoughnessMap,D.clearcoatRoughnessMapTransform)),R.clearcoatNormalMap&&(D.clearcoatNormalMap.value=R.clearcoatNormalMap,i(R.clearcoatNormalMap,D.clearcoatNormalMapTransform),D.clearcoatNormalScale.value.copy(R.clearcoatNormalScale),R.side===ur&&D.clearcoatNormalScale.value.negate())),R.iridescence>0&&(D.iridescence.value=R.iridescence,D.iridescenceIOR.value=R.iridescenceIOR,D.iridescenceThicknessMinimum.value=R.iridescenceThicknessRange[0],D.iridescenceThicknessMaximum.value=R.iridescenceThicknessRange[1],R.iridescenceMap&&(D.iridescenceMap.value=R.iridescenceMap,i(R.iridescenceMap,D.iridescenceMapTransform)),R.iridescenceThicknessMap&&(D.iridescenceThicknessMap.value=R.iridescenceThicknessMap,i(R.iridescenceThicknessMap,D.iridescenceThicknessMapTransform))),R.transmission>0&&(D.transmission.value=R.transmission,D.transmissionSamplerMap.value=W.texture,D.transmissionSamplerSize.value.set(W.width,W.height),R.transmissionMap&&(D.transmissionMap.value=R.transmissionMap,i(R.transmissionMap,D.transmissionMapTransform)),D.thickness.value=R.thickness,R.thicknessMap&&(D.thicknessMap.value=R.thicknessMap,i(R.thicknessMap,D.thicknessMapTransform)),D.attenuationDistance.value=R.attenuationDistance,D.attenuationColor.value.copy(R.attenuationColor)),D.specularIntensity.value=R.specularIntensity,D.specularColor.value.copy(R.specularColor),R.specularColorMap&&(D.specularColorMap.value=R.specularColorMap,i(R.specularColorMap,D.specularColorMapTransform)),R.specularIntensityMap&&(D.specularIntensityMap.value=R.specularIntensityMap,i(R.specularIntensityMap,D.specularIntensityMapTransform))}function N(D,R){R.matcap&&(D.matcap.value=R.matcap)}function L(D,R){const W=t.get(R).light;D.referencePosition.value.setFromMatrixPosition(W.matrixWorld),D.nearDistance.value=W.shadow.camera.near,D.farDistance.value=W.shadow.camera.far}return{refreshFogUniforms:s,refreshMaterialUniforms:o}}function SD(h,t,i,s){let o={},f={},m=[];const p=i.isWebGL2?h.getParameter(h.MAX_UNIFORM_BUFFER_BINDINGS):0;function v(W,V){const q=V.program;s.uniformBlockBinding(W,q)}function x(W,V){let q=o[W.id];q===void 0&&(N(W),q=M(W),o[W.id]=q,W.addEventListener("dispose",D));const H=V.program;s.updateUBOMapping(W,H);const Q=t.render.frame;f[W.id]!==Q&&(T(W),f[W.id]=Q)}function M(W){const V=b();W.__bindingPointIndex=V;const q=h.createBuffer(),H=W.__size,Q=W.usage;return h.bindBuffer(h.UNIFORM_BUFFER,q),h.bufferData(h.UNIFORM_BUFFER,H,Q),h.bindBuffer(h.UNIFORM_BUFFER,null),h.bindBufferBase(h.UNIFORM_BUFFER,V,q),q}function b(){for(let W=0;W<p;W++)if(m.indexOf(W)===-1)return m.push(W),W;return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."),0}function T(W){const V=o[W.id],q=W.uniforms,H=W.__cache;h.bindBuffer(h.UNIFORM_BUFFER,V);for(let Q=0,re=q.length;Q<re;Q++){const oe=q[Q];if(P(oe,Q,H)===!0){const B=oe.__offset,te=Array.isArray(oe.value)?oe.value:[oe.value];let we=0;for(let Ae=0;Ae<te.length;Ae++){const de=te[Ae],xe=L(de);typeof de=="number"?(oe.__data[0]=de,h.bufferSubData(h.UNIFORM_BUFFER,B+we,oe.__data)):de.isMatrix3?(oe.__data[0]=de.elements[0],oe.__data[1]=de.elements[1],oe.__data[2]=de.elements[2],oe.__data[3]=de.elements[0],oe.__data[4]=de.elements[3],oe.__data[5]=de.elements[4],oe.__data[6]=de.elements[5],oe.__data[7]=de.elements[0],oe.__data[8]=de.elements[6],oe.__data[9]=de.elements[7],oe.__data[10]=de.elements[8],oe.__data[11]=de.elements[0]):(de.toArray(oe.__data,we),we+=xe.storage/Float32Array.BYTES_PER_ELEMENT)}h.bufferSubData(h.UNIFORM_BUFFER,B,oe.__data)}}h.bindBuffer(h.UNIFORM_BUFFER,null)}function P(W,V,q){const H=W.value;if(q[V]===void 0){if(typeof H=="number")q[V]=H;else{const Q=Array.isArray(H)?H:[H],re=[];for(let oe=0;oe<Q.length;oe++)re.push(Q[oe].clone());q[V]=re}return!0}else if(typeof H=="number"){if(q[V]!==H)return q[V]=H,!0}else{const Q=Array.isArray(q[V])?q[V]:[q[V]],re=Array.isArray(H)?H:[H];for(let oe=0;oe<Q.length;oe++){const B=Q[oe];if(B.equals(re[oe])===!1)return B.copy(re[oe]),!0}}return!1}function N(W){const V=W.uniforms;let q=0;const H=16;let Q=0;for(let re=0,oe=V.length;re<oe;re++){const B=V[re],te={boundary:0,storage:0},we=Array.isArray(B.value)?B.value:[B.value];for(let Ae=0,de=we.length;Ae<de;Ae++){const xe=we[Ae],ye=L(xe);te.boundary+=ye.boundary,te.storage+=ye.storage}if(B.__data=new Float32Array(te.storage/Float32Array.BYTES_PER_ELEMENT),B.__offset=q,re>0){Q=q%H;const Ae=H-Q;Q!==0&&Ae-te.boundary<0&&(q+=H-Q,B.__offset=q)}q+=te.storage}return Q=q%H,Q>0&&(q+=H-Q),W.__size=q,W.__cache={},this}function L(W){const V={boundary:0,storage:0};return typeof W=="number"?(V.boundary=4,V.storage=4):W.isVector2?(V.boundary=8,V.storage=8):W.isVector3||W.isColor?(V.boundary=16,V.storage=12):W.isVector4?(V.boundary=16,V.storage=16):W.isMatrix3?(V.boundary=48,V.storage=48):W.isMatrix4?(V.boundary=64,V.storage=64):W.isTexture?console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group."):console.warn("THREE.WebGLRenderer: Unsupported uniform value type.",W),V}function D(W){const V=W.target;V.removeEventListener("dispose",D);const q=m.indexOf(V.__bindingPointIndex);m.splice(q,1),h.deleteBuffer(o[V.id]),delete o[V.id],delete f[V.id]}function R(){for(const W in o)h.deleteBuffer(o[W]);m=[],o={},f={}}return{bind:v,update:x,dispose:R}}function ED(){const h=Ef("canvas");return h.style.display="block",h}class Qv{constructor(t={}){const{canvas:i=ED(),context:s=null,depth:o=!0,stencil:f=!0,alpha:m=!1,antialias:p=!1,premultipliedAlpha:v=!0,preserveDrawingBuffer:x=!1,powerPreference:M="default",failIfMajorPerformanceCaveat:b=!1}=t;this.isWebGLRenderer=!0;let T;s!==null?T=s.getContextAttributes().alpha:T=m;let P=null,N=null;const L=[],D=[];this.domElement=i,this.debug={checkShaderErrors:!0,onShaderError:null},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.outputColorSpace=vn,this.useLegacyLights=!0,this.toneMapping=$s,this.toneMappingExposure=1;const R=this;let W=!1,V=0,q=0,H=null,Q=-1,re=null;const oe=new Bi,B=new Bi;let te=null,we=i.width,Ae=i.height,de=1,xe=null,ye=null;const He=new Bi(0,0,we,Ae),be=new Bi(0,0,we,Ae);let Le=!1;const nt=new Yv;let Ye=!1,It=!1,lt=null;const Ce=new oi,ke=new pe,ut={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};function St(){return H===null?de:1}let fe=s;function tn($,ve){for(let Ne=0;Ne<$.length;Ne++){const me=$[Ne],ze=i.getContext(me,ve);if(ze!==null)return ze}return null}try{const $={alpha:!0,depth:o,stencil:f,antialias:p,premultipliedAlpha:v,preserveDrawingBuffer:x,powerPreference:M,failIfMajorPerformanceCaveat:b};if("setAttribute"in i&&i.setAttribute("data-engine",`three.js r${bm}`),i.addEventListener("webglcontextlost",wt,!1),i.addEventListener("webglcontextrestored",sn,!1),i.addEventListener("webglcontextcreationerror",nn,!1),fe===null){const ve=["webgl2","webgl","experimental-webgl"];if(R.isWebGL1Renderer===!0&&ve.shift(),fe=tn(ve,$),fe===null)throw tn(ve)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}fe.getShaderPrecisionFormat===void 0&&(fe.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch($){throw console.error("THREE.WebGLRenderer: "+$.message),$}let Wt,mt,Xt,hn,Ft,un,Qn,Kn,ii,$n,dn,Pn,li,ne,X,Re,qe,it,st,ae,Xe,Ee,yt,ft;function Nt(){Wt=new IL(fe),mt=new AL(fe,Wt,t),Wt.init(mt),Ee=new gD(fe,Wt,mt),Xt=new pD(fe,Wt,mt),hn=new OL(fe),Ft=new eD,un=new mD(fe,Wt,Xt,Ft,mt,Ee,hn),Qn=new CL(R),Kn=new UL(R),ii=new ZR(fe,mt),yt=new TL(fe,Wt,ii,mt),$n=new NL(fe,ii,hn,yt),dn=new GL(fe,$n,ii,hn),st=new kL(fe,mt,un),Re=new RL(Ft),Pn=new Q2(R,Qn,Kn,Wt,mt,yt,Re),li=new MD(R,Ft),ne=new nD,X=new lD(Wt,mt),it=new bL(R,Qn,Kn,Xt,dn,T,v),qe=new dD(R,dn,mt),ft=new SD(fe,hn,mt,Xt),ae=new wL(fe,Wt,hn,mt),Xe=new FL(fe,Wt,hn,mt),hn.programs=Pn.programs,R.capabilities=mt,R.extensions=Wt,R.properties=Ft,R.renderLists=ne,R.shadowMap=qe,R.state=Xt,R.info=hn}Nt();const Tt=new yD(R,fe);this.xr=Tt,this.getContext=function(){return fe},this.getContextAttributes=function(){return fe.getContextAttributes()},this.forceContextLoss=function(){const $=Wt.get("WEBGL_lose_context");$&&$.loseContext()},this.forceContextRestore=function(){const $=Wt.get("WEBGL_lose_context");$&&$.restoreContext()},this.getPixelRatio=function(){return de},this.setPixelRatio=function($){$!==void 0&&(de=$,this.setSize(we,Ae,!1))},this.getSize=function($){return $.set(we,Ae)},this.setSize=function($,ve,Ne=!0){if(Tt.isPresenting){console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");return}we=$,Ae=ve,i.width=Math.floor($*de),i.height=Math.floor(ve*de),Ne===!0&&(i.style.width=$+"px",i.style.height=ve+"px"),this.setViewport(0,0,$,ve)},this.getDrawingBufferSize=function($){return $.set(we*de,Ae*de).floor()},this.setDrawingBufferSize=function($,ve,Ne){we=$,Ae=ve,de=Ne,i.width=Math.floor($*Ne),i.height=Math.floor(ve*Ne),this.setViewport(0,0,$,ve)},this.getCurrentViewport=function($){return $.copy(oe)},this.getViewport=function($){return $.copy(He)},this.setViewport=function($,ve,Ne,me){$.isVector4?He.set($.x,$.y,$.z,$.w):He.set($,ve,Ne,me),Xt.viewport(oe.copy(He).multiplyScalar(de).floor())},this.getScissor=function($){return $.copy(be)},this.setScissor=function($,ve,Ne,me){$.isVector4?be.set($.x,$.y,$.z,$.w):be.set($,ve,Ne,me),Xt.scissor(B.copy(be).multiplyScalar(de).floor())},this.getScissorTest=function(){return Le},this.setScissorTest=function($){Xt.setScissorTest(Le=$)},this.setOpaqueSort=function($){xe=$},this.setTransparentSort=function($){ye=$},this.getClearColor=function($){return $.copy(it.getClearColor())},this.setClearColor=function(){it.setClearColor.apply(it,arguments)},this.getClearAlpha=function(){return it.getClearAlpha()},this.setClearAlpha=function(){it.setClearAlpha.apply(it,arguments)},this.clear=function($=!0,ve=!0,Ne=!0){let me=0;$&&(me|=fe.COLOR_BUFFER_BIT),ve&&(me|=fe.DEPTH_BUFFER_BIT),Ne&&(me|=fe.STENCIL_BUFFER_BIT),fe.clear(me)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){i.removeEventListener("webglcontextlost",wt,!1),i.removeEventListener("webglcontextrestored",sn,!1),i.removeEventListener("webglcontextcreationerror",nn,!1),ne.dispose(),X.dispose(),Ft.dispose(),Qn.dispose(),Kn.dispose(),dn.dispose(),yt.dispose(),ft.dispose(),Pn.dispose(),Tt.dispose(),Tt.removeEventListener("sessionstart",Ct),Tt.removeEventListener("sessionend",Un),lt&&(lt.dispose(),lt=null),Gn.stop()};function wt($){$.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),W=!0}function sn(){console.log("THREE.WebGLRenderer: Context Restored."),W=!1;const $=hn.autoReset,ve=qe.enabled,Ne=qe.autoUpdate,me=qe.needsUpdate,ze=qe.type;Nt(),hn.autoReset=$,qe.enabled=ve,qe.autoUpdate=Ne,qe.needsUpdate=me,qe.type=ze}function nn($){console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ",$.statusMessage)}function ei($){const ve=$.target;ve.removeEventListener("dispose",ei),ce(ve)}function ce($){Ie($),Ft.remove($)}function Ie($){const ve=Ft.get($).programs;ve!==void 0&&(ve.forEach(function(Ne){Pn.releaseProgram(Ne)}),$.isShaderMaterial&&Pn.releaseShaderCache($))}this.renderBufferDirect=function($,ve,Ne,me,ze,zt){ve===null&&(ve=ut);const Vt=ze.isMesh&&ze.matrixWorld.determinant()<0,Qt=As($,ve,Ne,me,ze);Xt.setMaterial(me,Vt);let ln=Ne.index,pn=1;me.wireframe===!0&&(ln=$n.getWireframeAttribute(Ne),pn=2);const mn=Ne.drawRange,yn=Ne.attributes.position;let On=mn.start*pn,Ei=(mn.start+mn.count)*pn;zt!==null&&(On=Math.max(On,zt.start*pn),Ei=Math.min(Ei,(zt.start+zt.count)*pn)),ln!==null?(On=Math.max(On,0),Ei=Math.min(Ei,ln.count)):yn!=null&&(On=Math.max(On,0),Ei=Math.min(Ei,yn.count));const $i=Ei-On;if($i<0||$i===1/0)return;yt.setup(ze,me,Qt,Ne,ln);let Xr,ni=ae;if(ln!==null&&(Xr=ii.get(ln),ni=Xe,ni.setIndex(Xr)),ze.isMesh)me.wireframe===!0?(Xt.setLineWidth(me.wireframeLinewidth*St()),ni.setMode(fe.LINES)):ni.setMode(fe.TRIANGLES);else if(ze.isLine){let bn=me.linewidth;bn===void 0&&(bn=1),Xt.setLineWidth(bn*St()),ze.isLineSegments?ni.setMode(fe.LINES):ze.isLineLoop?ni.setMode(fe.LINE_LOOP):ni.setMode(fe.LINE_STRIP)}else ze.isPoints?ni.setMode(fe.POINTS):ze.isSprite&&ni.setMode(fe.TRIANGLES);if(ze.isInstancedMesh)ni.renderInstances(On,$i,ze.count);else if(Ne.isInstancedBufferGeometry){const bn=Ne._maxInstanceCount!==void 0?Ne._maxInstanceCount:1/0,Ua=Math.min(Ne.instanceCount,bn);ni.renderInstances(On,$i,Ua)}else ni.render(On,$i)},this.compile=function($,ve){function Ne(me,ze,zt){me.transparent===!0&&me.side===Ks&&me.forceSinglePass===!1?(me.side=ur,me.needsUpdate=!0,Da(me,ze,zt),me.side=Aa,me.needsUpdate=!0,Da(me,ze,zt),me.side=Ks):Da(me,ze,zt)}N=X.get($),N.init(),D.push(N),$.traverseVisible(function(me){me.isLight&&me.layers.test(ve.layers)&&(N.pushLight(me),me.castShadow&&N.pushShadow(me))}),N.setupLights(R.useLegacyLights),$.traverse(function(me){const ze=me.material;if(ze)if(Array.isArray(ze))for(let zt=0;zt<ze.length;zt++){const Vt=ze[zt];Ne(Vt,$,me)}else Ne(ze,$,me)}),D.pop(),N=null};let rt=null;function xt($){rt&&rt($)}function Ct(){Gn.stop()}function Un(){Gn.start()}const Gn=new Zv;Gn.setAnimationLoop(xt),typeof self<"u"&&Gn.setContext(self),this.setAnimationLoop=function($){rt=$,Tt.setAnimationLoop($),$===null?Gn.stop():Gn.start()},Tt.addEventListener("sessionstart",Ct),Tt.addEventListener("sessionend",Un),this.render=function($,ve){if(ve!==void 0&&ve.isCamera!==!0){console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");return}if(W===!0)return;$.matrixWorldAutoUpdate===!0&&$.updateMatrixWorld(),ve.parent===null&&ve.matrixWorldAutoUpdate===!0&&ve.updateMatrixWorld(),Tt.enabled===!0&&Tt.isPresenting===!0&&(Tt.cameraAutoUpdate===!0&&Tt.updateCamera(ve),ve=Tt.getCamera()),$.isScene===!0&&$.onBeforeRender(R,$,ve,H),N=X.get($,D.length),N.init(),D.push(N),Ce.multiplyMatrices(ve.projectionMatrix,ve.matrixWorldInverse),nt.setFromProjectionMatrix(Ce),It=this.localClippingEnabled,Ye=Re.init(this.clippingPlanes,It),P=ne.get($,L.length),P.init(),L.push(P),Si($,ve,0,R.sortObjects),P.finish(),R.sortObjects===!0&&P.sort(xe,ye),Ye===!0&&Re.beginShadows();const Ne=N.state.shadowsArray;if(qe.render(Ne,$,ve),Ye===!0&&Re.endShadows(),this.info.autoReset===!0&&this.info.reset(),it.render(P,$),N.setupLights(R.useLegacyLights),ve.isArrayCamera){const me=ve.cameras;for(let ze=0,zt=me.length;ze<zt;ze++){const Vt=me[ze];zi(P,$,Vt,Vt.viewport)}}else zi(P,$,ve);H!==null&&(un.updateMultisampleRenderTarget(H),un.updateRenderTargetMipmap(H)),$.isScene===!0&&$.onAfterRender(R,$,ve),yt.resetDefaultState(),Q=-1,re=null,D.pop(),D.length>0?N=D[D.length-1]:N=null,L.pop(),L.length>0?P=L[L.length-1]:P=null};function Si($,ve,Ne,me){if($.visible===!1)return;if($.layers.test(ve.layers)){if($.isGroup)Ne=$.renderOrder;else if($.isLOD)$.autoUpdate===!0&&$.update(ve);else if($.isLight)N.pushLight($),$.castShadow&&N.pushShadow($);else if($.isSprite){if(!$.frustumCulled||nt.intersectsSprite($)){me&&ke.setFromMatrixPosition($.matrixWorld).applyMatrix4(Ce);const Vt=dn.update($),Qt=$.material;Qt.visible&&P.push($,Vt,Qt,Ne,ke.z,null)}}else if(($.isMesh||$.isLine||$.isPoints)&&(!$.frustumCulled||nt.intersectsObject($))){$.isSkinnedMesh&&$.skeleton.frame!==hn.render.frame&&($.skeleton.update(),$.skeleton.frame=hn.render.frame);const Vt=dn.update($),Qt=$.material;if(me&&(Vt.boundingSphere===null&&Vt.computeBoundingSphere(),ke.copy(Vt.boundingSphere.center).applyMatrix4($.matrixWorld).applyMatrix4(Ce)),Array.isArray(Qt)){const ln=Vt.groups;for(let pn=0,mn=ln.length;pn<mn;pn++){const yn=ln[pn],On=Qt[yn.materialIndex];On&&On.visible&&P.push($,Vt,On,Ne,ke.z,yn)}}else Qt.visible&&P.push($,Vt,Qt,Ne,ke.z,null)}}const zt=$.children;for(let Vt=0,Qt=zt.length;Vt<Qt;Vt++)Si(zt[Vt],ve,Ne,me)}function zi($,ve,Ne,me){const ze=$.opaque,zt=$.transmissive,Vt=$.transparent;N.setupLightsView(Ne),Ye===!0&&Re.setGlobalState(R.clippingPlanes,Ne),zt.length>0&&ti(ze,zt,ve,Ne),me&&Xt.viewport(oe.copy(me)),ze.length>0&&Jn(ze,ve,Ne),zt.length>0&&Jn(zt,ve,Ne),Vt.length>0&&Jn(Vt,ve,Ne),Xt.buffers.depth.setTest(!0),Xt.buffers.depth.setMask(!0),Xt.buffers.color.setMask(!0),Xt.setPolygonOffset(!1)}function ti($,ve,Ne,me){if(lt===null){const Qt=mt.isWebGL2;lt=new Ao(1024,1024,{generateMipmaps:!0,type:Wt.has("EXT_color_buffer_half_float")?bh:wo,minFilter:Eh,samples:Qt&&p===!0?4:0})}const ze=R.getRenderTarget();R.setRenderTarget(lt),R.clear();const zt=R.toneMapping;R.toneMapping=$s,Jn($,Ne,me),un.updateMultisampleRenderTarget(lt),un.updateRenderTargetMipmap(lt);let Vt=!1;for(let Qt=0,ln=ve.length;Qt<ln;Qt++){const pn=ve[Qt],mn=pn.object,yn=pn.geometry,On=pn.material,Ei=pn.group;if(On.side===Ks&&mn.layers.test(me.layers)){const $i=On.side;On.side=ur,On.needsUpdate=!0,_r(mn,Ne,me,yn,On,Ei),On.side=$i,On.needsUpdate=!0,Vt=!0}}Vt===!0&&(un.updateMultisampleRenderTarget(lt),un.updateRenderTargetMipmap(lt)),R.setRenderTarget(ze),R.toneMapping=zt}function Jn($,ve,Ne){const me=ve.isScene===!0?ve.overrideMaterial:null;for(let ze=0,zt=$.length;ze<zt;ze++){const Vt=$[ze],Qt=Vt.object,ln=Vt.geometry,pn=me===null?Vt.material:me,mn=Vt.group;Qt.layers.test(Ne.layers)&&_r(Qt,ve,Ne,ln,pn,mn)}}function _r($,ve,Ne,me,ze,zt){$.onBeforeRender(R,ve,Ne,me,ze,zt),$.modelViewMatrix.multiplyMatrices(Ne.matrixWorldInverse,$.matrixWorld),$.normalMatrix.getNormalMatrix($.modelViewMatrix),ze.onBeforeRender(R,ve,Ne,me,$,zt),ze.transparent===!0&&ze.side===Ks&&ze.forceSinglePass===!1?(ze.side=ur,ze.needsUpdate=!0,R.renderBufferDirect(Ne,ve,me,ze,$,zt),ze.side=Aa,ze.needsUpdate=!0,R.renderBufferDirect(Ne,ve,me,ze,$,zt),ze.side=Ks):R.renderBufferDirect(Ne,ve,me,ze,$,zt),$.onAfterRender(R,ve,Ne,me,ze,zt)}function Da($,ve,Ne){ve.isScene!==!0&&(ve=ut);const me=Ft.get($),ze=N.state.lights,zt=N.state.shadowsArray,Vt=ze.state.version,Qt=Pn.getParameters($,ze.state,zt,ve,Ne),ln=Pn.getProgramCacheKey(Qt);let pn=me.programs;me.environment=$.isMeshStandardMaterial?ve.environment:null,me.fog=ve.fog,me.envMap=($.isMeshStandardMaterial?Kn:Qn).get($.envMap||me.environment),pn===void 0&&($.addEventListener("dispose",ei),pn=new Map,me.programs=pn);let mn=pn.get(ln);if(mn!==void 0){if(me.currentProgram===mn&&me.lightsStateVersion===Vt)return Wr($,Qt),mn}else Qt.uniforms=Pn.getUniforms($),$.onBuild(Ne,Qt,R),$.onBeforeCompile(Qt,R),mn=Pn.acquireProgram(Qt,ln),pn.set(ln,mn),me.uniforms=Qt.uniforms;const yn=me.uniforms;(!$.isShaderMaterial&&!$.isRawShaderMaterial||$.clipping===!0)&&(yn.clippingPlanes=Re.uniform),Wr($,Qt),me.needsLights=Ih($),me.lightsStateVersion=Vt,me.needsLights&&(yn.ambientLightColor.value=ze.state.ambient,yn.lightProbe.value=ze.state.probe,yn.directionalLights.value=ze.state.directional,yn.directionalLightShadows.value=ze.state.directionalShadow,yn.spotLights.value=ze.state.spot,yn.spotLightShadows.value=ze.state.spotShadow,yn.rectAreaLights.value=ze.state.rectArea,yn.ltc_1.value=ze.state.rectAreaLTC1,yn.ltc_2.value=ze.state.rectAreaLTC2,yn.pointLights.value=ze.state.point,yn.pointLightShadows.value=ze.state.pointShadow,yn.hemisphereLights.value=ze.state.hemi,yn.directionalShadowMap.value=ze.state.directionalShadowMap,yn.directionalShadowMatrix.value=ze.state.directionalShadowMatrix,yn.spotShadowMap.value=ze.state.spotShadowMap,yn.spotLightMatrix.value=ze.state.spotLightMatrix,yn.spotLightMap.value=ze.state.spotLightMap,yn.pointShadowMap.value=ze.state.pointShadowMap,yn.pointShadowMatrix.value=ze.state.pointShadowMatrix);const On=mn.getUniforms(),Ei=xf.seqWithValue(On.seq,yn);return me.currentProgram=mn,me.uniformsList=Ei,mn}function Wr($,ve){const Ne=Ft.get($);Ne.outputColorSpace=ve.outputColorSpace,Ne.instancing=ve.instancing,Ne.skinning=ve.skinning,Ne.morphTargets=ve.morphTargets,Ne.morphNormals=ve.morphNormals,Ne.morphColors=ve.morphColors,Ne.morphTargetsCount=ve.morphTargetsCount,Ne.numClippingPlanes=ve.numClippingPlanes,Ne.numIntersection=ve.numClipIntersection,Ne.vertexAlphas=ve.vertexAlphas,Ne.vertexTangents=ve.vertexTangents,Ne.toneMapping=ve.toneMapping}function As($,ve,Ne,me,ze){ve.isScene!==!0&&(ve=ut),un.resetTextureUnits();const zt=ve.fog,Vt=me.isMeshStandardMaterial?ve.environment:null,Qt=H===null?R.outputColorSpace:H.isXRRenderTarget===!0?H.texture.colorSpace:bs,ln=(me.isMeshStandardMaterial?Kn:Qn).get(me.envMap||Vt),pn=me.vertexColors===!0&&!!Ne.attributes.color&&Ne.attributes.color.itemSize===4,mn=!!me.normalMap&&!!Ne.attributes.tangent,yn=!!Ne.morphAttributes.position,On=!!Ne.morphAttributes.normal,Ei=!!Ne.morphAttributes.color,$i=me.toneMapped?R.toneMapping:$s,Xr=Ne.morphAttributes.position||Ne.morphAttributes.normal||Ne.morphAttributes.color,ni=Xr!==void 0?Xr.length:0,bn=Ft.get(me),Ua=N.state.lights;if(Ye===!0&&(It===!0||$!==re)){const Ii=$===re&&me.id===Q;Re.setState(me,$,Ii)}let ci=!1;me.version===bn.__version?(bn.needsLights&&bn.lightsStateVersion!==Ua.state.version||bn.outputColorSpace!==Qt||ze.isInstancedMesh&&bn.instancing===!1||!ze.isInstancedMesh&&bn.instancing===!0||ze.isSkinnedMesh&&bn.skinning===!1||!ze.isSkinnedMesh&&bn.skinning===!0||bn.envMap!==ln||me.fog===!0&&bn.fog!==zt||bn.numClippingPlanes!==void 0&&(bn.numClippingPlanes!==Re.numPlanes||bn.numIntersection!==Re.numIntersection)||bn.vertexAlphas!==pn||bn.vertexTangents!==mn||bn.morphTargets!==yn||bn.morphNormals!==On||bn.morphColors!==Ei||bn.toneMapping!==$i||mt.isWebGL2===!0&&bn.morphTargetsCount!==ni)&&(ci=!0):(ci=!0,bn.__version=me.version);let qr=bn.currentProgram;ci===!0&&(qr=Da(me,ve,ze));let Io=!1,Rs=!1,Ia=!1;const bi=qr.getUniforms(),Yr=bn.uniforms;if(Xt.useProgram(qr.program)&&(Io=!0,Rs=!0,Ia=!0),me.id!==Q&&(Q=me.id,Rs=!0),Io||re!==$){if(bi.setValue(fe,"projectionMatrix",$.projectionMatrix),mt.logarithmicDepthBuffer&&bi.setValue(fe,"logDepthBufFC",2/(Math.log($.far+1)/Math.LN2)),re!==$&&(re=$,Rs=!0,Ia=!0),me.isShaderMaterial||me.isMeshPhongMaterial||me.isMeshToonMaterial||me.isMeshStandardMaterial||me.envMap){const Ii=bi.map.cameraPosition;Ii!==void 0&&Ii.setValue(fe,ke.setFromMatrixPosition($.matrixWorld))}(me.isMeshPhongMaterial||me.isMeshToonMaterial||me.isMeshLambertMaterial||me.isMeshBasicMaterial||me.isMeshStandardMaterial||me.isShaderMaterial)&&bi.setValue(fe,"isOrthographic",$.isOrthographicCamera===!0),(me.isMeshPhongMaterial||me.isMeshToonMaterial||me.isMeshLambertMaterial||me.isMeshBasicMaterial||me.isMeshStandardMaterial||me.isShaderMaterial||me.isShadowMaterial||ze.isSkinnedMesh)&&bi.setValue(fe,"viewMatrix",$.matrixWorldInverse)}if(ze.isSkinnedMesh){bi.setOptional(fe,ze,"bindMatrix"),bi.setOptional(fe,ze,"bindMatrixInverse");const Ii=ze.skeleton;Ii&&(mt.floatVertexTextures?(Ii.boneTexture===null&&Ii.computeBoneTexture(),bi.setValue(fe,"boneTexture",Ii.boneTexture,un),bi.setValue(fe,"boneTextureSize",Ii.boneTextureSize)):console.warn("THREE.WebGLRenderer: SkinnedMesh can only be used with WebGL 2. With WebGL 1 OES_texture_float and vertex textures support is required."))}const Na=Ne.morphAttributes;if((Na.position!==void 0||Na.normal!==void 0||Na.color!==void 0&&mt.isWebGL2===!0)&&st.update(ze,Ne,qr),(Rs||bn.receiveShadow!==ze.receiveShadow)&&(bn.receiveShadow=ze.receiveShadow,bi.setValue(fe,"receiveShadow",ze.receiveShadow)),me.isMeshGouraudMaterial&&me.envMap!==null&&(Yr.envMap.value=ln,Yr.flipEnvMap.value=ln.isCubeTexture&&ln.isRenderTargetTexture===!1?-1:1),Rs&&(bi.setValue(fe,"toneMappingExposure",R.toneMappingExposure),bn.needsLights&&Uh(Yr,Ia),zt&&me.fog===!0&&li.refreshFogUniforms(Yr,zt),li.refreshMaterialUniforms(Yr,me,de,Ae,lt),xf.upload(fe,bn.uniformsList,Yr,un)),me.isShaderMaterial&&me.uniformsNeedUpdate===!0&&(xf.upload(fe,bn.uniformsList,Yr,un),me.uniformsNeedUpdate=!1),me.isSpriteMaterial&&bi.setValue(fe,"center",ze.center),bi.setValue(fe,"modelViewMatrix",ze.modelViewMatrix),bi.setValue(fe,"normalMatrix",ze.normalMatrix),bi.setValue(fe,"modelMatrix",ze.matrixWorld),me.isShaderMaterial||me.isRawShaderMaterial){const Ii=me.uniformsGroups;for(let Qs=0,Nh=Ii.length;Qs<Nh;Qs++)if(mt.isWebGL2){const No=Ii[Qs];ft.update(No,qr),ft.bind(No,qr)}else console.warn("THREE.WebGLRenderer: Uniform Buffer Objects can only be used with WebGL 2.")}return qr}function Uh($,ve){$.ambientLightColor.needsUpdate=ve,$.lightProbe.needsUpdate=ve,$.directionalLights.needsUpdate=ve,$.directionalLightShadows.needsUpdate=ve,$.pointLights.needsUpdate=ve,$.pointLightShadows.needsUpdate=ve,$.spotLights.needsUpdate=ve,$.spotLightShadows.needsUpdate=ve,$.rectAreaLights.needsUpdate=ve,$.hemisphereLights.needsUpdate=ve}function Ih($){return $.isMeshLambertMaterial||$.isMeshToonMaterial||$.isMeshPhongMaterial||$.isMeshStandardMaterial||$.isShadowMaterial||$.isShaderMaterial&&$.lights===!0}this.getActiveCubeFace=function(){return V},this.getActiveMipmapLevel=function(){return q},this.getRenderTarget=function(){return H},this.setRenderTargetTextures=function($,ve,Ne){Ft.get($.texture).__webglTexture=ve,Ft.get($.depthTexture).__webglTexture=Ne;const me=Ft.get($);me.__hasExternalTextures=!0,me.__hasExternalTextures&&(me.__autoAllocateDepthBuffer=Ne===void 0,me.__autoAllocateDepthBuffer||Wt.has("WEBGL_multisampled_render_to_texture")===!0&&(console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided"),me.__useRenderToTexture=!1))},this.setRenderTargetFramebuffer=function($,ve){const Ne=Ft.get($);Ne.__webglFramebuffer=ve,Ne.__useDefaultFramebuffer=ve===void 0},this.setRenderTarget=function($,ve=0,Ne=0){H=$,V=ve,q=Ne;let me=!0,ze=null,zt=!1,Vt=!1;if($){const ln=Ft.get($);ln.__useDefaultFramebuffer!==void 0?(Xt.bindFramebuffer(fe.FRAMEBUFFER,null),me=!1):ln.__webglFramebuffer===void 0?un.setupRenderTarget($):ln.__hasExternalTextures&&un.rebindTextures($,Ft.get($.texture).__webglTexture,Ft.get($.depthTexture).__webglTexture);const pn=$.texture;(pn.isData3DTexture||pn.isDataArrayTexture||pn.isCompressedArrayTexture)&&(Vt=!0);const mn=Ft.get($).__webglFramebuffer;$.isWebGLCubeRenderTarget?(ze=mn[ve],zt=!0):mt.isWebGL2&&$.samples>0&&un.useMultisampledRTT($)===!1?ze=Ft.get($).__webglMultisampledFramebuffer:ze=mn,oe.copy($.viewport),B.copy($.scissor),te=$.scissorTest}else oe.copy(He).multiplyScalar(de).floor(),B.copy(be).multiplyScalar(de).floor(),te=Le;if(Xt.bindFramebuffer(fe.FRAMEBUFFER,ze)&&mt.drawBuffers&&me&&Xt.drawBuffers($,ze),Xt.viewport(oe),Xt.scissor(B),Xt.setScissorTest(te),zt){const ln=Ft.get($.texture);fe.framebufferTexture2D(fe.FRAMEBUFFER,fe.COLOR_ATTACHMENT0,fe.TEXTURE_CUBE_MAP_POSITIVE_X+ve,ln.__webglTexture,Ne)}else if(Vt){const ln=Ft.get($.texture),pn=ve||0;fe.framebufferTextureLayer(fe.FRAMEBUFFER,fe.COLOR_ATTACHMENT0,ln.__webglTexture,Ne||0,pn)}Q=-1},this.readRenderTargetPixels=function($,ve,Ne,me,ze,zt,Vt){if(!($&&$.isWebGLRenderTarget)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");return}let Qt=Ft.get($).__webglFramebuffer;if($.isWebGLCubeRenderTarget&&Vt!==void 0&&(Qt=Qt[Vt]),Qt){Xt.bindFramebuffer(fe.FRAMEBUFFER,Qt);try{const ln=$.texture,pn=ln.format,mn=ln.type;if(pn!==ls&&Ee.convert(pn)!==fe.getParameter(fe.IMPLEMENTATION_COLOR_READ_FORMAT)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");return}const yn=mn===bh&&(Wt.has("EXT_color_buffer_half_float")||mt.isWebGL2&&Wt.has("EXT_color_buffer_float"));if(mn!==wo&&Ee.convert(mn)!==fe.getParameter(fe.IMPLEMENTATION_COLOR_READ_TYPE)&&!(mn===xo&&(mt.isWebGL2||Wt.has("OES_texture_float")||Wt.has("WEBGL_color_buffer_float")))&&!yn){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");return}ve>=0&&ve<=$.width-me&&Ne>=0&&Ne<=$.height-ze&&fe.readPixels(ve,Ne,me,ze,Ee.convert(pn),Ee.convert(mn),zt)}finally{const ln=H!==null?Ft.get(H).__webglFramebuffer:null;Xt.bindFramebuffer(fe.FRAMEBUFFER,ln)}}},this.copyFramebufferToTexture=function($,ve,Ne=0){const me=Math.pow(2,-Ne),ze=Math.floor(ve.image.width*me),zt=Math.floor(ve.image.height*me);un.setTexture2D(ve,0),fe.copyTexSubImage2D(fe.TEXTURE_2D,Ne,0,0,$.x,$.y,ze,zt),Xt.unbindTexture()},this.copyTextureToTexture=function($,ve,Ne,me=0){const ze=ve.image.width,zt=ve.image.height,Vt=Ee.convert(Ne.format),Qt=Ee.convert(Ne.type);un.setTexture2D(Ne,0),fe.pixelStorei(fe.UNPACK_FLIP_Y_WEBGL,Ne.flipY),fe.pixelStorei(fe.UNPACK_PREMULTIPLY_ALPHA_WEBGL,Ne.premultiplyAlpha),fe.pixelStorei(fe.UNPACK_ALIGNMENT,Ne.unpackAlignment),ve.isDataTexture?fe.texSubImage2D(fe.TEXTURE_2D,me,$.x,$.y,ze,zt,Vt,Qt,ve.image.data):ve.isCompressedTexture?fe.compressedTexSubImage2D(fe.TEXTURE_2D,me,$.x,$.y,ve.mipmaps[0].width,ve.mipmaps[0].height,Vt,ve.mipmaps[0].data):fe.texSubImage2D(fe.TEXTURE_2D,me,$.x,$.y,Vt,Qt,ve.image),me===0&&Ne.generateMipmaps&&fe.generateMipmap(fe.TEXTURE_2D),Xt.unbindTexture()},this.copyTextureToTexture3D=function($,ve,Ne,me,ze=0){if(R.isWebGL1Renderer){console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");return}const zt=$.max.x-$.min.x+1,Vt=$.max.y-$.min.y+1,Qt=$.max.z-$.min.z+1,ln=Ee.convert(me.format),pn=Ee.convert(me.type);let mn;if(me.isData3DTexture)un.setTexture3D(me,0),mn=fe.TEXTURE_3D;else if(me.isDataArrayTexture)un.setTexture2DArray(me,0),mn=fe.TEXTURE_2D_ARRAY;else{console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");return}fe.pixelStorei(fe.UNPACK_FLIP_Y_WEBGL,me.flipY),fe.pixelStorei(fe.UNPACK_PREMULTIPLY_ALPHA_WEBGL,me.premultiplyAlpha),fe.pixelStorei(fe.UNPACK_ALIGNMENT,me.unpackAlignment);const yn=fe.getParameter(fe.UNPACK_ROW_LENGTH),On=fe.getParameter(fe.UNPACK_IMAGE_HEIGHT),Ei=fe.getParameter(fe.UNPACK_SKIP_PIXELS),$i=fe.getParameter(fe.UNPACK_SKIP_ROWS),Xr=fe.getParameter(fe.UNPACK_SKIP_IMAGES),ni=Ne.isCompressedTexture?Ne.mipmaps[0]:Ne.image;fe.pixelStorei(fe.UNPACK_ROW_LENGTH,ni.width),fe.pixelStorei(fe.UNPACK_IMAGE_HEIGHT,ni.height),fe.pixelStorei(fe.UNPACK_SKIP_PIXELS,$.min.x),fe.pixelStorei(fe.UNPACK_SKIP_ROWS,$.min.y),fe.pixelStorei(fe.UNPACK_SKIP_IMAGES,$.min.z),Ne.isDataTexture||Ne.isData3DTexture?fe.texSubImage3D(mn,ze,ve.x,ve.y,ve.z,zt,Vt,Qt,ln,pn,ni.data):Ne.isCompressedArrayTexture?(console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture."),fe.compressedTexSubImage3D(mn,ze,ve.x,ve.y,ve.z,zt,Vt,Qt,ln,ni.data)):fe.texSubImage3D(mn,ze,ve.x,ve.y,ve.z,zt,Vt,Qt,ln,pn,ni),fe.pixelStorei(fe.UNPACK_ROW_LENGTH,yn),fe.pixelStorei(fe.UNPACK_IMAGE_HEIGHT,On),fe.pixelStorei(fe.UNPACK_SKIP_PIXELS,Ei),fe.pixelStorei(fe.UNPACK_SKIP_ROWS,$i),fe.pixelStorei(fe.UNPACK_SKIP_IMAGES,Xr),ze===0&&me.generateMipmaps&&fe.generateMipmap(mn),Xt.unbindTexture()},this.initTexture=function($){$.isCubeTexture?un.setTextureCube($,0):$.isData3DTexture?un.setTexture3D($,0):$.isDataArrayTexture||$.isCompressedArrayTexture?un.setTexture2DArray($,0):un.setTexture2D($,0),Xt.unbindTexture()},this.resetState=function(){V=0,q=0,H=null,Xt.reset(),yt.reset()},typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}get physicallyCorrectLights(){return console.warn("THREE.WebGLRenderer: the property .physicallyCorrectLights has been removed. Set renderer.useLegacyLights instead."),!this.useLegacyLights}set physicallyCorrectLights(t){console.warn("THREE.WebGLRenderer: the property .physicallyCorrectLights has been removed. Set renderer.useLegacyLights instead."),this.useLegacyLights=!t}get outputEncoding(){return console.warn("THREE.WebGLRenderer: Property .outputEncoding has been removed. Use .outputColorSpace instead."),this.outputColorSpace===vn?Mo:Iv}set outputEncoding(t){console.warn("THREE.WebGLRenderer: Property .outputEncoding has been removed. Use .outputColorSpace instead."),this.outputColorSpace=t===Mo?vn:bs}}class bD extends Qv{}bD.prototype.isWebGL1Renderer=!0;class TD extends ar{constructor(){super(),this.isScene=!0,this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.backgroundBlurriness=0,this.backgroundIntensity=1,this.overrideMaterial=null,typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(t,i){return super.copy(t,i),t.background!==null&&(this.background=t.background.clone()),t.environment!==null&&(this.environment=t.environment.clone()),t.fog!==null&&(this.fog=t.fog.clone()),this.backgroundBlurriness=t.backgroundBlurriness,this.backgroundIntensity=t.backgroundIntensity,t.overrideMaterial!==null&&(this.overrideMaterial=t.overrideMaterial.clone()),this.matrixAutoUpdate=t.matrixAutoUpdate,this}toJSON(t){const i=super.toJSON(t);return this.fog!==null&&(i.object.fog=this.fog.toJSON()),this.backgroundBlurriness>0&&(i.object.backgroundBlurriness=this.backgroundBlurriness),this.backgroundIntensity!==1&&(i.object.backgroundIntensity=this.backgroundIntensity),i}get autoUpdate(){return console.warn("THREE.Scene: autoUpdate was renamed to matrixWorldAutoUpdate in r144."),this.matrixWorldAutoUpdate}set autoUpdate(t){console.warn("THREE.Scene: autoUpdate was renamed to matrixWorldAutoUpdate in r144."),this.matrixWorldAutoUpdate=t}}class wD{constructor(t,i){this.isInterleavedBuffer=!0,this.array=t,this.stride=i,this.count=t!==void 0?t.length/i:0,this.usage=Sf,this.updateRange={offset:0,count:-1},this.version=0,this.uuid=Ea()}onUploadCallback(){}set needsUpdate(t){t===!0&&this.version++}setUsage(t){return this.usage=t,this}copy(t){return this.array=new t.array.constructor(t.array),this.count=t.count,this.stride=t.stride,this.usage=t.usage,this}copyAt(t,i,s){t*=this.stride,s*=i.stride;for(let o=0,f=this.stride;o<f;o++)this.array[t+o]=i.array[s+o];return this}set(t,i=0){return this.array.set(t,i),this}clone(t){t.arrayBuffers===void 0&&(t.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=Ea()),t.arrayBuffers[this.array.buffer._uuid]===void 0&&(t.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer);const i=new this.array.constructor(t.arrayBuffers[this.array.buffer._uuid]),s=new this.constructor(i,this.stride);return s.setUsage(this.usage),s}onUpload(t){return this.onUploadCallback=t,this}toJSON(t){return t.arrayBuffers===void 0&&(t.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=Ea()),t.arrayBuffers[this.array.buffer._uuid]===void 0&&(t.arrayBuffers[this.array.buffer._uuid]=Array.from(new Uint32Array(this.array.buffer))),{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride}}}const nr=new pe;class bf{constructor(t,i,s,o=!1){this.isInterleavedBufferAttribute=!0,this.name="",this.data=t,this.itemSize=i,this.offset=s,this.normalized=o}get count(){return this.data.count}get array(){return this.data.array}set needsUpdate(t){this.data.needsUpdate=t}applyMatrix4(t){for(let i=0,s=this.data.count;i<s;i++)nr.fromBufferAttribute(this,i),nr.applyMatrix4(t),this.setXYZ(i,nr.x,nr.y,nr.z);return this}applyNormalMatrix(t){for(let i=0,s=this.count;i<s;i++)nr.fromBufferAttribute(this,i),nr.applyNormalMatrix(t),this.setXYZ(i,nr.x,nr.y,nr.z);return this}transformDirection(t){for(let i=0,s=this.count;i<s;i++)nr.fromBufferAttribute(this,i),nr.transformDirection(t),this.setXYZ(i,nr.x,nr.y,nr.z);return this}setX(t,i){return this.normalized&&(i=jn(i,this.array)),this.data.array[t*this.data.stride+this.offset]=i,this}setY(t,i){return this.normalized&&(i=jn(i,this.array)),this.data.array[t*this.data.stride+this.offset+1]=i,this}setZ(t,i){return this.normalized&&(i=jn(i,this.array)),this.data.array[t*this.data.stride+this.offset+2]=i,this}setW(t,i){return this.normalized&&(i=jn(i,this.array)),this.data.array[t*this.data.stride+this.offset+3]=i,this}getX(t){let i=this.data.array[t*this.data.stride+this.offset];return this.normalized&&(i=xa(i,this.array)),i}getY(t){let i=this.data.array[t*this.data.stride+this.offset+1];return this.normalized&&(i=xa(i,this.array)),i}getZ(t){let i=this.data.array[t*this.data.stride+this.offset+2];return this.normalized&&(i=xa(i,this.array)),i}getW(t){let i=this.data.array[t*this.data.stride+this.offset+3];return this.normalized&&(i=xa(i,this.array)),i}setXY(t,i,s){return t=t*this.data.stride+this.offset,this.normalized&&(i=jn(i,this.array),s=jn(s,this.array)),this.data.array[t+0]=i,this.data.array[t+1]=s,this}setXYZ(t,i,s,o){return t=t*this.data.stride+this.offset,this.normalized&&(i=jn(i,this.array),s=jn(s,this.array),o=jn(o,this.array)),this.data.array[t+0]=i,this.data.array[t+1]=s,this.data.array[t+2]=o,this}setXYZW(t,i,s,o,f){return t=t*this.data.stride+this.offset,this.normalized&&(i=jn(i,this.array),s=jn(s,this.array),o=jn(o,this.array),f=jn(f,this.array)),this.data.array[t+0]=i,this.data.array[t+1]=s,this.data.array[t+2]=o,this.data.array[t+3]=f,this}clone(t){if(t===void 0){console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.");const i=[];for(let s=0;s<this.count;s++){const o=s*this.data.stride+this.offset;for(let f=0;f<this.itemSize;f++)i.push(this.data.array[o+f])}return new Hr(new this.array.constructor(i),this.itemSize,this.normalized)}else return t.interleavedBuffers===void 0&&(t.interleavedBuffers={}),t.interleavedBuffers[this.data.uuid]===void 0&&(t.interleavedBuffers[this.data.uuid]=this.data.clone(t)),new bf(t.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized)}toJSON(t){if(t===void 0){console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.");const i=[];for(let s=0;s<this.count;s++){const o=s*this.data.stride+this.offset;for(let f=0;f<this.itemSize;f++)i.push(this.data.array[o+f])}return{itemSize:this.itemSize,type:this.array.constructor.name,array:i,normalized:this.normalized}}else return t.interleavedBuffers===void 0&&(t.interleavedBuffers={}),t.interleavedBuffers[this.data.uuid]===void 0&&(t.interleavedBuffers[this.data.uuid]=this.data.toJSON(t)),{isInterleavedBufferAttribute:!0,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized}}}class ey extends uc{constructor(t){super(),this.isSpriteMaterial=!0,this.type="SpriteMaterial",this.color=new kn(16777215),this.map=null,this.alphaMap=null,this.rotation=0,this.sizeAttenuation=!0,this.transparent=!0,this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.alphaMap=t.alphaMap,this.rotation=t.rotation,this.sizeAttenuation=t.sizeAttenuation,this.fog=t.fog,this}}let Ol;const ch=new pe,Bl=new pe,zl=new pe,kl=new cn,hh=new cn,ty=new oi,ff=new pe,uh=new pe,df=new pe,jx=new cn,Hp=new cn,Qx=new cn;class AD extends ar{constructor(t){if(super(),this.isSprite=!0,this.type="Sprite",Ol===void 0){Ol=new ws;const i=new Float32Array([-.5,-.5,0,0,0,.5,-.5,0,1,0,.5,.5,0,1,1,-.5,.5,0,0,1]),s=new wD(i,5);Ol.setIndex([0,1,2,0,2,3]),Ol.setAttribute("position",new bf(s,3,0,!1)),Ol.setAttribute("uv",new bf(s,2,3,!1))}this.geometry=Ol,this.material=t!==void 0?t:new ey,this.center=new cn(.5,.5)}raycast(t,i){t.camera===null&&console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'),Bl.setFromMatrixScale(this.matrixWorld),ty.copy(t.camera.matrixWorld),this.modelViewMatrix.multiplyMatrices(t.camera.matrixWorldInverse,this.matrixWorld),zl.setFromMatrixPosition(this.modelViewMatrix),t.camera.isPerspectiveCamera&&this.material.sizeAttenuation===!1&&Bl.multiplyScalar(-zl.z);const s=this.material.rotation;let o,f;s!==0&&(f=Math.cos(s),o=Math.sin(s));const m=this.center;pf(ff.set(-.5,-.5,0),zl,m,Bl,o,f),pf(uh.set(.5,-.5,0),zl,m,Bl,o,f),pf(df.set(.5,.5,0),zl,m,Bl,o,f),jx.set(0,0),Hp.set(1,0),Qx.set(1,1);let p=t.ray.intersectTriangle(ff,uh,df,!1,ch);if(p===null&&(pf(uh.set(-.5,.5,0),zl,m,Bl,o,f),Hp.set(0,1),p=t.ray.intersectTriangle(ff,df,uh,!1,ch),p===null))return;const v=t.ray.origin.distanceTo(ch);v<t.near||v>t.far||i.push({distance:v,point:ch.clone(),uv:Br.getInterpolation(ch,ff,uh,df,jx,Hp,Qx,new cn),face:null,object:this})}copy(t,i){return super.copy(t,i),t.center!==void 0&&this.center.copy(t.center),this.material=t.material,this}}function pf(h,t,i,s,o,f){kl.subVectors(h,i).addScalar(.5).multiply(s),o!==void 0?(hh.x=f*kl.x-o*kl.y,hh.y=o*kl.x+f*kl.y):hh.copy(kl),h.copy(t),h.x+=hh.x,h.y+=hh.y,h.applyMatrix4(ty)}class Tf extends Hr{constructor(t,i,s,o=1){super(t,i,s),this.isInstancedBufferAttribute=!0,this.meshPerAttribute=o}copy(t){return super.copy(t),this.meshPerAttribute=t.meshPerAttribute,this}toJSON(){const t=super.toJSON();return t.meshPerAttribute=this.meshPerAttribute,t.isInstancedBufferAttribute=!0,t}}const Gl=new oi,ev=new oi,mf=[],tv=new Do,RD=new oi,fh=new cs,dh=new hc;class CD extends cs{constructor(t,i,s){super(t,i),this.isInstancedMesh=!0,this.instanceMatrix=new Tf(new Float32Array(s*16),16),this.instanceColor=null,this.count=s,this.boundingBox=null,this.boundingSphere=null;for(let o=0;o<s;o++)this.setMatrixAt(o,RD)}computeBoundingBox(){const t=this.geometry,i=this.count;this.boundingBox===null&&(this.boundingBox=new Do),t.boundingBox===null&&t.computeBoundingBox(),this.boundingBox.makeEmpty();for(let s=0;s<i;s++)this.getMatrixAt(s,Gl),tv.copy(t.boundingBox).applyMatrix4(Gl),this.boundingBox.union(tv)}computeBoundingSphere(){const t=this.geometry,i=this.count;this.boundingSphere===null&&(this.boundingSphere=new hc),t.boundingSphere===null&&t.computeBoundingSphere(),this.boundingSphere.makeEmpty();for(let s=0;s<i;s++)this.getMatrixAt(s,Gl),dh.copy(t.boundingSphere).applyMatrix4(Gl),this.boundingSphere.union(dh)}copy(t,i){return super.copy(t,i),this.instanceMatrix.copy(t.instanceMatrix),t.instanceColor!==null&&(this.instanceColor=t.instanceColor.clone()),this.count=t.count,this}getColorAt(t,i){i.fromArray(this.instanceColor.array,t*3)}getMatrixAt(t,i){i.fromArray(this.instanceMatrix.array,t*16)}raycast(t,i){const s=this.matrixWorld,o=this.count;if(fh.geometry=this.geometry,fh.material=this.material,fh.material!==void 0&&(this.boundingSphere===null&&this.computeBoundingSphere(),dh.copy(this.boundingSphere),dh.applyMatrix4(s),t.ray.intersectsSphere(dh)!==!1))for(let f=0;f<o;f++){this.getMatrixAt(f,Gl),ev.multiplyMatrices(s,Gl),fh.matrixWorld=ev,fh.raycast(t,mf);for(let m=0,p=mf.length;m<p;m++){const v=mf[m];v.instanceId=f,v.object=this,i.push(v)}mf.length=0}}setColorAt(t,i){this.instanceColor===null&&(this.instanceColor=new Tf(new Float32Array(this.instanceMatrix.count*3),3)),i.toArray(this.instanceColor.array,t*3)}setMatrixAt(t,i){i.toArray(this.instanceMatrix.array,t*16)}updateMorphTargets(){}dispose(){this.dispatchEvent({type:"dispose"})}}class PD extends uc{constructor(t){super(),this.isLineBasicMaterial=!0,this.type="LineBasicMaterial",this.color=new kn(16777215),this.map=null,this.linewidth=1,this.linecap="round",this.linejoin="round",this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.linewidth=t.linewidth,this.linecap=t.linecap,this.linejoin=t.linejoin,this.fog=t.fog,this}}const nv=new pe,iv=new pe,rv=new oi,Vp=new Tm,gf=new hc;class LD extends ar{constructor(t=new ws,i=new PD){super(),this.isLine=!0,this.type="Line",this.geometry=t,this.material=i,this.updateMorphTargets()}copy(t,i){return super.copy(t,i),this.material=t.material,this.geometry=t.geometry,this}computeLineDistances(){const t=this.geometry;if(t.index===null){const i=t.attributes.position,s=[0];for(let o=1,f=i.count;o<f;o++)nv.fromBufferAttribute(i,o-1),iv.fromBufferAttribute(i,o),s[o]=s[o-1],s[o]+=nv.distanceTo(iv);t.setAttribute("lineDistance",new ba(s,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");return this}raycast(t,i){const s=this.geometry,o=this.matrixWorld,f=t.params.Line.threshold,m=s.drawRange;if(s.boundingSphere===null&&s.computeBoundingSphere(),gf.copy(s.boundingSphere),gf.applyMatrix4(o),gf.radius+=f,t.ray.intersectsSphere(gf)===!1)return;rv.copy(o).invert(),Vp.copy(t.ray).applyMatrix4(rv);const p=f/((this.scale.x+this.scale.y+this.scale.z)/3),v=p*p,x=new pe,M=new pe,b=new pe,T=new pe,P=this.isLineSegments?2:1,N=s.index,D=s.attributes.position;if(N!==null){const R=Math.max(0,m.start),W=Math.min(N.count,m.start+m.count);for(let V=R,q=W-1;V<q;V+=P){const H=N.getX(V),Q=N.getX(V+1);if(x.fromBufferAttribute(D,H),M.fromBufferAttribute(D,Q),Vp.distanceSqToSegment(x,M,T,b)>v)continue;T.applyMatrix4(this.matrixWorld);const oe=t.ray.origin.distanceTo(T);oe<t.near||oe>t.far||i.push({distance:oe,point:b.clone().applyMatrix4(this.matrixWorld),index:V,face:null,faceIndex:null,object:this})}}else{const R=Math.max(0,m.start),W=Math.min(D.count,m.start+m.count);for(let V=R,q=W-1;V<q;V+=P){if(x.fromBufferAttribute(D,V),M.fromBufferAttribute(D,V+1),Vp.distanceSqToSegment(x,M,T,b)>v)continue;T.applyMatrix4(this.matrixWorld);const Q=t.ray.origin.distanceTo(T);Q<t.near||Q>t.far||i.push({distance:Q,point:b.clone().applyMatrix4(this.matrixWorld),index:V,face:null,faceIndex:null,object:this})}}}updateMorphTargets(){const i=this.geometry.morphAttributes,s=Object.keys(i);if(s.length>0){const o=i[s[0]];if(o!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let f=0,m=o.length;f<m;f++){const p=o[f].name||String(f);this.morphTargetInfluences.push(0),this.morphTargetDictionary[p]=f}}}}}class DD extends fr{constructor(t,i,s,o,f,m,p,v,x){super(t,i,s,o,f,m,p,v,x),this.isCanvasTexture=!0,this.needsUpdate=!0}}class UD{constructor(t,i,s=0,o=1/0){this.ray=new Tm(t,i),this.near=s,this.far=o,this.camera=null,this.layers=new wm,this.params={Mesh:{},Line:{threshold:1},LOD:{},Points:{threshold:1},Sprite:{}}}set(t,i){this.ray.set(t,i)}setFromCamera(t,i){i.isPerspectiveCamera?(this.ray.origin.setFromMatrixPosition(i.matrixWorld),this.ray.direction.set(t.x,t.y,.5).unproject(i).sub(this.ray.origin).normalize(),this.camera=i):i.isOrthographicCamera?(this.ray.origin.set(t.x,t.y,(i.near+i.far)/(i.near-i.far)).unproject(i),this.ray.direction.set(0,0,-1).transformDirection(i.matrixWorld),this.camera=i):console.error("THREE.Raycaster: Unsupported camera type: "+i.type)}intersectObject(t,i=!0,s=[]){return lm(t,this,s,i),s.sort(sv),s}intersectObjects(t,i=!0,s=[]){for(let o=0,f=t.length;o<f;o++)lm(t[o],this,s,i);return s.sort(sv),s}}function sv(h,t){return h.distance-t.distance}function lm(h,t,i,s){if(h.layers.test(t.layers)&&h.raycast(t,i),s===!0){const o=h.children;for(let f=0,m=o.length;f<m;f++)lm(o[f],t,i,!0)}}class av{constructor(t=1,i=0,s=0){return this.radius=t,this.phi=i,this.theta=s,this}set(t,i,s){return this.radius=t,this.phi=i,this.theta=s,this}copy(t){return this.radius=t.radius,this.phi=t.phi,this.theta=t.theta,this}makeSafe(){return this.phi=Math.max(1e-6,Math.min(Math.PI-1e-6,this.phi)),this}setFromVector3(t){return this.setFromCartesianCoords(t.x,t.y,t.z)}setFromCartesianCoords(t,i,s){return this.radius=Math.sqrt(t*t+i*i+s*s),this.radius===0?(this.theta=0,this.phi=0):(this.theta=Math.atan2(t,s),this.phi=Math.acos(sr(i/this.radius,-1,1))),this}clone(){return new this.constructor().copy(this)}}typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:bm}}));typeof window<"u"&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=bm);const ov={type:"change"},Wp={type:"start"},lv={type:"end"};class ID extends Lo{constructor(t,i){super(),this.object=t,this.domElement=i,this.domElement.style.touchAction="none",this.enabled=!0,this.target=new pe,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-1/0,this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.05,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.enablePan=!0,this.panSpeed=1,this.screenSpacePanning=!0,this.keyPanSpeed=7,this.autoRotate=!1,this.autoRotateSpeed=2,this.keys={LEFT:"ArrowLeft",UP:"ArrowUp",RIGHT:"ArrowRight",BOTTOM:"ArrowDown"},this.mouseButtons={LEFT:vl.ROTATE,MIDDLE:vl.DOLLY,RIGHT:vl.PAN},this.touches={ONE:yl.ROTATE,TWO:yl.DOLLY_PAN},this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom,this._domElementKeyEvents=null,this.getPolarAngle=function(){return p.phi},this.getAzimuthalAngle=function(){return p.theta},this.getDistance=function(){return this.object.position.distanceTo(this.target)},this.listenToKeyEvents=function(ae){ae.addEventListener("keydown",Pn),this._domElementKeyEvents=ae},this.stopListenToKeyEvents=function(){this._domElementKeyEvents.removeEventListener("keydown",Pn),this._domElementKeyEvents=null},this.saveState=function(){s.target0.copy(s.target),s.position0.copy(s.object.position),s.zoom0=s.object.zoom},this.reset=function(){s.target.copy(s.target0),s.object.position.copy(s.position0),s.object.zoom=s.zoom0,s.object.updateProjectionMatrix(),s.dispatchEvent(ov),s.update(),f=o.NONE},this.update=function(){const ae=new pe,Xe=new Ro().setFromUnitVectors(t.up,new pe(0,1,0)),Ee=Xe.clone().invert(),yt=new pe,ft=new Ro,Nt=2*Math.PI;return function(){const wt=s.object.position;ae.copy(wt).sub(s.target),ae.applyQuaternion(Xe),p.setFromVector3(ae),s.autoRotate&&f===o.NONE&&B(re()),s.enableDamping?(p.theta+=v.theta*s.dampingFactor,p.phi+=v.phi*s.dampingFactor):(p.theta+=v.theta,p.phi+=v.phi);let sn=s.minAzimuthAngle,nn=s.maxAzimuthAngle;return isFinite(sn)&&isFinite(nn)&&(sn<-Math.PI?sn+=Nt:sn>Math.PI&&(sn-=Nt),nn<-Math.PI?nn+=Nt:nn>Math.PI&&(nn-=Nt),sn<=nn?p.theta=Math.max(sn,Math.min(nn,p.theta)):p.theta=p.theta>(sn+nn)/2?Math.max(sn,p.theta):Math.min(nn,p.theta)),p.phi=Math.max(s.minPolarAngle,Math.min(s.maxPolarAngle,p.phi)),p.makeSafe(),p.radius*=x,p.radius=Math.max(s.minDistance,Math.min(s.maxDistance,p.radius)),s.enableDamping===!0?s.target.addScaledVector(M,s.dampingFactor):s.target.add(M),ae.setFromSpherical(p),ae.applyQuaternion(Ee),wt.copy(s.target).add(ae),s.object.lookAt(s.target),s.enableDamping===!0?(v.theta*=1-s.dampingFactor,v.phi*=1-s.dampingFactor,M.multiplyScalar(1-s.dampingFactor)):(v.set(0,0,0),M.set(0,0,0)),x=1,b||yt.distanceToSquared(s.object.position)>m||8*(1-ft.dot(s.object.quaternion))>m?(s.dispatchEvent(ov),yt.copy(s.object.position),ft.copy(s.object.quaternion),b=!1,!0):!1}}(),this.dispose=function(){s.domElement.removeEventListener("contextmenu",X),s.domElement.removeEventListener("pointerdown",un),s.domElement.removeEventListener("pointercancel",Kn),s.domElement.removeEventListener("wheel",dn),s.domElement.removeEventListener("pointermove",Qn),s.domElement.removeEventListener("pointerup",Kn),s._domElementKeyEvents!==null&&(s._domElementKeyEvents.removeEventListener("keydown",Pn),s._domElementKeyEvents=null)};const s=this,o={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_PAN:4,TOUCH_DOLLY_PAN:5,TOUCH_DOLLY_ROTATE:6};let f=o.NONE;const m=1e-6,p=new av,v=new av;let x=1;const M=new pe;let b=!1;const T=new cn,P=new cn,N=new cn,L=new cn,D=new cn,R=new cn,W=new cn,V=new cn,q=new cn,H=[],Q={};function re(){return 2*Math.PI/60/60*s.autoRotateSpeed}function oe(){return Math.pow(.95,s.zoomSpeed)}function B(ae){v.theta-=ae}function te(ae){v.phi-=ae}const we=function(){const ae=new pe;return function(Ee,yt){ae.setFromMatrixColumn(yt,0),ae.multiplyScalar(-Ee),M.add(ae)}}(),Ae=function(){const ae=new pe;return function(Ee,yt){s.screenSpacePanning===!0?ae.setFromMatrixColumn(yt,1):(ae.setFromMatrixColumn(yt,0),ae.crossVectors(s.object.up,ae)),ae.multiplyScalar(Ee),M.add(ae)}}(),de=function(){const ae=new pe;return function(Ee,yt){const ft=s.domElement;if(s.object.isPerspectiveCamera){const Nt=s.object.position;ae.copy(Nt).sub(s.target);let Tt=ae.length();Tt*=Math.tan(s.object.fov/2*Math.PI/180),we(2*Ee*Tt/ft.clientHeight,s.object.matrix),Ae(2*yt*Tt/ft.clientHeight,s.object.matrix)}else s.object.isOrthographicCamera?(we(Ee*(s.object.right-s.object.left)/s.object.zoom/ft.clientWidth,s.object.matrix),Ae(yt*(s.object.top-s.object.bottom)/s.object.zoom/ft.clientHeight,s.object.matrix)):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."),s.enablePan=!1)}}();function xe(ae){s.object.isPerspectiveCamera?x/=ae:s.object.isOrthographicCamera?(s.object.zoom=Math.max(s.minZoom,Math.min(s.maxZoom,s.object.zoom*ae)),s.object.updateProjectionMatrix(),b=!0):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),s.enableZoom=!1)}function ye(ae){s.object.isPerspectiveCamera?x*=ae:s.object.isOrthographicCamera?(s.object.zoom=Math.max(s.minZoom,Math.min(s.maxZoom,s.object.zoom/ae)),s.object.updateProjectionMatrix(),b=!0):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),s.enableZoom=!1)}function He(ae){T.set(ae.clientX,ae.clientY)}function be(ae){W.set(ae.clientX,ae.clientY)}function Le(ae){L.set(ae.clientX,ae.clientY)}function nt(ae){P.set(ae.clientX,ae.clientY),N.subVectors(P,T).multiplyScalar(s.rotateSpeed);const Xe=s.domElement;B(2*Math.PI*N.x/Xe.clientHeight),te(2*Math.PI*N.y/Xe.clientHeight),T.copy(P),s.update()}function Ye(ae){V.set(ae.clientX,ae.clientY),q.subVectors(V,W),q.y>0?xe(oe()):q.y<0&&ye(oe()),W.copy(V),s.update()}function It(ae){D.set(ae.clientX,ae.clientY),R.subVectors(D,L).multiplyScalar(s.panSpeed),de(R.x,R.y),L.copy(D),s.update()}function lt(ae){ae.deltaY<0?ye(oe()):ae.deltaY>0&&xe(oe()),s.update()}function Ce(ae){let Xe=!1;switch(ae.code){case s.keys.UP:ae.ctrlKey||ae.metaKey||ae.shiftKey?te(2*Math.PI*s.rotateSpeed/s.domElement.clientHeight):de(0,s.keyPanSpeed),Xe=!0;break;case s.keys.BOTTOM:ae.ctrlKey||ae.metaKey||ae.shiftKey?te(-2*Math.PI*s.rotateSpeed/s.domElement.clientHeight):de(0,-s.keyPanSpeed),Xe=!0;break;case s.keys.LEFT:ae.ctrlKey||ae.metaKey||ae.shiftKey?B(2*Math.PI*s.rotateSpeed/s.domElement.clientHeight):de(s.keyPanSpeed,0),Xe=!0;break;case s.keys.RIGHT:ae.ctrlKey||ae.metaKey||ae.shiftKey?B(-2*Math.PI*s.rotateSpeed/s.domElement.clientHeight):de(-s.keyPanSpeed,0),Xe=!0;break}Xe&&(ae.preventDefault(),s.update())}function ke(){if(H.length===1)T.set(H[0].pageX,H[0].pageY);else{const ae=.5*(H[0].pageX+H[1].pageX),Xe=.5*(H[0].pageY+H[1].pageY);T.set(ae,Xe)}}function ut(){if(H.length===1)L.set(H[0].pageX,H[0].pageY);else{const ae=.5*(H[0].pageX+H[1].pageX),Xe=.5*(H[0].pageY+H[1].pageY);L.set(ae,Xe)}}function St(){const ae=H[0].pageX-H[1].pageX,Xe=H[0].pageY-H[1].pageY,Ee=Math.sqrt(ae*ae+Xe*Xe);W.set(0,Ee)}function fe(){s.enableZoom&&St(),s.enablePan&&ut()}function tn(){s.enableZoom&&St(),s.enableRotate&&ke()}function Wt(ae){if(H.length==1)P.set(ae.pageX,ae.pageY);else{const Ee=st(ae),yt=.5*(ae.pageX+Ee.x),ft=.5*(ae.pageY+Ee.y);P.set(yt,ft)}N.subVectors(P,T).multiplyScalar(s.rotateSpeed);const Xe=s.domElement;B(2*Math.PI*N.x/Xe.clientHeight),te(2*Math.PI*N.y/Xe.clientHeight),T.copy(P)}function mt(ae){if(H.length===1)D.set(ae.pageX,ae.pageY);else{const Xe=st(ae),Ee=.5*(ae.pageX+Xe.x),yt=.5*(ae.pageY+Xe.y);D.set(Ee,yt)}R.subVectors(D,L).multiplyScalar(s.panSpeed),de(R.x,R.y),L.copy(D)}function Xt(ae){const Xe=st(ae),Ee=ae.pageX-Xe.x,yt=ae.pageY-Xe.y,ft=Math.sqrt(Ee*Ee+yt*yt);V.set(0,ft),q.set(0,Math.pow(V.y/W.y,s.zoomSpeed)),xe(q.y),W.copy(V)}function hn(ae){s.enableZoom&&Xt(ae),s.enablePan&&mt(ae)}function Ft(ae){s.enableZoom&&Xt(ae),s.enableRotate&&Wt(ae)}function un(ae){s.enabled!==!1&&(H.length===0&&(s.domElement.setPointerCapture(ae.pointerId),s.domElement.addEventListener("pointermove",Qn),s.domElement.addEventListener("pointerup",Kn)),Re(ae),ae.pointerType==="touch"?li(ae):ii(ae))}function Qn(ae){s.enabled!==!1&&(ae.pointerType==="touch"?ne(ae):$n(ae))}function Kn(ae){qe(ae),H.length===0&&(s.domElement.releasePointerCapture(ae.pointerId),s.domElement.removeEventListener("pointermove",Qn),s.domElement.removeEventListener("pointerup",Kn)),s.dispatchEvent(lv),f=o.NONE}function ii(ae){let Xe;switch(ae.button){case 0:Xe=s.mouseButtons.LEFT;break;case 1:Xe=s.mouseButtons.MIDDLE;break;case 2:Xe=s.mouseButtons.RIGHT;break;default:Xe=-1}switch(Xe){case vl.DOLLY:if(s.enableZoom===!1)return;be(ae),f=o.DOLLY;break;case vl.ROTATE:if(ae.ctrlKey||ae.metaKey||ae.shiftKey){if(s.enablePan===!1)return;Le(ae),f=o.PAN}else{if(s.enableRotate===!1)return;He(ae),f=o.ROTATE}break;case vl.PAN:if(ae.ctrlKey||ae.metaKey||ae.shiftKey){if(s.enableRotate===!1)return;He(ae),f=o.ROTATE}else{if(s.enablePan===!1)return;Le(ae),f=o.PAN}break;default:f=o.NONE}f!==o.NONE&&s.dispatchEvent(Wp)}function $n(ae){switch(f){case o.ROTATE:if(s.enableRotate===!1)return;nt(ae);break;case o.DOLLY:if(s.enableZoom===!1)return;Ye(ae);break;case o.PAN:if(s.enablePan===!1)return;It(ae);break}}function dn(ae){s.enabled===!1||s.enableZoom===!1||f!==o.NONE||(ae.preventDefault(),s.dispatchEvent(Wp),lt(ae),s.dispatchEvent(lv))}function Pn(ae){s.enabled===!1||s.enablePan===!1||Ce(ae)}function li(ae){switch(it(ae),H.length){case 1:switch(s.touches.ONE){case yl.ROTATE:if(s.enableRotate===!1)return;ke(),f=o.TOUCH_ROTATE;break;case yl.PAN:if(s.enablePan===!1)return;ut(),f=o.TOUCH_PAN;break;default:f=o.NONE}break;case 2:switch(s.touches.TWO){case yl.DOLLY_PAN:if(s.enableZoom===!1&&s.enablePan===!1)return;fe(),f=o.TOUCH_DOLLY_PAN;break;case yl.DOLLY_ROTATE:if(s.enableZoom===!1&&s.enableRotate===!1)return;tn(),f=o.TOUCH_DOLLY_ROTATE;break;default:f=o.NONE}break;default:f=o.NONE}f!==o.NONE&&s.dispatchEvent(Wp)}function ne(ae){switch(it(ae),f){case o.TOUCH_ROTATE:if(s.enableRotate===!1)return;Wt(ae),s.update();break;case o.TOUCH_PAN:if(s.enablePan===!1)return;mt(ae),s.update();break;case o.TOUCH_DOLLY_PAN:if(s.enableZoom===!1&&s.enablePan===!1)return;hn(ae),s.update();break;case o.TOUCH_DOLLY_ROTATE:if(s.enableZoom===!1&&s.enableRotate===!1)return;Ft(ae),s.update();break;default:f=o.NONE}}function X(ae){s.enabled!==!1&&ae.preventDefault()}function Re(ae){H.push(ae)}function qe(ae){delete Q[ae.pointerId];for(let Xe=0;Xe<H.length;Xe++)if(H[Xe].pointerId==ae.pointerId){H.splice(Xe,1);return}}function it(ae){let Xe=Q[ae.pointerId];Xe===void 0&&(Xe=new cn,Q[ae.pointerId]=Xe),Xe.set(ae.pageX,ae.pageY)}function st(ae){const Xe=ae.pointerId===H[0].pointerId?H[1]:H[0];return Q[Xe.pointerId]}s.domElement.addEventListener("contextmenu",X),s.domElement.addEventListener("pointerdown",un),s.domElement.addEventListener("pointercancel",Kn),s.domElement.addEventListener("wheel",dn,{passive:!1}),this.update()}}function Ys(h){if(h===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return h}function ny(h,t){h.prototype=Object.create(t.prototype),h.prototype.constructor=h,h.__proto__=t}/*!
 * GSAP 3.11.5
 * https://greensock.com
 *
 * @license Copyright 2008-2023, GreenSock. All rights reserved.
 * Subject to the terms at https://greensock.com/standard-license or for
 * Club GreenSock members, the agreement issued with that membership.
 * @author: Jack Doyle, jack@greensock.com
*/var Rr={autoSleep:120,force3D:"auto",nullTargetWarn:1,units:{lineHeight:""}},ic={duration:.5,overwrite:!1,delay:0},Cm,Zi,Mi,Ss=1e8,Yi=1/Ss,cm=Math.PI*2,ND=cm/4,FD=0,iy=Math.sqrt,OD=Math.cos,BD=Math.sin,Ui=function(t){return typeof t=="string"},fi=function(t){return typeof t=="function"},Js=function(t){return typeof t=="number"},Pm=function(t){return typeof t>"u"},Ts=function(t){return typeof t=="object"},dr=function(t){return t!==!1},Lm=function(){return typeof window<"u"},_f=function(t){return fi(t)||Ui(t)},ry=typeof ArrayBuffer=="function"&&ArrayBuffer.isView||function(){},Ki=Array.isArray,hm=/(?:-?\.?\d|\.)+/gi,sy=/[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,Xl=/[-+=.]*\d+[.e-]*\d*[a-z%]*/g,Xp=/[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,ay=/[+-]=-?[.\d]+/,oy=/[^,'"\[\]\s]+/gi,zD=/^[+\-=e\s\d]*\d+[.\d]*([a-z]*|%)\s*$/i,si,Fr,um,Dm,Cr={},wf={},ly,cy=function(t){return(wf=Po(t,Cr))&&gr},Um=function(t,i){return console.warn("Invalid property",t,"set to",i,"Missing plugin? gsap.registerPlugin()")},Af=function(t,i){return!i&&console.warn(t)},hy=function(t,i){return t&&(Cr[t]=i)&&wf&&(wf[t]=i)||Cr},Th=function(){return 0},kD={suppressEvents:!0,isStart:!0,kill:!1},vf={suppressEvents:!0,kill:!1},GD={suppressEvents:!0},Im={},Ta=[],fm={},uy,wr={},qp={},cv=30,yf=[],Nm="",Fm=function(t){var i=t[0],s,o;if(Ts(i)||fi(i)||(t=[t]),!(s=(i._gsap||{}).harness)){for(o=yf.length;o--&&!yf[o].targetTest(i););s=yf[o]}for(o=t.length;o--;)t[o]&&(t[o]._gsap||(t[o]._gsap=new Ny(t[o],s)))||t.splice(o,1);return t},Eo=function(t){return t._gsap||Fm(kr(t))[0]._gsap},fy=function(t,i,s){return(s=t[i])&&fi(s)?t[i]():Pm(s)&&t.getAttribute&&t.getAttribute(i)||s},pr=function(t,i){return(t=t.split(",")).forEach(i)||t},_i=function(t){return Math.round(t*1e5)/1e5||0},Oi=function(t){return Math.round(t*1e7)/1e7||0},$l=function(t,i){var s=i.charAt(0),o=parseFloat(i.substr(2));return t=parseFloat(t),s==="+"?t+o:s==="-"?t-o:s==="*"?t*o:t/o},HD=function(t,i){for(var s=i.length,o=0;t.indexOf(i[o])<0&&++o<s;);return o<s},Rf=function(){var t=Ta.length,i=Ta.slice(0),s,o;for(fm={},Ta.length=0,s=0;s<t;s++)o=i[s],o&&o._lazy&&(o.render(o._lazy[0],o._lazy[1],!0)._lazy=0)},dy=function(t,i,s,o){Ta.length&&!Zi&&Rf(),t.render(i,s,Zi&&i<0&&(t._initted||t._startAt)),Ta.length&&!Zi&&Rf()},py=function(t){var i=parseFloat(t);return(i||i===0)&&(t+"").match(oy).length<2?i:Ui(t)?t.trim():t},my=function(t){return t},Vr=function(t,i){for(var s in i)s in t||(t[s]=i[s]);return t},VD=function(t){return function(i,s){for(var o in s)o in i||o==="duration"&&t||o==="ease"||(i[o]=s[o])}},Po=function(t,i){for(var s in i)t[s]=i[s];return t},hv=function h(t,i){for(var s in i)s!=="__proto__"&&s!=="constructor"&&s!=="prototype"&&(t[s]=Ts(i[s])?h(t[s]||(t[s]={}),i[s]):i[s]);return t},Cf=function(t,i){var s={},o;for(o in t)o in i||(s[o]=t[o]);return s},yh=function(t){var i=t.parent||si,s=t.keyframes?VD(Ki(t.keyframes)):Vr;if(dr(t.inherit))for(;i;)s(t,i.vars.defaults),i=i.parent||i._dp;return t},WD=function(t,i){for(var s=t.length,o=s===i.length;o&&s--&&t[s]===i[s];);return s<0},gy=function(t,i,s,o,f){var m=t[o],p;if(f)for(p=i[f];m&&m[f]>p;)m=m._prev;return m?(i._next=m._next,m._next=i):(i._next=t[s],t[s]=i),i._next?i._next._prev=i:t[o]=i,i._prev=m,i.parent=i._dp=t,i},Of=function(t,i,s,o){s===void 0&&(s="_first"),o===void 0&&(o="_last");var f=i._prev,m=i._next;f?f._next=m:t[s]===i&&(t[s]=m),m?m._prev=f:t[o]===i&&(t[o]=f),i._next=i._prev=i.parent=null},Ca=function(t,i){t.parent&&(!i||t.parent.autoRemoveChildren)&&t.parent.remove(t),t._act=0},bo=function(t,i){if(t&&(!i||i._end>t._dur||i._start<0))for(var s=t;s;)s._dirty=1,s=s.parent;return t},XD=function(t){for(var i=t.parent;i&&i.parent;)i._dirty=1,i.totalDuration(),i=i.parent;return t},dm=function(t,i,s,o){return t._startAt&&(Zi?t._startAt.revert(vf):t.vars.immediateRender&&!t.vars.autoRevert||t._startAt.render(i,!0,o))},qD=function h(t){return!t||t._ts&&h(t.parent)},uv=function(t){return t._repeat?rc(t._tTime,t=t.duration()+t._rDelay)*t:0},rc=function(t,i){var s=Math.floor(t/=i);return t&&s===t?s-1:s},Pf=function(t,i){return(t-i._start)*i._ts+(i._ts>=0?0:i._dirty?i.totalDuration():i._tDur)},Bf=function(t){return t._end=Oi(t._start+(t._tDur/Math.abs(t._ts||t._rts||Yi)||0))},zf=function(t,i){var s=t._dp;return s&&s.smoothChildTiming&&t._ts&&(t._start=Oi(s._time-(t._ts>0?i/t._ts:((t._dirty?t.totalDuration():t._tDur)-i)/-t._ts)),Bf(t),s._dirty||bo(s,t)),t},_y=function(t,i){var s;if((i._time||i._initted&&!i._dur)&&(s=Pf(t.rawTime(),i),(!i._dur||Dh(0,i.totalDuration(),s)-i._tTime>Yi)&&i.render(s,!0)),bo(t,i)._dp&&t._initted&&t._time>=t._dur&&t._ts){if(t._dur<t.duration())for(s=t;s._dp;)s.rawTime()>=0&&s.totalTime(s._tTime),s=s._dp;t._zTime=-1e-8}},ys=function(t,i,s,o){return i.parent&&Ca(i),i._start=Oi((Js(s)?s:s||t!==si?Nr(t,s,i):t._time)+i._delay),i._end=Oi(i._start+(i.totalDuration()/Math.abs(i.timeScale())||0)),gy(t,i,"_first","_last",t._sort?"_start":0),pm(i)||(t._recent=i),o||_y(t,i),t._ts<0&&zf(t,t._tTime),t},xy=function(t,i){return(Cr.ScrollTrigger||Um("scrollTrigger",i))&&Cr.ScrollTrigger.create(i,t)},vy=function(t,i,s,o,f){if(Bm(t,i,f),!t._initted)return 1;if(!s&&t._pt&&!Zi&&(t._dur&&t.vars.lazy!==!1||!t._dur&&t.vars.lazy)&&uy!==Ar.frame)return Ta.push(t),t._lazy=[f,o],1},YD=function h(t){var i=t.parent;return i&&i._ts&&i._initted&&!i._lock&&(i.rawTime()<0||h(i))},pm=function(t){var i=t.data;return i==="isFromStart"||i==="isStart"},ZD=function(t,i,s,o){var f=t.ratio,m=i<0||!i&&(!t._start&&YD(t)&&!(!t._initted&&pm(t))||(t._ts<0||t._dp._ts<0)&&!pm(t))?0:1,p=t._rDelay,v=0,x,M,b;if(p&&t._repeat&&(v=Dh(0,t._tDur,i),M=rc(v,p),t._yoyo&&M&1&&(m=1-m),M!==rc(t._tTime,p)&&(f=1-m,t.vars.repeatRefresh&&t._initted&&t.invalidate())),m!==f||Zi||o||t._zTime===Yi||!i&&t._zTime){if(!t._initted&&vy(t,i,o,s,v))return;for(b=t._zTime,t._zTime=i||(s?Yi:0),s||(s=i&&!b),t.ratio=m,t._from&&(m=1-m),t._time=0,t._tTime=v,x=t._pt;x;)x.r(m,x.d),x=x._next;i<0&&dm(t,i,s,!0),t._onUpdate&&!s&&Gr(t,"onUpdate"),v&&t._repeat&&!s&&t.parent&&Gr(t,"onRepeat"),(i>=t._tDur||i<0)&&t.ratio===m&&(m&&Ca(t,1),!s&&!Zi&&(Gr(t,m?"onComplete":"onReverseComplete",!0),t._prom&&t._prom()))}else t._zTime||(t._zTime=i)},KD=function(t,i,s){var o;if(s>i)for(o=t._first;o&&o._start<=s;){if(o.data==="isPause"&&o._start>i)return o;o=o._next}else for(o=t._last;o&&o._start>=s;){if(o.data==="isPause"&&o._start<i)return o;o=o._prev}},sc=function(t,i,s,o){var f=t._repeat,m=Oi(i)||0,p=t._tTime/t._tDur;return p&&!o&&(t._time*=m/t._dur),t._dur=m,t._tDur=f?f<0?1e10:Oi(m*(f+1)+t._rDelay*f):m,p>0&&!o&&zf(t,t._tTime=t._tDur*p),t.parent&&Bf(t),s||bo(t.parent,t),t},fv=function(t){return t instanceof hr?bo(t):sc(t,t._dur)},$D={_start:0,endTime:Th,totalDuration:Th},Nr=function h(t,i,s){var o=t.labels,f=t._recent||$D,m=t.duration()>=Ss?f.endTime(!1):t._dur,p,v,x;return Ui(i)&&(isNaN(i)||i in o)?(v=i.charAt(0),x=i.substr(-1)==="%",p=i.indexOf("="),v==="<"||v===">"?(p>=0&&(i=i.replace(/=/,"")),(v==="<"?f._start:f.endTime(f._repeat>=0))+(parseFloat(i.substr(1))||0)*(x?(p<0?f:s).totalDuration()/100:1)):p<0?(i in o||(o[i]=m),o[i]):(v=parseFloat(i.charAt(p-1)+i.substr(p+1)),x&&s&&(v=v/100*(Ki(s)?s[0]:s).totalDuration()),p>1?h(t,i.substr(0,p-1),s)+v:m+v)):i==null?m:+i},Mh=function(t,i,s){var o=Js(i[1]),f=(o?2:1)+(t<2?0:1),m=i[f],p,v;if(o&&(m.duration=i[1]),m.parent=s,t){for(p=m,v=s;v&&!("immediateRender"in p);)p=v.vars.defaults||{},v=dr(v.vars.inherit)&&v.parent;m.immediateRender=dr(p.immediateRender),t<2?m.runBackwards=1:m.startAt=i[f-1]}return new Ai(i[0],m,i[f+1])},La=function(t,i){return t||t===0?i(t):i},Dh=function(t,i,s){return s<t?t:s>i?i:s},qi=function(t,i){return!Ui(t)||!(i=zD.exec(t))?"":i[1]},JD=function(t,i,s){return La(s,function(o){return Dh(t,i,o)})},mm=[].slice,yy=function(t,i){return t&&Ts(t)&&"length"in t&&(!i&&!t.length||t.length-1 in t&&Ts(t[0]))&&!t.nodeType&&t!==Fr},jD=function(t,i,s){return s===void 0&&(s=[]),t.forEach(function(o){var f;return Ui(o)&&!i||yy(o,1)?(f=s).push.apply(f,kr(o)):s.push(o)})||s},kr=function(t,i,s){return Mi&&!i&&Mi.selector?Mi.selector(t):Ui(t)&&!s&&(um||!ac())?mm.call((i||Dm).querySelectorAll(t),0):Ki(t)?jD(t,s):yy(t)?mm.call(t,0):t?[t]:[]},gm=function(t){return t=kr(t)[0]||Af("Invalid scope")||{},function(i){var s=t.current||t.nativeElement||t;return kr(i,s.querySelectorAll?s:s===t?Af("Invalid scope")||Dm.createElement("div"):t)}},My=function(t){return t.sort(function(){return .5-Math.random()})},Sy=function(t){if(fi(t))return t;var i=Ts(t)?t:{each:t},s=To(i.ease),o=i.from||0,f=parseFloat(i.base)||0,m={},p=o>0&&o<1,v=isNaN(o)||p,x=i.axis,M=o,b=o;return Ui(o)?M=b={center:.5,edges:.5,end:1}[o]||0:!p&&v&&(M=o[0],b=o[1]),function(T,P,N){var L=(N||i).length,D=m[L],R,W,V,q,H,Q,re,oe,B;if(!D){if(B=i.grid==="auto"?0:(i.grid||[1,Ss])[1],!B){for(re=-1e8;re<(re=N[B++].getBoundingClientRect().left)&&B<L;);B--}for(D=m[L]=[],R=v?Math.min(B,L)*M-.5:o%B,W=B===Ss?0:v?L*b/B-.5:o/B|0,re=0,oe=Ss,Q=0;Q<L;Q++)V=Q%B-R,q=W-(Q/B|0),D[Q]=H=x?Math.abs(x==="y"?q:V):iy(V*V+q*q),H>re&&(re=H),H<oe&&(oe=H);o==="random"&&My(D),D.max=re-oe,D.min=oe,D.v=L=(parseFloat(i.amount)||parseFloat(i.each)*(B>L?L-1:x?x==="y"?L/B:B:Math.max(B,L/B))||0)*(o==="edges"?-1:1),D.b=L<0?f-L:f,D.u=qi(i.amount||i.each)||0,s=s&&L<0?Dy(s):s}return L=(D[T]-D.min)/D.max||0,Oi(D.b+(s?s(L):L)*D.v)+D.u}},_m=function(t){var i=Math.pow(10,((t+"").split(".")[1]||"").length);return function(s){var o=Oi(Math.round(parseFloat(s)/t)*t*i);return(o-o%1)/i+(Js(s)?0:qi(s))}},Ey=function(t,i){var s=Ki(t),o,f;return!s&&Ts(t)&&(o=s=t.radius||Ss,t.values?(t=kr(t.values),(f=!Js(t[0]))&&(o*=o)):t=_m(t.increment)),La(i,s?fi(t)?function(m){return f=t(m),Math.abs(f-m)<=o?f:m}:function(m){for(var p=parseFloat(f?m.x:m),v=parseFloat(f?m.y:0),x=Ss,M=0,b=t.length,T,P;b--;)f?(T=t[b].x-p,P=t[b].y-v,T=T*T+P*P):T=Math.abs(t[b]-p),T<x&&(x=T,M=b);return M=!o||x<=o?t[M]:m,f||M===m||Js(m)?M:M+qi(m)}:_m(t))},by=function(t,i,s,o){return La(Ki(t)?!i:s===!0?!!(s=0):!o,function(){return Ki(t)?t[~~(Math.random()*t.length)]:(s=s||1e-5)&&(o=s<1?Math.pow(10,(s+"").length-2):1)&&Math.floor(Math.round((t-s/2+Math.random()*(i-t+s*.99))/s)*s*o)/o})},QD=function(){for(var t=arguments.length,i=new Array(t),s=0;s<t;s++)i[s]=arguments[s];return function(o){return i.reduce(function(f,m){return m(f)},o)}},eU=function(t,i){return function(s){return t(parseFloat(s))+(i||qi(s))}},tU=function(t,i,s){return wy(t,i,0,1,s)},Ty=function(t,i,s){return La(s,function(o){return t[~~i(o)]})},nU=function h(t,i,s){var o=i-t;return Ki(t)?Ty(t,h(0,t.length),i):La(s,function(f){return(o+(f-t)%o)%o+t})},iU=function h(t,i,s){var o=i-t,f=o*2;return Ki(t)?Ty(t,h(0,t.length-1),i):La(s,function(m){return m=(f+(m-t)%f)%f||0,t+(m>o?f-m:m)})},wh=function(t){for(var i=0,s="",o,f,m,p;~(o=t.indexOf("random(",i));)m=t.indexOf(")",o),p=t.charAt(o+7)==="[",f=t.substr(o+7,m-o-7).match(p?oy:hm),s+=t.substr(i,o-i)+by(p?f:+f[0],p?0:+f[1],+f[2]||1e-5),i=m+1;return s+t.substr(i,t.length-i)},wy=function(t,i,s,o,f){var m=i-t,p=o-s;return La(f,function(v){return s+((v-t)/m*p||0)})},rU=function h(t,i,s,o){var f=isNaN(t+i)?0:function(P){return(1-P)*t+P*i};if(!f){var m=Ui(t),p={},v,x,M,b,T;if(s===!0&&(o=1)&&(s=null),m)t={p:t},i={p:i};else if(Ki(t)&&!Ki(i)){for(M=[],b=t.length,T=b-2,x=1;x<b;x++)M.push(h(t[x-1],t[x]));b--,f=function(N){N*=b;var L=Math.min(T,~~N);return M[L](N-L)},s=i}else o||(t=Po(Ki(t)?[]:{},t));if(!M){for(v in i)Om.call(p,t,v,"get",i[v]);f=function(N){return Gm(N,p)||(m?t.p:t)}}}return La(s,f)},dv=function(t,i,s){var o=t.labels,f=Ss,m,p,v;for(m in o)p=o[m]-i,p<0==!!s&&p&&f>(p=Math.abs(p))&&(v=m,f=p);return v},Gr=function(t,i,s){var o=t.vars,f=o[i],m=Mi,p=t._ctx,v,x,M;if(f)return v=o[i+"Params"],x=o.callbackScope||t,s&&Ta.length&&Rf(),p&&(Mi=p),M=v?f.apply(x,v):f.call(x),Mi=m,M},gh=function(t){return Ca(t),t.scrollTrigger&&t.scrollTrigger.kill(!!Zi),t.progress()<1&&Gr(t,"onInterrupt"),t},ql,Ay=[],Ry=function(t){if(!Lm()){Ay.push(t);return}t=!t.name&&t.default||t;var i=t.name,s=fi(t),o=i&&!s&&t.init?function(){this._props=[]}:t,f={init:Th,render:Gm,add:Om,kill:yU,modifier:vU,rawVars:0},m={targetTest:0,get:0,getSetter:km,aliases:{},register:0};if(ac(),t!==o){if(wr[i])return;Vr(o,Vr(Cf(t,f),m)),Po(o.prototype,Po(f,Cf(t,m))),wr[o.prop=i]=o,t.targetTest&&(yf.push(o),Im[i]=1),i=(i==="css"?"CSS":i.charAt(0).toUpperCase()+i.substr(1))+"Plugin"}hy(i,o),t.register&&t.register(gr,o,mr)},Zn=255,_h={aqua:[0,Zn,Zn],lime:[0,Zn,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,Zn],navy:[0,0,128],white:[Zn,Zn,Zn],olive:[128,128,0],yellow:[Zn,Zn,0],orange:[Zn,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[Zn,0,0],pink:[Zn,192,203],cyan:[0,Zn,Zn],transparent:[Zn,Zn,Zn,0]},Yp=function(t,i,s){return t+=t<0?1:t>1?-1:0,(t*6<1?i+(s-i)*t*6:t<.5?s:t*3<2?i+(s-i)*(2/3-t)*6:i)*Zn+.5|0},Cy=function(t,i,s){var o=t?Js(t)?[t>>16,t>>8&Zn,t&Zn]:0:_h.black,f,m,p,v,x,M,b,T,P,N;if(!o){if(t.substr(-1)===","&&(t=t.substr(0,t.length-1)),_h[t])o=_h[t];else if(t.charAt(0)==="#"){if(t.length<6&&(f=t.charAt(1),m=t.charAt(2),p=t.charAt(3),t="#"+f+f+m+m+p+p+(t.length===5?t.charAt(4)+t.charAt(4):"")),t.length===9)return o=parseInt(t.substr(1,6),16),[o>>16,o>>8&Zn,o&Zn,parseInt(t.substr(7),16)/255];t=parseInt(t.substr(1),16),o=[t>>16,t>>8&Zn,t&Zn]}else if(t.substr(0,3)==="hsl"){if(o=N=t.match(hm),!i)v=+o[0]%360/360,x=+o[1]/100,M=+o[2]/100,m=M<=.5?M*(x+1):M+x-M*x,f=M*2-m,o.length>3&&(o[3]*=1),o[0]=Yp(v+1/3,f,m),o[1]=Yp(v,f,m),o[2]=Yp(v-1/3,f,m);else if(~t.indexOf("="))return o=t.match(sy),s&&o.length<4&&(o[3]=1),o}else o=t.match(hm)||_h.transparent;o=o.map(Number)}return i&&!N&&(f=o[0]/Zn,m=o[1]/Zn,p=o[2]/Zn,b=Math.max(f,m,p),T=Math.min(f,m,p),M=(b+T)/2,b===T?v=x=0:(P=b-T,x=M>.5?P/(2-b-T):P/(b+T),v=b===f?(m-p)/P+(m<p?6:0):b===m?(p-f)/P+2:(f-m)/P+4,v*=60),o[0]=~~(v+.5),o[1]=~~(x*100+.5),o[2]=~~(M*100+.5)),s&&o.length<4&&(o[3]=1),o},Py=function(t){var i=[],s=[],o=-1;return t.split(wa).forEach(function(f){var m=f.match(Xl)||[];i.push.apply(i,m),s.push(o+=m.length+1)}),i.c=s,i},pv=function(t,i,s){var o="",f=(t+o).match(wa),m=i?"hsla(":"rgba(",p=0,v,x,M,b;if(!f)return t;if(f=f.map(function(T){return(T=Cy(T,i,1))&&m+(i?T[0]+","+T[1]+"%,"+T[2]+"%,"+T[3]:T.join(","))+")"}),s&&(M=Py(t),v=s.c,v.join(o)!==M.c.join(o)))for(x=t.replace(wa,"1").split(Xl),b=x.length-1;p<b;p++)o+=x[p]+(~v.indexOf(p)?f.shift()||m+"0,0,0,0)":(M.length?M:f.length?f:s).shift());if(!x)for(x=t.split(wa),b=x.length-1;p<b;p++)o+=x[p]+f[p];return o+x[b]},wa=function(){var h="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b",t;for(t in _h)h+="|"+t+"\\b";return new RegExp(h+")","gi")}(),sU=/hsl[a]?\(/,Ly=function(t){var i=t.join(" "),s;if(wa.lastIndex=0,wa.test(i))return s=sU.test(i),t[1]=pv(t[1],s),t[0]=pv(t[0],s,Py(t[1])),!0},Ah,Ar=function(){var h=Date.now,t=500,i=33,s=h(),o=s,f=1e3/240,m=f,p=[],v,x,M,b,T,P,N=function L(D){var R=h()-o,W=D===!0,V,q,H,Q;if(R>t&&(s+=R-i),o+=R,H=o-s,V=H-m,(V>0||W)&&(Q=++b.frame,T=H-b.time*1e3,b.time=H=H/1e3,m+=V+(V>=f?4:f-V),q=1),W||(v=x(L)),q)for(P=0;P<p.length;P++)p[P](H,T,Q,D)};return b={time:0,frame:0,tick:function(){N(!0)},deltaRatio:function(D){return T/(1e3/(D||60))},wake:function(){ly&&(!um&&Lm()&&(Fr=um=window,Dm=Fr.document||{},Cr.gsap=gr,(Fr.gsapVersions||(Fr.gsapVersions=[])).push(gr.version),cy(wf||Fr.GreenSockGlobals||!Fr.gsap&&Fr||{}),M=Fr.requestAnimationFrame,Ay.forEach(Ry)),v&&b.sleep(),x=M||function(D){return setTimeout(D,m-b.time*1e3+1|0)},Ah=1,N(2))},sleep:function(){(M?Fr.cancelAnimationFrame:clearTimeout)(v),Ah=0,x=Th},lagSmoothing:function(D,R){t=D||1/0,i=Math.min(R||33,t)},fps:function(D){f=1e3/(D||240),m=b.time*1e3+f},add:function(D,R,W){var V=R?function(q,H,Q,re){D(q,H,Q,re),b.remove(V)}:D;return b.remove(D),p[W?"unshift":"push"](V),ac(),V},remove:function(D,R){~(R=p.indexOf(D))&&p.splice(R,1)&&P>=R&&P--},_listeners:p},b}(),ac=function(){return!Ah&&Ar.wake()},Dn={},aU=/^[\d.\-M][\d.\-,\s]/,oU=/["']/g,lU=function(t){for(var i={},s=t.substr(1,t.length-3).split(":"),o=s[0],f=1,m=s.length,p,v,x;f<m;f++)v=s[f],p=f!==m-1?v.lastIndexOf(","):v.length,x=v.substr(0,p),i[o]=isNaN(x)?x.replace(oU,"").trim():+x,o=v.substr(p+1).trim();return i},cU=function(t){var i=t.indexOf("(")+1,s=t.indexOf(")"),o=t.indexOf("(",i);return t.substring(i,~o&&o<s?t.indexOf(")",s+1):s)},hU=function(t){var i=(t+"").split("("),s=Dn[i[0]];return s&&i.length>1&&s.config?s.config.apply(null,~t.indexOf("{")?[lU(i[1])]:cU(t).split(",").map(py)):Dn._CE&&aU.test(t)?Dn._CE("",t):s},Dy=function(t){return function(i){return 1-t(1-i)}},Uy=function h(t,i){for(var s=t._first,o;s;)s instanceof hr?h(s,i):s.vars.yoyoEase&&(!s._yoyo||!s._repeat)&&s._yoyo!==i&&(s.timeline?h(s.timeline,i):(o=s._ease,s._ease=s._yEase,s._yEase=o,s._yoyo=i)),s=s._next},To=function(t,i){return t&&(fi(t)?t:Dn[t]||hU(t))||i},Uo=function(t,i,s,o){s===void 0&&(s=function(v){return 1-i(1-v)}),o===void 0&&(o=function(v){return v<.5?i(v*2)/2:1-i((1-v)*2)/2});var f={easeIn:i,easeOut:s,easeInOut:o},m;return pr(t,function(p){Dn[p]=Cr[p]=f,Dn[m=p.toLowerCase()]=s;for(var v in f)Dn[m+(v==="easeIn"?".in":v==="easeOut"?".out":".inOut")]=Dn[p+"."+v]=f[v]}),f},Iy=function(t){return function(i){return i<.5?(1-t(1-i*2))/2:.5+t((i-.5)*2)/2}},Zp=function h(t,i,s){var o=i>=1?i:1,f=(s||(t?.3:.45))/(i<1?i:1),m=f/cm*(Math.asin(1/o)||0),p=function(M){return M===1?1:o*Math.pow(2,-10*M)*BD((M-m)*f)+1},v=t==="out"?p:t==="in"?function(x){return 1-p(1-x)}:Iy(p);return f=cm/f,v.config=function(x,M){return h(t,x,M)},v},Kp=function h(t,i){i===void 0&&(i=1.70158);var s=function(m){return m?--m*m*((i+1)*m+i)+1:0},o=t==="out"?s:t==="in"?function(f){return 1-s(1-f)}:Iy(s);return o.config=function(f){return h(t,f)},o};pr("Linear,Quad,Cubic,Quart,Quint,Strong",function(h,t){var i=t<5?t+1:t;Uo(h+",Power"+(i-1),t?function(s){return Math.pow(s,i)}:function(s){return s},function(s){return 1-Math.pow(1-s,i)},function(s){return s<.5?Math.pow(s*2,i)/2:1-Math.pow((1-s)*2,i)/2})});Dn.Linear.easeNone=Dn.none=Dn.Linear.easeIn;Uo("Elastic",Zp("in"),Zp("out"),Zp());(function(h,t){var i=1/t,s=2*i,o=2.5*i,f=function(p){return p<i?h*p*p:p<s?h*Math.pow(p-1.5/t,2)+.75:p<o?h*(p-=2.25/t)*p+.9375:h*Math.pow(p-2.625/t,2)+.984375};Uo("Bounce",function(m){return 1-f(1-m)},f)})(7.5625,2.75);Uo("Expo",function(h){return h?Math.pow(2,10*(h-1)):0});Uo("Circ",function(h){return-(iy(1-h*h)-1)});Uo("Sine",function(h){return h===1?1:-OD(h*ND)+1});Uo("Back",Kp("in"),Kp("out"),Kp());Dn.SteppedEase=Dn.steps=Cr.SteppedEase={config:function(t,i){t===void 0&&(t=1);var s=1/t,o=t+(i?0:1),f=i?1:0,m=1-Yi;return function(p){return((o*Dh(0,m,p)|0)+f)*s}}};ic.ease=Dn["quad.out"];pr("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt",function(h){return Nm+=h+","+h+"Params,"});var Ny=function(t,i){this.id=FD++,t._gsap=this,this.target=t,this.harness=i,this.get=i?i.get:fy,this.set=i?i.getSetter:km},oc=function(){function h(i){this.vars=i,this._delay=+i.delay||0,(this._repeat=i.repeat===1/0?-2:i.repeat||0)&&(this._rDelay=i.repeatDelay||0,this._yoyo=!!i.yoyo||!!i.yoyoEase),this._ts=1,sc(this,+i.duration,1,1),this.data=i.data,Mi&&(this._ctx=Mi,Mi.data.push(this)),Ah||Ar.wake()}var t=h.prototype;return t.delay=function(s){return s||s===0?(this.parent&&this.parent.smoothChildTiming&&this.startTime(this._start+s-this._delay),this._delay=s,this):this._delay},t.duration=function(s){return arguments.length?this.totalDuration(this._repeat>0?s+(s+this._rDelay)*this._repeat:s):this.totalDuration()&&this._dur},t.totalDuration=function(s){return arguments.length?(this._dirty=0,sc(this,this._repeat<0?s:(s-this._repeat*this._rDelay)/(this._repeat+1))):this._tDur},t.totalTime=function(s,o){if(ac(),!arguments.length)return this._tTime;var f=this._dp;if(f&&f.smoothChildTiming&&this._ts){for(zf(this,s),!f._dp||f.parent||_y(f,this);f&&f.parent;)f.parent._time!==f._start+(f._ts>=0?f._tTime/f._ts:(f.totalDuration()-f._tTime)/-f._ts)&&f.totalTime(f._tTime,!0),f=f.parent;!this.parent&&this._dp.autoRemoveChildren&&(this._ts>0&&s<this._tDur||this._ts<0&&s>0||!this._tDur&&!s)&&ys(this._dp,this,this._start-this._delay)}return(this._tTime!==s||!this._dur&&!o||this._initted&&Math.abs(this._zTime)===Yi||!s&&!this._initted&&(this.add||this._ptLookup))&&(this._ts||(this._pTime=s),dy(this,s,o)),this},t.time=function(s,o){return arguments.length?this.totalTime(Math.min(this.totalDuration(),s+uv(this))%(this._dur+this._rDelay)||(s?this._dur:0),o):this._time},t.totalProgress=function(s,o){return arguments.length?this.totalTime(this.totalDuration()*s,o):this.totalDuration()?Math.min(1,this._tTime/this._tDur):this.ratio},t.progress=function(s,o){return arguments.length?this.totalTime(this.duration()*(this._yoyo&&!(this.iteration()&1)?1-s:s)+uv(this),o):this.duration()?Math.min(1,this._time/this._dur):this.ratio},t.iteration=function(s,o){var f=this.duration()+this._rDelay;return arguments.length?this.totalTime(this._time+(s-1)*f,o):this._repeat?rc(this._tTime,f)+1:1},t.timeScale=function(s){if(!arguments.length)return this._rts===-1e-8?0:this._rts;if(this._rts===s)return this;var o=this.parent&&this._ts?Pf(this.parent._time,this):this._tTime;return this._rts=+s||0,this._ts=this._ps||s===-1e-8?0:this._rts,this.totalTime(Dh(-Math.abs(this._delay),this._tDur,o),!0),Bf(this),XD(this)},t.paused=function(s){return arguments.length?(this._ps!==s&&(this._ps=s,s?(this._pTime=this._tTime||Math.max(-this._delay,this.rawTime()),this._ts=this._act=0):(ac(),this._ts=this._rts,this.totalTime(this.parent&&!this.parent.smoothChildTiming?this.rawTime():this._tTime||this._pTime,this.progress()===1&&Math.abs(this._zTime)!==Yi&&(this._tTime-=Yi)))),this):this._ps},t.startTime=function(s){if(arguments.length){this._start=s;var o=this.parent||this._dp;return o&&(o._sort||!this.parent)&&ys(o,this,s-this._delay),this}return this._start},t.endTime=function(s){return this._start+(dr(s)?this.totalDuration():this.duration())/Math.abs(this._ts||1)},t.rawTime=function(s){var o=this.parent||this._dp;return o?s&&(!this._ts||this._repeat&&this._time&&this.totalProgress()<1)?this._tTime%(this._dur+this._rDelay):this._ts?Pf(o.rawTime(s),this):this._tTime:this._tTime},t.revert=function(s){s===void 0&&(s=GD);var o=Zi;return Zi=s,(this._initted||this._startAt)&&(this.timeline&&this.timeline.revert(s),this.totalTime(-.01,s.suppressEvents)),this.data!=="nested"&&s.kill!==!1&&this.kill(),Zi=o,this},t.globalTime=function(s){for(var o=this,f=arguments.length?s:o.rawTime();o;)f=o._start+f/(o._ts||1),o=o._dp;return!this.parent&&this._sat?this._sat.vars.immediateRender?-1:this._sat.globalTime(s):f},t.repeat=function(s){return arguments.length?(this._repeat=s===1/0?-2:s,fv(this)):this._repeat===-2?1/0:this._repeat},t.repeatDelay=function(s){if(arguments.length){var o=this._time;return this._rDelay=s,fv(this),o?this.time(o):this}return this._rDelay},t.yoyo=function(s){return arguments.length?(this._yoyo=s,this):this._yoyo},t.seek=function(s,o){return this.totalTime(Nr(this,s),dr(o))},t.restart=function(s,o){return this.play().totalTime(s?-this._delay:0,dr(o))},t.play=function(s,o){return s!=null&&this.seek(s,o),this.reversed(!1).paused(!1)},t.reverse=function(s,o){return s!=null&&this.seek(s||this.totalDuration(),o),this.reversed(!0).paused(!1)},t.pause=function(s,o){return s!=null&&this.seek(s,o),this.paused(!0)},t.resume=function(){return this.paused(!1)},t.reversed=function(s){return arguments.length?(!!s!==this.reversed()&&this.timeScale(-this._rts||(s?-1e-8:0)),this):this._rts<0},t.invalidate=function(){return this._initted=this._act=0,this._zTime=-1e-8,this},t.isActive=function(){var s=this.parent||this._dp,o=this._start,f;return!!(!s||this._ts&&this._initted&&s.isActive()&&(f=s.rawTime(!0))>=o&&f<this.endTime(!0)-Yi)},t.eventCallback=function(s,o,f){var m=this.vars;return arguments.length>1?(o?(m[s]=o,f&&(m[s+"Params"]=f),s==="onUpdate"&&(this._onUpdate=o)):delete m[s],this):m[s]},t.then=function(s){var o=this;return new Promise(function(f){var m=fi(s)?s:my,p=function(){var x=o.then;o.then=null,fi(m)&&(m=m(o))&&(m.then||m===o)&&(o.then=x),f(m),o.then=x};o._initted&&o.totalProgress()===1&&o._ts>=0||!o._tTime&&o._ts<0?p():o._prom=p})},t.kill=function(){gh(this)},h}();Vr(oc.prototype,{_time:0,_start:0,_end:0,_tTime:0,_tDur:0,_dirty:0,_repeat:0,_yoyo:!1,parent:null,_initted:!1,_rDelay:0,_ts:1,_dp:0,ratio:0,_zTime:-1e-8,_prom:0,_ps:!1,_rts:1});var hr=function(h){ny(t,h);function t(s,o){var f;return s===void 0&&(s={}),f=h.call(this,s)||this,f.labels={},f.smoothChildTiming=!!s.smoothChildTiming,f.autoRemoveChildren=!!s.autoRemoveChildren,f._sort=dr(s.sortChildren),si&&ys(s.parent||si,Ys(f),o),s.reversed&&f.reverse(),s.paused&&f.paused(!0),s.scrollTrigger&&xy(Ys(f),s.scrollTrigger),f}var i=t.prototype;return i.to=function(o,f,m){return Mh(0,arguments,this),this},i.from=function(o,f,m){return Mh(1,arguments,this),this},i.fromTo=function(o,f,m,p){return Mh(2,arguments,this),this},i.set=function(o,f,m){return f.duration=0,f.parent=this,yh(f).repeatDelay||(f.repeat=0),f.immediateRender=!!f.immediateRender,new Ai(o,f,Nr(this,m),1),this},i.call=function(o,f,m){return ys(this,Ai.delayedCall(0,o,f),m)},i.staggerTo=function(o,f,m,p,v,x,M){return m.duration=f,m.stagger=m.stagger||p,m.onComplete=x,m.onCompleteParams=M,m.parent=this,new Ai(o,m,Nr(this,v)),this},i.staggerFrom=function(o,f,m,p,v,x,M){return m.runBackwards=1,yh(m).immediateRender=dr(m.immediateRender),this.staggerTo(o,f,m,p,v,x,M)},i.staggerFromTo=function(o,f,m,p,v,x,M,b){return p.startAt=m,yh(p).immediateRender=dr(p.immediateRender),this.staggerTo(o,f,p,v,x,M,b)},i.render=function(o,f,m){var p=this._time,v=this._dirty?this.totalDuration():this._tDur,x=this._dur,M=o<=0?0:Oi(o),b=this._zTime<0!=o<0&&(this._initted||!x),T,P,N,L,D,R,W,V,q,H,Q,re;if(this!==si&&M>v&&o>=0&&(M=v),M!==this._tTime||m||b){if(p!==this._time&&x&&(M+=this._time-p,o+=this._time-p),T=M,q=this._start,V=this._ts,R=!V,b&&(x||(p=this._zTime),(o||!f)&&(this._zTime=o)),this._repeat){if(Q=this._yoyo,D=x+this._rDelay,this._repeat<-1&&o<0)return this.totalTime(D*100+o,f,m);if(T=Oi(M%D),M===v?(L=this._repeat,T=x):(L=~~(M/D),L&&L===M/D&&(T=x,L--),T>x&&(T=x)),H=rc(this._tTime,D),!p&&this._tTime&&H!==L&&this._tTime-H*D-this._dur<=0&&(H=L),Q&&L&1&&(T=x-T,re=1),L!==H&&!this._lock){var oe=Q&&H&1,B=oe===(Q&&L&1);if(L<H&&(oe=!oe),p=oe?0:x,this._lock=1,this.render(p||(re?0:Oi(L*D)),f,!x)._lock=0,this._tTime=M,!f&&this.parent&&Gr(this,"onRepeat"),this.vars.repeatRefresh&&!re&&(this.invalidate()._lock=1),p&&p!==this._time||R!==!this._ts||this.vars.onRepeat&&!this.parent&&!this._act)return this;if(x=this._dur,v=this._tDur,B&&(this._lock=2,p=oe?x:-1e-4,this.render(p,!0),this.vars.repeatRefresh&&!re&&this.invalidate()),this._lock=0,!this._ts&&!R)return this;Uy(this,re)}}if(this._hasPause&&!this._forcing&&this._lock<2&&(W=KD(this,Oi(p),Oi(T)),W&&(M-=T-(T=W._start))),this._tTime=M,this._time=T,this._act=!V,this._initted||(this._onUpdate=this.vars.onUpdate,this._initted=1,this._zTime=o,p=0),!p&&T&&!f&&!L&&(Gr(this,"onStart"),this._tTime!==M))return this;if(T>=p&&o>=0)for(P=this._first;P;){if(N=P._next,(P._act||T>=P._start)&&P._ts&&W!==P){if(P.parent!==this)return this.render(o,f,m);if(P.render(P._ts>0?(T-P._start)*P._ts:(P._dirty?P.totalDuration():P._tDur)+(T-P._start)*P._ts,f,m),T!==this._time||!this._ts&&!R){W=0,N&&(M+=this._zTime=-1e-8);break}}P=N}else{P=this._last;for(var te=o<0?o:T;P;){if(N=P._prev,(P._act||te<=P._end)&&P._ts&&W!==P){if(P.parent!==this)return this.render(o,f,m);if(P.render(P._ts>0?(te-P._start)*P._ts:(P._dirty?P.totalDuration():P._tDur)+(te-P._start)*P._ts,f,m||Zi&&(P._initted||P._startAt)),T!==this._time||!this._ts&&!R){W=0,N&&(M+=this._zTime=te?-1e-8:Yi);break}}P=N}}if(W&&!f&&(this.pause(),W.render(T>=p?0:-1e-8)._zTime=T>=p?1:-1,this._ts))return this._start=q,Bf(this),this.render(o,f,m);this._onUpdate&&!f&&Gr(this,"onUpdate",!0),(M===v&&this._tTime>=this.totalDuration()||!M&&p)&&(q===this._start||Math.abs(V)!==Math.abs(this._ts))&&(this._lock||((o||!x)&&(M===v&&this._ts>0||!M&&this._ts<0)&&Ca(this,1),!f&&!(o<0&&!p)&&(M||p||!v)&&(Gr(this,M===v&&o>=0?"onComplete":"onReverseComplete",!0),this._prom&&!(M<v&&this.timeScale()>0)&&this._prom())))}return this},i.add=function(o,f){var m=this;if(Js(f)||(f=Nr(this,f,o)),!(o instanceof oc)){if(Ki(o))return o.forEach(function(p){return m.add(p,f)}),this;if(Ui(o))return this.addLabel(o,f);if(fi(o))o=Ai.delayedCall(0,o);else return this}return this!==o?ys(this,o,f):this},i.getChildren=function(o,f,m,p){o===void 0&&(o=!0),f===void 0&&(f=!0),m===void 0&&(m=!0),p===void 0&&(p=-1e8);for(var v=[],x=this._first;x;)x._start>=p&&(x instanceof Ai?f&&v.push(x):(m&&v.push(x),o&&v.push.apply(v,x.getChildren(!0,f,m)))),x=x._next;return v},i.getById=function(o){for(var f=this.getChildren(1,1,1),m=f.length;m--;)if(f[m].vars.id===o)return f[m]},i.remove=function(o){return Ui(o)?this.removeLabel(o):fi(o)?this.killTweensOf(o):(Of(this,o),o===this._recent&&(this._recent=this._last),bo(this))},i.totalTime=function(o,f){return arguments.length?(this._forcing=1,!this._dp&&this._ts&&(this._start=Oi(Ar.time-(this._ts>0?o/this._ts:(this.totalDuration()-o)/-this._ts))),h.prototype.totalTime.call(this,o,f),this._forcing=0,this):this._tTime},i.addLabel=function(o,f){return this.labels[o]=Nr(this,f),this},i.removeLabel=function(o){return delete this.labels[o],this},i.addPause=function(o,f,m){var p=Ai.delayedCall(0,f||Th,m);return p.data="isPause",this._hasPause=1,ys(this,p,Nr(this,o))},i.removePause=function(o){var f=this._first;for(o=Nr(this,o);f;)f._start===o&&f.data==="isPause"&&Ca(f),f=f._next},i.killTweensOf=function(o,f,m){for(var p=this.getTweensOf(o,m),v=p.length;v--;)va!==p[v]&&p[v].kill(o,f);return this},i.getTweensOf=function(o,f){for(var m=[],p=kr(o),v=this._first,x=Js(f),M;v;)v instanceof Ai?HD(v._targets,p)&&(x?(!va||v._initted&&v._ts)&&v.globalTime(0)<=f&&v.globalTime(v.totalDuration())>f:!f||v.isActive())&&m.push(v):(M=v.getTweensOf(p,f)).length&&m.push.apply(m,M),v=v._next;return m},i.tweenTo=function(o,f){f=f||{};var m=this,p=Nr(m,o),v=f,x=v.startAt,M=v.onStart,b=v.onStartParams,T=v.immediateRender,P,N=Ai.to(m,Vr({ease:f.ease||"none",lazy:!1,immediateRender:!1,time:p,overwrite:"auto",duration:f.duration||Math.abs((p-(x&&"time"in x?x.time:m._time))/m.timeScale())||Yi,onStart:function(){if(m.pause(),!P){var D=f.duration||Math.abs((p-(x&&"time"in x?x.time:m._time))/m.timeScale());N._dur!==D&&sc(N,D,0,1).render(N._time,!0,!0),P=1}M&&M.apply(N,b||[])}},f));return T?N.render(0):N},i.tweenFromTo=function(o,f,m){return this.tweenTo(f,Vr({startAt:{time:Nr(this,o)}},m))},i.recent=function(){return this._recent},i.nextLabel=function(o){return o===void 0&&(o=this._time),dv(this,Nr(this,o))},i.previousLabel=function(o){return o===void 0&&(o=this._time),dv(this,Nr(this,o),1)},i.currentLabel=function(o){return arguments.length?this.seek(o,!0):this.previousLabel(this._time+Yi)},i.shiftChildren=function(o,f,m){m===void 0&&(m=0);for(var p=this._first,v=this.labels,x;p;)p._start>=m&&(p._start+=o,p._end+=o),p=p._next;if(f)for(x in v)v[x]>=m&&(v[x]+=o);return bo(this)},i.invalidate=function(o){var f=this._first;for(this._lock=0;f;)f.invalidate(o),f=f._next;return h.prototype.invalidate.call(this,o)},i.clear=function(o){o===void 0&&(o=!0);for(var f=this._first,m;f;)m=f._next,this.remove(f),f=m;return this._dp&&(this._time=this._tTime=this._pTime=0),o&&(this.labels={}),bo(this)},i.totalDuration=function(o){var f=0,m=this,p=m._last,v=Ss,x,M,b;if(arguments.length)return m.timeScale((m._repeat<0?m.duration():m.totalDuration())/(m.reversed()?-o:o));if(m._dirty){for(b=m.parent;p;)x=p._prev,p._dirty&&p.totalDuration(),M=p._start,M>v&&m._sort&&p._ts&&!m._lock?(m._lock=1,ys(m,p,M-p._delay,1)._lock=0):v=M,M<0&&p._ts&&(f-=M,(!b&&!m._dp||b&&b.smoothChildTiming)&&(m._start+=M/m._ts,m._time-=M,m._tTime-=M),m.shiftChildren(-M,!1,-1/0),v=0),p._end>f&&p._ts&&(f=p._end),p=x;sc(m,m===si&&m._time>f?m._time:f,1,1),m._dirty=0}return m._tDur},t.updateRoot=function(o){if(si._ts&&(dy(si,Pf(o,si)),uy=Ar.frame),Ar.frame>=cv){cv+=Rr.autoSleep||120;var f=si._first;if((!f||!f._ts)&&Rr.autoSleep&&Ar._listeners.length<2){for(;f&&!f._ts;)f=f._next;f||Ar.sleep()}}},t}(oc);Vr(hr.prototype,{_lock:0,_hasPause:0,_forcing:0});var uU=function(t,i,s,o,f,m,p){var v=new mr(this._pt,t,i,0,1,Gy,null,f),x=0,M=0,b,T,P,N,L,D,R,W;for(v.b=s,v.e=o,s+="",o+="",(R=~o.indexOf("random("))&&(o=wh(o)),m&&(W=[s,o],m(W,t,i),s=W[0],o=W[1]),T=s.match(Xp)||[];b=Xp.exec(o);)N=b[0],L=o.substring(x,b.index),P?P=(P+1)%5:L.substr(-5)==="rgba("&&(P=1),N!==T[M++]&&(D=parseFloat(T[M-1])||0,v._pt={_next:v._pt,p:L||M===1?L:",",s:D,c:N.charAt(1)==="="?$l(D,N)-D:parseFloat(N)-D,m:P&&P<4?Math.round:0},x=Xp.lastIndex);return v.c=x<o.length?o.substring(x,o.length):"",v.fp=p,(ay.test(o)||R)&&(v.e=0),this._pt=v,v},Om=function(t,i,s,o,f,m,p,v,x,M){fi(o)&&(o=o(f||0,t,m));var b=t[i],T=s!=="get"?s:fi(b)?x?t[i.indexOf("set")||!fi(t["get"+i.substr(3)])?i:"get"+i.substr(3)](x):t[i]():b,P=fi(b)?x?gU:zy:zm,N;if(Ui(o)&&(~o.indexOf("random(")&&(o=wh(o)),o.charAt(1)==="="&&(N=$l(T,o)+(qi(T)||0),(N||N===0)&&(o=N))),!M||T!==o||xm)return!isNaN(T*o)&&o!==""?(N=new mr(this._pt,t,i,+T||0,o-(T||0),typeof b=="boolean"?xU:ky,0,P),x&&(N.fp=x),p&&N.modifier(p,this,t),this._pt=N):(!b&&!(i in t)&&Um(i,o),uU.call(this,t,i,T,o,P,v||Rr.stringFilter,x))},fU=function(t,i,s,o,f){if(fi(t)&&(t=Sh(t,f,i,s,o)),!Ts(t)||t.style&&t.nodeType||Ki(t)||ry(t))return Ui(t)?Sh(t,f,i,s,o):t;var m={},p;for(p in t)m[p]=Sh(t[p],f,i,s,o);return m},Fy=function(t,i,s,o,f,m){var p,v,x,M;if(wr[t]&&(p=new wr[t]).init(f,p.rawVars?i[t]:fU(i[t],o,f,m,s),s,o,m)!==!1&&(s._pt=v=new mr(s._pt,f,t,0,1,p.render,p,0,p.priority),s!==ql))for(x=s._ptLookup[s._targets.indexOf(f)],M=p._props.length;M--;)x[p._props[M]]=v;return p},va,xm,Bm=function h(t,i,s){var o=t.vars,f=o.ease,m=o.startAt,p=o.immediateRender,v=o.lazy,x=o.onUpdate,M=o.onUpdateParams,b=o.callbackScope,T=o.runBackwards,P=o.yoyoEase,N=o.keyframes,L=o.autoRevert,D=t._dur,R=t._startAt,W=t._targets,V=t.parent,q=V&&V.data==="nested"?V.vars.targets:W,H=t._overwrite==="auto"&&!Cm,Q=t.timeline,re,oe,B,te,we,Ae,de,xe,ye,He,be,Le,nt;if(Q&&(!N||!f)&&(f="none"),t._ease=To(f,ic.ease),t._yEase=P?Dy(To(P===!0?f:P,ic.ease)):0,P&&t._yoyo&&!t._repeat&&(P=t._yEase,t._yEase=t._ease,t._ease=P),t._from=!Q&&!!o.runBackwards,!Q||N&&!o.stagger){if(xe=W[0]?Eo(W[0]).harness:0,Le=xe&&o[xe.prop],re=Cf(o,Im),R&&(R._zTime<0&&R.progress(1),i<0&&T&&p&&!L?R.render(-1,!0):R.revert(T&&D?vf:kD),R._lazy=0),m){if(Ca(t._startAt=Ai.set(W,Vr({data:"isStart",overwrite:!1,parent:V,immediateRender:!0,lazy:!R&&dr(v),startAt:null,delay:0,onUpdate:x,onUpdateParams:M,callbackScope:b,stagger:0},m))),t._startAt._dp=0,t._startAt._sat=t,i<0&&(Zi||!p&&!L)&&t._startAt.revert(vf),p&&D&&i<=0&&s<=0){i&&(t._zTime=i);return}}else if(T&&D&&!R){if(i&&(p=!1),B=Vr({overwrite:!1,data:"isFromStart",lazy:p&&!R&&dr(v),immediateRender:p,stagger:0,parent:V},re),Le&&(B[xe.prop]=Le),Ca(t._startAt=Ai.set(W,B)),t._startAt._dp=0,t._startAt._sat=t,i<0&&(Zi?t._startAt.revert(vf):t._startAt.render(-1,!0)),t._zTime=i,!p)h(t._startAt,Yi,Yi);else if(!i)return}for(t._pt=t._ptCache=0,v=D&&dr(v)||v&&!D,oe=0;oe<W.length;oe++){if(we=W[oe],de=we._gsap||Fm(W)[oe]._gsap,t._ptLookup[oe]=He={},fm[de.id]&&Ta.length&&Rf(),be=q===W?oe:q.indexOf(we),xe&&(ye=new xe).init(we,Le||re,t,be,q)!==!1&&(t._pt=te=new mr(t._pt,we,ye.name,0,1,ye.render,ye,0,ye.priority),ye._props.forEach(function(Ye){He[Ye]=te}),ye.priority&&(Ae=1)),!xe||Le)for(B in re)wr[B]&&(ye=Fy(B,re,t,be,we,q))?ye.priority&&(Ae=1):He[B]=te=Om.call(t,we,B,"get",re[B],be,q,0,o.stringFilter);t._op&&t._op[oe]&&t.kill(we,t._op[oe]),H&&t._pt&&(va=t,si.killTweensOf(we,He,t.globalTime(i)),nt=!t.parent,va=0),t._pt&&v&&(fm[de.id]=1)}Ae&&Hy(t),t._onInit&&t._onInit(t)}t._onUpdate=x,t._initted=(!t._op||t._pt)&&!nt,N&&i<=0&&Q.render(Ss,!0,!0)},dU=function(t,i,s,o,f,m,p){var v=(t._pt&&t._ptCache||(t._ptCache={}))[i],x,M,b,T;if(!v)for(v=t._ptCache[i]=[],b=t._ptLookup,T=t._targets.length;T--;){if(x=b[T][i],x&&x.d&&x.d._pt)for(x=x.d._pt;x&&x.p!==i&&x.fp!==i;)x=x._next;if(!x)return xm=1,t.vars[i]="+=0",Bm(t,p),xm=0,1;v.push(x)}for(T=v.length;T--;)M=v[T],x=M._pt||M,x.s=(o||o===0)&&!f?o:x.s+(o||0)+m*x.c,x.c=s-x.s,M.e&&(M.e=_i(s)+qi(M.e)),M.b&&(M.b=x.s+qi(M.b))},pU=function(t,i){var s=t[0]?Eo(t[0]).harness:0,o=s&&s.aliases,f,m,p,v;if(!o)return i;f=Po({},i);for(m in o)if(m in f)for(v=o[m].split(","),p=v.length;p--;)f[v[p]]=f[m];return f},mU=function(t,i,s,o){var f=i.ease||o||"power1.inOut",m,p;if(Ki(i))p=s[t]||(s[t]=[]),i.forEach(function(v,x){return p.push({t:x/(i.length-1)*100,v,e:f})});else for(m in i)p=s[m]||(s[m]=[]),m==="ease"||p.push({t:parseFloat(t),v:i[m],e:f})},Sh=function(t,i,s,o,f){return fi(t)?t.call(i,s,o,f):Ui(t)&&~t.indexOf("random(")?wh(t):t},Oy=Nm+"repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert",By={};pr(Oy+",id,stagger,delay,duration,paused,scrollTrigger",function(h){return By[h]=1});var Ai=function(h){ny(t,h);function t(s,o,f,m){var p;typeof o=="number"&&(f.duration=o,o=f,f=null),p=h.call(this,m?o:yh(o))||this;var v=p.vars,x=v.duration,M=v.delay,b=v.immediateRender,T=v.stagger,P=v.overwrite,N=v.keyframes,L=v.defaults,D=v.scrollTrigger,R=v.yoyoEase,W=o.parent||si,V=(Ki(s)||ry(s)?Js(s[0]):"length"in o)?[s]:kr(s),q,H,Q,re,oe,B,te,we;if(p._targets=V.length?Fm(V):Af("GSAP target "+s+" not found. https://greensock.com",!Rr.nullTargetWarn)||[],p._ptLookup=[],p._overwrite=P,N||T||_f(x)||_f(M)){if(o=p.vars,q=p.timeline=new hr({data:"nested",defaults:L||{},targets:W&&W.data==="nested"?W.vars.targets:V}),q.kill(),q.parent=q._dp=Ys(p),q._start=0,T||_f(x)||_f(M)){if(re=V.length,te=T&&Sy(T),Ts(T))for(oe in T)~Oy.indexOf(oe)&&(we||(we={}),we[oe]=T[oe]);for(H=0;H<re;H++)Q=Cf(o,By),Q.stagger=0,R&&(Q.yoyoEase=R),we&&Po(Q,we),B=V[H],Q.duration=+Sh(x,Ys(p),H,B,V),Q.delay=(+Sh(M,Ys(p),H,B,V)||0)-p._delay,!T&&re===1&&Q.delay&&(p._delay=M=Q.delay,p._start+=M,Q.delay=0),q.to(B,Q,te?te(H,B,V):0),q._ease=Dn.none;q.duration()?x=M=0:p.timeline=0}else if(N){yh(Vr(q.vars.defaults,{ease:"none"})),q._ease=To(N.ease||o.ease||"none");var Ae=0,de,xe,ye;if(Ki(N))N.forEach(function(He){return q.to(V,He,">")}),q.duration();else{Q={};for(oe in N)oe==="ease"||oe==="easeEach"||mU(oe,N[oe],Q,N.easeEach);for(oe in Q)for(de=Q[oe].sort(function(He,be){return He.t-be.t}),Ae=0,H=0;H<de.length;H++)xe=de[H],ye={ease:xe.e,duration:(xe.t-(H?de[H-1].t:0))/100*x},ye[oe]=xe.v,q.to(V,ye,Ae),Ae+=ye.duration;q.duration()<x&&q.to({},{duration:x-q.duration()})}}x||p.duration(x=q.duration())}else p.timeline=0;return P===!0&&!Cm&&(va=Ys(p),si.killTweensOf(V),va=0),ys(W,Ys(p),f),o.reversed&&p.reverse(),o.paused&&p.paused(!0),(b||!x&&!N&&p._start===Oi(W._time)&&dr(b)&&qD(Ys(p))&&W.data!=="nested")&&(p._tTime=-1e-8,p.render(Math.max(0,-M)||0)),D&&xy(Ys(p),D),p}var i=t.prototype;return i.render=function(o,f,m){var p=this._time,v=this._tDur,x=this._dur,M=o<0,b=o>v-Yi&&!M?v:o<Yi?0:o,T,P,N,L,D,R,W,V,q;if(!x)ZD(this,o,f,m);else if(b!==this._tTime||!o||m||!this._initted&&this._tTime||this._startAt&&this._zTime<0!==M){if(T=b,V=this.timeline,this._repeat){if(L=x+this._rDelay,this._repeat<-1&&M)return this.totalTime(L*100+o,f,m);if(T=Oi(b%L),b===v?(N=this._repeat,T=x):(N=~~(b/L),N&&N===b/L&&(T=x,N--),T>x&&(T=x)),R=this._yoyo&&N&1,R&&(q=this._yEase,T=x-T),D=rc(this._tTime,L),T===p&&!m&&this._initted)return this._tTime=b,this;N!==D&&(V&&this._yEase&&Uy(V,R),this.vars.repeatRefresh&&!R&&!this._lock&&(this._lock=m=1,this.render(Oi(L*N),!0).invalidate()._lock=0))}if(!this._initted){if(vy(this,M?o:T,m,f,b))return this._tTime=0,this;if(p!==this._time)return this;if(x!==this._dur)return this.render(o,f,m)}if(this._tTime=b,this._time=T,!this._act&&this._ts&&(this._act=1,this._lazy=0),this.ratio=W=(q||this._ease)(T/x),this._from&&(this.ratio=W=1-W),T&&!p&&!f&&!N&&(Gr(this,"onStart"),this._tTime!==b))return this;for(P=this._pt;P;)P.r(W,P.d),P=P._next;V&&V.render(o<0?o:!T&&R?-1e-8:V._dur*V._ease(T/this._dur),f,m)||this._startAt&&(this._zTime=o),this._onUpdate&&!f&&(M&&dm(this,o,f,m),Gr(this,"onUpdate")),this._repeat&&N!==D&&this.vars.onRepeat&&!f&&this.parent&&Gr(this,"onRepeat"),(b===this._tDur||!b)&&this._tTime===b&&(M&&!this._onUpdate&&dm(this,o,!0,!0),(o||!x)&&(b===this._tDur&&this._ts>0||!b&&this._ts<0)&&Ca(this,1),!f&&!(M&&!p)&&(b||p||R)&&(Gr(this,b===v?"onComplete":"onReverseComplete",!0),this._prom&&!(b<v&&this.timeScale()>0)&&this._prom()))}return this},i.targets=function(){return this._targets},i.invalidate=function(o){return(!o||!this.vars.runBackwards)&&(this._startAt=0),this._pt=this._op=this._onUpdate=this._lazy=this.ratio=0,this._ptLookup=[],this.timeline&&this.timeline.invalidate(o),h.prototype.invalidate.call(this,o)},i.resetTo=function(o,f,m,p){Ah||Ar.wake(),this._ts||this.play();var v=Math.min(this._dur,(this._dp._time-this._start)*this._ts),x;return this._initted||Bm(this,v),x=this._ease(v/this._dur),dU(this,o,f,m,p,x,v)?this.resetTo(o,f,m,p):(zf(this,0),this.parent||gy(this._dp,this,"_first","_last",this._dp._sort?"_start":0),this.render(0))},i.kill=function(o,f){if(f===void 0&&(f="all"),!o&&(!f||f==="all"))return this._lazy=this._pt=0,this.parent?gh(this):this;if(this.timeline){var m=this.timeline.totalDuration();return this.timeline.killTweensOf(o,f,va&&va.vars.overwrite!==!0)._first||gh(this),this.parent&&m!==this.timeline.totalDuration()&&sc(this,this._dur*this.timeline._tDur/m,0,1),this}var p=this._targets,v=o?kr(o):p,x=this._ptLookup,M=this._pt,b,T,P,N,L,D,R;if((!f||f==="all")&&WD(p,v))return f==="all"&&(this._pt=0),gh(this);for(b=this._op=this._op||[],f!=="all"&&(Ui(f)&&(L={},pr(f,function(W){return L[W]=1}),f=L),f=pU(p,f)),R=p.length;R--;)if(~v.indexOf(p[R])){T=x[R],f==="all"?(b[R]=f,N=T,P={}):(P=b[R]=b[R]||{},N=f);for(L in N)D=T&&T[L],D&&((!("kill"in D.d)||D.d.kill(L)===!0)&&Of(this,D,"_pt"),delete T[L]),P!=="all"&&(P[L]=1)}return this._initted&&!this._pt&&M&&gh(this),this},t.to=function(o,f){return new t(o,f,arguments[2])},t.from=function(o,f){return Mh(1,arguments)},t.delayedCall=function(o,f,m,p){return new t(f,0,{immediateRender:!1,lazy:!1,overwrite:!1,delay:o,onComplete:f,onReverseComplete:f,onCompleteParams:m,onReverseCompleteParams:m,callbackScope:p})},t.fromTo=function(o,f,m){return Mh(2,arguments)},t.set=function(o,f){return f.duration=0,f.repeatDelay||(f.repeat=0),new t(o,f)},t.killTweensOf=function(o,f,m){return si.killTweensOf(o,f,m)},t}(oc);Vr(Ai.prototype,{_targets:[],_lazy:0,_startAt:0,_op:0,_onInit:0});pr("staggerTo,staggerFrom,staggerFromTo",function(h){Ai[h]=function(){var t=new hr,i=mm.call(arguments,0);return i.splice(h==="staggerFromTo"?5:4,0,0),t[h].apply(t,i)}});var zm=function(t,i,s){return t[i]=s},zy=function(t,i,s){return t[i](s)},gU=function(t,i,s,o){return t[i](o.fp,s)},_U=function(t,i,s){return t.setAttribute(i,s)},km=function(t,i){return fi(t[i])?zy:Pm(t[i])&&t.setAttribute?_U:zm},ky=function(t,i){return i.set(i.t,i.p,Math.round((i.s+i.c*t)*1e6)/1e6,i)},xU=function(t,i){return i.set(i.t,i.p,!!(i.s+i.c*t),i)},Gy=function(t,i){var s=i._pt,o="";if(!t&&i.b)o=i.b;else if(t===1&&i.e)o=i.e;else{for(;s;)o=s.p+(s.m?s.m(s.s+s.c*t):Math.round((s.s+s.c*t)*1e4)/1e4)+o,s=s._next;o+=i.c}i.set(i.t,i.p,o,i)},Gm=function(t,i){for(var s=i._pt;s;)s.r(t,s.d),s=s._next},vU=function(t,i,s,o){for(var f=this._pt,m;f;)m=f._next,f.p===o&&f.modifier(t,i,s),f=m},yU=function(t){for(var i=this._pt,s,o;i;)o=i._next,i.p===t&&!i.op||i.op===t?Of(this,i,"_pt"):i.dep||(s=1),i=o;return!s},MU=function(t,i,s,o){o.mSet(t,i,o.m.call(o.tween,s,o.mt),o)},Hy=function(t){for(var i=t._pt,s,o,f,m;i;){for(s=i._next,o=f;o&&o.pr>i.pr;)o=o._next;(i._prev=o?o._prev:m)?i._prev._next=i:f=i,(i._next=o)?o._prev=i:m=i,i=s}t._pt=f},mr=function(){function h(i,s,o,f,m,p,v,x,M){this.t=s,this.s=f,this.c=m,this.p=o,this.r=p||ky,this.d=v||this,this.set=x||zm,this.pr=M||0,this._next=i,i&&(i._prev=this)}var t=h.prototype;return t.modifier=function(s,o,f){this.mSet=this.mSet||this.set,this.set=MU,this.m=s,this.mt=f,this.tween=o},h}();pr(Nm+"parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger",function(h){return Im[h]=1});Cr.TweenMax=Cr.TweenLite=Ai;Cr.TimelineLite=Cr.TimelineMax=hr;si=new hr({sortChildren:!1,defaults:ic,autoRemoveChildren:!0,id:"root",smoothChildTiming:!0});Rr.stringFilter=Ly;var lc=[],Mf={},SU=[],mv=0,$p=function(t){return(Mf[t]||SU).map(function(i){return i()})},vm=function(){var t=Date.now(),i=[];t-mv>2&&($p("matchMediaInit"),lc.forEach(function(s){var o=s.queries,f=s.conditions,m,p,v,x;for(p in o)m=Fr.matchMedia(o[p]).matches,m&&(v=1),m!==f[p]&&(f[p]=m,x=1);x&&(s.revert(),v&&i.push(s))}),$p("matchMediaRevert"),i.forEach(function(s){return s.onMatch(s)}),mv=t,$p("matchMedia"))},Vy=function(){function h(i,s){this.selector=s&&gm(s),this.data=[],this._r=[],this.isReverted=!1,i&&this.add(i)}var t=h.prototype;return t.add=function(s,o,f){fi(s)&&(f=o,o=s,s=fi);var m=this,p=function(){var x=Mi,M=m.selector,b;return x&&x!==m&&x.data.push(m),f&&(m.selector=gm(f)),Mi=m,b=o.apply(m,arguments),fi(b)&&m._r.push(b),Mi=x,m.selector=M,m.isReverted=!1,b};return m.last=p,s===fi?p(m):s?m[s]=p:p},t.ignore=function(s){var o=Mi;Mi=null,s(this),Mi=o},t.getTweens=function(){var s=[];return this.data.forEach(function(o){return o instanceof h?s.push.apply(s,o.getTweens()):o instanceof Ai&&!(o.parent&&o.parent.data==="nested")&&s.push(o)}),s},t.clear=function(){this._r.length=this.data.length=0},t.kill=function(s,o){var f=this;if(s){var m=this.getTweens();this.data.forEach(function(v){v.data==="isFlip"&&(v.revert(),v.getChildren(!0,!0,!1).forEach(function(x){return m.splice(m.indexOf(x),1)}))}),m.map(function(v){return{g:v.globalTime(0),t:v}}).sort(function(v,x){return x.g-v.g||-1}).forEach(function(v){return v.t.revert(s)}),this.data.forEach(function(v){return!(v instanceof oc)&&v.revert&&v.revert(s)}),this._r.forEach(function(v){return v(s,f)}),this.isReverted=!0}else this.data.forEach(function(v){return v.kill&&v.kill()});if(this.clear(),o){var p=lc.indexOf(this);~p&&lc.splice(p,1)}},t.revert=function(s){this.kill(s||{})},h}(),EU=function(){function h(i){this.contexts=[],this.scope=i}var t=h.prototype;return t.add=function(s,o,f){Ts(s)||(s={matches:s});var m=new Vy(0,f||this.scope),p=m.conditions={},v,x,M;this.contexts.push(m),o=m.add("onMatch",o),m.queries=s;for(x in s)x==="all"?M=1:(v=Fr.matchMedia(s[x]),v&&(lc.indexOf(m)<0&&lc.push(m),(p[x]=v.matches)&&(M=1),v.addListener?v.addListener(vm):v.addEventListener("change",vm)));return M&&o(m),this},t.revert=function(s){this.kill(s||{})},t.kill=function(s){this.contexts.forEach(function(o){return o.kill(s,!0)})},h}(),Lf={registerPlugin:function(){for(var t=arguments.length,i=new Array(t),s=0;s<t;s++)i[s]=arguments[s];i.forEach(function(o){return Ry(o)})},timeline:function(t){return new hr(t)},getTweensOf:function(t,i){return si.getTweensOf(t,i)},getProperty:function(t,i,s,o){Ui(t)&&(t=kr(t)[0]);var f=Eo(t||{}).get,m=s?my:py;return s==="native"&&(s=""),t&&(i?m((wr[i]&&wr[i].get||f)(t,i,s,o)):function(p,v,x){return m((wr[p]&&wr[p].get||f)(t,p,v,x))})},quickSetter:function(t,i,s){if(t=kr(t),t.length>1){var o=t.map(function(M){return gr.quickSetter(M,i,s)}),f=o.length;return function(M){for(var b=f;b--;)o[b](M)}}t=t[0]||{};var m=wr[i],p=Eo(t),v=p.harness&&(p.harness.aliases||{})[i]||i,x=m?function(M){var b=new m;ql._pt=0,b.init(t,s?M+s:M,ql,0,[t]),b.render(1,b),ql._pt&&Gm(1,ql)}:p.set(t,v);return m?x:function(M){return x(t,v,s?M+s:M,p,1)}},quickTo:function(t,i,s){var o,f=gr.to(t,Po((o={},o[i]="+=0.1",o.paused=!0,o),s||{})),m=function(v,x,M){return f.resetTo(i,v,x,M)};return m.tween=f,m},isTweening:function(t){return si.getTweensOf(t,!0).length>0},defaults:function(t){return t&&t.ease&&(t.ease=To(t.ease,ic.ease)),hv(ic,t||{})},config:function(t){return hv(Rr,t||{})},registerEffect:function(t){var i=t.name,s=t.effect,o=t.plugins,f=t.defaults,m=t.extendTimeline;(o||"").split(",").forEach(function(p){return p&&!wr[p]&&!Cr[p]&&Af(i+" effect requires "+p+" plugin.")}),qp[i]=function(p,v,x){return s(kr(p),Vr(v||{},f),x)},m&&(hr.prototype[i]=function(p,v,x){return this.add(qp[i](p,Ts(v)?v:(x=v)&&{},this),x)})},registerEase:function(t,i){Dn[t]=To(i)},parseEase:function(t,i){return arguments.length?To(t,i):Dn},getById:function(t){return si.getById(t)},exportRoot:function(t,i){t===void 0&&(t={});var s=new hr(t),o,f;for(s.smoothChildTiming=dr(t.smoothChildTiming),si.remove(s),s._dp=0,s._time=s._tTime=si._time,o=si._first;o;)f=o._next,(i||!(!o._dur&&o instanceof Ai&&o.vars.onComplete===o._targets[0]))&&ys(s,o,o._start-o._delay),o=f;return ys(si,s,0),s},context:function(t,i){return t?new Vy(t,i):Mi},matchMedia:function(t){return new EU(t)},matchMediaRefresh:function(){return lc.forEach(function(t){var i=t.conditions,s,o;for(o in i)i[o]&&(i[o]=!1,s=1);s&&t.revert()})||vm()},addEventListener:function(t,i){var s=Mf[t]||(Mf[t]=[]);~s.indexOf(i)||s.push(i)},removeEventListener:function(t,i){var s=Mf[t],o=s&&s.indexOf(i);o>=0&&s.splice(o,1)},utils:{wrap:nU,wrapYoyo:iU,distribute:Sy,random:by,snap:Ey,normalize:tU,getUnit:qi,clamp:JD,splitColor:Cy,toArray:kr,selector:gm,mapRange:wy,pipe:QD,unitize:eU,interpolate:rU,shuffle:My},install:cy,effects:qp,ticker:Ar,updateRoot:hr.updateRoot,plugins:wr,globalTimeline:si,core:{PropTween:mr,globals:hy,Tween:Ai,Timeline:hr,Animation:oc,getCache:Eo,_removeLinkedListItem:Of,reverting:function(){return Zi},context:function(t){return t&&Mi&&(Mi.data.push(t),t._ctx=Mi),Mi},suppressOverwrites:function(t){return Cm=t}}};pr("to,from,fromTo,delayedCall,set,killTweensOf",function(h){return Lf[h]=Ai[h]});Ar.add(hr.updateRoot);ql=Lf.to({},{duration:0});var bU=function(t,i){for(var s=t._pt;s&&s.p!==i&&s.op!==i&&s.fp!==i;)s=s._next;return s},TU=function(t,i){var s=t._targets,o,f,m;for(o in i)for(f=s.length;f--;)m=t._ptLookup[f][o],m&&(m=m.d)&&(m._pt&&(m=bU(m,o)),m&&m.modifier&&m.modifier(i[o],t,s[f],o))},Jp=function(t,i){return{name:t,rawVars:1,init:function(o,f,m){m._onInit=function(p){var v,x;if(Ui(f)&&(v={},pr(f,function(M){return v[M]=1}),f=v),i){v={};for(x in f)v[x]=i(f[x]);f=v}TU(p,f)}}}},gr=Lf.registerPlugin({name:"attr",init:function(t,i,s,o,f){var m,p,v;this.tween=s;for(m in i)v=t.getAttribute(m)||"",p=this.add(t,"setAttribute",(v||0)+"",i[m],o,f,0,0,m),p.op=m,p.b=v,this._props.push(m)},render:function(t,i){for(var s=i._pt;s;)Zi?s.set(s.t,s.p,s.b,s):s.r(t,s.d),s=s._next}},{name:"endArray",init:function(t,i){for(var s=i.length;s--;)this.add(t,s,t[s]||0,i[s],0,0,0,0,0,1)}},Jp("roundProps",_m),Jp("modifiers"),Jp("snap",Ey))||Lf;Ai.version=hr.version=gr.version="3.11.5";ly=1;Lm()&&ac();Dn.Power0;Dn.Power1;Dn.Power2;Dn.Power3;Dn.Power4;Dn.Linear;Dn.Quad;Dn.Cubic;Dn.Quart;Dn.Quint;Dn.Strong;Dn.Elastic;Dn.Back;Dn.SteppedEase;Dn.Bounce;Dn.Sine;Dn.Expo;Dn.Circ;/*!
 * CSSPlugin 3.11.5
 * https://greensock.com
 *
 * Copyright 2008-2023, GreenSock. All rights reserved.
 * Subject to the terms at https://greensock.com/standard-license or for
 * Club GreenSock members, the agreement issued with that membership.
 * @author: Jack Doyle, jack@greensock.com
*/var gv,ya,Jl,Hm,vo,_v,Vm,wU=function(){return typeof window<"u"},js={},mo=180/Math.PI,jl=Math.PI/180,Hl=Math.atan2,xv=1e8,Wm=/([A-Z])/g,AU=/(left|right|width|margin|padding|x)/i,RU=/[\s,\(]\S/,Ms={autoAlpha:"opacity,visibility",scale:"scaleX,scaleY",alpha:"opacity"},ym=function(t,i){return i.set(i.t,i.p,Math.round((i.s+i.c*t)*1e4)/1e4+i.u,i)},CU=function(t,i){return i.set(i.t,i.p,t===1?i.e:Math.round((i.s+i.c*t)*1e4)/1e4+i.u,i)},PU=function(t,i){return i.set(i.t,i.p,t?Math.round((i.s+i.c*t)*1e4)/1e4+i.u:i.b,i)},LU=function(t,i){var s=i.s+i.c*t;i.set(i.t,i.p,~~(s+(s<0?-.5:.5))+i.u,i)},Wy=function(t,i){return i.set(i.t,i.p,t?i.e:i.b,i)},Xy=function(t,i){return i.set(i.t,i.p,t!==1?i.b:i.e,i)},DU=function(t,i,s){return t.style[i]=s},UU=function(t,i,s){return t.style.setProperty(i,s)},IU=function(t,i,s){return t._gsap[i]=s},NU=function(t,i,s){return t._gsap.scaleX=t._gsap.scaleY=s},FU=function(t,i,s,o,f){var m=t._gsap;m.scaleX=m.scaleY=s,m.renderTransform(f,m)},OU=function(t,i,s,o,f){var m=t._gsap;m[i]=s,m.renderTransform(f,m)},ai="transform",hs=ai+"Origin",BU=function h(t,i){var s=this,o=this.target,f=o.style;if(t in js){if(this.tfm=this.tfm||{},t!=="transform")t=Ms[t]||t,~t.indexOf(",")?t.split(",").forEach(function(m){return s.tfm[m]=Zs(o,m)}):this.tfm[t]=o._gsap.x?o._gsap[t]:Zs(o,t);else return Ms.transform.split(",").forEach(function(m){return h.call(s,m,i)});if(this.props.indexOf(ai)>=0)return;o._gsap.svg&&(this.svgo=o.getAttribute("data-svg-origin"),this.props.push(hs,i,"")),t=ai}(f||i)&&this.props.push(t,i,f[t])},qy=function(t){t.translate&&(t.removeProperty("translate"),t.removeProperty("scale"),t.removeProperty("rotate"))},zU=function(){var t=this.props,i=this.target,s=i.style,o=i._gsap,f,m;for(f=0;f<t.length;f+=3)t[f+1]?i[t[f]]=t[f+2]:t[f+2]?s[t[f]]=t[f+2]:s.removeProperty(t[f].substr(0,2)==="--"?t[f]:t[f].replace(Wm,"-$1").toLowerCase());if(this.tfm){for(m in this.tfm)o[m]=this.tfm[m];o.svg&&(o.renderTransform(),i.setAttribute("data-svg-origin",this.svgo||"")),f=Vm(),(!f||!f.isStart)&&!s[ai]&&(qy(s),o.uncache=1)}},Yy=function(t,i){var s={target:t,props:[],revert:zU,save:BU};return t._gsap||gr.core.getCache(t),i&&i.split(",").forEach(function(o){return s.save(o)}),s},Zy,Mm=function(t,i){var s=ya.createElementNS?ya.createElementNS((i||"http://www.w3.org/1999/xhtml").replace(/^https/,"http"),t):ya.createElement(t);return s.style?s:ya.createElement(t)},Es=function h(t,i,s){var o=getComputedStyle(t);return o[i]||o.getPropertyValue(i.replace(Wm,"-$1").toLowerCase())||o.getPropertyValue(i)||!s&&h(t,cc(i)||i,1)||""},vv="O,Moz,ms,Ms,Webkit".split(","),cc=function(t,i,s){var o=i||vo,f=o.style,m=5;if(t in f&&!s)return t;for(t=t.charAt(0).toUpperCase()+t.substr(1);m--&&!(vv[m]+t in f););return m<0?null:(m===3?"ms":m>=0?vv[m]:"")+t},Sm=function(){wU()&&window.document&&(gv=window,ya=gv.document,Jl=ya.documentElement,vo=Mm("div")||{style:{}},Mm("div"),ai=cc(ai),hs=ai+"Origin",vo.style.cssText="border-width:0;line-height:0;position:absolute;padding:0",Zy=!!cc("perspective"),Vm=gr.core.reverting,Hm=1)},jp=function h(t){var i=Mm("svg",this.ownerSVGElement&&this.ownerSVGElement.getAttribute("xmlns")||"http://www.w3.org/2000/svg"),s=this.parentNode,o=this.nextSibling,f=this.style.cssText,m;if(Jl.appendChild(i),i.appendChild(this),this.style.display="block",t)try{m=this.getBBox(),this._gsapBBox=this.getBBox,this.getBBox=h}catch{}else this._gsapBBox&&(m=this._gsapBBox());return s&&(o?s.insertBefore(this,o):s.appendChild(this)),Jl.removeChild(i),this.style.cssText=f,m},yv=function(t,i){for(var s=i.length;s--;)if(t.hasAttribute(i[s]))return t.getAttribute(i[s])},Ky=function(t){var i;try{i=t.getBBox()}catch{i=jp.call(t,!0)}return i&&(i.width||i.height)||t.getBBox===jp||(i=jp.call(t,!0)),i&&!i.width&&!i.x&&!i.y?{x:+yv(t,["x","cx","x1"])||0,y:+yv(t,["y","cy","y1"])||0,width:0,height:0}:i},$y=function(t){return!!(t.getCTM&&(!t.parentNode||t.ownerSVGElement)&&Ky(t))},Rh=function(t,i){if(i){var s=t.style;i in js&&i!==hs&&(i=ai),s.removeProperty?((i.substr(0,2)==="ms"||i.substr(0,6)==="webkit")&&(i="-"+i),s.removeProperty(i.replace(Wm,"-$1").toLowerCase())):s.removeAttribute(i)}},Ma=function(t,i,s,o,f,m){var p=new mr(t._pt,i,s,0,1,m?Xy:Wy);return t._pt=p,p.b=o,p.e=f,t._props.push(s),p},Mv={deg:1,rad:1,turn:1},kU={grid:1,flex:1},Pa=function h(t,i,s,o){var f=parseFloat(s)||0,m=(s+"").trim().substr((f+"").length)||"px",p=vo.style,v=AU.test(i),x=t.tagName.toLowerCase()==="svg",M=(x?"client":"offset")+(v?"Width":"Height"),b=100,T=o==="px",P=o==="%",N,L,D,R;return o===m||!f||Mv[o]||Mv[m]?f:(m!=="px"&&!T&&(f=h(t,i,s,"px")),R=t.getCTM&&$y(t),(P||m==="%")&&(js[i]||~i.indexOf("adius"))?(N=R?t.getBBox()[v?"width":"height"]:t[M],_i(P?f/N*b:f/100*N)):(p[v?"width":"height"]=b+(T?m:o),L=~i.indexOf("adius")||o==="em"&&t.appendChild&&!x?t:t.parentNode,R&&(L=(t.ownerSVGElement||{}).parentNode),(!L||L===ya||!L.appendChild)&&(L=ya.body),D=L._gsap,D&&P&&D.width&&v&&D.time===Ar.time&&!D.uncache?_i(f/D.width*b):((P||m==="%")&&!kU[Es(L,"display")]&&(p.position=Es(t,"position")),L===t&&(p.position="static"),L.appendChild(vo),N=vo[M],L.removeChild(vo),p.position="absolute",v&&P&&(D=Eo(L),D.time=Ar.time,D.width=L[M]),_i(T?N*f/b:N&&f?b/N*f:0))))},Zs=function(t,i,s,o){var f;return Hm||Sm(),i in Ms&&i!=="transform"&&(i=Ms[i],~i.indexOf(",")&&(i=i.split(",")[0])),js[i]&&i!=="transform"?(f=Ph(t,o),f=i!=="transformOrigin"?f[i]:f.svg?f.origin:Uf(Es(t,hs))+" "+f.zOrigin+"px"):(f=t.style[i],(!f||f==="auto"||o||~(f+"").indexOf("calc("))&&(f=Df[i]&&Df[i](t,i,s)||Es(t,i)||fy(t,i)||(i==="opacity"?1:0))),s&&!~(f+"").trim().indexOf(" ")?Pa(t,i,f,s)+s:f},GU=function(t,i,s,o){if(!s||s==="none"){var f=cc(i,t,1),m=f&&Es(t,f,1);m&&m!==s?(i=f,s=m):i==="borderColor"&&(s=Es(t,"borderTopColor"))}var p=new mr(this._pt,t.style,i,0,1,Gy),v=0,x=0,M,b,T,P,N,L,D,R,W,V,q,H;if(p.b=s,p.e=o,s+="",o+="",o==="auto"&&(t.style[i]=o,o=Es(t,i)||o,t.style[i]=s),M=[s,o],Ly(M),s=M[0],o=M[1],T=s.match(Xl)||[],H=o.match(Xl)||[],H.length){for(;b=Xl.exec(o);)D=b[0],W=o.substring(v,b.index),N?N=(N+1)%5:(W.substr(-5)==="rgba("||W.substr(-5)==="hsla(")&&(N=1),D!==(L=T[x++]||"")&&(P=parseFloat(L)||0,q=L.substr((P+"").length),D.charAt(1)==="="&&(D=$l(P,D)+q),R=parseFloat(D),V=D.substr((R+"").length),v=Xl.lastIndex-V.length,V||(V=V||Rr.units[i]||q,v===o.length&&(o+=V,p.e+=V)),q!==V&&(P=Pa(t,i,L,V)||0),p._pt={_next:p._pt,p:W||x===1?W:",",s:P,c:R-P,m:N&&N<4||i==="zIndex"?Math.round:0});p.c=v<o.length?o.substring(v,o.length):""}else p.r=i==="display"&&o==="none"?Xy:Wy;return ay.test(o)&&(p.e=0),this._pt=p,p},Sv={top:"0%",bottom:"100%",left:"0%",right:"100%",center:"50%"},HU=function(t){var i=t.split(" "),s=i[0],o=i[1]||"50%";return(s==="top"||s==="bottom"||o==="left"||o==="right")&&(t=s,s=o,o=t),i[0]=Sv[s]||s,i[1]=Sv[o]||o,i.join(" ")},VU=function(t,i){if(i.tween&&i.tween._time===i.tween._dur){var s=i.t,o=s.style,f=i.u,m=s._gsap,p,v,x;if(f==="all"||f===!0)o.cssText="",v=1;else for(f=f.split(","),x=f.length;--x>-1;)p=f[x],js[p]&&(v=1,p=p==="transformOrigin"?hs:ai),Rh(s,p);v&&(Rh(s,ai),m&&(m.svg&&s.removeAttribute("transform"),Ph(s,1),m.uncache=1,qy(o)))}},Df={clearProps:function(t,i,s,o,f){if(f.data!=="isFromStart"){var m=t._pt=new mr(t._pt,i,s,0,0,VU);return m.u=o,m.pr=-10,m.tween=f,t._props.push(s),1}}},Ch=[1,0,0,1,0,0],Jy={},jy=function(t){return t==="matrix(1, 0, 0, 1, 0, 0)"||t==="none"||!t},Ev=function(t){var i=Es(t,ai);return jy(i)?Ch:i.substr(7).match(sy).map(_i)},Xm=function(t,i){var s=t._gsap||Eo(t),o=t.style,f=Ev(t),m,p,v,x;return s.svg&&t.getAttribute("transform")?(v=t.transform.baseVal.consolidate().matrix,f=[v.a,v.b,v.c,v.d,v.e,v.f],f.join(",")==="1,0,0,1,0,0"?Ch:f):(f===Ch&&!t.offsetParent&&t!==Jl&&!s.svg&&(v=o.display,o.display="block",m=t.parentNode,(!m||!t.offsetParent)&&(x=1,p=t.nextElementSibling,Jl.appendChild(t)),f=Ev(t),v?o.display=v:Rh(t,"display"),x&&(p?m.insertBefore(t,p):m?m.appendChild(t):Jl.removeChild(t))),i&&f.length>6?[f[0],f[1],f[4],f[5],f[12],f[13]]:f)},Em=function(t,i,s,o,f,m){var p=t._gsap,v=f||Xm(t,!0),x=p.xOrigin||0,M=p.yOrigin||0,b=p.xOffset||0,T=p.yOffset||0,P=v[0],N=v[1],L=v[2],D=v[3],R=v[4],W=v[5],V=i.split(" "),q=parseFloat(V[0])||0,H=parseFloat(V[1])||0,Q,re,oe,B;s?v!==Ch&&(re=P*D-N*L)&&(oe=q*(D/re)+H*(-L/re)+(L*W-D*R)/re,B=q*(-N/re)+H*(P/re)-(P*W-N*R)/re,q=oe,H=B):(Q=Ky(t),q=Q.x+(~V[0].indexOf("%")?q/100*Q.width:q),H=Q.y+(~(V[1]||V[0]).indexOf("%")?H/100*Q.height:H)),o||o!==!1&&p.smooth?(R=q-x,W=H-M,p.xOffset=b+(R*P+W*L)-R,p.yOffset=T+(R*N+W*D)-W):p.xOffset=p.yOffset=0,p.xOrigin=q,p.yOrigin=H,p.smooth=!!o,p.origin=i,p.originIsAbsolute=!!s,t.style[hs]="0px 0px",m&&(Ma(m,p,"xOrigin",x,q),Ma(m,p,"yOrigin",M,H),Ma(m,p,"xOffset",b,p.xOffset),Ma(m,p,"yOffset",T,p.yOffset)),t.setAttribute("data-svg-origin",q+" "+H)},Ph=function(t,i){var s=t._gsap||new Ny(t);if("x"in s&&!i&&!s.uncache)return s;var o=t.style,f=s.scaleX<0,m="px",p="deg",v=getComputedStyle(t),x=Es(t,hs)||"0",M,b,T,P,N,L,D,R,W,V,q,H,Q,re,oe,B,te,we,Ae,de,xe,ye,He,be,Le,nt,Ye,It,lt,Ce,ke,ut;return M=b=T=L=D=R=W=V=q=0,P=N=1,s.svg=!!(t.getCTM&&$y(t)),v.translate&&((v.translate!=="none"||v.scale!=="none"||v.rotate!=="none")&&(o[ai]=(v.translate!=="none"?"translate3d("+(v.translate+" 0 0").split(" ").slice(0,3).join(", ")+") ":"")+(v.rotate!=="none"?"rotate("+v.rotate+") ":"")+(v.scale!=="none"?"scale("+v.scale.split(" ").join(",")+") ":"")+(v[ai]!=="none"?v[ai]:"")),o.scale=o.rotate=o.translate="none"),re=Xm(t,s.svg),s.svg&&(s.uncache?(Le=t.getBBox(),x=s.xOrigin-Le.x+"px "+(s.yOrigin-Le.y)+"px",be=""):be=!i&&t.getAttribute("data-svg-origin"),Em(t,be||x,!!be||s.originIsAbsolute,s.smooth!==!1,re)),H=s.xOrigin||0,Q=s.yOrigin||0,re!==Ch&&(we=re[0],Ae=re[1],de=re[2],xe=re[3],M=ye=re[4],b=He=re[5],re.length===6?(P=Math.sqrt(we*we+Ae*Ae),N=Math.sqrt(xe*xe+de*de),L=we||Ae?Hl(Ae,we)*mo:0,W=de||xe?Hl(de,xe)*mo+L:0,W&&(N*=Math.abs(Math.cos(W*jl))),s.svg&&(M-=H-(H*we+Q*de),b-=Q-(H*Ae+Q*xe))):(ut=re[6],Ce=re[7],Ye=re[8],It=re[9],lt=re[10],ke=re[11],M=re[12],b=re[13],T=re[14],oe=Hl(ut,lt),D=oe*mo,oe&&(B=Math.cos(-oe),te=Math.sin(-oe),be=ye*B+Ye*te,Le=He*B+It*te,nt=ut*B+lt*te,Ye=ye*-te+Ye*B,It=He*-te+It*B,lt=ut*-te+lt*B,ke=Ce*-te+ke*B,ye=be,He=Le,ut=nt),oe=Hl(-de,lt),R=oe*mo,oe&&(B=Math.cos(-oe),te=Math.sin(-oe),be=we*B-Ye*te,Le=Ae*B-It*te,nt=de*B-lt*te,ke=xe*te+ke*B,we=be,Ae=Le,de=nt),oe=Hl(Ae,we),L=oe*mo,oe&&(B=Math.cos(oe),te=Math.sin(oe),be=we*B+Ae*te,Le=ye*B+He*te,Ae=Ae*B-we*te,He=He*B-ye*te,we=be,ye=Le),D&&Math.abs(D)+Math.abs(L)>359.9&&(D=L=0,R=180-R),P=_i(Math.sqrt(we*we+Ae*Ae+de*de)),N=_i(Math.sqrt(He*He+ut*ut)),oe=Hl(ye,He),W=Math.abs(oe)>2e-4?oe*mo:0,q=ke?1/(ke<0?-ke:ke):0),s.svg&&(be=t.getAttribute("transform"),s.forceCSS=t.setAttribute("transform","")||!jy(Es(t,ai)),be&&t.setAttribute("transform",be))),Math.abs(W)>90&&Math.abs(W)<270&&(f?(P*=-1,W+=L<=0?180:-180,L+=L<=0?180:-180):(N*=-1,W+=W<=0?180:-180)),i=i||s.uncache,s.x=M-((s.xPercent=M&&(!i&&s.xPercent||(Math.round(t.offsetWidth/2)===Math.round(-M)?-50:0)))?t.offsetWidth*s.xPercent/100:0)+m,s.y=b-((s.yPercent=b&&(!i&&s.yPercent||(Math.round(t.offsetHeight/2)===Math.round(-b)?-50:0)))?t.offsetHeight*s.yPercent/100:0)+m,s.z=T+m,s.scaleX=_i(P),s.scaleY=_i(N),s.rotation=_i(L)+p,s.rotationX=_i(D)+p,s.rotationY=_i(R)+p,s.skewX=W+p,s.skewY=V+p,s.transformPerspective=q+m,(s.zOrigin=parseFloat(x.split(" ")[2])||0)&&(o[hs]=Uf(x)),s.xOffset=s.yOffset=0,s.force3D=Rr.force3D,s.renderTransform=s.svg?XU:Zy?Qy:WU,s.uncache=0,s},Uf=function(t){return(t=t.split(" "))[0]+" "+t[1]},Qp=function(t,i,s){var o=qi(i);return _i(parseFloat(i)+parseFloat(Pa(t,"x",s+"px",o)))+o},WU=function(t,i){i.z="0px",i.rotationY=i.rotationX="0deg",i.force3D=0,Qy(t,i)},ho="0deg",ph="0px",uo=") ",Qy=function(t,i){var s=i||this,o=s.xPercent,f=s.yPercent,m=s.x,p=s.y,v=s.z,x=s.rotation,M=s.rotationY,b=s.rotationX,T=s.skewX,P=s.skewY,N=s.scaleX,L=s.scaleY,D=s.transformPerspective,R=s.force3D,W=s.target,V=s.zOrigin,q="",H=R==="auto"&&t&&t!==1||R===!0;if(V&&(b!==ho||M!==ho)){var Q=parseFloat(M)*jl,re=Math.sin(Q),oe=Math.cos(Q),B;Q=parseFloat(b)*jl,B=Math.cos(Q),m=Qp(W,m,re*B*-V),p=Qp(W,p,-Math.sin(Q)*-V),v=Qp(W,v,oe*B*-V+V)}D!==ph&&(q+="perspective("+D+uo),(o||f)&&(q+="translate("+o+"%, "+f+"%) "),(H||m!==ph||p!==ph||v!==ph)&&(q+=v!==ph||H?"translate3d("+m+", "+p+", "+v+") ":"translate("+m+", "+p+uo),x!==ho&&(q+="rotate("+x+uo),M!==ho&&(q+="rotateY("+M+uo),b!==ho&&(q+="rotateX("+b+uo),(T!==ho||P!==ho)&&(q+="skew("+T+", "+P+uo),(N!==1||L!==1)&&(q+="scale("+N+", "+L+uo),W.style[ai]=q||"translate(0, 0)"},XU=function(t,i){var s=i||this,o=s.xPercent,f=s.yPercent,m=s.x,p=s.y,v=s.rotation,x=s.skewX,M=s.skewY,b=s.scaleX,T=s.scaleY,P=s.target,N=s.xOrigin,L=s.yOrigin,D=s.xOffset,R=s.yOffset,W=s.forceCSS,V=parseFloat(m),q=parseFloat(p),H,Q,re,oe,B;v=parseFloat(v),x=parseFloat(x),M=parseFloat(M),M&&(M=parseFloat(M),x+=M,v+=M),v||x?(v*=jl,x*=jl,H=Math.cos(v)*b,Q=Math.sin(v)*b,re=Math.sin(v-x)*-T,oe=Math.cos(v-x)*T,x&&(M*=jl,B=Math.tan(x-M),B=Math.sqrt(1+B*B),re*=B,oe*=B,M&&(B=Math.tan(M),B=Math.sqrt(1+B*B),H*=B,Q*=B)),H=_i(H),Q=_i(Q),re=_i(re),oe=_i(oe)):(H=b,oe=T,Q=re=0),(V&&!~(m+"").indexOf("px")||q&&!~(p+"").indexOf("px"))&&(V=Pa(P,"x",m,"px"),q=Pa(P,"y",p,"px")),(N||L||D||R)&&(V=_i(V+N-(N*H+L*re)+D),q=_i(q+L-(N*Q+L*oe)+R)),(o||f)&&(B=P.getBBox(),V=_i(V+o/100*B.width),q=_i(q+f/100*B.height)),B="matrix("+H+","+Q+","+re+","+oe+","+V+","+q+")",P.setAttribute("transform",B),W&&(P.style[ai]=B)},qU=function(t,i,s,o,f){var m=360,p=Ui(f),v=parseFloat(f)*(p&&~f.indexOf("rad")?mo:1),x=v-o,M=o+x+"deg",b,T;return p&&(b=f.split("_")[1],b==="short"&&(x%=m,x!==x%(m/2)&&(x+=x<0?m:-360)),b==="cw"&&x<0?x=(x+m*xv)%m-~~(x/m)*m:b==="ccw"&&x>0&&(x=(x-m*xv)%m-~~(x/m)*m)),t._pt=T=new mr(t._pt,i,s,o,x,CU),T.e=M,T.u="deg",t._props.push(s),T},bv=function(t,i){for(var s in i)t[s]=i[s];return t},YU=function(t,i,s){var o=bv({},s._gsap),f="perspective,force3D,transformOrigin,svgOrigin",m=s.style,p,v,x,M,b,T,P,N;o.svg?(x=s.getAttribute("transform"),s.setAttribute("transform",""),m[ai]=i,p=Ph(s,1),Rh(s,ai),s.setAttribute("transform",x)):(x=getComputedStyle(s)[ai],m[ai]=i,p=Ph(s,1),m[ai]=x);for(v in js)x=o[v],M=p[v],x!==M&&f.indexOf(v)<0&&(P=qi(x),N=qi(M),b=P!==N?Pa(s,v,x,N):parseFloat(x),T=parseFloat(M),t._pt=new mr(t._pt,p,v,b,T-b,ym),t._pt.u=N||0,t._props.push(v));bv(p,o)};pr("padding,margin,Width,Radius",function(h,t){var i="Top",s="Right",o="Bottom",f="Left",m=(t<3?[i,s,o,f]:[i+f,i+s,o+s,o+f]).map(function(p){return t<2?h+p:"border"+p+h});Df[t>1?"border"+h:h]=function(p,v,x,M,b){var T,P;if(arguments.length<4)return T=m.map(function(N){return Zs(p,N,x)}),P=T.join(" "),P.split(T[0]).length===5?T[0]:P;T=(M+"").split(" "),P={},m.forEach(function(N,L){return P[N]=T[L]=T[L]||T[(L-1)/2|0]}),p.init(v,P,b)}});var eM={name:"css",register:Sm,targetTest:function(t){return t.style&&t.nodeType},init:function(t,i,s,o,f){var m=this._props,p=t.style,v=s.vars.startAt,x,M,b,T,P,N,L,D,R,W,V,q,H,Q,re,oe;Hm||Sm(),this.styles=this.styles||Yy(t),oe=this.styles.props,this.tween=s;for(L in i)if(L!=="autoRound"&&(M=i[L],!(wr[L]&&Fy(L,i,s,o,t,f)))){if(P=typeof M,N=Df[L],P==="function"&&(M=M.call(s,o,t,f),P=typeof M),P==="string"&&~M.indexOf("random(")&&(M=wh(M)),N)N(this,t,L,M,s)&&(re=1);else if(L.substr(0,2)==="--")x=(getComputedStyle(t).getPropertyValue(L)+"").trim(),M+="",wa.lastIndex=0,wa.test(x)||(D=qi(x),R=qi(M)),R?D!==R&&(x=Pa(t,L,x,R)+R):D&&(M+=D),this.add(p,"setProperty",x,M,o,f,0,0,L),m.push(L),oe.push(L,0,p[L]);else if(P!=="undefined"){if(v&&L in v?(x=typeof v[L]=="function"?v[L].call(s,o,t,f):v[L],Ui(x)&&~x.indexOf("random(")&&(x=wh(x)),qi(x+"")||(x+=Rr.units[L]||qi(Zs(t,L))||""),(x+"").charAt(1)==="="&&(x=Zs(t,L))):x=Zs(t,L),T=parseFloat(x),W=P==="string"&&M.charAt(1)==="="&&M.substr(0,2),W&&(M=M.substr(2)),b=parseFloat(M),L in Ms&&(L==="autoAlpha"&&(T===1&&Zs(t,"visibility")==="hidden"&&b&&(T=0),oe.push("visibility",0,p.visibility),Ma(this,p,"visibility",T?"inherit":"hidden",b?"inherit":"hidden",!b)),L!=="scale"&&L!=="transform"&&(L=Ms[L],~L.indexOf(",")&&(L=L.split(",")[0]))),V=L in js,V){if(this.styles.save(L),q||(H=t._gsap,H.renderTransform&&!i.parseTransform||Ph(t,i.parseTransform),Q=i.smoothOrigin!==!1&&H.smooth,q=this._pt=new mr(this._pt,p,ai,0,1,H.renderTransform,H,0,-1),q.dep=1),L==="scale")this._pt=new mr(this._pt,H,"scaleY",H.scaleY,(W?$l(H.scaleY,W+b):b)-H.scaleY||0,ym),this._pt.u=0,m.push("scaleY",L),L+="X";else if(L==="transformOrigin"){oe.push(hs,0,p[hs]),M=HU(M),H.svg?Em(t,M,0,Q,0,this):(R=parseFloat(M.split(" ")[2])||0,R!==H.zOrigin&&Ma(this,H,"zOrigin",H.zOrigin,R),Ma(this,p,L,Uf(x),Uf(M)));continue}else if(L==="svgOrigin"){Em(t,M,1,Q,0,this);continue}else if(L in Jy){qU(this,H,L,T,W?$l(T,W+M):M);continue}else if(L==="smoothOrigin"){Ma(this,H,"smooth",H.smooth,M);continue}else if(L==="force3D"){H[L]=M;continue}else if(L==="transform"){YU(this,M,t);continue}}else L in p||(L=cc(L)||L);if(V||(b||b===0)&&(T||T===0)&&!RU.test(M)&&L in p)D=(x+"").substr((T+"").length),b||(b=0),R=qi(M)||(L in Rr.units?Rr.units[L]:D),D!==R&&(T=Pa(t,L,x,R)),this._pt=new mr(this._pt,V?H:p,L,T,(W?$l(T,W+b):b)-T,!V&&(R==="px"||L==="zIndex")&&i.autoRound!==!1?LU:ym),this._pt.u=R||0,D!==R&&R!=="%"&&(this._pt.b=x,this._pt.r=PU);else if(L in p)GU.call(this,t,L,x,W?W+M:M);else if(L in t)this.add(t,L,x||t[L],W?W+M:M,o,f);else if(L!=="parseTransform"){Um(L,M);continue}V||(L in p?oe.push(L,0,p[L]):oe.push(L,1,x||t[L])),m.push(L)}}re&&Hy(this)},render:function(t,i){if(i.tween._time||!Vm())for(var s=i._pt;s;)s.r(t,s.d),s=s._next;else i.styles.revert()},get:Zs,aliases:Ms,getSetter:function(t,i,s){var o=Ms[i];return o&&o.indexOf(",")<0&&(i=o),i in js&&i!==hs&&(t._gsap.x||Zs(t,"x"))?s&&_v===s?i==="scale"?NU:IU:(_v=s||{})&&(i==="scale"?FU:OU):t.style&&!Pm(t.style[i])?DU:~i.indexOf("-")?UU:km(t,i)},core:{_removeProperty:Rh,_getMatrix:Xm}};gr.utils.checkPrefix=cc;gr.core.getStyleSaver=Yy;(function(h,t,i,s){var o=pr(h+","+t+","+i,function(f){js[f]=1});pr(t,function(f){Rr.units[f]="deg",Jy[f]=1}),Ms[o[13]]=h+","+t,pr(s,function(f){var m=f.split(":");Ms[m[1]]=o[m[0]]})})("x,y,z,scale,scaleX,scaleY,xPercent,yPercent","rotation,rotationX,rotationY,skewX,skewY","transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective","0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY");pr("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective",function(h){Rr.units[h]="px"});gr.registerPlugin(eM);var tM=gr.registerPlugin(eM)||gr;tM.core.Tween;function ZU(h){throw new Error('Could not dynamically require "'+h+'". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.')}var xh={exports:{}},O={};/**
 * @license
 * Copyright 2010-2023 Three.js Authors
 * SPDX-License-Identifier: MIT
 */var Tv;function KU(){if(Tv)return O;Tv=1;const h="152",t={LEFT:0,MIDDLE:1,RIGHT:2,ROTATE:0,DOLLY:1,PAN:2},i={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3},s=0,o=1,f=2,m=3,p=0,v=1,x=2,M=3,b=0,T=1,P=2,N=2,L=0,D=1,R=2,W=3,V=4,q=5,H=100,Q=101,re=102,oe=103,B=104,te=200,we=201,Ae=202,de=203,xe=204,ye=205,He=206,be=207,Le=208,nt=209,Ye=210,It=0,lt=1,Ce=2,ke=3,ut=4,St=5,fe=6,tn=7,Wt=0,mt=1,Xt=2,hn=0,Ft=1,un=2,Qn=3,Kn=4,ii=5,$n=300,dn=301,Pn=302,li=303,ne=304,X=306,Re=1e3,qe=1001,it=1002,st=1003,ae=1004,Xe=1004,Ee=1005,yt=1005,ft=1006,Nt=1007,Tt=1007,wt=1008,sn=1008,nn=1009,ei=1010,ce=1011,Ie=1012,rt=1013,xt=1014,Ct=1015,Un=1016,Gn=1017,Si=1018,zi=1020,ti=1021,Jn=1023,_r=1024,Da=1025,Wr=1026,As=1027,Uh=1028,Ih=1029,$=1030,ve=1031,Ne=1033,me=33776,ze=33777,zt=33778,Vt=33779,Qt=35840,ln=35841,pn=35842,mn=35843,yn=36196,On=37492,Ei=37496,$i=37808,Xr=37809,ni=37810,bn=37811,Ua=37812,ci=37813,qr=37814,Io=37815,Rs=37816,Ia=37817,bi=37818,Yr=37819,Na=37820,Ii=37821,Qs=36492,Nh=36283,No=36284,kf=36285,Gf=36286,qm=2200,Ym=2201,Zm=2202,dc=2300,pc=2301,Fh=2302,Fa=2400,Oa=2401,mc=2402,Oh=2500,Hf=2501,nM=0,iM=1,rM=2,Vf=3e3,ea=3001,Km=3200,$m=3201,ta=0,Jm=1,na="",gn="srgb",Zr="srgb-linear",Wf="display-p3",sM=0,Bh=7680,aM=7681,oM=7682,lM=7683,cM=34055,hM=34056,uM=5386,fM=512,dM=513,pM=514,mM=515,gM=516,_M=517,xM=518,jm=519,gc=35044,vM=35048,yM=35040,MM=35045,SM=35049,EM=35041,bM=35046,TM=35050,wM=35042,AM="100",Xf="300 es",zh=1035;class Cs{addEventListener(e,n){this._listeners===void 0&&(this._listeners={});const r=this._listeners;r[e]===void 0&&(r[e]=[]),r[e].indexOf(n)===-1&&r[e].push(n)}hasEventListener(e,n){if(this._listeners===void 0)return!1;const r=this._listeners;return r[e]!==void 0&&r[e].indexOf(n)!==-1}removeEventListener(e,n){if(this._listeners===void 0)return;const a=this._listeners[e];if(a!==void 0){const l=a.indexOf(n);l!==-1&&a.splice(l,1)}}dispatchEvent(e){if(this._listeners===void 0)return;const r=this._listeners[e.type];if(r!==void 0){e.target=this;const a=r.slice(0);for(let l=0,u=a.length;l<u;l++)a[l].call(this,e);e.target=null}}}const ki=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"];let Qm=1234567;const Ba=Math.PI/180,Fo=180/Math.PI;function xr(){const c=Math.random()*4294967295|0,e=Math.random()*4294967295|0,n=Math.random()*4294967295|0,r=Math.random()*4294967295|0;return(ki[c&255]+ki[c>>8&255]+ki[c>>16&255]+ki[c>>24&255]+"-"+ki[e&255]+ki[e>>8&255]+"-"+ki[e>>16&15|64]+ki[e>>24&255]+"-"+ki[n&63|128]+ki[n>>8&255]+"-"+ki[n>>16&255]+ki[n>>24&255]+ki[r&255]+ki[r>>8&255]+ki[r>>16&255]+ki[r>>24&255]).toLowerCase()}function hi(c,e,n){return Math.max(e,Math.min(n,c))}function qf(c,e){return(c%e+e)%e}function RM(c,e,n,r,a){return r+(c-e)*(a-r)/(n-e)}function CM(c,e,n){return c!==e?(n-c)/(e-c):0}function _c(c,e,n){return(1-n)*c+n*e}function PM(c,e,n,r){return _c(c,e,1-Math.exp(-n*r))}function LM(c,e=1){return e-Math.abs(qf(c,e*2)-e)}function DM(c,e,n){return c<=e?0:c>=n?1:(c=(c-e)/(n-e),c*c*(3-2*c))}function UM(c,e,n){return c<=e?0:c>=n?1:(c=(c-e)/(n-e),c*c*c*(c*(c*6-15)+10))}function IM(c,e){return c+Math.floor(Math.random()*(e-c+1))}function NM(c,e){return c+Math.random()*(e-c)}function FM(c){return c*(.5-Math.random())}function OM(c){c!==void 0&&(Qm=c);let e=Qm+=1831565813;return e=Math.imul(e^e>>>15,e|1),e^=e+Math.imul(e^e>>>7,e|61),((e^e>>>14)>>>0)/4294967296}function BM(c){return c*Ba}function zM(c){return c*Fo}function Yf(c){return(c&c-1)===0&&c!==0}function eg(c){return Math.pow(2,Math.ceil(Math.log(c)/Math.LN2))}function tg(c){return Math.pow(2,Math.floor(Math.log(c)/Math.LN2))}function kM(c,e,n,r,a){const l=Math.cos,u=Math.sin,d=l(n/2),g=u(n/2),_=l((e+r)/2),y=u((e+r)/2),S=l((e-r)/2),E=u((e-r)/2),w=l((r-e)/2),C=u((r-e)/2);switch(a){case"XYX":c.set(d*y,g*S,g*E,d*_);break;case"YZY":c.set(g*E,d*y,g*S,d*_);break;case"ZXZ":c.set(g*S,g*E,d*y,d*_);break;case"XZX":c.set(d*y,g*C,g*w,d*_);break;case"YXY":c.set(g*w,d*y,g*C,d*_);break;case"ZYZ":c.set(g*C,g*w,d*y,d*_);break;default:console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: "+a)}}function vr(c,e){switch(e.constructor){case Float32Array:return c;case Uint16Array:return c/65535;case Uint8Array:return c/255;case Int16Array:return Math.max(c/32767,-1);case Int8Array:return Math.max(c/127,-1);default:throw new Error("Invalid component type.")}}function _n(c,e){switch(e.constructor){case Float32Array:return c;case Uint16Array:return Math.round(c*65535);case Uint8Array:return Math.round(c*255);case Int16Array:return Math.round(c*32767);case Int8Array:return Math.round(c*127);default:throw new Error("Invalid component type.")}}const GM={DEG2RAD:Ba,RAD2DEG:Fo,generateUUID:xr,clamp:hi,euclideanModulo:qf,mapLinear:RM,inverseLerp:CM,lerp:_c,damp:PM,pingpong:LM,smoothstep:DM,smootherstep:UM,randInt:IM,randFloat:NM,randFloatSpread:FM,seededRandom:OM,degToRad:BM,radToDeg:zM,isPowerOfTwo:Yf,ceilPowerOfTwo:eg,floorPowerOfTwo:tg,setQuaternionFromProperEuler:kM,normalize:_n,denormalize:vr};class Je{constructor(e=0,n=0){Je.prototype.isVector2=!0,this.x=e,this.y=n}get width(){return this.x}set width(e){this.x=e}get height(){return this.y}set height(e){this.y=e}set(e,n){return this.x=e,this.y=n,this}setScalar(e){return this.x=e,this.y=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setComponent(e,n){switch(e){case 0:this.x=n;break;case 1:this.y=n;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y)}copy(e){return this.x=e.x,this.y=e.y,this}add(e){return this.x+=e.x,this.y+=e.y,this}addScalar(e){return this.x+=e,this.y+=e,this}addVectors(e,n){return this.x=e.x+n.x,this.y=e.y+n.y,this}addScaledVector(e,n){return this.x+=e.x*n,this.y+=e.y*n,this}sub(e){return this.x-=e.x,this.y-=e.y,this}subScalar(e){return this.x-=e,this.y-=e,this}subVectors(e,n){return this.x=e.x-n.x,this.y=e.y-n.y,this}multiply(e){return this.x*=e.x,this.y*=e.y,this}multiplyScalar(e){return this.x*=e,this.y*=e,this}divide(e){return this.x/=e.x,this.y/=e.y,this}divideScalar(e){return this.multiplyScalar(1/e)}applyMatrix3(e){const n=this.x,r=this.y,a=e.elements;return this.x=a[0]*n+a[3]*r+a[6],this.y=a[1]*n+a[4]*r+a[7],this}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this}clamp(e,n){return this.x=Math.max(e.x,Math.min(n.x,this.x)),this.y=Math.max(e.y,Math.min(n.y,this.y)),this}clampScalar(e,n){return this.x=Math.max(e,Math.min(n,this.x)),this.y=Math.max(e,Math.min(n,this.y)),this}clampLength(e,n){const r=this.length();return this.divideScalar(r||1).multiplyScalar(Math.max(e,Math.min(n,r)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(e){return this.x*e.x+this.y*e.y}cross(e){return this.x*e.y-this.y*e.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}angleTo(e){const n=Math.sqrt(this.lengthSq()*e.lengthSq());if(n===0)return Math.PI/2;const r=this.dot(e)/n;return Math.acos(hi(r,-1,1))}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const n=this.x-e.x,r=this.y-e.y;return n*n+r*r}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,n){return this.x+=(e.x-this.x)*n,this.y+=(e.y-this.y)*n,this}lerpVectors(e,n,r){return this.x=e.x+(n.x-e.x)*r,this.y=e.y+(n.y-e.y)*r,this}equals(e){return e.x===this.x&&e.y===this.y}fromArray(e,n=0){return this.x=e[n],this.y=e[n+1],this}toArray(e=[],n=0){return e[n]=this.x,e[n+1]=this.y,e}fromBufferAttribute(e,n){return this.x=e.getX(n),this.y=e.getY(n),this}rotateAround(e,n){const r=Math.cos(n),a=Math.sin(n),l=this.x-e.x,u=this.y-e.y;return this.x=l*r-u*a+e.x,this.y=l*a+u*r+e.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}}class wn{constructor(){wn.prototype.isMatrix3=!0,this.elements=[1,0,0,0,1,0,0,0,1]}set(e,n,r,a,l,u,d,g,_){const y=this.elements;return y[0]=e,y[1]=a,y[2]=d,y[3]=n,y[4]=l,y[5]=g,y[6]=r,y[7]=u,y[8]=_,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(e){const n=this.elements,r=e.elements;return n[0]=r[0],n[1]=r[1],n[2]=r[2],n[3]=r[3],n[4]=r[4],n[5]=r[5],n[6]=r[6],n[7]=r[7],n[8]=r[8],this}extractBasis(e,n,r){return e.setFromMatrix3Column(this,0),n.setFromMatrix3Column(this,1),r.setFromMatrix3Column(this,2),this}setFromMatrix4(e){const n=e.elements;return this.set(n[0],n[4],n[8],n[1],n[5],n[9],n[2],n[6],n[10]),this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,n){const r=e.elements,a=n.elements,l=this.elements,u=r[0],d=r[3],g=r[6],_=r[1],y=r[4],S=r[7],E=r[2],w=r[5],C=r[8],I=a[0],U=a[3],A=a[6],z=a[1],F=a[4],k=a[7],Y=a[2],K=a[5],se=a[8];return l[0]=u*I+d*z+g*Y,l[3]=u*U+d*F+g*K,l[6]=u*A+d*k+g*se,l[1]=_*I+y*z+S*Y,l[4]=_*U+y*F+S*K,l[7]=_*A+y*k+S*se,l[2]=E*I+w*z+C*Y,l[5]=E*U+w*F+C*K,l[8]=E*A+w*k+C*se,this}multiplyScalar(e){const n=this.elements;return n[0]*=e,n[3]*=e,n[6]*=e,n[1]*=e,n[4]*=e,n[7]*=e,n[2]*=e,n[5]*=e,n[8]*=e,this}determinant(){const e=this.elements,n=e[0],r=e[1],a=e[2],l=e[3],u=e[4],d=e[5],g=e[6],_=e[7],y=e[8];return n*u*y-n*d*_-r*l*y+r*d*g+a*l*_-a*u*g}invert(){const e=this.elements,n=e[0],r=e[1],a=e[2],l=e[3],u=e[4],d=e[5],g=e[6],_=e[7],y=e[8],S=y*u-d*_,E=d*g-y*l,w=_*l-u*g,C=n*S+r*E+a*w;if(C===0)return this.set(0,0,0,0,0,0,0,0,0);const I=1/C;return e[0]=S*I,e[1]=(a*_-y*r)*I,e[2]=(d*r-a*u)*I,e[3]=E*I,e[4]=(y*n-a*g)*I,e[5]=(a*l-d*n)*I,e[6]=w*I,e[7]=(r*g-_*n)*I,e[8]=(u*n-r*l)*I,this}transpose(){let e;const n=this.elements;return e=n[1],n[1]=n[3],n[3]=e,e=n[2],n[2]=n[6],n[6]=e,e=n[5],n[5]=n[7],n[7]=e,this}getNormalMatrix(e){return this.setFromMatrix4(e).invert().transpose()}transposeIntoArray(e){const n=this.elements;return e[0]=n[0],e[1]=n[3],e[2]=n[6],e[3]=n[1],e[4]=n[4],e[5]=n[7],e[6]=n[2],e[7]=n[5],e[8]=n[8],this}setUvTransform(e,n,r,a,l,u,d){const g=Math.cos(l),_=Math.sin(l);return this.set(r*g,r*_,-r*(g*u+_*d)+u+e,-a*_,a*g,-a*(-_*u+g*d)+d+n,0,0,1),this}scale(e,n){return this.premultiply(Zf.makeScale(e,n)),this}rotate(e){return this.premultiply(Zf.makeRotation(-e)),this}translate(e,n){return this.premultiply(Zf.makeTranslation(e,n)),this}makeTranslation(e,n){return this.set(1,0,e,0,1,n,0,0,1),this}makeRotation(e){const n=Math.cos(e),r=Math.sin(e);return this.set(n,-r,0,r,n,0,0,0,1),this}makeScale(e,n){return this.set(e,0,0,0,n,0,0,0,1),this}equals(e){const n=this.elements,r=e.elements;for(let a=0;a<9;a++)if(n[a]!==r[a])return!1;return!0}fromArray(e,n=0){for(let r=0;r<9;r++)this.elements[r]=e[r+n];return this}toArray(e=[],n=0){const r=this.elements;return e[n]=r[0],e[n+1]=r[1],e[n+2]=r[2],e[n+3]=r[3],e[n+4]=r[4],e[n+5]=r[5],e[n+6]=r[6],e[n+7]=r[7],e[n+8]=r[8],e}clone(){return new this.constructor().fromArray(this.elements)}}const Zf=new wn;function ng(c){for(let e=c.length-1;e>=0;--e)if(c[e]>=65535)return!0;return!1}const HM={Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array};function Oo(c,e){return new HM[c](e)}function xc(c){return document.createElementNS("http://www.w3.org/1999/xhtml",c)}const ig={};function vc(c){c in ig||(ig[c]=!0,console.warn(c))}function Bo(c){return c<.04045?c*.0773993808:Math.pow(c*.9478672986+.0521327014,2.4)}function Kf(c){return c<.0031308?c*12.92:1.055*Math.pow(c,.41666)-.055}const VM=new wn().fromArray([.8224621,.0331941,.0170827,.177538,.9668058,.0723974,-1e-7,1e-7,.9105199]),WM=new wn().fromArray([1.2249401,-.0420569,-.0196376,-.2249404,1.0420571,-.0786361,1e-7,0,1.0982735]);function XM(c){return c.convertSRGBToLinear().applyMatrix3(WM)}function qM(c){return c.applyMatrix3(VM).convertLinearToSRGB()}const YM={[Zr]:c=>c,[gn]:c=>c.convertSRGBToLinear(),[Wf]:XM},ZM={[Zr]:c=>c,[gn]:c=>c.convertLinearToSRGB(),[Wf]:qM},Pr={enabled:!0,get legacyMode(){return console.warn("THREE.ColorManagement: .legacyMode=false renamed to .enabled=true in r150."),!this.enabled},set legacyMode(c){console.warn("THREE.ColorManagement: .legacyMode=false renamed to .enabled=true in r150."),this.enabled=!c},get workingColorSpace(){return Zr},set workingColorSpace(c){console.warn("THREE.ColorManagement: .workingColorSpace is readonly.")},convert:function(c,e,n){if(this.enabled===!1||e===n||!e||!n)return c;const r=YM[e],a=ZM[n];if(r===void 0||a===void 0)throw new Error(`Unsupported color space conversion, "${e}" to "${n}".`);return a(r(c))},fromWorkingColorSpace:function(c,e){return this.convert(c,this.workingColorSpace,e)},toWorkingColorSpace:function(c,e){return this.convert(c,e,this.workingColorSpace)}};let zo;class $f{static getDataURL(e){if(/^data:/i.test(e.src)||typeof HTMLCanvasElement>"u")return e.src;let n;if(e instanceof HTMLCanvasElement)n=e;else{zo===void 0&&(zo=xc("canvas")),zo.width=e.width,zo.height=e.height;const r=zo.getContext("2d");e instanceof ImageData?r.putImageData(e,0,0):r.drawImage(e,0,0,e.width,e.height),n=zo}return n.width>2048||n.height>2048?(console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",e),n.toDataURL("image/jpeg",.6)):n.toDataURL("image/png")}static sRGBToLinear(e){if(typeof HTMLImageElement<"u"&&e instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&e instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&e instanceof ImageBitmap){const n=xc("canvas");n.width=e.width,n.height=e.height;const r=n.getContext("2d");r.drawImage(e,0,0,e.width,e.height);const a=r.getImageData(0,0,e.width,e.height),l=a.data;for(let u=0;u<l.length;u++)l[u]=Bo(l[u]/255)*255;return r.putImageData(a,0,0),n}else if(e.data){const n=e.data.slice(0);for(let r=0;r<n.length;r++)n instanceof Uint8Array||n instanceof Uint8ClampedArray?n[r]=Math.floor(Bo(n[r]/255)*255):n[r]=Bo(n[r]);return{data:n,width:e.width,height:e.height}}else return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),e}}class za{constructor(e=null){this.isSource=!0,this.uuid=xr(),this.data=e,this.version=0}set needsUpdate(e){e===!0&&this.version++}toJSON(e){const n=e===void 0||typeof e=="string";if(!n&&e.images[this.uuid]!==void 0)return e.images[this.uuid];const r={uuid:this.uuid,url:""},a=this.data;if(a!==null){let l;if(Array.isArray(a)){l=[];for(let u=0,d=a.length;u<d;u++)a[u].isDataTexture?l.push(Jf(a[u].image)):l.push(Jf(a[u]))}else l=Jf(a);r.url=l}return n||(e.images[this.uuid]=r),r}}function Jf(c){return typeof HTMLImageElement<"u"&&c instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&c instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&c instanceof ImageBitmap?$f.getDataURL(c):c.data?{data:Array.from(c.data),width:c.width,height:c.height,type:c.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}let KM=0;class di extends Cs{constructor(e=di.DEFAULT_IMAGE,n=di.DEFAULT_MAPPING,r=qe,a=qe,l=ft,u=wt,d=Jn,g=nn,_=di.DEFAULT_ANISOTROPY,y=na){super(),this.isTexture=!0,Object.defineProperty(this,"id",{value:KM++}),this.uuid=xr(),this.name="",this.source=new za(e),this.mipmaps=[],this.mapping=n,this.channel=0,this.wrapS=r,this.wrapT=a,this.magFilter=l,this.minFilter=u,this.anisotropy=_,this.format=d,this.internalFormat=null,this.type=g,this.offset=new Je(0,0),this.repeat=new Je(1,1),this.center=new Je(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new wn,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,typeof y=="string"?this.colorSpace=y:(vc("THREE.Texture: Property .encoding has been replaced by .colorSpace."),this.colorSpace=y===ea?gn:na),this.userData={},this.version=0,this.onUpdate=null,this.isRenderTargetTexture=!1,this.needsPMREMUpdate=!1}get image(){return this.source.data}set image(e=null){this.source.data=e}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return new this.constructor().copy(this)}copy(e){return this.name=e.name,this.source=e.source,this.mipmaps=e.mipmaps.slice(0),this.mapping=e.mapping,this.channel=e.channel,this.wrapS=e.wrapS,this.wrapT=e.wrapT,this.magFilter=e.magFilter,this.minFilter=e.minFilter,this.anisotropy=e.anisotropy,this.format=e.format,this.internalFormat=e.internalFormat,this.type=e.type,this.offset.copy(e.offset),this.repeat.copy(e.repeat),this.center.copy(e.center),this.rotation=e.rotation,this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrix.copy(e.matrix),this.generateMipmaps=e.generateMipmaps,this.premultiplyAlpha=e.premultiplyAlpha,this.flipY=e.flipY,this.unpackAlignment=e.unpackAlignment,this.colorSpace=e.colorSpace,this.userData=JSON.parse(JSON.stringify(e.userData)),this.needsUpdate=!0,this}toJSON(e){const n=e===void 0||typeof e=="string";if(!n&&e.textures[this.uuid]!==void 0)return e.textures[this.uuid];const r={metadata:{version:4.5,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(e).uuid,mapping:this.mapping,channel:this.channel,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,internalFormat:this.internalFormat,type:this.type,colorSpace:this.colorSpace,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,generateMipmaps:this.generateMipmaps,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return Object.keys(this.userData).length>0&&(r.userData=this.userData),n||(e.textures[this.uuid]=r),r}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(e){if(this.mapping!==$n)return e;if(e.applyMatrix3(this.matrix),e.x<0||e.x>1)switch(this.wrapS){case Re:e.x=e.x-Math.floor(e.x);break;case qe:e.x=e.x<0?0:1;break;case it:Math.abs(Math.floor(e.x)%2)===1?e.x=Math.ceil(e.x)-e.x:e.x=e.x-Math.floor(e.x);break}if(e.y<0||e.y>1)switch(this.wrapT){case Re:e.y=e.y-Math.floor(e.y);break;case qe:e.y=e.y<0?0:1;break;case it:Math.abs(Math.floor(e.y)%2)===1?e.y=Math.ceil(e.y)-e.y:e.y=e.y-Math.floor(e.y);break}return this.flipY&&(e.y=1-e.y),e}set needsUpdate(e){e===!0&&(this.version++,this.source.needsUpdate=!0)}get encoding(){return vc("THREE.Texture: Property .encoding has been replaced by .colorSpace."),this.colorSpace===gn?ea:Vf}set encoding(e){vc("THREE.Texture: Property .encoding has been replaced by .colorSpace."),this.colorSpace=e===ea?gn:na}}di.DEFAULT_IMAGE=null,di.DEFAULT_MAPPING=$n,di.DEFAULT_ANISOTROPY=1;class Hn{constructor(e=0,n=0,r=0,a=1){Hn.prototype.isVector4=!0,this.x=e,this.y=n,this.z=r,this.w=a}get width(){return this.z}set width(e){this.z=e}get height(){return this.w}set height(e){this.w=e}set(e,n,r,a){return this.x=e,this.y=n,this.z=r,this.w=a,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this.w=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setZ(e){return this.z=e,this}setW(e){return this.w=e,this}setComponent(e,n){switch(e){case 0:this.x=n;break;case 1:this.y=n;break;case 2:this.z=n;break;case 3:this.w=n;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this.w=e.w!==void 0?e.w:1,this}add(e){return this.x+=e.x,this.y+=e.y,this.z+=e.z,this.w+=e.w,this}addScalar(e){return this.x+=e,this.y+=e,this.z+=e,this.w+=e,this}addVectors(e,n){return this.x=e.x+n.x,this.y=e.y+n.y,this.z=e.z+n.z,this.w=e.w+n.w,this}addScaledVector(e,n){return this.x+=e.x*n,this.y+=e.y*n,this.z+=e.z*n,this.w+=e.w*n,this}sub(e){return this.x-=e.x,this.y-=e.y,this.z-=e.z,this.w-=e.w,this}subScalar(e){return this.x-=e,this.y-=e,this.z-=e,this.w-=e,this}subVectors(e,n){return this.x=e.x-n.x,this.y=e.y-n.y,this.z=e.z-n.z,this.w=e.w-n.w,this}multiply(e){return this.x*=e.x,this.y*=e.y,this.z*=e.z,this.w*=e.w,this}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this.w*=e,this}applyMatrix4(e){const n=this.x,r=this.y,a=this.z,l=this.w,u=e.elements;return this.x=u[0]*n+u[4]*r+u[8]*a+u[12]*l,this.y=u[1]*n+u[5]*r+u[9]*a+u[13]*l,this.z=u[2]*n+u[6]*r+u[10]*a+u[14]*l,this.w=u[3]*n+u[7]*r+u[11]*a+u[15]*l,this}divideScalar(e){return this.multiplyScalar(1/e)}setAxisAngleFromQuaternion(e){this.w=2*Math.acos(e.w);const n=Math.sqrt(1-e.w*e.w);return n<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=e.x/n,this.y=e.y/n,this.z=e.z/n),this}setAxisAngleFromRotationMatrix(e){let n,r,a,l;const g=e.elements,_=g[0],y=g[4],S=g[8],E=g[1],w=g[5],C=g[9],I=g[2],U=g[6],A=g[10];if(Math.abs(y-E)<.01&&Math.abs(S-I)<.01&&Math.abs(C-U)<.01){if(Math.abs(y+E)<.1&&Math.abs(S+I)<.1&&Math.abs(C+U)<.1&&Math.abs(_+w+A-3)<.1)return this.set(1,0,0,0),this;n=Math.PI;const F=(_+1)/2,k=(w+1)/2,Y=(A+1)/2,K=(y+E)/4,se=(S+I)/4,le=(C+U)/4;return F>k&&F>Y?F<.01?(r=0,a=.707106781,l=.707106781):(r=Math.sqrt(F),a=K/r,l=se/r):k>Y?k<.01?(r=.707106781,a=0,l=.707106781):(a=Math.sqrt(k),r=K/a,l=le/a):Y<.01?(r=.707106781,a=.707106781,l=0):(l=Math.sqrt(Y),r=se/l,a=le/l),this.set(r,a,l,n),this}let z=Math.sqrt((U-C)*(U-C)+(S-I)*(S-I)+(E-y)*(E-y));return Math.abs(z)<.001&&(z=1),this.x=(U-C)/z,this.y=(S-I)/z,this.z=(E-y)/z,this.w=Math.acos((_+w+A-1)/2),this}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this.w=Math.min(this.w,e.w),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this.w=Math.max(this.w,e.w),this}clamp(e,n){return this.x=Math.max(e.x,Math.min(n.x,this.x)),this.y=Math.max(e.y,Math.min(n.y,this.y)),this.z=Math.max(e.z,Math.min(n.z,this.z)),this.w=Math.max(e.w,Math.min(n.w,this.w)),this}clampScalar(e,n){return this.x=Math.max(e,Math.min(n,this.x)),this.y=Math.max(e,Math.min(n,this.y)),this.z=Math.max(e,Math.min(n,this.z)),this.w=Math.max(e,Math.min(n,this.w)),this}clampLength(e,n){const r=this.length();return this.divideScalar(r||1).multiplyScalar(Math.max(e,Math.min(n,r)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z+this.w*e.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,n){return this.x+=(e.x-this.x)*n,this.y+=(e.y-this.y)*n,this.z+=(e.z-this.z)*n,this.w+=(e.w-this.w)*n,this}lerpVectors(e,n,r){return this.x=e.x+(n.x-e.x)*r,this.y=e.y+(n.y-e.y)*r,this.z=e.z+(n.z-e.z)*r,this.w=e.w+(n.w-e.w)*r,this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z&&e.w===this.w}fromArray(e,n=0){return this.x=e[n],this.y=e[n+1],this.z=e[n+2],this.w=e[n+3],this}toArray(e=[],n=0){return e[n]=this.x,e[n+1]=this.y,e[n+2]=this.z,e[n+3]=this.w,e}fromBufferAttribute(e,n){return this.x=e.getX(n),this.y=e.getY(n),this.z=e.getZ(n),this.w=e.getW(n),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}}class Kr extends Cs{constructor(e=1,n=1,r={}){super(),this.isWebGLRenderTarget=!0,this.width=e,this.height=n,this.depth=1,this.scissor=new Hn(0,0,e,n),this.scissorTest=!1,this.viewport=new Hn(0,0,e,n);const a={width:e,height:n,depth:1};r.encoding!==void 0&&(vc("THREE.WebGLRenderTarget: option.encoding has been replaced by option.colorSpace."),r.colorSpace=r.encoding===ea?gn:na),this.texture=new di(a,r.mapping,r.wrapS,r.wrapT,r.magFilter,r.minFilter,r.format,r.type,r.anisotropy,r.colorSpace),this.texture.isRenderTargetTexture=!0,this.texture.flipY=!1,this.texture.generateMipmaps=r.generateMipmaps!==void 0?r.generateMipmaps:!1,this.texture.internalFormat=r.internalFormat!==void 0?r.internalFormat:null,this.texture.minFilter=r.minFilter!==void 0?r.minFilter:ft,this.depthBuffer=r.depthBuffer!==void 0?r.depthBuffer:!0,this.stencilBuffer=r.stencilBuffer!==void 0?r.stencilBuffer:!1,this.depthTexture=r.depthTexture!==void 0?r.depthTexture:null,this.samples=r.samples!==void 0?r.samples:0}setSize(e,n,r=1){(this.width!==e||this.height!==n||this.depth!==r)&&(this.width=e,this.height=n,this.depth=r,this.texture.image.width=e,this.texture.image.height=n,this.texture.image.depth=r,this.dispose()),this.viewport.set(0,0,e,n),this.scissor.set(0,0,e,n)}clone(){return new this.constructor().copy(this)}copy(e){this.width=e.width,this.height=e.height,this.depth=e.depth,this.scissor.copy(e.scissor),this.scissorTest=e.scissorTest,this.viewport.copy(e.viewport),this.texture=e.texture.clone(),this.texture.isRenderTargetTexture=!0;const n=Object.assign({},e.texture.image);return this.texture.source=new za(n),this.depthBuffer=e.depthBuffer,this.stencilBuffer=e.stencilBuffer,e.depthTexture!==null&&(this.depthTexture=e.depthTexture.clone()),this.samples=e.samples,this}dispose(){this.dispatchEvent({type:"dispose"})}}class kh extends di{constructor(e=null,n=1,r=1,a=1){super(null),this.isDataArrayTexture=!0,this.image={data:e,width:n,height:r,depth:a},this.magFilter=st,this.minFilter=st,this.wrapR=qe,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class $M extends Kr{constructor(e=1,n=1,r=1){super(e,n),this.isWebGLArrayRenderTarget=!0,this.depth=r,this.texture=new kh(null,e,n,r),this.texture.isRenderTargetTexture=!0}}class jf extends di{constructor(e=null,n=1,r=1,a=1){super(null),this.isData3DTexture=!0,this.image={data:e,width:n,height:r,depth:a},this.magFilter=st,this.minFilter=st,this.wrapR=qe,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class JM extends Kr{constructor(e=1,n=1,r=1){super(e,n),this.isWebGL3DRenderTarget=!0,this.depth=r,this.texture=new jf(null,e,n,r),this.texture.isRenderTargetTexture=!0}}class jM extends Kr{constructor(e=1,n=1,r=1,a={}){super(e,n,a),this.isWebGLMultipleRenderTargets=!0;const l=this.texture;this.texture=[];for(let u=0;u<r;u++)this.texture[u]=l.clone(),this.texture[u].isRenderTargetTexture=!0}setSize(e,n,r=1){if(this.width!==e||this.height!==n||this.depth!==r){this.width=e,this.height=n,this.depth=r;for(let a=0,l=this.texture.length;a<l;a++)this.texture[a].image.width=e,this.texture[a].image.height=n,this.texture[a].image.depth=r;this.dispose()}return this.viewport.set(0,0,e,n),this.scissor.set(0,0,e,n),this}copy(e){this.dispose(),this.width=e.width,this.height=e.height,this.depth=e.depth,this.scissor.copy(e.scissor),this.scissorTest=e.scissorTest,this.viewport.copy(e.viewport),this.depthBuffer=e.depthBuffer,this.stencilBuffer=e.stencilBuffer,e.depthTexture!==null&&(this.depthTexture=e.depthTexture.clone()),this.texture.length=0;for(let n=0,r=e.texture.length;n<r;n++)this.texture[n]=e.texture[n].clone(),this.texture[n].isRenderTargetTexture=!0;return this}}class or{constructor(e=0,n=0,r=0,a=1){this.isQuaternion=!0,this._x=e,this._y=n,this._z=r,this._w=a}static slerpFlat(e,n,r,a,l,u,d){let g=r[a+0],_=r[a+1],y=r[a+2],S=r[a+3];const E=l[u+0],w=l[u+1],C=l[u+2],I=l[u+3];if(d===0){e[n+0]=g,e[n+1]=_,e[n+2]=y,e[n+3]=S;return}if(d===1){e[n+0]=E,e[n+1]=w,e[n+2]=C,e[n+3]=I;return}if(S!==I||g!==E||_!==w||y!==C){let U=1-d;const A=g*E+_*w+y*C+S*I,z=A>=0?1:-1,F=1-A*A;if(F>Number.EPSILON){const Y=Math.sqrt(F),K=Math.atan2(Y,A*z);U=Math.sin(U*K)/Y,d=Math.sin(d*K)/Y}const k=d*z;if(g=g*U+E*k,_=_*U+w*k,y=y*U+C*k,S=S*U+I*k,U===1-d){const Y=1/Math.sqrt(g*g+_*_+y*y+S*S);g*=Y,_*=Y,y*=Y,S*=Y}}e[n]=g,e[n+1]=_,e[n+2]=y,e[n+3]=S}static multiplyQuaternionsFlat(e,n,r,a,l,u){const d=r[a],g=r[a+1],_=r[a+2],y=r[a+3],S=l[u],E=l[u+1],w=l[u+2],C=l[u+3];return e[n]=d*C+y*S+g*w-_*E,e[n+1]=g*C+y*E+_*S-d*w,e[n+2]=_*C+y*w+d*E-g*S,e[n+3]=y*C-d*S-g*E-_*w,e}get x(){return this._x}set x(e){this._x=e,this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e,this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e,this._onChangeCallback()}get w(){return this._w}set w(e){this._w=e,this._onChangeCallback()}set(e,n,r,a){return this._x=e,this._y=n,this._z=r,this._w=a,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(e){return this._x=e.x,this._y=e.y,this._z=e.z,this._w=e.w,this._onChangeCallback(),this}setFromEuler(e,n){const r=e._x,a=e._y,l=e._z,u=e._order,d=Math.cos,g=Math.sin,_=d(r/2),y=d(a/2),S=d(l/2),E=g(r/2),w=g(a/2),C=g(l/2);switch(u){case"XYZ":this._x=E*y*S+_*w*C,this._y=_*w*S-E*y*C,this._z=_*y*C+E*w*S,this._w=_*y*S-E*w*C;break;case"YXZ":this._x=E*y*S+_*w*C,this._y=_*w*S-E*y*C,this._z=_*y*C-E*w*S,this._w=_*y*S+E*w*C;break;case"ZXY":this._x=E*y*S-_*w*C,this._y=_*w*S+E*y*C,this._z=_*y*C+E*w*S,this._w=_*y*S-E*w*C;break;case"ZYX":this._x=E*y*S-_*w*C,this._y=_*w*S+E*y*C,this._z=_*y*C-E*w*S,this._w=_*y*S+E*w*C;break;case"YZX":this._x=E*y*S+_*w*C,this._y=_*w*S+E*y*C,this._z=_*y*C-E*w*S,this._w=_*y*S-E*w*C;break;case"XZY":this._x=E*y*S-_*w*C,this._y=_*w*S-E*y*C,this._z=_*y*C+E*w*S,this._w=_*y*S+E*w*C;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+u)}return n!==!1&&this._onChangeCallback(),this}setFromAxisAngle(e,n){const r=n/2,a=Math.sin(r);return this._x=e.x*a,this._y=e.y*a,this._z=e.z*a,this._w=Math.cos(r),this._onChangeCallback(),this}setFromRotationMatrix(e){const n=e.elements,r=n[0],a=n[4],l=n[8],u=n[1],d=n[5],g=n[9],_=n[2],y=n[6],S=n[10],E=r+d+S;if(E>0){const w=.5/Math.sqrt(E+1);this._w=.25/w,this._x=(y-g)*w,this._y=(l-_)*w,this._z=(u-a)*w}else if(r>d&&r>S){const w=2*Math.sqrt(1+r-d-S);this._w=(y-g)/w,this._x=.25*w,this._y=(a+u)/w,this._z=(l+_)/w}else if(d>S){const w=2*Math.sqrt(1+d-r-S);this._w=(l-_)/w,this._x=(a+u)/w,this._y=.25*w,this._z=(g+y)/w}else{const w=2*Math.sqrt(1+S-r-d);this._w=(u-a)/w,this._x=(l+_)/w,this._y=(g+y)/w,this._z=.25*w}return this._onChangeCallback(),this}setFromUnitVectors(e,n){let r=e.dot(n)+1;return r<Number.EPSILON?(r=0,Math.abs(e.x)>Math.abs(e.z)?(this._x=-e.y,this._y=e.x,this._z=0,this._w=r):(this._x=0,this._y=-e.z,this._z=e.y,this._w=r)):(this._x=e.y*n.z-e.z*n.y,this._y=e.z*n.x-e.x*n.z,this._z=e.x*n.y-e.y*n.x,this._w=r),this.normalize()}angleTo(e){return 2*Math.acos(Math.abs(hi(this.dot(e),-1,1)))}rotateTowards(e,n){const r=this.angleTo(e);if(r===0)return this;const a=Math.min(1,n/r);return this.slerp(e,a),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(e){return this._x*e._x+this._y*e._y+this._z*e._z+this._w*e._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let e=this.length();return e===0?(this._x=0,this._y=0,this._z=0,this._w=1):(e=1/e,this._x=this._x*e,this._y=this._y*e,this._z=this._z*e,this._w=this._w*e),this._onChangeCallback(),this}multiply(e){return this.multiplyQuaternions(this,e)}premultiply(e){return this.multiplyQuaternions(e,this)}multiplyQuaternions(e,n){const r=e._x,a=e._y,l=e._z,u=e._w,d=n._x,g=n._y,_=n._z,y=n._w;return this._x=r*y+u*d+a*_-l*g,this._y=a*y+u*g+l*d-r*_,this._z=l*y+u*_+r*g-a*d,this._w=u*y-r*d-a*g-l*_,this._onChangeCallback(),this}slerp(e,n){if(n===0)return this;if(n===1)return this.copy(e);const r=this._x,a=this._y,l=this._z,u=this._w;let d=u*e._w+r*e._x+a*e._y+l*e._z;if(d<0?(this._w=-e._w,this._x=-e._x,this._y=-e._y,this._z=-e._z,d=-d):this.copy(e),d>=1)return this._w=u,this._x=r,this._y=a,this._z=l,this;const g=1-d*d;if(g<=Number.EPSILON){const w=1-n;return this._w=w*u+n*this._w,this._x=w*r+n*this._x,this._y=w*a+n*this._y,this._z=w*l+n*this._z,this.normalize(),this._onChangeCallback(),this}const _=Math.sqrt(g),y=Math.atan2(_,d),S=Math.sin((1-n)*y)/_,E=Math.sin(n*y)/_;return this._w=u*S+this._w*E,this._x=r*S+this._x*E,this._y=a*S+this._y*E,this._z=l*S+this._z*E,this._onChangeCallback(),this}slerpQuaternions(e,n,r){return this.copy(e).slerp(n,r)}random(){const e=Math.random(),n=Math.sqrt(1-e),r=Math.sqrt(e),a=2*Math.PI*Math.random(),l=2*Math.PI*Math.random();return this.set(n*Math.cos(a),r*Math.sin(l),r*Math.cos(l),n*Math.sin(a))}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._w===this._w}fromArray(e,n=0){return this._x=e[n],this._y=e[n+1],this._z=e[n+2],this._w=e[n+3],this._onChangeCallback(),this}toArray(e=[],n=0){return e[n]=this._x,e[n+1]=this._y,e[n+2]=this._z,e[n+3]=this._w,e}fromBufferAttribute(e,n){return this._x=e.getX(n),this._y=e.getY(n),this._z=e.getZ(n),this._w=e.getW(n),this}toJSON(){return this.toArray()}_onChange(e){return this._onChangeCallback=e,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w}}class j{constructor(e=0,n=0,r=0){j.prototype.isVector3=!0,this.x=e,this.y=n,this.z=r}set(e,n,r){return r===void 0&&(r=this.z),this.x=e,this.y=n,this.z=r,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setZ(e){return this.z=e,this}setComponent(e,n){switch(e){case 0:this.x=n;break;case 1:this.y=n;break;case 2:this.z=n;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this}add(e){return this.x+=e.x,this.y+=e.y,this.z+=e.z,this}addScalar(e){return this.x+=e,this.y+=e,this.z+=e,this}addVectors(e,n){return this.x=e.x+n.x,this.y=e.y+n.y,this.z=e.z+n.z,this}addScaledVector(e,n){return this.x+=e.x*n,this.y+=e.y*n,this.z+=e.z*n,this}sub(e){return this.x-=e.x,this.y-=e.y,this.z-=e.z,this}subScalar(e){return this.x-=e,this.y-=e,this.z-=e,this}subVectors(e,n){return this.x=e.x-n.x,this.y=e.y-n.y,this.z=e.z-n.z,this}multiply(e){return this.x*=e.x,this.y*=e.y,this.z*=e.z,this}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this}multiplyVectors(e,n){return this.x=e.x*n.x,this.y=e.y*n.y,this.z=e.z*n.z,this}applyEuler(e){return this.applyQuaternion(rg.setFromEuler(e))}applyAxisAngle(e,n){return this.applyQuaternion(rg.setFromAxisAngle(e,n))}applyMatrix3(e){const n=this.x,r=this.y,a=this.z,l=e.elements;return this.x=l[0]*n+l[3]*r+l[6]*a,this.y=l[1]*n+l[4]*r+l[7]*a,this.z=l[2]*n+l[5]*r+l[8]*a,this}applyNormalMatrix(e){return this.applyMatrix3(e).normalize()}applyMatrix4(e){const n=this.x,r=this.y,a=this.z,l=e.elements,u=1/(l[3]*n+l[7]*r+l[11]*a+l[15]);return this.x=(l[0]*n+l[4]*r+l[8]*a+l[12])*u,this.y=(l[1]*n+l[5]*r+l[9]*a+l[13])*u,this.z=(l[2]*n+l[6]*r+l[10]*a+l[14])*u,this}applyQuaternion(e){const n=this.x,r=this.y,a=this.z,l=e.x,u=e.y,d=e.z,g=e.w,_=g*n+u*a-d*r,y=g*r+d*n-l*a,S=g*a+l*r-u*n,E=-l*n-u*r-d*a;return this.x=_*g+E*-l+y*-d-S*-u,this.y=y*g+E*-u+S*-l-_*-d,this.z=S*g+E*-d+_*-u-y*-l,this}project(e){return this.applyMatrix4(e.matrixWorldInverse).applyMatrix4(e.projectionMatrix)}unproject(e){return this.applyMatrix4(e.projectionMatrixInverse).applyMatrix4(e.matrixWorld)}transformDirection(e){const n=this.x,r=this.y,a=this.z,l=e.elements;return this.x=l[0]*n+l[4]*r+l[8]*a,this.y=l[1]*n+l[5]*r+l[9]*a,this.z=l[2]*n+l[6]*r+l[10]*a,this.normalize()}divide(e){return this.x/=e.x,this.y/=e.y,this.z/=e.z,this}divideScalar(e){return this.multiplyScalar(1/e)}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this}clamp(e,n){return this.x=Math.max(e.x,Math.min(n.x,this.x)),this.y=Math.max(e.y,Math.min(n.y,this.y)),this.z=Math.max(e.z,Math.min(n.z,this.z)),this}clampScalar(e,n){return this.x=Math.max(e,Math.min(n,this.x)),this.y=Math.max(e,Math.min(n,this.y)),this.z=Math.max(e,Math.min(n,this.z)),this}clampLength(e,n){const r=this.length();return this.divideScalar(r||1).multiplyScalar(Math.max(e,Math.min(n,r)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,n){return this.x+=(e.x-this.x)*n,this.y+=(e.y-this.y)*n,this.z+=(e.z-this.z)*n,this}lerpVectors(e,n,r){return this.x=e.x+(n.x-e.x)*r,this.y=e.y+(n.y-e.y)*r,this.z=e.z+(n.z-e.z)*r,this}cross(e){return this.crossVectors(this,e)}crossVectors(e,n){const r=e.x,a=e.y,l=e.z,u=n.x,d=n.y,g=n.z;return this.x=a*g-l*d,this.y=l*u-r*g,this.z=r*d-a*u,this}projectOnVector(e){const n=e.lengthSq();if(n===0)return this.set(0,0,0);const r=e.dot(this)/n;return this.copy(e).multiplyScalar(r)}projectOnPlane(e){return Qf.copy(this).projectOnVector(e),this.sub(Qf)}reflect(e){return this.sub(Qf.copy(e).multiplyScalar(2*this.dot(e)))}angleTo(e){const n=Math.sqrt(this.lengthSq()*e.lengthSq());if(n===0)return Math.PI/2;const r=this.dot(e)/n;return Math.acos(hi(r,-1,1))}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const n=this.x-e.x,r=this.y-e.y,a=this.z-e.z;return n*n+r*r+a*a}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)+Math.abs(this.z-e.z)}setFromSpherical(e){return this.setFromSphericalCoords(e.radius,e.phi,e.theta)}setFromSphericalCoords(e,n,r){const a=Math.sin(n)*e;return this.x=a*Math.sin(r),this.y=Math.cos(n)*e,this.z=a*Math.cos(r),this}setFromCylindrical(e){return this.setFromCylindricalCoords(e.radius,e.theta,e.y)}setFromCylindricalCoords(e,n,r){return this.x=e*Math.sin(n),this.y=r,this.z=e*Math.cos(n),this}setFromMatrixPosition(e){const n=e.elements;return this.x=n[12],this.y=n[13],this.z=n[14],this}setFromMatrixScale(e){const n=this.setFromMatrixColumn(e,0).length(),r=this.setFromMatrixColumn(e,1).length(),a=this.setFromMatrixColumn(e,2).length();return this.x=n,this.y=r,this.z=a,this}setFromMatrixColumn(e,n){return this.fromArray(e.elements,n*4)}setFromMatrix3Column(e,n){return this.fromArray(e.elements,n*3)}setFromEuler(e){return this.x=e._x,this.y=e._y,this.z=e._z,this}setFromColor(e){return this.x=e.r,this.y=e.g,this.z=e.b,this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z}fromArray(e,n=0){return this.x=e[n],this.y=e[n+1],this.z=e[n+2],this}toArray(e=[],n=0){return e[n]=this.x,e[n+1]=this.y,e[n+2]=this.z,e}fromBufferAttribute(e,n){return this.x=e.getX(n),this.y=e.getY(n),this.z=e.getZ(n),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const e=(Math.random()-.5)*2,n=Math.random()*Math.PI*2,r=Math.sqrt(1-e**2);return this.x=r*Math.cos(n),this.y=r*Math.sin(n),this.z=e,this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}}const Qf=new j,rg=new or;class us{constructor(e=new j(1/0,1/0,1/0),n=new j(-1/0,-1/0,-1/0)){this.isBox3=!0,this.min=e,this.max=n}set(e,n){return this.min.copy(e),this.max.copy(n),this}setFromArray(e){this.makeEmpty();for(let n=0,r=e.length;n<r;n+=3)this.expandByPoint(Ls.fromArray(e,n));return this}setFromBufferAttribute(e){this.makeEmpty();for(let n=0,r=e.count;n<r;n++)this.expandByPoint(Ls.fromBufferAttribute(e,n));return this}setFromPoints(e){this.makeEmpty();for(let n=0,r=e.length;n<r;n++)this.expandByPoint(e[n]);return this}setFromCenterAndSize(e,n){const r=Ls.copy(n).multiplyScalar(.5);return this.min.copy(e).sub(r),this.max.copy(e).add(r),this}setFromObject(e,n=!1){return this.makeEmpty(),this.expandByObject(e,n)}clone(){return new this.constructor().copy(this)}copy(e){return this.min.copy(e.min),this.max.copy(e.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(e){return this.isEmpty()?e.set(0,0,0):e.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(e){return this.isEmpty()?e.set(0,0,0):e.subVectors(this.max,this.min)}expandByPoint(e){return this.min.min(e),this.max.max(e),this}expandByVector(e){return this.min.sub(e),this.max.add(e),this}expandByScalar(e){return this.min.addScalar(-e),this.max.addScalar(e),this}expandByObject(e,n=!1){if(e.updateWorldMatrix(!1,!1),e.boundingBox!==void 0)e.boundingBox===null&&e.computeBoundingBox(),ko.copy(e.boundingBox),ko.applyMatrix4(e.matrixWorld),this.union(ko);else{const a=e.geometry;if(a!==void 0)if(n&&a.attributes!==void 0&&a.attributes.position!==void 0){const l=a.attributes.position;for(let u=0,d=l.count;u<d;u++)Ls.fromBufferAttribute(l,u).applyMatrix4(e.matrixWorld),this.expandByPoint(Ls)}else a.boundingBox===null&&a.computeBoundingBox(),ko.copy(a.boundingBox),ko.applyMatrix4(e.matrixWorld),this.union(ko)}const r=e.children;for(let a=0,l=r.length;a<l;a++)this.expandByObject(r[a],n);return this}containsPoint(e){return!(e.x<this.min.x||e.x>this.max.x||e.y<this.min.y||e.y>this.max.y||e.z<this.min.z||e.z>this.max.z)}containsBox(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y&&this.min.z<=e.min.z&&e.max.z<=this.max.z}getParameter(e,n){return n.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y),(e.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(e){return!(e.max.x<this.min.x||e.min.x>this.max.x||e.max.y<this.min.y||e.min.y>this.max.y||e.max.z<this.min.z||e.min.z>this.max.z)}intersectsSphere(e){return this.clampPoint(e.center,Ls),Ls.distanceToSquared(e.center)<=e.radius*e.radius}intersectsPlane(e){let n,r;return e.normal.x>0?(n=e.normal.x*this.min.x,r=e.normal.x*this.max.x):(n=e.normal.x*this.max.x,r=e.normal.x*this.min.x),e.normal.y>0?(n+=e.normal.y*this.min.y,r+=e.normal.y*this.max.y):(n+=e.normal.y*this.max.y,r+=e.normal.y*this.min.y),e.normal.z>0?(n+=e.normal.z*this.min.z,r+=e.normal.z*this.max.z):(n+=e.normal.z*this.max.z,r+=e.normal.z*this.min.z),n<=-e.constant&&r>=-e.constant}intersectsTriangle(e){if(this.isEmpty())return!1;this.getCenter(yc),Gh.subVectors(this.max,yc),Go.subVectors(e.a,yc),Ho.subVectors(e.b,yc),Vo.subVectors(e.c,yc),ia.subVectors(Ho,Go),ra.subVectors(Vo,Ho),ka.subVectors(Go,Vo);let n=[0,-ia.z,ia.y,0,-ra.z,ra.y,0,-ka.z,ka.y,ia.z,0,-ia.x,ra.z,0,-ra.x,ka.z,0,-ka.x,-ia.y,ia.x,0,-ra.y,ra.x,0,-ka.y,ka.x,0];return!ed(n,Go,Ho,Vo,Gh)||(n=[1,0,0,0,1,0,0,0,1],!ed(n,Go,Ho,Vo,Gh))?!1:(Hh.crossVectors(ia,ra),n=[Hh.x,Hh.y,Hh.z],ed(n,Go,Ho,Vo,Gh))}clampPoint(e,n){return n.copy(e).clamp(this.min,this.max)}distanceToPoint(e){return this.clampPoint(e,Ls).distanceTo(e)}getBoundingSphere(e){return this.isEmpty()?e.makeEmpty():(this.getCenter(e.center),e.radius=this.getSize(Ls).length()*.5),e}intersect(e){return this.min.max(e.min),this.max.min(e.max),this.isEmpty()&&this.makeEmpty(),this}union(e){return this.min.min(e.min),this.max.max(e.max),this}applyMatrix4(e){return this.isEmpty()?this:(Ps[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(e),Ps[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(e),Ps[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(e),Ps[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(e),Ps[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(e),Ps[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(e),Ps[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(e),Ps[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(e),this.setFromPoints(Ps),this)}translate(e){return this.min.add(e),this.max.add(e),this}equals(e){return e.min.equals(this.min)&&e.max.equals(this.max)}}const Ps=[new j,new j,new j,new j,new j,new j,new j,new j],Ls=new j,ko=new us,Go=new j,Ho=new j,Vo=new j,ia=new j,ra=new j,ka=new j,yc=new j,Gh=new j,Hh=new j,Ga=new j;function ed(c,e,n,r,a){for(let l=0,u=c.length-3;l<=u;l+=3){Ga.fromArray(c,l);const d=a.x*Math.abs(Ga.x)+a.y*Math.abs(Ga.y)+a.z*Math.abs(Ga.z),g=e.dot(Ga),_=n.dot(Ga),y=r.dot(Ga);if(Math.max(-Math.max(g,_,y),Math.min(g,_,y))>d)return!1}return!0}const QM=new us,Mc=new j,td=new j;class fs{constructor(e=new j,n=-1){this.center=e,this.radius=n}set(e,n){return this.center.copy(e),this.radius=n,this}setFromPoints(e,n){const r=this.center;n!==void 0?r.copy(n):QM.setFromPoints(e).getCenter(r);let a=0;for(let l=0,u=e.length;l<u;l++)a=Math.max(a,r.distanceToSquared(e[l]));return this.radius=Math.sqrt(a),this}copy(e){return this.center.copy(e.center),this.radius=e.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(e){return e.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(e){return e.distanceTo(this.center)-this.radius}intersectsSphere(e){const n=this.radius+e.radius;return e.center.distanceToSquared(this.center)<=n*n}intersectsBox(e){return e.intersectsSphere(this)}intersectsPlane(e){return Math.abs(e.distanceToPoint(this.center))<=this.radius}clampPoint(e,n){const r=this.center.distanceToSquared(e);return n.copy(e),r>this.radius*this.radius&&(n.sub(this.center).normalize(),n.multiplyScalar(this.radius).add(this.center)),n}getBoundingBox(e){return this.isEmpty()?(e.makeEmpty(),e):(e.set(this.center,this.center),e.expandByScalar(this.radius),e)}applyMatrix4(e){return this.center.applyMatrix4(e),this.radius=this.radius*e.getMaxScaleOnAxis(),this}translate(e){return this.center.add(e),this}expandByPoint(e){if(this.isEmpty())return this.center.copy(e),this.radius=0,this;Mc.subVectors(e,this.center);const n=Mc.lengthSq();if(n>this.radius*this.radius){const r=Math.sqrt(n),a=(r-this.radius)*.5;this.center.addScaledVector(Mc,a/r),this.radius+=a}return this}union(e){return e.isEmpty()?this:this.isEmpty()?(this.copy(e),this):(this.center.equals(e.center)===!0?this.radius=Math.max(this.radius,e.radius):(td.subVectors(e.center,this.center).setLength(e.radius),this.expandByPoint(Mc.copy(e.center).add(td)),this.expandByPoint(Mc.copy(e.center).sub(td))),this)}equals(e){return e.center.equals(this.center)&&e.radius===this.radius}clone(){return new this.constructor().copy(this)}}const Ds=new j,nd=new j,Vh=new j,sa=new j,id=new j,Wh=new j,rd=new j;class Sc{constructor(e=new j,n=new j(0,0,-1)){this.origin=e,this.direction=n}set(e,n){return this.origin.copy(e),this.direction.copy(n),this}copy(e){return this.origin.copy(e.origin),this.direction.copy(e.direction),this}at(e,n){return n.copy(this.origin).addScaledVector(this.direction,e)}lookAt(e){return this.direction.copy(e).sub(this.origin).normalize(),this}recast(e){return this.origin.copy(this.at(e,Ds)),this}closestPointToPoint(e,n){n.subVectors(e,this.origin);const r=n.dot(this.direction);return r<0?n.copy(this.origin):n.copy(this.origin).addScaledVector(this.direction,r)}distanceToPoint(e){return Math.sqrt(this.distanceSqToPoint(e))}distanceSqToPoint(e){const n=Ds.subVectors(e,this.origin).dot(this.direction);return n<0?this.origin.distanceToSquared(e):(Ds.copy(this.origin).addScaledVector(this.direction,n),Ds.distanceToSquared(e))}distanceSqToSegment(e,n,r,a){nd.copy(e).add(n).multiplyScalar(.5),Vh.copy(n).sub(e).normalize(),sa.copy(this.origin).sub(nd);const l=e.distanceTo(n)*.5,u=-this.direction.dot(Vh),d=sa.dot(this.direction),g=-sa.dot(Vh),_=sa.lengthSq(),y=Math.abs(1-u*u);let S,E,w,C;if(y>0)if(S=u*g-d,E=u*d-g,C=l*y,S>=0)if(E>=-C)if(E<=C){const I=1/y;S*=I,E*=I,w=S*(S+u*E+2*d)+E*(u*S+E+2*g)+_}else E=l,S=Math.max(0,-(u*E+d)),w=-S*S+E*(E+2*g)+_;else E=-l,S=Math.max(0,-(u*E+d)),w=-S*S+E*(E+2*g)+_;else E<=-C?(S=Math.max(0,-(-u*l+d)),E=S>0?-l:Math.min(Math.max(-l,-g),l),w=-S*S+E*(E+2*g)+_):E<=C?(S=0,E=Math.min(Math.max(-l,-g),l),w=E*(E+2*g)+_):(S=Math.max(0,-(u*l+d)),E=S>0?l:Math.min(Math.max(-l,-g),l),w=-S*S+E*(E+2*g)+_);else E=u>0?-l:l,S=Math.max(0,-(u*E+d)),w=-S*S+E*(E+2*g)+_;return r&&r.copy(this.origin).addScaledVector(this.direction,S),a&&a.copy(nd).addScaledVector(Vh,E),w}intersectSphere(e,n){Ds.subVectors(e.center,this.origin);const r=Ds.dot(this.direction),a=Ds.dot(Ds)-r*r,l=e.radius*e.radius;if(a>l)return null;const u=Math.sqrt(l-a),d=r-u,g=r+u;return g<0?null:d<0?this.at(g,n):this.at(d,n)}intersectsSphere(e){return this.distanceSqToPoint(e.center)<=e.radius*e.radius}distanceToPlane(e){const n=e.normal.dot(this.direction);if(n===0)return e.distanceToPoint(this.origin)===0?0:null;const r=-(this.origin.dot(e.normal)+e.constant)/n;return r>=0?r:null}intersectPlane(e,n){const r=this.distanceToPlane(e);return r===null?null:this.at(r,n)}intersectsPlane(e){const n=e.distanceToPoint(this.origin);return n===0||e.normal.dot(this.direction)*n<0}intersectBox(e,n){let r,a,l,u,d,g;const _=1/this.direction.x,y=1/this.direction.y,S=1/this.direction.z,E=this.origin;return _>=0?(r=(e.min.x-E.x)*_,a=(e.max.x-E.x)*_):(r=(e.max.x-E.x)*_,a=(e.min.x-E.x)*_),y>=0?(l=(e.min.y-E.y)*y,u=(e.max.y-E.y)*y):(l=(e.max.y-E.y)*y,u=(e.min.y-E.y)*y),r>u||l>a||((l>r||isNaN(r))&&(r=l),(u<a||isNaN(a))&&(a=u),S>=0?(d=(e.min.z-E.z)*S,g=(e.max.z-E.z)*S):(d=(e.max.z-E.z)*S,g=(e.min.z-E.z)*S),r>g||d>a)||((d>r||r!==r)&&(r=d),(g<a||a!==a)&&(a=g),a<0)?null:this.at(r>=0?r:a,n)}intersectsBox(e){return this.intersectBox(e,Ds)!==null}intersectTriangle(e,n,r,a,l){id.subVectors(n,e),Wh.subVectors(r,e),rd.crossVectors(id,Wh);let u=this.direction.dot(rd),d;if(u>0){if(a)return null;d=1}else if(u<0)d=-1,u=-u;else return null;sa.subVectors(this.origin,e);const g=d*this.direction.dot(Wh.crossVectors(sa,Wh));if(g<0)return null;const _=d*this.direction.dot(id.cross(sa));if(_<0||g+_>u)return null;const y=-d*sa.dot(rd);return y<0?null:this.at(y/u,l)}applyMatrix4(e){return this.origin.applyMatrix4(e),this.direction.transformDirection(e),this}equals(e){return e.origin.equals(this.origin)&&e.direction.equals(this.direction)}clone(){return new this.constructor().copy(this)}}class fn{constructor(){fn.prototype.isMatrix4=!0,this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]}set(e,n,r,a,l,u,d,g,_,y,S,E,w,C,I,U){const A=this.elements;return A[0]=e,A[4]=n,A[8]=r,A[12]=a,A[1]=l,A[5]=u,A[9]=d,A[13]=g,A[2]=_,A[6]=y,A[10]=S,A[14]=E,A[3]=w,A[7]=C,A[11]=I,A[15]=U,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return new fn().fromArray(this.elements)}copy(e){const n=this.elements,r=e.elements;return n[0]=r[0],n[1]=r[1],n[2]=r[2],n[3]=r[3],n[4]=r[4],n[5]=r[5],n[6]=r[6],n[7]=r[7],n[8]=r[8],n[9]=r[9],n[10]=r[10],n[11]=r[11],n[12]=r[12],n[13]=r[13],n[14]=r[14],n[15]=r[15],this}copyPosition(e){const n=this.elements,r=e.elements;return n[12]=r[12],n[13]=r[13],n[14]=r[14],this}setFromMatrix3(e){const n=e.elements;return this.set(n[0],n[3],n[6],0,n[1],n[4],n[7],0,n[2],n[5],n[8],0,0,0,0,1),this}extractBasis(e,n,r){return e.setFromMatrixColumn(this,0),n.setFromMatrixColumn(this,1),r.setFromMatrixColumn(this,2),this}makeBasis(e,n,r){return this.set(e.x,n.x,r.x,0,e.y,n.y,r.y,0,e.z,n.z,r.z,0,0,0,0,1),this}extractRotation(e){const n=this.elements,r=e.elements,a=1/Wo.setFromMatrixColumn(e,0).length(),l=1/Wo.setFromMatrixColumn(e,1).length(),u=1/Wo.setFromMatrixColumn(e,2).length();return n[0]=r[0]*a,n[1]=r[1]*a,n[2]=r[2]*a,n[3]=0,n[4]=r[4]*l,n[5]=r[5]*l,n[6]=r[6]*l,n[7]=0,n[8]=r[8]*u,n[9]=r[9]*u,n[10]=r[10]*u,n[11]=0,n[12]=0,n[13]=0,n[14]=0,n[15]=1,this}makeRotationFromEuler(e){const n=this.elements,r=e.x,a=e.y,l=e.z,u=Math.cos(r),d=Math.sin(r),g=Math.cos(a),_=Math.sin(a),y=Math.cos(l),S=Math.sin(l);if(e.order==="XYZ"){const E=u*y,w=u*S,C=d*y,I=d*S;n[0]=g*y,n[4]=-g*S,n[8]=_,n[1]=w+C*_,n[5]=E-I*_,n[9]=-d*g,n[2]=I-E*_,n[6]=C+w*_,n[10]=u*g}else if(e.order==="YXZ"){const E=g*y,w=g*S,C=_*y,I=_*S;n[0]=E+I*d,n[4]=C*d-w,n[8]=u*_,n[1]=u*S,n[5]=u*y,n[9]=-d,n[2]=w*d-C,n[6]=I+E*d,n[10]=u*g}else if(e.order==="ZXY"){const E=g*y,w=g*S,C=_*y,I=_*S;n[0]=E-I*d,n[4]=-u*S,n[8]=C+w*d,n[1]=w+C*d,n[5]=u*y,n[9]=I-E*d,n[2]=-u*_,n[6]=d,n[10]=u*g}else if(e.order==="ZYX"){const E=u*y,w=u*S,C=d*y,I=d*S;n[0]=g*y,n[4]=C*_-w,n[8]=E*_+I,n[1]=g*S,n[5]=I*_+E,n[9]=w*_-C,n[2]=-_,n[6]=d*g,n[10]=u*g}else if(e.order==="YZX"){const E=u*g,w=u*_,C=d*g,I=d*_;n[0]=g*y,n[4]=I-E*S,n[8]=C*S+w,n[1]=S,n[5]=u*y,n[9]=-d*y,n[2]=-_*y,n[6]=w*S+C,n[10]=E-I*S}else if(e.order==="XZY"){const E=u*g,w=u*_,C=d*g,I=d*_;n[0]=g*y,n[4]=-S,n[8]=_*y,n[1]=E*S+I,n[5]=u*y,n[9]=w*S-C,n[2]=C*S-w,n[6]=d*y,n[10]=I*S+E}return n[3]=0,n[7]=0,n[11]=0,n[12]=0,n[13]=0,n[14]=0,n[15]=1,this}makeRotationFromQuaternion(e){return this.compose(eS,e,tS)}lookAt(e,n,r){const a=this.elements;return yr.subVectors(e,n),yr.lengthSq()===0&&(yr.z=1),yr.normalize(),aa.crossVectors(r,yr),aa.lengthSq()===0&&(Math.abs(r.z)===1?yr.x+=1e-4:yr.z+=1e-4,yr.normalize(),aa.crossVectors(r,yr)),aa.normalize(),Xh.crossVectors(yr,aa),a[0]=aa.x,a[4]=Xh.x,a[8]=yr.x,a[1]=aa.y,a[5]=Xh.y,a[9]=yr.y,a[2]=aa.z,a[6]=Xh.z,a[10]=yr.z,this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,n){const r=e.elements,a=n.elements,l=this.elements,u=r[0],d=r[4],g=r[8],_=r[12],y=r[1],S=r[5],E=r[9],w=r[13],C=r[2],I=r[6],U=r[10],A=r[14],z=r[3],F=r[7],k=r[11],Y=r[15],K=a[0],se=a[4],le=a[8],G=a[12],ee=a[1],Pe=a[5],Ue=a[9],ge=a[13],Se=a[2],De=a[6],$e=a[10],Ze=a[14],Ke=a[3],ct=a[7],Qe=a[11],Ot=a[15];return l[0]=u*K+d*ee+g*Se+_*Ke,l[4]=u*se+d*Pe+g*De+_*ct,l[8]=u*le+d*Ue+g*$e+_*Qe,l[12]=u*G+d*ge+g*Ze+_*Ot,l[1]=y*K+S*ee+E*Se+w*Ke,l[5]=y*se+S*Pe+E*De+w*ct,l[9]=y*le+S*Ue+E*$e+w*Qe,l[13]=y*G+S*ge+E*Ze+w*Ot,l[2]=C*K+I*ee+U*Se+A*Ke,l[6]=C*se+I*Pe+U*De+A*ct,l[10]=C*le+I*Ue+U*$e+A*Qe,l[14]=C*G+I*ge+U*Ze+A*Ot,l[3]=z*K+F*ee+k*Se+Y*Ke,l[7]=z*se+F*Pe+k*De+Y*ct,l[11]=z*le+F*Ue+k*$e+Y*Qe,l[15]=z*G+F*ge+k*Ze+Y*Ot,this}multiplyScalar(e){const n=this.elements;return n[0]*=e,n[4]*=e,n[8]*=e,n[12]*=e,n[1]*=e,n[5]*=e,n[9]*=e,n[13]*=e,n[2]*=e,n[6]*=e,n[10]*=e,n[14]*=e,n[3]*=e,n[7]*=e,n[11]*=e,n[15]*=e,this}determinant(){const e=this.elements,n=e[0],r=e[4],a=e[8],l=e[12],u=e[1],d=e[5],g=e[9],_=e[13],y=e[2],S=e[6],E=e[10],w=e[14],C=e[3],I=e[7],U=e[11],A=e[15];return C*(+l*g*S-a*_*S-l*d*E+r*_*E+a*d*w-r*g*w)+I*(+n*g*w-n*_*E+l*u*E-a*u*w+a*_*y-l*g*y)+U*(+n*_*S-n*d*w-l*u*S+r*u*w+l*d*y-r*_*y)+A*(-a*d*y-n*g*S+n*d*E+a*u*S-r*u*E+r*g*y)}transpose(){const e=this.elements;let n;return n=e[1],e[1]=e[4],e[4]=n,n=e[2],e[2]=e[8],e[8]=n,n=e[6],e[6]=e[9],e[9]=n,n=e[3],e[3]=e[12],e[12]=n,n=e[7],e[7]=e[13],e[13]=n,n=e[11],e[11]=e[14],e[14]=n,this}setPosition(e,n,r){const a=this.elements;return e.isVector3?(a[12]=e.x,a[13]=e.y,a[14]=e.z):(a[12]=e,a[13]=n,a[14]=r),this}invert(){const e=this.elements,n=e[0],r=e[1],a=e[2],l=e[3],u=e[4],d=e[5],g=e[6],_=e[7],y=e[8],S=e[9],E=e[10],w=e[11],C=e[12],I=e[13],U=e[14],A=e[15],z=S*U*_-I*E*_+I*g*w-d*U*w-S*g*A+d*E*A,F=C*E*_-y*U*_-C*g*w+u*U*w+y*g*A-u*E*A,k=y*I*_-C*S*_+C*d*w-u*I*w-y*d*A+u*S*A,Y=C*S*g-y*I*g-C*d*E+u*I*E+y*d*U-u*S*U,K=n*z+r*F+a*k+l*Y;if(K===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const se=1/K;return e[0]=z*se,e[1]=(I*E*l-S*U*l-I*a*w+r*U*w+S*a*A-r*E*A)*se,e[2]=(d*U*l-I*g*l+I*a*_-r*U*_-d*a*A+r*g*A)*se,e[3]=(S*g*l-d*E*l-S*a*_+r*E*_+d*a*w-r*g*w)*se,e[4]=F*se,e[5]=(y*U*l-C*E*l+C*a*w-n*U*w-y*a*A+n*E*A)*se,e[6]=(C*g*l-u*U*l-C*a*_+n*U*_+u*a*A-n*g*A)*se,e[7]=(u*E*l-y*g*l+y*a*_-n*E*_-u*a*w+n*g*w)*se,e[8]=k*se,e[9]=(C*S*l-y*I*l-C*r*w+n*I*w+y*r*A-n*S*A)*se,e[10]=(u*I*l-C*d*l+C*r*_-n*I*_-u*r*A+n*d*A)*se,e[11]=(y*d*l-u*S*l-y*r*_+n*S*_+u*r*w-n*d*w)*se,e[12]=Y*se,e[13]=(y*I*a-C*S*a+C*r*E-n*I*E-y*r*U+n*S*U)*se,e[14]=(C*d*a-u*I*a-C*r*g+n*I*g+u*r*U-n*d*U)*se,e[15]=(u*S*a-y*d*a+y*r*g-n*S*g-u*r*E+n*d*E)*se,this}scale(e){const n=this.elements,r=e.x,a=e.y,l=e.z;return n[0]*=r,n[4]*=a,n[8]*=l,n[1]*=r,n[5]*=a,n[9]*=l,n[2]*=r,n[6]*=a,n[10]*=l,n[3]*=r,n[7]*=a,n[11]*=l,this}getMaxScaleOnAxis(){const e=this.elements,n=e[0]*e[0]+e[1]*e[1]+e[2]*e[2],r=e[4]*e[4]+e[5]*e[5]+e[6]*e[6],a=e[8]*e[8]+e[9]*e[9]+e[10]*e[10];return Math.sqrt(Math.max(n,r,a))}makeTranslation(e,n,r){return this.set(1,0,0,e,0,1,0,n,0,0,1,r,0,0,0,1),this}makeRotationX(e){const n=Math.cos(e),r=Math.sin(e);return this.set(1,0,0,0,0,n,-r,0,0,r,n,0,0,0,0,1),this}makeRotationY(e){const n=Math.cos(e),r=Math.sin(e);return this.set(n,0,r,0,0,1,0,0,-r,0,n,0,0,0,0,1),this}makeRotationZ(e){const n=Math.cos(e),r=Math.sin(e);return this.set(n,-r,0,0,r,n,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(e,n){const r=Math.cos(n),a=Math.sin(n),l=1-r,u=e.x,d=e.y,g=e.z,_=l*u,y=l*d;return this.set(_*u+r,_*d-a*g,_*g+a*d,0,_*d+a*g,y*d+r,y*g-a*u,0,_*g-a*d,y*g+a*u,l*g*g+r,0,0,0,0,1),this}makeScale(e,n,r){return this.set(e,0,0,0,0,n,0,0,0,0,r,0,0,0,0,1),this}makeShear(e,n,r,a,l,u){return this.set(1,r,l,0,e,1,u,0,n,a,1,0,0,0,0,1),this}compose(e,n,r){const a=this.elements,l=n._x,u=n._y,d=n._z,g=n._w,_=l+l,y=u+u,S=d+d,E=l*_,w=l*y,C=l*S,I=u*y,U=u*S,A=d*S,z=g*_,F=g*y,k=g*S,Y=r.x,K=r.y,se=r.z;return a[0]=(1-(I+A))*Y,a[1]=(w+k)*Y,a[2]=(C-F)*Y,a[3]=0,a[4]=(w-k)*K,a[5]=(1-(E+A))*K,a[6]=(U+z)*K,a[7]=0,a[8]=(C+F)*se,a[9]=(U-z)*se,a[10]=(1-(E+I))*se,a[11]=0,a[12]=e.x,a[13]=e.y,a[14]=e.z,a[15]=1,this}decompose(e,n,r){const a=this.elements;let l=Wo.set(a[0],a[1],a[2]).length();const u=Wo.set(a[4],a[5],a[6]).length(),d=Wo.set(a[8],a[9],a[10]).length();this.determinant()<0&&(l=-l),e.x=a[12],e.y=a[13],e.z=a[14],$r.copy(this);const _=1/l,y=1/u,S=1/d;return $r.elements[0]*=_,$r.elements[1]*=_,$r.elements[2]*=_,$r.elements[4]*=y,$r.elements[5]*=y,$r.elements[6]*=y,$r.elements[8]*=S,$r.elements[9]*=S,$r.elements[10]*=S,n.setFromRotationMatrix($r),r.x=l,r.y=u,r.z=d,this}makePerspective(e,n,r,a,l,u){const d=this.elements,g=2*l/(n-e),_=2*l/(r-a),y=(n+e)/(n-e),S=(r+a)/(r-a),E=-(u+l)/(u-l),w=-2*u*l/(u-l);return d[0]=g,d[4]=0,d[8]=y,d[12]=0,d[1]=0,d[5]=_,d[9]=S,d[13]=0,d[2]=0,d[6]=0,d[10]=E,d[14]=w,d[3]=0,d[7]=0,d[11]=-1,d[15]=0,this}makeOrthographic(e,n,r,a,l,u){const d=this.elements,g=1/(n-e),_=1/(r-a),y=1/(u-l),S=(n+e)*g,E=(r+a)*_,w=(u+l)*y;return d[0]=2*g,d[4]=0,d[8]=0,d[12]=-S,d[1]=0,d[5]=2*_,d[9]=0,d[13]=-E,d[2]=0,d[6]=0,d[10]=-2*y,d[14]=-w,d[3]=0,d[7]=0,d[11]=0,d[15]=1,this}equals(e){const n=this.elements,r=e.elements;for(let a=0;a<16;a++)if(n[a]!==r[a])return!1;return!0}fromArray(e,n=0){for(let r=0;r<16;r++)this.elements[r]=e[r+n];return this}toArray(e=[],n=0){const r=this.elements;return e[n]=r[0],e[n+1]=r[1],e[n+2]=r[2],e[n+3]=r[3],e[n+4]=r[4],e[n+5]=r[5],e[n+6]=r[6],e[n+7]=r[7],e[n+8]=r[8],e[n+9]=r[9],e[n+10]=r[10],e[n+11]=r[11],e[n+12]=r[12],e[n+13]=r[13],e[n+14]=r[14],e[n+15]=r[15],e}}const Wo=new j,$r=new fn,eS=new j(0,0,0),tS=new j(1,1,1),aa=new j,Xh=new j,yr=new j,sg=new fn,ag=new or;class Ec{constructor(e=0,n=0,r=0,a=Ec.DEFAULT_ORDER){this.isEuler=!0,this._x=e,this._y=n,this._z=r,this._order=a}get x(){return this._x}set x(e){this._x=e,this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e,this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e,this._onChangeCallback()}get order(){return this._order}set order(e){this._order=e,this._onChangeCallback()}set(e,n,r,a=this._order){return this._x=e,this._y=n,this._z=r,this._order=a,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(e){return this._x=e._x,this._y=e._y,this._z=e._z,this._order=e._order,this._onChangeCallback(),this}setFromRotationMatrix(e,n=this._order,r=!0){const a=e.elements,l=a[0],u=a[4],d=a[8],g=a[1],_=a[5],y=a[9],S=a[2],E=a[6],w=a[10];switch(n){case"XYZ":this._y=Math.asin(hi(d,-1,1)),Math.abs(d)<.9999999?(this._x=Math.atan2(-y,w),this._z=Math.atan2(-u,l)):(this._x=Math.atan2(E,_),this._z=0);break;case"YXZ":this._x=Math.asin(-hi(y,-1,1)),Math.abs(y)<.9999999?(this._y=Math.atan2(d,w),this._z=Math.atan2(g,_)):(this._y=Math.atan2(-S,l),this._z=0);break;case"ZXY":this._x=Math.asin(hi(E,-1,1)),Math.abs(E)<.9999999?(this._y=Math.atan2(-S,w),this._z=Math.atan2(-u,_)):(this._y=0,this._z=Math.atan2(g,l));break;case"ZYX":this._y=Math.asin(-hi(S,-1,1)),Math.abs(S)<.9999999?(this._x=Math.atan2(E,w),this._z=Math.atan2(g,l)):(this._x=0,this._z=Math.atan2(-u,_));break;case"YZX":this._z=Math.asin(hi(g,-1,1)),Math.abs(g)<.9999999?(this._x=Math.atan2(-y,_),this._y=Math.atan2(-S,l)):(this._x=0,this._y=Math.atan2(d,w));break;case"XZY":this._z=Math.asin(-hi(u,-1,1)),Math.abs(u)<.9999999?(this._x=Math.atan2(E,_),this._y=Math.atan2(d,l)):(this._x=Math.atan2(-y,w),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+n)}return this._order=n,r===!0&&this._onChangeCallback(),this}setFromQuaternion(e,n,r){return sg.makeRotationFromQuaternion(e),this.setFromRotationMatrix(sg,n,r)}setFromVector3(e,n=this._order){return this.set(e.x,e.y,e.z,n)}reorder(e){return ag.setFromEuler(this),this.setFromQuaternion(ag,e)}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._order===this._order}fromArray(e){return this._x=e[0],this._y=e[1],this._z=e[2],e[3]!==void 0&&(this._order=e[3]),this._onChangeCallback(),this}toArray(e=[],n=0){return e[n]=this._x,e[n+1]=this._y,e[n+2]=this._z,e[n+3]=this._order,e}_onChange(e){return this._onChangeCallback=e,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._order}}Ec.DEFAULT_ORDER="XYZ";class qh{constructor(){this.mask=1}set(e){this.mask=(1<<e|0)>>>0}enable(e){this.mask|=1<<e|0}enableAll(){this.mask=-1}toggle(e){this.mask^=1<<e|0}disable(e){this.mask&=~(1<<e|0)}disableAll(){this.mask=0}test(e){return(this.mask&e.mask)!==0}isEnabled(e){return(this.mask&(1<<e|0))!==0}}let nS=0;const og=new j,Xo=new or,Us=new fn,Yh=new j,bc=new j,iS=new j,rS=new or,lg=new j(1,0,0),cg=new j(0,1,0),hg=new j(0,0,1),sS={type:"added"},ug={type:"removed"};class Bn extends Cs{constructor(){super(),this.isObject3D=!0,Object.defineProperty(this,"id",{value:nS++}),this.uuid=xr(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=Bn.DEFAULT_UP.clone();const e=new j,n=new Ec,r=new or,a=new j(1,1,1);function l(){r.setFromEuler(n,!1)}function u(){n.setFromQuaternion(r,void 0,!1)}n._onChange(l),r._onChange(u),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:e},rotation:{configurable:!0,enumerable:!0,value:n},quaternion:{configurable:!0,enumerable:!0,value:r},scale:{configurable:!0,enumerable:!0,value:a},modelViewMatrix:{value:new fn},normalMatrix:{value:new wn}}),this.matrix=new fn,this.matrixWorld=new fn,this.matrixAutoUpdate=Bn.DEFAULT_MATRIX_AUTO_UPDATE,this.matrixWorldNeedsUpdate=!1,this.matrixWorldAutoUpdate=Bn.DEFAULT_MATRIX_WORLD_AUTO_UPDATE,this.layers=new qh,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeRender(){}onAfterRender(){}applyMatrix4(e){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(e),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(e){return this.quaternion.premultiply(e),this}setRotationFromAxisAngle(e,n){this.quaternion.setFromAxisAngle(e,n)}setRotationFromEuler(e){this.quaternion.setFromEuler(e,!0)}setRotationFromMatrix(e){this.quaternion.setFromRotationMatrix(e)}setRotationFromQuaternion(e){this.quaternion.copy(e)}rotateOnAxis(e,n){return Xo.setFromAxisAngle(e,n),this.quaternion.multiply(Xo),this}rotateOnWorldAxis(e,n){return Xo.setFromAxisAngle(e,n),this.quaternion.premultiply(Xo),this}rotateX(e){return this.rotateOnAxis(lg,e)}rotateY(e){return this.rotateOnAxis(cg,e)}rotateZ(e){return this.rotateOnAxis(hg,e)}translateOnAxis(e,n){return og.copy(e).applyQuaternion(this.quaternion),this.position.add(og.multiplyScalar(n)),this}translateX(e){return this.translateOnAxis(lg,e)}translateY(e){return this.translateOnAxis(cg,e)}translateZ(e){return this.translateOnAxis(hg,e)}localToWorld(e){return this.updateWorldMatrix(!0,!1),e.applyMatrix4(this.matrixWorld)}worldToLocal(e){return this.updateWorldMatrix(!0,!1),e.applyMatrix4(Us.copy(this.matrixWorld).invert())}lookAt(e,n,r){e.isVector3?Yh.copy(e):Yh.set(e,n,r);const a=this.parent;this.updateWorldMatrix(!0,!1),bc.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?Us.lookAt(bc,Yh,this.up):Us.lookAt(Yh,bc,this.up),this.quaternion.setFromRotationMatrix(Us),a&&(Us.extractRotation(a.matrixWorld),Xo.setFromRotationMatrix(Us),this.quaternion.premultiply(Xo.invert()))}add(e){if(arguments.length>1){for(let n=0;n<arguments.length;n++)this.add(arguments[n]);return this}return e===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",e),this):(e&&e.isObject3D?(e.parent!==null&&e.parent.remove(e),e.parent=this,this.children.push(e),e.dispatchEvent(sS)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",e),this)}remove(e){if(arguments.length>1){for(let r=0;r<arguments.length;r++)this.remove(arguments[r]);return this}const n=this.children.indexOf(e);return n!==-1&&(e.parent=null,this.children.splice(n,1),e.dispatchEvent(ug)),this}removeFromParent(){const e=this.parent;return e!==null&&e.remove(this),this}clear(){for(let e=0;e<this.children.length;e++){const n=this.children[e];n.parent=null,n.dispatchEvent(ug)}return this.children.length=0,this}attach(e){return this.updateWorldMatrix(!0,!1),Us.copy(this.matrixWorld).invert(),e.parent!==null&&(e.parent.updateWorldMatrix(!0,!1),Us.multiply(e.parent.matrixWorld)),e.applyMatrix4(Us),this.add(e),e.updateWorldMatrix(!1,!0),this}getObjectById(e){return this.getObjectByProperty("id",e)}getObjectByName(e){return this.getObjectByProperty("name",e)}getObjectByProperty(e,n){if(this[e]===n)return this;for(let r=0,a=this.children.length;r<a;r++){const u=this.children[r].getObjectByProperty(e,n);if(u!==void 0)return u}}getObjectsByProperty(e,n){let r=[];this[e]===n&&r.push(this);for(let a=0,l=this.children.length;a<l;a++){const u=this.children[a].getObjectsByProperty(e,n);u.length>0&&(r=r.concat(u))}return r}getWorldPosition(e){return this.updateWorldMatrix(!0,!1),e.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(e){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(bc,e,iS),e}getWorldScale(e){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(bc,rS,e),e}getWorldDirection(e){this.updateWorldMatrix(!0,!1);const n=this.matrixWorld.elements;return e.set(n[8],n[9],n[10]).normalize()}raycast(){}traverse(e){e(this);const n=this.children;for(let r=0,a=n.length;r<a;r++)n[r].traverse(e)}traverseVisible(e){if(this.visible===!1)return;e(this);const n=this.children;for(let r=0,a=n.length;r<a;r++)n[r].traverseVisible(e)}traverseAncestors(e){const n=this.parent;n!==null&&(e(n),n.traverseAncestors(e))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(e){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||e)&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,e=!0);const n=this.children;for(let r=0,a=n.length;r<a;r++){const l=n[r];(l.matrixWorldAutoUpdate===!0||e===!0)&&l.updateMatrixWorld(e)}}updateWorldMatrix(e,n){const r=this.parent;if(e===!0&&r!==null&&r.matrixWorldAutoUpdate===!0&&r.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),n===!0){const a=this.children;for(let l=0,u=a.length;l<u;l++){const d=a[l];d.matrixWorldAutoUpdate===!0&&d.updateWorldMatrix(!1,!0)}}}toJSON(e){const n=e===void 0||typeof e=="string",r={};n&&(e={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},r.metadata={version:4.5,type:"Object",generator:"Object3D.toJSON"});const a={};a.uuid=this.uuid,a.type=this.type,this.name!==""&&(a.name=this.name),this.castShadow===!0&&(a.castShadow=!0),this.receiveShadow===!0&&(a.receiveShadow=!0),this.visible===!1&&(a.visible=!1),this.frustumCulled===!1&&(a.frustumCulled=!1),this.renderOrder!==0&&(a.renderOrder=this.renderOrder),Object.keys(this.userData).length>0&&(a.userData=this.userData),a.layers=this.layers.mask,a.matrix=this.matrix.toArray(),a.up=this.up.toArray(),this.matrixAutoUpdate===!1&&(a.matrixAutoUpdate=!1),this.isInstancedMesh&&(a.type="InstancedMesh",a.count=this.count,a.instanceMatrix=this.instanceMatrix.toJSON(),this.instanceColor!==null&&(a.instanceColor=this.instanceColor.toJSON()));function l(d,g){return d[g.uuid]===void 0&&(d[g.uuid]=g.toJSON(e)),g.uuid}if(this.isScene)this.background&&(this.background.isColor?a.background=this.background.toJSON():this.background.isTexture&&(a.background=this.background.toJSON(e).uuid)),this.environment&&this.environment.isTexture&&this.environment.isRenderTargetTexture!==!0&&(a.environment=this.environment.toJSON(e).uuid);else if(this.isMesh||this.isLine||this.isPoints){a.geometry=l(e.geometries,this.geometry);const d=this.geometry.parameters;if(d!==void 0&&d.shapes!==void 0){const g=d.shapes;if(Array.isArray(g))for(let _=0,y=g.length;_<y;_++){const S=g[_];l(e.shapes,S)}else l(e.shapes,g)}}if(this.isSkinnedMesh&&(a.bindMode=this.bindMode,a.bindMatrix=this.bindMatrix.toArray(),this.skeleton!==void 0&&(l(e.skeletons,this.skeleton),a.skeleton=this.skeleton.uuid)),this.material!==void 0)if(Array.isArray(this.material)){const d=[];for(let g=0,_=this.material.length;g<_;g++)d.push(l(e.materials,this.material[g]));a.material=d}else a.material=l(e.materials,this.material);if(this.children.length>0){a.children=[];for(let d=0;d<this.children.length;d++)a.children.push(this.children[d].toJSON(e).object)}if(this.animations.length>0){a.animations=[];for(let d=0;d<this.animations.length;d++){const g=this.animations[d];a.animations.push(l(e.animations,g))}}if(n){const d=u(e.geometries),g=u(e.materials),_=u(e.textures),y=u(e.images),S=u(e.shapes),E=u(e.skeletons),w=u(e.animations),C=u(e.nodes);d.length>0&&(r.geometries=d),g.length>0&&(r.materials=g),_.length>0&&(r.textures=_),y.length>0&&(r.images=y),S.length>0&&(r.shapes=S),E.length>0&&(r.skeletons=E),w.length>0&&(r.animations=w),C.length>0&&(r.nodes=C)}return r.object=a,r;function u(d){const g=[];for(const _ in d){const y=d[_];delete y.metadata,g.push(y)}return g}}clone(e){return new this.constructor().copy(this,e)}copy(e,n=!0){if(this.name=e.name,this.up.copy(e.up),this.position.copy(e.position),this.rotation.order=e.rotation.order,this.quaternion.copy(e.quaternion),this.scale.copy(e.scale),this.matrix.copy(e.matrix),this.matrixWorld.copy(e.matrixWorld),this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrixWorldNeedsUpdate=e.matrixWorldNeedsUpdate,this.matrixWorldAutoUpdate=e.matrixWorldAutoUpdate,this.layers.mask=e.layers.mask,this.visible=e.visible,this.castShadow=e.castShadow,this.receiveShadow=e.receiveShadow,this.frustumCulled=e.frustumCulled,this.renderOrder=e.renderOrder,this.animations=e.animations,this.userData=JSON.parse(JSON.stringify(e.userData)),n===!0)for(let r=0;r<e.children.length;r++){const a=e.children[r];this.add(a.clone())}return this}}Bn.DEFAULT_UP=new j(0,1,0),Bn.DEFAULT_MATRIX_AUTO_UPDATE=!0,Bn.DEFAULT_MATRIX_WORLD_AUTO_UPDATE=!0;const Jr=new j,Is=new j,sd=new j,Ns=new j,qo=new j,Yo=new j,fg=new j,ad=new j,od=new j,ld=new j;let Zh=!1;class lr{constructor(e=new j,n=new j,r=new j){this.a=e,this.b=n,this.c=r}static getNormal(e,n,r,a){a.subVectors(r,n),Jr.subVectors(e,n),a.cross(Jr);const l=a.lengthSq();return l>0?a.multiplyScalar(1/Math.sqrt(l)):a.set(0,0,0)}static getBarycoord(e,n,r,a,l){Jr.subVectors(a,n),Is.subVectors(r,n),sd.subVectors(e,n);const u=Jr.dot(Jr),d=Jr.dot(Is),g=Jr.dot(sd),_=Is.dot(Is),y=Is.dot(sd),S=u*_-d*d;if(S===0)return l.set(-2,-1,-1);const E=1/S,w=(_*g-d*y)*E,C=(u*y-d*g)*E;return l.set(1-w-C,C,w)}static containsPoint(e,n,r,a){return this.getBarycoord(e,n,r,a,Ns),Ns.x>=0&&Ns.y>=0&&Ns.x+Ns.y<=1}static getUV(e,n,r,a,l,u,d,g){return Zh===!1&&(console.warn("THREE.Triangle.getUV() has been renamed to THREE.Triangle.getInterpolation()."),Zh=!0),this.getInterpolation(e,n,r,a,l,u,d,g)}static getInterpolation(e,n,r,a,l,u,d,g){return this.getBarycoord(e,n,r,a,Ns),g.setScalar(0),g.addScaledVector(l,Ns.x),g.addScaledVector(u,Ns.y),g.addScaledVector(d,Ns.z),g}static isFrontFacing(e,n,r,a){return Jr.subVectors(r,n),Is.subVectors(e,n),Jr.cross(Is).dot(a)<0}set(e,n,r){return this.a.copy(e),this.b.copy(n),this.c.copy(r),this}setFromPointsAndIndices(e,n,r,a){return this.a.copy(e[n]),this.b.copy(e[r]),this.c.copy(e[a]),this}setFromAttributeAndIndices(e,n,r,a){return this.a.fromBufferAttribute(e,n),this.b.fromBufferAttribute(e,r),this.c.fromBufferAttribute(e,a),this}clone(){return new this.constructor().copy(this)}copy(e){return this.a.copy(e.a),this.b.copy(e.b),this.c.copy(e.c),this}getArea(){return Jr.subVectors(this.c,this.b),Is.subVectors(this.a,this.b),Jr.cross(Is).length()*.5}getMidpoint(e){return e.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(e){return lr.getNormal(this.a,this.b,this.c,e)}getPlane(e){return e.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(e,n){return lr.getBarycoord(e,this.a,this.b,this.c,n)}getUV(e,n,r,a,l){return Zh===!1&&(console.warn("THREE.Triangle.getUV() has been renamed to THREE.Triangle.getInterpolation()."),Zh=!0),lr.getInterpolation(e,this.a,this.b,this.c,n,r,a,l)}getInterpolation(e,n,r,a,l){return lr.getInterpolation(e,this.a,this.b,this.c,n,r,a,l)}containsPoint(e){return lr.containsPoint(e,this.a,this.b,this.c)}isFrontFacing(e){return lr.isFrontFacing(this.a,this.b,this.c,e)}intersectsBox(e){return e.intersectsTriangle(this)}closestPointToPoint(e,n){const r=this.a,a=this.b,l=this.c;let u,d;qo.subVectors(a,r),Yo.subVectors(l,r),ad.subVectors(e,r);const g=qo.dot(ad),_=Yo.dot(ad);if(g<=0&&_<=0)return n.copy(r);od.subVectors(e,a);const y=qo.dot(od),S=Yo.dot(od);if(y>=0&&S<=y)return n.copy(a);const E=g*S-y*_;if(E<=0&&g>=0&&y<=0)return u=g/(g-y),n.copy(r).addScaledVector(qo,u);ld.subVectors(e,l);const w=qo.dot(ld),C=Yo.dot(ld);if(C>=0&&w<=C)return n.copy(l);const I=w*_-g*C;if(I<=0&&_>=0&&C<=0)return d=_/(_-C),n.copy(r).addScaledVector(Yo,d);const U=y*C-w*S;if(U<=0&&S-y>=0&&w-C>=0)return fg.subVectors(l,a),d=(S-y)/(S-y+(w-C)),n.copy(a).addScaledVector(fg,d);const A=1/(U+I+E);return u=I*A,d=E*A,n.copy(r).addScaledVector(qo,u).addScaledVector(Yo,d)}equals(e){return e.a.equals(this.a)&&e.b.equals(this.b)&&e.c.equals(this.c)}}let aS=0;class Gi extends Cs{constructor(){super(),this.isMaterial=!0,Object.defineProperty(this,"id",{value:aS++}),this.uuid=xr(),this.name="",this.type="Material",this.blending=D,this.side=b,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.blendSrc=xe,this.blendDst=ye,this.blendEquation=H,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=ke,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=jm,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=Bh,this.stencilZFail=Bh,this.stencilZPass=Bh,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.forceSinglePass=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(e){this._alphaTest>0!=e>0&&this.version++,this._alphaTest=e}onBuild(){}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(e){if(e!==void 0)for(const n in e){const r=e[n];if(r===void 0){console.warn(`THREE.Material: parameter '${n}' has value of undefined.`);continue}const a=this[n];if(a===void 0){console.warn(`THREE.Material: '${n}' is not a property of THREE.${this.type}.`);continue}a&&a.isColor?a.set(r):a&&a.isVector3&&r&&r.isVector3?a.copy(r):this[n]=r}}toJSON(e){const n=e===void 0||typeof e=="string";n&&(e={textures:{},images:{}});const r={metadata:{version:4.5,type:"Material",generator:"Material.toJSON"}};r.uuid=this.uuid,r.type=this.type,this.name!==""&&(r.name=this.name),this.color&&this.color.isColor&&(r.color=this.color.getHex()),this.roughness!==void 0&&(r.roughness=this.roughness),this.metalness!==void 0&&(r.metalness=this.metalness),this.sheen!==void 0&&(r.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(r.sheenColor=this.sheenColor.getHex()),this.sheenRoughness!==void 0&&(r.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(r.emissive=this.emissive.getHex()),this.emissiveIntensity&&this.emissiveIntensity!==1&&(r.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(r.specular=this.specular.getHex()),this.specularIntensity!==void 0&&(r.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(r.specularColor=this.specularColor.getHex()),this.shininess!==void 0&&(r.shininess=this.shininess),this.clearcoat!==void 0&&(r.clearcoat=this.clearcoat),this.clearcoatRoughness!==void 0&&(r.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(r.clearcoatMap=this.clearcoatMap.toJSON(e).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(r.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(e).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(r.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(e).uuid,r.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.iridescence!==void 0&&(r.iridescence=this.iridescence),this.iridescenceIOR!==void 0&&(r.iridescenceIOR=this.iridescenceIOR),this.iridescenceThicknessRange!==void 0&&(r.iridescenceThicknessRange=this.iridescenceThicknessRange),this.iridescenceMap&&this.iridescenceMap.isTexture&&(r.iridescenceMap=this.iridescenceMap.toJSON(e).uuid),this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture&&(r.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(e).uuid),this.map&&this.map.isTexture&&(r.map=this.map.toJSON(e).uuid),this.matcap&&this.matcap.isTexture&&(r.matcap=this.matcap.toJSON(e).uuid),this.alphaMap&&this.alphaMap.isTexture&&(r.alphaMap=this.alphaMap.toJSON(e).uuid),this.lightMap&&this.lightMap.isTexture&&(r.lightMap=this.lightMap.toJSON(e).uuid,r.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(r.aoMap=this.aoMap.toJSON(e).uuid,r.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(r.bumpMap=this.bumpMap.toJSON(e).uuid,r.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(r.normalMap=this.normalMap.toJSON(e).uuid,r.normalMapType=this.normalMapType,r.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(r.displacementMap=this.displacementMap.toJSON(e).uuid,r.displacementScale=this.displacementScale,r.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(r.roughnessMap=this.roughnessMap.toJSON(e).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(r.metalnessMap=this.metalnessMap.toJSON(e).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(r.emissiveMap=this.emissiveMap.toJSON(e).uuid),this.specularMap&&this.specularMap.isTexture&&(r.specularMap=this.specularMap.toJSON(e).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(r.specularIntensityMap=this.specularIntensityMap.toJSON(e).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(r.specularColorMap=this.specularColorMap.toJSON(e).uuid),this.envMap&&this.envMap.isTexture&&(r.envMap=this.envMap.toJSON(e).uuid,this.combine!==void 0&&(r.combine=this.combine)),this.envMapIntensity!==void 0&&(r.envMapIntensity=this.envMapIntensity),this.reflectivity!==void 0&&(r.reflectivity=this.reflectivity),this.refractionRatio!==void 0&&(r.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(r.gradientMap=this.gradientMap.toJSON(e).uuid),this.transmission!==void 0&&(r.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(r.transmissionMap=this.transmissionMap.toJSON(e).uuid),this.thickness!==void 0&&(r.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(r.thicknessMap=this.thicknessMap.toJSON(e).uuid),this.attenuationDistance!==void 0&&this.attenuationDistance!==1/0&&(r.attenuationDistance=this.attenuationDistance),this.attenuationColor!==void 0&&(r.attenuationColor=this.attenuationColor.getHex()),this.size!==void 0&&(r.size=this.size),this.shadowSide!==null&&(r.shadowSide=this.shadowSide),this.sizeAttenuation!==void 0&&(r.sizeAttenuation=this.sizeAttenuation),this.blending!==D&&(r.blending=this.blending),this.side!==b&&(r.side=this.side),this.vertexColors&&(r.vertexColors=!0),this.opacity<1&&(r.opacity=this.opacity),this.transparent===!0&&(r.transparent=this.transparent),r.depthFunc=this.depthFunc,r.depthTest=this.depthTest,r.depthWrite=this.depthWrite,r.colorWrite=this.colorWrite,r.stencilWrite=this.stencilWrite,r.stencilWriteMask=this.stencilWriteMask,r.stencilFunc=this.stencilFunc,r.stencilRef=this.stencilRef,r.stencilFuncMask=this.stencilFuncMask,r.stencilFail=this.stencilFail,r.stencilZFail=this.stencilZFail,r.stencilZPass=this.stencilZPass,this.rotation!==void 0&&this.rotation!==0&&(r.rotation=this.rotation),this.polygonOffset===!0&&(r.polygonOffset=!0),this.polygonOffsetFactor!==0&&(r.polygonOffsetFactor=this.polygonOffsetFactor),this.polygonOffsetUnits!==0&&(r.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth!==void 0&&this.linewidth!==1&&(r.linewidth=this.linewidth),this.dashSize!==void 0&&(r.dashSize=this.dashSize),this.gapSize!==void 0&&(r.gapSize=this.gapSize),this.scale!==void 0&&(r.scale=this.scale),this.dithering===!0&&(r.dithering=!0),this.alphaTest>0&&(r.alphaTest=this.alphaTest),this.alphaToCoverage===!0&&(r.alphaToCoverage=this.alphaToCoverage),this.premultipliedAlpha===!0&&(r.premultipliedAlpha=this.premultipliedAlpha),this.forceSinglePass===!0&&(r.forceSinglePass=this.forceSinglePass),this.wireframe===!0&&(r.wireframe=this.wireframe),this.wireframeLinewidth>1&&(r.wireframeLinewidth=this.wireframeLinewidth),this.wireframeLinecap!=="round"&&(r.wireframeLinecap=this.wireframeLinecap),this.wireframeLinejoin!=="round"&&(r.wireframeLinejoin=this.wireframeLinejoin),this.flatShading===!0&&(r.flatShading=this.flatShading),this.visible===!1&&(r.visible=!1),this.toneMapped===!1&&(r.toneMapped=!1),this.fog===!1&&(r.fog=!1),Object.keys(this.userData).length>0&&(r.userData=this.userData);function a(l){const u=[];for(const d in l){const g=l[d];delete g.metadata,u.push(g)}return u}if(n){const l=a(e.textures),u=a(e.images);l.length>0&&(r.textures=l),u.length>0&&(r.images=u)}return r}clone(){return new this.constructor().copy(this)}copy(e){this.name=e.name,this.blending=e.blending,this.side=e.side,this.vertexColors=e.vertexColors,this.opacity=e.opacity,this.transparent=e.transparent,this.blendSrc=e.blendSrc,this.blendDst=e.blendDst,this.blendEquation=e.blendEquation,this.blendSrcAlpha=e.blendSrcAlpha,this.blendDstAlpha=e.blendDstAlpha,this.blendEquationAlpha=e.blendEquationAlpha,this.depthFunc=e.depthFunc,this.depthTest=e.depthTest,this.depthWrite=e.depthWrite,this.stencilWriteMask=e.stencilWriteMask,this.stencilFunc=e.stencilFunc,this.stencilRef=e.stencilRef,this.stencilFuncMask=e.stencilFuncMask,this.stencilFail=e.stencilFail,this.stencilZFail=e.stencilZFail,this.stencilZPass=e.stencilZPass,this.stencilWrite=e.stencilWrite;const n=e.clippingPlanes;let r=null;if(n!==null){const a=n.length;r=new Array(a);for(let l=0;l!==a;++l)r[l]=n[l].clone()}return this.clippingPlanes=r,this.clipIntersection=e.clipIntersection,this.clipShadows=e.clipShadows,this.shadowSide=e.shadowSide,this.colorWrite=e.colorWrite,this.precision=e.precision,this.polygonOffset=e.polygonOffset,this.polygonOffsetFactor=e.polygonOffsetFactor,this.polygonOffsetUnits=e.polygonOffsetUnits,this.dithering=e.dithering,this.alphaTest=e.alphaTest,this.alphaToCoverage=e.alphaToCoverage,this.premultipliedAlpha=e.premultipliedAlpha,this.forceSinglePass=e.forceSinglePass,this.visible=e.visible,this.toneMapped=e.toneMapped,this.userData=JSON.parse(JSON.stringify(e.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(e){e===!0&&this.version++}}const dg={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},jr={h:0,s:0,l:0},Kh={h:0,s:0,l:0};function cd(c,e,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?c+(e-c)*6*n:n<1/2?e:n<2/3?c+(e-c)*6*(2/3-n):c}class At{constructor(e,n,r){return this.isColor=!0,this.r=1,this.g=1,this.b=1,n===void 0&&r===void 0?this.set(e):this.setRGB(e,n,r)}set(e){return e&&e.isColor?this.copy(e):typeof e=="number"?this.setHex(e):typeof e=="string"&&this.setStyle(e),this}setScalar(e){return this.r=e,this.g=e,this.b=e,this}setHex(e,n=gn){return e=Math.floor(e),this.r=(e>>16&255)/255,this.g=(e>>8&255)/255,this.b=(e&255)/255,Pr.toWorkingColorSpace(this,n),this}setRGB(e,n,r,a=Pr.workingColorSpace){return this.r=e,this.g=n,this.b=r,Pr.toWorkingColorSpace(this,a),this}setHSL(e,n,r,a=Pr.workingColorSpace){if(e=qf(e,1),n=hi(n,0,1),r=hi(r,0,1),n===0)this.r=this.g=this.b=r;else{const l=r<=.5?r*(1+n):r+n-r*n,u=2*r-l;this.r=cd(u,l,e+1/3),this.g=cd(u,l,e),this.b=cd(u,l,e-1/3)}return Pr.toWorkingColorSpace(this,a),this}setStyle(e,n=gn){function r(l){l!==void 0&&parseFloat(l)<1&&console.warn("THREE.Color: Alpha component of "+e+" will be ignored.")}let a;if(a=/^(\w+)\(([^\)]*)\)/.exec(e)){let l;const u=a[1],d=a[2];switch(u){case"rgb":case"rgba":if(l=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(d))return r(l[4]),this.setRGB(Math.min(255,parseInt(l[1],10))/255,Math.min(255,parseInt(l[2],10))/255,Math.min(255,parseInt(l[3],10))/255,n);if(l=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(d))return r(l[4]),this.setRGB(Math.min(100,parseInt(l[1],10))/100,Math.min(100,parseInt(l[2],10))/100,Math.min(100,parseInt(l[3],10))/100,n);break;case"hsl":case"hsla":if(l=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(d))return r(l[4]),this.setHSL(parseFloat(l[1])/360,parseFloat(l[2])/100,parseFloat(l[3])/100,n);break;default:console.warn("THREE.Color: Unknown color model "+e)}}else if(a=/^\#([A-Fa-f\d]+)$/.exec(e)){const l=a[1],u=l.length;if(u===3)return this.setRGB(parseInt(l.charAt(0),16)/15,parseInt(l.charAt(1),16)/15,parseInt(l.charAt(2),16)/15,n);if(u===6)return this.setHex(parseInt(l,16),n);console.warn("THREE.Color: Invalid hex color "+e)}else if(e&&e.length>0)return this.setColorName(e,n);return this}setColorName(e,n=gn){const r=dg[e.toLowerCase()];return r!==void 0?this.setHex(r,n):console.warn("THREE.Color: Unknown color "+e),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(e){return this.r=e.r,this.g=e.g,this.b=e.b,this}copySRGBToLinear(e){return this.r=Bo(e.r),this.g=Bo(e.g),this.b=Bo(e.b),this}copyLinearToSRGB(e){return this.r=Kf(e.r),this.g=Kf(e.g),this.b=Kf(e.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(e=gn){return Pr.fromWorkingColorSpace(Hi.copy(this),e),Math.round(hi(Hi.r*255,0,255))*65536+Math.round(hi(Hi.g*255,0,255))*256+Math.round(hi(Hi.b*255,0,255))}getHexString(e=gn){return("000000"+this.getHex(e).toString(16)).slice(-6)}getHSL(e,n=Pr.workingColorSpace){Pr.fromWorkingColorSpace(Hi.copy(this),n);const r=Hi.r,a=Hi.g,l=Hi.b,u=Math.max(r,a,l),d=Math.min(r,a,l);let g,_;const y=(d+u)/2;if(d===u)g=0,_=0;else{const S=u-d;switch(_=y<=.5?S/(u+d):S/(2-u-d),u){case r:g=(a-l)/S+(a<l?6:0);break;case a:g=(l-r)/S+2;break;case l:g=(r-a)/S+4;break}g/=6}return e.h=g,e.s=_,e.l=y,e}getRGB(e,n=Pr.workingColorSpace){return Pr.fromWorkingColorSpace(Hi.copy(this),n),e.r=Hi.r,e.g=Hi.g,e.b=Hi.b,e}getStyle(e=gn){Pr.fromWorkingColorSpace(Hi.copy(this),e);const n=Hi.r,r=Hi.g,a=Hi.b;return e!==gn?`color(${e} ${n.toFixed(3)} ${r.toFixed(3)} ${a.toFixed(3)})`:`rgb(${Math.round(n*255)},${Math.round(r*255)},${Math.round(a*255)})`}offsetHSL(e,n,r){return this.getHSL(jr),jr.h+=e,jr.s+=n,jr.l+=r,this.setHSL(jr.h,jr.s,jr.l),this}add(e){return this.r+=e.r,this.g+=e.g,this.b+=e.b,this}addColors(e,n){return this.r=e.r+n.r,this.g=e.g+n.g,this.b=e.b+n.b,this}addScalar(e){return this.r+=e,this.g+=e,this.b+=e,this}sub(e){return this.r=Math.max(0,this.r-e.r),this.g=Math.max(0,this.g-e.g),this.b=Math.max(0,this.b-e.b),this}multiply(e){return this.r*=e.r,this.g*=e.g,this.b*=e.b,this}multiplyScalar(e){return this.r*=e,this.g*=e,this.b*=e,this}lerp(e,n){return this.r+=(e.r-this.r)*n,this.g+=(e.g-this.g)*n,this.b+=(e.b-this.b)*n,this}lerpColors(e,n,r){return this.r=e.r+(n.r-e.r)*r,this.g=e.g+(n.g-e.g)*r,this.b=e.b+(n.b-e.b)*r,this}lerpHSL(e,n){this.getHSL(jr),e.getHSL(Kh);const r=_c(jr.h,Kh.h,n),a=_c(jr.s,Kh.s,n),l=_c(jr.l,Kh.l,n);return this.setHSL(r,a,l),this}setFromVector3(e){return this.r=e.x,this.g=e.y,this.b=e.z,this}applyMatrix3(e){const n=this.r,r=this.g,a=this.b,l=e.elements;return this.r=l[0]*n+l[3]*r+l[6]*a,this.g=l[1]*n+l[4]*r+l[7]*a,this.b=l[2]*n+l[5]*r+l[8]*a,this}equals(e){return e.r===this.r&&e.g===this.g&&e.b===this.b}fromArray(e,n=0){return this.r=e[n],this.g=e[n+1],this.b=e[n+2],this}toArray(e=[],n=0){return e[n]=this.r,e[n+1]=this.g,e[n+2]=this.b,e}fromBufferAttribute(e,n){return this.r=e.getX(n),this.g=e.getY(n),this.b=e.getZ(n),this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b}}const Hi=new At;At.NAMES=dg;class oa extends Gi{constructor(e){super(),this.isMeshBasicMaterial=!0,this.type="MeshBasicMaterial",this.color=new At(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=Wt,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.fog=e.fog,this}}const Fs=oS();function oS(){const c=new ArrayBuffer(4),e=new Float32Array(c),n=new Uint32Array(c),r=new Uint32Array(512),a=new Uint32Array(512);for(let g=0;g<256;++g){const _=g-127;_<-27?(r[g]=0,r[g|256]=32768,a[g]=24,a[g|256]=24):_<-14?(r[g]=1024>>-_-14,r[g|256]=1024>>-_-14|32768,a[g]=-_-1,a[g|256]=-_-1):_<=15?(r[g]=_+15<<10,r[g|256]=_+15<<10|32768,a[g]=13,a[g|256]=13):_<128?(r[g]=31744,r[g|256]=64512,a[g]=24,a[g|256]=24):(r[g]=31744,r[g|256]=64512,a[g]=13,a[g|256]=13)}const l=new Uint32Array(2048),u=new Uint32Array(64),d=new Uint32Array(64);for(let g=1;g<1024;++g){let _=g<<13,y=0;for(;(_&8388608)===0;)_<<=1,y-=8388608;_&=-8388609,y+=947912704,l[g]=_|y}for(let g=1024;g<2048;++g)l[g]=939524096+(g-1024<<13);for(let g=1;g<31;++g)u[g]=g<<23;u[31]=1199570944,u[32]=2147483648;for(let g=33;g<63;++g)u[g]=2147483648+(g-32<<23);u[63]=3347054592;for(let g=1;g<64;++g)g!==32&&(d[g]=1024);return{floatView:e,uint32View:n,baseTable:r,shiftTable:a,mantissaTable:l,exponentTable:u,offsetTable:d}}function cr(c){Math.abs(c)>65504&&console.warn("THREE.DataUtils.toHalfFloat(): Value out of range."),c=hi(c,-65504,65504),Fs.floatView[0]=c;const e=Fs.uint32View[0],n=e>>23&511;return Fs.baseTable[n]+((e&8388607)>>Fs.shiftTable[n])}function Tc(c){const e=c>>10;return Fs.uint32View[0]=Fs.mantissaTable[Fs.offsetTable[e]+(c&1023)]+Fs.exponentTable[e],Fs.floatView[0]}const lS={toHalfFloat:cr,fromHalfFloat:Tc},xi=new j,$h=new Je;class Xn{constructor(e,n,r=!1){if(Array.isArray(e))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.isBufferAttribute=!0,this.name="",this.array=e,this.itemSize=n,this.count=e!==void 0?e.length/n:0,this.normalized=r,this.usage=gc,this.updateRange={offset:0,count:-1},this.version=0}onUploadCallback(){}set needsUpdate(e){e===!0&&this.version++}setUsage(e){return this.usage=e,this}copy(e){return this.name=e.name,this.array=new e.array.constructor(e.array),this.itemSize=e.itemSize,this.count=e.count,this.normalized=e.normalized,this.usage=e.usage,this}copyAt(e,n,r){e*=this.itemSize,r*=n.itemSize;for(let a=0,l=this.itemSize;a<l;a++)this.array[e+a]=n.array[r+a];return this}copyArray(e){return this.array.set(e),this}applyMatrix3(e){if(this.itemSize===2)for(let n=0,r=this.count;n<r;n++)$h.fromBufferAttribute(this,n),$h.applyMatrix3(e),this.setXY(n,$h.x,$h.y);else if(this.itemSize===3)for(let n=0,r=this.count;n<r;n++)xi.fromBufferAttribute(this,n),xi.applyMatrix3(e),this.setXYZ(n,xi.x,xi.y,xi.z);return this}applyMatrix4(e){for(let n=0,r=this.count;n<r;n++)xi.fromBufferAttribute(this,n),xi.applyMatrix4(e),this.setXYZ(n,xi.x,xi.y,xi.z);return this}applyNormalMatrix(e){for(let n=0,r=this.count;n<r;n++)xi.fromBufferAttribute(this,n),xi.applyNormalMatrix(e),this.setXYZ(n,xi.x,xi.y,xi.z);return this}transformDirection(e){for(let n=0,r=this.count;n<r;n++)xi.fromBufferAttribute(this,n),xi.transformDirection(e),this.setXYZ(n,xi.x,xi.y,xi.z);return this}set(e,n=0){return this.array.set(e,n),this}getX(e){let n=this.array[e*this.itemSize];return this.normalized&&(n=vr(n,this.array)),n}setX(e,n){return this.normalized&&(n=_n(n,this.array)),this.array[e*this.itemSize]=n,this}getY(e){let n=this.array[e*this.itemSize+1];return this.normalized&&(n=vr(n,this.array)),n}setY(e,n){return this.normalized&&(n=_n(n,this.array)),this.array[e*this.itemSize+1]=n,this}getZ(e){let n=this.array[e*this.itemSize+2];return this.normalized&&(n=vr(n,this.array)),n}setZ(e,n){return this.normalized&&(n=_n(n,this.array)),this.array[e*this.itemSize+2]=n,this}getW(e){let n=this.array[e*this.itemSize+3];return this.normalized&&(n=vr(n,this.array)),n}setW(e,n){return this.normalized&&(n=_n(n,this.array)),this.array[e*this.itemSize+3]=n,this}setXY(e,n,r){return e*=this.itemSize,this.normalized&&(n=_n(n,this.array),r=_n(r,this.array)),this.array[e+0]=n,this.array[e+1]=r,this}setXYZ(e,n,r,a){return e*=this.itemSize,this.normalized&&(n=_n(n,this.array),r=_n(r,this.array),a=_n(a,this.array)),this.array[e+0]=n,this.array[e+1]=r,this.array[e+2]=a,this}setXYZW(e,n,r,a,l){return e*=this.itemSize,this.normalized&&(n=_n(n,this.array),r=_n(r,this.array),a=_n(a,this.array),l=_n(l,this.array)),this.array[e+0]=n,this.array[e+1]=r,this.array[e+2]=a,this.array[e+3]=l,this}onUpload(e){return this.onUploadCallback=e,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const e={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};return this.name!==""&&(e.name=this.name),this.usage!==gc&&(e.usage=this.usage),(this.updateRange.offset!==0||this.updateRange.count!==-1)&&(e.updateRange=this.updateRange),e}copyColorsArray(){console.error("THREE.BufferAttribute: copyColorsArray() was removed in r144.")}copyVector2sArray(){console.error("THREE.BufferAttribute: copyVector2sArray() was removed in r144.")}copyVector3sArray(){console.error("THREE.BufferAttribute: copyVector3sArray() was removed in r144.")}copyVector4sArray(){console.error("THREE.BufferAttribute: copyVector4sArray() was removed in r144.")}}class cS extends Xn{constructor(e,n,r){super(new Int8Array(e),n,r)}}class hS extends Xn{constructor(e,n,r){super(new Uint8Array(e),n,r)}}class uS extends Xn{constructor(e,n,r){super(new Uint8ClampedArray(e),n,r)}}class fS extends Xn{constructor(e,n,r){super(new Int16Array(e),n,r)}}class hd extends Xn{constructor(e,n,r){super(new Uint16Array(e),n,r)}}class dS extends Xn{constructor(e,n,r){super(new Int32Array(e),n,r)}}class ud extends Xn{constructor(e,n,r){super(new Uint32Array(e),n,r)}}class pS extends Xn{constructor(e,n,r){super(new Uint16Array(e),n,r),this.isFloat16BufferAttribute=!0}getX(e){let n=Tc(this.array[e*this.itemSize]);return this.normalized&&(n=vr(n,this.array)),n}setX(e,n){return this.normalized&&(n=_n(n,this.array)),this.array[e*this.itemSize]=cr(n),this}getY(e){let n=Tc(this.array[e*this.itemSize+1]);return this.normalized&&(n=vr(n,this.array)),n}setY(e,n){return this.normalized&&(n=_n(n,this.array)),this.array[e*this.itemSize+1]=cr(n),this}getZ(e){let n=Tc(this.array[e*this.itemSize+2]);return this.normalized&&(n=vr(n,this.array)),n}setZ(e,n){return this.normalized&&(n=_n(n,this.array)),this.array[e*this.itemSize+2]=cr(n),this}getW(e){let n=Tc(this.array[e*this.itemSize+3]);return this.normalized&&(n=vr(n,this.array)),n}setW(e,n){return this.normalized&&(n=_n(n,this.array)),this.array[e*this.itemSize+3]=cr(n),this}setXY(e,n,r){return e*=this.itemSize,this.normalized&&(n=_n(n,this.array),r=_n(r,this.array)),this.array[e+0]=cr(n),this.array[e+1]=cr(r),this}setXYZ(e,n,r,a){return e*=this.itemSize,this.normalized&&(n=_n(n,this.array),r=_n(r,this.array),a=_n(a,this.array)),this.array[e+0]=cr(n),this.array[e+1]=cr(r),this.array[e+2]=cr(a),this}setXYZW(e,n,r,a,l){return e*=this.itemSize,this.normalized&&(n=_n(n,this.array),r=_n(r,this.array),a=_n(a,this.array),l=_n(l,this.array)),this.array[e+0]=cr(n),this.array[e+1]=cr(r),this.array[e+2]=cr(a),this.array[e+3]=cr(l),this}}class Ut extends Xn{constructor(e,n,r){super(new Float32Array(e),n,r)}}class mS extends Xn{constructor(e,n,r){super(new Float64Array(e),n,r)}}let gS=0;const Lr=new fn,fd=new Bn,Zo=new j,Mr=new us,wc=new us,Pi=new j;class Mn extends Cs{constructor(){super(),this.isBufferGeometry=!0,Object.defineProperty(this,"id",{value:gS++}),this.uuid=xr(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(e){return Array.isArray(e)?this.index=new(ng(e)?ud:hd)(e,1):this.index=e,this}getAttribute(e){return this.attributes[e]}setAttribute(e,n){return this.attributes[e]=n,this}deleteAttribute(e){return delete this.attributes[e],this}hasAttribute(e){return this.attributes[e]!==void 0}addGroup(e,n,r=0){this.groups.push({start:e,count:n,materialIndex:r})}clearGroups(){this.groups=[]}setDrawRange(e,n){this.drawRange.start=e,this.drawRange.count=n}applyMatrix4(e){const n=this.attributes.position;n!==void 0&&(n.applyMatrix4(e),n.needsUpdate=!0);const r=this.attributes.normal;if(r!==void 0){const l=new wn().getNormalMatrix(e);r.applyNormalMatrix(l),r.needsUpdate=!0}const a=this.attributes.tangent;return a!==void 0&&(a.transformDirection(e),a.needsUpdate=!0),this.boundingBox!==null&&this.computeBoundingBox(),this.boundingSphere!==null&&this.computeBoundingSphere(),this}applyQuaternion(e){return Lr.makeRotationFromQuaternion(e),this.applyMatrix4(Lr),this}rotateX(e){return Lr.makeRotationX(e),this.applyMatrix4(Lr),this}rotateY(e){return Lr.makeRotationY(e),this.applyMatrix4(Lr),this}rotateZ(e){return Lr.makeRotationZ(e),this.applyMatrix4(Lr),this}translate(e,n,r){return Lr.makeTranslation(e,n,r),this.applyMatrix4(Lr),this}scale(e,n,r){return Lr.makeScale(e,n,r),this.applyMatrix4(Lr),this}lookAt(e){return fd.lookAt(e),fd.updateMatrix(),this.applyMatrix4(fd.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(Zo).negate(),this.translate(Zo.x,Zo.y,Zo.z),this}setFromPoints(e){const n=[];for(let r=0,a=e.length;r<a;r++){const l=e[r];n.push(l.x,l.y,l.z||0)}return this.setAttribute("position",new Ut(n,3)),this}computeBoundingBox(){this.boundingBox===null&&(this.boundingBox=new us);const e=this.attributes.position,n=this.morphAttributes.position;if(e&&e.isGLBufferAttribute){console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".',this),this.boundingBox.set(new j(-1/0,-1/0,-1/0),new j(1/0,1/0,1/0));return}if(e!==void 0){if(this.boundingBox.setFromBufferAttribute(e),n)for(let r=0,a=n.length;r<a;r++){const l=n[r];Mr.setFromBufferAttribute(l),this.morphTargetsRelative?(Pi.addVectors(this.boundingBox.min,Mr.min),this.boundingBox.expandByPoint(Pi),Pi.addVectors(this.boundingBox.max,Mr.max),this.boundingBox.expandByPoint(Pi)):(this.boundingBox.expandByPoint(Mr.min),this.boundingBox.expandByPoint(Mr.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){this.boundingSphere===null&&(this.boundingSphere=new fs);const e=this.attributes.position,n=this.morphAttributes.position;if(e&&e.isGLBufferAttribute){console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".',this),this.boundingSphere.set(new j,1/0);return}if(e){const r=this.boundingSphere.center;if(Mr.setFromBufferAttribute(e),n)for(let l=0,u=n.length;l<u;l++){const d=n[l];wc.setFromBufferAttribute(d),this.morphTargetsRelative?(Pi.addVectors(Mr.min,wc.min),Mr.expandByPoint(Pi),Pi.addVectors(Mr.max,wc.max),Mr.expandByPoint(Pi)):(Mr.expandByPoint(wc.min),Mr.expandByPoint(wc.max))}Mr.getCenter(r);let a=0;for(let l=0,u=e.count;l<u;l++)Pi.fromBufferAttribute(e,l),a=Math.max(a,r.distanceToSquared(Pi));if(n)for(let l=0,u=n.length;l<u;l++){const d=n[l],g=this.morphTargetsRelative;for(let _=0,y=d.count;_<y;_++)Pi.fromBufferAttribute(d,_),g&&(Zo.fromBufferAttribute(e,_),Pi.add(Zo)),a=Math.max(a,r.distanceToSquared(Pi))}this.boundingSphere.radius=Math.sqrt(a),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const e=this.index,n=this.attributes;if(e===null||n.position===void 0||n.normal===void 0||n.uv===void 0){console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");return}const r=e.array,a=n.position.array,l=n.normal.array,u=n.uv.array,d=a.length/3;this.hasAttribute("tangent")===!1&&this.setAttribute("tangent",new Xn(new Float32Array(4*d),4));const g=this.getAttribute("tangent").array,_=[],y=[];for(let ee=0;ee<d;ee++)_[ee]=new j,y[ee]=new j;const S=new j,E=new j,w=new j,C=new Je,I=new Je,U=new Je,A=new j,z=new j;function F(ee,Pe,Ue){S.fromArray(a,ee*3),E.fromArray(a,Pe*3),w.fromArray(a,Ue*3),C.fromArray(u,ee*2),I.fromArray(u,Pe*2),U.fromArray(u,Ue*2),E.sub(S),w.sub(S),I.sub(C),U.sub(C);const ge=1/(I.x*U.y-U.x*I.y);isFinite(ge)&&(A.copy(E).multiplyScalar(U.y).addScaledVector(w,-I.y).multiplyScalar(ge),z.copy(w).multiplyScalar(I.x).addScaledVector(E,-U.x).multiplyScalar(ge),_[ee].add(A),_[Pe].add(A),_[Ue].add(A),y[ee].add(z),y[Pe].add(z),y[Ue].add(z))}let k=this.groups;k.length===0&&(k=[{start:0,count:r.length}]);for(let ee=0,Pe=k.length;ee<Pe;++ee){const Ue=k[ee],ge=Ue.start,Se=Ue.count;for(let De=ge,$e=ge+Se;De<$e;De+=3)F(r[De+0],r[De+1],r[De+2])}const Y=new j,K=new j,se=new j,le=new j;function G(ee){se.fromArray(l,ee*3),le.copy(se);const Pe=_[ee];Y.copy(Pe),Y.sub(se.multiplyScalar(se.dot(Pe))).normalize(),K.crossVectors(le,Pe);const ge=K.dot(y[ee])<0?-1:1;g[ee*4]=Y.x,g[ee*4+1]=Y.y,g[ee*4+2]=Y.z,g[ee*4+3]=ge}for(let ee=0,Pe=k.length;ee<Pe;++ee){const Ue=k[ee],ge=Ue.start,Se=Ue.count;for(let De=ge,$e=ge+Se;De<$e;De+=3)G(r[De+0]),G(r[De+1]),G(r[De+2])}}computeVertexNormals(){const e=this.index,n=this.getAttribute("position");if(n!==void 0){let r=this.getAttribute("normal");if(r===void 0)r=new Xn(new Float32Array(n.count*3),3),this.setAttribute("normal",r);else for(let E=0,w=r.count;E<w;E++)r.setXYZ(E,0,0,0);const a=new j,l=new j,u=new j,d=new j,g=new j,_=new j,y=new j,S=new j;if(e)for(let E=0,w=e.count;E<w;E+=3){const C=e.getX(E+0),I=e.getX(E+1),U=e.getX(E+2);a.fromBufferAttribute(n,C),l.fromBufferAttribute(n,I),u.fromBufferAttribute(n,U),y.subVectors(u,l),S.subVectors(a,l),y.cross(S),d.fromBufferAttribute(r,C),g.fromBufferAttribute(r,I),_.fromBufferAttribute(r,U),d.add(y),g.add(y),_.add(y),r.setXYZ(C,d.x,d.y,d.z),r.setXYZ(I,g.x,g.y,g.z),r.setXYZ(U,_.x,_.y,_.z)}else for(let E=0,w=n.count;E<w;E+=3)a.fromBufferAttribute(n,E+0),l.fromBufferAttribute(n,E+1),u.fromBufferAttribute(n,E+2),y.subVectors(u,l),S.subVectors(a,l),y.cross(S),r.setXYZ(E+0,y.x,y.y,y.z),r.setXYZ(E+1,y.x,y.y,y.z),r.setXYZ(E+2,y.x,y.y,y.z);this.normalizeNormals(),r.needsUpdate=!0}}merge(){return console.error("THREE.BufferGeometry.merge() has been removed. Use THREE.BufferGeometryUtils.mergeGeometries() instead."),this}normalizeNormals(){const e=this.attributes.normal;for(let n=0,r=e.count;n<r;n++)Pi.fromBufferAttribute(e,n),Pi.normalize(),e.setXYZ(n,Pi.x,Pi.y,Pi.z)}toNonIndexed(){function e(d,g){const _=d.array,y=d.itemSize,S=d.normalized,E=new _.constructor(g.length*y);let w=0,C=0;for(let I=0,U=g.length;I<U;I++){d.isInterleavedBufferAttribute?w=g[I]*d.data.stride+d.offset:w=g[I]*y;for(let A=0;A<y;A++)E[C++]=_[w++]}return new Xn(E,y,S)}if(this.index===null)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const n=new Mn,r=this.index.array,a=this.attributes;for(const d in a){const g=a[d],_=e(g,r);n.setAttribute(d,_)}const l=this.morphAttributes;for(const d in l){const g=[],_=l[d];for(let y=0,S=_.length;y<S;y++){const E=_[y],w=e(E,r);g.push(w)}n.morphAttributes[d]=g}n.morphTargetsRelative=this.morphTargetsRelative;const u=this.groups;for(let d=0,g=u.length;d<g;d++){const _=u[d];n.addGroup(_.start,_.count,_.materialIndex)}return n}toJSON(){const e={metadata:{version:4.5,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(e.uuid=this.uuid,e.type=this.type,this.name!==""&&(e.name=this.name),Object.keys(this.userData).length>0&&(e.userData=this.userData),this.parameters!==void 0){const g=this.parameters;for(const _ in g)g[_]!==void 0&&(e[_]=g[_]);return e}e.data={attributes:{}};const n=this.index;n!==null&&(e.data.index={type:n.array.constructor.name,array:Array.prototype.slice.call(n.array)});const r=this.attributes;for(const g in r){const _=r[g];e.data.attributes[g]=_.toJSON(e.data)}const a={};let l=!1;for(const g in this.morphAttributes){const _=this.morphAttributes[g],y=[];for(let S=0,E=_.length;S<E;S++){const w=_[S];y.push(w.toJSON(e.data))}y.length>0&&(a[g]=y,l=!0)}l&&(e.data.morphAttributes=a,e.data.morphTargetsRelative=this.morphTargetsRelative);const u=this.groups;u.length>0&&(e.data.groups=JSON.parse(JSON.stringify(u)));const d=this.boundingSphere;return d!==null&&(e.data.boundingSphere={center:d.center.toArray(),radius:d.radius}),e}clone(){return new this.constructor().copy(this)}copy(e){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const n={};this.name=e.name;const r=e.index;r!==null&&this.setIndex(r.clone(n));const a=e.attributes;for(const _ in a){const y=a[_];this.setAttribute(_,y.clone(n))}const l=e.morphAttributes;for(const _ in l){const y=[],S=l[_];for(let E=0,w=S.length;E<w;E++)y.push(S[E].clone(n));this.morphAttributes[_]=y}this.morphTargetsRelative=e.morphTargetsRelative;const u=e.groups;for(let _=0,y=u.length;_<y;_++){const S=u[_];this.addGroup(S.start,S.count,S.materialIndex)}const d=e.boundingBox;d!==null&&(this.boundingBox=d.clone());const g=e.boundingSphere;return g!==null&&(this.boundingSphere=g.clone()),this.drawRange.start=e.drawRange.start,this.drawRange.count=e.drawRange.count,this.userData=e.userData,this}dispose(){this.dispatchEvent({type:"dispose"})}}const pg=new fn,ds=new Sc,Jh=new fs,mg=new j,Ko=new j,$o=new j,Jo=new j,dd=new j,jh=new j,Qh=new Je,eu=new Je,tu=new Je,gg=new j,_g=new j,xg=new j,nu=new j,iu=new j;class Ni extends Bn{constructor(e=new Mn,n=new oa){super(),this.isMesh=!0,this.type="Mesh",this.geometry=e,this.material=n,this.updateMorphTargets()}copy(e,n){return super.copy(e,n),e.morphTargetInfluences!==void 0&&(this.morphTargetInfluences=e.morphTargetInfluences.slice()),e.morphTargetDictionary!==void 0&&(this.morphTargetDictionary=Object.assign({},e.morphTargetDictionary)),this.material=e.material,this.geometry=e.geometry,this}updateMorphTargets(){const n=this.geometry.morphAttributes,r=Object.keys(n);if(r.length>0){const a=n[r[0]];if(a!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let l=0,u=a.length;l<u;l++){const d=a[l].name||String(l);this.morphTargetInfluences.push(0),this.morphTargetDictionary[d]=l}}}}getVertexPosition(e,n){const r=this.geometry,a=r.attributes.position,l=r.morphAttributes.position,u=r.morphTargetsRelative;n.fromBufferAttribute(a,e);const d=this.morphTargetInfluences;if(l&&d){jh.set(0,0,0);for(let g=0,_=l.length;g<_;g++){const y=d[g],S=l[g];y!==0&&(dd.fromBufferAttribute(S,e),u?jh.addScaledVector(dd,y):jh.addScaledVector(dd.sub(n),y))}n.add(jh)}return n}raycast(e,n){const r=this.geometry,a=this.material,l=this.matrixWorld;a!==void 0&&(r.boundingSphere===null&&r.computeBoundingSphere(),Jh.copy(r.boundingSphere),Jh.applyMatrix4(l),ds.copy(e.ray).recast(e.near),!(Jh.containsPoint(ds.origin)===!1&&(ds.intersectSphere(Jh,mg)===null||ds.origin.distanceToSquared(mg)>(e.far-e.near)**2))&&(pg.copy(l).invert(),ds.copy(e.ray).applyMatrix4(pg),!(r.boundingBox!==null&&ds.intersectsBox(r.boundingBox)===!1)&&this._computeIntersections(e,n)))}_computeIntersections(e,n){let r;const a=this.geometry,l=this.material,u=a.index,d=a.attributes.position,g=a.attributes.uv,_=a.attributes.uv1,y=a.attributes.normal,S=a.groups,E=a.drawRange;if(u!==null)if(Array.isArray(l))for(let w=0,C=S.length;w<C;w++){const I=S[w],U=l[I.materialIndex],A=Math.max(I.start,E.start),z=Math.min(u.count,Math.min(I.start+I.count,E.start+E.count));for(let F=A,k=z;F<k;F+=3){const Y=u.getX(F),K=u.getX(F+1),se=u.getX(F+2);r=ru(this,U,e,ds,g,_,y,Y,K,se),r&&(r.faceIndex=Math.floor(F/3),r.face.materialIndex=I.materialIndex,n.push(r))}}else{const w=Math.max(0,E.start),C=Math.min(u.count,E.start+E.count);for(let I=w,U=C;I<U;I+=3){const A=u.getX(I),z=u.getX(I+1),F=u.getX(I+2);r=ru(this,l,e,ds,g,_,y,A,z,F),r&&(r.faceIndex=Math.floor(I/3),n.push(r))}}else if(d!==void 0)if(Array.isArray(l))for(let w=0,C=S.length;w<C;w++){const I=S[w],U=l[I.materialIndex],A=Math.max(I.start,E.start),z=Math.min(d.count,Math.min(I.start+I.count,E.start+E.count));for(let F=A,k=z;F<k;F+=3){const Y=F,K=F+1,se=F+2;r=ru(this,U,e,ds,g,_,y,Y,K,se),r&&(r.faceIndex=Math.floor(F/3),r.face.materialIndex=I.materialIndex,n.push(r))}}else{const w=Math.max(0,E.start),C=Math.min(d.count,E.start+E.count);for(let I=w,U=C;I<U;I+=3){const A=I,z=I+1,F=I+2;r=ru(this,l,e,ds,g,_,y,A,z,F),r&&(r.faceIndex=Math.floor(I/3),n.push(r))}}}}function _S(c,e,n,r,a,l,u,d){let g;if(e.side===T?g=r.intersectTriangle(u,l,a,!0,d):g=r.intersectTriangle(a,l,u,e.side===b,d),g===null)return null;iu.copy(d),iu.applyMatrix4(c.matrixWorld);const _=n.ray.origin.distanceTo(iu);return _<n.near||_>n.far?null:{distance:_,point:iu.clone(),object:c}}function ru(c,e,n,r,a,l,u,d,g,_){c.getVertexPosition(d,Ko),c.getVertexPosition(g,$o),c.getVertexPosition(_,Jo);const y=_S(c,e,n,r,Ko,$o,Jo,nu);if(y){a&&(Qh.fromBufferAttribute(a,d),eu.fromBufferAttribute(a,g),tu.fromBufferAttribute(a,_),y.uv=lr.getInterpolation(nu,Ko,$o,Jo,Qh,eu,tu,new Je)),l&&(Qh.fromBufferAttribute(l,d),eu.fromBufferAttribute(l,g),tu.fromBufferAttribute(l,_),y.uv1=lr.getInterpolation(nu,Ko,$o,Jo,Qh,eu,tu,new Je),y.uv2=y.uv1),u&&(gg.fromBufferAttribute(u,d),_g.fromBufferAttribute(u,g),xg.fromBufferAttribute(u,_),y.normal=lr.getInterpolation(nu,Ko,$o,Jo,gg,_g,xg,new j),y.normal.dot(r.direction)>0&&y.normal.multiplyScalar(-1));const S={a:d,b:g,c:_,normal:new j,materialIndex:0};lr.getNormal(Ko,$o,Jo,S.normal),y.face=S}return y}class la extends Mn{constructor(e=1,n=1,r=1,a=1,l=1,u=1){super(),this.type="BoxGeometry",this.parameters={width:e,height:n,depth:r,widthSegments:a,heightSegments:l,depthSegments:u};const d=this;a=Math.floor(a),l=Math.floor(l),u=Math.floor(u);const g=[],_=[],y=[],S=[];let E=0,w=0;C("z","y","x",-1,-1,r,n,e,u,l,0),C("z","y","x",1,-1,r,n,-e,u,l,1),C("x","z","y",1,1,e,r,n,a,u,2),C("x","z","y",1,-1,e,r,-n,a,u,3),C("x","y","z",1,-1,e,n,r,a,l,4),C("x","y","z",-1,-1,e,n,-r,a,l,5),this.setIndex(g),this.setAttribute("position",new Ut(_,3)),this.setAttribute("normal",new Ut(y,3)),this.setAttribute("uv",new Ut(S,2));function C(I,U,A,z,F,k,Y,K,se,le,G){const ee=k/se,Pe=Y/le,Ue=k/2,ge=Y/2,Se=K/2,De=se+1,$e=le+1;let Ze=0,Ke=0;const ct=new j;for(let Qe=0;Qe<$e;Qe++){const Ot=Qe*Pe-ge;for(let pt=0;pt<De;pt++){const Fe=pt*ee-Ue;ct[I]=Fe*z,ct[U]=Ot*F,ct[A]=Se,_.push(ct.x,ct.y,ct.z),ct[I]=0,ct[U]=0,ct[A]=K>0?1:-1,y.push(ct.x,ct.y,ct.z),S.push(pt/se),S.push(1-Qe/le),Ze+=1}}for(let Qe=0;Qe<le;Qe++)for(let Ot=0;Ot<se;Ot++){const pt=E+Ot+De*Qe,Fe=E+Ot+De*(Qe+1),je=E+(Ot+1)+De*(Qe+1),vt=E+(Ot+1)+De*Qe;g.push(pt,Fe,vt),g.push(Fe,je,vt),Ke+=6}d.addGroup(w,Ke,G),w+=Ke,E+=Ze}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new la(e.width,e.height,e.depth,e.widthSegments,e.heightSegments,e.depthSegments)}}function jo(c){const e={};for(const n in c){e[n]={};for(const r in c[n]){const a=c[n][r];a&&(a.isColor||a.isMatrix3||a.isMatrix4||a.isVector2||a.isVector3||a.isVector4||a.isTexture||a.isQuaternion)?a.isRenderTargetTexture?(console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."),e[n][r]=null):e[n][r]=a.clone():Array.isArray(a)?e[n][r]=a.slice():e[n][r]=a}}return e}function Ji(c){const e={};for(let n=0;n<c.length;n++){const r=jo(c[n]);for(const a in r)e[a]=r[a]}return e}function xS(c){const e=[];for(let n=0;n<c.length;n++)e.push(c[n].clone());return e}function vg(c){return c.getRenderTarget()===null?c.outputColorSpace:Zr}const yg={clone:jo,merge:Ji};var vS=`void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`,yS=`void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}`;class ps extends Gi{constructor(e){super(),this.isShaderMaterial=!0,this.type="ShaderMaterial",this.defines={},this.uniforms={},this.uniformsGroups=[],this.vertexShader=vS,this.fragmentShader=yS,this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.forceSinglePass=!0,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv1:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,e!==void 0&&this.setValues(e)}copy(e){return super.copy(e),this.fragmentShader=e.fragmentShader,this.vertexShader=e.vertexShader,this.uniforms=jo(e.uniforms),this.uniformsGroups=xS(e.uniformsGroups),this.defines=Object.assign({},e.defines),this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.fog=e.fog,this.lights=e.lights,this.clipping=e.clipping,this.extensions=Object.assign({},e.extensions),this.glslVersion=e.glslVersion,this}toJSON(e){const n=super.toJSON(e);n.glslVersion=this.glslVersion,n.uniforms={};for(const a in this.uniforms){const u=this.uniforms[a].value;u&&u.isTexture?n.uniforms[a]={type:"t",value:u.toJSON(e).uuid}:u&&u.isColor?n.uniforms[a]={type:"c",value:u.getHex()}:u&&u.isVector2?n.uniforms[a]={type:"v2",value:u.toArray()}:u&&u.isVector3?n.uniforms[a]={type:"v3",value:u.toArray()}:u&&u.isVector4?n.uniforms[a]={type:"v4",value:u.toArray()}:u&&u.isMatrix3?n.uniforms[a]={type:"m3",value:u.toArray()}:u&&u.isMatrix4?n.uniforms[a]={type:"m4",value:u.toArray()}:n.uniforms[a]={value:u}}Object.keys(this.defines).length>0&&(n.defines=this.defines),n.vertexShader=this.vertexShader,n.fragmentShader=this.fragmentShader,n.lights=this.lights,n.clipping=this.clipping;const r={};for(const a in this.extensions)this.extensions[a]===!0&&(r[a]=!0);return Object.keys(r).length>0&&(n.extensions=r),n}}class su extends Bn{constructor(){super(),this.isCamera=!0,this.type="Camera",this.matrixWorldInverse=new fn,this.projectionMatrix=new fn,this.projectionMatrixInverse=new fn}copy(e,n){return super.copy(e,n),this.matrixWorldInverse.copy(e.matrixWorldInverse),this.projectionMatrix.copy(e.projectionMatrix),this.projectionMatrixInverse.copy(e.projectionMatrixInverse),this}getWorldDirection(e){this.updateWorldMatrix(!0,!1);const n=this.matrixWorld.elements;return e.set(-n[8],-n[9],-n[10]).normalize()}updateMatrixWorld(e){super.updateMatrixWorld(e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(e,n){super.updateWorldMatrix(e,n),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return new this.constructor().copy(this)}}class Fi extends su{constructor(e=50,n=1,r=.1,a=2e3){super(),this.isPerspectiveCamera=!0,this.type="PerspectiveCamera",this.fov=e,this.zoom=1,this.near=r,this.far=a,this.focus=10,this.aspect=n,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(e,n){return super.copy(e,n),this.fov=e.fov,this.zoom=e.zoom,this.near=e.near,this.far=e.far,this.focus=e.focus,this.aspect=e.aspect,this.view=e.view===null?null:Object.assign({},e.view),this.filmGauge=e.filmGauge,this.filmOffset=e.filmOffset,this}setFocalLength(e){const n=.5*this.getFilmHeight()/e;this.fov=Fo*2*Math.atan(n),this.updateProjectionMatrix()}getFocalLength(){const e=Math.tan(Ba*.5*this.fov);return .5*this.getFilmHeight()/e}getEffectiveFOV(){return Fo*2*Math.atan(Math.tan(Ba*.5*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}setViewOffset(e,n,r,a,l,u){this.aspect=e/n,this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=n,this.view.offsetX=r,this.view.offsetY=a,this.view.width=l,this.view.height=u,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const e=this.near;let n=e*Math.tan(Ba*.5*this.fov)/this.zoom,r=2*n,a=this.aspect*r,l=-.5*a;const u=this.view;if(this.view!==null&&this.view.enabled){const g=u.fullWidth,_=u.fullHeight;l+=u.offsetX*a/g,n-=u.offsetY*r/_,a*=u.width/g,r*=u.height/_}const d=this.filmOffset;d!==0&&(l+=e*d/this.getFilmWidth()),this.projectionMatrix.makePerspective(l,l+a,n,n-r,e,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){const n=super.toJSON(e);return n.object.fov=this.fov,n.object.zoom=this.zoom,n.object.near=this.near,n.object.far=this.far,n.object.focus=this.focus,n.object.aspect=this.aspect,this.view!==null&&(n.object.view=Object.assign({},this.view)),n.object.filmGauge=this.filmGauge,n.object.filmOffset=this.filmOffset,n}}const Qo=-90,el=1;class Mg extends Bn{constructor(e,n,r){super(),this.type="CubeCamera",this.renderTarget=r;const a=new Fi(Qo,el,e,n);a.layers=this.layers,a.up.set(0,1,0),a.lookAt(1,0,0),this.add(a);const l=new Fi(Qo,el,e,n);l.layers=this.layers,l.up.set(0,1,0),l.lookAt(-1,0,0),this.add(l);const u=new Fi(Qo,el,e,n);u.layers=this.layers,u.up.set(0,0,-1),u.lookAt(0,1,0),this.add(u);const d=new Fi(Qo,el,e,n);d.layers=this.layers,d.up.set(0,0,1),d.lookAt(0,-1,0),this.add(d);const g=new Fi(Qo,el,e,n);g.layers=this.layers,g.up.set(0,1,0),g.lookAt(0,0,1),this.add(g);const _=new Fi(Qo,el,e,n);_.layers=this.layers,_.up.set(0,1,0),_.lookAt(0,0,-1),this.add(_)}update(e,n){this.parent===null&&this.updateMatrixWorld();const r=this.renderTarget,[a,l,u,d,g,_]=this.children,y=e.getRenderTarget(),S=e.toneMapping,E=e.xr.enabled;e.toneMapping=hn,e.xr.enabled=!1;const w=r.texture.generateMipmaps;r.texture.generateMipmaps=!1,e.setRenderTarget(r,0),e.render(n,a),e.setRenderTarget(r,1),e.render(n,l),e.setRenderTarget(r,2),e.render(n,u),e.setRenderTarget(r,3),e.render(n,d),e.setRenderTarget(r,4),e.render(n,g),r.texture.generateMipmaps=w,e.setRenderTarget(r,5),e.render(n,_),e.setRenderTarget(y),e.toneMapping=S,e.xr.enabled=E,r.texture.needsPMREMUpdate=!0}}class Ac extends di{constructor(e,n,r,a,l,u,d,g,_,y){e=e!==void 0?e:[],n=n!==void 0?n:dn,super(e,n,r,a,l,u,d,g,_,y),this.isCubeTexture=!0,this.flipY=!1}get images(){return this.image}set images(e){this.image=e}}class Sg extends Kr{constructor(e=1,n={}){super(e,e,n),this.isWebGLCubeRenderTarget=!0;const r={width:e,height:e,depth:1},a=[r,r,r,r,r,r];n.encoding!==void 0&&(vc("THREE.WebGLCubeRenderTarget: option.encoding has been replaced by option.colorSpace."),n.colorSpace=n.encoding===ea?gn:na),this.texture=new Ac(a,n.mapping,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.colorSpace),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=n.generateMipmaps!==void 0?n.generateMipmaps:!1,this.texture.minFilter=n.minFilter!==void 0?n.minFilter:ft}fromEquirectangularTexture(e,n){this.texture.type=n.type,this.texture.colorSpace=n.colorSpace,this.texture.generateMipmaps=n.generateMipmaps,this.texture.minFilter=n.minFilter,this.texture.magFilter=n.magFilter;const r={uniforms:{tEquirect:{value:null}},vertexShader:`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,fragmentShader:`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`},a=new la(5,5,5),l=new ps({name:"CubemapFromEquirect",uniforms:jo(r.uniforms),vertexShader:r.vertexShader,fragmentShader:r.fragmentShader,side:T,blending:L});l.uniforms.tEquirect.value=n;const u=new Ni(a,l),d=n.minFilter;return n.minFilter===wt&&(n.minFilter=ft),new Mg(1,10,this).update(e,u),n.minFilter=d,u.geometry.dispose(),u.material.dispose(),this}clear(e,n,r,a){const l=e.getRenderTarget();for(let u=0;u<6;u++)e.setRenderTarget(this,u),e.clear(n,r,a);e.setRenderTarget(l)}}const pd=new j,MS=new j,SS=new wn;class ca{constructor(e=new j(1,0,0),n=0){this.isPlane=!0,this.normal=e,this.constant=n}set(e,n){return this.normal.copy(e),this.constant=n,this}setComponents(e,n,r,a){return this.normal.set(e,n,r),this.constant=a,this}setFromNormalAndCoplanarPoint(e,n){return this.normal.copy(e),this.constant=-n.dot(this.normal),this}setFromCoplanarPoints(e,n,r){const a=pd.subVectors(r,n).cross(MS.subVectors(e,n)).normalize();return this.setFromNormalAndCoplanarPoint(a,e),this}copy(e){return this.normal.copy(e.normal),this.constant=e.constant,this}normalize(){const e=1/this.normal.length();return this.normal.multiplyScalar(e),this.constant*=e,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(e){return this.normal.dot(e)+this.constant}distanceToSphere(e){return this.distanceToPoint(e.center)-e.radius}projectPoint(e,n){return n.copy(e).addScaledVector(this.normal,-this.distanceToPoint(e))}intersectLine(e,n){const r=e.delta(pd),a=this.normal.dot(r);if(a===0)return this.distanceToPoint(e.start)===0?n.copy(e.start):null;const l=-(e.start.dot(this.normal)+this.constant)/a;return l<0||l>1?null:n.copy(e.start).addScaledVector(r,l)}intersectsLine(e){const n=this.distanceToPoint(e.start),r=this.distanceToPoint(e.end);return n<0&&r>0||r<0&&n>0}intersectsBox(e){return e.intersectsPlane(this)}intersectsSphere(e){return e.intersectsPlane(this)}coplanarPoint(e){return e.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(e,n){const r=n||SS.getNormalMatrix(e),a=this.coplanarPoint(pd).applyMatrix4(e),l=this.normal.applyMatrix3(r).normalize();return this.constant=-a.dot(l),this}translate(e){return this.constant-=e.dot(this.normal),this}equals(e){return e.normal.equals(this.normal)&&e.constant===this.constant}clone(){return new this.constructor().copy(this)}}const Ha=new fs,au=new j;class ou{constructor(e=new ca,n=new ca,r=new ca,a=new ca,l=new ca,u=new ca){this.planes=[e,n,r,a,l,u]}set(e,n,r,a,l,u){const d=this.planes;return d[0].copy(e),d[1].copy(n),d[2].copy(r),d[3].copy(a),d[4].copy(l),d[5].copy(u),this}copy(e){const n=this.planes;for(let r=0;r<6;r++)n[r].copy(e.planes[r]);return this}setFromProjectionMatrix(e){const n=this.planes,r=e.elements,a=r[0],l=r[1],u=r[2],d=r[3],g=r[4],_=r[5],y=r[6],S=r[7],E=r[8],w=r[9],C=r[10],I=r[11],U=r[12],A=r[13],z=r[14],F=r[15];return n[0].setComponents(d-a,S-g,I-E,F-U).normalize(),n[1].setComponents(d+a,S+g,I+E,F+U).normalize(),n[2].setComponents(d+l,S+_,I+w,F+A).normalize(),n[3].setComponents(d-l,S-_,I-w,F-A).normalize(),n[4].setComponents(d-u,S-y,I-C,F-z).normalize(),n[5].setComponents(d+u,S+y,I+C,F+z).normalize(),this}intersectsObject(e){if(e.boundingSphere!==void 0)e.boundingSphere===null&&e.computeBoundingSphere(),Ha.copy(e.boundingSphere).applyMatrix4(e.matrixWorld);else{const n=e.geometry;n.boundingSphere===null&&n.computeBoundingSphere(),Ha.copy(n.boundingSphere).applyMatrix4(e.matrixWorld)}return this.intersectsSphere(Ha)}intersectsSprite(e){return Ha.center.set(0,0,0),Ha.radius=.7071067811865476,Ha.applyMatrix4(e.matrixWorld),this.intersectsSphere(Ha)}intersectsSphere(e){const n=this.planes,r=e.center,a=-e.radius;for(let l=0;l<6;l++)if(n[l].distanceToPoint(r)<a)return!1;return!0}intersectsBox(e){const n=this.planes;for(let r=0;r<6;r++){const a=n[r];if(au.x=a.normal.x>0?e.max.x:e.min.x,au.y=a.normal.y>0?e.max.y:e.min.y,au.z=a.normal.z>0?e.max.z:e.min.z,a.distanceToPoint(au)<0)return!1}return!0}containsPoint(e){const n=this.planes;for(let r=0;r<6;r++)if(n[r].distanceToPoint(e)<0)return!1;return!0}clone(){return new this.constructor().copy(this)}}function Eg(){let c=null,e=!1,n=null,r=null;function a(l,u){n(l,u),r=c.requestAnimationFrame(a)}return{start:function(){e!==!0&&n!==null&&(r=c.requestAnimationFrame(a),e=!0)},stop:function(){c.cancelAnimationFrame(r),e=!1},setAnimationLoop:function(l){n=l},setContext:function(l){c=l}}}function ES(c,e){const n=e.isWebGL2,r=new WeakMap;function a(_,y){const S=_.array,E=_.usage,w=c.createBuffer();c.bindBuffer(y,w),c.bufferData(y,S,E),_.onUploadCallback();let C;if(S instanceof Float32Array)C=c.FLOAT;else if(S instanceof Uint16Array)if(_.isFloat16BufferAttribute)if(n)C=c.HALF_FLOAT;else throw new Error("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.");else C=c.UNSIGNED_SHORT;else if(S instanceof Int16Array)C=c.SHORT;else if(S instanceof Uint32Array)C=c.UNSIGNED_INT;else if(S instanceof Int32Array)C=c.INT;else if(S instanceof Int8Array)C=c.BYTE;else if(S instanceof Uint8Array)C=c.UNSIGNED_BYTE;else if(S instanceof Uint8ClampedArray)C=c.UNSIGNED_BYTE;else throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: "+S);return{buffer:w,type:C,bytesPerElement:S.BYTES_PER_ELEMENT,version:_.version}}function l(_,y,S){const E=y.array,w=y.updateRange;c.bindBuffer(S,_),w.count===-1?c.bufferSubData(S,0,E):(n?c.bufferSubData(S,w.offset*E.BYTES_PER_ELEMENT,E,w.offset,w.count):c.bufferSubData(S,w.offset*E.BYTES_PER_ELEMENT,E.subarray(w.offset,w.offset+w.count)),w.count=-1),y.onUploadCallback()}function u(_){return _.isInterleavedBufferAttribute&&(_=_.data),r.get(_)}function d(_){_.isInterleavedBufferAttribute&&(_=_.data);const y=r.get(_);y&&(c.deleteBuffer(y.buffer),r.delete(_))}function g(_,y){if(_.isGLBufferAttribute){const E=r.get(_);(!E||E.version<_.version)&&r.set(_,{buffer:_.buffer,type:_.type,bytesPerElement:_.elementSize,version:_.version});return}_.isInterleavedBufferAttribute&&(_=_.data);const S=r.get(_);S===void 0?r.set(_,a(_,y)):S.version<_.version&&(l(S.buffer,_,y),S.version=_.version)}return{get:u,remove:d,update:g}}class tl extends Mn{constructor(e=1,n=1,r=1,a=1){super(),this.type="PlaneGeometry",this.parameters={width:e,height:n,widthSegments:r,heightSegments:a};const l=e/2,u=n/2,d=Math.floor(r),g=Math.floor(a),_=d+1,y=g+1,S=e/d,E=n/g,w=[],C=[],I=[],U=[];for(let A=0;A<y;A++){const z=A*E-u;for(let F=0;F<_;F++){const k=F*S-l;C.push(k,-z,0),I.push(0,0,1),U.push(F/d),U.push(1-A/g)}}for(let A=0;A<g;A++)for(let z=0;z<d;z++){const F=z+_*A,k=z+_*(A+1),Y=z+1+_*(A+1),K=z+1+_*A;w.push(F,k,K),w.push(k,Y,K)}this.setIndex(w),this.setAttribute("position",new Ut(C,3)),this.setAttribute("normal",new Ut(I,3)),this.setAttribute("uv",new Ut(U,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new tl(e.width,e.height,e.widthSegments,e.heightSegments)}}var bS=`#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;
#endif`,TS=`#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,wS=`#ifdef USE_ALPHATEST
	if ( diffuseColor.a < alphaTest ) discard;
#endif`,AS=`#ifdef USE_ALPHATEST
	uniform float alphaTest;
#endif`,RS=`#ifdef USE_AOMAP
	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;
	reflectedLight.indirectDiffuse *= ambientOcclusion;
	#if defined( USE_ENVMAP ) && defined( STANDARD )
		float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );
		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );
	#endif
#endif`,CS=`#ifdef USE_AOMAP
	uniform sampler2D aoMap;
	uniform float aoMapIntensity;
#endif`,PS="vec3 transformed = vec3( position );",LS=`vec3 objectNormal = vec3( normal );
#ifdef USE_TANGENT
	vec3 objectTangent = vec3( tangent.xyz );
#endif`,DS=`float G_BlinnPhong_Implicit( ) {
	return 0.25;
}
float D_BlinnPhong( const in float shininess, const in float dotNH ) {
	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );
}
vec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( specularColor, 1.0, dotVH );
	float G = G_BlinnPhong_Implicit( );
	float D = D_BlinnPhong( shininess, dotNH );
	return F * ( G * D );
} // validated`,US=`#ifdef USE_IRIDESCENCE
	const mat3 XYZ_TO_REC709 = mat3(
		 3.2404542, -0.9692660,  0.0556434,
		-1.5371385,  1.8760108, -0.2040259,
		-0.4985314,  0.0415560,  1.0572252
	);
	vec3 Fresnel0ToIor( vec3 fresnel0 ) {
		vec3 sqrtF0 = sqrt( fresnel0 );
		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );
	}
	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );
	}
	float IorToFresnel0( float transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));
	}
	vec3 evalSensitivity( float OPD, vec3 shift ) {
		float phase = 2.0 * PI * OPD * 1.0e-9;
		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );
		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );
		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );
		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );
		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );
		xyz /= 1.0685e-7;
		vec3 rgb = XYZ_TO_REC709 * xyz;
		return rgb;
	}
	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {
		vec3 I;
		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );
		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );
		float cosTheta2Sq = 1.0 - sinTheta2Sq;
		if ( cosTheta2Sq < 0.0 ) {
			 return vec3( 1.0 );
		}
		float cosTheta2 = sqrt( cosTheta2Sq );
		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );
		float R12 = F_Schlick( R0, 1.0, cosTheta1 );
		float R21 = R12;
		float T121 = 1.0 - R12;
		float phi12 = 0.0;
		if ( iridescenceIOR < outsideIOR ) phi12 = PI;
		float phi21 = PI - phi12;
		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );
		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );
		vec3 phi23 = vec3( 0.0 );
		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;
		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;
		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;
		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;
		vec3 phi = vec3( phi21 ) + phi23;
		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );
		vec3 r123 = sqrt( R123 );
		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );
		vec3 C0 = R12 + Rs;
		I = C0;
		vec3 Cm = Rs - T121;
		for ( int m = 1; m <= 2; ++ m ) {
			Cm *= r123;
			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );
			I += Cm * Sm;
		}
		return max( I, vec3( 0.0 ) );
	}
#endif`,IS=`#ifdef USE_BUMPMAP
	uniform sampler2D bumpMap;
	uniform float bumpScale;
	vec2 dHdxy_fwd() {
		vec2 dSTdx = dFdx( vBumpMapUv );
		vec2 dSTdy = dFdy( vBumpMapUv );
		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;
		return vec2( dBx, dBy );
	}
	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {
		vec3 vSigmaX = dFdx( surf_pos.xyz );
		vec3 vSigmaY = dFdy( surf_pos.xyz );
		vec3 vN = surf_norm;
		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );
		float fDet = dot( vSigmaX, R1 ) * faceDirection;
		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );
	}
#endif`,NS=`#if NUM_CLIPPING_PLANES > 0
	vec4 plane;
	#pragma unroll_loop_start
	for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
		plane = clippingPlanes[ i ];
		if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;
	}
	#pragma unroll_loop_end
	#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
		bool clipped = true;
		#pragma unroll_loop_start
		for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;
		}
		#pragma unroll_loop_end
		if ( clipped ) discard;
	#endif
#endif`,FS=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];
#endif`,OS=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
#endif`,BS=`#if NUM_CLIPPING_PLANES > 0
	vClipPosition = - mvPosition.xyz;
#endif`,zS=`#if defined( USE_COLOR_ALPHA )
	diffuseColor *= vColor;
#elif defined( USE_COLOR )
	diffuseColor.rgb *= vColor;
#endif`,kS=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR )
	varying vec3 vColor;
#endif`,GS=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )
	varying vec3 vColor;
#endif`,HS=`#if defined( USE_COLOR_ALPHA )
	vColor = vec4( 1.0 );
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )
	vColor = vec3( 1.0 );
#endif
#ifdef USE_COLOR
	vColor *= color;
#endif
#ifdef USE_INSTANCING_COLOR
	vColor.xyz *= instanceColor.xyz;
#endif`,VS=`#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement( a ) ( 1.0 - saturate( a ) )
float pow2( const in float x ) { return x*x; }
vec3 pow2( const in vec3 x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }
float average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }
highp float rand( const in vec2 uv ) {
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
	return fract( sin( sn ) * c );
}
#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif
struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};
struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};
struct GeometricContext {
	vec3 position;
	vec3 normal;
	vec3 viewDir;
#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal;
#endif
};
vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
}
vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
}
mat3 transposeMat3( const in mat3 m ) {
	mat3 tmp;
	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
	return tmp;
}
float luminance( const in vec3 rgb ) {
	const vec3 weights = vec3( 0.2126729, 0.7151522, 0.0721750 );
	return dot( weights, rgb );
}
bool isPerspectiveMatrix( mat4 m ) {
	return m[ 2 ][ 3 ] == - 1.0;
}
vec2 equirectUv( in vec3 dir ) {
	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;
	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;
	return vec2( u, v );
}
vec3 BRDF_Lambert( const in vec3 diffuseColor ) {
	return RECIPROCAL_PI * diffuseColor;
}
vec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
float F_Schlick( const in float f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
} // validated`,WS=`#ifdef ENVMAP_TYPE_CUBE_UV
	#define cubeUV_minMipLevel 4.0
	#define cubeUV_minTileSize 16.0
	float getFace( vec3 direction ) {
		vec3 absDirection = abs( direction );
		float face = - 1.0;
		if ( absDirection.x > absDirection.z ) {
			if ( absDirection.x > absDirection.y )
				face = direction.x > 0.0 ? 0.0 : 3.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		} else {
			if ( absDirection.z > absDirection.y )
				face = direction.z > 0.0 ? 2.0 : 5.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		}
		return face;
	}
	vec2 getUV( vec3 direction, float face ) {
		vec2 uv;
		if ( face == 0.0 ) {
			uv = vec2( direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 1.0 ) {
			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );
		} else if ( face == 2.0 ) {
			uv = vec2( - direction.x, direction.y ) / abs( direction.z );
		} else if ( face == 3.0 ) {
			uv = vec2( - direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 4.0 ) {
			uv = vec2( - direction.x, direction.z ) / abs( direction.y );
		} else {
			uv = vec2( direction.x, direction.y ) / abs( direction.z );
		}
		return 0.5 * ( uv + 1.0 );
	}
	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {
		float face = getFace( direction );
		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );
		mipInt = max( mipInt, cubeUV_minMipLevel );
		float faceSize = exp2( mipInt );
		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;
		if ( face > 2.0 ) {
			uv.y += faceSize;
			face -= 3.0;
		}
		uv.x += face * faceSize;
		uv.x += filterInt * 3.0 * cubeUV_minTileSize;
		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );
		uv.x *= CUBEUV_TEXEL_WIDTH;
		uv.y *= CUBEUV_TEXEL_HEIGHT;
		#ifdef texture2DGradEXT
			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;
		#else
			return texture2D( envMap, uv ).rgb;
		#endif
	}
	#define cubeUV_r0 1.0
	#define cubeUV_v0 0.339
	#define cubeUV_m0 - 2.0
	#define cubeUV_r1 0.8
	#define cubeUV_v1 0.276
	#define cubeUV_m1 - 1.0
	#define cubeUV_r4 0.4
	#define cubeUV_v4 0.046
	#define cubeUV_m4 2.0
	#define cubeUV_r5 0.305
	#define cubeUV_v5 0.016
	#define cubeUV_m5 3.0
	#define cubeUV_r6 0.21
	#define cubeUV_v6 0.0038
	#define cubeUV_m6 4.0
	float roughnessToMip( float roughness ) {
		float mip = 0.0;
		if ( roughness >= cubeUV_r1 ) {
			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;
		} else if ( roughness >= cubeUV_r4 ) {
			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;
		} else if ( roughness >= cubeUV_r5 ) {
			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;
		} else if ( roughness >= cubeUV_r6 ) {
			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;
		} else {
			mip = - 2.0 * log2( 1.16 * roughness );		}
		return mip;
	}
	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {
		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );
		float mipF = fract( mip );
		float mipInt = floor( mip );
		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );
		if ( mipF == 0.0 ) {
			return vec4( color0, 1.0 );
		} else {
			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );
			return vec4( mix( color0, color1, mipF ), 1.0 );
		}
	}
#endif`,XS=`vec3 transformedNormal = objectNormal;
#ifdef USE_INSTANCING
	mat3 m = mat3( instanceMatrix );
	transformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );
	transformedNormal = m * transformedNormal;
#endif
transformedNormal = normalMatrix * transformedNormal;
#ifdef FLIP_SIDED
	transformedNormal = - transformedNormal;
#endif
#ifdef USE_TANGENT
	vec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#ifdef FLIP_SIDED
		transformedTangent = - transformedTangent;
	#endif
#endif`,qS=`#ifdef USE_DISPLACEMENTMAP
	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;
#endif`,YS=`#ifdef USE_DISPLACEMENTMAP
	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );
#endif`,ZS=`#ifdef USE_EMISSIVEMAP
	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );
	totalEmissiveRadiance *= emissiveColor.rgb;
#endif`,KS=`#ifdef USE_EMISSIVEMAP
	uniform sampler2D emissiveMap;
#endif`,$S="gl_FragColor = linearToOutputTexel( gl_FragColor );",JS=`vec4 LinearToLinear( in vec4 value ) {
	return value;
}
vec4 LinearTosRGB( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}`,jS=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vec3 cameraToFrag;
		if ( isOrthographic ) {
			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToFrag = normalize( vWorldPosition - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( cameraToFrag, worldNormal );
		#else
			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );
		#endif
	#else
		vec3 reflectVec = vReflect;
	#endif
	#ifdef ENVMAP_TYPE_CUBE
		vec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );
	#else
		vec4 envColor = vec4( 0.0 );
	#endif
	#ifdef ENVMAP_BLENDING_MULTIPLY
		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_MIX )
		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_ADD )
		outgoingLight += envColor.xyz * specularStrength * reflectivity;
	#endif
#endif`,QS=`#ifdef USE_ENVMAP
	uniform float envMapIntensity;
	uniform float flipEnvMap;
	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif`,eE=`#ifdef USE_ENVMAP
	uniform float reflectivity;
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif
#endif`,tE=`#ifdef USE_ENVMAP
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;
	#else
		varying vec3 vReflect;
		uniform float refractionRatio;
	#endif
#endif`,nE=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vWorldPosition = worldPosition.xyz;
	#else
		vec3 cameraToVertex;
		if ( isOrthographic ) {
			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vReflect = reflect( cameraToVertex, worldNormal );
		#else
			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );
		#endif
	#endif
#endif`,iE=`#ifdef USE_FOG
	vFogDepth = - mvPosition.z;
#endif`,rE=`#ifdef USE_FOG
	varying float vFogDepth;
#endif`,sE=`#ifdef USE_FOG
	#ifdef FOG_EXP2
		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );
	#else
		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );
	#endif
	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );
#endif`,aE=`#ifdef USE_FOG
	uniform vec3 fogColor;
	varying float vFogDepth;
	#ifdef FOG_EXP2
		uniform float fogDensity;
	#else
		uniform float fogNear;
		uniform float fogFar;
	#endif
#endif`,oE=`#ifdef USE_GRADIENTMAP
	uniform sampler2D gradientMap;
#endif
vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );
	#ifdef USE_GRADIENTMAP
		return vec3( texture2D( gradientMap, coord ).r );
	#else
		vec2 fw = fwidth( coord ) * 0.5;
		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );
	#endif
}`,lE=`#ifdef USE_LIGHTMAP
	vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
	vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
	reflectedLight.indirectDiffuse += lightMapIrradiance;
#endif`,cE=`#ifdef USE_LIGHTMAP
	uniform sampler2D lightMap;
	uniform float lightMapIntensity;
#endif`,hE=`LambertMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularStrength = specularStrength;`,uE=`varying vec3 vViewPosition;
struct LambertMaterial {
	vec3 diffuseColor;
	float specularStrength;
};
void RE_Direct_Lambert( const in IncidentLight directLight, const in GeometricContext geometry, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in GeometricContext geometry, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Lambert
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert`,fE=`uniform bool receiveShadow;
uniform vec3 ambientLightColor;
uniform vec3 lightProbe[ 9 ];
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {
	float x = normal.x, y = normal.y, z = normal.z;
	vec3 result = shCoefficients[ 0 ] * 0.886227;
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
	return result;
}
vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {
	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );
	return irradiance;
}
vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {
	vec3 irradiance = ambientLightColor;
	return irradiance;
}
float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {
	#if defined ( LEGACY_LIGHTS )
		if ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {
			return pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );
		}
		return 1.0;
	#else
		float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );
		if ( cutoffDistance > 0.0 ) {
			distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );
		}
		return distanceFalloff;
	#endif
}
float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {
	return smoothstep( coneCosine, penumbraCosine, angleCosine );
}
#if NUM_DIR_LIGHTS > 0
	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};
	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];
	void getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {
		light.color = directionalLight.color;
		light.direction = directionalLight.direction;
		light.visible = true;
	}
#endif
#if NUM_POINT_LIGHTS > 0
	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};
	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];
	void getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {
		vec3 lVector = pointLight.position - geometry.position;
		light.direction = normalize( lVector );
		float lightDistance = length( lVector );
		light.color = pointLight.color;
		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );
		light.visible = ( light.color != vec3( 0.0 ) );
	}
#endif
#if NUM_SPOT_LIGHTS > 0
	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};
	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];
	void getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {
		vec3 lVector = spotLight.position - geometry.position;
		light.direction = normalize( lVector );
		float angleCos = dot( light.direction, spotLight.direction );
		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );
		if ( spotAttenuation > 0.0 ) {
			float lightDistance = length( lVector );
			light.color = spotLight.color * spotAttenuation;
			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );
			light.visible = ( light.color != vec3( 0.0 ) );
		} else {
			light.color = vec3( 0.0 );
			light.visible = false;
		}
	}
#endif
#if NUM_RECT_AREA_LIGHTS > 0
	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};
	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;
	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];
#endif
#if NUM_HEMI_LIGHTS > 0
	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};
	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];
	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {
		float dotNL = dot( normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;
		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );
		return irradiance;
	}
#endif`,dE=`#if defined( USE_ENVMAP )
	vec3 getIBLIrradiance( const in vec3 normal ) {
		#if defined( ENVMAP_TYPE_CUBE_UV )
			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );
			return PI * envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {
		#if defined( ENVMAP_TYPE_CUBE_UV )
			vec3 reflectVec = reflect( - viewDir, normal );
			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );
			return envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
#endif`,pE=`ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;`,mE=`varying vec3 vViewPosition;
struct ToonMaterial {
	vec3 diffuseColor;
};
void RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	vec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon`,gE=`BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;`,_E=`varying vec3 vViewPosition;
struct BlinnPhongMaterial {
	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;
};
void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;
}
void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong`,xE=`PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
vec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );
material.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;
material.roughness = min( material.roughness, 1.0 );
#ifdef IOR
	material.ior = ior;
	#ifdef USE_SPECULAR
		float specularIntensityFactor = specularIntensity;
		vec3 specularColorFactor = specularColor;
		#ifdef USE_SPECULAR_COLORMAP
			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;
		#endif
		#ifdef USE_SPECULAR_INTENSITYMAP
			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;
		#endif
		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );
	#else
		float specularIntensityFactor = 1.0;
		vec3 specularColorFactor = vec3( 1.0 );
		material.specularF90 = 1.0;
	#endif
	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );
#else
	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );
	material.specularF90 = 1.0;
#endif
#ifdef USE_CLEARCOAT
	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	material.clearcoatF0 = vec3( 0.04 );
	material.clearcoatF90 = 1.0;
	#ifdef USE_CLEARCOATMAP
		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;
	#endif
	#ifdef USE_CLEARCOAT_ROUGHNESSMAP
		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;
	#endif
	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
#endif
#ifdef USE_IRIDESCENCE
	material.iridescence = iridescence;
	material.iridescenceIOR = iridescenceIOR;
	#ifdef USE_IRIDESCENCEMAP
		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;
	#endif
	#ifdef USE_IRIDESCENCE_THICKNESSMAP
		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;
	#else
		material.iridescenceThickness = iridescenceThicknessMaximum;
	#endif
#endif
#ifdef USE_SHEEN
	material.sheenColor = sheenColor;
	#ifdef USE_SHEEN_COLORMAP
		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;
	#endif
	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );
	#ifdef USE_SHEEN_ROUGHNESSMAP
		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;
	#endif
#endif`,vE=`struct PhysicalMaterial {
	vec3 diffuseColor;
	float roughness;
	vec3 specularColor;
	float specularF90;
	#ifdef USE_CLEARCOAT
		float clearcoat;
		float clearcoatRoughness;
		vec3 clearcoatF0;
		float clearcoatF90;
	#endif
	#ifdef USE_IRIDESCENCE
		float iridescence;
		float iridescenceIOR;
		float iridescenceThickness;
		vec3 iridescenceFresnel;
		vec3 iridescenceF0;
	#endif
	#ifdef USE_SHEEN
		vec3 sheenColor;
		float sheenRoughness;
	#endif
	#ifdef IOR
		float ior;
	#endif
	#ifdef USE_TRANSMISSION
		float transmission;
		float transmissionAlpha;
		float thickness;
		float attenuationDistance;
		vec3 attenuationColor;
	#endif
};
vec3 clearcoatSpecular = vec3( 0.0 );
vec3 sheenSpecular = vec3( 0.0 );
vec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {
    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );
    float x2 = x * x;
    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );
    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );
}
float V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	return 0.5 / max( gv + gl, EPSILON );
}
float D_GGX( const in float alpha, const in float dotNH ) {
	float a2 = pow2( alpha );
	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;
	return RECIPROCAL_PI * a2 / pow2( denom );
}
#ifdef USE_CLEARCOAT
	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {
		vec3 f0 = material.clearcoatF0;
		float f90 = material.clearcoatF90;
		float roughness = material.clearcoatRoughness;
		float alpha = pow2( roughness );
		vec3 halfDir = normalize( lightDir + viewDir );
		float dotNL = saturate( dot( normal, lightDir ) );
		float dotNV = saturate( dot( normal, viewDir ) );
		float dotNH = saturate( dot( normal, halfDir ) );
		float dotVH = saturate( dot( viewDir, halfDir ) );
		vec3 F = F_Schlick( f0, f90, dotVH );
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
		return F * ( V * D );
	}
#endif
vec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {
	vec3 f0 = material.specularColor;
	float f90 = material.specularF90;
	float roughness = material.roughness;
	float alpha = pow2( roughness );
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( f0, f90, dotVH );
	#ifdef USE_IRIDESCENCE
		F = mix( F, material.iridescenceFresnel, material.iridescence );
	#endif
	float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
	float D = D_GGX( alpha, dotNH );
	return F * ( V * D );
}
vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	float dotNV = saturate( dot( N, V ) );
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
	uv = uv * LUT_SCALE + LUT_BIAS;
	return uv;
}
float LTC_ClippedSphereFormFactor( const in vec3 f ) {
	float l = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
	float x = dot( v1, v2 );
	float y = abs( x );
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;
	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
	return cross( v1, v2 ) * theta_sintheta;
}
vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );
	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 );
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return vec3( result );
}
#if defined( USE_SHEEN )
float D_Charlie( float roughness, float dotNH ) {
	float alpha = pow2( roughness );
	float invAlpha = 1.0 / alpha;
	float cos2h = dotNH * dotNH;
	float sin2h = max( 1.0 - cos2h, 0.0078125 );
	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
}
float V_Neubelt( float dotNV, float dotNL ) {
	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );
}
vec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float D = D_Charlie( sheenRoughness, dotNH );
	float V = V_Neubelt( dotNV, dotNL );
	return sheenColor * ( D * V );
}
#endif
float IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	float r2 = roughness * roughness;
	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;
	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;
	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );
	return saturate( DG * RECIPROCAL_PI );
}
vec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;
	return fab;
}
vec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	return specularColor * fab.x + specularF90 * fab.y;
}
#ifdef USE_IRIDESCENCE
void computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#else
void computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#endif
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	#ifdef USE_IRIDESCENCE
		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );
	#else
		vec3 Fr = specularColor;
	#endif
	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;
	float Ess = fab.x + fab.y;
	float Ems = 1.0 - Ess;
	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );
	singleScatter += FssEss;
	multiScatter += Fms * Ems;
}
#if NUM_RECT_AREA_LIGHTS > 0
	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
		vec3 normal = geometry.normal;
		vec3 viewDir = geometry.viewDir;
		vec3 position = geometry.position;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.roughness;
		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;
		vec2 uv = LTC_Uv( normal, viewDir, roughness );
		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );
		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(    0, 1,    0 ),
			vec3( t1.z, 0, t1.w )
		);
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );
		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );
		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );
	}
#endif
void RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifdef USE_CLEARCOAT
		float dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );
		vec3 ccIrradiance = dotNLcc * directLight.color;
		clearcoatSpecular += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material );
	#endif
	#ifdef USE_SHEEN
		sheenSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );
	#endif
	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material );
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {
	#ifdef USE_CLEARCOAT
		clearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		sheenSpecular += irradiance * material.sheenColor * IBLSheenBRDF( geometry.normal, geometry.viewDir, material.sheenRoughness );
	#endif
	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;
	#ifdef USE_IRIDESCENCE
		computeMultiscatteringIridescence( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );
	#else
		computeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );
	#endif
	vec3 totalScattering = singleScattering + multiScattering;
	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );
	reflectedLight.indirectSpecular += radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;
	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {
	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
}`,yE=`
GeometricContext geometry;
geometry.position = - vViewPosition;
geometry.normal = normal;
geometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );
#ifdef USE_CLEARCOAT
	geometry.clearcoatNormal = clearcoatNormal;
#endif
#ifdef USE_IRIDESCENCE
	float dotNVi = saturate( dot( normal, geometry.viewDir ) );
	if ( material.iridescenceThickness == 0.0 ) {
		material.iridescence = 0.0;
	} else {
		material.iridescence = saturate( material.iridescence );
	}
	if ( material.iridescence > 0.0 ) {
		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );
		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );
	}
#endif
IncidentLight directLight;
#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )
	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		pointLight = pointLights[ i ];
		getPointLightInfo( pointLight, geometry, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )
	SpotLight spotLight;
	vec4 spotColor;
	vec3 spotLightCoord;
	bool inSpotLightMap;
	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		spotLight = spotLights[ i ];
		getSpotLightInfo( spotLight, geometry, directLight );
		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX
		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS
		#else
		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#endif
		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )
			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;
			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );
			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );
			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;
		#endif
		#undef SPOT_LIGHT_MAP_INDEX
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )
	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		directionalLight = directionalLights[ i ];
		getDirectionalLightInfo( directionalLight, geometry, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )
	RectAreaLight rectAreaLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {
		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if defined( RE_IndirectDiffuse )
	vec3 iblIrradiance = vec3( 0.0 );
	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );
	irradiance += getLightProbeIrradiance( lightProbe, geometry.normal );
	#if ( NUM_HEMI_LIGHTS > 0 )
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );
		}
		#pragma unroll_loop_end
	#endif
#endif
#if defined( RE_IndirectSpecular )
	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );
#endif`,ME=`#if defined( RE_IndirectDiffuse )
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
		irradiance += lightMapIrradiance;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )
		iblIrradiance += getIBLIrradiance( geometry.normal );
	#endif
#endif
#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )
	radiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );
	#ifdef USE_CLEARCOAT
		clearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );
	#endif
#endif`,SE=`#if defined( RE_IndirectDiffuse )
	RE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );
#endif
#if defined( RE_IndirectSpecular )
	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );
#endif`,EE=`#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )
	gl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;
#endif`,bE=`#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )
	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,TE=`#ifdef USE_LOGDEPTHBUF
	#ifdef USE_LOGDEPTHBUF_EXT
		varying float vFragDepth;
		varying float vIsPerspective;
	#else
		uniform float logDepthBufFC;
	#endif
#endif`,wE=`#ifdef USE_LOGDEPTHBUF
	#ifdef USE_LOGDEPTHBUF_EXT
		vFragDepth = 1.0 + gl_Position.w;
		vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );
	#else
		if ( isPerspectiveMatrix( projectionMatrix ) ) {
			gl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;
			gl_Position.z *= gl_Position.w;
		}
	#endif
#endif`,AE=`#ifdef USE_MAP
	diffuseColor *= texture2D( map, vMapUv );
#endif`,RE=`#ifdef USE_MAP
	uniform sampler2D map;
#endif`,CE=`#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	#if defined( USE_POINTS_UV )
		vec2 uv = vUv;
	#else
		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;
	#endif
#endif
#ifdef USE_MAP
	diffuseColor *= texture2D( map, uv );
#endif
#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, uv ).g;
#endif`,PE=`#if defined( USE_POINTS_UV )
	varying vec2 vUv;
#else
	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
		uniform mat3 uvTransform;
	#endif
#endif
#ifdef USE_MAP
	uniform sampler2D map;
#endif
#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,LE=`float metalnessFactor = metalness;
#ifdef USE_METALNESSMAP
	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );
	metalnessFactor *= texelMetalness.b;
#endif`,DE=`#ifdef USE_METALNESSMAP
	uniform sampler2D metalnessMap;
#endif`,UE=`#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )
	vColor *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		#if defined( USE_COLOR_ALPHA )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];
		#elif defined( USE_COLOR )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];
		#endif
	}
#endif`,IE=`#ifdef USE_MORPHNORMALS
	objectNormal *= morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
			if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];
		}
	#else
		objectNormal += morphNormal0 * morphTargetInfluences[ 0 ];
		objectNormal += morphNormal1 * morphTargetInfluences[ 1 ];
		objectNormal += morphNormal2 * morphTargetInfluences[ 2 ];
		objectNormal += morphNormal3 * morphTargetInfluences[ 3 ];
	#endif
#endif`,NE=`#ifdef USE_MORPHTARGETS
	uniform float morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];
		uniform sampler2DArray morphTargetsTexture;
		uniform ivec2 morphTargetsTextureSize;
		vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {
			int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;
			int y = texelIndex / morphTargetsTextureSize.x;
			int x = texelIndex - y * morphTargetsTextureSize.x;
			ivec3 morphUV = ivec3( x, y, morphTargetIndex );
			return texelFetch( morphTargetsTexture, morphUV, 0 );
		}
	#else
		#ifndef USE_MORPHNORMALS
			uniform float morphTargetInfluences[ 8 ];
		#else
			uniform float morphTargetInfluences[ 4 ];
		#endif
	#endif
#endif`,FE=`#ifdef USE_MORPHTARGETS
	transformed *= morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
			if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];
		}
	#else
		transformed += morphTarget0 * morphTargetInfluences[ 0 ];
		transformed += morphTarget1 * morphTargetInfluences[ 1 ];
		transformed += morphTarget2 * morphTargetInfluences[ 2 ];
		transformed += morphTarget3 * morphTargetInfluences[ 3 ];
		#ifndef USE_MORPHNORMALS
			transformed += morphTarget4 * morphTargetInfluences[ 4 ];
			transformed += morphTarget5 * morphTargetInfluences[ 5 ];
			transformed += morphTarget6 * morphTargetInfluences[ 6 ];
			transformed += morphTarget7 * morphTargetInfluences[ 7 ];
		#endif
	#endif
#endif`,OE=`float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;
#ifdef FLAT_SHADED
	vec3 fdx = dFdx( vViewPosition );
	vec3 fdy = dFdy( vViewPosition );
	vec3 normal = normalize( cross( fdx, fdy ) );
#else
	vec3 normal = normalize( vNormal );
	#ifdef DOUBLE_SIDED
		normal *= faceDirection;
	#endif
#endif
#ifdef USE_NORMALMAP_TANGENTSPACE
	#ifdef USE_TANGENT
		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn = getTangentFrame( - vViewPosition, normal, vNormalMapUv );
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn[0] *= faceDirection;
		tbn[1] *= faceDirection;
	#endif
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	#ifdef USE_TANGENT
		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn2[0] *= faceDirection;
		tbn2[1] *= faceDirection;
	#endif
#endif
vec3 geometryNormal = normal;`,BE=`#ifdef USE_NORMALMAP_OBJECTSPACE
	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	#ifdef FLIP_SIDED
		normal = - normal;
	#endif
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	normal = normalize( normalMatrix * normal );
#elif defined( USE_NORMALMAP_TANGENTSPACE )
	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;
	normal = normalize( tbn * mapN );
#elif defined( USE_BUMPMAP )
	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );
#endif`,zE=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,kE=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,GE=`#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif`,HE=`#ifdef USE_NORMALMAP
	uniform sampler2D normalMap;
	uniform vec2 normalScale;
#endif
#ifdef USE_NORMALMAP_OBJECTSPACE
	uniform mat3 normalMatrix;
#endif
#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) )
	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {
		vec3 q0 = dFdx( eye_pos.xyz );
		vec3 q1 = dFdy( eye_pos.xyz );
		vec2 st0 = dFdx( uv.st );
		vec2 st1 = dFdy( uv.st );
		vec3 N = surf_norm;
		vec3 q1perp = cross( q1, N );
		vec3 q0perp = cross( N, q0 );
		vec3 T = q1perp * st0.x + q0perp * st1.x;
		vec3 B = q1perp * st0.y + q0perp * st1.y;
		float det = max( dot( T, T ), dot( B, B ) );
		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );
		return mat3( T * scale, B * scale, N );
	}
#endif`,VE=`#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal = geometryNormal;
#endif`,WE=`#ifdef USE_CLEARCOAT_NORMALMAP
	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;
	clearcoatNormal = normalize( tbn2 * clearcoatMapN );
#endif`,XE=`#ifdef USE_CLEARCOATMAP
	uniform sampler2D clearcoatMap;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform sampler2D clearcoatRoughnessMap;
#endif`,qE=`#ifdef USE_IRIDESCENCEMAP
	uniform sampler2D iridescenceMap;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform sampler2D iridescenceThicknessMap;
#endif`,YE=`#ifdef OPAQUE
diffuseColor.a = 1.0;
#endif
#ifdef USE_TRANSMISSION
diffuseColor.a *= material.transmissionAlpha + 0.1;
#endif
gl_FragColor = vec4( outgoingLight, diffuseColor.a );`,ZE=`vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}
vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}
const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;
const vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );
const vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );
const float ShiftRight8 = 1. / 256.;
vec4 packDepthToRGBA( const in float v ) {
	vec4 r = vec4( fract( v * PackFactors ), v );
	r.yzw -= r.xyz * ShiftRight8;	return r * PackUpscale;
}
float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors );
}
vec2 packDepthToRG( in highp float v ) {
	return packDepthToRGBA( v ).yx;
}
float unpackRGToDepth( const in highp vec2 v ) {
	return unpackRGBAToDepth( vec4( v.xy, 0.0, 0.0 ) );
}
vec4 pack2HalfToRGBA( vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );
}
vec2 unpackRGBATo2Half( vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}
float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	return ( viewZ + near ) / ( near - far );
}
float orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return depth * ( near - far ) - near;
}
float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );
}
float perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return ( near * far ) / ( ( far - near ) * depth - far );
}`,KE=`#ifdef PREMULTIPLIED_ALPHA
	gl_FragColor.rgb *= gl_FragColor.a;
#endif`,$E=`vec4 mvPosition = vec4( transformed, 1.0 );
#ifdef USE_INSTANCING
	mvPosition = instanceMatrix * mvPosition;
#endif
mvPosition = modelViewMatrix * mvPosition;
gl_Position = projectionMatrix * mvPosition;`,JE=`#ifdef DITHERING
	gl_FragColor.rgb = dithering( gl_FragColor.rgb );
#endif`,jE=`#ifdef DITHERING
	vec3 dithering( vec3 color ) {
		float grid_position = rand( gl_FragCoord.xy );
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
		return color + dither_shift_RGB;
	}
#endif`,QE=`float roughnessFactor = roughness;
#ifdef USE_ROUGHNESSMAP
	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );
	roughnessFactor *= texelRoughness.g;
#endif`,eb=`#ifdef USE_ROUGHNESSMAP
	uniform sampler2D roughnessMap;
#endif`,tb=`#if NUM_SPOT_LIGHT_COORDS > 0
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#if NUM_SPOT_LIGHT_MAPS > 0
	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {
		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );
	}
	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {
		return unpackRGBATo2Half( texture2D( shadow, uv ) );
	}
	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){
		float occlusion = 1.0;
		vec2 distribution = texture2DDistribution( shadow, uv );
		float hard_shadow = step( compare , distribution.x );
		if (hard_shadow != 1.0 ) {
			float distance = compare - distribution.x ;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );
		}
		return occlusion;
	}
	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {
		float shadow = 1.0;
		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;
		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;
		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;
		if ( frustumTest ) {
		#if defined( SHADOWMAP_TYPE_PCF )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;
			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );
		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;
			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;
			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );
		#elif defined( SHADOWMAP_TYPE_VSM )
			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );
		#else
			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );
		#endif
		}
		return shadow;
	}
	vec2 cubeToUV( vec3 v, float texelSizeY ) {
		vec3 absV = abs( v );
		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );
		vec2 planar = v.xy;
		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;
		if ( absV.z >= almostOne ) {
			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;
		} else if ( absV.x >= almostOne ) {
			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;
		} else if ( absV.y >= almostOne ) {
			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;
		}
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );
	}
	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {
		vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );
		vec3 lightToPosition = shadowCoord.xyz;
		float dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );		dp += shadowBias;
		vec3 bd3D = normalize( lightToPosition );
		#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )
			vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;
			return (
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
			) * ( 1.0 / 9.0 );
		#else
			return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );
		#endif
	}
#endif`,nb=`#if NUM_SPOT_LIGHT_COORDS > 0
	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
#endif`,ib=`#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )
	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
	vec4 shadowWorldPosition;
#endif
#if defined( USE_SHADOWMAP )
	#if NUM_DIR_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
#endif
#if NUM_SPOT_LIGHT_COORDS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {
		shadowWorldPosition = worldPosition;
		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;
		#endif
		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
#endif`,rb=`float getShadowMask() {
	float shadow = 1.0;
	#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#endif
	return shadow;
}`,sb=`#ifdef USE_SKINNING
	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );
#endif`,ab=`#ifdef USE_SKINNING
	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;
	uniform highp sampler2D boneTexture;
	uniform int boneTextureSize;
	mat4 getBoneMatrix( const in float i ) {
		float j = i * 4.0;
		float x = mod( j, float( boneTextureSize ) );
		float y = floor( j / float( boneTextureSize ) );
		float dx = 1.0 / float( boneTextureSize );
		float dy = 1.0 / float( boneTextureSize );
		y = dy * ( y + 0.5 );
		vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );
		vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );
		vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );
		vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );
		mat4 bone = mat4( v1, v2, v3, v4 );
		return bone;
	}
#endif`,ob=`#ifdef USE_SKINNING
	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;
	transformed = ( bindMatrixInverse * skinned ).xyz;
#endif`,lb=`#ifdef USE_SKINNING
	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;
	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;
	#ifdef USE_TANGENT
		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#endif
#endif`,cb=`float specularStrength;
#ifdef USE_SPECULARMAP
	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );
	specularStrength = texelSpecular.r;
#else
	specularStrength = 1.0;
#endif`,hb=`#ifdef USE_SPECULARMAP
	uniform sampler2D specularMap;
#endif`,ub=`#if defined( TONE_MAPPING )
	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );
#endif`,fb=`#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
uniform float toneMappingExposure;
vec3 LinearToneMapping( vec3 color ) {
	return toneMappingExposure * color;
}
vec3 ReinhardToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );
}
vec3 OptimizedCineonToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );
}
vec3 RRTAndODTFit( vec3 v ) {
	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;
}
vec3 ACESFilmicToneMapping( vec3 color ) {
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);
	const mat3 ACESOutputMat = mat3(
		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,  1.07602 )
	);
	color *= toneMappingExposure / 0.6;
	color = ACESInputMat * color;
	color = RRTAndODTFit( color );
	color = ACESOutputMat * color;
	return saturate( color );
}
vec3 CustomToneMapping( vec3 color ) { return color; }`,db=`#ifdef USE_TRANSMISSION
	material.transmission = transmission;
	material.transmissionAlpha = 1.0;
	material.thickness = thickness;
	material.attenuationDistance = attenuationDistance;
	material.attenuationColor = attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;
	#endif
	#ifdef USE_THICKNESSMAP
		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;
	#endif
	vec3 pos = vWorldPosition;
	vec3 v = normalize( cameraPosition - pos );
	vec3 n = inverseTransformDirection( normal, viewMatrix );
	vec4 transmission = getIBLVolumeRefraction(
		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,
		pos, modelMatrix, viewMatrix, projectionMatrix, material.ior, material.thickness,
		material.attenuationColor, material.attenuationDistance );
	material.transmissionAlpha = mix( material.transmissionAlpha, transmission.a, material.transmission );
	totalDiffuse = mix( totalDiffuse, transmission.rgb, material.transmission );
#endif`,pb=`#ifdef USE_TRANSMISSION
	uniform float transmission;
	uniform float thickness;
	uniform float attenuationDistance;
	uniform vec3 attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		uniform sampler2D transmissionMap;
	#endif
	#ifdef USE_THICKNESSMAP
		uniform sampler2D thicknessMap;
	#endif
	uniform vec2 transmissionSamplerSize;
	uniform sampler2D transmissionSamplerMap;
	uniform mat4 modelMatrix;
	uniform mat4 projectionMatrix;
	varying vec3 vWorldPosition;
	float w0( float a ) {
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );
	}
	float w1( float a ) {
		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );
	}
	float w2( float a ){
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );
	}
	float w3( float a ) {
		return ( 1.0 / 6.0 ) * ( a * a * a );
	}
	float g0( float a ) {
		return w0( a ) + w1( a );
	}
	float g1( float a ) {
		return w2( a ) + w3( a );
	}
	float h0( float a ) {
		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );
	}
	float h1( float a ) {
		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );
	}
	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {
		uv = uv * texelSize.zw + 0.5;
		vec2 iuv = floor( uv );
		vec2 fuv = fract( uv );
		float g0x = g0( fuv.x );
		float g1x = g1( fuv.x );
		float h0x = h0( fuv.x );
		float h1x = h1( fuv.x );
		float h0y = h0( fuv.y );
		float h1y = h1( fuv.y );
		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +
			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );
	}
	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {
		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );
		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );
		vec2 fLodSizeInv = 1.0 / fLodSize;
		vec2 cLodSizeInv = 1.0 / cLodSize;
		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );
		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );
		return mix( fSample, cSample, fract( lod ) );
	}
	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {
		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );
		vec3 modelScale;
		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );
		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );
		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );
		return normalize( refractionVector ) * thickness * modelScale;
	}
	float applyIorToRoughness( const in float roughness, const in float ior ) {
		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );
	}
	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {
		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );
	}
	vec3 applyVolumeAttenuation( const in vec3 radiance, const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {
		if ( isinf( attenuationDistance ) ) {
			return radiance;
		} else {
			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;
			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance * radiance;
		}
	}
	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,
		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,
		const in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,
		const in vec3 attenuationColor, const in float attenuationDistance ) {
		vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
		vec3 refractedRayExit = position + transmissionRay;
		vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
		vec2 refractionCoords = ndcPos.xy / ndcPos.w;
		refractionCoords += 1.0;
		refractionCoords /= 2.0;
		vec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );
		vec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );
		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );
		return vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );
	}
#endif`,mb=`#ifdef USE_UV
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_SPECULARMAP
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`,gb=`#ifdef USE_UV
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	uniform mat3 mapTransform;
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	uniform mat3 alphaMapTransform;
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	uniform mat3 lightMapTransform;
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	uniform mat3 aoMapTransform;
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	uniform mat3 bumpMapTransform;
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	uniform mat3 normalMapTransform;
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_DISPLACEMENTMAP
	uniform mat3 displacementMapTransform;
	varying vec2 vDisplacementMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	uniform mat3 emissiveMapTransform;
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	uniform mat3 metalnessMapTransform;
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	uniform mat3 roughnessMapTransform;
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	uniform mat3 clearcoatMapTransform;
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform mat3 clearcoatNormalMapTransform;
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform mat3 clearcoatRoughnessMapTransform;
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	uniform mat3 sheenColorMapTransform;
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	uniform mat3 sheenRoughnessMapTransform;
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	uniform mat3 iridescenceMapTransform;
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform mat3 iridescenceThicknessMapTransform;
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SPECULARMAP
	uniform mat3 specularMapTransform;
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	uniform mat3 specularColorMapTransform;
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	uniform mat3 specularIntensityMapTransform;
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`,_b=`#ifdef USE_UV
	vUv = vec3( uv, 1 ).xy;
#endif
#ifdef USE_MAP
	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ALPHAMAP
	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_LIGHTMAP
	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_AOMAP
	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_BUMPMAP
	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_NORMALMAP
	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_DISPLACEMENTMAP
	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_EMISSIVEMAP
	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_METALNESSMAP
	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ROUGHNESSMAP
	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOATMAP
	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCEMAP
	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_COLORMAP
	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULARMAP
	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_COLORMAP
	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_TRANSMISSIONMAP
	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_THICKNESSMAP
	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;
#endif`,xb=`#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0
	vec4 worldPosition = vec4( transformed, 1.0 );
	#ifdef USE_INSTANCING
		worldPosition = instanceMatrix * worldPosition;
	#endif
	worldPosition = modelMatrix * worldPosition;
#endif`;const xn={alphamap_fragment:bS,alphamap_pars_fragment:TS,alphatest_fragment:wS,alphatest_pars_fragment:AS,aomap_fragment:RS,aomap_pars_fragment:CS,begin_vertex:PS,beginnormal_vertex:LS,bsdfs:DS,iridescence_fragment:US,bumpmap_pars_fragment:IS,clipping_planes_fragment:NS,clipping_planes_pars_fragment:FS,clipping_planes_pars_vertex:OS,clipping_planes_vertex:BS,color_fragment:zS,color_pars_fragment:kS,color_pars_vertex:GS,color_vertex:HS,common:VS,cube_uv_reflection_fragment:WS,defaultnormal_vertex:XS,displacementmap_pars_vertex:qS,displacementmap_vertex:YS,emissivemap_fragment:ZS,emissivemap_pars_fragment:KS,encodings_fragment:$S,encodings_pars_fragment:JS,envmap_fragment:jS,envmap_common_pars_fragment:QS,envmap_pars_fragment:eE,envmap_pars_vertex:tE,envmap_physical_pars_fragment:dE,envmap_vertex:nE,fog_vertex:iE,fog_pars_vertex:rE,fog_fragment:sE,fog_pars_fragment:aE,gradientmap_pars_fragment:oE,lightmap_fragment:lE,lightmap_pars_fragment:cE,lights_lambert_fragment:hE,lights_lambert_pars_fragment:uE,lights_pars_begin:fE,lights_toon_fragment:pE,lights_toon_pars_fragment:mE,lights_phong_fragment:gE,lights_phong_pars_fragment:_E,lights_physical_fragment:xE,lights_physical_pars_fragment:vE,lights_fragment_begin:yE,lights_fragment_maps:ME,lights_fragment_end:SE,logdepthbuf_fragment:EE,logdepthbuf_pars_fragment:bE,logdepthbuf_pars_vertex:TE,logdepthbuf_vertex:wE,map_fragment:AE,map_pars_fragment:RE,map_particle_fragment:CE,map_particle_pars_fragment:PE,metalnessmap_fragment:LE,metalnessmap_pars_fragment:DE,morphcolor_vertex:UE,morphnormal_vertex:IE,morphtarget_pars_vertex:NE,morphtarget_vertex:FE,normal_fragment_begin:OE,normal_fragment_maps:BE,normal_pars_fragment:zE,normal_pars_vertex:kE,normal_vertex:GE,normalmap_pars_fragment:HE,clearcoat_normal_fragment_begin:VE,clearcoat_normal_fragment_maps:WE,clearcoat_pars_fragment:XE,iridescence_pars_fragment:qE,output_fragment:YE,packing:ZE,premultiplied_alpha_fragment:KE,project_vertex:$E,dithering_fragment:JE,dithering_pars_fragment:jE,roughnessmap_fragment:QE,roughnessmap_pars_fragment:eb,shadowmap_pars_fragment:tb,shadowmap_pars_vertex:nb,shadowmap_vertex:ib,shadowmask_pars_fragment:rb,skinbase_vertex:sb,skinning_pars_vertex:ab,skinning_vertex:ob,skinnormal_vertex:lb,specularmap_fragment:cb,specularmap_pars_fragment:hb,tonemapping_fragment:ub,tonemapping_pars_fragment:fb,transmission_fragment:db,transmission_pars_fragment:pb,uv_pars_fragment:mb,uv_pars_vertex:gb,uv_vertex:_b,worldpos_vertex:xb,background_vert:`varying vec2 vUv;
uniform mat3 uvTransform;
void main() {
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	gl_Position = vec4( position.xy, 1.0, 1.0 );
}`,background_frag:`uniform sampler2D t2D;
uniform float backgroundIntensity;
varying vec2 vUv;
void main() {
	vec4 texColor = texture2D( t2D, vUv );
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`,backgroundCube_vert:`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,backgroundCube_frag:`#ifdef ENVMAP_TYPE_CUBE
	uniform samplerCube envMap;
#elif defined( ENVMAP_TYPE_CUBE_UV )
	uniform sampler2D envMap;
#endif
uniform float flipEnvMap;
uniform float backgroundBlurriness;
uniform float backgroundIntensity;
varying vec3 vWorldDirection;
#include <cube_uv_reflection_fragment>
void main() {
	#ifdef ENVMAP_TYPE_CUBE
		vec4 texColor = textureCube( envMap, vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );
	#elif defined( ENVMAP_TYPE_CUBE_UV )
		vec4 texColor = textureCubeUV( envMap, vWorldDirection, backgroundBlurriness );
	#else
		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`,cube_vert:`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,cube_frag:`uniform samplerCube tCube;
uniform float tFlip;
uniform float opacity;
varying vec3 vWorldDirection;
void main() {
	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );
	gl_FragColor = texColor;
	gl_FragColor.a *= opacity;
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`,depth_vert:`#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
varying vec2 vHighPrecisionZW;
void main() {
	#include <uv_vertex>
	#include <skinbase_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vHighPrecisionZW = gl_Position.zw;
}`,depth_frag:`#if DEPTH_PACKING == 3200
	uniform float opacity;
#endif
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
varying vec2 vHighPrecisionZW;
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( 1.0 );
	#if DEPTH_PACKING == 3200
		diffuseColor.a = opacity;
	#endif
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <logdepthbuf_fragment>
	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;
	#if DEPTH_PACKING == 3200
		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );
	#elif DEPTH_PACKING == 3201
		gl_FragColor = packDepthToRGBA( fragCoordZ );
	#endif
}`,distanceRGBA_vert:`#define DISTANCE
varying vec3 vWorldPosition;
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <skinbase_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	vWorldPosition = worldPosition.xyz;
}`,distanceRGBA_frag:`#define DISTANCE
uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <clipping_planes_pars_fragment>
void main () {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( 1.0 );
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist );
	gl_FragColor = packDepthToRGBA( dist );
}`,equirect_vert:`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
}`,equirect_frag:`uniform sampler2D tEquirect;
varying vec3 vWorldDirection;
#include <common>
void main() {
	vec3 direction = normalize( vWorldDirection );
	vec2 sampleUV = equirectUv( direction );
	gl_FragColor = texture2D( tEquirect, sampleUV );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`,linedashed_vert:`uniform float scale;
attribute float lineDistance;
varying float vLineDistance;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	vLineDistance = scale * lineDistance;
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,linedashed_frag:`uniform vec3 diffuse;
uniform float opacity;
uniform float dashSize;
uniform float totalSize;
varying float vLineDistance;
#include <common>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	if ( mod( vLineDistance, totalSize ) > dashSize ) {
		discard;
	}
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,meshbasic_vert:`#include <common>
#include <uv_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinbase_vertex>
		#include <skinnormal_vertex>
		#include <defaultnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>
}`,meshbasic_frag:`uniform vec3 diffuse;
uniform float opacity;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;
	#else
		reflectedLight.indirectDiffuse += vec3( 1.0 );
	#endif
	#include <aomap_fragment>
	reflectedLight.indirectDiffuse *= diffuseColor.rgb;
	vec3 outgoingLight = reflectedLight.indirectDiffuse;
	#include <envmap_fragment>
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,meshlambert_vert:`#define LAMBERT
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,meshlambert_frag:`#define LAMBERT
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_lambert_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_lambert_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,meshmatcap_vert:`#define MATCAP
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
	vViewPosition = - mvPosition.xyz;
}`,meshmatcap_frag:`#define MATCAP
uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;
varying vec3 vViewPosition;
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <fog_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;
	#ifdef USE_MATCAP
		vec4 matcapColor = texture2D( matcap, uv );
	#else
		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );
	#endif
	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,meshnormal_vert:`#define NORMAL
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	vViewPosition = - mvPosition.xyz;
#endif
}`,meshnormal_frag:`#define NORMAL
uniform float opacity;
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <packing>
#include <uv_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	gl_FragColor = vec4( packNormalToRGB( normal ), opacity );
	#ifdef OPAQUE
		gl_FragColor.a = 1.0;
	#endif
}`,meshphong_vert:`#define PHONG
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,meshphong_frag:`#define PHONG
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,meshphysical_vert:`#define STANDARD
varying vec3 vViewPosition;
#ifdef USE_TRANSMISSION
	varying vec3 vWorldPosition;
#endif
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
#ifdef USE_TRANSMISSION
	vWorldPosition = worldPosition.xyz;
#endif
}`,meshphysical_frag:`#define STANDARD
#ifdef PHYSICAL
	#define IOR
	#define USE_SPECULAR
#endif
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;
#ifdef IOR
	uniform float ior;
#endif
#ifdef USE_SPECULAR
	uniform float specularIntensity;
	uniform vec3 specularColor;
	#ifdef USE_SPECULAR_COLORMAP
		uniform sampler2D specularColorMap;
	#endif
	#ifdef USE_SPECULAR_INTENSITYMAP
		uniform sampler2D specularIntensityMap;
	#endif
#endif
#ifdef USE_CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif
#ifdef USE_IRIDESCENCE
	uniform float iridescence;
	uniform float iridescenceIOR;
	uniform float iridescenceThicknessMinimum;
	uniform float iridescenceThicknessMaximum;
#endif
#ifdef USE_SHEEN
	uniform vec3 sheenColor;
	uniform float sheenRoughness;
	#ifdef USE_SHEEN_COLORMAP
		uniform sampler2D sheenColorMap;
	#endif
	#ifdef USE_SHEEN_ROUGHNESSMAP
		uniform sampler2D sheenRoughnessMap;
	#endif
#endif
varying vec3 vViewPosition;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <iridescence_fragment>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_physical_pars_fragment>
#include <transmission_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <iridescence_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;
	#include <transmission_fragment>
	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;
	#ifdef USE_SHEEN
		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );
		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecular;
	#endif
	#ifdef USE_CLEARCOAT
		float dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );
		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );
		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;
	#endif
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,meshtoon_vert:`#define TOON
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,meshtoon_frag:`#define TOON
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,points_vert:`uniform float size;
uniform float scale;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
#ifdef USE_POINTS_UV
	varying vec2 vUv;
	uniform mat3 uvTransform;
#endif
void main() {
	#ifdef USE_POINTS_UV
		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	#endif
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	gl_PointSize = size;
	#ifdef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );
	#endif
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>
}`,points_frag:`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <alphatest_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,shadow_vert:`#include <common>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <shadowmap_pars_vertex>
void main() {
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,shadow_frag:`uniform vec3 color;
uniform float opacity;
#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <logdepthbuf_pars_fragment>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
void main() {
	#include <logdepthbuf_fragment>
	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
}`,sprite_vert:`uniform float rotation;
uniform vec2 center;
#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );
	vec2 scale;
	scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );
	scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );
	#ifndef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) scale *= - mvPosition.z;
	#endif
	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;
	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
	mvPosition.xy += rotatedPosition;
	gl_Position = projectionMatrix * mvPosition;
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,sprite_frag:`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
}`},gt={common:{diffuse:{value:new At(16777215)},opacity:{value:1},map:{value:null},mapTransform:{value:new wn},alphaMap:{value:null},alphaMapTransform:{value:new wn},alphaTest:{value:0}},specularmap:{specularMap:{value:null},specularMapTransform:{value:new wn}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1},aoMapTransform:{value:new wn}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1},lightMapTransform:{value:new wn}},bumpmap:{bumpMap:{value:null},bumpMapTransform:{value:new wn},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalMapTransform:{value:new wn},normalScale:{value:new Je(1,1)}},displacementmap:{displacementMap:{value:null},displacementMapTransform:{value:new wn},displacementScale:{value:1},displacementBias:{value:0}},emissivemap:{emissiveMap:{value:null},emissiveMapTransform:{value:new wn}},metalnessmap:{metalnessMap:{value:null},metalnessMapTransform:{value:new wn}},roughnessmap:{roughnessMap:{value:null},roughnessMapTransform:{value:new wn}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new At(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotLightMap:{value:[]},spotShadowMap:{value:[]},spotLightMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new At(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaTest:{value:0},uvTransform:{value:new wn}},sprite:{diffuse:{value:new At(16777215)},opacity:{value:1},center:{value:new Je(.5,.5)},rotation:{value:0},map:{value:null},mapTransform:{value:new wn},alphaMap:{value:null},alphaTest:{value:0}}},Qr={basic:{uniforms:Ji([gt.common,gt.specularmap,gt.envmap,gt.aomap,gt.lightmap,gt.fog]),vertexShader:xn.meshbasic_vert,fragmentShader:xn.meshbasic_frag},lambert:{uniforms:Ji([gt.common,gt.specularmap,gt.envmap,gt.aomap,gt.lightmap,gt.emissivemap,gt.bumpmap,gt.normalmap,gt.displacementmap,gt.fog,gt.lights,{emissive:{value:new At(0)}}]),vertexShader:xn.meshlambert_vert,fragmentShader:xn.meshlambert_frag},phong:{uniforms:Ji([gt.common,gt.specularmap,gt.envmap,gt.aomap,gt.lightmap,gt.emissivemap,gt.bumpmap,gt.normalmap,gt.displacementmap,gt.fog,gt.lights,{emissive:{value:new At(0)},specular:{value:new At(1118481)},shininess:{value:30}}]),vertexShader:xn.meshphong_vert,fragmentShader:xn.meshphong_frag},standard:{uniforms:Ji([gt.common,gt.envmap,gt.aomap,gt.lightmap,gt.emissivemap,gt.bumpmap,gt.normalmap,gt.displacementmap,gt.roughnessmap,gt.metalnessmap,gt.fog,gt.lights,{emissive:{value:new At(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:xn.meshphysical_vert,fragmentShader:xn.meshphysical_frag},toon:{uniforms:Ji([gt.common,gt.aomap,gt.lightmap,gt.emissivemap,gt.bumpmap,gt.normalmap,gt.displacementmap,gt.gradientmap,gt.fog,gt.lights,{emissive:{value:new At(0)}}]),vertexShader:xn.meshtoon_vert,fragmentShader:xn.meshtoon_frag},matcap:{uniforms:Ji([gt.common,gt.bumpmap,gt.normalmap,gt.displacementmap,gt.fog,{matcap:{value:null}}]),vertexShader:xn.meshmatcap_vert,fragmentShader:xn.meshmatcap_frag},points:{uniforms:Ji([gt.points,gt.fog]),vertexShader:xn.points_vert,fragmentShader:xn.points_frag},dashed:{uniforms:Ji([gt.common,gt.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:xn.linedashed_vert,fragmentShader:xn.linedashed_frag},depth:{uniforms:Ji([gt.common,gt.displacementmap]),vertexShader:xn.depth_vert,fragmentShader:xn.depth_frag},normal:{uniforms:Ji([gt.common,gt.bumpmap,gt.normalmap,gt.displacementmap,{opacity:{value:1}}]),vertexShader:xn.meshnormal_vert,fragmentShader:xn.meshnormal_frag},sprite:{uniforms:Ji([gt.sprite,gt.fog]),vertexShader:xn.sprite_vert,fragmentShader:xn.sprite_frag},background:{uniforms:{uvTransform:{value:new wn},t2D:{value:null},backgroundIntensity:{value:1}},vertexShader:xn.background_vert,fragmentShader:xn.background_frag},backgroundCube:{uniforms:{envMap:{value:null},flipEnvMap:{value:-1},backgroundBlurriness:{value:0},backgroundIntensity:{value:1}},vertexShader:xn.backgroundCube_vert,fragmentShader:xn.backgroundCube_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:xn.cube_vert,fragmentShader:xn.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:xn.equirect_vert,fragmentShader:xn.equirect_frag},distanceRGBA:{uniforms:Ji([gt.common,gt.displacementmap,{referencePosition:{value:new j},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:xn.distanceRGBA_vert,fragmentShader:xn.distanceRGBA_frag},shadow:{uniforms:Ji([gt.lights,gt.fog,{color:{value:new At(0)},opacity:{value:1}}]),vertexShader:xn.shadow_vert,fragmentShader:xn.shadow_frag}};Qr.physical={uniforms:Ji([Qr.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatMapTransform:{value:new wn},clearcoatNormalMap:{value:null},clearcoatNormalMapTransform:{value:new wn},clearcoatNormalScale:{value:new Je(1,1)},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatRoughnessMapTransform:{value:new wn},iridescence:{value:0},iridescenceMap:{value:null},iridescenceMapTransform:{value:new wn},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},iridescenceThicknessMapTransform:{value:new wn},sheen:{value:0},sheenColor:{value:new At(0)},sheenColorMap:{value:null},sheenColorMapTransform:{value:new wn},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},sheenRoughnessMapTransform:{value:new wn},transmission:{value:0},transmissionMap:{value:null},transmissionMapTransform:{value:new wn},transmissionSamplerSize:{value:new Je},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},thicknessMapTransform:{value:new wn},attenuationDistance:{value:0},attenuationColor:{value:new At(0)},specularColor:{value:new At(1,1,1)},specularColorMap:{value:null},specularColorMapTransform:{value:new wn},specularIntensity:{value:1},specularIntensityMap:{value:null},specularIntensityMapTransform:{value:new wn}}]),vertexShader:xn.meshphysical_vert,fragmentShader:xn.meshphysical_frag};const lu={r:0,b:0,g:0};function vb(c,e,n,r,a,l,u){const d=new At(0);let g=l===!0?0:1,_,y,S=null,E=0,w=null;function C(U,A){let z=!1,F=A.isScene===!0?A.background:null;switch(F&&F.isTexture&&(F=(A.backgroundBlurriness>0?n:e).get(F)),F===null?I(d,g):F&&F.isColor&&(I(F,1),z=!0),c.xr.getEnvironmentBlendMode()){case"opaque":z=!0;break;case"additive":r.buffers.color.setClear(0,0,0,1,u),z=!0;break;case"alpha-blend":r.buffers.color.setClear(0,0,0,0,u),z=!0;break}(c.autoClear||z)&&c.clear(c.autoClearColor,c.autoClearDepth,c.autoClearStencil),F&&(F.isCubeTexture||F.mapping===X)?(y===void 0&&(y=new Ni(new la(1,1,1),new ps({name:"BackgroundCubeMaterial",uniforms:jo(Qr.backgroundCube.uniforms),vertexShader:Qr.backgroundCube.vertexShader,fragmentShader:Qr.backgroundCube.fragmentShader,side:T,depthTest:!1,depthWrite:!1,fog:!1})),y.geometry.deleteAttribute("normal"),y.geometry.deleteAttribute("uv"),y.onBeforeRender=function(K,se,le){this.matrixWorld.copyPosition(le.matrixWorld)},Object.defineProperty(y.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),a.update(y)),y.material.uniforms.envMap.value=F,y.material.uniforms.flipEnvMap.value=F.isCubeTexture&&F.isRenderTargetTexture===!1?-1:1,y.material.uniforms.backgroundBlurriness.value=A.backgroundBlurriness,y.material.uniforms.backgroundIntensity.value=A.backgroundIntensity,y.material.toneMapped=F.colorSpace!==gn,(S!==F||E!==F.version||w!==c.toneMapping)&&(y.material.needsUpdate=!0,S=F,E=F.version,w=c.toneMapping),y.layers.enableAll(),U.unshift(y,y.geometry,y.material,0,0,null)):F&&F.isTexture&&(_===void 0&&(_=new Ni(new tl(2,2),new ps({name:"BackgroundMaterial",uniforms:jo(Qr.background.uniforms),vertexShader:Qr.background.vertexShader,fragmentShader:Qr.background.fragmentShader,side:b,depthTest:!1,depthWrite:!1,fog:!1})),_.geometry.deleteAttribute("normal"),Object.defineProperty(_.material,"map",{get:function(){return this.uniforms.t2D.value}}),a.update(_)),_.material.uniforms.t2D.value=F,_.material.uniforms.backgroundIntensity.value=A.backgroundIntensity,_.material.toneMapped=F.colorSpace!==gn,F.matrixAutoUpdate===!0&&F.updateMatrix(),_.material.uniforms.uvTransform.value.copy(F.matrix),(S!==F||E!==F.version||w!==c.toneMapping)&&(_.material.needsUpdate=!0,S=F,E=F.version,w=c.toneMapping),_.layers.enableAll(),U.unshift(_,_.geometry,_.material,0,0,null))}function I(U,A){U.getRGB(lu,vg(c)),r.buffers.color.setClear(lu.r,lu.g,lu.b,A,u)}return{getClearColor:function(){return d},setClearColor:function(U,A=1){d.set(U),g=A,I(d,g)},getClearAlpha:function(){return g},setClearAlpha:function(U){g=U,I(d,g)},render:C}}function yb(c,e,n,r){const a=c.getParameter(c.MAX_VERTEX_ATTRIBS),l=r.isWebGL2?null:e.get("OES_vertex_array_object"),u=r.isWebGL2||l!==null,d={},g=U(null);let _=g,y=!1;function S(Se,De,$e,Ze,Ke){let ct=!1;if(u){const Qe=I(Ze,$e,De);_!==Qe&&(_=Qe,w(_.object)),ct=A(Se,Ze,$e,Ke),ct&&z(Se,Ze,$e,Ke)}else{const Qe=De.wireframe===!0;(_.geometry!==Ze.id||_.program!==$e.id||_.wireframe!==Qe)&&(_.geometry=Ze.id,_.program=$e.id,_.wireframe=Qe,ct=!0)}Ke!==null&&n.update(Ke,c.ELEMENT_ARRAY_BUFFER),(ct||y)&&(y=!1,le(Se,De,$e,Ze),Ke!==null&&c.bindBuffer(c.ELEMENT_ARRAY_BUFFER,n.get(Ke).buffer))}function E(){return r.isWebGL2?c.createVertexArray():l.createVertexArrayOES()}function w(Se){return r.isWebGL2?c.bindVertexArray(Se):l.bindVertexArrayOES(Se)}function C(Se){return r.isWebGL2?c.deleteVertexArray(Se):l.deleteVertexArrayOES(Se)}function I(Se,De,$e){const Ze=$e.wireframe===!0;let Ke=d[Se.id];Ke===void 0&&(Ke={},d[Se.id]=Ke);let ct=Ke[De.id];ct===void 0&&(ct={},Ke[De.id]=ct);let Qe=ct[Ze];return Qe===void 0&&(Qe=U(E()),ct[Ze]=Qe),Qe}function U(Se){const De=[],$e=[],Ze=[];for(let Ke=0;Ke<a;Ke++)De[Ke]=0,$e[Ke]=0,Ze[Ke]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:De,enabledAttributes:$e,attributeDivisors:Ze,object:Se,attributes:{},index:null}}function A(Se,De,$e,Ze){const Ke=_.attributes,ct=De.attributes;let Qe=0;const Ot=$e.getAttributes();for(const pt in Ot)if(Ot[pt].location>=0){const je=Ke[pt];let vt=ct[pt];if(vt===void 0&&(pt==="instanceMatrix"&&Se.instanceMatrix&&(vt=Se.instanceMatrix),pt==="instanceColor"&&Se.instanceColor&&(vt=Se.instanceColor)),je===void 0||je.attribute!==vt||vt&&je.data!==vt.data)return!0;Qe++}return _.attributesNum!==Qe||_.index!==Ze}function z(Se,De,$e,Ze){const Ke={},ct=De.attributes;let Qe=0;const Ot=$e.getAttributes();for(const pt in Ot)if(Ot[pt].location>=0){let je=ct[pt];je===void 0&&(pt==="instanceMatrix"&&Se.instanceMatrix&&(je=Se.instanceMatrix),pt==="instanceColor"&&Se.instanceColor&&(je=Se.instanceColor));const vt={};vt.attribute=je,je&&je.data&&(vt.data=je.data),Ke[pt]=vt,Qe++}_.attributes=Ke,_.attributesNum=Qe,_.index=Ze}function F(){const Se=_.newAttributes;for(let De=0,$e=Se.length;De<$e;De++)Se[De]=0}function k(Se){Y(Se,0)}function Y(Se,De){const $e=_.newAttributes,Ze=_.enabledAttributes,Ke=_.attributeDivisors;$e[Se]=1,Ze[Se]===0&&(c.enableVertexAttribArray(Se),Ze[Se]=1),Ke[Se]!==De&&((r.isWebGL2?c:e.get("ANGLE_instanced_arrays"))[r.isWebGL2?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](Se,De),Ke[Se]=De)}function K(){const Se=_.newAttributes,De=_.enabledAttributes;for(let $e=0,Ze=De.length;$e<Ze;$e++)De[$e]!==Se[$e]&&(c.disableVertexAttribArray($e),De[$e]=0)}function se(Se,De,$e,Ze,Ke,ct){r.isWebGL2===!0&&($e===c.INT||$e===c.UNSIGNED_INT)?c.vertexAttribIPointer(Se,De,$e,Ke,ct):c.vertexAttribPointer(Se,De,$e,Ze,Ke,ct)}function le(Se,De,$e,Ze){if(r.isWebGL2===!1&&(Se.isInstancedMesh||Ze.isInstancedBufferGeometry)&&e.get("ANGLE_instanced_arrays")===null)return;F();const Ke=Ze.attributes,ct=$e.getAttributes(),Qe=De.defaultAttributeValues;for(const Ot in ct){const pt=ct[Ot];if(pt.location>=0){let Fe=Ke[Ot];if(Fe===void 0&&(Ot==="instanceMatrix"&&Se.instanceMatrix&&(Fe=Se.instanceMatrix),Ot==="instanceColor"&&Se.instanceColor&&(Fe=Se.instanceColor)),Fe!==void 0){const je=Fe.normalized,vt=Fe.itemSize,bt=n.get(Fe);if(bt===void 0)continue;const he=bt.buffer,rn=bt.type,an=bt.bytesPerElement;if(Fe.isInterleavedBufferAttribute){const dt=Fe.data,kt=dt.stride,et=Fe.offset;if(dt.isInstancedInterleavedBuffer){for(let Ve=0;Ve<pt.locationSize;Ve++)Y(pt.location+Ve,dt.meshPerAttribute);Se.isInstancedMesh!==!0&&Ze._maxInstanceCount===void 0&&(Ze._maxInstanceCount=dt.meshPerAttribute*dt.count)}else for(let Ve=0;Ve<pt.locationSize;Ve++)k(pt.location+Ve);c.bindBuffer(c.ARRAY_BUFFER,he);for(let Ve=0;Ve<pt.locationSize;Ve++)se(pt.location+Ve,vt/pt.locationSize,rn,je,kt*an,(et+vt/pt.locationSize*Ve)*an)}else{if(Fe.isInstancedBufferAttribute){for(let dt=0;dt<pt.locationSize;dt++)Y(pt.location+dt,Fe.meshPerAttribute);Se.isInstancedMesh!==!0&&Ze._maxInstanceCount===void 0&&(Ze._maxInstanceCount=Fe.meshPerAttribute*Fe.count)}else for(let dt=0;dt<pt.locationSize;dt++)k(pt.location+dt);c.bindBuffer(c.ARRAY_BUFFER,he);for(let dt=0;dt<pt.locationSize;dt++)se(pt.location+dt,vt/pt.locationSize,rn,je,vt*an,vt/pt.locationSize*dt*an)}}else if(Qe!==void 0){const je=Qe[Ot];if(je!==void 0)switch(je.length){case 2:c.vertexAttrib2fv(pt.location,je);break;case 3:c.vertexAttrib3fv(pt.location,je);break;case 4:c.vertexAttrib4fv(pt.location,je);break;default:c.vertexAttrib1fv(pt.location,je)}}}}K()}function G(){Ue();for(const Se in d){const De=d[Se];for(const $e in De){const Ze=De[$e];for(const Ke in Ze)C(Ze[Ke].object),delete Ze[Ke];delete De[$e]}delete d[Se]}}function ee(Se){if(d[Se.id]===void 0)return;const De=d[Se.id];for(const $e in De){const Ze=De[$e];for(const Ke in Ze)C(Ze[Ke].object),delete Ze[Ke];delete De[$e]}delete d[Se.id]}function Pe(Se){for(const De in d){const $e=d[De];if($e[Se.id]===void 0)continue;const Ze=$e[Se.id];for(const Ke in Ze)C(Ze[Ke].object),delete Ze[Ke];delete $e[Se.id]}}function Ue(){ge(),y=!0,_!==g&&(_=g,w(_.object))}function ge(){g.geometry=null,g.program=null,g.wireframe=!1}return{setup:S,reset:Ue,resetDefaultState:ge,dispose:G,releaseStatesOfGeometry:ee,releaseStatesOfProgram:Pe,initAttributes:F,enableAttribute:k,disableUnusedAttributes:K}}function Mb(c,e,n,r){const a=r.isWebGL2;let l;function u(_){l=_}function d(_,y){c.drawArrays(l,_,y),n.update(y,l,1)}function g(_,y,S){if(S===0)return;let E,w;if(a)E=c,w="drawArraysInstanced";else if(E=e.get("ANGLE_instanced_arrays"),w="drawArraysInstancedANGLE",E===null){console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}E[w](l,_,y,S),n.update(y,l,S)}this.setMode=u,this.render=d,this.renderInstances=g}function Sb(c,e,n){let r;function a(){if(r!==void 0)return r;if(e.has("EXT_texture_filter_anisotropic")===!0){const se=e.get("EXT_texture_filter_anisotropic");r=c.getParameter(se.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else r=0;return r}function l(se){if(se==="highp"){if(c.getShaderPrecisionFormat(c.VERTEX_SHADER,c.HIGH_FLOAT).precision>0&&c.getShaderPrecisionFormat(c.FRAGMENT_SHADER,c.HIGH_FLOAT).precision>0)return"highp";se="mediump"}return se==="mediump"&&c.getShaderPrecisionFormat(c.VERTEX_SHADER,c.MEDIUM_FLOAT).precision>0&&c.getShaderPrecisionFormat(c.FRAGMENT_SHADER,c.MEDIUM_FLOAT).precision>0?"mediump":"lowp"}const u=typeof WebGL2RenderingContext<"u"&&c.constructor.name==="WebGL2RenderingContext";let d=n.precision!==void 0?n.precision:"highp";const g=l(d);g!==d&&(console.warn("THREE.WebGLRenderer:",d,"not supported, using",g,"instead."),d=g);const _=u||e.has("WEBGL_draw_buffers"),y=n.logarithmicDepthBuffer===!0,S=c.getParameter(c.MAX_TEXTURE_IMAGE_UNITS),E=c.getParameter(c.MAX_VERTEX_TEXTURE_IMAGE_UNITS),w=c.getParameter(c.MAX_TEXTURE_SIZE),C=c.getParameter(c.MAX_CUBE_MAP_TEXTURE_SIZE),I=c.getParameter(c.MAX_VERTEX_ATTRIBS),U=c.getParameter(c.MAX_VERTEX_UNIFORM_VECTORS),A=c.getParameter(c.MAX_VARYING_VECTORS),z=c.getParameter(c.MAX_FRAGMENT_UNIFORM_VECTORS),F=E>0,k=u||e.has("OES_texture_float"),Y=F&&k,K=u?c.getParameter(c.MAX_SAMPLES):0;return{isWebGL2:u,drawBuffers:_,getMaxAnisotropy:a,getMaxPrecision:l,precision:d,logarithmicDepthBuffer:y,maxTextures:S,maxVertexTextures:E,maxTextureSize:w,maxCubemapSize:C,maxAttributes:I,maxVertexUniforms:U,maxVaryings:A,maxFragmentUniforms:z,vertexTextures:F,floatFragmentTextures:k,floatVertexTextures:Y,maxSamples:K}}function Eb(c){const e=this;let n=null,r=0,a=!1,l=!1;const u=new ca,d=new wn,g={value:null,needsUpdate:!1};this.uniform=g,this.numPlanes=0,this.numIntersection=0,this.init=function(S,E){const w=S.length!==0||E||r!==0||a;return a=E,r=S.length,w},this.beginShadows=function(){l=!0,y(null)},this.endShadows=function(){l=!1},this.setGlobalState=function(S,E){n=y(S,E,0)},this.setState=function(S,E,w){const C=S.clippingPlanes,I=S.clipIntersection,U=S.clipShadows,A=c.get(S);if(!a||C===null||C.length===0||l&&!U)l?y(null):_();else{const z=l?0:r,F=z*4;let k=A.clippingState||null;g.value=k,k=y(C,E,F,w);for(let Y=0;Y!==F;++Y)k[Y]=n[Y];A.clippingState=k,this.numIntersection=I?this.numPlanes:0,this.numPlanes+=z}};function _(){g.value!==n&&(g.value=n,g.needsUpdate=r>0),e.numPlanes=r,e.numIntersection=0}function y(S,E,w,C){const I=S!==null?S.length:0;let U=null;if(I!==0){if(U=g.value,C!==!0||U===null){const A=w+I*4,z=E.matrixWorldInverse;d.getNormalMatrix(z),(U===null||U.length<A)&&(U=new Float32Array(A));for(let F=0,k=w;F!==I;++F,k+=4)u.copy(S[F]).applyMatrix4(z,d),u.normal.toArray(U,k),U[k+3]=u.constant}g.value=U,g.needsUpdate=!0}return e.numPlanes=I,e.numIntersection=0,U}}function bb(c){let e=new WeakMap;function n(u,d){return d===li?u.mapping=dn:d===ne&&(u.mapping=Pn),u}function r(u){if(u&&u.isTexture&&u.isRenderTargetTexture===!1){const d=u.mapping;if(d===li||d===ne)if(e.has(u)){const g=e.get(u).texture;return n(g,u.mapping)}else{const g=u.image;if(g&&g.height>0){const _=new Sg(g.height/2);return _.fromEquirectangularTexture(c,u),e.set(u,_),u.addEventListener("dispose",a),n(_.texture,u.mapping)}else return null}}return u}function a(u){const d=u.target;d.removeEventListener("dispose",a);const g=e.get(d);g!==void 0&&(e.delete(d),g.dispose())}function l(){e=new WeakMap}return{get:r,dispose:l}}class cu extends su{constructor(e=-1,n=1,r=1,a=-1,l=.1,u=2e3){super(),this.isOrthographicCamera=!0,this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=e,this.right=n,this.top=r,this.bottom=a,this.near=l,this.far=u,this.updateProjectionMatrix()}copy(e,n){return super.copy(e,n),this.left=e.left,this.right=e.right,this.top=e.top,this.bottom=e.bottom,this.near=e.near,this.far=e.far,this.zoom=e.zoom,this.view=e.view===null?null:Object.assign({},e.view),this}setViewOffset(e,n,r,a,l,u){this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=n,this.view.offsetX=r,this.view.offsetY=a,this.view.width=l,this.view.height=u,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const e=(this.right-this.left)/(2*this.zoom),n=(this.top-this.bottom)/(2*this.zoom),r=(this.right+this.left)/2,a=(this.top+this.bottom)/2;let l=r-e,u=r+e,d=a+n,g=a-n;if(this.view!==null&&this.view.enabled){const _=(this.right-this.left)/this.view.fullWidth/this.zoom,y=(this.top-this.bottom)/this.view.fullHeight/this.zoom;l+=_*this.view.offsetX,u=l+_*this.view.width,d-=y*this.view.offsetY,g=d-y*this.view.height}this.projectionMatrix.makeOrthographic(l,u,d,g,this.near,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){const n=super.toJSON(e);return n.object.zoom=this.zoom,n.object.left=this.left,n.object.right=this.right,n.object.top=this.top,n.object.bottom=this.bottom,n.object.near=this.near,n.object.far=this.far,this.view!==null&&(n.object.view=Object.assign({},this.view)),n}}const nl=4,bg=[.125,.215,.35,.446,.526,.582],Va=20,md=new cu,Tg=new At;let gd=null;const Wa=(1+Math.sqrt(5))/2,il=1/Wa,wg=[new j(1,1,1),new j(-1,1,1),new j(1,1,-1),new j(-1,1,-1),new j(0,Wa,il),new j(0,Wa,-il),new j(il,0,Wa),new j(-il,0,Wa),new j(Wa,il,0),new j(-Wa,il,0)];class _d{constructor(e){this._renderer=e,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._compileMaterial(this._blurMaterial)}fromScene(e,n=0,r=.1,a=100){gd=this._renderer.getRenderTarget(),this._setSize(256);const l=this._allocateTargets();return l.depthBuffer=!0,this._sceneToCubeUV(e,r,a,l),n>0&&this._blur(l,0,0,n),this._applyPMREM(l),this._cleanup(l),l}fromEquirectangular(e,n=null){return this._fromTexture(e,n)}fromCubemap(e,n=null){return this._fromTexture(e,n)}compileCubemapShader(){this._cubemapMaterial===null&&(this._cubemapMaterial=Cg(),this._compileMaterial(this._cubemapMaterial))}compileEquirectangularShader(){this._equirectMaterial===null&&(this._equirectMaterial=Rg(),this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),this._cubemapMaterial!==null&&this._cubemapMaterial.dispose(),this._equirectMaterial!==null&&this._equirectMaterial.dispose()}_setSize(e){this._lodMax=Math.floor(Math.log2(e)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){this._blurMaterial!==null&&this._blurMaterial.dispose(),this._pingPongRenderTarget!==null&&this._pingPongRenderTarget.dispose();for(let e=0;e<this._lodPlanes.length;e++)this._lodPlanes[e].dispose()}_cleanup(e){this._renderer.setRenderTarget(gd),e.scissorTest=!1,hu(e,0,0,e.width,e.height)}_fromTexture(e,n){e.mapping===dn||e.mapping===Pn?this._setSize(e.image.length===0?16:e.image[0].width||e.image[0].image.width):this._setSize(e.image.width/4),gd=this._renderer.getRenderTarget();const r=n||this._allocateTargets();return this._textureToCubeUV(e,r),this._applyPMREM(r),this._cleanup(r),r}_allocateTargets(){const e=3*Math.max(this._cubeSize,112),n=4*this._cubeSize,r={magFilter:ft,minFilter:ft,generateMipmaps:!1,type:Un,format:Jn,colorSpace:Zr,depthBuffer:!1},a=Ag(e,n,r);if(this._pingPongRenderTarget===null||this._pingPongRenderTarget.width!==e||this._pingPongRenderTarget.height!==n){this._pingPongRenderTarget!==null&&this._dispose(),this._pingPongRenderTarget=Ag(e,n,r);const{_lodMax:l}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=Tb(l)),this._blurMaterial=wb(l,e,n)}return a}_compileMaterial(e){const n=new Ni(this._lodPlanes[0],e);this._renderer.compile(n,md)}_sceneToCubeUV(e,n,r,a){const d=new Fi(90,1,n,r),g=[1,-1,1,1,1,1],_=[1,1,1,-1,-1,-1],y=this._renderer,S=y.autoClear,E=y.toneMapping;y.getClearColor(Tg),y.toneMapping=hn,y.autoClear=!1;const w=new oa({name:"PMREM.Background",side:T,depthWrite:!1,depthTest:!1}),C=new Ni(new la,w);let I=!1;const U=e.background;U?U.isColor&&(w.color.copy(U),e.background=null,I=!0):(w.color.copy(Tg),I=!0);for(let A=0;A<6;A++){const z=A%3;z===0?(d.up.set(0,g[A],0),d.lookAt(_[A],0,0)):z===1?(d.up.set(0,0,g[A]),d.lookAt(0,_[A],0)):(d.up.set(0,g[A],0),d.lookAt(0,0,_[A]));const F=this._cubeSize;hu(a,z*F,A>2?F:0,F,F),y.setRenderTarget(a),I&&y.render(C,d),y.render(e,d)}C.geometry.dispose(),C.material.dispose(),y.toneMapping=E,y.autoClear=S,e.background=U}_textureToCubeUV(e,n){const r=this._renderer,a=e.mapping===dn||e.mapping===Pn;a?(this._cubemapMaterial===null&&(this._cubemapMaterial=Cg()),this._cubemapMaterial.uniforms.flipEnvMap.value=e.isRenderTargetTexture===!1?-1:1):this._equirectMaterial===null&&(this._equirectMaterial=Rg());const l=a?this._cubemapMaterial:this._equirectMaterial,u=new Ni(this._lodPlanes[0],l),d=l.uniforms;d.envMap.value=e;const g=this._cubeSize;hu(n,0,0,3*g,2*g),r.setRenderTarget(n),r.render(u,md)}_applyPMREM(e){const n=this._renderer,r=n.autoClear;n.autoClear=!1;for(let a=1;a<this._lodPlanes.length;a++){const l=Math.sqrt(this._sigmas[a]*this._sigmas[a]-this._sigmas[a-1]*this._sigmas[a-1]),u=wg[(a-1)%wg.length];this._blur(e,a-1,a,l,u)}n.autoClear=r}_blur(e,n,r,a,l){const u=this._pingPongRenderTarget;this._halfBlur(e,u,n,r,a,"latitudinal",l),this._halfBlur(u,e,r,r,a,"longitudinal",l)}_halfBlur(e,n,r,a,l,u,d){const g=this._renderer,_=this._blurMaterial;u!=="latitudinal"&&u!=="longitudinal"&&console.error("blur direction must be either latitudinal or longitudinal!");const y=3,S=new Ni(this._lodPlanes[a],_),E=_.uniforms,w=this._sizeLods[r]-1,C=isFinite(l)?Math.PI/(2*w):2*Math.PI/(2*Va-1),I=l/C,U=isFinite(l)?1+Math.floor(y*I):Va;U>Va&&console.warn(`sigmaRadians, ${l}, is too large and will clip, as it requested ${U} samples when the maximum is set to ${Va}`);const A=[];let z=0;for(let se=0;se<Va;++se){const le=se/I,G=Math.exp(-le*le/2);A.push(G),se===0?z+=G:se<U&&(z+=2*G)}for(let se=0;se<A.length;se++)A[se]=A[se]/z;E.envMap.value=e.texture,E.samples.value=U,E.weights.value=A,E.latitudinal.value=u==="latitudinal",d&&(E.poleAxis.value=d);const{_lodMax:F}=this;E.dTheta.value=C,E.mipInt.value=F-r;const k=this._sizeLods[a],Y=3*k*(a>F-nl?a-F+nl:0),K=4*(this._cubeSize-k);hu(n,Y,K,3*k,2*k),g.setRenderTarget(n),g.render(S,md)}}function Tb(c){const e=[],n=[],r=[];let a=c;const l=c-nl+1+bg.length;for(let u=0;u<l;u++){const d=Math.pow(2,a);n.push(d);let g=1/d;u>c-nl?g=bg[u-c+nl-1]:u===0&&(g=0),r.push(g);const _=1/(d-2),y=-_,S=1+_,E=[y,y,S,y,S,S,y,y,S,S,y,S],w=6,C=6,I=3,U=2,A=1,z=new Float32Array(I*C*w),F=new Float32Array(U*C*w),k=new Float32Array(A*C*w);for(let K=0;K<w;K++){const se=K%3*2/3-1,le=K>2?0:-1,G=[se,le,0,se+2/3,le,0,se+2/3,le+1,0,se,le,0,se+2/3,le+1,0,se,le+1,0];z.set(G,I*C*K),F.set(E,U*C*K);const ee=[K,K,K,K,K,K];k.set(ee,A*C*K)}const Y=new Mn;Y.setAttribute("position",new Xn(z,I)),Y.setAttribute("uv",new Xn(F,U)),Y.setAttribute("faceIndex",new Xn(k,A)),e.push(Y),a>nl&&a--}return{lodPlanes:e,sizeLods:n,sigmas:r}}function Ag(c,e,n){const r=new Kr(c,e,n);return r.texture.mapping=X,r.texture.name="PMREM.cubeUv",r.scissorTest=!0,r}function hu(c,e,n,r,a){c.viewport.set(e,n,r,a),c.scissor.set(e,n,r,a)}function wb(c,e,n){const r=new Float32Array(Va),a=new j(0,1,0);return new ps({name:"SphericalGaussianBlur",defines:{n:Va,CUBEUV_TEXEL_WIDTH:1/e,CUBEUV_TEXEL_HEIGHT:1/n,CUBEUV_MAX_MIP:`${c}.0`},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:r},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:a}},vertexShader:xd(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,blending:L,depthTest:!1,depthWrite:!1})}function Rg(){return new ps({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null}},vertexShader:xd(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`,blending:L,depthTest:!1,depthWrite:!1})}function Cg(){return new ps({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:xd(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`,blending:L,depthTest:!1,depthWrite:!1})}function xd(){return`

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`}function Ab(c){let e=new WeakMap,n=null;function r(d){if(d&&d.isTexture){const g=d.mapping,_=g===li||g===ne,y=g===dn||g===Pn;if(_||y)if(d.isRenderTargetTexture&&d.needsPMREMUpdate===!0){d.needsPMREMUpdate=!1;let S=e.get(d);return n===null&&(n=new _d(c)),S=_?n.fromEquirectangular(d,S):n.fromCubemap(d,S),e.set(d,S),S.texture}else{if(e.has(d))return e.get(d).texture;{const S=d.image;if(_&&S&&S.height>0||y&&S&&a(S)){n===null&&(n=new _d(c));const E=_?n.fromEquirectangular(d):n.fromCubemap(d);return e.set(d,E),d.addEventListener("dispose",l),E.texture}else return null}}}return d}function a(d){let g=0;const _=6;for(let y=0;y<_;y++)d[y]!==void 0&&g++;return g===_}function l(d){const g=d.target;g.removeEventListener("dispose",l);const _=e.get(g);_!==void 0&&(e.delete(g),_.dispose())}function u(){e=new WeakMap,n!==null&&(n.dispose(),n=null)}return{get:r,dispose:u}}function Rb(c){const e={};function n(r){if(e[r]!==void 0)return e[r];let a;switch(r){case"WEBGL_depth_texture":a=c.getExtension("WEBGL_depth_texture")||c.getExtension("MOZ_WEBGL_depth_texture")||c.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":a=c.getExtension("EXT_texture_filter_anisotropic")||c.getExtension("MOZ_EXT_texture_filter_anisotropic")||c.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":a=c.getExtension("WEBGL_compressed_texture_s3tc")||c.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||c.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":a=c.getExtension("WEBGL_compressed_texture_pvrtc")||c.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:a=c.getExtension(r)}return e[r]=a,a}return{has:function(r){return n(r)!==null},init:function(r){r.isWebGL2?n("EXT_color_buffer_float"):(n("WEBGL_depth_texture"),n("OES_texture_float"),n("OES_texture_half_float"),n("OES_texture_half_float_linear"),n("OES_standard_derivatives"),n("OES_element_index_uint"),n("OES_vertex_array_object"),n("ANGLE_instanced_arrays")),n("OES_texture_float_linear"),n("EXT_color_buffer_half_float"),n("WEBGL_multisampled_render_to_texture")},get:function(r){const a=n(r);return a===null&&console.warn("THREE.WebGLRenderer: "+r+" extension not supported."),a}}}function Cb(c,e,n,r){const a={},l=new WeakMap;function u(S){const E=S.target;E.index!==null&&e.remove(E.index);for(const C in E.attributes)e.remove(E.attributes[C]);E.removeEventListener("dispose",u),delete a[E.id];const w=l.get(E);w&&(e.remove(w),l.delete(E)),r.releaseStatesOfGeometry(E),E.isInstancedBufferGeometry===!0&&delete E._maxInstanceCount,n.memory.geometries--}function d(S,E){return a[E.id]===!0||(E.addEventListener("dispose",u),a[E.id]=!0,n.memory.geometries++),E}function g(S){const E=S.attributes;for(const C in E)e.update(E[C],c.ARRAY_BUFFER);const w=S.morphAttributes;for(const C in w){const I=w[C];for(let U=0,A=I.length;U<A;U++)e.update(I[U],c.ARRAY_BUFFER)}}function _(S){const E=[],w=S.index,C=S.attributes.position;let I=0;if(w!==null){const z=w.array;I=w.version;for(let F=0,k=z.length;F<k;F+=3){const Y=z[F+0],K=z[F+1],se=z[F+2];E.push(Y,K,K,se,se,Y)}}else{const z=C.array;I=C.version;for(let F=0,k=z.length/3-1;F<k;F+=3){const Y=F+0,K=F+1,se=F+2;E.push(Y,K,K,se,se,Y)}}const U=new(ng(E)?ud:hd)(E,1);U.version=I;const A=l.get(S);A&&e.remove(A),l.set(S,U)}function y(S){const E=l.get(S);if(E){const w=S.index;w!==null&&E.version<w.version&&_(S)}else _(S);return l.get(S)}return{get:d,update:g,getWireframeAttribute:y}}function Pb(c,e,n,r){const a=r.isWebGL2;let l;function u(E){l=E}let d,g;function _(E){d=E.type,g=E.bytesPerElement}function y(E,w){c.drawElements(l,w,d,E*g),n.update(w,l,1)}function S(E,w,C){if(C===0)return;let I,U;if(a)I=c,U="drawElementsInstanced";else if(I=e.get("ANGLE_instanced_arrays"),U="drawElementsInstancedANGLE",I===null){console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}I[U](l,w,d,E*g,C),n.update(w,l,C)}this.setMode=u,this.setIndex=_,this.render=y,this.renderInstances=S}function Lb(c){const e={geometries:0,textures:0},n={frame:0,calls:0,triangles:0,points:0,lines:0};function r(l,u,d){switch(n.calls++,u){case c.TRIANGLES:n.triangles+=d*(l/3);break;case c.LINES:n.lines+=d*(l/2);break;case c.LINE_STRIP:n.lines+=d*(l-1);break;case c.LINE_LOOP:n.lines+=d*l;break;case c.POINTS:n.points+=d*l;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",u);break}}function a(){n.frame++,n.calls=0,n.triangles=0,n.points=0,n.lines=0}return{memory:e,render:n,programs:null,autoReset:!0,reset:a,update:r}}function Db(c,e){return c[0]-e[0]}function Ub(c,e){return Math.abs(e[1])-Math.abs(c[1])}function Ib(c,e,n){const r={},a=new Float32Array(8),l=new WeakMap,u=new Hn,d=[];for(let _=0;_<8;_++)d[_]=[_,0];function g(_,y,S){const E=_.morphTargetInfluences;if(e.isWebGL2===!0){const C=y.morphAttributes.position||y.morphAttributes.normal||y.morphAttributes.color,I=C!==void 0?C.length:0;let U=l.get(y);if(U===void 0||U.count!==I){let De=function(){ge.dispose(),l.delete(y),y.removeEventListener("dispose",De)};var w=De;U!==void 0&&U.texture.dispose();const F=y.morphAttributes.position!==void 0,k=y.morphAttributes.normal!==void 0,Y=y.morphAttributes.color!==void 0,K=y.morphAttributes.position||[],se=y.morphAttributes.normal||[],le=y.morphAttributes.color||[];let G=0;F===!0&&(G=1),k===!0&&(G=2),Y===!0&&(G=3);let ee=y.attributes.position.count*G,Pe=1;ee>e.maxTextureSize&&(Pe=Math.ceil(ee/e.maxTextureSize),ee=e.maxTextureSize);const Ue=new Float32Array(ee*Pe*4*I),ge=new kh(Ue,ee,Pe,I);ge.type=Ct,ge.needsUpdate=!0;const Se=G*4;for(let $e=0;$e<I;$e++){const Ze=K[$e],Ke=se[$e],ct=le[$e],Qe=ee*Pe*4*$e;for(let Ot=0;Ot<Ze.count;Ot++){const pt=Ot*Se;F===!0&&(u.fromBufferAttribute(Ze,Ot),Ue[Qe+pt+0]=u.x,Ue[Qe+pt+1]=u.y,Ue[Qe+pt+2]=u.z,Ue[Qe+pt+3]=0),k===!0&&(u.fromBufferAttribute(Ke,Ot),Ue[Qe+pt+4]=u.x,Ue[Qe+pt+5]=u.y,Ue[Qe+pt+6]=u.z,Ue[Qe+pt+7]=0),Y===!0&&(u.fromBufferAttribute(ct,Ot),Ue[Qe+pt+8]=u.x,Ue[Qe+pt+9]=u.y,Ue[Qe+pt+10]=u.z,Ue[Qe+pt+11]=ct.itemSize===4?u.w:1)}}U={count:I,texture:ge,size:new Je(ee,Pe)},l.set(y,U),y.addEventListener("dispose",De)}let A=0;for(let F=0;F<E.length;F++)A+=E[F];const z=y.morphTargetsRelative?1:1-A;S.getUniforms().setValue(c,"morphTargetBaseInfluence",z),S.getUniforms().setValue(c,"morphTargetInfluences",E),S.getUniforms().setValue(c,"morphTargetsTexture",U.texture,n),S.getUniforms().setValue(c,"morphTargetsTextureSize",U.size)}else{const C=E===void 0?0:E.length;let I=r[y.id];if(I===void 0||I.length!==C){I=[];for(let k=0;k<C;k++)I[k]=[k,0];r[y.id]=I}for(let k=0;k<C;k++){const Y=I[k];Y[0]=k,Y[1]=E[k]}I.sort(Ub);for(let k=0;k<8;k++)k<C&&I[k][1]?(d[k][0]=I[k][0],d[k][1]=I[k][1]):(d[k][0]=Number.MAX_SAFE_INTEGER,d[k][1]=0);d.sort(Db);const U=y.morphAttributes.position,A=y.morphAttributes.normal;let z=0;for(let k=0;k<8;k++){const Y=d[k],K=Y[0],se=Y[1];K!==Number.MAX_SAFE_INTEGER&&se?(U&&y.getAttribute("morphTarget"+k)!==U[K]&&y.setAttribute("morphTarget"+k,U[K]),A&&y.getAttribute("morphNormal"+k)!==A[K]&&y.setAttribute("morphNormal"+k,A[K]),a[k]=se,z+=se):(U&&y.hasAttribute("morphTarget"+k)===!0&&y.deleteAttribute("morphTarget"+k),A&&y.hasAttribute("morphNormal"+k)===!0&&y.deleteAttribute("morphNormal"+k),a[k]=0)}const F=y.morphTargetsRelative?1:1-z;S.getUniforms().setValue(c,"morphTargetBaseInfluence",F),S.getUniforms().setValue(c,"morphTargetInfluences",a)}}return{update:g}}function Nb(c,e,n,r){let a=new WeakMap;function l(g){const _=r.render.frame,y=g.geometry,S=e.get(g,y);return a.get(S)!==_&&(e.update(S),a.set(S,_)),g.isInstancedMesh&&(g.hasEventListener("dispose",d)===!1&&g.addEventListener("dispose",d),n.update(g.instanceMatrix,c.ARRAY_BUFFER),g.instanceColor!==null&&n.update(g.instanceColor,c.ARRAY_BUFFER)),S}function u(){a=new WeakMap}function d(g){const _=g.target;_.removeEventListener("dispose",d),n.remove(_.instanceMatrix),_.instanceColor!==null&&n.remove(_.instanceColor)}return{update:l,dispose:u}}const Pg=new di,Lg=new kh,Dg=new jf,Ug=new Ac,Ig=[],Ng=[],Fg=new Float32Array(16),Og=new Float32Array(9),Bg=new Float32Array(4);function rl(c,e,n){const r=c[0];if(r<=0||r>0)return c;const a=e*n;let l=Ig[a];if(l===void 0&&(l=new Float32Array(a),Ig[a]=l),e!==0){r.toArray(l,0);for(let u=1,d=0;u!==e;++u)d+=n,c[u].toArray(l,d)}return l}function Ti(c,e){if(c.length!==e.length)return!1;for(let n=0,r=c.length;n<r;n++)if(c[n]!==e[n])return!1;return!0}function wi(c,e){for(let n=0,r=e.length;n<r;n++)c[n]=e[n]}function uu(c,e){let n=Ng[e];n===void 0&&(n=new Int32Array(e),Ng[e]=n);for(let r=0;r!==e;++r)n[r]=c.allocateTextureUnit();return n}function Fb(c,e){const n=this.cache;n[0]!==e&&(c.uniform1f(this.addr,e),n[0]=e)}function Ob(c,e){const n=this.cache;if(e.x!==void 0)(n[0]!==e.x||n[1]!==e.y)&&(c.uniform2f(this.addr,e.x,e.y),n[0]=e.x,n[1]=e.y);else{if(Ti(n,e))return;c.uniform2fv(this.addr,e),wi(n,e)}}function Bb(c,e){const n=this.cache;if(e.x!==void 0)(n[0]!==e.x||n[1]!==e.y||n[2]!==e.z)&&(c.uniform3f(this.addr,e.x,e.y,e.z),n[0]=e.x,n[1]=e.y,n[2]=e.z);else if(e.r!==void 0)(n[0]!==e.r||n[1]!==e.g||n[2]!==e.b)&&(c.uniform3f(this.addr,e.r,e.g,e.b),n[0]=e.r,n[1]=e.g,n[2]=e.b);else{if(Ti(n,e))return;c.uniform3fv(this.addr,e),wi(n,e)}}function zb(c,e){const n=this.cache;if(e.x!==void 0)(n[0]!==e.x||n[1]!==e.y||n[2]!==e.z||n[3]!==e.w)&&(c.uniform4f(this.addr,e.x,e.y,e.z,e.w),n[0]=e.x,n[1]=e.y,n[2]=e.z,n[3]=e.w);else{if(Ti(n,e))return;c.uniform4fv(this.addr,e),wi(n,e)}}function kb(c,e){const n=this.cache,r=e.elements;if(r===void 0){if(Ti(n,e))return;c.uniformMatrix2fv(this.addr,!1,e),wi(n,e)}else{if(Ti(n,r))return;Bg.set(r),c.uniformMatrix2fv(this.addr,!1,Bg),wi(n,r)}}function Gb(c,e){const n=this.cache,r=e.elements;if(r===void 0){if(Ti(n,e))return;c.uniformMatrix3fv(this.addr,!1,e),wi(n,e)}else{if(Ti(n,r))return;Og.set(r),c.uniformMatrix3fv(this.addr,!1,Og),wi(n,r)}}function Hb(c,e){const n=this.cache,r=e.elements;if(r===void 0){if(Ti(n,e))return;c.uniformMatrix4fv(this.addr,!1,e),wi(n,e)}else{if(Ti(n,r))return;Fg.set(r),c.uniformMatrix4fv(this.addr,!1,Fg),wi(n,r)}}function Vb(c,e){const n=this.cache;n[0]!==e&&(c.uniform1i(this.addr,e),n[0]=e)}function Wb(c,e){const n=this.cache;if(e.x!==void 0)(n[0]!==e.x||n[1]!==e.y)&&(c.uniform2i(this.addr,e.x,e.y),n[0]=e.x,n[1]=e.y);else{if(Ti(n,e))return;c.uniform2iv(this.addr,e),wi(n,e)}}function Xb(c,e){const n=this.cache;if(e.x!==void 0)(n[0]!==e.x||n[1]!==e.y||n[2]!==e.z)&&(c.uniform3i(this.addr,e.x,e.y,e.z),n[0]=e.x,n[1]=e.y,n[2]=e.z);else{if(Ti(n,e))return;c.uniform3iv(this.addr,e),wi(n,e)}}function qb(c,e){const n=this.cache;if(e.x!==void 0)(n[0]!==e.x||n[1]!==e.y||n[2]!==e.z||n[3]!==e.w)&&(c.uniform4i(this.addr,e.x,e.y,e.z,e.w),n[0]=e.x,n[1]=e.y,n[2]=e.z,n[3]=e.w);else{if(Ti(n,e))return;c.uniform4iv(this.addr,e),wi(n,e)}}function Yb(c,e){const n=this.cache;n[0]!==e&&(c.uniform1ui(this.addr,e),n[0]=e)}function Zb(c,e){const n=this.cache;if(e.x!==void 0)(n[0]!==e.x||n[1]!==e.y)&&(c.uniform2ui(this.addr,e.x,e.y),n[0]=e.x,n[1]=e.y);else{if(Ti(n,e))return;c.uniform2uiv(this.addr,e),wi(n,e)}}function Kb(c,e){const n=this.cache;if(e.x!==void 0)(n[0]!==e.x||n[1]!==e.y||n[2]!==e.z)&&(c.uniform3ui(this.addr,e.x,e.y,e.z),n[0]=e.x,n[1]=e.y,n[2]=e.z);else{if(Ti(n,e))return;c.uniform3uiv(this.addr,e),wi(n,e)}}function $b(c,e){const n=this.cache;if(e.x!==void 0)(n[0]!==e.x||n[1]!==e.y||n[2]!==e.z||n[3]!==e.w)&&(c.uniform4ui(this.addr,e.x,e.y,e.z,e.w),n[0]=e.x,n[1]=e.y,n[2]=e.z,n[3]=e.w);else{if(Ti(n,e))return;c.uniform4uiv(this.addr,e),wi(n,e)}}function Jb(c,e,n){const r=this.cache,a=n.allocateTextureUnit();r[0]!==a&&(c.uniform1i(this.addr,a),r[0]=a),n.setTexture2D(e||Pg,a)}function jb(c,e,n){const r=this.cache,a=n.allocateTextureUnit();r[0]!==a&&(c.uniform1i(this.addr,a),r[0]=a),n.setTexture3D(e||Dg,a)}function Qb(c,e,n){const r=this.cache,a=n.allocateTextureUnit();r[0]!==a&&(c.uniform1i(this.addr,a),r[0]=a),n.setTextureCube(e||Ug,a)}function eT(c,e,n){const r=this.cache,a=n.allocateTextureUnit();r[0]!==a&&(c.uniform1i(this.addr,a),r[0]=a),n.setTexture2DArray(e||Lg,a)}function tT(c){switch(c){case 5126:return Fb;case 35664:return Ob;case 35665:return Bb;case 35666:return zb;case 35674:return kb;case 35675:return Gb;case 35676:return Hb;case 5124:case 35670:return Vb;case 35667:case 35671:return Wb;case 35668:case 35672:return Xb;case 35669:case 35673:return qb;case 5125:return Yb;case 36294:return Zb;case 36295:return Kb;case 36296:return $b;case 35678:case 36198:case 36298:case 36306:case 35682:return Jb;case 35679:case 36299:case 36307:return jb;case 35680:case 36300:case 36308:case 36293:return Qb;case 36289:case 36303:case 36311:case 36292:return eT}}function nT(c,e){c.uniform1fv(this.addr,e)}function iT(c,e){const n=rl(e,this.size,2);c.uniform2fv(this.addr,n)}function rT(c,e){const n=rl(e,this.size,3);c.uniform3fv(this.addr,n)}function sT(c,e){const n=rl(e,this.size,4);c.uniform4fv(this.addr,n)}function aT(c,e){const n=rl(e,this.size,4);c.uniformMatrix2fv(this.addr,!1,n)}function oT(c,e){const n=rl(e,this.size,9);c.uniformMatrix3fv(this.addr,!1,n)}function lT(c,e){const n=rl(e,this.size,16);c.uniformMatrix4fv(this.addr,!1,n)}function cT(c,e){c.uniform1iv(this.addr,e)}function hT(c,e){c.uniform2iv(this.addr,e)}function uT(c,e){c.uniform3iv(this.addr,e)}function fT(c,e){c.uniform4iv(this.addr,e)}function dT(c,e){c.uniform1uiv(this.addr,e)}function pT(c,e){c.uniform2uiv(this.addr,e)}function mT(c,e){c.uniform3uiv(this.addr,e)}function gT(c,e){c.uniform4uiv(this.addr,e)}function _T(c,e,n){const r=this.cache,a=e.length,l=uu(n,a);Ti(r,l)||(c.uniform1iv(this.addr,l),wi(r,l));for(let u=0;u!==a;++u)n.setTexture2D(e[u]||Pg,l[u])}function xT(c,e,n){const r=this.cache,a=e.length,l=uu(n,a);Ti(r,l)||(c.uniform1iv(this.addr,l),wi(r,l));for(let u=0;u!==a;++u)n.setTexture3D(e[u]||Dg,l[u])}function vT(c,e,n){const r=this.cache,a=e.length,l=uu(n,a);Ti(r,l)||(c.uniform1iv(this.addr,l),wi(r,l));for(let u=0;u!==a;++u)n.setTextureCube(e[u]||Ug,l[u])}function yT(c,e,n){const r=this.cache,a=e.length,l=uu(n,a);Ti(r,l)||(c.uniform1iv(this.addr,l),wi(r,l));for(let u=0;u!==a;++u)n.setTexture2DArray(e[u]||Lg,l[u])}function MT(c){switch(c){case 5126:return nT;case 35664:return iT;case 35665:return rT;case 35666:return sT;case 35674:return aT;case 35675:return oT;case 35676:return lT;case 5124:case 35670:return cT;case 35667:case 35671:return hT;case 35668:case 35672:return uT;case 35669:case 35673:return fT;case 5125:return dT;case 36294:return pT;case 36295:return mT;case 36296:return gT;case 35678:case 36198:case 36298:case 36306:case 35682:return _T;case 35679:case 36299:case 36307:return xT;case 35680:case 36300:case 36308:case 36293:return vT;case 36289:case 36303:case 36311:case 36292:return yT}}class ST{constructor(e,n,r){this.id=e,this.addr=r,this.cache=[],this.setValue=tT(n.type)}}class ET{constructor(e,n,r){this.id=e,this.addr=r,this.cache=[],this.size=n.size,this.setValue=MT(n.type)}}class bT{constructor(e){this.id=e,this.seq=[],this.map={}}setValue(e,n,r){const a=this.seq;for(let l=0,u=a.length;l!==u;++l){const d=a[l];d.setValue(e,n[d.id],r)}}}const vd=/(\w+)(\])?(\[|\.)?/g;function zg(c,e){c.seq.push(e),c.map[e.id]=e}function TT(c,e,n){const r=c.name,a=r.length;for(vd.lastIndex=0;;){const l=vd.exec(r),u=vd.lastIndex;let d=l[1];const g=l[2]==="]",_=l[3];if(g&&(d=d|0),_===void 0||_==="["&&u+2===a){zg(n,_===void 0?new ST(d,c,e):new ET(d,c,e));break}else{let S=n.map[d];S===void 0&&(S=new bT(d),zg(n,S)),n=S}}}class fu{constructor(e,n){this.seq=[],this.map={};const r=e.getProgramParameter(n,e.ACTIVE_UNIFORMS);for(let a=0;a<r;++a){const l=e.getActiveUniform(n,a),u=e.getUniformLocation(n,l.name);TT(l,u,this)}}setValue(e,n,r,a){const l=this.map[n];l!==void 0&&l.setValue(e,r,a)}setOptional(e,n,r){const a=n[r];a!==void 0&&this.setValue(e,r,a)}static upload(e,n,r,a){for(let l=0,u=n.length;l!==u;++l){const d=n[l],g=r[d.id];g.needsUpdate!==!1&&d.setValue(e,g.value,a)}}static seqWithValue(e,n){const r=[];for(let a=0,l=e.length;a!==l;++a){const u=e[a];u.id in n&&r.push(u)}return r}}function kg(c,e,n){const r=c.createShader(e);return c.shaderSource(r,n),c.compileShader(r),r}let wT=0;function AT(c,e){const n=c.split(`
`),r=[],a=Math.max(e-6,0),l=Math.min(e+6,n.length);for(let u=a;u<l;u++){const d=u+1;r.push(`${d===e?">":" "} ${d}: ${n[u]}`)}return r.join(`
`)}function RT(c){switch(c){case Zr:return["Linear","( value )"];case gn:return["sRGB","( value )"];default:return console.warn("THREE.WebGLProgram: Unsupported color space:",c),["Linear","( value )"]}}function Gg(c,e,n){const r=c.getShaderParameter(e,c.COMPILE_STATUS),a=c.getShaderInfoLog(e).trim();if(r&&a==="")return"";const l=/ERROR: 0:(\d+)/.exec(a);if(l){const u=parseInt(l[1]);return n.toUpperCase()+`

`+a+`

`+AT(c.getShaderSource(e),u)}else return a}function CT(c,e){const n=RT(e);return"vec4 "+c+"( vec4 value ) { return LinearTo"+n[0]+n[1]+"; }"}function PT(c,e){let n;switch(e){case Ft:n="Linear";break;case un:n="Reinhard";break;case Qn:n="OptimizedCineon";break;case Kn:n="ACESFilmic";break;case ii:n="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",e),n="Linear"}return"vec3 "+c+"( vec3 color ) { return "+n+"ToneMapping( color ); }"}function LT(c){return[c.extensionDerivatives||c.envMapCubeUVHeight||c.bumpMap||c.normalMapTangentSpace||c.clearcoatNormalMap||c.flatShading||c.shaderID==="physical"?"#extension GL_OES_standard_derivatives : enable":"",(c.extensionFragDepth||c.logarithmicDepthBuffer)&&c.rendererExtensionFragDepth?"#extension GL_EXT_frag_depth : enable":"",c.extensionDrawBuffers&&c.rendererExtensionDrawBuffers?"#extension GL_EXT_draw_buffers : require":"",(c.extensionShaderTextureLOD||c.envMap||c.transmission)&&c.rendererExtensionShaderTextureLod?"#extension GL_EXT_shader_texture_lod : enable":""].filter(Rc).join(`
`)}function DT(c){const e=[];for(const n in c){const r=c[n];r!==!1&&e.push("#define "+n+" "+r)}return e.join(`
`)}function UT(c,e){const n={},r=c.getProgramParameter(e,c.ACTIVE_ATTRIBUTES);for(let a=0;a<r;a++){const l=c.getActiveAttrib(e,a),u=l.name;let d=1;l.type===c.FLOAT_MAT2&&(d=2),l.type===c.FLOAT_MAT3&&(d=3),l.type===c.FLOAT_MAT4&&(d=4),n[u]={type:l.type,location:c.getAttribLocation(e,u),locationSize:d}}return n}function Rc(c){return c!==""}function Hg(c,e){const n=e.numSpotLightShadows+e.numSpotLightMaps-e.numSpotLightShadowsWithMaps;return c.replace(/NUM_DIR_LIGHTS/g,e.numDirLights).replace(/NUM_SPOT_LIGHTS/g,e.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g,e.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g,n).replace(/NUM_RECT_AREA_LIGHTS/g,e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,e.numPointLights).replace(/NUM_HEMI_LIGHTS/g,e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g,e.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g,e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,e.numPointLightShadows)}function Vg(c,e){return c.replace(/NUM_CLIPPING_PLANES/g,e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,e.numClippingPlanes-e.numClipIntersection)}const IT=/^[ \t]*#include +<([\w\d./]+)>/gm;function yd(c){return c.replace(IT,NT)}function NT(c,e){const n=xn[e];if(n===void 0)throw new Error("Can not resolve #include <"+e+">");return yd(n)}const FT=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function Wg(c){return c.replace(FT,OT)}function OT(c,e,n,r){let a="";for(let l=parseInt(e);l<parseInt(n);l++)a+=r.replace(/\[\s*i\s*\]/g,"[ "+l+" ]").replace(/UNROLLED_LOOP_INDEX/g,l);return a}function Xg(c){let e="precision "+c.precision+` float;
precision `+c.precision+" int;";return c.precision==="highp"?e+=`
#define HIGH_PRECISION`:c.precision==="mediump"?e+=`
#define MEDIUM_PRECISION`:c.precision==="lowp"&&(e+=`
#define LOW_PRECISION`),e}function BT(c){let e="SHADOWMAP_TYPE_BASIC";return c.shadowMapType===v?e="SHADOWMAP_TYPE_PCF":c.shadowMapType===x?e="SHADOWMAP_TYPE_PCF_SOFT":c.shadowMapType===M&&(e="SHADOWMAP_TYPE_VSM"),e}function zT(c){let e="ENVMAP_TYPE_CUBE";if(c.envMap)switch(c.envMapMode){case dn:case Pn:e="ENVMAP_TYPE_CUBE";break;case X:e="ENVMAP_TYPE_CUBE_UV";break}return e}function kT(c){let e="ENVMAP_MODE_REFLECTION";if(c.envMap)switch(c.envMapMode){case Pn:e="ENVMAP_MODE_REFRACTION";break}return e}function GT(c){let e="ENVMAP_BLENDING_NONE";if(c.envMap)switch(c.combine){case Wt:e="ENVMAP_BLENDING_MULTIPLY";break;case mt:e="ENVMAP_BLENDING_MIX";break;case Xt:e="ENVMAP_BLENDING_ADD";break}return e}function HT(c){const e=c.envMapCubeUVHeight;if(e===null)return null;const n=Math.log2(e)-2,r=1/e;return{texelWidth:1/(3*Math.max(Math.pow(2,n),7*16)),texelHeight:r,maxMip:n}}function VT(c,e,n,r){const a=c.getContext(),l=n.defines;let u=n.vertexShader,d=n.fragmentShader;const g=BT(n),_=zT(n),y=kT(n),S=GT(n),E=HT(n),w=n.isWebGL2?"":LT(n),C=DT(l),I=a.createProgram();let U,A,z=n.glslVersion?"#version "+n.glslVersion+`
`:"";n.isRawShaderMaterial?(U=[C].filter(Rc).join(`
`),U.length>0&&(U+=`
`),A=[w,C].filter(Rc).join(`
`),A.length>0&&(A+=`
`)):(U=[Xg(n),"#define SHADER_NAME "+n.shaderName,C,n.instancing?"#define USE_INSTANCING":"",n.instancingColor?"#define USE_INSTANCING_COLOR":"",n.useFog&&n.fog?"#define USE_FOG":"",n.useFog&&n.fogExp2?"#define FOG_EXP2":"",n.map?"#define USE_MAP":"",n.envMap?"#define USE_ENVMAP":"",n.envMap?"#define "+y:"",n.lightMap?"#define USE_LIGHTMAP":"",n.aoMap?"#define USE_AOMAP":"",n.bumpMap?"#define USE_BUMPMAP":"",n.normalMap?"#define USE_NORMALMAP":"",n.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",n.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",n.displacementMap?"#define USE_DISPLACEMENTMAP":"",n.emissiveMap?"#define USE_EMISSIVEMAP":"",n.clearcoatMap?"#define USE_CLEARCOATMAP":"",n.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",n.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",n.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",n.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",n.specularMap?"#define USE_SPECULARMAP":"",n.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",n.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",n.roughnessMap?"#define USE_ROUGHNESSMAP":"",n.metalnessMap?"#define USE_METALNESSMAP":"",n.alphaMap?"#define USE_ALPHAMAP":"",n.transmission?"#define USE_TRANSMISSION":"",n.transmissionMap?"#define USE_TRANSMISSIONMAP":"",n.thicknessMap?"#define USE_THICKNESSMAP":"",n.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",n.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",n.mapUv?"#define MAP_UV "+n.mapUv:"",n.alphaMapUv?"#define ALPHAMAP_UV "+n.alphaMapUv:"",n.lightMapUv?"#define LIGHTMAP_UV "+n.lightMapUv:"",n.aoMapUv?"#define AOMAP_UV "+n.aoMapUv:"",n.emissiveMapUv?"#define EMISSIVEMAP_UV "+n.emissiveMapUv:"",n.bumpMapUv?"#define BUMPMAP_UV "+n.bumpMapUv:"",n.normalMapUv?"#define NORMALMAP_UV "+n.normalMapUv:"",n.displacementMapUv?"#define DISPLACEMENTMAP_UV "+n.displacementMapUv:"",n.metalnessMapUv?"#define METALNESSMAP_UV "+n.metalnessMapUv:"",n.roughnessMapUv?"#define ROUGHNESSMAP_UV "+n.roughnessMapUv:"",n.clearcoatMapUv?"#define CLEARCOATMAP_UV "+n.clearcoatMapUv:"",n.clearcoatNormalMapUv?"#define CLEARCOAT_NORMALMAP_UV "+n.clearcoatNormalMapUv:"",n.clearcoatRoughnessMapUv?"#define CLEARCOAT_ROUGHNESSMAP_UV "+n.clearcoatRoughnessMapUv:"",n.iridescenceMapUv?"#define IRIDESCENCEMAP_UV "+n.iridescenceMapUv:"",n.iridescenceThicknessMapUv?"#define IRIDESCENCE_THICKNESSMAP_UV "+n.iridescenceThicknessMapUv:"",n.sheenColorMapUv?"#define SHEEN_COLORMAP_UV "+n.sheenColorMapUv:"",n.sheenRoughnessMapUv?"#define SHEEN_ROUGHNESSMAP_UV "+n.sheenRoughnessMapUv:"",n.specularMapUv?"#define SPECULARMAP_UV "+n.specularMapUv:"",n.specularColorMapUv?"#define SPECULAR_COLORMAP_UV "+n.specularColorMapUv:"",n.specularIntensityMapUv?"#define SPECULAR_INTENSITYMAP_UV "+n.specularIntensityMapUv:"",n.transmissionMapUv?"#define TRANSMISSIONMAP_UV "+n.transmissionMapUv:"",n.thicknessMapUv?"#define THICKNESSMAP_UV "+n.thicknessMapUv:"",n.vertexTangents?"#define USE_TANGENT":"",n.vertexColors?"#define USE_COLOR":"",n.vertexAlphas?"#define USE_COLOR_ALPHA":"",n.vertexUv1s?"#define USE_UV1":"",n.vertexUv2s?"#define USE_UV2":"",n.vertexUv3s?"#define USE_UV3":"",n.pointsUvs?"#define USE_POINTS_UV":"",n.flatShading?"#define FLAT_SHADED":"",n.skinning?"#define USE_SKINNING":"",n.morphTargets?"#define USE_MORPHTARGETS":"",n.morphNormals&&n.flatShading===!1?"#define USE_MORPHNORMALS":"",n.morphColors&&n.isWebGL2?"#define USE_MORPHCOLORS":"",n.morphTargetsCount>0&&n.isWebGL2?"#define MORPHTARGETS_TEXTURE":"",n.morphTargetsCount>0&&n.isWebGL2?"#define MORPHTARGETS_TEXTURE_STRIDE "+n.morphTextureStride:"",n.morphTargetsCount>0&&n.isWebGL2?"#define MORPHTARGETS_COUNT "+n.morphTargetsCount:"",n.doubleSided?"#define DOUBLE_SIDED":"",n.flipSided?"#define FLIP_SIDED":"",n.shadowMapEnabled?"#define USE_SHADOWMAP":"",n.shadowMapEnabled?"#define "+g:"",n.sizeAttenuation?"#define USE_SIZEATTENUATION":"",n.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",n.logarithmicDepthBuffer&&n.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","	attribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","	attribute vec3 instanceColor;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_UV1","	attribute vec2 uv1;","#endif","#ifdef USE_UV2","	attribute vec2 uv2;","#endif","#ifdef USE_UV3","	attribute vec2 uv3;","#endif","#ifdef USE_TANGENT","	attribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","	attribute vec4 color;","#elif defined( USE_COLOR )","	attribute vec3 color;","#endif","#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )","	attribute vec3 morphTarget0;","	attribute vec3 morphTarget1;","	attribute vec3 morphTarget2;","	attribute vec3 morphTarget3;","	#ifdef USE_MORPHNORMALS","		attribute vec3 morphNormal0;","		attribute vec3 morphNormal1;","		attribute vec3 morphNormal2;","		attribute vec3 morphNormal3;","	#else","		attribute vec3 morphTarget4;","		attribute vec3 morphTarget5;","		attribute vec3 morphTarget6;","		attribute vec3 morphTarget7;","	#endif","#endif","#ifdef USE_SKINNING","	attribute vec4 skinIndex;","	attribute vec4 skinWeight;","#endif",`
`].filter(Rc).join(`
`),A=[w,Xg(n),"#define SHADER_NAME "+n.shaderName,C,n.useFog&&n.fog?"#define USE_FOG":"",n.useFog&&n.fogExp2?"#define FOG_EXP2":"",n.map?"#define USE_MAP":"",n.matcap?"#define USE_MATCAP":"",n.envMap?"#define USE_ENVMAP":"",n.envMap?"#define "+_:"",n.envMap?"#define "+y:"",n.envMap?"#define "+S:"",E?"#define CUBEUV_TEXEL_WIDTH "+E.texelWidth:"",E?"#define CUBEUV_TEXEL_HEIGHT "+E.texelHeight:"",E?"#define CUBEUV_MAX_MIP "+E.maxMip+".0":"",n.lightMap?"#define USE_LIGHTMAP":"",n.aoMap?"#define USE_AOMAP":"",n.bumpMap?"#define USE_BUMPMAP":"",n.normalMap?"#define USE_NORMALMAP":"",n.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",n.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",n.emissiveMap?"#define USE_EMISSIVEMAP":"",n.clearcoat?"#define USE_CLEARCOAT":"",n.clearcoatMap?"#define USE_CLEARCOATMAP":"",n.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",n.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",n.iridescence?"#define USE_IRIDESCENCE":"",n.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",n.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",n.specularMap?"#define USE_SPECULARMAP":"",n.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",n.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",n.roughnessMap?"#define USE_ROUGHNESSMAP":"",n.metalnessMap?"#define USE_METALNESSMAP":"",n.alphaMap?"#define USE_ALPHAMAP":"",n.alphaTest?"#define USE_ALPHATEST":"",n.sheen?"#define USE_SHEEN":"",n.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",n.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",n.transmission?"#define USE_TRANSMISSION":"",n.transmissionMap?"#define USE_TRANSMISSIONMAP":"",n.thicknessMap?"#define USE_THICKNESSMAP":"",n.vertexTangents?"#define USE_TANGENT":"",n.vertexColors||n.instancingColor?"#define USE_COLOR":"",n.vertexAlphas?"#define USE_COLOR_ALPHA":"",n.vertexUv1s?"#define USE_UV1":"",n.vertexUv2s?"#define USE_UV2":"",n.vertexUv3s?"#define USE_UV3":"",n.pointsUvs?"#define USE_POINTS_UV":"",n.gradientMap?"#define USE_GRADIENTMAP":"",n.flatShading?"#define FLAT_SHADED":"",n.doubleSided?"#define DOUBLE_SIDED":"",n.flipSided?"#define FLIP_SIDED":"",n.shadowMapEnabled?"#define USE_SHADOWMAP":"",n.shadowMapEnabled?"#define "+g:"",n.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",n.useLegacyLights?"#define LEGACY_LIGHTS":"",n.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",n.logarithmicDepthBuffer&&n.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",n.toneMapping!==hn?"#define TONE_MAPPING":"",n.toneMapping!==hn?xn.tonemapping_pars_fragment:"",n.toneMapping!==hn?PT("toneMapping",n.toneMapping):"",n.dithering?"#define DITHERING":"",n.opaque?"#define OPAQUE":"",xn.encodings_pars_fragment,CT("linearToOutputTexel",n.outputColorSpace),n.useDepthPacking?"#define DEPTH_PACKING "+n.depthPacking:"",`
`].filter(Rc).join(`
`)),u=yd(u),u=Hg(u,n),u=Vg(u,n),d=yd(d),d=Hg(d,n),d=Vg(d,n),u=Wg(u),d=Wg(d),n.isWebGL2&&n.isRawShaderMaterial!==!0&&(z=`#version 300 es
`,U=["precision mediump sampler2DArray;","#define attribute in","#define varying out","#define texture2D texture"].join(`
`)+`
`+U,A=["#define varying in",n.glslVersion===Xf?"":"layout(location = 0) out highp vec4 pc_fragColor;",n.glslVersion===Xf?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join(`
`)+`
`+A);const F=z+U+u,k=z+A+d,Y=kg(a,a.VERTEX_SHADER,F),K=kg(a,a.FRAGMENT_SHADER,k);if(a.attachShader(I,Y),a.attachShader(I,K),n.index0AttributeName!==void 0?a.bindAttribLocation(I,0,n.index0AttributeName):n.morphTargets===!0&&a.bindAttribLocation(I,0,"position"),a.linkProgram(I),c.debug.checkShaderErrors){const G=a.getProgramInfoLog(I).trim(),ee=a.getShaderInfoLog(Y).trim(),Pe=a.getShaderInfoLog(K).trim();let Ue=!0,ge=!0;if(a.getProgramParameter(I,a.LINK_STATUS)===!1)if(Ue=!1,typeof c.debug.onShaderError=="function")c.debug.onShaderError(a,I,Y,K);else{const Se=Gg(a,Y,"vertex"),De=Gg(a,K,"fragment");console.error("THREE.WebGLProgram: Shader Error "+a.getError()+" - VALIDATE_STATUS "+a.getProgramParameter(I,a.VALIDATE_STATUS)+`

Program Info Log: `+G+`
`+Se+`
`+De)}else G!==""?console.warn("THREE.WebGLProgram: Program Info Log:",G):(ee===""||Pe==="")&&(ge=!1);ge&&(this.diagnostics={runnable:Ue,programLog:G,vertexShader:{log:ee,prefix:U},fragmentShader:{log:Pe,prefix:A}})}a.deleteShader(Y),a.deleteShader(K);let se;this.getUniforms=function(){return se===void 0&&(se=new fu(a,I)),se};let le;return this.getAttributes=function(){return le===void 0&&(le=UT(a,I)),le},this.destroy=function(){r.releaseStatesOfProgram(this),a.deleteProgram(I),this.program=void 0},this.name=n.shaderName,this.id=wT++,this.cacheKey=e,this.usedTimes=1,this.program=I,this.vertexShader=Y,this.fragmentShader=K,this}let WT=0;class XT{constructor(){this.shaderCache=new Map,this.materialCache=new Map}update(e){const n=e.vertexShader,r=e.fragmentShader,a=this._getShaderStage(n),l=this._getShaderStage(r),u=this._getShaderCacheForMaterial(e);return u.has(a)===!1&&(u.add(a),a.usedTimes++),u.has(l)===!1&&(u.add(l),l.usedTimes++),this}remove(e){const n=this.materialCache.get(e);for(const r of n)r.usedTimes--,r.usedTimes===0&&this.shaderCache.delete(r.code);return this.materialCache.delete(e),this}getVertexShaderID(e){return this._getShaderStage(e.vertexShader).id}getFragmentShaderID(e){return this._getShaderStage(e.fragmentShader).id}dispose(){this.shaderCache.clear(),this.materialCache.clear()}_getShaderCacheForMaterial(e){const n=this.materialCache;let r=n.get(e);return r===void 0&&(r=new Set,n.set(e,r)),r}_getShaderStage(e){const n=this.shaderCache;let r=n.get(e);return r===void 0&&(r=new qT(e),n.set(e,r)),r}}class qT{constructor(e){this.id=WT++,this.code=e,this.usedTimes=0}}function YT(c,e,n,r,a,l,u){const d=new qh,g=new XT,_=[],y=a.isWebGL2,S=a.logarithmicDepthBuffer,E=a.vertexTextures;let w=a.precision;const C={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};function I(G){return G===1?"uv1":G===2?"uv2":G===3?"uv3":"uv"}function U(G,ee,Pe,Ue,ge){const Se=Ue.fog,De=ge.geometry,$e=G.isMeshStandardMaterial?Ue.environment:null,Ze=(G.isMeshStandardMaterial?n:e).get(G.envMap||$e),Ke=Ze&&Ze.mapping===X?Ze.image.height:null,ct=C[G.type];G.precision!==null&&(w=a.getMaxPrecision(G.precision),w!==G.precision&&console.warn("THREE.WebGLProgram.getParameters:",G.precision,"not supported, using",w,"instead."));const Qe=De.morphAttributes.position||De.morphAttributes.normal||De.morphAttributes.color,Ot=Qe!==void 0?Qe.length:0;let pt=0;De.morphAttributes.position!==void 0&&(pt=1),De.morphAttributes.normal!==void 0&&(pt=2),De.morphAttributes.color!==void 0&&(pt=3);let Fe,je,vt,bt;if(ct){const qn=Qr[ct];Fe=qn.vertexShader,je=qn.fragmentShader}else Fe=G.vertexShader,je=G.fragmentShader,g.update(G),vt=g.getVertexShaderID(G),bt=g.getFragmentShaderID(G);const he=c.getRenderTarget(),rn=ge.isInstancedMesh===!0,an=!!G.map,dt=!!G.matcap,kt=!!Ze,et=!!G.aoMap,Ve=!!G.lightMap,tt=!!G.bumpMap,Lt=!!G.normalMap,Mt=!!G.displacementMap,Kt=!!G.emissiveMap,$t=!!G.metalnessMap,qt=!!G.roughnessMap,Tn=G.clearcoat>0,zn=G.iridescence>0,ie=G.sheen>0,Z=G.transmission>0,Te=Tn&&!!G.clearcoatMap,at=Tn&&!!G.clearcoatNormalMap,ht=Tn&&!!G.clearcoatRoughnessMap,Et=zn&&!!G.iridescenceMap,en=zn&&!!G.iridescenceThicknessMap,Pt=ie&&!!G.sheenColorMap,Ge=ie&&!!G.sheenRoughnessMap,Bt=!!G.specularMap,Yt=!!G.specularColorMap,Jt=!!G.specularIntensityMap,Dt=Z&&!!G.transmissionMap,Ht=Z&&!!G.thicknessMap,In=!!G.gradientMap,Vn=!!G.alphaMap,mi=G.alphaTest>0,ue=!!G.extensions,Oe=!!De.attributes.uv1,ot=!!De.attributes.uv2,Rt=!!De.attributes.uv3;return{isWebGL2:y,shaderID:ct,shaderName:G.type,vertexShader:Fe,fragmentShader:je,defines:G.defines,customVertexShaderID:vt,customFragmentShaderID:bt,isRawShaderMaterial:G.isRawShaderMaterial===!0,glslVersion:G.glslVersion,precision:w,instancing:rn,instancingColor:rn&&ge.instanceColor!==null,supportsVertexTextures:E,outputColorSpace:he===null?c.outputColorSpace:he.isXRRenderTarget===!0?he.texture.colorSpace:Zr,map:an,matcap:dt,envMap:kt,envMapMode:kt&&Ze.mapping,envMapCubeUVHeight:Ke,aoMap:et,lightMap:Ve,bumpMap:tt,normalMap:Lt,displacementMap:E&&Mt,emissiveMap:Kt,normalMapObjectSpace:Lt&&G.normalMapType===Jm,normalMapTangentSpace:Lt&&G.normalMapType===ta,metalnessMap:$t,roughnessMap:qt,clearcoat:Tn,clearcoatMap:Te,clearcoatNormalMap:at,clearcoatRoughnessMap:ht,iridescence:zn,iridescenceMap:Et,iridescenceThicknessMap:en,sheen:ie,sheenColorMap:Pt,sheenRoughnessMap:Ge,specularMap:Bt,specularColorMap:Yt,specularIntensityMap:Jt,transmission:Z,transmissionMap:Dt,thicknessMap:Ht,gradientMap:In,opaque:G.transparent===!1&&G.blending===D,alphaMap:Vn,alphaTest:mi,combine:G.combine,mapUv:an&&I(G.map.channel),aoMapUv:et&&I(G.aoMap.channel),lightMapUv:Ve&&I(G.lightMap.channel),bumpMapUv:tt&&I(G.bumpMap.channel),normalMapUv:Lt&&I(G.normalMap.channel),displacementMapUv:Mt&&I(G.displacementMap.channel),emissiveMapUv:Kt&&I(G.emissiveMap.channel),metalnessMapUv:$t&&I(G.metalnessMap.channel),roughnessMapUv:qt&&I(G.roughnessMap.channel),clearcoatMapUv:Te&&I(G.clearcoatMap.channel),clearcoatNormalMapUv:at&&I(G.clearcoatNormalMap.channel),clearcoatRoughnessMapUv:ht&&I(G.clearcoatRoughnessMap.channel),iridescenceMapUv:Et&&I(G.iridescenceMap.channel),iridescenceThicknessMapUv:en&&I(G.iridescenceThicknessMap.channel),sheenColorMapUv:Pt&&I(G.sheenColorMap.channel),sheenRoughnessMapUv:Ge&&I(G.sheenRoughnessMap.channel),specularMapUv:Bt&&I(G.specularMap.channel),specularColorMapUv:Yt&&I(G.specularColorMap.channel),specularIntensityMapUv:Jt&&I(G.specularIntensityMap.channel),transmissionMapUv:Dt&&I(G.transmissionMap.channel),thicknessMapUv:Ht&&I(G.thicknessMap.channel),alphaMapUv:Vn&&I(G.alphaMap.channel),vertexTangents:Lt&&!!De.attributes.tangent,vertexColors:G.vertexColors,vertexAlphas:G.vertexColors===!0&&!!De.attributes.color&&De.attributes.color.itemSize===4,vertexUv1s:Oe,vertexUv2s:ot,vertexUv3s:Rt,pointsUvs:ge.isPoints===!0&&!!De.attributes.uv&&(an||Vn),fog:!!Se,useFog:G.fog===!0,fogExp2:Se&&Se.isFogExp2,flatShading:G.flatShading===!0,sizeAttenuation:G.sizeAttenuation===!0,logarithmicDepthBuffer:S,skinning:ge.isSkinnedMesh===!0,morphTargets:De.morphAttributes.position!==void 0,morphNormals:De.morphAttributes.normal!==void 0,morphColors:De.morphAttributes.color!==void 0,morphTargetsCount:Ot,morphTextureStride:pt,numDirLights:ee.directional.length,numPointLights:ee.point.length,numSpotLights:ee.spot.length,numSpotLightMaps:ee.spotLightMap.length,numRectAreaLights:ee.rectArea.length,numHemiLights:ee.hemi.length,numDirLightShadows:ee.directionalShadowMap.length,numPointLightShadows:ee.pointShadowMap.length,numSpotLightShadows:ee.spotShadowMap.length,numSpotLightShadowsWithMaps:ee.numSpotLightShadowsWithMaps,numClippingPlanes:u.numPlanes,numClipIntersection:u.numIntersection,dithering:G.dithering,shadowMapEnabled:c.shadowMap.enabled&&Pe.length>0,shadowMapType:c.shadowMap.type,toneMapping:G.toneMapped?c.toneMapping:hn,useLegacyLights:c.useLegacyLights,premultipliedAlpha:G.premultipliedAlpha,doubleSided:G.side===P,flipSided:G.side===T,useDepthPacking:G.depthPacking>=0,depthPacking:G.depthPacking||0,index0AttributeName:G.index0AttributeName,extensionDerivatives:ue&&G.extensions.derivatives===!0,extensionFragDepth:ue&&G.extensions.fragDepth===!0,extensionDrawBuffers:ue&&G.extensions.drawBuffers===!0,extensionShaderTextureLOD:ue&&G.extensions.shaderTextureLOD===!0,rendererExtensionFragDepth:y||r.has("EXT_frag_depth"),rendererExtensionDrawBuffers:y||r.has("WEBGL_draw_buffers"),rendererExtensionShaderTextureLod:y||r.has("EXT_shader_texture_lod"),customProgramCacheKey:G.customProgramCacheKey()}}function A(G){const ee=[];if(G.shaderID?ee.push(G.shaderID):(ee.push(G.customVertexShaderID),ee.push(G.customFragmentShaderID)),G.defines!==void 0)for(const Pe in G.defines)ee.push(Pe),ee.push(G.defines[Pe]);return G.isRawShaderMaterial===!1&&(z(ee,G),F(ee,G),ee.push(c.outputColorSpace)),ee.push(G.customProgramCacheKey),ee.join()}function z(G,ee){G.push(ee.precision),G.push(ee.outputColorSpace),G.push(ee.envMapMode),G.push(ee.envMapCubeUVHeight),G.push(ee.mapUv),G.push(ee.alphaMapUv),G.push(ee.lightMapUv),G.push(ee.aoMapUv),G.push(ee.bumpMapUv),G.push(ee.normalMapUv),G.push(ee.displacementMapUv),G.push(ee.emissiveMapUv),G.push(ee.metalnessMapUv),G.push(ee.roughnessMapUv),G.push(ee.clearcoatMapUv),G.push(ee.clearcoatNormalMapUv),G.push(ee.clearcoatRoughnessMapUv),G.push(ee.iridescenceMapUv),G.push(ee.iridescenceThicknessMapUv),G.push(ee.sheenColorMapUv),G.push(ee.sheenRoughnessMapUv),G.push(ee.specularMapUv),G.push(ee.specularColorMapUv),G.push(ee.specularIntensityMapUv),G.push(ee.transmissionMapUv),G.push(ee.thicknessMapUv),G.push(ee.combine),G.push(ee.fogExp2),G.push(ee.sizeAttenuation),G.push(ee.morphTargetsCount),G.push(ee.morphAttributeCount),G.push(ee.numDirLights),G.push(ee.numPointLights),G.push(ee.numSpotLights),G.push(ee.numSpotLightMaps),G.push(ee.numHemiLights),G.push(ee.numRectAreaLights),G.push(ee.numDirLightShadows),G.push(ee.numPointLightShadows),G.push(ee.numSpotLightShadows),G.push(ee.numSpotLightShadowsWithMaps),G.push(ee.shadowMapType),G.push(ee.toneMapping),G.push(ee.numClippingPlanes),G.push(ee.numClipIntersection),G.push(ee.depthPacking)}function F(G,ee){d.disableAll(),ee.isWebGL2&&d.enable(0),ee.supportsVertexTextures&&d.enable(1),ee.instancing&&d.enable(2),ee.instancingColor&&d.enable(3),ee.matcap&&d.enable(4),ee.envMap&&d.enable(5),ee.normalMapObjectSpace&&d.enable(6),ee.normalMapTangentSpace&&d.enable(7),ee.clearcoat&&d.enable(8),ee.iridescence&&d.enable(9),ee.alphaTest&&d.enable(10),ee.vertexColors&&d.enable(11),ee.vertexAlphas&&d.enable(12),ee.vertexUv1s&&d.enable(13),ee.vertexUv2s&&d.enable(14),ee.vertexUv3s&&d.enable(15),ee.vertexTangents&&d.enable(16),G.push(d.mask),d.disableAll(),ee.fog&&d.enable(0),ee.useFog&&d.enable(1),ee.flatShading&&d.enable(2),ee.logarithmicDepthBuffer&&d.enable(3),ee.skinning&&d.enable(4),ee.morphTargets&&d.enable(5),ee.morphNormals&&d.enable(6),ee.morphColors&&d.enable(7),ee.premultipliedAlpha&&d.enable(8),ee.shadowMapEnabled&&d.enable(9),ee.useLegacyLights&&d.enable(10),ee.doubleSided&&d.enable(11),ee.flipSided&&d.enable(12),ee.useDepthPacking&&d.enable(13),ee.dithering&&d.enable(14),ee.transmission&&d.enable(15),ee.sheen&&d.enable(16),ee.opaque&&d.enable(17),ee.pointsUvs&&d.enable(18),G.push(d.mask)}function k(G){const ee=C[G.type];let Pe;if(ee){const Ue=Qr[ee];Pe=yg.clone(Ue.uniforms)}else Pe=G.uniforms;return Pe}function Y(G,ee){let Pe;for(let Ue=0,ge=_.length;Ue<ge;Ue++){const Se=_[Ue];if(Se.cacheKey===ee){Pe=Se,++Pe.usedTimes;break}}return Pe===void 0&&(Pe=new VT(c,ee,G,l),_.push(Pe)),Pe}function K(G){if(--G.usedTimes===0){const ee=_.indexOf(G);_[ee]=_[_.length-1],_.pop(),G.destroy()}}function se(G){g.remove(G)}function le(){g.dispose()}return{getParameters:U,getProgramCacheKey:A,getUniforms:k,acquireProgram:Y,releaseProgram:K,releaseShaderCache:se,programs:_,dispose:le}}function ZT(){let c=new WeakMap;function e(l){let u=c.get(l);return u===void 0&&(u={},c.set(l,u)),u}function n(l){c.delete(l)}function r(l,u,d){c.get(l)[u]=d}function a(){c=new WeakMap}return{get:e,remove:n,update:r,dispose:a}}function KT(c,e){return c.groupOrder!==e.groupOrder?c.groupOrder-e.groupOrder:c.renderOrder!==e.renderOrder?c.renderOrder-e.renderOrder:c.material.id!==e.material.id?c.material.id-e.material.id:c.z!==e.z?c.z-e.z:c.id-e.id}function qg(c,e){return c.groupOrder!==e.groupOrder?c.groupOrder-e.groupOrder:c.renderOrder!==e.renderOrder?c.renderOrder-e.renderOrder:c.z!==e.z?e.z-c.z:c.id-e.id}function Yg(){const c=[];let e=0;const n=[],r=[],a=[];function l(){e=0,n.length=0,r.length=0,a.length=0}function u(S,E,w,C,I,U){let A=c[e];return A===void 0?(A={id:S.id,object:S,geometry:E,material:w,groupOrder:C,renderOrder:S.renderOrder,z:I,group:U},c[e]=A):(A.id=S.id,A.object=S,A.geometry=E,A.material=w,A.groupOrder=C,A.renderOrder=S.renderOrder,A.z=I,A.group=U),e++,A}function d(S,E,w,C,I,U){const A=u(S,E,w,C,I,U);w.transmission>0?r.push(A):w.transparent===!0?a.push(A):n.push(A)}function g(S,E,w,C,I,U){const A=u(S,E,w,C,I,U);w.transmission>0?r.unshift(A):w.transparent===!0?a.unshift(A):n.unshift(A)}function _(S,E){n.length>1&&n.sort(S||KT),r.length>1&&r.sort(E||qg),a.length>1&&a.sort(E||qg)}function y(){for(let S=e,E=c.length;S<E;S++){const w=c[S];if(w.id===null)break;w.id=null,w.object=null,w.geometry=null,w.material=null,w.group=null}}return{opaque:n,transmissive:r,transparent:a,init:l,push:d,unshift:g,finish:y,sort:_}}function $T(){let c=new WeakMap;function e(r,a){const l=c.get(r);let u;return l===void 0?(u=new Yg,c.set(r,[u])):a>=l.length?(u=new Yg,l.push(u)):u=l[a],u}function n(){c=new WeakMap}return{get:e,dispose:n}}function JT(){const c={};return{get:function(e){if(c[e.id]!==void 0)return c[e.id];let n;switch(e.type){case"DirectionalLight":n={direction:new j,color:new At};break;case"SpotLight":n={position:new j,direction:new j,color:new At,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":n={position:new j,color:new At,distance:0,decay:0};break;case"HemisphereLight":n={direction:new j,skyColor:new At,groundColor:new At};break;case"RectAreaLight":n={color:new At,position:new j,halfWidth:new j,halfHeight:new j};break}return c[e.id]=n,n}}}function jT(){const c={};return{get:function(e){if(c[e.id]!==void 0)return c[e.id];let n;switch(e.type){case"DirectionalLight":n={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Je};break;case"SpotLight":n={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Je};break;case"PointLight":n={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Je,shadowCameraNear:1,shadowCameraFar:1e3};break}return c[e.id]=n,n}}}let QT=0;function ew(c,e){return(e.castShadow?2:0)-(c.castShadow?2:0)+(e.map?1:0)-(c.map?1:0)}function tw(c,e){const n=new JT,r=jT(),a={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1,numSpotMaps:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotLightMap:[],spotShadow:[],spotShadowMap:[],spotLightMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],numSpotLightShadowsWithMaps:0};for(let y=0;y<9;y++)a.probe.push(new j);const l=new j,u=new fn,d=new fn;function g(y,S){let E=0,w=0,C=0;for(let Pe=0;Pe<9;Pe++)a.probe[Pe].set(0,0,0);let I=0,U=0,A=0,z=0,F=0,k=0,Y=0,K=0,se=0,le=0;y.sort(ew);const G=S===!0?Math.PI:1;for(let Pe=0,Ue=y.length;Pe<Ue;Pe++){const ge=y[Pe],Se=ge.color,De=ge.intensity,$e=ge.distance,Ze=ge.shadow&&ge.shadow.map?ge.shadow.map.texture:null;if(ge.isAmbientLight)E+=Se.r*De*G,w+=Se.g*De*G,C+=Se.b*De*G;else if(ge.isLightProbe)for(let Ke=0;Ke<9;Ke++)a.probe[Ke].addScaledVector(ge.sh.coefficients[Ke],De);else if(ge.isDirectionalLight){const Ke=n.get(ge);if(Ke.color.copy(ge.color).multiplyScalar(ge.intensity*G),ge.castShadow){const ct=ge.shadow,Qe=r.get(ge);Qe.shadowBias=ct.bias,Qe.shadowNormalBias=ct.normalBias,Qe.shadowRadius=ct.radius,Qe.shadowMapSize=ct.mapSize,a.directionalShadow[I]=Qe,a.directionalShadowMap[I]=Ze,a.directionalShadowMatrix[I]=ge.shadow.matrix,k++}a.directional[I]=Ke,I++}else if(ge.isSpotLight){const Ke=n.get(ge);Ke.position.setFromMatrixPosition(ge.matrixWorld),Ke.color.copy(Se).multiplyScalar(De*G),Ke.distance=$e,Ke.coneCos=Math.cos(ge.angle),Ke.penumbraCos=Math.cos(ge.angle*(1-ge.penumbra)),Ke.decay=ge.decay,a.spot[A]=Ke;const ct=ge.shadow;if(ge.map&&(a.spotLightMap[se]=ge.map,se++,ct.updateMatrices(ge),ge.castShadow&&le++),a.spotLightMatrix[A]=ct.matrix,ge.castShadow){const Qe=r.get(ge);Qe.shadowBias=ct.bias,Qe.shadowNormalBias=ct.normalBias,Qe.shadowRadius=ct.radius,Qe.shadowMapSize=ct.mapSize,a.spotShadow[A]=Qe,a.spotShadowMap[A]=Ze,K++}A++}else if(ge.isRectAreaLight){const Ke=n.get(ge);Ke.color.copy(Se).multiplyScalar(De),Ke.halfWidth.set(ge.width*.5,0,0),Ke.halfHeight.set(0,ge.height*.5,0),a.rectArea[z]=Ke,z++}else if(ge.isPointLight){const Ke=n.get(ge);if(Ke.color.copy(ge.color).multiplyScalar(ge.intensity*G),Ke.distance=ge.distance,Ke.decay=ge.decay,ge.castShadow){const ct=ge.shadow,Qe=r.get(ge);Qe.shadowBias=ct.bias,Qe.shadowNormalBias=ct.normalBias,Qe.shadowRadius=ct.radius,Qe.shadowMapSize=ct.mapSize,Qe.shadowCameraNear=ct.camera.near,Qe.shadowCameraFar=ct.camera.far,a.pointShadow[U]=Qe,a.pointShadowMap[U]=Ze,a.pointShadowMatrix[U]=ge.shadow.matrix,Y++}a.point[U]=Ke,U++}else if(ge.isHemisphereLight){const Ke=n.get(ge);Ke.skyColor.copy(ge.color).multiplyScalar(De*G),Ke.groundColor.copy(ge.groundColor).multiplyScalar(De*G),a.hemi[F]=Ke,F++}}z>0&&(e.isWebGL2||c.has("OES_texture_float_linear")===!0?(a.rectAreaLTC1=gt.LTC_FLOAT_1,a.rectAreaLTC2=gt.LTC_FLOAT_2):c.has("OES_texture_half_float_linear")===!0?(a.rectAreaLTC1=gt.LTC_HALF_1,a.rectAreaLTC2=gt.LTC_HALF_2):console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.")),a.ambient[0]=E,a.ambient[1]=w,a.ambient[2]=C;const ee=a.hash;(ee.directionalLength!==I||ee.pointLength!==U||ee.spotLength!==A||ee.rectAreaLength!==z||ee.hemiLength!==F||ee.numDirectionalShadows!==k||ee.numPointShadows!==Y||ee.numSpotShadows!==K||ee.numSpotMaps!==se)&&(a.directional.length=I,a.spot.length=A,a.rectArea.length=z,a.point.length=U,a.hemi.length=F,a.directionalShadow.length=k,a.directionalShadowMap.length=k,a.pointShadow.length=Y,a.pointShadowMap.length=Y,a.spotShadow.length=K,a.spotShadowMap.length=K,a.directionalShadowMatrix.length=k,a.pointShadowMatrix.length=Y,a.spotLightMatrix.length=K+se-le,a.spotLightMap.length=se,a.numSpotLightShadowsWithMaps=le,ee.directionalLength=I,ee.pointLength=U,ee.spotLength=A,ee.rectAreaLength=z,ee.hemiLength=F,ee.numDirectionalShadows=k,ee.numPointShadows=Y,ee.numSpotShadows=K,ee.numSpotMaps=se,a.version=QT++)}function _(y,S){let E=0,w=0,C=0,I=0,U=0;const A=S.matrixWorldInverse;for(let z=0,F=y.length;z<F;z++){const k=y[z];if(k.isDirectionalLight){const Y=a.directional[E];Y.direction.setFromMatrixPosition(k.matrixWorld),l.setFromMatrixPosition(k.target.matrixWorld),Y.direction.sub(l),Y.direction.transformDirection(A),E++}else if(k.isSpotLight){const Y=a.spot[C];Y.position.setFromMatrixPosition(k.matrixWorld),Y.position.applyMatrix4(A),Y.direction.setFromMatrixPosition(k.matrixWorld),l.setFromMatrixPosition(k.target.matrixWorld),Y.direction.sub(l),Y.direction.transformDirection(A),C++}else if(k.isRectAreaLight){const Y=a.rectArea[I];Y.position.setFromMatrixPosition(k.matrixWorld),Y.position.applyMatrix4(A),d.identity(),u.copy(k.matrixWorld),u.premultiply(A),d.extractRotation(u),Y.halfWidth.set(k.width*.5,0,0),Y.halfHeight.set(0,k.height*.5,0),Y.halfWidth.applyMatrix4(d),Y.halfHeight.applyMatrix4(d),I++}else if(k.isPointLight){const Y=a.point[w];Y.position.setFromMatrixPosition(k.matrixWorld),Y.position.applyMatrix4(A),w++}else if(k.isHemisphereLight){const Y=a.hemi[U];Y.direction.setFromMatrixPosition(k.matrixWorld),Y.direction.transformDirection(A),U++}}}return{setup:g,setupView:_,state:a}}function Zg(c,e){const n=new tw(c,e),r=[],a=[];function l(){r.length=0,a.length=0}function u(S){r.push(S)}function d(S){a.push(S)}function g(S){n.setup(r,S)}function _(S){n.setupView(r,S)}return{init:l,state:{lightsArray:r,shadowsArray:a,lights:n},setupLights:g,setupLightsView:_,pushLight:u,pushShadow:d}}function nw(c,e){let n=new WeakMap;function r(l,u=0){const d=n.get(l);let g;return d===void 0?(g=new Zg(c,e),n.set(l,[g])):u>=d.length?(g=new Zg(c,e),d.push(g)):g=d[u],g}function a(){n=new WeakMap}return{get:r,dispose:a}}class Md extends Gi{constructor(e){super(),this.isMeshDepthMaterial=!0,this.type="MeshDepthMaterial",this.depthPacking=Km,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.setValues(e)}copy(e){return super.copy(e),this.depthPacking=e.depthPacking,this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this}}class Sd extends Gi{constructor(e){super(),this.isMeshDistanceMaterial=!0,this.type="MeshDistanceMaterial",this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.setValues(e)}copy(e){return super.copy(e),this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this}}const iw=`void main() {
	gl_Position = vec4( position, 1.0 );
}`,rw=`uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;
#include <packing>
void main() {
	const float samples = float( VSM_SAMPLES );
	float mean = 0.0;
	float squared_mean = 0.0;
	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );
	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;
	for ( float i = 0.0; i < samples; i ++ ) {
		float uvOffset = uvStart + i * uvStride;
		#ifdef HORIZONTAL_PASS
			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );
			mean += distribution.x;
			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;
		#else
			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );
			mean += depth;
			squared_mean += depth * depth;
		#endif
	}
	mean = mean / samples;
	squared_mean = squared_mean / samples;
	float std_dev = sqrt( squared_mean - mean * mean );
	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );
}`;function sw(c,e,n){let r=new ou;const a=new Je,l=new Je,u=new Hn,d=new Md({depthPacking:$m}),g=new Sd,_={},y=n.maxTextureSize,S={[b]:T,[T]:b,[P]:P},E=new ps({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new Je},radius:{value:4}},vertexShader:iw,fragmentShader:rw}),w=E.clone();w.defines.HORIZONTAL_PASS=1;const C=new Mn;C.setAttribute("position",new Xn(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const I=new Ni(C,E),U=this;this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=v;let A=this.type;this.render=function(Y,K,se){if(U.enabled===!1||U.autoUpdate===!1&&U.needsUpdate===!1||Y.length===0)return;const le=c.getRenderTarget(),G=c.getActiveCubeFace(),ee=c.getActiveMipmapLevel(),Pe=c.state;Pe.setBlending(L),Pe.buffers.color.setClear(1,1,1,1),Pe.buffers.depth.setTest(!0),Pe.setScissorTest(!1);const Ue=A!==M&&this.type===M,ge=A===M&&this.type!==M;for(let Se=0,De=Y.length;Se<De;Se++){const $e=Y[Se],Ze=$e.shadow;if(Ze===void 0){console.warn("THREE.WebGLShadowMap:",$e,"has no shadow.");continue}if(Ze.autoUpdate===!1&&Ze.needsUpdate===!1)continue;a.copy(Ze.mapSize);const Ke=Ze.getFrameExtents();if(a.multiply(Ke),l.copy(Ze.mapSize),(a.x>y||a.y>y)&&(a.x>y&&(l.x=Math.floor(y/Ke.x),a.x=l.x*Ke.x,Ze.mapSize.x=l.x),a.y>y&&(l.y=Math.floor(y/Ke.y),a.y=l.y*Ke.y,Ze.mapSize.y=l.y)),Ze.map===null||Ue===!0||ge===!0){const Qe=this.type!==M?{minFilter:st,magFilter:st}:{};Ze.map!==null&&Ze.map.dispose(),Ze.map=new Kr(a.x,a.y,Qe),Ze.map.texture.name=$e.name+".shadowMap",Ze.camera.updateProjectionMatrix()}c.setRenderTarget(Ze.map),c.clear();const ct=Ze.getViewportCount();for(let Qe=0;Qe<ct;Qe++){const Ot=Ze.getViewport(Qe);u.set(l.x*Ot.x,l.y*Ot.y,l.x*Ot.z,l.y*Ot.w),Pe.viewport(u),Ze.updateMatrices($e,Qe),r=Ze.getFrustum(),k(K,se,Ze.camera,$e,this.type)}Ze.isPointLightShadow!==!0&&this.type===M&&z(Ze,se),Ze.needsUpdate=!1}A=this.type,U.needsUpdate=!1,c.setRenderTarget(le,G,ee)};function z(Y,K){const se=e.update(I);E.defines.VSM_SAMPLES!==Y.blurSamples&&(E.defines.VSM_SAMPLES=Y.blurSamples,w.defines.VSM_SAMPLES=Y.blurSamples,E.needsUpdate=!0,w.needsUpdate=!0),Y.mapPass===null&&(Y.mapPass=new Kr(a.x,a.y)),E.uniforms.shadow_pass.value=Y.map.texture,E.uniforms.resolution.value=Y.mapSize,E.uniforms.radius.value=Y.radius,c.setRenderTarget(Y.mapPass),c.clear(),c.renderBufferDirect(K,null,se,E,I,null),w.uniforms.shadow_pass.value=Y.mapPass.texture,w.uniforms.resolution.value=Y.mapSize,w.uniforms.radius.value=Y.radius,c.setRenderTarget(Y.map),c.clear(),c.renderBufferDirect(K,null,se,w,I,null)}function F(Y,K,se,le){let G=null;const ee=se.isPointLight===!0?Y.customDistanceMaterial:Y.customDepthMaterial;if(ee!==void 0)G=ee;else if(G=se.isPointLight===!0?g:d,c.localClippingEnabled&&K.clipShadows===!0&&Array.isArray(K.clippingPlanes)&&K.clippingPlanes.length!==0||K.displacementMap&&K.displacementScale!==0||K.alphaMap&&K.alphaTest>0||K.map&&K.alphaTest>0){const Pe=G.uuid,Ue=K.uuid;let ge=_[Pe];ge===void 0&&(ge={},_[Pe]=ge);let Se=ge[Ue];Se===void 0&&(Se=G.clone(),ge[Ue]=Se),G=Se}if(G.visible=K.visible,G.wireframe=K.wireframe,le===M?G.side=K.shadowSide!==null?K.shadowSide:K.side:G.side=K.shadowSide!==null?K.shadowSide:S[K.side],G.alphaMap=K.alphaMap,G.alphaTest=K.alphaTest,G.map=K.map,G.clipShadows=K.clipShadows,G.clippingPlanes=K.clippingPlanes,G.clipIntersection=K.clipIntersection,G.displacementMap=K.displacementMap,G.displacementScale=K.displacementScale,G.displacementBias=K.displacementBias,G.wireframeLinewidth=K.wireframeLinewidth,G.linewidth=K.linewidth,se.isPointLight===!0&&G.isMeshDistanceMaterial===!0){const Pe=c.properties.get(G);Pe.light=se}return G}function k(Y,K,se,le,G){if(Y.visible===!1)return;if(Y.layers.test(K.layers)&&(Y.isMesh||Y.isLine||Y.isPoints)&&(Y.castShadow||Y.receiveShadow&&G===M)&&(!Y.frustumCulled||r.intersectsObject(Y))){Y.modelViewMatrix.multiplyMatrices(se.matrixWorldInverse,Y.matrixWorld);const Ue=e.update(Y),ge=Y.material;if(Array.isArray(ge)){const Se=Ue.groups;for(let De=0,$e=Se.length;De<$e;De++){const Ze=Se[De],Ke=ge[Ze.materialIndex];if(Ke&&Ke.visible){const ct=F(Y,Ke,le,G);c.renderBufferDirect(se,null,Ue,ct,Y,Ze)}}}else if(ge.visible){const Se=F(Y,ge,le,G);c.renderBufferDirect(se,null,Ue,Se,Y,null)}}const Pe=Y.children;for(let Ue=0,ge=Pe.length;Ue<ge;Ue++)k(Pe[Ue],K,se,le,G)}}function aw(c,e,n){const r=n.isWebGL2;function a(){let ue=!1;const Oe=new Hn;let ot=null;const Rt=new Hn(0,0,0,0);return{setMask:function(Gt){ot!==Gt&&!ue&&(c.colorMask(Gt,Gt,Gt,Gt),ot=Gt)},setLocked:function(Gt){ue=Gt},setClear:function(Gt,qn,Yn,Vi,da){da===!0&&(Gt*=Vi,qn*=Vi,Yn*=Vi),Oe.set(Gt,qn,Yn,Vi),Rt.equals(Oe)===!1&&(c.clearColor(Gt,qn,Yn,Vi),Rt.copy(Oe))},reset:function(){ue=!1,ot=null,Rt.set(-1,0,0,0)}}}function l(){let ue=!1,Oe=null,ot=null,Rt=null;return{setTest:function(Gt){Gt?he(c.DEPTH_TEST):rn(c.DEPTH_TEST)},setMask:function(Gt){Oe!==Gt&&!ue&&(c.depthMask(Gt),Oe=Gt)},setFunc:function(Gt){if(ot!==Gt){switch(Gt){case It:c.depthFunc(c.NEVER);break;case lt:c.depthFunc(c.ALWAYS);break;case Ce:c.depthFunc(c.LESS);break;case ke:c.depthFunc(c.LEQUAL);break;case ut:c.depthFunc(c.EQUAL);break;case St:c.depthFunc(c.GEQUAL);break;case fe:c.depthFunc(c.GREATER);break;case tn:c.depthFunc(c.NOTEQUAL);break;default:c.depthFunc(c.LEQUAL)}ot=Gt}},setLocked:function(Gt){ue=Gt},setClear:function(Gt){Rt!==Gt&&(c.clearDepth(Gt),Rt=Gt)},reset:function(){ue=!1,Oe=null,ot=null,Rt=null}}}function u(){let ue=!1,Oe=null,ot=null,Rt=null,Gt=null,qn=null,Yn=null,Vi=null,da=null;return{setTest:function(gi){ue||(gi?he(c.STENCIL_TEST):rn(c.STENCIL_TEST))},setMask:function(gi){Oe!==gi&&!ue&&(c.stencilMask(gi),Oe=gi)},setFunc:function(gi,Ur,_s){(ot!==gi||Rt!==Ur||Gt!==_s)&&(c.stencilFunc(gi,Ur,_s),ot=gi,Rt=Ur,Gt=_s)},setOp:function(gi,Ur,_s){(qn!==gi||Yn!==Ur||Vi!==_s)&&(c.stencilOp(gi,Ur,_s),qn=gi,Yn=Ur,Vi=_s)},setLocked:function(gi){ue=gi},setClear:function(gi){da!==gi&&(c.clearStencil(gi),da=gi)},reset:function(){ue=!1,Oe=null,ot=null,Rt=null,Gt=null,qn=null,Yn=null,Vi=null,da=null}}}const d=new a,g=new l,_=new u,y=new WeakMap,S=new WeakMap;let E={},w={},C=new WeakMap,I=[],U=null,A=!1,z=null,F=null,k=null,Y=null,K=null,se=null,le=null,G=!1,ee=null,Pe=null,Ue=null,ge=null,Se=null;const De=c.getParameter(c.MAX_COMBINED_TEXTURE_IMAGE_UNITS);let $e=!1,Ze=0;const Ke=c.getParameter(c.VERSION);Ke.indexOf("WebGL")!==-1?(Ze=parseFloat(/^WebGL (\d)/.exec(Ke)[1]),$e=Ze>=1):Ke.indexOf("OpenGL ES")!==-1&&(Ze=parseFloat(/^OpenGL ES (\d)/.exec(Ke)[1]),$e=Ze>=2);let ct=null,Qe={};const Ot=c.getParameter(c.SCISSOR_BOX),pt=c.getParameter(c.VIEWPORT),Fe=new Hn().fromArray(Ot),je=new Hn().fromArray(pt);function vt(ue,Oe,ot,Rt){const Gt=new Uint8Array(4),qn=c.createTexture();c.bindTexture(ue,qn),c.texParameteri(ue,c.TEXTURE_MIN_FILTER,c.NEAREST),c.texParameteri(ue,c.TEXTURE_MAG_FILTER,c.NEAREST);for(let Yn=0;Yn<ot;Yn++)r&&(ue===c.TEXTURE_3D||ue===c.TEXTURE_2D_ARRAY)?c.texImage3D(Oe,0,c.RGBA,1,1,Rt,0,c.RGBA,c.UNSIGNED_BYTE,Gt):c.texImage2D(Oe+Yn,0,c.RGBA,1,1,0,c.RGBA,c.UNSIGNED_BYTE,Gt);return qn}const bt={};bt[c.TEXTURE_2D]=vt(c.TEXTURE_2D,c.TEXTURE_2D,1),bt[c.TEXTURE_CUBE_MAP]=vt(c.TEXTURE_CUBE_MAP,c.TEXTURE_CUBE_MAP_POSITIVE_X,6),r&&(bt[c.TEXTURE_2D_ARRAY]=vt(c.TEXTURE_2D_ARRAY,c.TEXTURE_2D_ARRAY,1,1),bt[c.TEXTURE_3D]=vt(c.TEXTURE_3D,c.TEXTURE_3D,1,1)),d.setClear(0,0,0,1),g.setClear(1),_.setClear(0),he(c.DEPTH_TEST),g.setFunc(ke),Mt(!1),Kt(o),he(c.CULL_FACE),tt(L);function he(ue){E[ue]!==!0&&(c.enable(ue),E[ue]=!0)}function rn(ue){E[ue]!==!1&&(c.disable(ue),E[ue]=!1)}function an(ue,Oe){return w[ue]!==Oe?(c.bindFramebuffer(ue,Oe),w[ue]=Oe,r&&(ue===c.DRAW_FRAMEBUFFER&&(w[c.FRAMEBUFFER]=Oe),ue===c.FRAMEBUFFER&&(w[c.DRAW_FRAMEBUFFER]=Oe)),!0):!1}function dt(ue,Oe){let ot=I,Rt=!1;if(ue)if(ot=C.get(Oe),ot===void 0&&(ot=[],C.set(Oe,ot)),ue.isWebGLMultipleRenderTargets){const Gt=ue.texture;if(ot.length!==Gt.length||ot[0]!==c.COLOR_ATTACHMENT0){for(let qn=0,Yn=Gt.length;qn<Yn;qn++)ot[qn]=c.COLOR_ATTACHMENT0+qn;ot.length=Gt.length,Rt=!0}}else ot[0]!==c.COLOR_ATTACHMENT0&&(ot[0]=c.COLOR_ATTACHMENT0,Rt=!0);else ot[0]!==c.BACK&&(ot[0]=c.BACK,Rt=!0);Rt&&(n.isWebGL2?c.drawBuffers(ot):e.get("WEBGL_draw_buffers").drawBuffersWEBGL(ot))}function kt(ue){return U!==ue?(c.useProgram(ue),U=ue,!0):!1}const et={[H]:c.FUNC_ADD,[Q]:c.FUNC_SUBTRACT,[re]:c.FUNC_REVERSE_SUBTRACT};if(r)et[oe]=c.MIN,et[B]=c.MAX;else{const ue=e.get("EXT_blend_minmax");ue!==null&&(et[oe]=ue.MIN_EXT,et[B]=ue.MAX_EXT)}const Ve={[te]:c.ZERO,[we]:c.ONE,[Ae]:c.SRC_COLOR,[xe]:c.SRC_ALPHA,[Ye]:c.SRC_ALPHA_SATURATE,[Le]:c.DST_COLOR,[He]:c.DST_ALPHA,[de]:c.ONE_MINUS_SRC_COLOR,[ye]:c.ONE_MINUS_SRC_ALPHA,[nt]:c.ONE_MINUS_DST_COLOR,[be]:c.ONE_MINUS_DST_ALPHA};function tt(ue,Oe,ot,Rt,Gt,qn,Yn,Vi){if(ue===L){A===!0&&(rn(c.BLEND),A=!1);return}if(A===!1&&(he(c.BLEND),A=!0),ue!==q){if(ue!==z||Vi!==G){if((F!==H||K!==H)&&(c.blendEquation(c.FUNC_ADD),F=H,K=H),Vi)switch(ue){case D:c.blendFuncSeparate(c.ONE,c.ONE_MINUS_SRC_ALPHA,c.ONE,c.ONE_MINUS_SRC_ALPHA);break;case R:c.blendFunc(c.ONE,c.ONE);break;case W:c.blendFuncSeparate(c.ZERO,c.ONE_MINUS_SRC_COLOR,c.ZERO,c.ONE);break;case V:c.blendFuncSeparate(c.ZERO,c.SRC_COLOR,c.ZERO,c.SRC_ALPHA);break;default:console.error("THREE.WebGLState: Invalid blending: ",ue);break}else switch(ue){case D:c.blendFuncSeparate(c.SRC_ALPHA,c.ONE_MINUS_SRC_ALPHA,c.ONE,c.ONE_MINUS_SRC_ALPHA);break;case R:c.blendFunc(c.SRC_ALPHA,c.ONE);break;case W:c.blendFuncSeparate(c.ZERO,c.ONE_MINUS_SRC_COLOR,c.ZERO,c.ONE);break;case V:c.blendFunc(c.ZERO,c.SRC_COLOR);break;default:console.error("THREE.WebGLState: Invalid blending: ",ue);break}k=null,Y=null,se=null,le=null,z=ue,G=Vi}return}Gt=Gt||Oe,qn=qn||ot,Yn=Yn||Rt,(Oe!==F||Gt!==K)&&(c.blendEquationSeparate(et[Oe],et[Gt]),F=Oe,K=Gt),(ot!==k||Rt!==Y||qn!==se||Yn!==le)&&(c.blendFuncSeparate(Ve[ot],Ve[Rt],Ve[qn],Ve[Yn]),k=ot,Y=Rt,se=qn,le=Yn),z=ue,G=!1}function Lt(ue,Oe){ue.side===P?rn(c.CULL_FACE):he(c.CULL_FACE);let ot=ue.side===T;Oe&&(ot=!ot),Mt(ot),ue.blending===D&&ue.transparent===!1?tt(L):tt(ue.blending,ue.blendEquation,ue.blendSrc,ue.blendDst,ue.blendEquationAlpha,ue.blendSrcAlpha,ue.blendDstAlpha,ue.premultipliedAlpha),g.setFunc(ue.depthFunc),g.setTest(ue.depthTest),g.setMask(ue.depthWrite),d.setMask(ue.colorWrite);const Rt=ue.stencilWrite;_.setTest(Rt),Rt&&(_.setMask(ue.stencilWriteMask),_.setFunc(ue.stencilFunc,ue.stencilRef,ue.stencilFuncMask),_.setOp(ue.stencilFail,ue.stencilZFail,ue.stencilZPass)),qt(ue.polygonOffset,ue.polygonOffsetFactor,ue.polygonOffsetUnits),ue.alphaToCoverage===!0?he(c.SAMPLE_ALPHA_TO_COVERAGE):rn(c.SAMPLE_ALPHA_TO_COVERAGE)}function Mt(ue){ee!==ue&&(ue?c.frontFace(c.CW):c.frontFace(c.CCW),ee=ue)}function Kt(ue){ue!==s?(he(c.CULL_FACE),ue!==Pe&&(ue===o?c.cullFace(c.BACK):ue===f?c.cullFace(c.FRONT):c.cullFace(c.FRONT_AND_BACK))):rn(c.CULL_FACE),Pe=ue}function $t(ue){ue!==Ue&&($e&&c.lineWidth(ue),Ue=ue)}function qt(ue,Oe,ot){ue?(he(c.POLYGON_OFFSET_FILL),(ge!==Oe||Se!==ot)&&(c.polygonOffset(Oe,ot),ge=Oe,Se=ot)):rn(c.POLYGON_OFFSET_FILL)}function Tn(ue){ue?he(c.SCISSOR_TEST):rn(c.SCISSOR_TEST)}function zn(ue){ue===void 0&&(ue=c.TEXTURE0+De-1),ct!==ue&&(c.activeTexture(ue),ct=ue)}function ie(ue,Oe,ot){ot===void 0&&(ct===null?ot=c.TEXTURE0+De-1:ot=ct);let Rt=Qe[ot];Rt===void 0&&(Rt={type:void 0,texture:void 0},Qe[ot]=Rt),(Rt.type!==ue||Rt.texture!==Oe)&&(ct!==ot&&(c.activeTexture(ot),ct=ot),c.bindTexture(ue,Oe||bt[ue]),Rt.type=ue,Rt.texture=Oe)}function Z(){const ue=Qe[ct];ue!==void 0&&ue.type!==void 0&&(c.bindTexture(ue.type,null),ue.type=void 0,ue.texture=void 0)}function Te(){try{c.compressedTexImage2D.apply(c,arguments)}catch(ue){console.error("THREE.WebGLState:",ue)}}function at(){try{c.compressedTexImage3D.apply(c,arguments)}catch(ue){console.error("THREE.WebGLState:",ue)}}function ht(){try{c.texSubImage2D.apply(c,arguments)}catch(ue){console.error("THREE.WebGLState:",ue)}}function Et(){try{c.texSubImage3D.apply(c,arguments)}catch(ue){console.error("THREE.WebGLState:",ue)}}function en(){try{c.compressedTexSubImage2D.apply(c,arguments)}catch(ue){console.error("THREE.WebGLState:",ue)}}function Pt(){try{c.compressedTexSubImage3D.apply(c,arguments)}catch(ue){console.error("THREE.WebGLState:",ue)}}function Ge(){try{c.texStorage2D.apply(c,arguments)}catch(ue){console.error("THREE.WebGLState:",ue)}}function Bt(){try{c.texStorage3D.apply(c,arguments)}catch(ue){console.error("THREE.WebGLState:",ue)}}function Yt(){try{c.texImage2D.apply(c,arguments)}catch(ue){console.error("THREE.WebGLState:",ue)}}function Jt(){try{c.texImage3D.apply(c,arguments)}catch(ue){console.error("THREE.WebGLState:",ue)}}function Dt(ue){Fe.equals(ue)===!1&&(c.scissor(ue.x,ue.y,ue.z,ue.w),Fe.copy(ue))}function Ht(ue){je.equals(ue)===!1&&(c.viewport(ue.x,ue.y,ue.z,ue.w),je.copy(ue))}function In(ue,Oe){let ot=S.get(Oe);ot===void 0&&(ot=new WeakMap,S.set(Oe,ot));let Rt=ot.get(ue);Rt===void 0&&(Rt=c.getUniformBlockIndex(Oe,ue.name),ot.set(ue,Rt))}function Vn(ue,Oe){const Rt=S.get(Oe).get(ue);y.get(Oe)!==Rt&&(c.uniformBlockBinding(Oe,Rt,ue.__bindingPointIndex),y.set(Oe,Rt))}function mi(){c.disable(c.BLEND),c.disable(c.CULL_FACE),c.disable(c.DEPTH_TEST),c.disable(c.POLYGON_OFFSET_FILL),c.disable(c.SCISSOR_TEST),c.disable(c.STENCIL_TEST),c.disable(c.SAMPLE_ALPHA_TO_COVERAGE),c.blendEquation(c.FUNC_ADD),c.blendFunc(c.ONE,c.ZERO),c.blendFuncSeparate(c.ONE,c.ZERO,c.ONE,c.ZERO),c.colorMask(!0,!0,!0,!0),c.clearColor(0,0,0,0),c.depthMask(!0),c.depthFunc(c.LESS),c.clearDepth(1),c.stencilMask(4294967295),c.stencilFunc(c.ALWAYS,0,4294967295),c.stencilOp(c.KEEP,c.KEEP,c.KEEP),c.clearStencil(0),c.cullFace(c.BACK),c.frontFace(c.CCW),c.polygonOffset(0,0),c.activeTexture(c.TEXTURE0),c.bindFramebuffer(c.FRAMEBUFFER,null),r===!0&&(c.bindFramebuffer(c.DRAW_FRAMEBUFFER,null),c.bindFramebuffer(c.READ_FRAMEBUFFER,null)),c.useProgram(null),c.lineWidth(1),c.scissor(0,0,c.canvas.width,c.canvas.height),c.viewport(0,0,c.canvas.width,c.canvas.height),E={},ct=null,Qe={},w={},C=new WeakMap,I=[],U=null,A=!1,z=null,F=null,k=null,Y=null,K=null,se=null,le=null,G=!1,ee=null,Pe=null,Ue=null,ge=null,Se=null,Fe.set(0,0,c.canvas.width,c.canvas.height),je.set(0,0,c.canvas.width,c.canvas.height),d.reset(),g.reset(),_.reset()}return{buffers:{color:d,depth:g,stencil:_},enable:he,disable:rn,bindFramebuffer:an,drawBuffers:dt,useProgram:kt,setBlending:tt,setMaterial:Lt,setFlipSided:Mt,setCullFace:Kt,setLineWidth:$t,setPolygonOffset:qt,setScissorTest:Tn,activeTexture:zn,bindTexture:ie,unbindTexture:Z,compressedTexImage2D:Te,compressedTexImage3D:at,texImage2D:Yt,texImage3D:Jt,updateUBOMapping:In,uniformBlockBinding:Vn,texStorage2D:Ge,texStorage3D:Bt,texSubImage2D:ht,texSubImage3D:Et,compressedTexSubImage2D:en,compressedTexSubImage3D:Pt,scissor:Dt,viewport:Ht,reset:mi}}function ow(c,e,n,r,a,l,u){const d=a.isWebGL2,g=a.maxTextures,_=a.maxCubemapSize,y=a.maxTextureSize,S=a.maxSamples,E=e.has("WEBGL_multisampled_render_to_texture")?e.get("WEBGL_multisampled_render_to_texture"):null,w=typeof navigator>"u"?!1:/OculusBrowser/g.test(navigator.userAgent),C=new WeakMap;let I;const U=new WeakMap;let A=!1;try{A=typeof OffscreenCanvas<"u"&&new OffscreenCanvas(1,1).getContext("2d")!==null}catch{}function z(ie,Z){return A?new OffscreenCanvas(ie,Z):xc("canvas")}function F(ie,Z,Te,at){let ht=1;if((ie.width>at||ie.height>at)&&(ht=at/Math.max(ie.width,ie.height)),ht<1||Z===!0)if(typeof HTMLImageElement<"u"&&ie instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&ie instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&ie instanceof ImageBitmap){const Et=Z?tg:Math.floor,en=Et(ht*ie.width),Pt=Et(ht*ie.height);I===void 0&&(I=z(en,Pt));const Ge=Te?z(en,Pt):I;return Ge.width=en,Ge.height=Pt,Ge.getContext("2d").drawImage(ie,0,0,en,Pt),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+ie.width+"x"+ie.height+") to ("+en+"x"+Pt+")."),Ge}else return"data"in ie&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+ie.width+"x"+ie.height+")."),ie;return ie}function k(ie){return Yf(ie.width)&&Yf(ie.height)}function Y(ie){return d?!1:ie.wrapS!==qe||ie.wrapT!==qe||ie.minFilter!==st&&ie.minFilter!==ft}function K(ie,Z){return ie.generateMipmaps&&Z&&ie.minFilter!==st&&ie.minFilter!==ft}function se(ie){c.generateMipmap(ie)}function le(ie,Z,Te,at,ht=!1){if(d===!1)return Z;if(ie!==null){if(c[ie]!==void 0)return c[ie];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+ie+"'")}let Et=Z;return Z===c.RED&&(Te===c.FLOAT&&(Et=c.R32F),Te===c.HALF_FLOAT&&(Et=c.R16F),Te===c.UNSIGNED_BYTE&&(Et=c.R8)),Z===c.RG&&(Te===c.FLOAT&&(Et=c.RG32F),Te===c.HALF_FLOAT&&(Et=c.RG16F),Te===c.UNSIGNED_BYTE&&(Et=c.RG8)),Z===c.RGBA&&(Te===c.FLOAT&&(Et=c.RGBA32F),Te===c.HALF_FLOAT&&(Et=c.RGBA16F),Te===c.UNSIGNED_BYTE&&(Et=at===gn&&ht===!1?c.SRGB8_ALPHA8:c.RGBA8),Te===c.UNSIGNED_SHORT_4_4_4_4&&(Et=c.RGBA4),Te===c.UNSIGNED_SHORT_5_5_5_1&&(Et=c.RGB5_A1)),(Et===c.R16F||Et===c.R32F||Et===c.RG16F||Et===c.RG32F||Et===c.RGBA16F||Et===c.RGBA32F)&&e.get("EXT_color_buffer_float"),Et}function G(ie,Z,Te){return K(ie,Te)===!0||ie.isFramebufferTexture&&ie.minFilter!==st&&ie.minFilter!==ft?Math.log2(Math.max(Z.width,Z.height))+1:ie.mipmaps!==void 0&&ie.mipmaps.length>0?ie.mipmaps.length:ie.isCompressedTexture&&Array.isArray(ie.image)?Z.mipmaps.length:1}function ee(ie){return ie===st||ie===ae||ie===Ee?c.NEAREST:c.LINEAR}function Pe(ie){const Z=ie.target;Z.removeEventListener("dispose",Pe),ge(Z),Z.isVideoTexture&&C.delete(Z)}function Ue(ie){const Z=ie.target;Z.removeEventListener("dispose",Ue),De(Z)}function ge(ie){const Z=r.get(ie);if(Z.__webglInit===void 0)return;const Te=ie.source,at=U.get(Te);if(at){const ht=at[Z.__cacheKey];ht.usedTimes--,ht.usedTimes===0&&Se(ie),Object.keys(at).length===0&&U.delete(Te)}r.remove(ie)}function Se(ie){const Z=r.get(ie);c.deleteTexture(Z.__webglTexture);const Te=ie.source,at=U.get(Te);delete at[Z.__cacheKey],u.memory.textures--}function De(ie){const Z=ie.texture,Te=r.get(ie),at=r.get(Z);if(at.__webglTexture!==void 0&&(c.deleteTexture(at.__webglTexture),u.memory.textures--),ie.depthTexture&&ie.depthTexture.dispose(),ie.isWebGLCubeRenderTarget)for(let ht=0;ht<6;ht++)c.deleteFramebuffer(Te.__webglFramebuffer[ht]),Te.__webglDepthbuffer&&c.deleteRenderbuffer(Te.__webglDepthbuffer[ht]);else{if(c.deleteFramebuffer(Te.__webglFramebuffer),Te.__webglDepthbuffer&&c.deleteRenderbuffer(Te.__webglDepthbuffer),Te.__webglMultisampledFramebuffer&&c.deleteFramebuffer(Te.__webglMultisampledFramebuffer),Te.__webglColorRenderbuffer)for(let ht=0;ht<Te.__webglColorRenderbuffer.length;ht++)Te.__webglColorRenderbuffer[ht]&&c.deleteRenderbuffer(Te.__webglColorRenderbuffer[ht]);Te.__webglDepthRenderbuffer&&c.deleteRenderbuffer(Te.__webglDepthRenderbuffer)}if(ie.isWebGLMultipleRenderTargets)for(let ht=0,Et=Z.length;ht<Et;ht++){const en=r.get(Z[ht]);en.__webglTexture&&(c.deleteTexture(en.__webglTexture),u.memory.textures--),r.remove(Z[ht])}r.remove(Z),r.remove(ie)}let $e=0;function Ze(){$e=0}function Ke(){const ie=$e;return ie>=g&&console.warn("THREE.WebGLTextures: Trying to use "+ie+" texture units while this GPU supports only "+g),$e+=1,ie}function ct(ie){const Z=[];return Z.push(ie.wrapS),Z.push(ie.wrapT),Z.push(ie.wrapR||0),Z.push(ie.magFilter),Z.push(ie.minFilter),Z.push(ie.anisotropy),Z.push(ie.internalFormat),Z.push(ie.format),Z.push(ie.type),Z.push(ie.generateMipmaps),Z.push(ie.premultiplyAlpha),Z.push(ie.flipY),Z.push(ie.unpackAlignment),Z.push(ie.colorSpace),Z.join()}function Qe(ie,Z){const Te=r.get(ie);if(ie.isVideoTexture&&Tn(ie),ie.isRenderTargetTexture===!1&&ie.version>0&&Te.__version!==ie.version){const at=ie.image;if(at===null)console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");else if(at.complete===!1)console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");else{rn(Te,ie,Z);return}}n.bindTexture(c.TEXTURE_2D,Te.__webglTexture,c.TEXTURE0+Z)}function Ot(ie,Z){const Te=r.get(ie);if(ie.version>0&&Te.__version!==ie.version){rn(Te,ie,Z);return}n.bindTexture(c.TEXTURE_2D_ARRAY,Te.__webglTexture,c.TEXTURE0+Z)}function pt(ie,Z){const Te=r.get(ie);if(ie.version>0&&Te.__version!==ie.version){rn(Te,ie,Z);return}n.bindTexture(c.TEXTURE_3D,Te.__webglTexture,c.TEXTURE0+Z)}function Fe(ie,Z){const Te=r.get(ie);if(ie.version>0&&Te.__version!==ie.version){an(Te,ie,Z);return}n.bindTexture(c.TEXTURE_CUBE_MAP,Te.__webglTexture,c.TEXTURE0+Z)}const je={[Re]:c.REPEAT,[qe]:c.CLAMP_TO_EDGE,[it]:c.MIRRORED_REPEAT},vt={[st]:c.NEAREST,[ae]:c.NEAREST_MIPMAP_NEAREST,[Ee]:c.NEAREST_MIPMAP_LINEAR,[ft]:c.LINEAR,[Nt]:c.LINEAR_MIPMAP_NEAREST,[wt]:c.LINEAR_MIPMAP_LINEAR};function bt(ie,Z,Te){if(Te?(c.texParameteri(ie,c.TEXTURE_WRAP_S,je[Z.wrapS]),c.texParameteri(ie,c.TEXTURE_WRAP_T,je[Z.wrapT]),(ie===c.TEXTURE_3D||ie===c.TEXTURE_2D_ARRAY)&&c.texParameteri(ie,c.TEXTURE_WRAP_R,je[Z.wrapR]),c.texParameteri(ie,c.TEXTURE_MAG_FILTER,vt[Z.magFilter]),c.texParameteri(ie,c.TEXTURE_MIN_FILTER,vt[Z.minFilter])):(c.texParameteri(ie,c.TEXTURE_WRAP_S,c.CLAMP_TO_EDGE),c.texParameteri(ie,c.TEXTURE_WRAP_T,c.CLAMP_TO_EDGE),(ie===c.TEXTURE_3D||ie===c.TEXTURE_2D_ARRAY)&&c.texParameteri(ie,c.TEXTURE_WRAP_R,c.CLAMP_TO_EDGE),(Z.wrapS!==qe||Z.wrapT!==qe)&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."),c.texParameteri(ie,c.TEXTURE_MAG_FILTER,ee(Z.magFilter)),c.texParameteri(ie,c.TEXTURE_MIN_FILTER,ee(Z.minFilter)),Z.minFilter!==st&&Z.minFilter!==ft&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")),e.has("EXT_texture_filter_anisotropic")===!0){const at=e.get("EXT_texture_filter_anisotropic");if(Z.magFilter===st||Z.minFilter!==Ee&&Z.minFilter!==wt||Z.type===Ct&&e.has("OES_texture_float_linear")===!1||d===!1&&Z.type===Un&&e.has("OES_texture_half_float_linear")===!1)return;(Z.anisotropy>1||r.get(Z).__currentAnisotropy)&&(c.texParameterf(ie,at.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(Z.anisotropy,a.getMaxAnisotropy())),r.get(Z).__currentAnisotropy=Z.anisotropy)}}function he(ie,Z){let Te=!1;ie.__webglInit===void 0&&(ie.__webglInit=!0,Z.addEventListener("dispose",Pe));const at=Z.source;let ht=U.get(at);ht===void 0&&(ht={},U.set(at,ht));const Et=ct(Z);if(Et!==ie.__cacheKey){ht[Et]===void 0&&(ht[Et]={texture:c.createTexture(),usedTimes:0},u.memory.textures++,Te=!0),ht[Et].usedTimes++;const en=ht[ie.__cacheKey];en!==void 0&&(ht[ie.__cacheKey].usedTimes--,en.usedTimes===0&&Se(Z)),ie.__cacheKey=Et,ie.__webglTexture=ht[Et].texture}return Te}function rn(ie,Z,Te){let at=c.TEXTURE_2D;(Z.isDataArrayTexture||Z.isCompressedArrayTexture)&&(at=c.TEXTURE_2D_ARRAY),Z.isData3DTexture&&(at=c.TEXTURE_3D);const ht=he(ie,Z),Et=Z.source;n.bindTexture(at,ie.__webglTexture,c.TEXTURE0+Te);const en=r.get(Et);if(Et.version!==en.__version||ht===!0){n.activeTexture(c.TEXTURE0+Te),c.pixelStorei(c.UNPACK_FLIP_Y_WEBGL,Z.flipY),c.pixelStorei(c.UNPACK_PREMULTIPLY_ALPHA_WEBGL,Z.premultiplyAlpha),c.pixelStorei(c.UNPACK_ALIGNMENT,Z.unpackAlignment),c.pixelStorei(c.UNPACK_COLORSPACE_CONVERSION_WEBGL,c.NONE);const Pt=Y(Z)&&k(Z.image)===!1;let Ge=F(Z.image,Pt,!1,y);Ge=zn(Z,Ge);const Bt=k(Ge)||d,Yt=l.convert(Z.format,Z.colorSpace);let Jt=l.convert(Z.type),Dt=le(Z.internalFormat,Yt,Jt,Z.colorSpace);bt(at,Z,Bt);let Ht;const In=Z.mipmaps,Vn=d&&Z.isVideoTexture!==!0,mi=en.__version===void 0||ht===!0,ue=G(Z,Ge,Bt);if(Z.isDepthTexture)Dt=c.DEPTH_COMPONENT,d?Z.type===Ct?Dt=c.DEPTH_COMPONENT32F:Z.type===xt?Dt=c.DEPTH_COMPONENT24:Z.type===zi?Dt=c.DEPTH24_STENCIL8:Dt=c.DEPTH_COMPONENT16:Z.type===Ct&&console.error("WebGLRenderer: Floating point depth texture requires WebGL2."),Z.format===Wr&&Dt===c.DEPTH_COMPONENT&&Z.type!==Ie&&Z.type!==xt&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),Z.type=xt,Jt=l.convert(Z.type)),Z.format===As&&Dt===c.DEPTH_COMPONENT&&(Dt=c.DEPTH_STENCIL,Z.type!==zi&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),Z.type=zi,Jt=l.convert(Z.type))),mi&&(Vn?n.texStorage2D(c.TEXTURE_2D,1,Dt,Ge.width,Ge.height):n.texImage2D(c.TEXTURE_2D,0,Dt,Ge.width,Ge.height,0,Yt,Jt,null));else if(Z.isDataTexture)if(In.length>0&&Bt){Vn&&mi&&n.texStorage2D(c.TEXTURE_2D,ue,Dt,In[0].width,In[0].height);for(let Oe=0,ot=In.length;Oe<ot;Oe++)Ht=In[Oe],Vn?n.texSubImage2D(c.TEXTURE_2D,Oe,0,0,Ht.width,Ht.height,Yt,Jt,Ht.data):n.texImage2D(c.TEXTURE_2D,Oe,Dt,Ht.width,Ht.height,0,Yt,Jt,Ht.data);Z.generateMipmaps=!1}else Vn?(mi&&n.texStorage2D(c.TEXTURE_2D,ue,Dt,Ge.width,Ge.height),n.texSubImage2D(c.TEXTURE_2D,0,0,0,Ge.width,Ge.height,Yt,Jt,Ge.data)):n.texImage2D(c.TEXTURE_2D,0,Dt,Ge.width,Ge.height,0,Yt,Jt,Ge.data);else if(Z.isCompressedTexture)if(Z.isCompressedArrayTexture){Vn&&mi&&n.texStorage3D(c.TEXTURE_2D_ARRAY,ue,Dt,In[0].width,In[0].height,Ge.depth);for(let Oe=0,ot=In.length;Oe<ot;Oe++)Ht=In[Oe],Z.format!==Jn?Yt!==null?Vn?n.compressedTexSubImage3D(c.TEXTURE_2D_ARRAY,Oe,0,0,0,Ht.width,Ht.height,Ge.depth,Yt,Ht.data,0,0):n.compressedTexImage3D(c.TEXTURE_2D_ARRAY,Oe,Dt,Ht.width,Ht.height,Ge.depth,0,Ht.data,0,0):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):Vn?n.texSubImage3D(c.TEXTURE_2D_ARRAY,Oe,0,0,0,Ht.width,Ht.height,Ge.depth,Yt,Jt,Ht.data):n.texImage3D(c.TEXTURE_2D_ARRAY,Oe,Dt,Ht.width,Ht.height,Ge.depth,0,Yt,Jt,Ht.data)}else{Vn&&mi&&n.texStorage2D(c.TEXTURE_2D,ue,Dt,In[0].width,In[0].height);for(let Oe=0,ot=In.length;Oe<ot;Oe++)Ht=In[Oe],Z.format!==Jn?Yt!==null?Vn?n.compressedTexSubImage2D(c.TEXTURE_2D,Oe,0,0,Ht.width,Ht.height,Yt,Ht.data):n.compressedTexImage2D(c.TEXTURE_2D,Oe,Dt,Ht.width,Ht.height,0,Ht.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):Vn?n.texSubImage2D(c.TEXTURE_2D,Oe,0,0,Ht.width,Ht.height,Yt,Jt,Ht.data):n.texImage2D(c.TEXTURE_2D,Oe,Dt,Ht.width,Ht.height,0,Yt,Jt,Ht.data)}else if(Z.isDataArrayTexture)Vn?(mi&&n.texStorage3D(c.TEXTURE_2D_ARRAY,ue,Dt,Ge.width,Ge.height,Ge.depth),n.texSubImage3D(c.TEXTURE_2D_ARRAY,0,0,0,0,Ge.width,Ge.height,Ge.depth,Yt,Jt,Ge.data)):n.texImage3D(c.TEXTURE_2D_ARRAY,0,Dt,Ge.width,Ge.height,Ge.depth,0,Yt,Jt,Ge.data);else if(Z.isData3DTexture)Vn?(mi&&n.texStorage3D(c.TEXTURE_3D,ue,Dt,Ge.width,Ge.height,Ge.depth),n.texSubImage3D(c.TEXTURE_3D,0,0,0,0,Ge.width,Ge.height,Ge.depth,Yt,Jt,Ge.data)):n.texImage3D(c.TEXTURE_3D,0,Dt,Ge.width,Ge.height,Ge.depth,0,Yt,Jt,Ge.data);else if(Z.isFramebufferTexture){if(mi)if(Vn)n.texStorage2D(c.TEXTURE_2D,ue,Dt,Ge.width,Ge.height);else{let Oe=Ge.width,ot=Ge.height;for(let Rt=0;Rt<ue;Rt++)n.texImage2D(c.TEXTURE_2D,Rt,Dt,Oe,ot,0,Yt,Jt,null),Oe>>=1,ot>>=1}}else if(In.length>0&&Bt){Vn&&mi&&n.texStorage2D(c.TEXTURE_2D,ue,Dt,In[0].width,In[0].height);for(let Oe=0,ot=In.length;Oe<ot;Oe++)Ht=In[Oe],Vn?n.texSubImage2D(c.TEXTURE_2D,Oe,0,0,Yt,Jt,Ht):n.texImage2D(c.TEXTURE_2D,Oe,Dt,Yt,Jt,Ht);Z.generateMipmaps=!1}else Vn?(mi&&n.texStorage2D(c.TEXTURE_2D,ue,Dt,Ge.width,Ge.height),n.texSubImage2D(c.TEXTURE_2D,0,0,0,Yt,Jt,Ge)):n.texImage2D(c.TEXTURE_2D,0,Dt,Yt,Jt,Ge);K(Z,Bt)&&se(at),en.__version=Et.version,Z.onUpdate&&Z.onUpdate(Z)}ie.__version=Z.version}function an(ie,Z,Te){if(Z.image.length!==6)return;const at=he(ie,Z),ht=Z.source;n.bindTexture(c.TEXTURE_CUBE_MAP,ie.__webglTexture,c.TEXTURE0+Te);const Et=r.get(ht);if(ht.version!==Et.__version||at===!0){n.activeTexture(c.TEXTURE0+Te),c.pixelStorei(c.UNPACK_FLIP_Y_WEBGL,Z.flipY),c.pixelStorei(c.UNPACK_PREMULTIPLY_ALPHA_WEBGL,Z.premultiplyAlpha),c.pixelStorei(c.UNPACK_ALIGNMENT,Z.unpackAlignment),c.pixelStorei(c.UNPACK_COLORSPACE_CONVERSION_WEBGL,c.NONE);const en=Z.isCompressedTexture||Z.image[0].isCompressedTexture,Pt=Z.image[0]&&Z.image[0].isDataTexture,Ge=[];for(let Oe=0;Oe<6;Oe++)!en&&!Pt?Ge[Oe]=F(Z.image[Oe],!1,!0,_):Ge[Oe]=Pt?Z.image[Oe].image:Z.image[Oe],Ge[Oe]=zn(Z,Ge[Oe]);const Bt=Ge[0],Yt=k(Bt)||d,Jt=l.convert(Z.format,Z.colorSpace),Dt=l.convert(Z.type),Ht=le(Z.internalFormat,Jt,Dt,Z.colorSpace),In=d&&Z.isVideoTexture!==!0,Vn=Et.__version===void 0||at===!0;let mi=G(Z,Bt,Yt);bt(c.TEXTURE_CUBE_MAP,Z,Yt);let ue;if(en){In&&Vn&&n.texStorage2D(c.TEXTURE_CUBE_MAP,mi,Ht,Bt.width,Bt.height);for(let Oe=0;Oe<6;Oe++){ue=Ge[Oe].mipmaps;for(let ot=0;ot<ue.length;ot++){const Rt=ue[ot];Z.format!==Jn?Jt!==null?In?n.compressedTexSubImage2D(c.TEXTURE_CUBE_MAP_POSITIVE_X+Oe,ot,0,0,Rt.width,Rt.height,Jt,Rt.data):n.compressedTexImage2D(c.TEXTURE_CUBE_MAP_POSITIVE_X+Oe,ot,Ht,Rt.width,Rt.height,0,Rt.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):In?n.texSubImage2D(c.TEXTURE_CUBE_MAP_POSITIVE_X+Oe,ot,0,0,Rt.width,Rt.height,Jt,Dt,Rt.data):n.texImage2D(c.TEXTURE_CUBE_MAP_POSITIVE_X+Oe,ot,Ht,Rt.width,Rt.height,0,Jt,Dt,Rt.data)}}}else{ue=Z.mipmaps,In&&Vn&&(ue.length>0&&mi++,n.texStorage2D(c.TEXTURE_CUBE_MAP,mi,Ht,Ge[0].width,Ge[0].height));for(let Oe=0;Oe<6;Oe++)if(Pt){In?n.texSubImage2D(c.TEXTURE_CUBE_MAP_POSITIVE_X+Oe,0,0,0,Ge[Oe].width,Ge[Oe].height,Jt,Dt,Ge[Oe].data):n.texImage2D(c.TEXTURE_CUBE_MAP_POSITIVE_X+Oe,0,Ht,Ge[Oe].width,Ge[Oe].height,0,Jt,Dt,Ge[Oe].data);for(let ot=0;ot<ue.length;ot++){const Gt=ue[ot].image[Oe].image;In?n.texSubImage2D(c.TEXTURE_CUBE_MAP_POSITIVE_X+Oe,ot+1,0,0,Gt.width,Gt.height,Jt,Dt,Gt.data):n.texImage2D(c.TEXTURE_CUBE_MAP_POSITIVE_X+Oe,ot+1,Ht,Gt.width,Gt.height,0,Jt,Dt,Gt.data)}}else{In?n.texSubImage2D(c.TEXTURE_CUBE_MAP_POSITIVE_X+Oe,0,0,0,Jt,Dt,Ge[Oe]):n.texImage2D(c.TEXTURE_CUBE_MAP_POSITIVE_X+Oe,0,Ht,Jt,Dt,Ge[Oe]);for(let ot=0;ot<ue.length;ot++){const Rt=ue[ot];In?n.texSubImage2D(c.TEXTURE_CUBE_MAP_POSITIVE_X+Oe,ot+1,0,0,Jt,Dt,Rt.image[Oe]):n.texImage2D(c.TEXTURE_CUBE_MAP_POSITIVE_X+Oe,ot+1,Ht,Jt,Dt,Rt.image[Oe])}}}K(Z,Yt)&&se(c.TEXTURE_CUBE_MAP),Et.__version=ht.version,Z.onUpdate&&Z.onUpdate(Z)}ie.__version=Z.version}function dt(ie,Z,Te,at,ht){const Et=l.convert(Te.format,Te.colorSpace),en=l.convert(Te.type),Pt=le(Te.internalFormat,Et,en,Te.colorSpace);r.get(Z).__hasExternalTextures||(ht===c.TEXTURE_3D||ht===c.TEXTURE_2D_ARRAY?n.texImage3D(ht,0,Pt,Z.width,Z.height,Z.depth,0,Et,en,null):n.texImage2D(ht,0,Pt,Z.width,Z.height,0,Et,en,null)),n.bindFramebuffer(c.FRAMEBUFFER,ie),qt(Z)?E.framebufferTexture2DMultisampleEXT(c.FRAMEBUFFER,at,ht,r.get(Te).__webglTexture,0,$t(Z)):(ht===c.TEXTURE_2D||ht>=c.TEXTURE_CUBE_MAP_POSITIVE_X&&ht<=c.TEXTURE_CUBE_MAP_NEGATIVE_Z)&&c.framebufferTexture2D(c.FRAMEBUFFER,at,ht,r.get(Te).__webglTexture,0),n.bindFramebuffer(c.FRAMEBUFFER,null)}function kt(ie,Z,Te){if(c.bindRenderbuffer(c.RENDERBUFFER,ie),Z.depthBuffer&&!Z.stencilBuffer){let at=c.DEPTH_COMPONENT16;if(Te||qt(Z)){const ht=Z.depthTexture;ht&&ht.isDepthTexture&&(ht.type===Ct?at=c.DEPTH_COMPONENT32F:ht.type===xt&&(at=c.DEPTH_COMPONENT24));const Et=$t(Z);qt(Z)?E.renderbufferStorageMultisampleEXT(c.RENDERBUFFER,Et,at,Z.width,Z.height):c.renderbufferStorageMultisample(c.RENDERBUFFER,Et,at,Z.width,Z.height)}else c.renderbufferStorage(c.RENDERBUFFER,at,Z.width,Z.height);c.framebufferRenderbuffer(c.FRAMEBUFFER,c.DEPTH_ATTACHMENT,c.RENDERBUFFER,ie)}else if(Z.depthBuffer&&Z.stencilBuffer){const at=$t(Z);Te&&qt(Z)===!1?c.renderbufferStorageMultisample(c.RENDERBUFFER,at,c.DEPTH24_STENCIL8,Z.width,Z.height):qt(Z)?E.renderbufferStorageMultisampleEXT(c.RENDERBUFFER,at,c.DEPTH24_STENCIL8,Z.width,Z.height):c.renderbufferStorage(c.RENDERBUFFER,c.DEPTH_STENCIL,Z.width,Z.height),c.framebufferRenderbuffer(c.FRAMEBUFFER,c.DEPTH_STENCIL_ATTACHMENT,c.RENDERBUFFER,ie)}else{const at=Z.isWebGLMultipleRenderTargets===!0?Z.texture:[Z.texture];for(let ht=0;ht<at.length;ht++){const Et=at[ht],en=l.convert(Et.format,Et.colorSpace),Pt=l.convert(Et.type),Ge=le(Et.internalFormat,en,Pt,Et.colorSpace),Bt=$t(Z);Te&&qt(Z)===!1?c.renderbufferStorageMultisample(c.RENDERBUFFER,Bt,Ge,Z.width,Z.height):qt(Z)?E.renderbufferStorageMultisampleEXT(c.RENDERBUFFER,Bt,Ge,Z.width,Z.height):c.renderbufferStorage(c.RENDERBUFFER,Ge,Z.width,Z.height)}}c.bindRenderbuffer(c.RENDERBUFFER,null)}function et(ie,Z){if(Z&&Z.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(n.bindFramebuffer(c.FRAMEBUFFER,ie),!(Z.depthTexture&&Z.depthTexture.isDepthTexture))throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");(!r.get(Z.depthTexture).__webglTexture||Z.depthTexture.image.width!==Z.width||Z.depthTexture.image.height!==Z.height)&&(Z.depthTexture.image.width=Z.width,Z.depthTexture.image.height=Z.height,Z.depthTexture.needsUpdate=!0),Qe(Z.depthTexture,0);const at=r.get(Z.depthTexture).__webglTexture,ht=$t(Z);if(Z.depthTexture.format===Wr)qt(Z)?E.framebufferTexture2DMultisampleEXT(c.FRAMEBUFFER,c.DEPTH_ATTACHMENT,c.TEXTURE_2D,at,0,ht):c.framebufferTexture2D(c.FRAMEBUFFER,c.DEPTH_ATTACHMENT,c.TEXTURE_2D,at,0);else if(Z.depthTexture.format===As)qt(Z)?E.framebufferTexture2DMultisampleEXT(c.FRAMEBUFFER,c.DEPTH_STENCIL_ATTACHMENT,c.TEXTURE_2D,at,0,ht):c.framebufferTexture2D(c.FRAMEBUFFER,c.DEPTH_STENCIL_ATTACHMENT,c.TEXTURE_2D,at,0);else throw new Error("Unknown depthTexture format")}function Ve(ie){const Z=r.get(ie),Te=ie.isWebGLCubeRenderTarget===!0;if(ie.depthTexture&&!Z.__autoAllocateDepthBuffer){if(Te)throw new Error("target.depthTexture not supported in Cube render targets");et(Z.__webglFramebuffer,ie)}else if(Te){Z.__webglDepthbuffer=[];for(let at=0;at<6;at++)n.bindFramebuffer(c.FRAMEBUFFER,Z.__webglFramebuffer[at]),Z.__webglDepthbuffer[at]=c.createRenderbuffer(),kt(Z.__webglDepthbuffer[at],ie,!1)}else n.bindFramebuffer(c.FRAMEBUFFER,Z.__webglFramebuffer),Z.__webglDepthbuffer=c.createRenderbuffer(),kt(Z.__webglDepthbuffer,ie,!1);n.bindFramebuffer(c.FRAMEBUFFER,null)}function tt(ie,Z,Te){const at=r.get(ie);Z!==void 0&&dt(at.__webglFramebuffer,ie,ie.texture,c.COLOR_ATTACHMENT0,c.TEXTURE_2D),Te!==void 0&&Ve(ie)}function Lt(ie){const Z=ie.texture,Te=r.get(ie),at=r.get(Z);ie.addEventListener("dispose",Ue),ie.isWebGLMultipleRenderTargets!==!0&&(at.__webglTexture===void 0&&(at.__webglTexture=c.createTexture()),at.__version=Z.version,u.memory.textures++);const ht=ie.isWebGLCubeRenderTarget===!0,Et=ie.isWebGLMultipleRenderTargets===!0,en=k(ie)||d;if(ht){Te.__webglFramebuffer=[];for(let Pt=0;Pt<6;Pt++)Te.__webglFramebuffer[Pt]=c.createFramebuffer()}else{if(Te.__webglFramebuffer=c.createFramebuffer(),Et)if(a.drawBuffers){const Pt=ie.texture;for(let Ge=0,Bt=Pt.length;Ge<Bt;Ge++){const Yt=r.get(Pt[Ge]);Yt.__webglTexture===void 0&&(Yt.__webglTexture=c.createTexture(),u.memory.textures++)}}else console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.");if(d&&ie.samples>0&&qt(ie)===!1){const Pt=Et?Z:[Z];Te.__webglMultisampledFramebuffer=c.createFramebuffer(),Te.__webglColorRenderbuffer=[],n.bindFramebuffer(c.FRAMEBUFFER,Te.__webglMultisampledFramebuffer);for(let Ge=0;Ge<Pt.length;Ge++){const Bt=Pt[Ge];Te.__webglColorRenderbuffer[Ge]=c.createRenderbuffer(),c.bindRenderbuffer(c.RENDERBUFFER,Te.__webglColorRenderbuffer[Ge]);const Yt=l.convert(Bt.format,Bt.colorSpace),Jt=l.convert(Bt.type),Dt=le(Bt.internalFormat,Yt,Jt,Bt.colorSpace,ie.isXRRenderTarget===!0),Ht=$t(ie);c.renderbufferStorageMultisample(c.RENDERBUFFER,Ht,Dt,ie.width,ie.height),c.framebufferRenderbuffer(c.FRAMEBUFFER,c.COLOR_ATTACHMENT0+Ge,c.RENDERBUFFER,Te.__webglColorRenderbuffer[Ge])}c.bindRenderbuffer(c.RENDERBUFFER,null),ie.depthBuffer&&(Te.__webglDepthRenderbuffer=c.createRenderbuffer(),kt(Te.__webglDepthRenderbuffer,ie,!0)),n.bindFramebuffer(c.FRAMEBUFFER,null)}}if(ht){n.bindTexture(c.TEXTURE_CUBE_MAP,at.__webglTexture),bt(c.TEXTURE_CUBE_MAP,Z,en);for(let Pt=0;Pt<6;Pt++)dt(Te.__webglFramebuffer[Pt],ie,Z,c.COLOR_ATTACHMENT0,c.TEXTURE_CUBE_MAP_POSITIVE_X+Pt);K(Z,en)&&se(c.TEXTURE_CUBE_MAP),n.unbindTexture()}else if(Et){const Pt=ie.texture;for(let Ge=0,Bt=Pt.length;Ge<Bt;Ge++){const Yt=Pt[Ge],Jt=r.get(Yt);n.bindTexture(c.TEXTURE_2D,Jt.__webglTexture),bt(c.TEXTURE_2D,Yt,en),dt(Te.__webglFramebuffer,ie,Yt,c.COLOR_ATTACHMENT0+Ge,c.TEXTURE_2D),K(Yt,en)&&se(c.TEXTURE_2D)}n.unbindTexture()}else{let Pt=c.TEXTURE_2D;(ie.isWebGL3DRenderTarget||ie.isWebGLArrayRenderTarget)&&(d?Pt=ie.isWebGL3DRenderTarget?c.TEXTURE_3D:c.TEXTURE_2D_ARRAY:console.error("THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.")),n.bindTexture(Pt,at.__webglTexture),bt(Pt,Z,en),dt(Te.__webglFramebuffer,ie,Z,c.COLOR_ATTACHMENT0,Pt),K(Z,en)&&se(Pt),n.unbindTexture()}ie.depthBuffer&&Ve(ie)}function Mt(ie){const Z=k(ie)||d,Te=ie.isWebGLMultipleRenderTargets===!0?ie.texture:[ie.texture];for(let at=0,ht=Te.length;at<ht;at++){const Et=Te[at];if(K(Et,Z)){const en=ie.isWebGLCubeRenderTarget?c.TEXTURE_CUBE_MAP:c.TEXTURE_2D,Pt=r.get(Et).__webglTexture;n.bindTexture(en,Pt),se(en),n.unbindTexture()}}}function Kt(ie){if(d&&ie.samples>0&&qt(ie)===!1){const Z=ie.isWebGLMultipleRenderTargets?ie.texture:[ie.texture],Te=ie.width,at=ie.height;let ht=c.COLOR_BUFFER_BIT;const Et=[],en=ie.stencilBuffer?c.DEPTH_STENCIL_ATTACHMENT:c.DEPTH_ATTACHMENT,Pt=r.get(ie),Ge=ie.isWebGLMultipleRenderTargets===!0;if(Ge)for(let Bt=0;Bt<Z.length;Bt++)n.bindFramebuffer(c.FRAMEBUFFER,Pt.__webglMultisampledFramebuffer),c.framebufferRenderbuffer(c.FRAMEBUFFER,c.COLOR_ATTACHMENT0+Bt,c.RENDERBUFFER,null),n.bindFramebuffer(c.FRAMEBUFFER,Pt.__webglFramebuffer),c.framebufferTexture2D(c.DRAW_FRAMEBUFFER,c.COLOR_ATTACHMENT0+Bt,c.TEXTURE_2D,null,0);n.bindFramebuffer(c.READ_FRAMEBUFFER,Pt.__webglMultisampledFramebuffer),n.bindFramebuffer(c.DRAW_FRAMEBUFFER,Pt.__webglFramebuffer);for(let Bt=0;Bt<Z.length;Bt++){Et.push(c.COLOR_ATTACHMENT0+Bt),ie.depthBuffer&&Et.push(en);const Yt=Pt.__ignoreDepthValues!==void 0?Pt.__ignoreDepthValues:!1;if(Yt===!1&&(ie.depthBuffer&&(ht|=c.DEPTH_BUFFER_BIT),ie.stencilBuffer&&(ht|=c.STENCIL_BUFFER_BIT)),Ge&&c.framebufferRenderbuffer(c.READ_FRAMEBUFFER,c.COLOR_ATTACHMENT0,c.RENDERBUFFER,Pt.__webglColorRenderbuffer[Bt]),Yt===!0&&(c.invalidateFramebuffer(c.READ_FRAMEBUFFER,[en]),c.invalidateFramebuffer(c.DRAW_FRAMEBUFFER,[en])),Ge){const Jt=r.get(Z[Bt]).__webglTexture;c.framebufferTexture2D(c.DRAW_FRAMEBUFFER,c.COLOR_ATTACHMENT0,c.TEXTURE_2D,Jt,0)}c.blitFramebuffer(0,0,Te,at,0,0,Te,at,ht,c.NEAREST),w&&c.invalidateFramebuffer(c.READ_FRAMEBUFFER,Et)}if(n.bindFramebuffer(c.READ_FRAMEBUFFER,null),n.bindFramebuffer(c.DRAW_FRAMEBUFFER,null),Ge)for(let Bt=0;Bt<Z.length;Bt++){n.bindFramebuffer(c.FRAMEBUFFER,Pt.__webglMultisampledFramebuffer),c.framebufferRenderbuffer(c.FRAMEBUFFER,c.COLOR_ATTACHMENT0+Bt,c.RENDERBUFFER,Pt.__webglColorRenderbuffer[Bt]);const Yt=r.get(Z[Bt]).__webglTexture;n.bindFramebuffer(c.FRAMEBUFFER,Pt.__webglFramebuffer),c.framebufferTexture2D(c.DRAW_FRAMEBUFFER,c.COLOR_ATTACHMENT0+Bt,c.TEXTURE_2D,Yt,0)}n.bindFramebuffer(c.DRAW_FRAMEBUFFER,Pt.__webglMultisampledFramebuffer)}}function $t(ie){return Math.min(S,ie.samples)}function qt(ie){const Z=r.get(ie);return d&&ie.samples>0&&e.has("WEBGL_multisampled_render_to_texture")===!0&&Z.__useRenderToTexture!==!1}function Tn(ie){const Z=u.render.frame;C.get(ie)!==Z&&(C.set(ie,Z),ie.update())}function zn(ie,Z){const Te=ie.colorSpace,at=ie.format,ht=ie.type;return ie.isCompressedTexture===!0||ie.format===zh||Te!==Zr&&Te!==na&&(Te===gn?d===!1?e.has("EXT_sRGB")===!0&&at===Jn?(ie.format=zh,ie.minFilter=ft,ie.generateMipmaps=!1):Z=$f.sRGBToLinear(Z):(at!==Jn||ht!==nn)&&console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType."):console.error("THREE.WebGLTextures: Unsupported texture color space:",Te)),Z}this.allocateTextureUnit=Ke,this.resetTextureUnits=Ze,this.setTexture2D=Qe,this.setTexture2DArray=Ot,this.setTexture3D=pt,this.setTextureCube=Fe,this.rebindTextures=tt,this.setupRenderTarget=Lt,this.updateRenderTargetMipmap=Mt,this.updateMultisampleRenderTarget=Kt,this.setupDepthRenderbuffer=Ve,this.setupFrameBufferTexture=dt,this.useMultisampledRTT=qt}function Kg(c,e,n){const r=n.isWebGL2;function a(l,u=na){let d;if(l===nn)return c.UNSIGNED_BYTE;if(l===Gn)return c.UNSIGNED_SHORT_4_4_4_4;if(l===Si)return c.UNSIGNED_SHORT_5_5_5_1;if(l===ei)return c.BYTE;if(l===ce)return c.SHORT;if(l===Ie)return c.UNSIGNED_SHORT;if(l===rt)return c.INT;if(l===xt)return c.UNSIGNED_INT;if(l===Ct)return c.FLOAT;if(l===Un)return r?c.HALF_FLOAT:(d=e.get("OES_texture_half_float"),d!==null?d.HALF_FLOAT_OES:null);if(l===ti)return c.ALPHA;if(l===Jn)return c.RGBA;if(l===_r)return c.LUMINANCE;if(l===Da)return c.LUMINANCE_ALPHA;if(l===Wr)return c.DEPTH_COMPONENT;if(l===As)return c.DEPTH_STENCIL;if(l===zh)return d=e.get("EXT_sRGB"),d!==null?d.SRGB_ALPHA_EXT:null;if(l===Uh)return c.RED;if(l===Ih)return c.RED_INTEGER;if(l===$)return c.RG;if(l===ve)return c.RG_INTEGER;if(l===Ne)return c.RGBA_INTEGER;if(l===me||l===ze||l===zt||l===Vt)if(u===gn)if(d=e.get("WEBGL_compressed_texture_s3tc_srgb"),d!==null){if(l===me)return d.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(l===ze)return d.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(l===zt)return d.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(l===Vt)return d.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else return null;else if(d=e.get("WEBGL_compressed_texture_s3tc"),d!==null){if(l===me)return d.COMPRESSED_RGB_S3TC_DXT1_EXT;if(l===ze)return d.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(l===zt)return d.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(l===Vt)return d.COMPRESSED_RGBA_S3TC_DXT5_EXT}else return null;if(l===Qt||l===ln||l===pn||l===mn)if(d=e.get("WEBGL_compressed_texture_pvrtc"),d!==null){if(l===Qt)return d.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(l===ln)return d.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(l===pn)return d.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(l===mn)return d.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}else return null;if(l===yn)return d=e.get("WEBGL_compressed_texture_etc1"),d!==null?d.COMPRESSED_RGB_ETC1_WEBGL:null;if(l===On||l===Ei)if(d=e.get("WEBGL_compressed_texture_etc"),d!==null){if(l===On)return u===gn?d.COMPRESSED_SRGB8_ETC2:d.COMPRESSED_RGB8_ETC2;if(l===Ei)return u===gn?d.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:d.COMPRESSED_RGBA8_ETC2_EAC}else return null;if(l===$i||l===Xr||l===ni||l===bn||l===Ua||l===ci||l===qr||l===Io||l===Rs||l===Ia||l===bi||l===Yr||l===Na||l===Ii)if(d=e.get("WEBGL_compressed_texture_astc"),d!==null){if(l===$i)return u===gn?d.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:d.COMPRESSED_RGBA_ASTC_4x4_KHR;if(l===Xr)return u===gn?d.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:d.COMPRESSED_RGBA_ASTC_5x4_KHR;if(l===ni)return u===gn?d.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:d.COMPRESSED_RGBA_ASTC_5x5_KHR;if(l===bn)return u===gn?d.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:d.COMPRESSED_RGBA_ASTC_6x5_KHR;if(l===Ua)return u===gn?d.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:d.COMPRESSED_RGBA_ASTC_6x6_KHR;if(l===ci)return u===gn?d.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:d.COMPRESSED_RGBA_ASTC_8x5_KHR;if(l===qr)return u===gn?d.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:d.COMPRESSED_RGBA_ASTC_8x6_KHR;if(l===Io)return u===gn?d.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:d.COMPRESSED_RGBA_ASTC_8x8_KHR;if(l===Rs)return u===gn?d.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:d.COMPRESSED_RGBA_ASTC_10x5_KHR;if(l===Ia)return u===gn?d.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:d.COMPRESSED_RGBA_ASTC_10x6_KHR;if(l===bi)return u===gn?d.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:d.COMPRESSED_RGBA_ASTC_10x8_KHR;if(l===Yr)return u===gn?d.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:d.COMPRESSED_RGBA_ASTC_10x10_KHR;if(l===Na)return u===gn?d.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:d.COMPRESSED_RGBA_ASTC_12x10_KHR;if(l===Ii)return u===gn?d.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:d.COMPRESSED_RGBA_ASTC_12x12_KHR}else return null;if(l===Qs)if(d=e.get("EXT_texture_compression_bptc"),d!==null){if(l===Qs)return u===gn?d.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:d.COMPRESSED_RGBA_BPTC_UNORM_EXT}else return null;if(l===Nh||l===No||l===kf||l===Gf)if(d=e.get("EXT_texture_compression_rgtc"),d!==null){if(l===Qs)return d.COMPRESSED_RED_RGTC1_EXT;if(l===No)return d.COMPRESSED_SIGNED_RED_RGTC1_EXT;if(l===kf)return d.COMPRESSED_RED_GREEN_RGTC2_EXT;if(l===Gf)return d.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}else return null;return l===zi?r?c.UNSIGNED_INT_24_8:(d=e.get("WEBGL_depth_texture"),d!==null?d.UNSIGNED_INT_24_8_WEBGL:null):c[l]!==void 0?c[l]:null}return{convert:a}}class $g extends Fi{constructor(e=[]){super(),this.isArrayCamera=!0,this.cameras=e}}class sl extends Bn{constructor(){super(),this.isGroup=!0,this.type="Group"}}const lw={type:"move"};class Ed{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return this._hand===null&&(this._hand=new sl,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return this._targetRay===null&&(this._targetRay=new sl,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new j,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new j),this._targetRay}getGripSpace(){return this._grip===null&&(this._grip=new sl,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new j,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new j),this._grip}dispatchEvent(e){return this._targetRay!==null&&this._targetRay.dispatchEvent(e),this._grip!==null&&this._grip.dispatchEvent(e),this._hand!==null&&this._hand.dispatchEvent(e),this}connect(e){if(e&&e.hand){const n=this._hand;if(n)for(const r of e.hand.values())this._getHandJoint(n,r)}return this.dispatchEvent({type:"connected",data:e}),this}disconnect(e){return this.dispatchEvent({type:"disconnected",data:e}),this._targetRay!==null&&(this._targetRay.visible=!1),this._grip!==null&&(this._grip.visible=!1),this._hand!==null&&(this._hand.visible=!1),this}update(e,n,r){let a=null,l=null,u=null;const d=this._targetRay,g=this._grip,_=this._hand;if(e&&n.session.visibilityState!=="visible-blurred"){if(_&&e.hand){u=!0;for(const I of e.hand.values()){const U=n.getJointPose(I,r),A=this._getHandJoint(_,I);U!==null&&(A.matrix.fromArray(U.transform.matrix),A.matrix.decompose(A.position,A.rotation,A.scale),A.matrixWorldNeedsUpdate=!0,A.jointRadius=U.radius),A.visible=U!==null}const y=_.joints["index-finger-tip"],S=_.joints["thumb-tip"],E=y.position.distanceTo(S.position),w=.02,C=.005;_.inputState.pinching&&E>w+C?(_.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:e.handedness,target:this})):!_.inputState.pinching&&E<=w-C&&(_.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:e.handedness,target:this}))}else g!==null&&e.gripSpace&&(l=n.getPose(e.gripSpace,r),l!==null&&(g.matrix.fromArray(l.transform.matrix),g.matrix.decompose(g.position,g.rotation,g.scale),g.matrixWorldNeedsUpdate=!0,l.linearVelocity?(g.hasLinearVelocity=!0,g.linearVelocity.copy(l.linearVelocity)):g.hasLinearVelocity=!1,l.angularVelocity?(g.hasAngularVelocity=!0,g.angularVelocity.copy(l.angularVelocity)):g.hasAngularVelocity=!1));d!==null&&(a=n.getPose(e.targetRaySpace,r),a===null&&l!==null&&(a=l),a!==null&&(d.matrix.fromArray(a.transform.matrix),d.matrix.decompose(d.position,d.rotation,d.scale),d.matrixWorldNeedsUpdate=!0,a.linearVelocity?(d.hasLinearVelocity=!0,d.linearVelocity.copy(a.linearVelocity)):d.hasLinearVelocity=!1,a.angularVelocity?(d.hasAngularVelocity=!0,d.angularVelocity.copy(a.angularVelocity)):d.hasAngularVelocity=!1,this.dispatchEvent(lw)))}return d!==null&&(d.visible=a!==null),g!==null&&(g.visible=l!==null),_!==null&&(_.visible=u!==null),this}_getHandJoint(e,n){if(e.joints[n.jointName]===void 0){const r=new sl;r.matrixAutoUpdate=!1,r.visible=!1,e.joints[n.jointName]=r,e.add(r)}return e.joints[n.jointName]}}class Jg extends di{constructor(e,n,r,a,l,u,d,g,_,y){if(y=y!==void 0?y:Wr,y!==Wr&&y!==As)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");r===void 0&&y===Wr&&(r=xt),r===void 0&&y===As&&(r=zi),super(null,a,l,u,d,g,y,r,_),this.isDepthTexture=!0,this.image={width:e,height:n},this.magFilter=d!==void 0?d:st,this.minFilter=g!==void 0?g:st,this.flipY=!1,this.generateMipmaps=!1}}class cw extends Cs{constructor(e,n){super();const r=this;let a=null,l=1,u=null,d="local-floor",g=1,_=null,y=null,S=null,E=null,w=null,C=null;const I=n.getContextAttributes();let U=null,A=null;const z=[],F=[],k=new Set,Y=new Map,K=new Fi;K.layers.enable(1),K.viewport=new Hn;const se=new Fi;se.layers.enable(2),se.viewport=new Hn;const le=[K,se],G=new $g;G.layers.enable(1),G.layers.enable(2);let ee=null,Pe=null;this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(Fe){let je=z[Fe];return je===void 0&&(je=new Ed,z[Fe]=je),je.getTargetRaySpace()},this.getControllerGrip=function(Fe){let je=z[Fe];return je===void 0&&(je=new Ed,z[Fe]=je),je.getGripSpace()},this.getHand=function(Fe){let je=z[Fe];return je===void 0&&(je=new Ed,z[Fe]=je),je.getHandSpace()};function Ue(Fe){const je=F.indexOf(Fe.inputSource);if(je===-1)return;const vt=z[je];vt!==void 0&&(vt.update(Fe.inputSource,Fe.frame,_||u),vt.dispatchEvent({type:Fe.type,data:Fe.inputSource}))}function ge(){a.removeEventListener("select",Ue),a.removeEventListener("selectstart",Ue),a.removeEventListener("selectend",Ue),a.removeEventListener("squeeze",Ue),a.removeEventListener("squeezestart",Ue),a.removeEventListener("squeezeend",Ue),a.removeEventListener("end",ge),a.removeEventListener("inputsourceschange",Se);for(let Fe=0;Fe<z.length;Fe++){const je=F[Fe];je!==null&&(F[Fe]=null,z[Fe].disconnect(je))}ee=null,Pe=null,e.setRenderTarget(U),w=null,E=null,S=null,a=null,A=null,pt.stop(),r.isPresenting=!1,r.dispatchEvent({type:"sessionend"})}this.setFramebufferScaleFactor=function(Fe){l=Fe,r.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(Fe){d=Fe,r.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return _||u},this.setReferenceSpace=function(Fe){_=Fe},this.getBaseLayer=function(){return E!==null?E:w},this.getBinding=function(){return S},this.getFrame=function(){return C},this.getSession=function(){return a},this.setSession=async function(Fe){if(a=Fe,a!==null){if(U=e.getRenderTarget(),a.addEventListener("select",Ue),a.addEventListener("selectstart",Ue),a.addEventListener("selectend",Ue),a.addEventListener("squeeze",Ue),a.addEventListener("squeezestart",Ue),a.addEventListener("squeezeend",Ue),a.addEventListener("end",ge),a.addEventListener("inputsourceschange",Se),I.xrCompatible!==!0&&await n.makeXRCompatible(),a.renderState.layers===void 0||e.capabilities.isWebGL2===!1){const je={antialias:a.renderState.layers===void 0?I.antialias:!0,alpha:!0,depth:I.depth,stencil:I.stencil,framebufferScaleFactor:l};w=new XRWebGLLayer(a,n,je),a.updateRenderState({baseLayer:w}),A=new Kr(w.framebufferWidth,w.framebufferHeight,{format:Jn,type:nn,colorSpace:e.outputColorSpace,stencilBuffer:I.stencil})}else{let je=null,vt=null,bt=null;I.depth&&(bt=I.stencil?n.DEPTH24_STENCIL8:n.DEPTH_COMPONENT24,je=I.stencil?As:Wr,vt=I.stencil?zi:xt);const he={colorFormat:n.RGBA8,depthFormat:bt,scaleFactor:l};S=new XRWebGLBinding(a,n),E=S.createProjectionLayer(he),a.updateRenderState({layers:[E]}),A=new Kr(E.textureWidth,E.textureHeight,{format:Jn,type:nn,depthTexture:new Jg(E.textureWidth,E.textureHeight,vt,void 0,void 0,void 0,void 0,void 0,void 0,je),stencilBuffer:I.stencil,colorSpace:e.outputColorSpace,samples:I.antialias?4:0});const rn=e.properties.get(A);rn.__ignoreDepthValues=E.ignoreDepthValues}A.isXRRenderTarget=!0,this.setFoveation(g),_=null,u=await a.requestReferenceSpace(d),pt.setContext(a),pt.start(),r.isPresenting=!0,r.dispatchEvent({type:"sessionstart"})}},this.getEnvironmentBlendMode=function(){if(a!==null)return a.environmentBlendMode};function Se(Fe){for(let je=0;je<Fe.removed.length;je++){const vt=Fe.removed[je],bt=F.indexOf(vt);bt>=0&&(F[bt]=null,z[bt].disconnect(vt))}for(let je=0;je<Fe.added.length;je++){const vt=Fe.added[je];let bt=F.indexOf(vt);if(bt===-1){for(let rn=0;rn<z.length;rn++)if(rn>=F.length){F.push(vt),bt=rn;break}else if(F[rn]===null){F[rn]=vt,bt=rn;break}if(bt===-1)break}const he=z[bt];he&&he.connect(vt)}}const De=new j,$e=new j;function Ze(Fe,je,vt){De.setFromMatrixPosition(je.matrixWorld),$e.setFromMatrixPosition(vt.matrixWorld);const bt=De.distanceTo($e),he=je.projectionMatrix.elements,rn=vt.projectionMatrix.elements,an=he[14]/(he[10]-1),dt=he[14]/(he[10]+1),kt=(he[9]+1)/he[5],et=(he[9]-1)/he[5],Ve=(he[8]-1)/he[0],tt=(rn[8]+1)/rn[0],Lt=an*Ve,Mt=an*tt,Kt=bt/(-Ve+tt),$t=Kt*-Ve;je.matrixWorld.decompose(Fe.position,Fe.quaternion,Fe.scale),Fe.translateX($t),Fe.translateZ(Kt),Fe.matrixWorld.compose(Fe.position,Fe.quaternion,Fe.scale),Fe.matrixWorldInverse.copy(Fe.matrixWorld).invert();const qt=an+Kt,Tn=dt+Kt,zn=Lt-$t,ie=Mt+(bt-$t),Z=kt*dt/Tn*qt,Te=et*dt/Tn*qt;Fe.projectionMatrix.makePerspective(zn,ie,Z,Te,qt,Tn),Fe.projectionMatrixInverse.copy(Fe.projectionMatrix).invert()}function Ke(Fe,je){je===null?Fe.matrixWorld.copy(Fe.matrix):Fe.matrixWorld.multiplyMatrices(je.matrixWorld,Fe.matrix),Fe.matrixWorldInverse.copy(Fe.matrixWorld).invert()}this.updateCamera=function(Fe){if(a===null)return;G.near=se.near=K.near=Fe.near,G.far=se.far=K.far=Fe.far,(ee!==G.near||Pe!==G.far)&&(a.updateRenderState({depthNear:G.near,depthFar:G.far}),ee=G.near,Pe=G.far);const je=Fe.parent,vt=G.cameras;Ke(G,je);for(let bt=0;bt<vt.length;bt++)Ke(vt[bt],je);vt.length===2?Ze(G,K,se):G.projectionMatrix.copy(K.projectionMatrix),ct(Fe,G,je)};function ct(Fe,je,vt){vt===null?Fe.matrix.copy(je.matrixWorld):(Fe.matrix.copy(vt.matrixWorld),Fe.matrix.invert(),Fe.matrix.multiply(je.matrixWorld)),Fe.matrix.decompose(Fe.position,Fe.quaternion,Fe.scale),Fe.updateMatrixWorld(!0);const bt=Fe.children;for(let he=0,rn=bt.length;he<rn;he++)bt[he].updateMatrixWorld(!0);Fe.projectionMatrix.copy(je.projectionMatrix),Fe.projectionMatrixInverse.copy(je.projectionMatrixInverse),Fe.isPerspectiveCamera&&(Fe.fov=Fo*2*Math.atan(1/Fe.projectionMatrix.elements[5]),Fe.zoom=1)}this.getCamera=function(){return G},this.getFoveation=function(){if(!(E===null&&w===null))return g},this.setFoveation=function(Fe){g=Fe,E!==null&&(E.fixedFoveation=Fe),w!==null&&w.fixedFoveation!==void 0&&(w.fixedFoveation=Fe)},this.getPlanes=function(){return k};let Qe=null;function Ot(Fe,je){if(y=je.getViewerPose(_||u),C=je,y!==null){const vt=y.views;w!==null&&(e.setRenderTargetFramebuffer(A,w.framebuffer),e.setRenderTarget(A));let bt=!1;vt.length!==G.cameras.length&&(G.cameras.length=0,bt=!0);for(let he=0;he<vt.length;he++){const rn=vt[he];let an=null;if(w!==null)an=w.getViewport(rn);else{const kt=S.getViewSubImage(E,rn);an=kt.viewport,he===0&&(e.setRenderTargetTextures(A,kt.colorTexture,E.ignoreDepthValues?void 0:kt.depthStencilTexture),e.setRenderTarget(A))}let dt=le[he];dt===void 0&&(dt=new Fi,dt.layers.enable(he),dt.viewport=new Hn,le[he]=dt),dt.matrix.fromArray(rn.transform.matrix),dt.matrix.decompose(dt.position,dt.quaternion,dt.scale),dt.projectionMatrix.fromArray(rn.projectionMatrix),dt.projectionMatrixInverse.copy(dt.projectionMatrix).invert(),dt.viewport.set(an.x,an.y,an.width,an.height),he===0&&(G.matrix.copy(dt.matrix),G.matrix.decompose(G.position,G.quaternion,G.scale)),bt===!0&&G.cameras.push(dt)}}for(let vt=0;vt<z.length;vt++){const bt=F[vt],he=z[vt];bt!==null&&he!==void 0&&he.update(bt,je,_||u)}if(Qe&&Qe(Fe,je),je.detectedPlanes){r.dispatchEvent({type:"planesdetected",data:je.detectedPlanes});let vt=null;for(const bt of k)je.detectedPlanes.has(bt)||(vt===null&&(vt=[]),vt.push(bt));if(vt!==null)for(const bt of vt)k.delete(bt),Y.delete(bt),r.dispatchEvent({type:"planeremoved",data:bt});for(const bt of je.detectedPlanes)if(!k.has(bt))k.add(bt),Y.set(bt,je.lastChangedTime),r.dispatchEvent({type:"planeadded",data:bt});else{const he=Y.get(bt);bt.lastChangedTime>he&&(Y.set(bt,bt.lastChangedTime),r.dispatchEvent({type:"planechanged",data:bt}))}}C=null}const pt=new Eg;pt.setAnimationLoop(Ot),this.setAnimationLoop=function(Fe){Qe=Fe},this.dispose=function(){}}}function hw(c,e){function n(U,A){U.matrixAutoUpdate===!0&&U.updateMatrix(),A.value.copy(U.matrix)}function r(U,A){A.color.getRGB(U.fogColor.value,vg(c)),A.isFog?(U.fogNear.value=A.near,U.fogFar.value=A.far):A.isFogExp2&&(U.fogDensity.value=A.density)}function a(U,A,z,F,k){A.isMeshBasicMaterial||A.isMeshLambertMaterial?l(U,A):A.isMeshToonMaterial?(l(U,A),S(U,A)):A.isMeshPhongMaterial?(l(U,A),y(U,A)):A.isMeshStandardMaterial?(l(U,A),E(U,A),A.isMeshPhysicalMaterial&&w(U,A,k)):A.isMeshMatcapMaterial?(l(U,A),C(U,A)):A.isMeshDepthMaterial?l(U,A):A.isMeshDistanceMaterial?(l(U,A),I(U,A)):A.isMeshNormalMaterial?l(U,A):A.isLineBasicMaterial?(u(U,A),A.isLineDashedMaterial&&d(U,A)):A.isPointsMaterial?g(U,A,z,F):A.isSpriteMaterial?_(U,A):A.isShadowMaterial?(U.color.value.copy(A.color),U.opacity.value=A.opacity):A.isShaderMaterial&&(A.uniformsNeedUpdate=!1)}function l(U,A){U.opacity.value=A.opacity,A.color&&U.diffuse.value.copy(A.color),A.emissive&&U.emissive.value.copy(A.emissive).multiplyScalar(A.emissiveIntensity),A.map&&(U.map.value=A.map,n(A.map,U.mapTransform)),A.alphaMap&&(U.alphaMap.value=A.alphaMap,n(A.alphaMap,U.alphaMapTransform)),A.bumpMap&&(U.bumpMap.value=A.bumpMap,n(A.bumpMap,U.bumpMapTransform),U.bumpScale.value=A.bumpScale,A.side===T&&(U.bumpScale.value*=-1)),A.normalMap&&(U.normalMap.value=A.normalMap,n(A.normalMap,U.normalMapTransform),U.normalScale.value.copy(A.normalScale),A.side===T&&U.normalScale.value.negate()),A.displacementMap&&(U.displacementMap.value=A.displacementMap,n(A.displacementMap,U.displacementMapTransform),U.displacementScale.value=A.displacementScale,U.displacementBias.value=A.displacementBias),A.emissiveMap&&(U.emissiveMap.value=A.emissiveMap,n(A.emissiveMap,U.emissiveMapTransform)),A.specularMap&&(U.specularMap.value=A.specularMap,n(A.specularMap,U.specularMapTransform)),A.alphaTest>0&&(U.alphaTest.value=A.alphaTest);const z=e.get(A).envMap;if(z&&(U.envMap.value=z,U.flipEnvMap.value=z.isCubeTexture&&z.isRenderTargetTexture===!1?-1:1,U.reflectivity.value=A.reflectivity,U.ior.value=A.ior,U.refractionRatio.value=A.refractionRatio),A.lightMap){U.lightMap.value=A.lightMap;const F=c.useLegacyLights===!0?Math.PI:1;U.lightMapIntensity.value=A.lightMapIntensity*F,n(A.lightMap,U.lightMapTransform)}A.aoMap&&(U.aoMap.value=A.aoMap,U.aoMapIntensity.value=A.aoMapIntensity,n(A.aoMap,U.aoMapTransform))}function u(U,A){U.diffuse.value.copy(A.color),U.opacity.value=A.opacity,A.map&&(U.map.value=A.map,n(A.map,U.mapTransform))}function d(U,A){U.dashSize.value=A.dashSize,U.totalSize.value=A.dashSize+A.gapSize,U.scale.value=A.scale}function g(U,A,z,F){U.diffuse.value.copy(A.color),U.opacity.value=A.opacity,U.size.value=A.size*z,U.scale.value=F*.5,A.map&&(U.map.value=A.map,n(A.map,U.uvTransform)),A.alphaMap&&(U.alphaMap.value=A.alphaMap),A.alphaTest>0&&(U.alphaTest.value=A.alphaTest)}function _(U,A){U.diffuse.value.copy(A.color),U.opacity.value=A.opacity,U.rotation.value=A.rotation,A.map&&(U.map.value=A.map,n(A.map,U.mapTransform)),A.alphaMap&&(U.alphaMap.value=A.alphaMap),A.alphaTest>0&&(U.alphaTest.value=A.alphaTest)}function y(U,A){U.specular.value.copy(A.specular),U.shininess.value=Math.max(A.shininess,1e-4)}function S(U,A){A.gradientMap&&(U.gradientMap.value=A.gradientMap)}function E(U,A){U.metalness.value=A.metalness,A.metalnessMap&&(U.metalnessMap.value=A.metalnessMap,n(A.metalnessMap,U.metalnessMapTransform)),U.roughness.value=A.roughness,A.roughnessMap&&(U.roughnessMap.value=A.roughnessMap,n(A.roughnessMap,U.roughnessMapTransform)),e.get(A).envMap&&(U.envMapIntensity.value=A.envMapIntensity)}function w(U,A,z){U.ior.value=A.ior,A.sheen>0&&(U.sheenColor.value.copy(A.sheenColor).multiplyScalar(A.sheen),U.sheenRoughness.value=A.sheenRoughness,A.sheenColorMap&&(U.sheenColorMap.value=A.sheenColorMap,n(A.sheenColorMap,U.sheenColorMapTransform)),A.sheenRoughnessMap&&(U.sheenRoughnessMap.value=A.sheenRoughnessMap,n(A.sheenRoughnessMap,U.sheenRoughnessMapTransform))),A.clearcoat>0&&(U.clearcoat.value=A.clearcoat,U.clearcoatRoughness.value=A.clearcoatRoughness,A.clearcoatMap&&(U.clearcoatMap.value=A.clearcoatMap,n(A.clearcoatMap,U.clearcoatMapTransform)),A.clearcoatRoughnessMap&&(U.clearcoatRoughnessMap.value=A.clearcoatRoughnessMap,n(A.clearcoatRoughnessMap,U.clearcoatRoughnessMapTransform)),A.clearcoatNormalMap&&(U.clearcoatNormalMap.value=A.clearcoatNormalMap,n(A.clearcoatNormalMap,U.clearcoatNormalMapTransform),U.clearcoatNormalScale.value.copy(A.clearcoatNormalScale),A.side===T&&U.clearcoatNormalScale.value.negate())),A.iridescence>0&&(U.iridescence.value=A.iridescence,U.iridescenceIOR.value=A.iridescenceIOR,U.iridescenceThicknessMinimum.value=A.iridescenceThicknessRange[0],U.iridescenceThicknessMaximum.value=A.iridescenceThicknessRange[1],A.iridescenceMap&&(U.iridescenceMap.value=A.iridescenceMap,n(A.iridescenceMap,U.iridescenceMapTransform)),A.iridescenceThicknessMap&&(U.iridescenceThicknessMap.value=A.iridescenceThicknessMap,n(A.iridescenceThicknessMap,U.iridescenceThicknessMapTransform))),A.transmission>0&&(U.transmission.value=A.transmission,U.transmissionSamplerMap.value=z.texture,U.transmissionSamplerSize.value.set(z.width,z.height),A.transmissionMap&&(U.transmissionMap.value=A.transmissionMap,n(A.transmissionMap,U.transmissionMapTransform)),U.thickness.value=A.thickness,A.thicknessMap&&(U.thicknessMap.value=A.thicknessMap,n(A.thicknessMap,U.thicknessMapTransform)),U.attenuationDistance.value=A.attenuationDistance,U.attenuationColor.value.copy(A.attenuationColor)),U.specularIntensity.value=A.specularIntensity,U.specularColor.value.copy(A.specularColor),A.specularColorMap&&(U.specularColorMap.value=A.specularColorMap,n(A.specularColorMap,U.specularColorMapTransform)),A.specularIntensityMap&&(U.specularIntensityMap.value=A.specularIntensityMap,n(A.specularIntensityMap,U.specularIntensityMapTransform))}function C(U,A){A.matcap&&(U.matcap.value=A.matcap)}function I(U,A){const z=e.get(A).light;U.referencePosition.value.setFromMatrixPosition(z.matrixWorld),U.nearDistance.value=z.shadow.camera.near,U.farDistance.value=z.shadow.camera.far}return{refreshFogUniforms:r,refreshMaterialUniforms:a}}function uw(c,e,n,r){let a={},l={},u=[];const d=n.isWebGL2?c.getParameter(c.MAX_UNIFORM_BUFFER_BINDINGS):0;function g(z,F){const k=F.program;r.uniformBlockBinding(z,k)}function _(z,F){let k=a[z.id];k===void 0&&(C(z),k=y(z),a[z.id]=k,z.addEventListener("dispose",U));const Y=F.program;r.updateUBOMapping(z,Y);const K=e.render.frame;l[z.id]!==K&&(E(z),l[z.id]=K)}function y(z){const F=S();z.__bindingPointIndex=F;const k=c.createBuffer(),Y=z.__size,K=z.usage;return c.bindBuffer(c.UNIFORM_BUFFER,k),c.bufferData(c.UNIFORM_BUFFER,Y,K),c.bindBuffer(c.UNIFORM_BUFFER,null),c.bindBufferBase(c.UNIFORM_BUFFER,F,k),k}function S(){for(let z=0;z<d;z++)if(u.indexOf(z)===-1)return u.push(z),z;return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."),0}function E(z){const F=a[z.id],k=z.uniforms,Y=z.__cache;c.bindBuffer(c.UNIFORM_BUFFER,F);for(let K=0,se=k.length;K<se;K++){const le=k[K];if(w(le,K,Y)===!0){const G=le.__offset,ee=Array.isArray(le.value)?le.value:[le.value];let Pe=0;for(let Ue=0;Ue<ee.length;Ue++){const ge=ee[Ue],Se=I(ge);typeof ge=="number"?(le.__data[0]=ge,c.bufferSubData(c.UNIFORM_BUFFER,G+Pe,le.__data)):ge.isMatrix3?(le.__data[0]=ge.elements[0],le.__data[1]=ge.elements[1],le.__data[2]=ge.elements[2],le.__data[3]=ge.elements[0],le.__data[4]=ge.elements[3],le.__data[5]=ge.elements[4],le.__data[6]=ge.elements[5],le.__data[7]=ge.elements[0],le.__data[8]=ge.elements[6],le.__data[9]=ge.elements[7],le.__data[10]=ge.elements[8],le.__data[11]=ge.elements[0]):(ge.toArray(le.__data,Pe),Pe+=Se.storage/Float32Array.BYTES_PER_ELEMENT)}c.bufferSubData(c.UNIFORM_BUFFER,G,le.__data)}}c.bindBuffer(c.UNIFORM_BUFFER,null)}function w(z,F,k){const Y=z.value;if(k[F]===void 0){if(typeof Y=="number")k[F]=Y;else{const K=Array.isArray(Y)?Y:[Y],se=[];for(let le=0;le<K.length;le++)se.push(K[le].clone());k[F]=se}return!0}else if(typeof Y=="number"){if(k[F]!==Y)return k[F]=Y,!0}else{const K=Array.isArray(k[F])?k[F]:[k[F]],se=Array.isArray(Y)?Y:[Y];for(let le=0;le<K.length;le++){const G=K[le];if(G.equals(se[le])===!1)return G.copy(se[le]),!0}}return!1}function C(z){const F=z.uniforms;let k=0;const Y=16;let K=0;for(let se=0,le=F.length;se<le;se++){const G=F[se],ee={boundary:0,storage:0},Pe=Array.isArray(G.value)?G.value:[G.value];for(let Ue=0,ge=Pe.length;Ue<ge;Ue++){const Se=Pe[Ue],De=I(Se);ee.boundary+=De.boundary,ee.storage+=De.storage}if(G.__data=new Float32Array(ee.storage/Float32Array.BYTES_PER_ELEMENT),G.__offset=k,se>0){K=k%Y;const Ue=Y-K;K!==0&&Ue-ee.boundary<0&&(k+=Y-K,G.__offset=k)}k+=ee.storage}return K=k%Y,K>0&&(k+=Y-K),z.__size=k,z.__cache={},this}function I(z){const F={boundary:0,storage:0};return typeof z=="number"?(F.boundary=4,F.storage=4):z.isVector2?(F.boundary=8,F.storage=8):z.isVector3||z.isColor?(F.boundary=16,F.storage=12):z.isVector4?(F.boundary=16,F.storage=16):z.isMatrix3?(F.boundary=48,F.storage=48):z.isMatrix4?(F.boundary=64,F.storage=64):z.isTexture?console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group."):console.warn("THREE.WebGLRenderer: Unsupported uniform value type.",z),F}function U(z){const F=z.target;F.removeEventListener("dispose",U);const k=u.indexOf(F.__bindingPointIndex);u.splice(k,1),c.deleteBuffer(a[F.id]),delete a[F.id],delete l[F.id]}function A(){for(const z in a)c.deleteBuffer(a[z]);u=[],a={},l={}}return{bind:g,update:_,dispose:A}}function fw(){const c=xc("canvas");return c.style.display="block",c}class jg{constructor(e={}){const{canvas:n=fw(),context:r=null,depth:a=!0,stencil:l=!0,alpha:u=!1,antialias:d=!1,premultipliedAlpha:g=!0,preserveDrawingBuffer:_=!1,powerPreference:y="default",failIfMajorPerformanceCaveat:S=!1}=e;this.isWebGLRenderer=!0;let E;r!==null?E=r.getContextAttributes().alpha:E=u;let w=null,C=null;const I=[],U=[];this.domElement=n,this.debug={checkShaderErrors:!0,onShaderError:null},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.outputColorSpace=gn,this.useLegacyLights=!0,this.toneMapping=hn,this.toneMappingExposure=1;const A=this;let z=!1,F=0,k=0,Y=null,K=-1,se=null;const le=new Hn,G=new Hn;let ee=null,Pe=n.width,Ue=n.height,ge=1,Se=null,De=null;const $e=new Hn(0,0,Pe,Ue),Ze=new Hn(0,0,Pe,Ue);let Ke=!1;const ct=new ou;let Qe=!1,Ot=!1,pt=null;const Fe=new fn,je=new j,vt={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};function bt(){return Y===null?ge:1}let he=r;function rn(J,Me){for(let Be=0;Be<J.length;Be++){const _e=J[Be],We=n.getContext(_e,Me);if(We!==null)return We}return null}try{const J={alpha:!0,depth:a,stencil:l,antialias:d,premultipliedAlpha:g,preserveDrawingBuffer:_,powerPreference:y,failIfMajorPerformanceCaveat:S};if("setAttribute"in n&&n.setAttribute("data-engine",`three.js r${h}`),n.addEventListener("webglcontextlost",Ht,!1),n.addEventListener("webglcontextrestored",In,!1),n.addEventListener("webglcontextcreationerror",Vn,!1),he===null){const Me=["webgl2","webgl","experimental-webgl"];if(A.isWebGL1Renderer===!0&&Me.shift(),he=rn(Me,J),he===null)throw rn(Me)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}he.getShaderPrecisionFormat===void 0&&(he.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(J){throw console.error("THREE.WebGLRenderer: "+J.message),J}let an,dt,kt,et,Ve,tt,Lt,Mt,Kt,$t,qt,Tn,zn,ie,Z,Te,at,ht,Et,en,Pt,Ge,Bt,Yt;function Jt(){an=new Rb(he),dt=new Sb(he,an,e),an.init(dt),Ge=new Kg(he,an,dt),kt=new aw(he,an,dt),et=new Lb(he),Ve=new ZT,tt=new ow(he,an,kt,Ve,dt,Ge,et),Lt=new bb(A),Mt=new Ab(A),Kt=new ES(he,dt),Bt=new yb(he,an,Kt,dt),$t=new Cb(he,Kt,et,Bt),qt=new Nb(he,$t,Kt,et),Et=new Ib(he,dt,tt),Te=new Eb(Ve),Tn=new YT(A,Lt,Mt,an,dt,Bt,Te),zn=new hw(A,Ve),ie=new $T,Z=new nw(an,dt),ht=new vb(A,Lt,Mt,kt,qt,E,g),at=new sw(A,qt,dt),Yt=new uw(he,et,dt,kt),en=new Mb(he,an,et,dt),Pt=new Pb(he,an,et,dt),et.programs=Tn.programs,A.capabilities=dt,A.extensions=an,A.properties=Ve,A.renderLists=ie,A.shadowMap=at,A.state=kt,A.info=et}Jt();const Dt=new cw(A,he);this.xr=Dt,this.getContext=function(){return he},this.getContextAttributes=function(){return he.getContextAttributes()},this.forceContextLoss=function(){const J=an.get("WEBGL_lose_context");J&&J.loseContext()},this.forceContextRestore=function(){const J=an.get("WEBGL_lose_context");J&&J.restoreContext()},this.getPixelRatio=function(){return ge},this.setPixelRatio=function(J){J!==void 0&&(ge=J,this.setSize(Pe,Ue,!1))},this.getSize=function(J){return J.set(Pe,Ue)},this.setSize=function(J,Me,Be=!0){if(Dt.isPresenting){console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");return}Pe=J,Ue=Me,n.width=Math.floor(J*ge),n.height=Math.floor(Me*ge),Be===!0&&(n.style.width=J+"px",n.style.height=Me+"px"),this.setViewport(0,0,J,Me)},this.getDrawingBufferSize=function(J){return J.set(Pe*ge,Ue*ge).floor()},this.setDrawingBufferSize=function(J,Me,Be){Pe=J,Ue=Me,ge=Be,n.width=Math.floor(J*Be),n.height=Math.floor(Me*Be),this.setViewport(0,0,J,Me)},this.getCurrentViewport=function(J){return J.copy(le)},this.getViewport=function(J){return J.copy($e)},this.setViewport=function(J,Me,Be,_e){J.isVector4?$e.set(J.x,J.y,J.z,J.w):$e.set(J,Me,Be,_e),kt.viewport(le.copy($e).multiplyScalar(ge).floor())},this.getScissor=function(J){return J.copy(Ze)},this.setScissor=function(J,Me,Be,_e){J.isVector4?Ze.set(J.x,J.y,J.z,J.w):Ze.set(J,Me,Be,_e),kt.scissor(G.copy(Ze).multiplyScalar(ge).floor())},this.getScissorTest=function(){return Ke},this.setScissorTest=function(J){kt.setScissorTest(Ke=J)},this.setOpaqueSort=function(J){Se=J},this.setTransparentSort=function(J){De=J},this.getClearColor=function(J){return J.copy(ht.getClearColor())},this.setClearColor=function(){ht.setClearColor.apply(ht,arguments)},this.getClearAlpha=function(){return ht.getClearAlpha()},this.setClearAlpha=function(){ht.setClearAlpha.apply(ht,arguments)},this.clear=function(J=!0,Me=!0,Be=!0){let _e=0;J&&(_e|=he.COLOR_BUFFER_BIT),Me&&(_e|=he.DEPTH_BUFFER_BIT),Be&&(_e|=he.STENCIL_BUFFER_BIT),he.clear(_e)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){n.removeEventListener("webglcontextlost",Ht,!1),n.removeEventListener("webglcontextrestored",In,!1),n.removeEventListener("webglcontextcreationerror",Vn,!1),ie.dispose(),Z.dispose(),Ve.dispose(),Lt.dispose(),Mt.dispose(),qt.dispose(),Bt.dispose(),Yt.dispose(),Tn.dispose(),Dt.dispose(),Dt.removeEventListener("sessionstart",Gt),Dt.removeEventListener("sessionend",qn),pt&&(pt.dispose(),pt=null),Yn.stop()};function Ht(J){J.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),z=!0}function In(){console.log("THREE.WebGLRenderer: Context Restored."),z=!1;const J=et.autoReset,Me=at.enabled,Be=at.autoUpdate,_e=at.needsUpdate,We=at.type;Jt(),et.autoReset=J,at.enabled=Me,at.autoUpdate=Be,at.needsUpdate=_e,at.type=We}function Vn(J){console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ",J.statusMessage)}function mi(J){const Me=J.target;Me.removeEventListener("dispose",mi),ue(Me)}function ue(J){Oe(J),Ve.remove(J)}function Oe(J){const Me=Ve.get(J).programs;Me!==void 0&&(Me.forEach(function(Be){Tn.releaseProgram(Be)}),J.isShaderMaterial&&Tn.releaseShaderCache(J))}this.renderBufferDirect=function(J,Me,Be,_e,We,Zt){Me===null&&(Me=vt);const jt=We.isMesh&&We.matrixWorld.determinant()<0,on=y1(J,Me,Be,_e,We);kt.setMaterial(_e,jt);let Sn=Be.index,An=1;_e.wireframe===!0&&(Sn=$t.getWireframeAttribute(Be),An=2);const Rn=Be.drawRange,Cn=Be.attributes.position;let Wn=Rn.start*An,er=(Rn.start+Rn.count)*An;Zt!==null&&(Wn=Math.max(Wn,Zt.start*An),er=Math.min(er,(Zt.start+Zt.count)*An)),Sn!==null?(Wn=Math.max(Wn,0),er=Math.min(er,Sn.count)):Cn!=null&&(Wn=Math.max(Wn,0),er=Math.min(er,Cn.count));const ns=er-Wn;if(ns<0||ns===1/0)return;Bt.setup(We,_e,on,Be,Sn);let ro,vi=en;if(Sn!==null&&(ro=Kt.get(Sn),vi=Pt,vi.setIndex(ro)),We.isMesh)_e.wireframe===!0?(kt.setLineWidth(_e.wireframeLinewidth*bt()),vi.setMode(he.LINES)):vi.setMode(he.TRIANGLES);else if(We.isLine){let Nn=_e.linewidth;Nn===void 0&&(Nn=1),kt.setLineWidth(Nn*bt()),We.isLineSegments?vi.setMode(he.LINES):We.isLineLoop?vi.setMode(he.LINE_LOOP):vi.setMode(he.LINE_STRIP)}else We.isPoints?vi.setMode(he.POINTS):We.isSprite&&vi.setMode(he.TRIANGLES);if(We.isInstancedMesh)vi.renderInstances(Wn,ns,We.count);else if(Be.isInstancedBufferGeometry){const Nn=Be._maxInstanceCount!==void 0?Be._maxInstanceCount:1/0,op=Math.min(Be.instanceCount,Nn);vi.renderInstances(Wn,ns,op)}else vi.render(Wn,ns)},this.compile=function(J,Me){function Be(_e,We,Zt){_e.transparent===!0&&_e.side===P&&_e.forceSinglePass===!1?(_e.side=T,_e.needsUpdate=!0,Vu(_e,We,Zt),_e.side=b,_e.needsUpdate=!0,Vu(_e,We,Zt),_e.side=P):Vu(_e,We,Zt)}C=Z.get(J),C.init(),U.push(C),J.traverseVisible(function(_e){_e.isLight&&_e.layers.test(Me.layers)&&(C.pushLight(_e),_e.castShadow&&C.pushShadow(_e))}),C.setupLights(A.useLegacyLights),J.traverse(function(_e){const We=_e.material;if(We)if(Array.isArray(We))for(let Zt=0;Zt<We.length;Zt++){const jt=We[Zt];Be(jt,J,_e)}else Be(We,J,_e)}),U.pop(),C=null};let ot=null;function Rt(J){ot&&ot(J)}function Gt(){Yn.stop()}function qn(){Yn.start()}const Yn=new Eg;Yn.setAnimationLoop(Rt),typeof self<"u"&&Yn.setContext(self),this.setAnimationLoop=function(J){ot=J,Dt.setAnimationLoop(J),J===null?Yn.stop():Yn.start()},Dt.addEventListener("sessionstart",Gt),Dt.addEventListener("sessionend",qn),this.render=function(J,Me){if(Me!==void 0&&Me.isCamera!==!0){console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");return}if(z===!0)return;J.matrixWorldAutoUpdate===!0&&J.updateMatrixWorld(),Me.parent===null&&Me.matrixWorldAutoUpdate===!0&&Me.updateMatrixWorld(),Dt.enabled===!0&&Dt.isPresenting===!0&&(Dt.cameraAutoUpdate===!0&&Dt.updateCamera(Me),Me=Dt.getCamera()),J.isScene===!0&&J.onBeforeRender(A,J,Me,Y),C=Z.get(J,U.length),C.init(),U.push(C),Fe.multiplyMatrices(Me.projectionMatrix,Me.matrixWorldInverse),ct.setFromProjectionMatrix(Fe),Ot=this.localClippingEnabled,Qe=Te.init(this.clippingPlanes,Ot),w=ie.get(J,I.length),w.init(),I.push(w),Vi(J,Me,0,A.sortObjects),w.finish(),A.sortObjects===!0&&w.sort(Se,De),Qe===!0&&Te.beginShadows();const Be=C.state.shadowsArray;if(at.render(Be,J,Me),Qe===!0&&Te.endShadows(),this.info.autoReset===!0&&this.info.reset(),ht.render(w,J),C.setupLights(A.useLegacyLights),Me.isArrayCamera){const _e=Me.cameras;for(let We=0,Zt=_e.length;We<Zt;We++){const jt=_e[We];da(w,J,jt,jt.viewport)}}else da(w,J,Me);Y!==null&&(tt.updateMultisampleRenderTarget(Y),tt.updateRenderTargetMipmap(Y)),J.isScene===!0&&J.onAfterRender(A,J,Me),Bt.resetDefaultState(),K=-1,se=null,U.pop(),U.length>0?C=U[U.length-1]:C=null,I.pop(),I.length>0?w=I[I.length-1]:w=null};function Vi(J,Me,Be,_e){if(J.visible===!1)return;if(J.layers.test(Me.layers)){if(J.isGroup)Be=J.renderOrder;else if(J.isLOD)J.autoUpdate===!0&&J.update(Me);else if(J.isLight)C.pushLight(J),J.castShadow&&C.pushShadow(J);else if(J.isSprite){if(!J.frustumCulled||ct.intersectsSprite(J)){_e&&je.setFromMatrixPosition(J.matrixWorld).applyMatrix4(Fe);const jt=qt.update(J),on=J.material;on.visible&&w.push(J,jt,on,Be,je.z,null)}}else if((J.isMesh||J.isLine||J.isPoints)&&(!J.frustumCulled||ct.intersectsObject(J))){J.isSkinnedMesh&&J.skeleton.frame!==et.render.frame&&(J.skeleton.update(),J.skeleton.frame=et.render.frame);const jt=qt.update(J),on=J.material;if(_e&&(jt.boundingSphere===null&&jt.computeBoundingSphere(),je.copy(jt.boundingSphere.center).applyMatrix4(J.matrixWorld).applyMatrix4(Fe)),Array.isArray(on)){const Sn=jt.groups;for(let An=0,Rn=Sn.length;An<Rn;An++){const Cn=Sn[An],Wn=on[Cn.materialIndex];Wn&&Wn.visible&&w.push(J,jt,Wn,Be,je.z,Cn)}}else on.visible&&w.push(J,jt,on,Be,je.z,null)}}const Zt=J.children;for(let jt=0,on=Zt.length;jt<on;jt++)Vi(Zt[jt],Me,Be,_e)}function da(J,Me,Be,_e){const We=J.opaque,Zt=J.transmissive,jt=J.transparent;C.setupLightsView(Be),Qe===!0&&Te.setGlobalState(A.clippingPlanes,Be),Zt.length>0&&gi(We,Zt,Me,Be),_e&&kt.viewport(le.copy(_e)),We.length>0&&Ur(We,Me,Be),Zt.length>0&&Ur(Zt,Me,Be),jt.length>0&&Ur(jt,Me,Be),kt.buffers.depth.setTest(!0),kt.buffers.depth.setMask(!0),kt.buffers.color.setMask(!0),kt.setPolygonOffset(!1)}function gi(J,Me,Be,_e){if(pt===null){const on=dt.isWebGL2;pt=new Kr(1024,1024,{generateMipmaps:!0,type:an.has("EXT_color_buffer_half_float")?Un:nn,minFilter:wt,samples:on&&d===!0?4:0})}const We=A.getRenderTarget();A.setRenderTarget(pt),A.clear();const Zt=A.toneMapping;A.toneMapping=hn,Ur(J,Be,_e),tt.updateMultisampleRenderTarget(pt),tt.updateRenderTargetMipmap(pt);let jt=!1;for(let on=0,Sn=Me.length;on<Sn;on++){const An=Me[on],Rn=An.object,Cn=An.geometry,Wn=An.material,er=An.group;if(Wn.side===P&&Rn.layers.test(_e.layers)){const ns=Wn.side;Wn.side=T,Wn.needsUpdate=!0,_s(Rn,Be,_e,Cn,Wn,er),Wn.side=ns,Wn.needsUpdate=!0,jt=!0}}jt===!0&&(tt.updateMultisampleRenderTarget(pt),tt.updateRenderTargetMipmap(pt)),A.setRenderTarget(We),A.toneMapping=Zt}function Ur(J,Me,Be){const _e=Me.isScene===!0?Me.overrideMaterial:null;for(let We=0,Zt=J.length;We<Zt;We++){const jt=J[We],on=jt.object,Sn=jt.geometry,An=_e===null?jt.material:_e,Rn=jt.group;on.layers.test(Be.layers)&&_s(on,Me,Be,Sn,An,Rn)}}function _s(J,Me,Be,_e,We,Zt){J.onBeforeRender(A,Me,Be,_e,We,Zt),J.modelViewMatrix.multiplyMatrices(Be.matrixWorldInverse,J.matrixWorld),J.normalMatrix.getNormalMatrix(J.modelViewMatrix),We.onBeforeRender(A,Me,Be,_e,J,Zt),We.transparent===!0&&We.side===P&&We.forceSinglePass===!1?(We.side=T,We.needsUpdate=!0,A.renderBufferDirect(Be,Me,_e,We,J,Zt),We.side=b,We.needsUpdate=!0,A.renderBufferDirect(Be,Me,_e,We,J,Zt),We.side=P):A.renderBufferDirect(Be,Me,_e,We,J,Zt),J.onAfterRender(A,Me,Be,_e,We,Zt)}function Vu(J,Me,Be){Me.isScene!==!0&&(Me=vt);const _e=Ve.get(J),We=C.state.lights,Zt=C.state.shadowsArray,jt=We.state.version,on=Tn.getParameters(J,We.state,Zt,Me,Be),Sn=Tn.getProgramCacheKey(on);let An=_e.programs;_e.environment=J.isMeshStandardMaterial?Me.environment:null,_e.fog=Me.fog,_e.envMap=(J.isMeshStandardMaterial?Mt:Lt).get(J.envMap||_e.environment),An===void 0&&(J.addEventListener("dispose",mi),An=new Map,_e.programs=An);let Rn=An.get(Sn);if(Rn!==void 0){if(_e.currentProgram===Rn&&_e.lightsStateVersion===jt)return I0(J,on),Rn}else on.uniforms=Tn.getUniforms(J),J.onBuild(Be,on,A),J.onBeforeCompile(on,A),Rn=Tn.acquireProgram(on,Sn),An.set(Sn,Rn),_e.uniforms=on.uniforms;const Cn=_e.uniforms;(!J.isShaderMaterial&&!J.isRawShaderMaterial||J.clipping===!0)&&(Cn.clippingPlanes=Te.uniform),I0(J,on),_e.needsLights=S1(J),_e.lightsStateVersion=jt,_e.needsLights&&(Cn.ambientLightColor.value=We.state.ambient,Cn.lightProbe.value=We.state.probe,Cn.directionalLights.value=We.state.directional,Cn.directionalLightShadows.value=We.state.directionalShadow,Cn.spotLights.value=We.state.spot,Cn.spotLightShadows.value=We.state.spotShadow,Cn.rectAreaLights.value=We.state.rectArea,Cn.ltc_1.value=We.state.rectAreaLTC1,Cn.ltc_2.value=We.state.rectAreaLTC2,Cn.pointLights.value=We.state.point,Cn.pointLightShadows.value=We.state.pointShadow,Cn.hemisphereLights.value=We.state.hemi,Cn.directionalShadowMap.value=We.state.directionalShadowMap,Cn.directionalShadowMatrix.value=We.state.directionalShadowMatrix,Cn.spotShadowMap.value=We.state.spotShadowMap,Cn.spotLightMatrix.value=We.state.spotLightMatrix,Cn.spotLightMap.value=We.state.spotLightMap,Cn.pointShadowMap.value=We.state.pointShadowMap,Cn.pointShadowMatrix.value=We.state.pointShadowMatrix);const Wn=Rn.getUniforms(),er=fu.seqWithValue(Wn.seq,Cn);return _e.currentProgram=Rn,_e.uniformsList=er,Rn}function I0(J,Me){const Be=Ve.get(J);Be.outputColorSpace=Me.outputColorSpace,Be.instancing=Me.instancing,Be.skinning=Me.skinning,Be.morphTargets=Me.morphTargets,Be.morphNormals=Me.morphNormals,Be.morphColors=Me.morphColors,Be.morphTargetsCount=Me.morphTargetsCount,Be.numClippingPlanes=Me.numClippingPlanes,Be.numIntersection=Me.numClipIntersection,Be.vertexAlphas=Me.vertexAlphas,Be.vertexTangents=Me.vertexTangents,Be.toneMapping=Me.toneMapping}function y1(J,Me,Be,_e,We){Me.isScene!==!0&&(Me=vt),tt.resetTextureUnits();const Zt=Me.fog,jt=_e.isMeshStandardMaterial?Me.environment:null,on=Y===null?A.outputColorSpace:Y.isXRRenderTarget===!0?Y.texture.colorSpace:Zr,Sn=(_e.isMeshStandardMaterial?Mt:Lt).get(_e.envMap||jt),An=_e.vertexColors===!0&&!!Be.attributes.color&&Be.attributes.color.itemSize===4,Rn=!!_e.normalMap&&!!Be.attributes.tangent,Cn=!!Be.morphAttributes.position,Wn=!!Be.morphAttributes.normal,er=!!Be.morphAttributes.color,ns=_e.toneMapped?A.toneMapping:hn,ro=Be.morphAttributes.position||Be.morphAttributes.normal||Be.morphAttributes.color,vi=ro!==void 0?ro.length:0,Nn=Ve.get(_e),op=C.state.lights;if(Qe===!0&&(Ot===!0||J!==se)){const Er=J===se&&_e.id===K;Te.setState(_e,J,Er)}let Li=!1;_e.version===Nn.__version?(Nn.needsLights&&Nn.lightsStateVersion!==op.state.version||Nn.outputColorSpace!==on||We.isInstancedMesh&&Nn.instancing===!1||!We.isInstancedMesh&&Nn.instancing===!0||We.isSkinnedMesh&&Nn.skinning===!1||!We.isSkinnedMesh&&Nn.skinning===!0||Nn.envMap!==Sn||_e.fog===!0&&Nn.fog!==Zt||Nn.numClippingPlanes!==void 0&&(Nn.numClippingPlanes!==Te.numPlanes||Nn.numIntersection!==Te.numIntersection)||Nn.vertexAlphas!==An||Nn.vertexTangents!==Rn||Nn.morphTargets!==Cn||Nn.morphNormals!==Wn||Nn.morphColors!==er||Nn.toneMapping!==ns||dt.isWebGL2===!0&&Nn.morphTargetsCount!==vi)&&(Li=!0):(Li=!0,Nn.__version=_e.version);let so=Nn.currentProgram;Li===!0&&(so=Vu(_e,Me,We));let N0=!1,rh=!1,lp=!1;const tr=so.getUniforms(),ao=Nn.uniforms;if(kt.useProgram(so.program)&&(N0=!0,rh=!0,lp=!0),_e.id!==K&&(K=_e.id,rh=!0),N0||se!==J){if(tr.setValue(he,"projectionMatrix",J.projectionMatrix),dt.logarithmicDepthBuffer&&tr.setValue(he,"logDepthBufFC",2/(Math.log(J.far+1)/Math.LN2)),se!==J&&(se=J,rh=!0,lp=!0),_e.isShaderMaterial||_e.isMeshPhongMaterial||_e.isMeshToonMaterial||_e.isMeshStandardMaterial||_e.envMap){const Er=tr.map.cameraPosition;Er!==void 0&&Er.setValue(he,je.setFromMatrixPosition(J.matrixWorld))}(_e.isMeshPhongMaterial||_e.isMeshToonMaterial||_e.isMeshLambertMaterial||_e.isMeshBasicMaterial||_e.isMeshStandardMaterial||_e.isShaderMaterial)&&tr.setValue(he,"isOrthographic",J.isOrthographicCamera===!0),(_e.isMeshPhongMaterial||_e.isMeshToonMaterial||_e.isMeshLambertMaterial||_e.isMeshBasicMaterial||_e.isMeshStandardMaterial||_e.isShaderMaterial||_e.isShadowMaterial||We.isSkinnedMesh)&&tr.setValue(he,"viewMatrix",J.matrixWorldInverse)}if(We.isSkinnedMesh){tr.setOptional(he,We,"bindMatrix"),tr.setOptional(he,We,"bindMatrixInverse");const Er=We.skeleton;Er&&(dt.floatVertexTextures?(Er.boneTexture===null&&Er.computeBoneTexture(),tr.setValue(he,"boneTexture",Er.boneTexture,tt),tr.setValue(he,"boneTextureSize",Er.boneTextureSize)):console.warn("THREE.WebGLRenderer: SkinnedMesh can only be used with WebGL 2. With WebGL 1 OES_texture_float and vertex textures support is required."))}const cp=Be.morphAttributes;if((cp.position!==void 0||cp.normal!==void 0||cp.color!==void 0&&dt.isWebGL2===!0)&&Et.update(We,Be,so),(rh||Nn.receiveShadow!==We.receiveShadow)&&(Nn.receiveShadow=We.receiveShadow,tr.setValue(he,"receiveShadow",We.receiveShadow)),_e.isMeshGouraudMaterial&&_e.envMap!==null&&(ao.envMap.value=Sn,ao.flipEnvMap.value=Sn.isCubeTexture&&Sn.isRenderTargetTexture===!1?-1:1),rh&&(tr.setValue(he,"toneMappingExposure",A.toneMappingExposure),Nn.needsLights&&M1(ao,lp),Zt&&_e.fog===!0&&zn.refreshFogUniforms(ao,Zt),zn.refreshMaterialUniforms(ao,_e,ge,Ue,pt),fu.upload(he,Nn.uniformsList,ao,tt)),_e.isShaderMaterial&&_e.uniformsNeedUpdate===!0&&(fu.upload(he,Nn.uniformsList,ao,tt),_e.uniformsNeedUpdate=!1),_e.isSpriteMaterial&&tr.setValue(he,"center",We.center),tr.setValue(he,"modelViewMatrix",We.modelViewMatrix),tr.setValue(he,"normalMatrix",We.normalMatrix),tr.setValue(he,"modelMatrix",We.matrixWorld),_e.isShaderMaterial||_e.isRawShaderMaterial){const Er=_e.uniformsGroups;for(let hp=0,E1=Er.length;hp<E1;hp++)if(dt.isWebGL2){const F0=Er[hp];Yt.update(F0,so),Yt.bind(F0,so)}else console.warn("THREE.WebGLRenderer: Uniform Buffer Objects can only be used with WebGL 2.")}return so}function M1(J,Me){J.ambientLightColor.needsUpdate=Me,J.lightProbe.needsUpdate=Me,J.directionalLights.needsUpdate=Me,J.directionalLightShadows.needsUpdate=Me,J.pointLights.needsUpdate=Me,J.pointLightShadows.needsUpdate=Me,J.spotLights.needsUpdate=Me,J.spotLightShadows.needsUpdate=Me,J.rectAreaLights.needsUpdate=Me,J.hemisphereLights.needsUpdate=Me}function S1(J){return J.isMeshLambertMaterial||J.isMeshToonMaterial||J.isMeshPhongMaterial||J.isMeshStandardMaterial||J.isShadowMaterial||J.isShaderMaterial&&J.lights===!0}this.getActiveCubeFace=function(){return F},this.getActiveMipmapLevel=function(){return k},this.getRenderTarget=function(){return Y},this.setRenderTargetTextures=function(J,Me,Be){Ve.get(J.texture).__webglTexture=Me,Ve.get(J.depthTexture).__webglTexture=Be;const _e=Ve.get(J);_e.__hasExternalTextures=!0,_e.__hasExternalTextures&&(_e.__autoAllocateDepthBuffer=Be===void 0,_e.__autoAllocateDepthBuffer||an.has("WEBGL_multisampled_render_to_texture")===!0&&(console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided"),_e.__useRenderToTexture=!1))},this.setRenderTargetFramebuffer=function(J,Me){const Be=Ve.get(J);Be.__webglFramebuffer=Me,Be.__useDefaultFramebuffer=Me===void 0},this.setRenderTarget=function(J,Me=0,Be=0){Y=J,F=Me,k=Be;let _e=!0,We=null,Zt=!1,jt=!1;if(J){const Sn=Ve.get(J);Sn.__useDefaultFramebuffer!==void 0?(kt.bindFramebuffer(he.FRAMEBUFFER,null),_e=!1):Sn.__webglFramebuffer===void 0?tt.setupRenderTarget(J):Sn.__hasExternalTextures&&tt.rebindTextures(J,Ve.get(J.texture).__webglTexture,Ve.get(J.depthTexture).__webglTexture);const An=J.texture;(An.isData3DTexture||An.isDataArrayTexture||An.isCompressedArrayTexture)&&(jt=!0);const Rn=Ve.get(J).__webglFramebuffer;J.isWebGLCubeRenderTarget?(We=Rn[Me],Zt=!0):dt.isWebGL2&&J.samples>0&&tt.useMultisampledRTT(J)===!1?We=Ve.get(J).__webglMultisampledFramebuffer:We=Rn,le.copy(J.viewport),G.copy(J.scissor),ee=J.scissorTest}else le.copy($e).multiplyScalar(ge).floor(),G.copy(Ze).multiplyScalar(ge).floor(),ee=Ke;if(kt.bindFramebuffer(he.FRAMEBUFFER,We)&&dt.drawBuffers&&_e&&kt.drawBuffers(J,We),kt.viewport(le),kt.scissor(G),kt.setScissorTest(ee),Zt){const Sn=Ve.get(J.texture);he.framebufferTexture2D(he.FRAMEBUFFER,he.COLOR_ATTACHMENT0,he.TEXTURE_CUBE_MAP_POSITIVE_X+Me,Sn.__webglTexture,Be)}else if(jt){const Sn=Ve.get(J.texture),An=Me||0;he.framebufferTextureLayer(he.FRAMEBUFFER,he.COLOR_ATTACHMENT0,Sn.__webglTexture,Be||0,An)}K=-1},this.readRenderTargetPixels=function(J,Me,Be,_e,We,Zt,jt){if(!(J&&J.isWebGLRenderTarget)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");return}let on=Ve.get(J).__webglFramebuffer;if(J.isWebGLCubeRenderTarget&&jt!==void 0&&(on=on[jt]),on){kt.bindFramebuffer(he.FRAMEBUFFER,on);try{const Sn=J.texture,An=Sn.format,Rn=Sn.type;if(An!==Jn&&Ge.convert(An)!==he.getParameter(he.IMPLEMENTATION_COLOR_READ_FORMAT)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");return}const Cn=Rn===Un&&(an.has("EXT_color_buffer_half_float")||dt.isWebGL2&&an.has("EXT_color_buffer_float"));if(Rn!==nn&&Ge.convert(Rn)!==he.getParameter(he.IMPLEMENTATION_COLOR_READ_TYPE)&&!(Rn===Ct&&(dt.isWebGL2||an.has("OES_texture_float")||an.has("WEBGL_color_buffer_float")))&&!Cn){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");return}Me>=0&&Me<=J.width-_e&&Be>=0&&Be<=J.height-We&&he.readPixels(Me,Be,_e,We,Ge.convert(An),Ge.convert(Rn),Zt)}finally{const Sn=Y!==null?Ve.get(Y).__webglFramebuffer:null;kt.bindFramebuffer(he.FRAMEBUFFER,Sn)}}},this.copyFramebufferToTexture=function(J,Me,Be=0){const _e=Math.pow(2,-Be),We=Math.floor(Me.image.width*_e),Zt=Math.floor(Me.image.height*_e);tt.setTexture2D(Me,0),he.copyTexSubImage2D(he.TEXTURE_2D,Be,0,0,J.x,J.y,We,Zt),kt.unbindTexture()},this.copyTextureToTexture=function(J,Me,Be,_e=0){const We=Me.image.width,Zt=Me.image.height,jt=Ge.convert(Be.format),on=Ge.convert(Be.type);tt.setTexture2D(Be,0),he.pixelStorei(he.UNPACK_FLIP_Y_WEBGL,Be.flipY),he.pixelStorei(he.UNPACK_PREMULTIPLY_ALPHA_WEBGL,Be.premultiplyAlpha),he.pixelStorei(he.UNPACK_ALIGNMENT,Be.unpackAlignment),Me.isDataTexture?he.texSubImage2D(he.TEXTURE_2D,_e,J.x,J.y,We,Zt,jt,on,Me.image.data):Me.isCompressedTexture?he.compressedTexSubImage2D(he.TEXTURE_2D,_e,J.x,J.y,Me.mipmaps[0].width,Me.mipmaps[0].height,jt,Me.mipmaps[0].data):he.texSubImage2D(he.TEXTURE_2D,_e,J.x,J.y,jt,on,Me.image),_e===0&&Be.generateMipmaps&&he.generateMipmap(he.TEXTURE_2D),kt.unbindTexture()},this.copyTextureToTexture3D=function(J,Me,Be,_e,We=0){if(A.isWebGL1Renderer){console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");return}const Zt=J.max.x-J.min.x+1,jt=J.max.y-J.min.y+1,on=J.max.z-J.min.z+1,Sn=Ge.convert(_e.format),An=Ge.convert(_e.type);let Rn;if(_e.isData3DTexture)tt.setTexture3D(_e,0),Rn=he.TEXTURE_3D;else if(_e.isDataArrayTexture)tt.setTexture2DArray(_e,0),Rn=he.TEXTURE_2D_ARRAY;else{console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");return}he.pixelStorei(he.UNPACK_FLIP_Y_WEBGL,_e.flipY),he.pixelStorei(he.UNPACK_PREMULTIPLY_ALPHA_WEBGL,_e.premultiplyAlpha),he.pixelStorei(he.UNPACK_ALIGNMENT,_e.unpackAlignment);const Cn=he.getParameter(he.UNPACK_ROW_LENGTH),Wn=he.getParameter(he.UNPACK_IMAGE_HEIGHT),er=he.getParameter(he.UNPACK_SKIP_PIXELS),ns=he.getParameter(he.UNPACK_SKIP_ROWS),ro=he.getParameter(he.UNPACK_SKIP_IMAGES),vi=Be.isCompressedTexture?Be.mipmaps[0]:Be.image;he.pixelStorei(he.UNPACK_ROW_LENGTH,vi.width),he.pixelStorei(he.UNPACK_IMAGE_HEIGHT,vi.height),he.pixelStorei(he.UNPACK_SKIP_PIXELS,J.min.x),he.pixelStorei(he.UNPACK_SKIP_ROWS,J.min.y),he.pixelStorei(he.UNPACK_SKIP_IMAGES,J.min.z),Be.isDataTexture||Be.isData3DTexture?he.texSubImage3D(Rn,We,Me.x,Me.y,Me.z,Zt,jt,on,Sn,An,vi.data):Be.isCompressedArrayTexture?(console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture."),he.compressedTexSubImage3D(Rn,We,Me.x,Me.y,Me.z,Zt,jt,on,Sn,vi.data)):he.texSubImage3D(Rn,We,Me.x,Me.y,Me.z,Zt,jt,on,Sn,An,vi),he.pixelStorei(he.UNPACK_ROW_LENGTH,Cn),he.pixelStorei(he.UNPACK_IMAGE_HEIGHT,Wn),he.pixelStorei(he.UNPACK_SKIP_PIXELS,er),he.pixelStorei(he.UNPACK_SKIP_ROWS,ns),he.pixelStorei(he.UNPACK_SKIP_IMAGES,ro),We===0&&_e.generateMipmaps&&he.generateMipmap(Rn),kt.unbindTexture()},this.initTexture=function(J){J.isCubeTexture?tt.setTextureCube(J,0):J.isData3DTexture?tt.setTexture3D(J,0):J.isDataArrayTexture||J.isCompressedArrayTexture?tt.setTexture2DArray(J,0):tt.setTexture2D(J,0),kt.unbindTexture()},this.resetState=function(){F=0,k=0,Y=null,kt.reset(),Bt.reset()},typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}get physicallyCorrectLights(){return console.warn("THREE.WebGLRenderer: the property .physicallyCorrectLights has been removed. Set renderer.useLegacyLights instead."),!this.useLegacyLights}set physicallyCorrectLights(e){console.warn("THREE.WebGLRenderer: the property .physicallyCorrectLights has been removed. Set renderer.useLegacyLights instead."),this.useLegacyLights=!e}get outputEncoding(){return console.warn("THREE.WebGLRenderer: Property .outputEncoding has been removed. Use .outputColorSpace instead."),this.outputColorSpace===gn?ea:Vf}set outputEncoding(e){console.warn("THREE.WebGLRenderer: Property .outputEncoding has been removed. Use .outputColorSpace instead."),this.outputColorSpace=e===ea?gn:Zr}}class Qg extends jg{}Qg.prototype.isWebGL1Renderer=!0;class du{constructor(e,n=25e-5){this.isFogExp2=!0,this.name="",this.color=new At(e),this.density=n}clone(){return new du(this.color,this.density)}toJSON(){return{type:"FogExp2",color:this.color.getHex(),density:this.density}}}class pu{constructor(e,n=1,r=1e3){this.isFog=!0,this.name="",this.color=new At(e),this.near=n,this.far=r}clone(){return new pu(this.color,this.near,this.far)}toJSON(){return{type:"Fog",color:this.color.getHex(),near:this.near,far:this.far}}}class e_ extends Bn{constructor(){super(),this.isScene=!0,this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.backgroundBlurriness=0,this.backgroundIntensity=1,this.overrideMaterial=null,typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(e,n){return super.copy(e,n),e.background!==null&&(this.background=e.background.clone()),e.environment!==null&&(this.environment=e.environment.clone()),e.fog!==null&&(this.fog=e.fog.clone()),this.backgroundBlurriness=e.backgroundBlurriness,this.backgroundIntensity=e.backgroundIntensity,e.overrideMaterial!==null&&(this.overrideMaterial=e.overrideMaterial.clone()),this.matrixAutoUpdate=e.matrixAutoUpdate,this}toJSON(e){const n=super.toJSON(e);return this.fog!==null&&(n.object.fog=this.fog.toJSON()),this.backgroundBlurriness>0&&(n.object.backgroundBlurriness=this.backgroundBlurriness),this.backgroundIntensity!==1&&(n.object.backgroundIntensity=this.backgroundIntensity),n}get autoUpdate(){return console.warn("THREE.Scene: autoUpdate was renamed to matrixWorldAutoUpdate in r144."),this.matrixWorldAutoUpdate}set autoUpdate(e){console.warn("THREE.Scene: autoUpdate was renamed to matrixWorldAutoUpdate in r144."),this.matrixWorldAutoUpdate=e}}class mu{constructor(e,n){this.isInterleavedBuffer=!0,this.array=e,this.stride=n,this.count=e!==void 0?e.length/n:0,this.usage=gc,this.updateRange={offset:0,count:-1},this.version=0,this.uuid=xr()}onUploadCallback(){}set needsUpdate(e){e===!0&&this.version++}setUsage(e){return this.usage=e,this}copy(e){return this.array=new e.array.constructor(e.array),this.count=e.count,this.stride=e.stride,this.usage=e.usage,this}copyAt(e,n,r){e*=this.stride,r*=n.stride;for(let a=0,l=this.stride;a<l;a++)this.array[e+a]=n.array[r+a];return this}set(e,n=0){return this.array.set(e,n),this}clone(e){e.arrayBuffers===void 0&&(e.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=xr()),e.arrayBuffers[this.array.buffer._uuid]===void 0&&(e.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer);const n=new this.array.constructor(e.arrayBuffers[this.array.buffer._uuid]),r=new this.constructor(n,this.stride);return r.setUsage(this.usage),r}onUpload(e){return this.onUploadCallback=e,this}toJSON(e){return e.arrayBuffers===void 0&&(e.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=xr()),e.arrayBuffers[this.array.buffer._uuid]===void 0&&(e.arrayBuffers[this.array.buffer._uuid]=Array.from(new Uint32Array(this.array.buffer))),{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride}}}const ji=new j;class Xa{constructor(e,n,r,a=!1){this.isInterleavedBufferAttribute=!0,this.name="",this.data=e,this.itemSize=n,this.offset=r,this.normalized=a}get count(){return this.data.count}get array(){return this.data.array}set needsUpdate(e){this.data.needsUpdate=e}applyMatrix4(e){for(let n=0,r=this.data.count;n<r;n++)ji.fromBufferAttribute(this,n),ji.applyMatrix4(e),this.setXYZ(n,ji.x,ji.y,ji.z);return this}applyNormalMatrix(e){for(let n=0,r=this.count;n<r;n++)ji.fromBufferAttribute(this,n),ji.applyNormalMatrix(e),this.setXYZ(n,ji.x,ji.y,ji.z);return this}transformDirection(e){for(let n=0,r=this.count;n<r;n++)ji.fromBufferAttribute(this,n),ji.transformDirection(e),this.setXYZ(n,ji.x,ji.y,ji.z);return this}setX(e,n){return this.normalized&&(n=_n(n,this.array)),this.data.array[e*this.data.stride+this.offset]=n,this}setY(e,n){return this.normalized&&(n=_n(n,this.array)),this.data.array[e*this.data.stride+this.offset+1]=n,this}setZ(e,n){return this.normalized&&(n=_n(n,this.array)),this.data.array[e*this.data.stride+this.offset+2]=n,this}setW(e,n){return this.normalized&&(n=_n(n,this.array)),this.data.array[e*this.data.stride+this.offset+3]=n,this}getX(e){let n=this.data.array[e*this.data.stride+this.offset];return this.normalized&&(n=vr(n,this.array)),n}getY(e){let n=this.data.array[e*this.data.stride+this.offset+1];return this.normalized&&(n=vr(n,this.array)),n}getZ(e){let n=this.data.array[e*this.data.stride+this.offset+2];return this.normalized&&(n=vr(n,this.array)),n}getW(e){let n=this.data.array[e*this.data.stride+this.offset+3];return this.normalized&&(n=vr(n,this.array)),n}setXY(e,n,r){return e=e*this.data.stride+this.offset,this.normalized&&(n=_n(n,this.array),r=_n(r,this.array)),this.data.array[e+0]=n,this.data.array[e+1]=r,this}setXYZ(e,n,r,a){return e=e*this.data.stride+this.offset,this.normalized&&(n=_n(n,this.array),r=_n(r,this.array),a=_n(a,this.array)),this.data.array[e+0]=n,this.data.array[e+1]=r,this.data.array[e+2]=a,this}setXYZW(e,n,r,a,l){return e=e*this.data.stride+this.offset,this.normalized&&(n=_n(n,this.array),r=_n(r,this.array),a=_n(a,this.array),l=_n(l,this.array)),this.data.array[e+0]=n,this.data.array[e+1]=r,this.data.array[e+2]=a,this.data.array[e+3]=l,this}clone(e){if(e===void 0){console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.");const n=[];for(let r=0;r<this.count;r++){const a=r*this.data.stride+this.offset;for(let l=0;l<this.itemSize;l++)n.push(this.data.array[a+l])}return new Xn(new this.array.constructor(n),this.itemSize,this.normalized)}else return e.interleavedBuffers===void 0&&(e.interleavedBuffers={}),e.interleavedBuffers[this.data.uuid]===void 0&&(e.interleavedBuffers[this.data.uuid]=this.data.clone(e)),new Xa(e.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized)}toJSON(e){if(e===void 0){console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.");const n=[];for(let r=0;r<this.count;r++){const a=r*this.data.stride+this.offset;for(let l=0;l<this.itemSize;l++)n.push(this.data.array[a+l])}return{itemSize:this.itemSize,type:this.array.constructor.name,array:n,normalized:this.normalized}}else return e.interleavedBuffers===void 0&&(e.interleavedBuffers={}),e.interleavedBuffers[this.data.uuid]===void 0&&(e.interleavedBuffers[this.data.uuid]=this.data.toJSON(e)),{isInterleavedBufferAttribute:!0,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized}}}class bd extends Gi{constructor(e){super(),this.isSpriteMaterial=!0,this.type="SpriteMaterial",this.color=new At(16777215),this.map=null,this.alphaMap=null,this.rotation=0,this.sizeAttenuation=!0,this.transparent=!0,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.alphaMap=e.alphaMap,this.rotation=e.rotation,this.sizeAttenuation=e.sizeAttenuation,this.fog=e.fog,this}}let al;const Cc=new j,ol=new j,ll=new j,cl=new Je,Pc=new Je,t_=new fn,gu=new j,Lc=new j,_u=new j,n_=new Je,Td=new Je,i_=new Je;class r_ extends Bn{constructor(e){if(super(),this.isSprite=!0,this.type="Sprite",al===void 0){al=new Mn;const n=new Float32Array([-.5,-.5,0,0,0,.5,-.5,0,1,0,.5,.5,0,1,1,-.5,.5,0,0,1]),r=new mu(n,5);al.setIndex([0,1,2,0,2,3]),al.setAttribute("position",new Xa(r,3,0,!1)),al.setAttribute("uv",new Xa(r,2,3,!1))}this.geometry=al,this.material=e!==void 0?e:new bd,this.center=new Je(.5,.5)}raycast(e,n){e.camera===null&&console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'),ol.setFromMatrixScale(this.matrixWorld),t_.copy(e.camera.matrixWorld),this.modelViewMatrix.multiplyMatrices(e.camera.matrixWorldInverse,this.matrixWorld),ll.setFromMatrixPosition(this.modelViewMatrix),e.camera.isPerspectiveCamera&&this.material.sizeAttenuation===!1&&ol.multiplyScalar(-ll.z);const r=this.material.rotation;let a,l;r!==0&&(l=Math.cos(r),a=Math.sin(r));const u=this.center;xu(gu.set(-.5,-.5,0),ll,u,ol,a,l),xu(Lc.set(.5,-.5,0),ll,u,ol,a,l),xu(_u.set(.5,.5,0),ll,u,ol,a,l),n_.set(0,0),Td.set(1,0),i_.set(1,1);let d=e.ray.intersectTriangle(gu,Lc,_u,!1,Cc);if(d===null&&(xu(Lc.set(-.5,.5,0),ll,u,ol,a,l),Td.set(0,1),d=e.ray.intersectTriangle(gu,_u,Lc,!1,Cc),d===null))return;const g=e.ray.origin.distanceTo(Cc);g<e.near||g>e.far||n.push({distance:g,point:Cc.clone(),uv:lr.getInterpolation(Cc,gu,Lc,_u,n_,Td,i_,new Je),face:null,object:this})}copy(e,n){return super.copy(e,n),e.center!==void 0&&this.center.copy(e.center),this.material=e.material,this}}function xu(c,e,n,r,a,l){cl.subVectors(c,n).addScalar(.5).multiply(r),a!==void 0?(Pc.x=l*cl.x-a*cl.y,Pc.y=a*cl.x+l*cl.y):Pc.copy(cl),c.copy(e),c.x+=Pc.x,c.y+=Pc.y,c.applyMatrix4(t_)}const vu=new j,s_=new j;class a_ extends Bn{constructor(){super(),this._currentLevel=0,this.type="LOD",Object.defineProperties(this,{levels:{enumerable:!0,value:[]},isLOD:{value:!0}}),this.autoUpdate=!0}copy(e){super.copy(e,!1);const n=e.levels;for(let r=0,a=n.length;r<a;r++){const l=n[r];this.addLevel(l.object.clone(),l.distance,l.hysteresis)}return this.autoUpdate=e.autoUpdate,this}addLevel(e,n=0,r=0){n=Math.abs(n);const a=this.levels;let l;for(l=0;l<a.length&&!(n<a[l].distance);l++);return a.splice(l,0,{distance:n,hysteresis:r,object:e}),this.add(e),this}getCurrentLevel(){return this._currentLevel}getObjectForDistance(e){const n=this.levels;if(n.length>0){let r,a;for(r=1,a=n.length;r<a;r++){let l=n[r].distance;if(n[r].object.visible&&(l-=l*n[r].hysteresis),e<l)break}return n[r-1].object}return null}raycast(e,n){if(this.levels.length>0){vu.setFromMatrixPosition(this.matrixWorld);const a=e.ray.origin.distanceTo(vu);this.getObjectForDistance(a).raycast(e,n)}}update(e){const n=this.levels;if(n.length>1){vu.setFromMatrixPosition(e.matrixWorld),s_.setFromMatrixPosition(this.matrixWorld);const r=vu.distanceTo(s_)/e.zoom;n[0].object.visible=!0;let a,l;for(a=1,l=n.length;a<l;a++){let u=n[a].distance;if(n[a].object.visible&&(u-=u*n[a].hysteresis),r>=u)n[a-1].object.visible=!1,n[a].object.visible=!0;else break}for(this._currentLevel=a-1;a<l;a++)n[a].object.visible=!1}}toJSON(e){const n=super.toJSON(e);this.autoUpdate===!1&&(n.object.autoUpdate=!1),n.object.levels=[];const r=this.levels;for(let a=0,l=r.length;a<l;a++){const u=r[a];n.object.levels.push({object:u.object.uuid,distance:u.distance,hysteresis:u.hysteresis})}return n}}const o_=new j,l_=new Hn,c_=new Hn,dw=new j,h_=new fn,hl=new j;class u_ extends Ni{constructor(e,n){super(e,n),this.isSkinnedMesh=!0,this.type="SkinnedMesh",this.bindMode="attached",this.bindMatrix=new fn,this.bindMatrixInverse=new fn,this.boundingBox=null,this.boundingSphere=null}computeBoundingBox(){const e=this.geometry;this.boundingBox===null&&(this.boundingBox=new us),this.boundingBox.makeEmpty();const n=e.getAttribute("position");for(let r=0;r<n.count;r++)hl.fromBufferAttribute(n,r),this.applyBoneTransform(r,hl),this.boundingBox.expandByPoint(hl)}computeBoundingSphere(){const e=this.geometry;this.boundingSphere===null&&(this.boundingSphere=new fs),this.boundingSphere.makeEmpty();const n=e.getAttribute("position");for(let r=0;r<n.count;r++)hl.fromBufferAttribute(n,r),this.applyBoneTransform(r,hl),this.boundingSphere.expandByPoint(hl)}copy(e,n){return super.copy(e,n),this.bindMode=e.bindMode,this.bindMatrix.copy(e.bindMatrix),this.bindMatrixInverse.copy(e.bindMatrixInverse),this.skeleton=e.skeleton,this}getVertexPosition(e,n){return super.getVertexPosition(e,n),this.applyBoneTransform(e,n),n}bind(e,n){this.skeleton=e,n===void 0&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),n=this.matrixWorld),this.bindMatrix.copy(n),this.bindMatrixInverse.copy(n).invert()}pose(){this.skeleton.pose()}normalizeSkinWeights(){const e=new Hn,n=this.geometry.attributes.skinWeight;for(let r=0,a=n.count;r<a;r++){e.fromBufferAttribute(n,r);const l=1/e.manhattanLength();l!==1/0?e.multiplyScalar(l):e.set(1,0,0,0),n.setXYZW(r,e.x,e.y,e.z,e.w)}}updateMatrixWorld(e){super.updateMatrixWorld(e),this.bindMode==="attached"?this.bindMatrixInverse.copy(this.matrixWorld).invert():this.bindMode==="detached"?this.bindMatrixInverse.copy(this.bindMatrix).invert():console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode)}applyBoneTransform(e,n){const r=this.skeleton,a=this.geometry;l_.fromBufferAttribute(a.attributes.skinIndex,e),c_.fromBufferAttribute(a.attributes.skinWeight,e),o_.copy(n).applyMatrix4(this.bindMatrix),n.set(0,0,0);for(let l=0;l<4;l++){const u=c_.getComponent(l);if(u!==0){const d=l_.getComponent(l);h_.multiplyMatrices(r.bones[d].matrixWorld,r.boneInverses[d]),n.addScaledVector(dw.copy(o_).applyMatrix4(h_),u)}}return n.applyMatrix4(this.bindMatrixInverse)}boneTransform(e,n){return console.warn("THREE.SkinnedMesh: .boneTransform() was renamed to .applyBoneTransform() in r151."),this.applyBoneTransform(e,n)}}class wd extends Bn{constructor(){super(),this.isBone=!0,this.type="Bone"}}class ul extends di{constructor(e=null,n=1,r=1,a,l,u,d,g,_=st,y=st,S,E){super(null,u,d,g,_,y,a,l,S,E),this.isDataTexture=!0,this.image={data:e,width:n,height:r},this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}const f_=new fn,pw=new fn;class yu{constructor(e=[],n=[]){this.uuid=xr(),this.bones=e.slice(0),this.boneInverses=n,this.boneMatrices=null,this.boneTexture=null,this.boneTextureSize=0,this.frame=-1,this.init()}init(){const e=this.bones,n=this.boneInverses;if(this.boneMatrices=new Float32Array(e.length*16),n.length===0)this.calculateInverses();else if(e.length!==n.length){console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones."),this.boneInverses=[];for(let r=0,a=this.bones.length;r<a;r++)this.boneInverses.push(new fn)}}calculateInverses(){this.boneInverses.length=0;for(let e=0,n=this.bones.length;e<n;e++){const r=new fn;this.bones[e]&&r.copy(this.bones[e].matrixWorld).invert(),this.boneInverses.push(r)}}pose(){for(let e=0,n=this.bones.length;e<n;e++){const r=this.bones[e];r&&r.matrixWorld.copy(this.boneInverses[e]).invert()}for(let e=0,n=this.bones.length;e<n;e++){const r=this.bones[e];r&&(r.parent&&r.parent.isBone?(r.matrix.copy(r.parent.matrixWorld).invert(),r.matrix.multiply(r.matrixWorld)):r.matrix.copy(r.matrixWorld),r.matrix.decompose(r.position,r.quaternion,r.scale))}}update(){const e=this.bones,n=this.boneInverses,r=this.boneMatrices,a=this.boneTexture;for(let l=0,u=e.length;l<u;l++){const d=e[l]?e[l].matrixWorld:pw;f_.multiplyMatrices(d,n[l]),f_.toArray(r,l*16)}a!==null&&(a.needsUpdate=!0)}clone(){return new yu(this.bones,this.boneInverses)}computeBoneTexture(){let e=Math.sqrt(this.bones.length*4);e=eg(e),e=Math.max(e,4);const n=new Float32Array(e*e*4);n.set(this.boneMatrices);const r=new ul(n,e,e,Jn,Ct);return r.needsUpdate=!0,this.boneMatrices=n,this.boneTexture=r,this.boneTextureSize=e,this}getBoneByName(e){for(let n=0,r=this.bones.length;n<r;n++){const a=this.bones[n];if(a.name===e)return a}}dispose(){this.boneTexture!==null&&(this.boneTexture.dispose(),this.boneTexture=null)}fromJSON(e,n){this.uuid=e.uuid;for(let r=0,a=e.bones.length;r<a;r++){const l=e.bones[r];let u=n[l];u===void 0&&(console.warn("THREE.Skeleton: No bone found with UUID:",l),u=new wd),this.bones.push(u),this.boneInverses.push(new fn().fromArray(e.boneInverses[r]))}return this.init(),this}toJSON(){const e={metadata:{version:4.5,type:"Skeleton",generator:"Skeleton.toJSON"},bones:[],boneInverses:[]};e.uuid=this.uuid;const n=this.bones,r=this.boneInverses;for(let a=0,l=n.length;a<l;a++){const u=n[a];e.bones.push(u.uuid);const d=r[a];e.boneInverses.push(d.toArray())}return e}}class fl extends Xn{constructor(e,n,r,a=1){super(e,n,r),this.isInstancedBufferAttribute=!0,this.meshPerAttribute=a}copy(e){return super.copy(e),this.meshPerAttribute=e.meshPerAttribute,this}toJSON(){const e=super.toJSON();return e.meshPerAttribute=this.meshPerAttribute,e.isInstancedBufferAttribute=!0,e}}const dl=new fn,d_=new fn,Mu=[],p_=new us,mw=new fn,Dc=new Ni,Uc=new fs;class m_ extends Ni{constructor(e,n,r){super(e,n),this.isInstancedMesh=!0,this.instanceMatrix=new fl(new Float32Array(r*16),16),this.instanceColor=null,this.count=r,this.boundingBox=null,this.boundingSphere=null;for(let a=0;a<r;a++)this.setMatrixAt(a,mw)}computeBoundingBox(){const e=this.geometry,n=this.count;this.boundingBox===null&&(this.boundingBox=new us),e.boundingBox===null&&e.computeBoundingBox(),this.boundingBox.makeEmpty();for(let r=0;r<n;r++)this.getMatrixAt(r,dl),p_.copy(e.boundingBox).applyMatrix4(dl),this.boundingBox.union(p_)}computeBoundingSphere(){const e=this.geometry,n=this.count;this.boundingSphere===null&&(this.boundingSphere=new fs),e.boundingSphere===null&&e.computeBoundingSphere(),this.boundingSphere.makeEmpty();for(let r=0;r<n;r++)this.getMatrixAt(r,dl),Uc.copy(e.boundingSphere).applyMatrix4(dl),this.boundingSphere.union(Uc)}copy(e,n){return super.copy(e,n),this.instanceMatrix.copy(e.instanceMatrix),e.instanceColor!==null&&(this.instanceColor=e.instanceColor.clone()),this.count=e.count,this}getColorAt(e,n){n.fromArray(this.instanceColor.array,e*3)}getMatrixAt(e,n){n.fromArray(this.instanceMatrix.array,e*16)}raycast(e,n){const r=this.matrixWorld,a=this.count;if(Dc.geometry=this.geometry,Dc.material=this.material,Dc.material!==void 0&&(this.boundingSphere===null&&this.computeBoundingSphere(),Uc.copy(this.boundingSphere),Uc.applyMatrix4(r),e.ray.intersectsSphere(Uc)!==!1))for(let l=0;l<a;l++){this.getMatrixAt(l,dl),d_.multiplyMatrices(r,dl),Dc.matrixWorld=d_,Dc.raycast(e,Mu);for(let u=0,d=Mu.length;u<d;u++){const g=Mu[u];g.instanceId=l,g.object=this,n.push(g)}Mu.length=0}}setColorAt(e,n){this.instanceColor===null&&(this.instanceColor=new fl(new Float32Array(this.instanceMatrix.count*3),3)),n.toArray(this.instanceColor.array,e*3)}setMatrixAt(e,n){n.toArray(this.instanceMatrix.array,e*16)}updateMorphTargets(){}dispose(){this.dispatchEvent({type:"dispose"})}}class Qi extends Gi{constructor(e){super(),this.isLineBasicMaterial=!0,this.type="LineBasicMaterial",this.color=new At(16777215),this.map=null,this.linewidth=1,this.linecap="round",this.linejoin="round",this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.linewidth=e.linewidth,this.linecap=e.linecap,this.linejoin=e.linejoin,this.fog=e.fog,this}}const g_=new j,__=new j,x_=new fn,Ad=new Sc,Su=new fs;class ha extends Bn{constructor(e=new Mn,n=new Qi){super(),this.isLine=!0,this.type="Line",this.geometry=e,this.material=n,this.updateMorphTargets()}copy(e,n){return super.copy(e,n),this.material=e.material,this.geometry=e.geometry,this}computeLineDistances(){const e=this.geometry;if(e.index===null){const n=e.attributes.position,r=[0];for(let a=1,l=n.count;a<l;a++)g_.fromBufferAttribute(n,a-1),__.fromBufferAttribute(n,a),r[a]=r[a-1],r[a]+=g_.distanceTo(__);e.setAttribute("lineDistance",new Ut(r,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");return this}raycast(e,n){const r=this.geometry,a=this.matrixWorld,l=e.params.Line.threshold,u=r.drawRange;if(r.boundingSphere===null&&r.computeBoundingSphere(),Su.copy(r.boundingSphere),Su.applyMatrix4(a),Su.radius+=l,e.ray.intersectsSphere(Su)===!1)return;x_.copy(a).invert(),Ad.copy(e.ray).applyMatrix4(x_);const d=l/((this.scale.x+this.scale.y+this.scale.z)/3),g=d*d,_=new j,y=new j,S=new j,E=new j,w=this.isLineSegments?2:1,C=r.index,U=r.attributes.position;if(C!==null){const A=Math.max(0,u.start),z=Math.min(C.count,u.start+u.count);for(let F=A,k=z-1;F<k;F+=w){const Y=C.getX(F),K=C.getX(F+1);if(_.fromBufferAttribute(U,Y),y.fromBufferAttribute(U,K),Ad.distanceSqToSegment(_,y,E,S)>g)continue;E.applyMatrix4(this.matrixWorld);const le=e.ray.origin.distanceTo(E);le<e.near||le>e.far||n.push({distance:le,point:S.clone().applyMatrix4(this.matrixWorld),index:F,face:null,faceIndex:null,object:this})}}else{const A=Math.max(0,u.start),z=Math.min(U.count,u.start+u.count);for(let F=A,k=z-1;F<k;F+=w){if(_.fromBufferAttribute(U,F),y.fromBufferAttribute(U,F+1),Ad.distanceSqToSegment(_,y,E,S)>g)continue;E.applyMatrix4(this.matrixWorld);const K=e.ray.origin.distanceTo(E);K<e.near||K>e.far||n.push({distance:K,point:S.clone().applyMatrix4(this.matrixWorld),index:F,face:null,faceIndex:null,object:this})}}}updateMorphTargets(){const n=this.geometry.morphAttributes,r=Object.keys(n);if(r.length>0){const a=n[r[0]];if(a!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let l=0,u=a.length;l<u;l++){const d=a[l].name||String(l);this.morphTargetInfluences.push(0),this.morphTargetDictionary[d]=l}}}}}const v_=new j,y_=new j;class ms extends ha{constructor(e,n){super(e,n),this.isLineSegments=!0,this.type="LineSegments"}computeLineDistances(){const e=this.geometry;if(e.index===null){const n=e.attributes.position,r=[];for(let a=0,l=n.count;a<l;a+=2)v_.fromBufferAttribute(n,a),y_.fromBufferAttribute(n,a+1),r[a]=a===0?0:r[a-1],r[a+1]=r[a]+v_.distanceTo(y_);e.setAttribute("lineDistance",new Ut(r,1))}else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");return this}}class M_ extends ha{constructor(e,n){super(e,n),this.isLineLoop=!0,this.type="LineLoop"}}class Rd extends Gi{constructor(e){super(),this.isPointsMaterial=!0,this.type="PointsMaterial",this.color=new At(16777215),this.map=null,this.alphaMap=null,this.size=1,this.sizeAttenuation=!0,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.alphaMap=e.alphaMap,this.size=e.size,this.sizeAttenuation=e.sizeAttenuation,this.fog=e.fog,this}}const S_=new fn,Cd=new Sc,Eu=new fs,bu=new j;class E_ extends Bn{constructor(e=new Mn,n=new Rd){super(),this.isPoints=!0,this.type="Points",this.geometry=e,this.material=n,this.updateMorphTargets()}copy(e,n){return super.copy(e,n),this.material=e.material,this.geometry=e.geometry,this}raycast(e,n){const r=this.geometry,a=this.matrixWorld,l=e.params.Points.threshold,u=r.drawRange;if(r.boundingSphere===null&&r.computeBoundingSphere(),Eu.copy(r.boundingSphere),Eu.applyMatrix4(a),Eu.radius+=l,e.ray.intersectsSphere(Eu)===!1)return;S_.copy(a).invert(),Cd.copy(e.ray).applyMatrix4(S_);const d=l/((this.scale.x+this.scale.y+this.scale.z)/3),g=d*d,_=r.index,S=r.attributes.position;if(_!==null){const E=Math.max(0,u.start),w=Math.min(_.count,u.start+u.count);for(let C=E,I=w;C<I;C++){const U=_.getX(C);bu.fromBufferAttribute(S,U),b_(bu,U,g,a,e,n,this)}}else{const E=Math.max(0,u.start),w=Math.min(S.count,u.start+u.count);for(let C=E,I=w;C<I;C++)bu.fromBufferAttribute(S,C),b_(bu,C,g,a,e,n,this)}}updateMorphTargets(){const n=this.geometry.morphAttributes,r=Object.keys(n);if(r.length>0){const a=n[r[0]];if(a!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let l=0,u=a.length;l<u;l++){const d=a[l].name||String(l);this.morphTargetInfluences.push(0),this.morphTargetDictionary[d]=l}}}}}function b_(c,e,n,r,a,l,u){const d=Cd.distanceSqToPoint(c);if(d<n){const g=new j;Cd.closestPointToPoint(c,g),g.applyMatrix4(r);const _=a.ray.origin.distanceTo(g);if(_<a.near||_>a.far)return;l.push({distance:_,distanceToRay:Math.sqrt(d),point:g,index:e,face:null,object:u})}}class gw extends di{constructor(e,n,r,a,l,u,d,g,_){super(e,n,r,a,l,u,d,g,_),this.isVideoTexture=!0,this.minFilter=u!==void 0?u:ft,this.magFilter=l!==void 0?l:ft,this.generateMipmaps=!1;const y=this;function S(){y.needsUpdate=!0,e.requestVideoFrameCallback(S)}"requestVideoFrameCallback"in e&&e.requestVideoFrameCallback(S)}clone(){return new this.constructor(this.image).copy(this)}update(){const e=this.image;"requestVideoFrameCallback"in e===!1&&e.readyState>=e.HAVE_CURRENT_DATA&&(this.needsUpdate=!0)}}class _w extends di{constructor(e,n,r){super({width:e,height:n}),this.isFramebufferTexture=!0,this.format=r,this.magFilter=st,this.minFilter=st,this.generateMipmaps=!1,this.needsUpdate=!0}}class Pd extends di{constructor(e,n,r,a,l,u,d,g,_,y,S,E){super(null,u,d,g,_,y,a,l,S,E),this.isCompressedTexture=!0,this.image={width:n,height:r},this.mipmaps=e,this.flipY=!1,this.generateMipmaps=!1}}class xw extends Pd{constructor(e,n,r,a,l,u){super(e,n,r,l,u),this.isCompressedArrayTexture=!0,this.image.depth=a,this.wrapR=qe}}class vw extends di{constructor(e,n,r,a,l,u,d,g,_){super(e,n,r,a,l,u,d,g,_),this.isCanvasTexture=!0,this.needsUpdate=!0}}class es{constructor(){this.type="Curve",this.arcLengthDivisions=200}getPoint(){return console.warn("THREE.Curve: .getPoint() not implemented."),null}getPointAt(e,n){const r=this.getUtoTmapping(e);return this.getPoint(r,n)}getPoints(e=5){const n=[];for(let r=0;r<=e;r++)n.push(this.getPoint(r/e));return n}getSpacedPoints(e=5){const n=[];for(let r=0;r<=e;r++)n.push(this.getPointAt(r/e));return n}getLength(){const e=this.getLengths();return e[e.length-1]}getLengths(e=this.arcLengthDivisions){if(this.cacheArcLengths&&this.cacheArcLengths.length===e+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;const n=[];let r,a=this.getPoint(0),l=0;n.push(0);for(let u=1;u<=e;u++)r=this.getPoint(u/e),l+=r.distanceTo(a),n.push(l),a=r;return this.cacheArcLengths=n,n}updateArcLengths(){this.needsUpdate=!0,this.getLengths()}getUtoTmapping(e,n){const r=this.getLengths();let a=0;const l=r.length;let u;n?u=n:u=e*r[l-1];let d=0,g=l-1,_;for(;d<=g;)if(a=Math.floor(d+(g-d)/2),_=r[a]-u,_<0)d=a+1;else if(_>0)g=a-1;else{g=a;break}if(a=g,r[a]===u)return a/(l-1);const y=r[a],E=r[a+1]-y,w=(u-y)/E;return(a+w)/(l-1)}getTangent(e,n){let a=e-1e-4,l=e+1e-4;a<0&&(a=0),l>1&&(l=1);const u=this.getPoint(a),d=this.getPoint(l),g=n||(u.isVector2?new Je:new j);return g.copy(d).sub(u).normalize(),g}getTangentAt(e,n){const r=this.getUtoTmapping(e);return this.getTangent(r,n)}computeFrenetFrames(e,n){const r=new j,a=[],l=[],u=[],d=new j,g=new fn;for(let w=0;w<=e;w++){const C=w/e;a[w]=this.getTangentAt(C,new j)}l[0]=new j,u[0]=new j;let _=Number.MAX_VALUE;const y=Math.abs(a[0].x),S=Math.abs(a[0].y),E=Math.abs(a[0].z);y<=_&&(_=y,r.set(1,0,0)),S<=_&&(_=S,r.set(0,1,0)),E<=_&&r.set(0,0,1),d.crossVectors(a[0],r).normalize(),l[0].crossVectors(a[0],d),u[0].crossVectors(a[0],l[0]);for(let w=1;w<=e;w++){if(l[w]=l[w-1].clone(),u[w]=u[w-1].clone(),d.crossVectors(a[w-1],a[w]),d.length()>Number.EPSILON){d.normalize();const C=Math.acos(hi(a[w-1].dot(a[w]),-1,1));l[w].applyMatrix4(g.makeRotationAxis(d,C))}u[w].crossVectors(a[w],l[w])}if(n===!0){let w=Math.acos(hi(l[0].dot(l[e]),-1,1));w/=e,a[0].dot(d.crossVectors(l[0],l[e]))>0&&(w=-w);for(let C=1;C<=e;C++)l[C].applyMatrix4(g.makeRotationAxis(a[C],w*C)),u[C].crossVectors(a[C],l[C])}return{tangents:a,normals:l,binormals:u}}clone(){return new this.constructor().copy(this)}copy(e){return this.arcLengthDivisions=e.arcLengthDivisions,this}toJSON(){const e={metadata:{version:4.5,type:"Curve",generator:"Curve.toJSON"}};return e.arcLengthDivisions=this.arcLengthDivisions,e.type=this.type,e}fromJSON(e){return this.arcLengthDivisions=e.arcLengthDivisions,this}}class Tu extends es{constructor(e=0,n=0,r=1,a=1,l=0,u=Math.PI*2,d=!1,g=0){super(),this.isEllipseCurve=!0,this.type="EllipseCurve",this.aX=e,this.aY=n,this.xRadius=r,this.yRadius=a,this.aStartAngle=l,this.aEndAngle=u,this.aClockwise=d,this.aRotation=g}getPoint(e,n){const r=n||new Je,a=Math.PI*2;let l=this.aEndAngle-this.aStartAngle;const u=Math.abs(l)<Number.EPSILON;for(;l<0;)l+=a;for(;l>a;)l-=a;l<Number.EPSILON&&(u?l=0:l=a),this.aClockwise===!0&&!u&&(l===a?l=-a:l=l-a);const d=this.aStartAngle+e*l;let g=this.aX+this.xRadius*Math.cos(d),_=this.aY+this.yRadius*Math.sin(d);if(this.aRotation!==0){const y=Math.cos(this.aRotation),S=Math.sin(this.aRotation),E=g-this.aX,w=_-this.aY;g=E*y-w*S+this.aX,_=E*S+w*y+this.aY}return r.set(g,_)}copy(e){return super.copy(e),this.aX=e.aX,this.aY=e.aY,this.xRadius=e.xRadius,this.yRadius=e.yRadius,this.aStartAngle=e.aStartAngle,this.aEndAngle=e.aEndAngle,this.aClockwise=e.aClockwise,this.aRotation=e.aRotation,this}toJSON(){const e=super.toJSON();return e.aX=this.aX,e.aY=this.aY,e.xRadius=this.xRadius,e.yRadius=this.yRadius,e.aStartAngle=this.aStartAngle,e.aEndAngle=this.aEndAngle,e.aClockwise=this.aClockwise,e.aRotation=this.aRotation,e}fromJSON(e){return super.fromJSON(e),this.aX=e.aX,this.aY=e.aY,this.xRadius=e.xRadius,this.yRadius=e.yRadius,this.aStartAngle=e.aStartAngle,this.aEndAngle=e.aEndAngle,this.aClockwise=e.aClockwise,this.aRotation=e.aRotation,this}}class T_ extends Tu{constructor(e,n,r,a,l,u){super(e,n,r,r,a,l,u),this.isArcCurve=!0,this.type="ArcCurve"}}function Ld(){let c=0,e=0,n=0,r=0;function a(l,u,d,g){c=l,e=d,n=-3*l+3*u-2*d-g,r=2*l-2*u+d+g}return{initCatmullRom:function(l,u,d,g,_){a(u,d,_*(d-l),_*(g-u))},initNonuniformCatmullRom:function(l,u,d,g,_,y,S){let E=(u-l)/_-(d-l)/(_+y)+(d-u)/y,w=(d-u)/y-(g-u)/(y+S)+(g-d)/S;E*=y,w*=y,a(u,d,E,w)},calc:function(l){const u=l*l,d=u*l;return c+e*l+n*u+r*d}}}const wu=new j,Dd=new Ld,Ud=new Ld,Id=new Ld;class w_ extends es{constructor(e=[],n=!1,r="centripetal",a=.5){super(),this.isCatmullRomCurve3=!0,this.type="CatmullRomCurve3",this.points=e,this.closed=n,this.curveType=r,this.tension=a}getPoint(e,n=new j){const r=n,a=this.points,l=a.length,u=(l-(this.closed?0:1))*e;let d=Math.floor(u),g=u-d;this.closed?d+=d>0?0:(Math.floor(Math.abs(d)/l)+1)*l:g===0&&d===l-1&&(d=l-2,g=1);let _,y;this.closed||d>0?_=a[(d-1)%l]:(wu.subVectors(a[0],a[1]).add(a[0]),_=wu);const S=a[d%l],E=a[(d+1)%l];if(this.closed||d+2<l?y=a[(d+2)%l]:(wu.subVectors(a[l-1],a[l-2]).add(a[l-1]),y=wu),this.curveType==="centripetal"||this.curveType==="chordal"){const w=this.curveType==="chordal"?.5:.25;let C=Math.pow(_.distanceToSquared(S),w),I=Math.pow(S.distanceToSquared(E),w),U=Math.pow(E.distanceToSquared(y),w);I<1e-4&&(I=1),C<1e-4&&(C=I),U<1e-4&&(U=I),Dd.initNonuniformCatmullRom(_.x,S.x,E.x,y.x,C,I,U),Ud.initNonuniformCatmullRom(_.y,S.y,E.y,y.y,C,I,U),Id.initNonuniformCatmullRom(_.z,S.z,E.z,y.z,C,I,U)}else this.curveType==="catmullrom"&&(Dd.initCatmullRom(_.x,S.x,E.x,y.x,this.tension),Ud.initCatmullRom(_.y,S.y,E.y,y.y,this.tension),Id.initCatmullRom(_.z,S.z,E.z,y.z,this.tension));return r.set(Dd.calc(g),Ud.calc(g),Id.calc(g)),r}copy(e){super.copy(e),this.points=[];for(let n=0,r=e.points.length;n<r;n++){const a=e.points[n];this.points.push(a.clone())}return this.closed=e.closed,this.curveType=e.curveType,this.tension=e.tension,this}toJSON(){const e=super.toJSON();e.points=[];for(let n=0,r=this.points.length;n<r;n++){const a=this.points[n];e.points.push(a.toArray())}return e.closed=this.closed,e.curveType=this.curveType,e.tension=this.tension,e}fromJSON(e){super.fromJSON(e),this.points=[];for(let n=0,r=e.points.length;n<r;n++){const a=e.points[n];this.points.push(new j().fromArray(a))}return this.closed=e.closed,this.curveType=e.curveType,this.tension=e.tension,this}}function A_(c,e,n,r,a){const l=(r-e)*.5,u=(a-n)*.5,d=c*c,g=c*d;return(2*n-2*r+l+u)*g+(-3*n+3*r-2*l-u)*d+l*c+n}function yw(c,e){const n=1-c;return n*n*e}function Mw(c,e){return 2*(1-c)*c*e}function Sw(c,e){return c*c*e}function Ic(c,e,n,r){return yw(c,e)+Mw(c,n)+Sw(c,r)}function Ew(c,e){const n=1-c;return n*n*n*e}function bw(c,e){const n=1-c;return 3*n*n*c*e}function Tw(c,e){return 3*(1-c)*c*c*e}function ww(c,e){return c*c*c*e}function Nc(c,e,n,r,a){return Ew(c,e)+bw(c,n)+Tw(c,r)+ww(c,a)}class Nd extends es{constructor(e=new Je,n=new Je,r=new Je,a=new Je){super(),this.isCubicBezierCurve=!0,this.type="CubicBezierCurve",this.v0=e,this.v1=n,this.v2=r,this.v3=a}getPoint(e,n=new Je){const r=n,a=this.v0,l=this.v1,u=this.v2,d=this.v3;return r.set(Nc(e,a.x,l.x,u.x,d.x),Nc(e,a.y,l.y,u.y,d.y)),r}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this.v3.copy(e.v3),this}toJSON(){const e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e.v3=this.v3.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this.v3.fromArray(e.v3),this}}class R_ extends es{constructor(e=new j,n=new j,r=new j,a=new j){super(),this.isCubicBezierCurve3=!0,this.type="CubicBezierCurve3",this.v0=e,this.v1=n,this.v2=r,this.v3=a}getPoint(e,n=new j){const r=n,a=this.v0,l=this.v1,u=this.v2,d=this.v3;return r.set(Nc(e,a.x,l.x,u.x,d.x),Nc(e,a.y,l.y,u.y,d.y),Nc(e,a.z,l.z,u.z,d.z)),r}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this.v3.copy(e.v3),this}toJSON(){const e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e.v3=this.v3.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this.v3.fromArray(e.v3),this}}class Au extends es{constructor(e=new Je,n=new Je){super(),this.isLineCurve=!0,this.type="LineCurve",this.v1=e,this.v2=n}getPoint(e,n=new Je){const r=n;return e===1?r.copy(this.v2):(r.copy(this.v2).sub(this.v1),r.multiplyScalar(e).add(this.v1)),r}getPointAt(e,n){return this.getPoint(e,n)}getTangent(e,n=new Je){return n.subVectors(this.v2,this.v1).normalize()}getTangentAt(e,n){return this.getTangent(e,n)}copy(e){return super.copy(e),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}class C_ extends es{constructor(e=new j,n=new j){super(),this.isLineCurve3=!0,this.type="LineCurve3",this.v1=e,this.v2=n}getPoint(e,n=new j){const r=n;return e===1?r.copy(this.v2):(r.copy(this.v2).sub(this.v1),r.multiplyScalar(e).add(this.v1)),r}getPointAt(e,n){return this.getPoint(e,n)}getTangent(e,n=new j){return n.subVectors(this.v2,this.v1).normalize()}getTangentAt(e,n){return this.getTangent(e,n)}copy(e){return super.copy(e),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}class Fd extends es{constructor(e=new Je,n=new Je,r=new Je){super(),this.isQuadraticBezierCurve=!0,this.type="QuadraticBezierCurve",this.v0=e,this.v1=n,this.v2=r}getPoint(e,n=new Je){const r=n,a=this.v0,l=this.v1,u=this.v2;return r.set(Ic(e,a.x,l.x,u.x),Ic(e,a.y,l.y,u.y)),r}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}class Od extends es{constructor(e=new j,n=new j,r=new j){super(),this.isQuadraticBezierCurve3=!0,this.type="QuadraticBezierCurve3",this.v0=e,this.v1=n,this.v2=r}getPoint(e,n=new j){const r=n,a=this.v0,l=this.v1,u=this.v2;return r.set(Ic(e,a.x,l.x,u.x),Ic(e,a.y,l.y,u.y),Ic(e,a.z,l.z,u.z)),r}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}class Bd extends es{constructor(e=[]){super(),this.isSplineCurve=!0,this.type="SplineCurve",this.points=e}getPoint(e,n=new Je){const r=n,a=this.points,l=(a.length-1)*e,u=Math.floor(l),d=l-u,g=a[u===0?u:u-1],_=a[u],y=a[u>a.length-2?a.length-1:u+1],S=a[u>a.length-3?a.length-1:u+2];return r.set(A_(d,g.x,_.x,y.x,S.x),A_(d,g.y,_.y,y.y,S.y)),r}copy(e){super.copy(e),this.points=[];for(let n=0,r=e.points.length;n<r;n++){const a=e.points[n];this.points.push(a.clone())}return this}toJSON(){const e=super.toJSON();e.points=[];for(let n=0,r=this.points.length;n<r;n++){const a=this.points[n];e.points.push(a.toArray())}return e}fromJSON(e){super.fromJSON(e),this.points=[];for(let n=0,r=e.points.length;n<r;n++){const a=e.points[n];this.points.push(new Je().fromArray(a))}return this}}var zd=Object.freeze({__proto__:null,ArcCurve:T_,CatmullRomCurve3:w_,CubicBezierCurve:Nd,CubicBezierCurve3:R_,EllipseCurve:Tu,LineCurve:Au,LineCurve3:C_,QuadraticBezierCurve:Fd,QuadraticBezierCurve3:Od,SplineCurve:Bd});class P_ extends es{constructor(){super(),this.type="CurvePath",this.curves=[],this.autoClose=!1}add(e){this.curves.push(e)}closePath(){const e=this.curves[0].getPoint(0),n=this.curves[this.curves.length-1].getPoint(1);e.equals(n)||this.curves.push(new Au(n,e))}getPoint(e,n){const r=e*this.getLength(),a=this.getCurveLengths();let l=0;for(;l<a.length;){if(a[l]>=r){const u=a[l]-r,d=this.curves[l],g=d.getLength(),_=g===0?0:1-u/g;return d.getPointAt(_,n)}l++}return null}getLength(){const e=this.getCurveLengths();return e[e.length-1]}updateArcLengths(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()}getCurveLengths(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;const e=[];let n=0;for(let r=0,a=this.curves.length;r<a;r++)n+=this.curves[r].getLength(),e.push(n);return this.cacheLengths=e,e}getSpacedPoints(e=40){const n=[];for(let r=0;r<=e;r++)n.push(this.getPoint(r/e));return this.autoClose&&n.push(n[0]),n}getPoints(e=12){const n=[];let r;for(let a=0,l=this.curves;a<l.length;a++){const u=l[a],d=u.isEllipseCurve?e*2:u.isLineCurve||u.isLineCurve3?1:u.isSplineCurve?e*u.points.length:e,g=u.getPoints(d);for(let _=0;_<g.length;_++){const y=g[_];r&&r.equals(y)||(n.push(y),r=y)}}return this.autoClose&&n.length>1&&!n[n.length-1].equals(n[0])&&n.push(n[0]),n}copy(e){super.copy(e),this.curves=[];for(let n=0,r=e.curves.length;n<r;n++){const a=e.curves[n];this.curves.push(a.clone())}return this.autoClose=e.autoClose,this}toJSON(){const e=super.toJSON();e.autoClose=this.autoClose,e.curves=[];for(let n=0,r=this.curves.length;n<r;n++){const a=this.curves[n];e.curves.push(a.toJSON())}return e}fromJSON(e){super.fromJSON(e),this.autoClose=e.autoClose,this.curves=[];for(let n=0,r=e.curves.length;n<r;n++){const a=e.curves[n];this.curves.push(new zd[a.type]().fromJSON(a))}return this}}class Fc extends P_{constructor(e){super(),this.type="Path",this.currentPoint=new Je,e&&this.setFromPoints(e)}setFromPoints(e){this.moveTo(e[0].x,e[0].y);for(let n=1,r=e.length;n<r;n++)this.lineTo(e[n].x,e[n].y);return this}moveTo(e,n){return this.currentPoint.set(e,n),this}lineTo(e,n){const r=new Au(this.currentPoint.clone(),new Je(e,n));return this.curves.push(r),this.currentPoint.set(e,n),this}quadraticCurveTo(e,n,r,a){const l=new Fd(this.currentPoint.clone(),new Je(e,n),new Je(r,a));return this.curves.push(l),this.currentPoint.set(r,a),this}bezierCurveTo(e,n,r,a,l,u){const d=new Nd(this.currentPoint.clone(),new Je(e,n),new Je(r,a),new Je(l,u));return this.curves.push(d),this.currentPoint.set(l,u),this}splineThru(e){const n=[this.currentPoint.clone()].concat(e),r=new Bd(n);return this.curves.push(r),this.currentPoint.copy(e[e.length-1]),this}arc(e,n,r,a,l,u){const d=this.currentPoint.x,g=this.currentPoint.y;return this.absarc(e+d,n+g,r,a,l,u),this}absarc(e,n,r,a,l,u){return this.absellipse(e,n,r,r,a,l,u),this}ellipse(e,n,r,a,l,u,d,g){const _=this.currentPoint.x,y=this.currentPoint.y;return this.absellipse(e+_,n+y,r,a,l,u,d,g),this}absellipse(e,n,r,a,l,u,d,g){const _=new Tu(e,n,r,a,l,u,d,g);if(this.curves.length>0){const S=_.getPoint(0);S.equals(this.currentPoint)||this.lineTo(S.x,S.y)}this.curves.push(_);const y=_.getPoint(1);return this.currentPoint.copy(y),this}copy(e){return super.copy(e),this.currentPoint.copy(e.currentPoint),this}toJSON(){const e=super.toJSON();return e.currentPoint=this.currentPoint.toArray(),e}fromJSON(e){return super.fromJSON(e),this.currentPoint.fromArray(e.currentPoint),this}}class pl extends Mn{constructor(e=[new Je(0,-.5),new Je(.5,0),new Je(0,.5)],n=12,r=0,a=Math.PI*2){super(),this.type="LatheGeometry",this.parameters={points:e,segments:n,phiStart:r,phiLength:a},n=Math.floor(n),a=hi(a,0,Math.PI*2);const l=[],u=[],d=[],g=[],_=[],y=1/n,S=new j,E=new Je,w=new j,C=new j,I=new j;let U=0,A=0;for(let z=0;z<=e.length-1;z++)switch(z){case 0:U=e[z+1].x-e[z].x,A=e[z+1].y-e[z].y,w.x=A*1,w.y=-U,w.z=A*0,I.copy(w),w.normalize(),g.push(w.x,w.y,w.z);break;case e.length-1:g.push(I.x,I.y,I.z);break;default:U=e[z+1].x-e[z].x,A=e[z+1].y-e[z].y,w.x=A*1,w.y=-U,w.z=A*0,C.copy(w),w.x+=I.x,w.y+=I.y,w.z+=I.z,w.normalize(),g.push(w.x,w.y,w.z),I.copy(C)}for(let z=0;z<=n;z++){const F=r+z*y*a,k=Math.sin(F),Y=Math.cos(F);for(let K=0;K<=e.length-1;K++){S.x=e[K].x*k,S.y=e[K].y,S.z=e[K].x*Y,u.push(S.x,S.y,S.z),E.x=z/n,E.y=K/(e.length-1),d.push(E.x,E.y);const se=g[3*K+0]*k,le=g[3*K+1],G=g[3*K+0]*Y;_.push(se,le,G)}}for(let z=0;z<n;z++)for(let F=0;F<e.length-1;F++){const k=F+z*e.length,Y=k,K=k+e.length,se=k+e.length+1,le=k+1;l.push(Y,K,le),l.push(se,le,K)}this.setIndex(l),this.setAttribute("position",new Ut(u,3)),this.setAttribute("uv",new Ut(d,2)),this.setAttribute("normal",new Ut(_,3))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new pl(e.points,e.segments,e.phiStart,e.phiLength)}}class Oc extends pl{constructor(e=1,n=1,r=4,a=8){const l=new Fc;l.absarc(0,-n/2,e,Math.PI*1.5,0),l.absarc(0,n/2,e,0,Math.PI*.5),super(l.getPoints(r),a),this.type="CapsuleGeometry",this.parameters={radius:e,height:n,capSegments:r,radialSegments:a}}static fromJSON(e){return new Oc(e.radius,e.length,e.capSegments,e.radialSegments)}}class Bc extends Mn{constructor(e=1,n=32,r=0,a=Math.PI*2){super(),this.type="CircleGeometry",this.parameters={radius:e,segments:n,thetaStart:r,thetaLength:a},n=Math.max(3,n);const l=[],u=[],d=[],g=[],_=new j,y=new Je;u.push(0,0,0),d.push(0,0,1),g.push(.5,.5);for(let S=0,E=3;S<=n;S++,E+=3){const w=r+S/n*a;_.x=e*Math.cos(w),_.y=e*Math.sin(w),u.push(_.x,_.y,_.z),d.push(0,0,1),y.x=(u[E]/e+1)/2,y.y=(u[E+1]/e+1)/2,g.push(y.x,y.y)}for(let S=1;S<=n;S++)l.push(S,S+1,0);this.setIndex(l),this.setAttribute("position",new Ut(u,3)),this.setAttribute("normal",new Ut(d,3)),this.setAttribute("uv",new Ut(g,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new Bc(e.radius,e.segments,e.thetaStart,e.thetaLength)}}class qa extends Mn{constructor(e=1,n=1,r=1,a=32,l=1,u=!1,d=0,g=Math.PI*2){super(),this.type="CylinderGeometry",this.parameters={radiusTop:e,radiusBottom:n,height:r,radialSegments:a,heightSegments:l,openEnded:u,thetaStart:d,thetaLength:g};const _=this;a=Math.floor(a),l=Math.floor(l);const y=[],S=[],E=[],w=[];let C=0;const I=[],U=r/2;let A=0;z(),u===!1&&(e>0&&F(!0),n>0&&F(!1)),this.setIndex(y),this.setAttribute("position",new Ut(S,3)),this.setAttribute("normal",new Ut(E,3)),this.setAttribute("uv",new Ut(w,2));function z(){const k=new j,Y=new j;let K=0;const se=(n-e)/r;for(let le=0;le<=l;le++){const G=[],ee=le/l,Pe=ee*(n-e)+e;for(let Ue=0;Ue<=a;Ue++){const ge=Ue/a,Se=ge*g+d,De=Math.sin(Se),$e=Math.cos(Se);Y.x=Pe*De,Y.y=-ee*r+U,Y.z=Pe*$e,S.push(Y.x,Y.y,Y.z),k.set(De,se,$e).normalize(),E.push(k.x,k.y,k.z),w.push(ge,1-ee),G.push(C++)}I.push(G)}for(let le=0;le<a;le++)for(let G=0;G<l;G++){const ee=I[G][le],Pe=I[G+1][le],Ue=I[G+1][le+1],ge=I[G][le+1];y.push(ee,Pe,ge),y.push(Pe,Ue,ge),K+=6}_.addGroup(A,K,0),A+=K}function F(k){const Y=C,K=new Je,se=new j;let le=0;const G=k===!0?e:n,ee=k===!0?1:-1;for(let Ue=1;Ue<=a;Ue++)S.push(0,U*ee,0),E.push(0,ee,0),w.push(.5,.5),C++;const Pe=C;for(let Ue=0;Ue<=a;Ue++){const Se=Ue/a*g+d,De=Math.cos(Se),$e=Math.sin(Se);se.x=G*$e,se.y=U*ee,se.z=G*De,S.push(se.x,se.y,se.z),E.push(0,ee,0),K.x=De*.5+.5,K.y=$e*.5*ee+.5,w.push(K.x,K.y),C++}for(let Ue=0;Ue<a;Ue++){const ge=Y+Ue,Se=Pe+Ue;k===!0?y.push(Se,Se+1,ge):y.push(Se+1,Se,ge),le+=3}_.addGroup(A,le,k===!0?1:2),A+=le}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new qa(e.radiusTop,e.radiusBottom,e.height,e.radialSegments,e.heightSegments,e.openEnded,e.thetaStart,e.thetaLength)}}class zc extends qa{constructor(e=1,n=1,r=32,a=1,l=!1,u=0,d=Math.PI*2){super(0,e,n,r,a,l,u,d),this.type="ConeGeometry",this.parameters={radius:e,height:n,radialSegments:r,heightSegments:a,openEnded:l,thetaStart:u,thetaLength:d}}static fromJSON(e){return new zc(e.radius,e.height,e.radialSegments,e.heightSegments,e.openEnded,e.thetaStart,e.thetaLength)}}class Os extends Mn{constructor(e=[],n=[],r=1,a=0){super(),this.type="PolyhedronGeometry",this.parameters={vertices:e,indices:n,radius:r,detail:a};const l=[],u=[];d(a),_(r),y(),this.setAttribute("position",new Ut(l,3)),this.setAttribute("normal",new Ut(l.slice(),3)),this.setAttribute("uv",new Ut(u,2)),a===0?this.computeVertexNormals():this.normalizeNormals();function d(z){const F=new j,k=new j,Y=new j;for(let K=0;K<n.length;K+=3)w(n[K+0],F),w(n[K+1],k),w(n[K+2],Y),g(F,k,Y,z)}function g(z,F,k,Y){const K=Y+1,se=[];for(let le=0;le<=K;le++){se[le]=[];const G=z.clone().lerp(k,le/K),ee=F.clone().lerp(k,le/K),Pe=K-le;for(let Ue=0;Ue<=Pe;Ue++)Ue===0&&le===K?se[le][Ue]=G:se[le][Ue]=G.clone().lerp(ee,Ue/Pe)}for(let le=0;le<K;le++)for(let G=0;G<2*(K-le)-1;G++){const ee=Math.floor(G/2);G%2===0?(E(se[le][ee+1]),E(se[le+1][ee]),E(se[le][ee])):(E(se[le][ee+1]),E(se[le+1][ee+1]),E(se[le+1][ee]))}}function _(z){const F=new j;for(let k=0;k<l.length;k+=3)F.x=l[k+0],F.y=l[k+1],F.z=l[k+2],F.normalize().multiplyScalar(z),l[k+0]=F.x,l[k+1]=F.y,l[k+2]=F.z}function y(){const z=new j;for(let F=0;F<l.length;F+=3){z.x=l[F+0],z.y=l[F+1],z.z=l[F+2];const k=U(z)/2/Math.PI+.5,Y=A(z)/Math.PI+.5;u.push(k,1-Y)}C(),S()}function S(){for(let z=0;z<u.length;z+=6){const F=u[z+0],k=u[z+2],Y=u[z+4],K=Math.max(F,k,Y),se=Math.min(F,k,Y);K>.9&&se<.1&&(F<.2&&(u[z+0]+=1),k<.2&&(u[z+2]+=1),Y<.2&&(u[z+4]+=1))}}function E(z){l.push(z.x,z.y,z.z)}function w(z,F){const k=z*3;F.x=e[k+0],F.y=e[k+1],F.z=e[k+2]}function C(){const z=new j,F=new j,k=new j,Y=new j,K=new Je,se=new Je,le=new Je;for(let G=0,ee=0;G<l.length;G+=9,ee+=6){z.set(l[G+0],l[G+1],l[G+2]),F.set(l[G+3],l[G+4],l[G+5]),k.set(l[G+6],l[G+7],l[G+8]),K.set(u[ee+0],u[ee+1]),se.set(u[ee+2],u[ee+3]),le.set(u[ee+4],u[ee+5]),Y.copy(z).add(F).add(k).divideScalar(3);const Pe=U(Y);I(K,ee+0,z,Pe),I(se,ee+2,F,Pe),I(le,ee+4,k,Pe)}}function I(z,F,k,Y){Y<0&&z.x===1&&(u[F]=z.x-1),k.x===0&&k.z===0&&(u[F]=Y/2/Math.PI+.5)}function U(z){return Math.atan2(z.z,-z.x)}function A(z){return Math.atan2(-z.y,Math.sqrt(z.x*z.x+z.z*z.z))}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new Os(e.vertices,e.indices,e.radius,e.details)}}class kc extends Os{constructor(e=1,n=0){const r=(1+Math.sqrt(5))/2,a=1/r,l=[-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-a,-r,0,-a,r,0,a,-r,0,a,r,-a,-r,0,-a,r,0,a,-r,0,a,r,0,-r,0,-a,r,0,-a,-r,0,a,r,0,a],u=[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9];super(l,u,e,n),this.type="DodecahedronGeometry",this.parameters={radius:e,detail:n}}static fromJSON(e){return new kc(e.radius,e.detail)}}const Ru=new j,Cu=new j,kd=new j,Pu=new lr;class L_ extends Mn{constructor(e=null,n=1){if(super(),this.type="EdgesGeometry",this.parameters={geometry:e,thresholdAngle:n},e!==null){const a=Math.pow(10,4),l=Math.cos(Ba*n),u=e.getIndex(),d=e.getAttribute("position"),g=u?u.count:d.count,_=[0,0,0],y=["a","b","c"],S=new Array(3),E={},w=[];for(let C=0;C<g;C+=3){u?(_[0]=u.getX(C),_[1]=u.getX(C+1),_[2]=u.getX(C+2)):(_[0]=C,_[1]=C+1,_[2]=C+2);const{a:I,b:U,c:A}=Pu;if(I.fromBufferAttribute(d,_[0]),U.fromBufferAttribute(d,_[1]),A.fromBufferAttribute(d,_[2]),Pu.getNormal(kd),S[0]=`${Math.round(I.x*a)},${Math.round(I.y*a)},${Math.round(I.z*a)}`,S[1]=`${Math.round(U.x*a)},${Math.round(U.y*a)},${Math.round(U.z*a)}`,S[2]=`${Math.round(A.x*a)},${Math.round(A.y*a)},${Math.round(A.z*a)}`,!(S[0]===S[1]||S[1]===S[2]||S[2]===S[0]))for(let z=0;z<3;z++){const F=(z+1)%3,k=S[z],Y=S[F],K=Pu[y[z]],se=Pu[y[F]],le=`${k}_${Y}`,G=`${Y}_${k}`;G in E&&E[G]?(kd.dot(E[G].normal)<=l&&(w.push(K.x,K.y,K.z),w.push(se.x,se.y,se.z)),E[G]=null):le in E||(E[le]={index0:_[z],index1:_[F],normal:kd.clone()})}}for(const C in E)if(E[C]){const{index0:I,index1:U}=E[C];Ru.fromBufferAttribute(d,I),Cu.fromBufferAttribute(d,U),w.push(Ru.x,Ru.y,Ru.z),w.push(Cu.x,Cu.y,Cu.z)}this.setAttribute("position",new Ut(w,3))}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}}class Ya extends Fc{constructor(e){super(e),this.uuid=xr(),this.type="Shape",this.holes=[]}getPointsHoles(e){const n=[];for(let r=0,a=this.holes.length;r<a;r++)n[r]=this.holes[r].getPoints(e);return n}extractPoints(e){return{shape:this.getPoints(e),holes:this.getPointsHoles(e)}}copy(e){super.copy(e),this.holes=[];for(let n=0,r=e.holes.length;n<r;n++){const a=e.holes[n];this.holes.push(a.clone())}return this}toJSON(){const e=super.toJSON();e.uuid=this.uuid,e.holes=[];for(let n=0,r=this.holes.length;n<r;n++){const a=this.holes[n];e.holes.push(a.toJSON())}return e}fromJSON(e){super.fromJSON(e),this.uuid=e.uuid,this.holes=[];for(let n=0,r=e.holes.length;n<r;n++){const a=e.holes[n];this.holes.push(new Fc().fromJSON(a))}return this}}const Aw={triangulate:function(c,e,n=2){const r=e&&e.length,a=r?e[0]*n:c.length;let l=D_(c,0,a,n,!0);const u=[];if(!l||l.next===l.prev)return u;let d,g,_,y,S,E,w;if(r&&(l=Dw(c,e,l,n)),c.length>80*n){d=_=c[0],g=y=c[1];for(let C=n;C<a;C+=n)S=c[C],E=c[C+1],S<d&&(d=S),E<g&&(g=E),S>_&&(_=S),E>y&&(y=E);w=Math.max(_-d,y-g),w=w!==0?32767/w:0}return Gc(l,u,n,d,g,w,0),u}};function D_(c,e,n,r,a){let l,u;if(a===Vw(c,e,n,r)>0)for(l=e;l<n;l+=r)u=N_(l,c[l],c[l+1],u);else for(l=n-r;l>=e;l-=r)u=N_(l,c[l],c[l+1],u);return u&&Lu(u,u.next)&&(Vc(u),u=u.next),u}function Za(c,e){if(!c)return c;e||(e=c);let n=c,r;do if(r=!1,!n.steiner&&(Lu(n,n.next)||ri(n.prev,n,n.next)===0)){if(Vc(n),n=e=n.prev,n===n.next)break;r=!0}else n=n.next;while(r||n!==e);return e}function Gc(c,e,n,r,a,l,u){if(!c)return;!u&&l&&Ow(c,r,a,l);let d=c,g,_;for(;c.prev!==c.next;){if(g=c.prev,_=c.next,l?Cw(c,r,a,l):Rw(c)){e.push(g.i/n|0),e.push(c.i/n|0),e.push(_.i/n|0),Vc(c),c=_.next,d=_.next;continue}if(c=_,c===d){u?u===1?(c=Pw(Za(c),e,n),Gc(c,e,n,r,a,l,2)):u===2&&Lw(c,e,n,r,a,l):Gc(Za(c),e,n,r,a,l,1);break}}}function Rw(c){const e=c.prev,n=c,r=c.next;if(ri(e,n,r)>=0)return!1;const a=e.x,l=n.x,u=r.x,d=e.y,g=n.y,_=r.y,y=a<l?a<u?a:u:l<u?l:u,S=d<g?d<_?d:_:g<_?g:_,E=a>l?a>u?a:u:l>u?l:u,w=d>g?d>_?d:_:g>_?g:_;let C=r.next;for(;C!==e;){if(C.x>=y&&C.x<=E&&C.y>=S&&C.y<=w&&ml(a,d,l,g,u,_,C.x,C.y)&&ri(C.prev,C,C.next)>=0)return!1;C=C.next}return!0}function Cw(c,e,n,r){const a=c.prev,l=c,u=c.next;if(ri(a,l,u)>=0)return!1;const d=a.x,g=l.x,_=u.x,y=a.y,S=l.y,E=u.y,w=d<g?d<_?d:_:g<_?g:_,C=y<S?y<E?y:E:S<E?S:E,I=d>g?d>_?d:_:g>_?g:_,U=y>S?y>E?y:E:S>E?S:E,A=Gd(w,C,e,n,r),z=Gd(I,U,e,n,r);let F=c.prevZ,k=c.nextZ;for(;F&&F.z>=A&&k&&k.z<=z;){if(F.x>=w&&F.x<=I&&F.y>=C&&F.y<=U&&F!==a&&F!==u&&ml(d,y,g,S,_,E,F.x,F.y)&&ri(F.prev,F,F.next)>=0||(F=F.prevZ,k.x>=w&&k.x<=I&&k.y>=C&&k.y<=U&&k!==a&&k!==u&&ml(d,y,g,S,_,E,k.x,k.y)&&ri(k.prev,k,k.next)>=0))return!1;k=k.nextZ}for(;F&&F.z>=A;){if(F.x>=w&&F.x<=I&&F.y>=C&&F.y<=U&&F!==a&&F!==u&&ml(d,y,g,S,_,E,F.x,F.y)&&ri(F.prev,F,F.next)>=0)return!1;F=F.prevZ}for(;k&&k.z<=z;){if(k.x>=w&&k.x<=I&&k.y>=C&&k.y<=U&&k!==a&&k!==u&&ml(d,y,g,S,_,E,k.x,k.y)&&ri(k.prev,k,k.next)>=0)return!1;k=k.nextZ}return!0}function Pw(c,e,n){let r=c;do{const a=r.prev,l=r.next.next;!Lu(a,l)&&U_(a,r,r.next,l)&&Hc(a,l)&&Hc(l,a)&&(e.push(a.i/n|0),e.push(r.i/n|0),e.push(l.i/n|0),Vc(r),Vc(r.next),r=c=l),r=r.next}while(r!==c);return Za(r)}function Lw(c,e,n,r,a,l){let u=c;do{let d=u.next.next;for(;d!==u.prev;){if(u.i!==d.i&&kw(u,d)){let g=I_(u,d);u=Za(u,u.next),g=Za(g,g.next),Gc(u,e,n,r,a,l,0),Gc(g,e,n,r,a,l,0);return}d=d.next}u=u.next}while(u!==c)}function Dw(c,e,n,r){const a=[];let l,u,d,g,_;for(l=0,u=e.length;l<u;l++)d=e[l]*r,g=l<u-1?e[l+1]*r:c.length,_=D_(c,d,g,r,!1),_===_.next&&(_.steiner=!0),a.push(zw(_));for(a.sort(Uw),l=0;l<a.length;l++)n=Iw(a[l],n);return n}function Uw(c,e){return c.x-e.x}function Iw(c,e){const n=Nw(c,e);if(!n)return e;const r=I_(n,c);return Za(r,r.next),Za(n,n.next)}function Nw(c,e){let n=e,r=-1/0,a;const l=c.x,u=c.y;do{if(u<=n.y&&u>=n.next.y&&n.next.y!==n.y){const E=n.x+(u-n.y)*(n.next.x-n.x)/(n.next.y-n.y);if(E<=l&&E>r&&(r=E,a=n.x<n.next.x?n:n.next,E===l))return a}n=n.next}while(n!==e);if(!a)return null;const d=a,g=a.x,_=a.y;let y=1/0,S;n=a;do l>=n.x&&n.x>=g&&l!==n.x&&ml(u<_?l:r,u,g,_,u<_?r:l,u,n.x,n.y)&&(S=Math.abs(u-n.y)/(l-n.x),Hc(n,c)&&(S<y||S===y&&(n.x>a.x||n.x===a.x&&Fw(a,n)))&&(a=n,y=S)),n=n.next;while(n!==d);return a}function Fw(c,e){return ri(c.prev,c,e.prev)<0&&ri(e.next,c,c.next)<0}function Ow(c,e,n,r){let a=c;do a.z===0&&(a.z=Gd(a.x,a.y,e,n,r)),a.prevZ=a.prev,a.nextZ=a.next,a=a.next;while(a!==c);a.prevZ.nextZ=null,a.prevZ=null,Bw(a)}function Bw(c){let e,n,r,a,l,u,d,g,_=1;do{for(n=c,c=null,l=null,u=0;n;){for(u++,r=n,d=0,e=0;e<_&&(d++,r=r.nextZ,!!r);e++);for(g=_;d>0||g>0&&r;)d!==0&&(g===0||!r||n.z<=r.z)?(a=n,n=n.nextZ,d--):(a=r,r=r.nextZ,g--),l?l.nextZ=a:c=a,a.prevZ=l,l=a;n=r}l.nextZ=null,_*=2}while(u>1);return c}function Gd(c,e,n,r,a){return c=(c-n)*a|0,e=(e-r)*a|0,c=(c|c<<8)&16711935,c=(c|c<<4)&252645135,c=(c|c<<2)&858993459,c=(c|c<<1)&1431655765,e=(e|e<<8)&16711935,e=(e|e<<4)&252645135,e=(e|e<<2)&858993459,e=(e|e<<1)&1431655765,c|e<<1}function zw(c){let e=c,n=c;do(e.x<n.x||e.x===n.x&&e.y<n.y)&&(n=e),e=e.next;while(e!==c);return n}function ml(c,e,n,r,a,l,u,d){return(a-u)*(e-d)>=(c-u)*(l-d)&&(c-u)*(r-d)>=(n-u)*(e-d)&&(n-u)*(l-d)>=(a-u)*(r-d)}function kw(c,e){return c.next.i!==e.i&&c.prev.i!==e.i&&!Gw(c,e)&&(Hc(c,e)&&Hc(e,c)&&Hw(c,e)&&(ri(c.prev,c,e.prev)||ri(c,e.prev,e))||Lu(c,e)&&ri(c.prev,c,c.next)>0&&ri(e.prev,e,e.next)>0)}function ri(c,e,n){return(e.y-c.y)*(n.x-e.x)-(e.x-c.x)*(n.y-e.y)}function Lu(c,e){return c.x===e.x&&c.y===e.y}function U_(c,e,n,r){const a=Uu(ri(c,e,n)),l=Uu(ri(c,e,r)),u=Uu(ri(n,r,c)),d=Uu(ri(n,r,e));return!!(a!==l&&u!==d||a===0&&Du(c,n,e)||l===0&&Du(c,r,e)||u===0&&Du(n,c,r)||d===0&&Du(n,e,r))}function Du(c,e,n){return e.x<=Math.max(c.x,n.x)&&e.x>=Math.min(c.x,n.x)&&e.y<=Math.max(c.y,n.y)&&e.y>=Math.min(c.y,n.y)}function Uu(c){return c>0?1:c<0?-1:0}function Gw(c,e){let n=c;do{if(n.i!==c.i&&n.next.i!==c.i&&n.i!==e.i&&n.next.i!==e.i&&U_(n,n.next,c,e))return!0;n=n.next}while(n!==c);return!1}function Hc(c,e){return ri(c.prev,c,c.next)<0?ri(c,e,c.next)>=0&&ri(c,c.prev,e)>=0:ri(c,e,c.prev)<0||ri(c,c.next,e)<0}function Hw(c,e){let n=c,r=!1;const a=(c.x+e.x)/2,l=(c.y+e.y)/2;do n.y>l!=n.next.y>l&&n.next.y!==n.y&&a<(n.next.x-n.x)*(l-n.y)/(n.next.y-n.y)+n.x&&(r=!r),n=n.next;while(n!==c);return r}function I_(c,e){const n=new Hd(c.i,c.x,c.y),r=new Hd(e.i,e.x,e.y),a=c.next,l=e.prev;return c.next=e,e.prev=c,n.next=a,a.prev=n,r.next=n,n.prev=r,l.next=r,r.prev=l,r}function N_(c,e,n,r){const a=new Hd(c,e,n);return r?(a.next=r.next,a.prev=r,r.next.prev=a,r.next=a):(a.prev=a,a.next=a),a}function Vc(c){c.next.prev=c.prev,c.prev.next=c.next,c.prevZ&&(c.prevZ.nextZ=c.nextZ),c.nextZ&&(c.nextZ.prevZ=c.prevZ)}function Hd(c,e,n){this.i=c,this.x=e,this.y=n,this.prev=null,this.next=null,this.z=0,this.prevZ=null,this.nextZ=null,this.steiner=!1}function Vw(c,e,n,r){let a=0;for(let l=e,u=n-r;l<n;l+=r)a+=(c[u]-c[l])*(c[l+1]+c[u+1]),u=l;return a}class gs{static area(e){const n=e.length;let r=0;for(let a=n-1,l=0;l<n;a=l++)r+=e[a].x*e[l].y-e[l].x*e[a].y;return r*.5}static isClockWise(e){return gs.area(e)<0}static triangulateShape(e,n){const r=[],a=[],l=[];F_(e),O_(r,e);let u=e.length;n.forEach(F_);for(let g=0;g<n.length;g++)a.push(u),u+=n[g].length,O_(r,n[g]);const d=Aw.triangulate(r,a);for(let g=0;g<d.length;g+=3)l.push(d.slice(g,g+3));return l}}function F_(c){const e=c.length;e>2&&c[e-1].equals(c[0])&&c.pop()}function O_(c,e){for(let n=0;n<e.length;n++)c.push(e[n].x),c.push(e[n].y)}class Wc extends Mn{constructor(e=new Ya([new Je(.5,.5),new Je(-.5,.5),new Je(-.5,-.5),new Je(.5,-.5)]),n={}){super(),this.type="ExtrudeGeometry",this.parameters={shapes:e,options:n},e=Array.isArray(e)?e:[e];const r=this,a=[],l=[];for(let d=0,g=e.length;d<g;d++){const _=e[d];u(_)}this.setAttribute("position",new Ut(a,3)),this.setAttribute("uv",new Ut(l,2)),this.computeVertexNormals();function u(d){const g=[],_=n.curveSegments!==void 0?n.curveSegments:12,y=n.steps!==void 0?n.steps:1,S=n.depth!==void 0?n.depth:1;let E=n.bevelEnabled!==void 0?n.bevelEnabled:!0,w=n.bevelThickness!==void 0?n.bevelThickness:.2,C=n.bevelSize!==void 0?n.bevelSize:w-.1,I=n.bevelOffset!==void 0?n.bevelOffset:0,U=n.bevelSegments!==void 0?n.bevelSegments:3;const A=n.extrudePath,z=n.UVGenerator!==void 0?n.UVGenerator:Ww;let F,k=!1,Y,K,se,le;A&&(F=A.getSpacedPoints(y),k=!0,E=!1,Y=A.computeFrenetFrames(y,!1),K=new j,se=new j,le=new j),E||(U=0,w=0,C=0,I=0);const G=d.extractPoints(_);let ee=G.shape;const Pe=G.holes;if(!gs.isClockWise(ee)){ee=ee.reverse();for(let et=0,Ve=Pe.length;et<Ve;et++){const tt=Pe[et];gs.isClockWise(tt)&&(Pe[et]=tt.reverse())}}const ge=gs.triangulateShape(ee,Pe),Se=ee;for(let et=0,Ve=Pe.length;et<Ve;et++){const tt=Pe[et];ee=ee.concat(tt)}function De(et,Ve,tt){return Ve||console.error("THREE.ExtrudeGeometry: vec does not exist"),et.clone().addScaledVector(Ve,tt)}const $e=ee.length,Ze=ge.length;function Ke(et,Ve,tt){let Lt,Mt,Kt;const $t=et.x-Ve.x,qt=et.y-Ve.y,Tn=tt.x-et.x,zn=tt.y-et.y,ie=$t*$t+qt*qt,Z=$t*zn-qt*Tn;if(Math.abs(Z)>Number.EPSILON){const Te=Math.sqrt(ie),at=Math.sqrt(Tn*Tn+zn*zn),ht=Ve.x-qt/Te,Et=Ve.y+$t/Te,en=tt.x-zn/at,Pt=tt.y+Tn/at,Ge=((en-ht)*zn-(Pt-Et)*Tn)/($t*zn-qt*Tn);Lt=ht+$t*Ge-et.x,Mt=Et+qt*Ge-et.y;const Bt=Lt*Lt+Mt*Mt;if(Bt<=2)return new Je(Lt,Mt);Kt=Math.sqrt(Bt/2)}else{let Te=!1;$t>Number.EPSILON?Tn>Number.EPSILON&&(Te=!0):$t<-Number.EPSILON?Tn<-Number.EPSILON&&(Te=!0):Math.sign(qt)===Math.sign(zn)&&(Te=!0),Te?(Lt=-qt,Mt=$t,Kt=Math.sqrt(ie)):(Lt=$t,Mt=qt,Kt=Math.sqrt(ie/2))}return new Je(Lt/Kt,Mt/Kt)}const ct=[];for(let et=0,Ve=Se.length,tt=Ve-1,Lt=et+1;et<Ve;et++,tt++,Lt++)tt===Ve&&(tt=0),Lt===Ve&&(Lt=0),ct[et]=Ke(Se[et],Se[tt],Se[Lt]);const Qe=[];let Ot,pt=ct.concat();for(let et=0,Ve=Pe.length;et<Ve;et++){const tt=Pe[et];Ot=[];for(let Lt=0,Mt=tt.length,Kt=Mt-1,$t=Lt+1;Lt<Mt;Lt++,Kt++,$t++)Kt===Mt&&(Kt=0),$t===Mt&&($t=0),Ot[Lt]=Ke(tt[Lt],tt[Kt],tt[$t]);Qe.push(Ot),pt=pt.concat(Ot)}for(let et=0;et<U;et++){const Ve=et/U,tt=w*Math.cos(Ve*Math.PI/2),Lt=C*Math.sin(Ve*Math.PI/2)+I;for(let Mt=0,Kt=Se.length;Mt<Kt;Mt++){const $t=De(Se[Mt],ct[Mt],Lt);he($t.x,$t.y,-tt)}for(let Mt=0,Kt=Pe.length;Mt<Kt;Mt++){const $t=Pe[Mt];Ot=Qe[Mt];for(let qt=0,Tn=$t.length;qt<Tn;qt++){const zn=De($t[qt],Ot[qt],Lt);he(zn.x,zn.y,-tt)}}}const Fe=C+I;for(let et=0;et<$e;et++){const Ve=E?De(ee[et],pt[et],Fe):ee[et];k?(se.copy(Y.normals[0]).multiplyScalar(Ve.x),K.copy(Y.binormals[0]).multiplyScalar(Ve.y),le.copy(F[0]).add(se).add(K),he(le.x,le.y,le.z)):he(Ve.x,Ve.y,0)}for(let et=1;et<=y;et++)for(let Ve=0;Ve<$e;Ve++){const tt=E?De(ee[Ve],pt[Ve],Fe):ee[Ve];k?(se.copy(Y.normals[et]).multiplyScalar(tt.x),K.copy(Y.binormals[et]).multiplyScalar(tt.y),le.copy(F[et]).add(se).add(K),he(le.x,le.y,le.z)):he(tt.x,tt.y,S/y*et)}for(let et=U-1;et>=0;et--){const Ve=et/U,tt=w*Math.cos(Ve*Math.PI/2),Lt=C*Math.sin(Ve*Math.PI/2)+I;for(let Mt=0,Kt=Se.length;Mt<Kt;Mt++){const $t=De(Se[Mt],ct[Mt],Lt);he($t.x,$t.y,S+tt)}for(let Mt=0,Kt=Pe.length;Mt<Kt;Mt++){const $t=Pe[Mt];Ot=Qe[Mt];for(let qt=0,Tn=$t.length;qt<Tn;qt++){const zn=De($t[qt],Ot[qt],Lt);k?he(zn.x,zn.y+F[y-1].y,F[y-1].x+tt):he(zn.x,zn.y,S+tt)}}}je(),vt();function je(){const et=a.length/3;if(E){let Ve=0,tt=$e*Ve;for(let Lt=0;Lt<Ze;Lt++){const Mt=ge[Lt];rn(Mt[2]+tt,Mt[1]+tt,Mt[0]+tt)}Ve=y+U*2,tt=$e*Ve;for(let Lt=0;Lt<Ze;Lt++){const Mt=ge[Lt];rn(Mt[0]+tt,Mt[1]+tt,Mt[2]+tt)}}else{for(let Ve=0;Ve<Ze;Ve++){const tt=ge[Ve];rn(tt[2],tt[1],tt[0])}for(let Ve=0;Ve<Ze;Ve++){const tt=ge[Ve];rn(tt[0]+$e*y,tt[1]+$e*y,tt[2]+$e*y)}}r.addGroup(et,a.length/3-et,0)}function vt(){const et=a.length/3;let Ve=0;bt(Se,Ve),Ve+=Se.length;for(let tt=0,Lt=Pe.length;tt<Lt;tt++){const Mt=Pe[tt];bt(Mt,Ve),Ve+=Mt.length}r.addGroup(et,a.length/3-et,1)}function bt(et,Ve){let tt=et.length;for(;--tt>=0;){const Lt=tt;let Mt=tt-1;Mt<0&&(Mt=et.length-1);for(let Kt=0,$t=y+U*2;Kt<$t;Kt++){const qt=$e*Kt,Tn=$e*(Kt+1),zn=Ve+Lt+qt,ie=Ve+Mt+qt,Z=Ve+Mt+Tn,Te=Ve+Lt+Tn;an(zn,ie,Z,Te)}}}function he(et,Ve,tt){g.push(et),g.push(Ve),g.push(tt)}function rn(et,Ve,tt){dt(et),dt(Ve),dt(tt);const Lt=a.length/3,Mt=z.generateTopUV(r,a,Lt-3,Lt-2,Lt-1);kt(Mt[0]),kt(Mt[1]),kt(Mt[2])}function an(et,Ve,tt,Lt){dt(et),dt(Ve),dt(Lt),dt(Ve),dt(tt),dt(Lt);const Mt=a.length/3,Kt=z.generateSideWallUV(r,a,Mt-6,Mt-3,Mt-2,Mt-1);kt(Kt[0]),kt(Kt[1]),kt(Kt[3]),kt(Kt[1]),kt(Kt[2]),kt(Kt[3])}function dt(et){a.push(g[et*3+0]),a.push(g[et*3+1]),a.push(g[et*3+2])}function kt(et){l.push(et.x),l.push(et.y)}}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}toJSON(){const e=super.toJSON(),n=this.parameters.shapes,r=this.parameters.options;return Xw(n,r,e)}static fromJSON(e,n){const r=[];for(let l=0,u=e.shapes.length;l<u;l++){const d=n[e.shapes[l]];r.push(d)}const a=e.options.extrudePath;return a!==void 0&&(e.options.extrudePath=new zd[a.type]().fromJSON(a)),new Wc(r,e.options)}}const Ww={generateTopUV:function(c,e,n,r,a){const l=e[n*3],u=e[n*3+1],d=e[r*3],g=e[r*3+1],_=e[a*3],y=e[a*3+1];return[new Je(l,u),new Je(d,g),new Je(_,y)]},generateSideWallUV:function(c,e,n,r,a,l){const u=e[n*3],d=e[n*3+1],g=e[n*3+2],_=e[r*3],y=e[r*3+1],S=e[r*3+2],E=e[a*3],w=e[a*3+1],C=e[a*3+2],I=e[l*3],U=e[l*3+1],A=e[l*3+2];return Math.abs(d-y)<Math.abs(u-_)?[new Je(u,1-g),new Je(_,1-S),new Je(E,1-C),new Je(I,1-A)]:[new Je(d,1-g),new Je(y,1-S),new Je(w,1-C),new Je(U,1-A)]}};function Xw(c,e,n){if(n.shapes=[],Array.isArray(c))for(let r=0,a=c.length;r<a;r++){const l=c[r];n.shapes.push(l.uuid)}else n.shapes.push(c.uuid);return n.options=Object.assign({},e),e.extrudePath!==void 0&&(n.options.extrudePath=e.extrudePath.toJSON()),n}class Xc extends Os{constructor(e=1,n=0){const r=(1+Math.sqrt(5))/2,a=[-1,r,0,1,r,0,-1,-r,0,1,-r,0,0,-1,r,0,1,r,0,-1,-r,0,1,-r,r,0,-1,r,0,1,-r,0,-1,-r,0,1],l=[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1];super(a,l,e,n),this.type="IcosahedronGeometry",this.parameters={radius:e,detail:n}}static fromJSON(e){return new Xc(e.radius,e.detail)}}class gl extends Os{constructor(e=1,n=0){const r=[1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],a=[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2];super(r,a,e,n),this.type="OctahedronGeometry",this.parameters={radius:e,detail:n}}static fromJSON(e){return new gl(e.radius,e.detail)}}class qc extends Mn{constructor(e=.5,n=1,r=32,a=1,l=0,u=Math.PI*2){super(),this.type="RingGeometry",this.parameters={innerRadius:e,outerRadius:n,thetaSegments:r,phiSegments:a,thetaStart:l,thetaLength:u},r=Math.max(3,r),a=Math.max(1,a);const d=[],g=[],_=[],y=[];let S=e;const E=(n-e)/a,w=new j,C=new Je;for(let I=0;I<=a;I++){for(let U=0;U<=r;U++){const A=l+U/r*u;w.x=S*Math.cos(A),w.y=S*Math.sin(A),g.push(w.x,w.y,w.z),_.push(0,0,1),C.x=(w.x/n+1)/2,C.y=(w.y/n+1)/2,y.push(C.x,C.y)}S+=E}for(let I=0;I<a;I++){const U=I*(r+1);for(let A=0;A<r;A++){const z=A+U,F=z,k=z+r+1,Y=z+r+2,K=z+1;d.push(F,k,K),d.push(k,Y,K)}}this.setIndex(d),this.setAttribute("position",new Ut(g,3)),this.setAttribute("normal",new Ut(_,3)),this.setAttribute("uv",new Ut(y,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new qc(e.innerRadius,e.outerRadius,e.thetaSegments,e.phiSegments,e.thetaStart,e.thetaLength)}}class Yc extends Mn{constructor(e=new Ya([new Je(0,.5),new Je(-.5,-.5),new Je(.5,-.5)]),n=12){super(),this.type="ShapeGeometry",this.parameters={shapes:e,curveSegments:n};const r=[],a=[],l=[],u=[];let d=0,g=0;if(Array.isArray(e)===!1)_(e);else for(let y=0;y<e.length;y++)_(e[y]),this.addGroup(d,g,y),d+=g,g=0;this.setIndex(r),this.setAttribute("position",new Ut(a,3)),this.setAttribute("normal",new Ut(l,3)),this.setAttribute("uv",new Ut(u,2));function _(y){const S=a.length/3,E=y.extractPoints(n);let w=E.shape;const C=E.holes;gs.isClockWise(w)===!1&&(w=w.reverse());for(let U=0,A=C.length;U<A;U++){const z=C[U];gs.isClockWise(z)===!0&&(C[U]=z.reverse())}const I=gs.triangulateShape(w,C);for(let U=0,A=C.length;U<A;U++){const z=C[U];w=w.concat(z)}for(let U=0,A=w.length;U<A;U++){const z=w[U];a.push(z.x,z.y,0),l.push(0,0,1),u.push(z.x,z.y)}for(let U=0,A=I.length;U<A;U++){const z=I[U],F=z[0]+S,k=z[1]+S,Y=z[2]+S;r.push(F,k,Y),g+=3}}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}toJSON(){const e=super.toJSON(),n=this.parameters.shapes;return qw(n,e)}static fromJSON(e,n){const r=[];for(let a=0,l=e.shapes.length;a<l;a++){const u=n[e.shapes[a]];r.push(u)}return new Yc(r,e.curveSegments)}}function qw(c,e){if(e.shapes=[],Array.isArray(c))for(let n=0,r=c.length;n<r;n++){const a=c[n];e.shapes.push(a.uuid)}else e.shapes.push(c.uuid);return e}class _l extends Mn{constructor(e=1,n=32,r=16,a=0,l=Math.PI*2,u=0,d=Math.PI){super(),this.type="SphereGeometry",this.parameters={radius:e,widthSegments:n,heightSegments:r,phiStart:a,phiLength:l,thetaStart:u,thetaLength:d},n=Math.max(3,Math.floor(n)),r=Math.max(2,Math.floor(r));const g=Math.min(u+d,Math.PI);let _=0;const y=[],S=new j,E=new j,w=[],C=[],I=[],U=[];for(let A=0;A<=r;A++){const z=[],F=A/r;let k=0;A===0&&u===0?k=.5/n:A===r&&g===Math.PI&&(k=-.5/n);for(let Y=0;Y<=n;Y++){const K=Y/n;S.x=-e*Math.cos(a+K*l)*Math.sin(u+F*d),S.y=e*Math.cos(u+F*d),S.z=e*Math.sin(a+K*l)*Math.sin(u+F*d),C.push(S.x,S.y,S.z),E.copy(S).normalize(),I.push(E.x,E.y,E.z),U.push(K+k,1-F),z.push(_++)}y.push(z)}for(let A=0;A<r;A++)for(let z=0;z<n;z++){const F=y[A][z+1],k=y[A][z],Y=y[A+1][z],K=y[A+1][z+1];(A!==0||u>0)&&w.push(F,k,K),(A!==r-1||g<Math.PI)&&w.push(k,Y,K)}this.setIndex(w),this.setAttribute("position",new Ut(C,3)),this.setAttribute("normal",new Ut(I,3)),this.setAttribute("uv",new Ut(U,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new _l(e.radius,e.widthSegments,e.heightSegments,e.phiStart,e.phiLength,e.thetaStart,e.thetaLength)}}class Zc extends Os{constructor(e=1,n=0){const r=[1,1,1,-1,-1,1,-1,1,-1,1,-1,-1],a=[2,1,0,0,3,2,1,3,0,2,3,1];super(r,a,e,n),this.type="TetrahedronGeometry",this.parameters={radius:e,detail:n}}static fromJSON(e){return new Zc(e.radius,e.detail)}}class Kc extends Mn{constructor(e=1,n=.4,r=12,a=48,l=Math.PI*2){super(),this.type="TorusGeometry",this.parameters={radius:e,tube:n,radialSegments:r,tubularSegments:a,arc:l},r=Math.floor(r),a=Math.floor(a);const u=[],d=[],g=[],_=[],y=new j,S=new j,E=new j;for(let w=0;w<=r;w++)for(let C=0;C<=a;C++){const I=C/a*l,U=w/r*Math.PI*2;S.x=(e+n*Math.cos(U))*Math.cos(I),S.y=(e+n*Math.cos(U))*Math.sin(I),S.z=n*Math.sin(U),d.push(S.x,S.y,S.z),y.x=e*Math.cos(I),y.y=e*Math.sin(I),E.subVectors(S,y).normalize(),g.push(E.x,E.y,E.z),_.push(C/a),_.push(w/r)}for(let w=1;w<=r;w++)for(let C=1;C<=a;C++){const I=(a+1)*w+C-1,U=(a+1)*(w-1)+C-1,A=(a+1)*(w-1)+C,z=(a+1)*w+C;u.push(I,U,z),u.push(U,A,z)}this.setIndex(u),this.setAttribute("position",new Ut(d,3)),this.setAttribute("normal",new Ut(g,3)),this.setAttribute("uv",new Ut(_,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new Kc(e.radius,e.tube,e.radialSegments,e.tubularSegments,e.arc)}}class $c extends Mn{constructor(e=1,n=.4,r=64,a=8,l=2,u=3){super(),this.type="TorusKnotGeometry",this.parameters={radius:e,tube:n,tubularSegments:r,radialSegments:a,p:l,q:u},r=Math.floor(r),a=Math.floor(a);const d=[],g=[],_=[],y=[],S=new j,E=new j,w=new j,C=new j,I=new j,U=new j,A=new j;for(let F=0;F<=r;++F){const k=F/r*l*Math.PI*2;z(k,l,u,e,w),z(k+.01,l,u,e,C),U.subVectors(C,w),A.addVectors(C,w),I.crossVectors(U,A),A.crossVectors(I,U),I.normalize(),A.normalize();for(let Y=0;Y<=a;++Y){const K=Y/a*Math.PI*2,se=-n*Math.cos(K),le=n*Math.sin(K);S.x=w.x+(se*A.x+le*I.x),S.y=w.y+(se*A.y+le*I.y),S.z=w.z+(se*A.z+le*I.z),g.push(S.x,S.y,S.z),E.subVectors(S,w).normalize(),_.push(E.x,E.y,E.z),y.push(F/r),y.push(Y/a)}}for(let F=1;F<=r;F++)for(let k=1;k<=a;k++){const Y=(a+1)*(F-1)+(k-1),K=(a+1)*F+(k-1),se=(a+1)*F+k,le=(a+1)*(F-1)+k;d.push(Y,K,le),d.push(K,se,le)}this.setIndex(d),this.setAttribute("position",new Ut(g,3)),this.setAttribute("normal",new Ut(_,3)),this.setAttribute("uv",new Ut(y,2));function z(F,k,Y,K,se){const le=Math.cos(F),G=Math.sin(F),ee=Y/k*F,Pe=Math.cos(ee);se.x=K*(2+Pe)*.5*le,se.y=K*(2+Pe)*G*.5,se.z=K*Math.sin(ee)*.5}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new $c(e.radius,e.tube,e.tubularSegments,e.radialSegments,e.p,e.q)}}class Jc extends Mn{constructor(e=new Od(new j(-1,-1,0),new j(-1,1,0),new j(1,1,0)),n=64,r=1,a=8,l=!1){super(),this.type="TubeGeometry",this.parameters={path:e,tubularSegments:n,radius:r,radialSegments:a,closed:l};const u=e.computeFrenetFrames(n,l);this.tangents=u.tangents,this.normals=u.normals,this.binormals=u.binormals;const d=new j,g=new j,_=new Je;let y=new j;const S=[],E=[],w=[],C=[];I(),this.setIndex(C),this.setAttribute("position",new Ut(S,3)),this.setAttribute("normal",new Ut(E,3)),this.setAttribute("uv",new Ut(w,2));function I(){for(let F=0;F<n;F++)U(F);U(l===!1?n:0),z(),A()}function U(F){y=e.getPointAt(F/n,y);const k=u.normals[F],Y=u.binormals[F];for(let K=0;K<=a;K++){const se=K/a*Math.PI*2,le=Math.sin(se),G=-Math.cos(se);g.x=G*k.x+le*Y.x,g.y=G*k.y+le*Y.y,g.z=G*k.z+le*Y.z,g.normalize(),E.push(g.x,g.y,g.z),d.x=y.x+r*g.x,d.y=y.y+r*g.y,d.z=y.z+r*g.z,S.push(d.x,d.y,d.z)}}function A(){for(let F=1;F<=n;F++)for(let k=1;k<=a;k++){const Y=(a+1)*(F-1)+(k-1),K=(a+1)*F+(k-1),se=(a+1)*F+k,le=(a+1)*(F-1)+k;C.push(Y,K,le),C.push(K,se,le)}}function z(){for(let F=0;F<=n;F++)for(let k=0;k<=a;k++)_.x=F/n,_.y=k/a,w.push(_.x,_.y)}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}toJSON(){const e=super.toJSON();return e.path=this.parameters.path.toJSON(),e}static fromJSON(e){return new Jc(new zd[e.path.type]().fromJSON(e.path),e.tubularSegments,e.radius,e.radialSegments,e.closed)}}class B_ extends Mn{constructor(e=null){if(super(),this.type="WireframeGeometry",this.parameters={geometry:e},e!==null){const n=[],r=new Set,a=new j,l=new j;if(e.index!==null){const u=e.attributes.position,d=e.index;let g=e.groups;g.length===0&&(g=[{start:0,count:d.count,materialIndex:0}]);for(let _=0,y=g.length;_<y;++_){const S=g[_],E=S.start,w=S.count;for(let C=E,I=E+w;C<I;C+=3)for(let U=0;U<3;U++){const A=d.getX(C+U),z=d.getX(C+(U+1)%3);a.fromBufferAttribute(u,A),l.fromBufferAttribute(u,z),z_(a,l,r)===!0&&(n.push(a.x,a.y,a.z),n.push(l.x,l.y,l.z))}}}else{const u=e.attributes.position;for(let d=0,g=u.count/3;d<g;d++)for(let _=0;_<3;_++){const y=3*d+_,S=3*d+(_+1)%3;a.fromBufferAttribute(u,y),l.fromBufferAttribute(u,S),z_(a,l,r)===!0&&(n.push(a.x,a.y,a.z),n.push(l.x,l.y,l.z))}}this.setAttribute("position",new Ut(n,3))}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}}function z_(c,e,n){const r=`${c.x},${c.y},${c.z}-${e.x},${e.y},${e.z}`,a=`${e.x},${e.y},${e.z}-${c.x},${c.y},${c.z}`;return n.has(r)===!0||n.has(a)===!0?!1:(n.add(r),n.add(a),!0)}var k_=Object.freeze({__proto__:null,BoxGeometry:la,CapsuleGeometry:Oc,CircleGeometry:Bc,ConeGeometry:zc,CylinderGeometry:qa,DodecahedronGeometry:kc,EdgesGeometry:L_,ExtrudeGeometry:Wc,IcosahedronGeometry:Xc,LatheGeometry:pl,OctahedronGeometry:gl,PlaneGeometry:tl,PolyhedronGeometry:Os,RingGeometry:qc,ShapeGeometry:Yc,SphereGeometry:_l,TetrahedronGeometry:Zc,TorusGeometry:Kc,TorusKnotGeometry:$c,TubeGeometry:Jc,WireframeGeometry:B_});class G_ extends Gi{constructor(e){super(),this.isShadowMaterial=!0,this.type="ShadowMaterial",this.color=new At(0),this.transparent=!0,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.fog=e.fog,this}}class H_ extends ps{constructor(e){super(e),this.isRawShaderMaterial=!0,this.type="RawShaderMaterial"}}class Vd extends Gi{constructor(e){super(),this.isMeshStandardMaterial=!0,this.defines={STANDARD:""},this.type="MeshStandardMaterial",this.color=new At(16777215),this.roughness=1,this.metalness=0,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new At(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=ta,this.normalScale=new Je(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapIntensity=1,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.defines={STANDARD:""},this.color.copy(e.color),this.roughness=e.roughness,this.metalness=e.metalness,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.roughnessMap=e.roughnessMap,this.metalnessMap=e.metalnessMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapIntensity=e.envMapIntensity,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.flatShading=e.flatShading,this.fog=e.fog,this}}class V_ extends Vd{constructor(e){super(),this.isMeshPhysicalMaterial=!0,this.defines={STANDARD:"",PHYSICAL:""},this.type="MeshPhysicalMaterial",this.clearcoatMap=null,this.clearcoatRoughness=0,this.clearcoatRoughnessMap=null,this.clearcoatNormalScale=new Je(1,1),this.clearcoatNormalMap=null,this.ior=1.5,Object.defineProperty(this,"reflectivity",{get:function(){return hi(2.5*(this.ior-1)/(this.ior+1),0,1)},set:function(n){this.ior=(1+.4*n)/(1-.4*n)}}),this.iridescenceMap=null,this.iridescenceIOR=1.3,this.iridescenceThicknessRange=[100,400],this.iridescenceThicknessMap=null,this.sheenColor=new At(0),this.sheenColorMap=null,this.sheenRoughness=1,this.sheenRoughnessMap=null,this.transmissionMap=null,this.thickness=0,this.thicknessMap=null,this.attenuationDistance=1/0,this.attenuationColor=new At(1,1,1),this.specularIntensity=1,this.specularIntensityMap=null,this.specularColor=new At(1,1,1),this.specularColorMap=null,this._sheen=0,this._clearcoat=0,this._iridescence=0,this._transmission=0,this.setValues(e)}get sheen(){return this._sheen}set sheen(e){this._sheen>0!=e>0&&this.version++,this._sheen=e}get clearcoat(){return this._clearcoat}set clearcoat(e){this._clearcoat>0!=e>0&&this.version++,this._clearcoat=e}get iridescence(){return this._iridescence}set iridescence(e){this._iridescence>0!=e>0&&this.version++,this._iridescence=e}get transmission(){return this._transmission}set transmission(e){this._transmission>0!=e>0&&this.version++,this._transmission=e}copy(e){return super.copy(e),this.defines={STANDARD:"",PHYSICAL:""},this.clearcoat=e.clearcoat,this.clearcoatMap=e.clearcoatMap,this.clearcoatRoughness=e.clearcoatRoughness,this.clearcoatRoughnessMap=e.clearcoatRoughnessMap,this.clearcoatNormalMap=e.clearcoatNormalMap,this.clearcoatNormalScale.copy(e.clearcoatNormalScale),this.ior=e.ior,this.iridescence=e.iridescence,this.iridescenceMap=e.iridescenceMap,this.iridescenceIOR=e.iridescenceIOR,this.iridescenceThicknessRange=[...e.iridescenceThicknessRange],this.iridescenceThicknessMap=e.iridescenceThicknessMap,this.sheen=e.sheen,this.sheenColor.copy(e.sheenColor),this.sheenColorMap=e.sheenColorMap,this.sheenRoughness=e.sheenRoughness,this.sheenRoughnessMap=e.sheenRoughnessMap,this.transmission=e.transmission,this.transmissionMap=e.transmissionMap,this.thickness=e.thickness,this.thicknessMap=e.thicknessMap,this.attenuationDistance=e.attenuationDistance,this.attenuationColor.copy(e.attenuationColor),this.specularIntensity=e.specularIntensity,this.specularIntensityMap=e.specularIntensityMap,this.specularColor.copy(e.specularColor),this.specularColorMap=e.specularColorMap,this}}class W_ extends Gi{constructor(e){super(),this.isMeshPhongMaterial=!0,this.type="MeshPhongMaterial",this.color=new At(16777215),this.specular=new At(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new At(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=ta,this.normalScale=new Je(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=Wt,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.specular.copy(e.specular),this.shininess=e.shininess,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.flatShading=e.flatShading,this.fog=e.fog,this}}class X_ extends Gi{constructor(e){super(),this.isMeshToonMaterial=!0,this.defines={TOON:""},this.type="MeshToonMaterial",this.color=new At(16777215),this.map=null,this.gradientMap=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new At(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=ta,this.normalScale=new Je(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.gradientMap=e.gradientMap,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.alphaMap=e.alphaMap,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.fog=e.fog,this}}class q_ extends Gi{constructor(e){super(),this.isMeshNormalMaterial=!0,this.type="MeshNormalMaterial",this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=ta,this.normalScale=new Je(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.flatShading=!1,this.setValues(e)}copy(e){return super.copy(e),this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.flatShading=e.flatShading,this}}class Y_ extends Gi{constructor(e){super(),this.isMeshLambertMaterial=!0,this.type="MeshLambertMaterial",this.color=new At(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new At(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=ta,this.normalScale=new Je(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=Wt,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.flatShading=e.flatShading,this.fog=e.fog,this}}class Z_ extends Gi{constructor(e){super(),this.isMeshMatcapMaterial=!0,this.defines={MATCAP:""},this.type="MeshMatcapMaterial",this.color=new At(16777215),this.matcap=null,this.map=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=ta,this.normalScale=new Je(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.flatShading=!1,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.defines={MATCAP:""},this.color.copy(e.color),this.matcap=e.matcap,this.map=e.map,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.alphaMap=e.alphaMap,this.flatShading=e.flatShading,this.fog=e.fog,this}}class K_ extends Qi{constructor(e){super(),this.isLineDashedMaterial=!0,this.type="LineDashedMaterial",this.scale=1,this.dashSize=3,this.gapSize=1,this.setValues(e)}copy(e){return super.copy(e),this.scale=e.scale,this.dashSize=e.dashSize,this.gapSize=e.gapSize,this}}function Dr(c,e,n){return Wd(c)?new c.constructor(c.subarray(e,n!==void 0?n:c.length)):c.slice(e,n)}function Ka(c,e,n){return!c||!n&&c.constructor===e?c:typeof e.BYTES_PER_ELEMENT=="number"?new e(c):Array.prototype.slice.call(c)}function Wd(c){return ArrayBuffer.isView(c)&&!(c instanceof DataView)}function $_(c){function e(a,l){return c[a]-c[l]}const n=c.length,r=new Array(n);for(let a=0;a!==n;++a)r[a]=a;return r.sort(e),r}function Xd(c,e,n){const r=c.length,a=new c.constructor(r);for(let l=0,u=0;u!==r;++l){const d=n[l]*e;for(let g=0;g!==e;++g)a[u++]=c[d+g]}return a}function qd(c,e,n,r){let a=1,l=c[0];for(;l!==void 0&&l[r]===void 0;)l=c[a++];if(l===void 0)return;let u=l[r];if(u!==void 0)if(Array.isArray(u))do u=l[r],u!==void 0&&(e.push(l.time),n.push.apply(n,u)),l=c[a++];while(l!==void 0);else if(u.toArray!==void 0)do u=l[r],u!==void 0&&(e.push(l.time),u.toArray(n,n.length)),l=c[a++];while(l!==void 0);else do u=l[r],u!==void 0&&(e.push(l.time),n.push(u)),l=c[a++];while(l!==void 0)}function Yw(c,e,n,r,a=30){const l=c.clone();l.name=e;const u=[];for(let g=0;g<l.tracks.length;++g){const _=l.tracks[g],y=_.getValueSize(),S=[],E=[];for(let w=0;w<_.times.length;++w){const C=_.times[w]*a;if(!(C<n||C>=r)){S.push(_.times[w]);for(let I=0;I<y;++I)E.push(_.values[w*y+I])}}S.length!==0&&(_.times=Ka(S,_.times.constructor),_.values=Ka(E,_.values.constructor),u.push(_))}l.tracks=u;let d=1/0;for(let g=0;g<l.tracks.length;++g)d>l.tracks[g].times[0]&&(d=l.tracks[g].times[0]);for(let g=0;g<l.tracks.length;++g)l.tracks[g].shift(-1*d);return l.resetDuration(),l}function Zw(c,e=0,n=c,r=30){r<=0&&(r=30);const a=n.tracks.length,l=e/r;for(let u=0;u<a;++u){const d=n.tracks[u],g=d.ValueTypeName;if(g==="bool"||g==="string")continue;const _=c.tracks.find(function(A){return A.name===d.name&&A.ValueTypeName===g});if(_===void 0)continue;let y=0;const S=d.getValueSize();d.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(y=S/3);let E=0;const w=_.getValueSize();_.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(E=w/3);const C=d.times.length-1;let I;if(l<=d.times[0]){const A=y,z=S-y;I=Dr(d.values,A,z)}else if(l>=d.times[C]){const A=C*S+y,z=A+S-y;I=Dr(d.values,A,z)}else{const A=d.createInterpolant(),z=y,F=S-y;A.evaluate(l),I=Dr(A.resultBuffer,z,F)}g==="quaternion"&&new or().fromArray(I).normalize().conjugate().toArray(I);const U=_.times.length;for(let A=0;A<U;++A){const z=A*w+E;if(g==="quaternion")or.multiplyQuaternionsFlat(_.values,z,I,0,_.values,z);else{const F=w-E*2;for(let k=0;k<F;++k)_.values[z+k]-=I[k]}}}return c.blendMode=Hf,c}const Kw={arraySlice:Dr,convertArray:Ka,isTypedArray:Wd,getKeyframeOrder:$_,sortedArray:Xd,flattenJSON:qd,subclip:Yw,makeClipAdditive:Zw};class jc{constructor(e,n,r,a){this.parameterPositions=e,this._cachedIndex=0,this.resultBuffer=a!==void 0?a:new n.constructor(r),this.sampleValues=n,this.valueSize=r,this.settings=null,this.DefaultSettings_={}}evaluate(e){const n=this.parameterPositions;let r=this._cachedIndex,a=n[r],l=n[r-1];e:{t:{let u;n:{i:if(!(e<a)){for(let d=r+2;;){if(a===void 0){if(e<l)break i;return r=n.length,this._cachedIndex=r,this.copySampleValue_(r-1)}if(r===d)break;if(l=a,a=n[++r],e<a)break t}u=n.length;break n}if(!(e>=l)){const d=n[1];e<d&&(r=2,l=d);for(let g=r-2;;){if(l===void 0)return this._cachedIndex=0,this.copySampleValue_(0);if(r===g)break;if(a=l,l=n[--r-1],e>=l)break t}u=r,r=0;break n}break e}for(;r<u;){const d=r+u>>>1;e<n[d]?u=d:r=d+1}if(a=n[r],l=n[r-1],l===void 0)return this._cachedIndex=0,this.copySampleValue_(0);if(a===void 0)return r=n.length,this._cachedIndex=r,this.copySampleValue_(r-1)}this._cachedIndex=r,this.intervalChanged_(r,l,a)}return this.interpolate_(r,l,e,a)}getSettings_(){return this.settings||this.DefaultSettings_}copySampleValue_(e){const n=this.resultBuffer,r=this.sampleValues,a=this.valueSize,l=e*a;for(let u=0;u!==a;++u)n[u]=r[l+u];return n}interpolate_(){throw new Error("call to abstract method")}intervalChanged_(){}}class J_ extends jc{constructor(e,n,r,a){super(e,n,r,a),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0,this.DefaultSettings_={endingStart:Fa,endingEnd:Fa}}intervalChanged_(e,n,r){const a=this.parameterPositions;let l=e-2,u=e+1,d=a[l],g=a[u];if(d===void 0)switch(this.getSettings_().endingStart){case Oa:l=e,d=2*n-r;break;case mc:l=a.length-2,d=n+a[l]-a[l+1];break;default:l=e,d=r}if(g===void 0)switch(this.getSettings_().endingEnd){case Oa:u=e,g=2*r-n;break;case mc:u=1,g=r+a[1]-a[0];break;default:u=e-1,g=n}const _=(r-n)*.5,y=this.valueSize;this._weightPrev=_/(n-d),this._weightNext=_/(g-r),this._offsetPrev=l*y,this._offsetNext=u*y}interpolate_(e,n,r,a){const l=this.resultBuffer,u=this.sampleValues,d=this.valueSize,g=e*d,_=g-d,y=this._offsetPrev,S=this._offsetNext,E=this._weightPrev,w=this._weightNext,C=(r-n)/(a-n),I=C*C,U=I*C,A=-E*U+2*E*I-E*C,z=(1+E)*U+(-1.5-2*E)*I+(-.5+E)*C+1,F=(-1-w)*U+(1.5+w)*I+.5*C,k=w*U-w*I;for(let Y=0;Y!==d;++Y)l[Y]=A*u[y+Y]+z*u[_+Y]+F*u[g+Y]+k*u[S+Y];return l}}class Yd extends jc{constructor(e,n,r,a){super(e,n,r,a)}interpolate_(e,n,r,a){const l=this.resultBuffer,u=this.sampleValues,d=this.valueSize,g=e*d,_=g-d,y=(r-n)/(a-n),S=1-y;for(let E=0;E!==d;++E)l[E]=u[_+E]*S+u[g+E]*y;return l}}class j_ extends jc{constructor(e,n,r,a){super(e,n,r,a)}interpolate_(e){return this.copySampleValue_(e-1)}}class ts{constructor(e,n,r,a){if(e===void 0)throw new Error("THREE.KeyframeTrack: track name is undefined");if(n===void 0||n.length===0)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+e);this.name=e,this.times=Ka(n,this.TimeBufferType),this.values=Ka(r,this.ValueBufferType),this.setInterpolation(a||this.DefaultInterpolation)}static toJSON(e){const n=e.constructor;let r;if(n.toJSON!==this.toJSON)r=n.toJSON(e);else{r={name:e.name,times:Ka(e.times,Array),values:Ka(e.values,Array)};const a=e.getInterpolation();a!==e.DefaultInterpolation&&(r.interpolation=a)}return r.type=e.ValueTypeName,r}InterpolantFactoryMethodDiscrete(e){return new j_(this.times,this.values,this.getValueSize(),e)}InterpolantFactoryMethodLinear(e){return new Yd(this.times,this.values,this.getValueSize(),e)}InterpolantFactoryMethodSmooth(e){return new J_(this.times,this.values,this.getValueSize(),e)}setInterpolation(e){let n;switch(e){case dc:n=this.InterpolantFactoryMethodDiscrete;break;case pc:n=this.InterpolantFactoryMethodLinear;break;case Fh:n=this.InterpolantFactoryMethodSmooth;break}if(n===void 0){const r="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(this.createInterpolant===void 0)if(e!==this.DefaultInterpolation)this.setInterpolation(this.DefaultInterpolation);else throw new Error(r);return console.warn("THREE.KeyframeTrack:",r),this}return this.createInterpolant=n,this}getInterpolation(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return dc;case this.InterpolantFactoryMethodLinear:return pc;case this.InterpolantFactoryMethodSmooth:return Fh}}getValueSize(){return this.values.length/this.times.length}shift(e){if(e!==0){const n=this.times;for(let r=0,a=n.length;r!==a;++r)n[r]+=e}return this}scale(e){if(e!==1){const n=this.times;for(let r=0,a=n.length;r!==a;++r)n[r]*=e}return this}trim(e,n){const r=this.times,a=r.length;let l=0,u=a-1;for(;l!==a&&r[l]<e;)++l;for(;u!==-1&&r[u]>n;)--u;if(++u,l!==0||u!==a){l>=u&&(u=Math.max(u,1),l=u-1);const d=this.getValueSize();this.times=Dr(r,l,u),this.values=Dr(this.values,l*d,u*d)}return this}validate(){let e=!0;const n=this.getValueSize();n-Math.floor(n)!==0&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),e=!1);const r=this.times,a=this.values,l=r.length;l===0&&(console.error("THREE.KeyframeTrack: Track is empty.",this),e=!1);let u=null;for(let d=0;d!==l;d++){const g=r[d];if(typeof g=="number"&&isNaN(g)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,d,g),e=!1;break}if(u!==null&&u>g){console.error("THREE.KeyframeTrack: Out of order keys.",this,d,g,u),e=!1;break}u=g}if(a!==void 0&&Wd(a))for(let d=0,g=a.length;d!==g;++d){const _=a[d];if(isNaN(_)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,d,_),e=!1;break}}return e}optimize(){const e=Dr(this.times),n=Dr(this.values),r=this.getValueSize(),a=this.getInterpolation()===Fh,l=e.length-1;let u=1;for(let d=1;d<l;++d){let g=!1;const _=e[d],y=e[d+1];if(_!==y&&(d!==1||_!==e[0]))if(a)g=!0;else{const S=d*r,E=S-r,w=S+r;for(let C=0;C!==r;++C){const I=n[S+C];if(I!==n[E+C]||I!==n[w+C]){g=!0;break}}}if(g){if(d!==u){e[u]=e[d];const S=d*r,E=u*r;for(let w=0;w!==r;++w)n[E+w]=n[S+w]}++u}}if(l>0){e[u]=e[l];for(let d=l*r,g=u*r,_=0;_!==r;++_)n[g+_]=n[d+_];++u}return u!==e.length?(this.times=Dr(e,0,u),this.values=Dr(n,0,u*r)):(this.times=e,this.values=n),this}clone(){const e=Dr(this.times,0),n=Dr(this.values,0),r=this.constructor,a=new r(this.name,e,n);return a.createInterpolant=this.createInterpolant,a}}ts.prototype.TimeBufferType=Float32Array,ts.prototype.ValueBufferType=Float32Array,ts.prototype.DefaultInterpolation=pc;class $a extends ts{}$a.prototype.ValueTypeName="bool",$a.prototype.ValueBufferType=Array,$a.prototype.DefaultInterpolation=dc,$a.prototype.InterpolantFactoryMethodLinear=void 0,$a.prototype.InterpolantFactoryMethodSmooth=void 0;class Zd extends ts{}Zd.prototype.ValueTypeName="color";class Qc extends ts{}Qc.prototype.ValueTypeName="number";class Q_ extends jc{constructor(e,n,r,a){super(e,n,r,a)}interpolate_(e,n,r,a){const l=this.resultBuffer,u=this.sampleValues,d=this.valueSize,g=(r-n)/(a-n);let _=e*d;for(let y=_+d;_!==y;_+=4)or.slerpFlat(l,0,u,_-d,u,_,g);return l}}class xl extends ts{InterpolantFactoryMethodLinear(e){return new Q_(this.times,this.values,this.getValueSize(),e)}}xl.prototype.ValueTypeName="quaternion",xl.prototype.DefaultInterpolation=pc,xl.prototype.InterpolantFactoryMethodSmooth=void 0;class Ja extends ts{}Ja.prototype.ValueTypeName="string",Ja.prototype.ValueBufferType=Array,Ja.prototype.DefaultInterpolation=dc,Ja.prototype.InterpolantFactoryMethodLinear=void 0,Ja.prototype.InterpolantFactoryMethodSmooth=void 0;class eh extends ts{}eh.prototype.ValueTypeName="vector";class th{constructor(e,n=-1,r,a=Oh){this.name=e,this.tracks=r,this.duration=n,this.blendMode=a,this.uuid=xr(),this.duration<0&&this.resetDuration()}static parse(e){const n=[],r=e.tracks,a=1/(e.fps||1);for(let u=0,d=r.length;u!==d;++u)n.push(Jw(r[u]).scale(a));const l=new this(e.name,e.duration,n,e.blendMode);return l.uuid=e.uuid,l}static toJSON(e){const n=[],r=e.tracks,a={name:e.name,duration:e.duration,tracks:n,uuid:e.uuid,blendMode:e.blendMode};for(let l=0,u=r.length;l!==u;++l)n.push(ts.toJSON(r[l]));return a}static CreateFromMorphTargetSequence(e,n,r,a){const l=n.length,u=[];for(let d=0;d<l;d++){let g=[],_=[];g.push((d+l-1)%l,d,(d+1)%l),_.push(0,1,0);const y=$_(g);g=Xd(g,1,y),_=Xd(_,1,y),!a&&g[0]===0&&(g.push(l),_.push(_[0])),u.push(new Qc(".morphTargetInfluences["+n[d].name+"]",g,_).scale(1/r))}return new this(e,-1,u)}static findByName(e,n){let r=e;if(!Array.isArray(e)){const a=e;r=a.geometry&&a.geometry.animations||a.animations}for(let a=0;a<r.length;a++)if(r[a].name===n)return r[a];return null}static CreateClipsFromMorphTargetSequences(e,n,r){const a={},l=/^([\w-]*?)([\d]+)$/;for(let d=0,g=e.length;d<g;d++){const _=e[d],y=_.name.match(l);if(y&&y.length>1){const S=y[1];let E=a[S];E||(a[S]=E=[]),E.push(_)}}const u=[];for(const d in a)u.push(this.CreateFromMorphTargetSequence(d,a[d],n,r));return u}static parseAnimation(e,n){if(!e)return console.error("THREE.AnimationClip: No animation in JSONLoader data."),null;const r=function(S,E,w,C,I){if(w.length!==0){const U=[],A=[];qd(w,U,A,C),U.length!==0&&I.push(new S(E,U,A))}},a=[],l=e.name||"default",u=e.fps||30,d=e.blendMode;let g=e.length||-1;const _=e.hierarchy||[];for(let S=0;S<_.length;S++){const E=_[S].keys;if(!(!E||E.length===0))if(E[0].morphTargets){const w={};let C;for(C=0;C<E.length;C++)if(E[C].morphTargets)for(let I=0;I<E[C].morphTargets.length;I++)w[E[C].morphTargets[I]]=-1;for(const I in w){const U=[],A=[];for(let z=0;z!==E[C].morphTargets.length;++z){const F=E[C];U.push(F.time),A.push(F.morphTarget===I?1:0)}a.push(new Qc(".morphTargetInfluence["+I+"]",U,A))}g=w.length*u}else{const w=".bones["+n[S].name+"]";r(eh,w+".position",E,"pos",a),r(xl,w+".quaternion",E,"rot",a),r(eh,w+".scale",E,"scl",a)}}return a.length===0?null:new this(l,g,a,d)}resetDuration(){const e=this.tracks;let n=0;for(let r=0,a=e.length;r!==a;++r){const l=this.tracks[r];n=Math.max(n,l.times[l.times.length-1])}return this.duration=n,this}trim(){for(let e=0;e<this.tracks.length;e++)this.tracks[e].trim(0,this.duration);return this}validate(){let e=!0;for(let n=0;n<this.tracks.length;n++)e=e&&this.tracks[n].validate();return e}optimize(){for(let e=0;e<this.tracks.length;e++)this.tracks[e].optimize();return this}clone(){const e=[];for(let n=0;n<this.tracks.length;n++)e.push(this.tracks[n].clone());return new this.constructor(this.name,this.duration,e,this.blendMode)}toJSON(){return this.constructor.toJSON(this)}}function $w(c){switch(c.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return Qc;case"vector":case"vector2":case"vector3":case"vector4":return eh;case"color":return Zd;case"quaternion":return xl;case"bool":case"boolean":return $a;case"string":return Ja}throw new Error("THREE.KeyframeTrack: Unsupported typeName: "+c)}function Jw(c){if(c.type===void 0)throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");const e=$w(c.type);if(c.times===void 0){const n=[],r=[];qd(c.keys,n,r,"value"),c.times=n,c.values=r}return e.parse!==void 0?e.parse(c):new e(c.name,c.times,c.values,c.interpolation)}const ja={enabled:!1,files:{},add:function(c,e){this.enabled!==!1&&(this.files[c]=e)},get:function(c){if(this.enabled!==!1)return this.files[c]},remove:function(c){delete this.files[c]},clear:function(){this.files={}}};class Kd{constructor(e,n,r){const a=this;let l=!1,u=0,d=0,g;const _=[];this.onStart=void 0,this.onLoad=e,this.onProgress=n,this.onError=r,this.itemStart=function(y){d++,l===!1&&a.onStart!==void 0&&a.onStart(y,u,d),l=!0},this.itemEnd=function(y){u++,a.onProgress!==void 0&&a.onProgress(y,u,d),u===d&&(l=!1,a.onLoad!==void 0&&a.onLoad())},this.itemError=function(y){a.onError!==void 0&&a.onError(y)},this.resolveURL=function(y){return g?g(y):y},this.setURLModifier=function(y){return g=y,this},this.addHandler=function(y,S){return _.push(y,S),this},this.removeHandler=function(y){const S=_.indexOf(y);return S!==-1&&_.splice(S,2),this},this.getHandler=function(y){for(let S=0,E=_.length;S<E;S+=2){const w=_[S],C=_[S+1];if(w.global&&(w.lastIndex=0),w.test(y))return C}return null}}}const e0=new Kd;class Sr{constructor(e){this.manager=e!==void 0?e:e0,this.crossOrigin="anonymous",this.withCredentials=!1,this.path="",this.resourcePath="",this.requestHeader={}}load(){}loadAsync(e,n){const r=this;return new Promise(function(a,l){r.load(e,a,n,l)})}parse(){}setCrossOrigin(e){return this.crossOrigin=e,this}setWithCredentials(e){return this.withCredentials=e,this}setPath(e){return this.path=e,this}setResourcePath(e){return this.resourcePath=e,this}setRequestHeader(e){return this.requestHeader=e,this}}const Bs={};class jw extends Error{constructor(e,n){super(e),this.response=n}}class zs extends Sr{constructor(e){super(e)}load(e,n,r,a){e===void 0&&(e=""),this.path!==void 0&&(e=this.path+e),e=this.manager.resolveURL(e);const l=ja.get(e);if(l!==void 0)return this.manager.itemStart(e),setTimeout(()=>{n&&n(l),this.manager.itemEnd(e)},0),l;if(Bs[e]!==void 0){Bs[e].push({onLoad:n,onProgress:r,onError:a});return}Bs[e]=[],Bs[e].push({onLoad:n,onProgress:r,onError:a});const u=new Request(e,{headers:new Headers(this.requestHeader),credentials:this.withCredentials?"include":"same-origin"}),d=this.mimeType,g=this.responseType;fetch(u).then(_=>{if(_.status===200||_.status===0){if(_.status===0&&console.warn("THREE.FileLoader: HTTP Status 0 received."),typeof ReadableStream>"u"||_.body===void 0||_.body.getReader===void 0)return _;const y=Bs[e],S=_.body.getReader(),E=_.headers.get("Content-Length")||_.headers.get("X-File-Size"),w=E?parseInt(E):0,C=w!==0;let I=0;const U=new ReadableStream({start(A){z();function z(){S.read().then(({done:F,value:k})=>{if(F)A.close();else{I+=k.byteLength;const Y=new ProgressEvent("progress",{lengthComputable:C,loaded:I,total:w});for(let K=0,se=y.length;K<se;K++){const le=y[K];le.onProgress&&le.onProgress(Y)}A.enqueue(k),z()}})}}});return new Response(U)}else throw new jw(`fetch for "${_.url}" responded with ${_.status}: ${_.statusText}`,_)}).then(_=>{switch(g){case"arraybuffer":return _.arrayBuffer();case"blob":return _.blob();case"document":return _.text().then(y=>new DOMParser().parseFromString(y,d));case"json":return _.json();default:if(d===void 0)return _.text();{const S=/charset="?([^;"\s]*)"?/i.exec(d),E=S&&S[1]?S[1].toLowerCase():void 0,w=new TextDecoder(E);return _.arrayBuffer().then(C=>w.decode(C))}}}).then(_=>{ja.add(e,_);const y=Bs[e];delete Bs[e];for(let S=0,E=y.length;S<E;S++){const w=y[S];w.onLoad&&w.onLoad(_)}}).catch(_=>{const y=Bs[e];if(y===void 0)throw this.manager.itemError(e),_;delete Bs[e];for(let S=0,E=y.length;S<E;S++){const w=y[S];w.onError&&w.onError(_)}this.manager.itemError(e)}).finally(()=>{this.manager.itemEnd(e)}),this.manager.itemStart(e)}setResponseType(e){return this.responseType=e,this}setMimeType(e){return this.mimeType=e,this}}class Qw extends Sr{constructor(e){super(e)}load(e,n,r,a){const l=this,u=new zs(this.manager);u.setPath(this.path),u.setRequestHeader(this.requestHeader),u.setWithCredentials(this.withCredentials),u.load(e,function(d){try{n(l.parse(JSON.parse(d)))}catch(g){a?a(g):console.error(g),l.manager.itemError(e)}},r,a)}parse(e){const n=[];for(let r=0;r<e.length;r++){const a=th.parse(e[r]);n.push(a)}return n}}class eA extends Sr{constructor(e){super(e)}load(e,n,r,a){const l=this,u=[],d=new Pd,g=new zs(this.manager);g.setPath(this.path),g.setResponseType("arraybuffer"),g.setRequestHeader(this.requestHeader),g.setWithCredentials(l.withCredentials);let _=0;function y(S){g.load(e[S],function(E){const w=l.parse(E,!0);u[S]={width:w.width,height:w.height,format:w.format,mipmaps:w.mipmaps},_+=1,_===6&&(w.mipmapCount===1&&(d.minFilter=ft),d.image=u,d.format=w.format,d.needsUpdate=!0,n&&n(d))},r,a)}if(Array.isArray(e))for(let S=0,E=e.length;S<E;++S)y(S);else g.load(e,function(S){const E=l.parse(S,!0);if(E.isCubemap){const w=E.mipmaps.length/E.mipmapCount;for(let C=0;C<w;C++){u[C]={mipmaps:[]};for(let I=0;I<E.mipmapCount;I++)u[C].mipmaps.push(E.mipmaps[C*E.mipmapCount+I]),u[C].format=E.format,u[C].width=E.width,u[C].height=E.height}d.image=u}else d.image.width=E.width,d.image.height=E.height,d.mipmaps=E.mipmaps;E.mipmapCount===1&&(d.minFilter=ft),d.format=E.format,d.needsUpdate=!0,n&&n(d)},r,a);return d}}class nh extends Sr{constructor(e){super(e)}load(e,n,r,a){this.path!==void 0&&(e=this.path+e),e=this.manager.resolveURL(e);const l=this,u=ja.get(e);if(u!==void 0)return l.manager.itemStart(e),setTimeout(function(){n&&n(u),l.manager.itemEnd(e)},0),u;const d=xc("img");function g(){y(),ja.add(e,this),n&&n(this),l.manager.itemEnd(e)}function _(S){y(),a&&a(S),l.manager.itemError(e),l.manager.itemEnd(e)}function y(){d.removeEventListener("load",g,!1),d.removeEventListener("error",_,!1)}return d.addEventListener("load",g,!1),d.addEventListener("error",_,!1),e.slice(0,5)!=="data:"&&this.crossOrigin!==void 0&&(d.crossOrigin=this.crossOrigin),l.manager.itemStart(e),d.src=e,d}}class tA extends Sr{constructor(e){super(e)}load(e,n,r,a){const l=new Ac,u=new nh(this.manager);u.setCrossOrigin(this.crossOrigin),u.setPath(this.path);let d=0;function g(_){u.load(e[_],function(y){l.images[_]=y,d++,d===6&&(l.needsUpdate=!0,n&&n(l))},void 0,a)}for(let _=0;_<e.length;++_)g(_);return l}}class nA extends Sr{constructor(e){super(e)}load(e,n,r,a){const l=this,u=new ul,d=new zs(this.manager);return d.setResponseType("arraybuffer"),d.setRequestHeader(this.requestHeader),d.setPath(this.path),d.setWithCredentials(l.withCredentials),d.load(e,function(g){const _=l.parse(g);_&&(_.image!==void 0?u.image=_.image:_.data!==void 0&&(u.image.width=_.width,u.image.height=_.height,u.image.data=_.data),u.wrapS=_.wrapS!==void 0?_.wrapS:qe,u.wrapT=_.wrapT!==void 0?_.wrapT:qe,u.magFilter=_.magFilter!==void 0?_.magFilter:ft,u.minFilter=_.minFilter!==void 0?_.minFilter:ft,u.anisotropy=_.anisotropy!==void 0?_.anisotropy:1,_.colorSpace!==void 0?u.colorSpace=_.colorSpace:_.encoding!==void 0&&(u.encoding=_.encoding),_.flipY!==void 0&&(u.flipY=_.flipY),_.format!==void 0&&(u.format=_.format),_.type!==void 0&&(u.type=_.type),_.mipmaps!==void 0&&(u.mipmaps=_.mipmaps,u.minFilter=wt),_.mipmapCount===1&&(u.minFilter=ft),_.generateMipmaps!==void 0&&(u.generateMipmaps=_.generateMipmaps),u.needsUpdate=!0,n&&n(u,_))},r,a),u}}class iA extends Sr{constructor(e){super(e)}load(e,n,r,a){const l=new di,u=new nh(this.manager);return u.setCrossOrigin(this.crossOrigin),u.setPath(this.path),u.load(e,function(d){l.image=d,l.needsUpdate=!0,n!==void 0&&n(l)},r,a),l}}class ua extends Bn{constructor(e,n=1){super(),this.isLight=!0,this.type="Light",this.color=new At(e),this.intensity=n}dispose(){}copy(e,n){return super.copy(e,n),this.color.copy(e.color),this.intensity=e.intensity,this}toJSON(e){const n=super.toJSON(e);return n.object.color=this.color.getHex(),n.object.intensity=this.intensity,this.groundColor!==void 0&&(n.object.groundColor=this.groundColor.getHex()),this.distance!==void 0&&(n.object.distance=this.distance),this.angle!==void 0&&(n.object.angle=this.angle),this.decay!==void 0&&(n.object.decay=this.decay),this.penumbra!==void 0&&(n.object.penumbra=this.penumbra),this.shadow!==void 0&&(n.object.shadow=this.shadow.toJSON()),n}}class t0 extends ua{constructor(e,n,r){super(e,r),this.isHemisphereLight=!0,this.type="HemisphereLight",this.position.copy(Bn.DEFAULT_UP),this.updateMatrix(),this.groundColor=new At(n)}copy(e,n){return super.copy(e,n),this.groundColor.copy(e.groundColor),this}}const $d=new fn,n0=new j,i0=new j;class Jd{constructor(e){this.camera=e,this.bias=0,this.normalBias=0,this.radius=1,this.blurSamples=8,this.mapSize=new Je(512,512),this.map=null,this.mapPass=null,this.matrix=new fn,this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new ou,this._frameExtents=new Je(1,1),this._viewportCount=1,this._viewports=[new Hn(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(e){const n=this.camera,r=this.matrix;n0.setFromMatrixPosition(e.matrixWorld),n.position.copy(n0),i0.setFromMatrixPosition(e.target.matrixWorld),n.lookAt(i0),n.updateMatrixWorld(),$d.multiplyMatrices(n.projectionMatrix,n.matrixWorldInverse),this._frustum.setFromProjectionMatrix($d),r.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),r.multiply($d)}getViewport(e){return this._viewports[e]}getFrameExtents(){return this._frameExtents}dispose(){this.map&&this.map.dispose(),this.mapPass&&this.mapPass.dispose()}copy(e){return this.camera=e.camera.clone(),this.bias=e.bias,this.radius=e.radius,this.mapSize.copy(e.mapSize),this}clone(){return new this.constructor().copy(this)}toJSON(){const e={};return this.bias!==0&&(e.bias=this.bias),this.normalBias!==0&&(e.normalBias=this.normalBias),this.radius!==1&&(e.radius=this.radius),(this.mapSize.x!==512||this.mapSize.y!==512)&&(e.mapSize=this.mapSize.toArray()),e.camera=this.camera.toJSON(!1).object,delete e.camera.matrix,e}}class rA extends Jd{constructor(){super(new Fi(50,1,.5,500)),this.isSpotLightShadow=!0,this.focus=1}updateMatrices(e){const n=this.camera,r=Fo*2*e.angle*this.focus,a=this.mapSize.width/this.mapSize.height,l=e.distance||n.far;(r!==n.fov||a!==n.aspect||l!==n.far)&&(n.fov=r,n.aspect=a,n.far=l,n.updateProjectionMatrix()),super.updateMatrices(e)}copy(e){return super.copy(e),this.focus=e.focus,this}}class r0 extends ua{constructor(e,n,r=0,a=Math.PI/3,l=0,u=2){super(e,n),this.isSpotLight=!0,this.type="SpotLight",this.position.copy(Bn.DEFAULT_UP),this.updateMatrix(),this.target=new Bn,this.distance=r,this.angle=a,this.penumbra=l,this.decay=u,this.map=null,this.shadow=new rA}get power(){return this.intensity*Math.PI}set power(e){this.intensity=e/Math.PI}dispose(){this.shadow.dispose()}copy(e,n){return super.copy(e,n),this.distance=e.distance,this.angle=e.angle,this.penumbra=e.penumbra,this.decay=e.decay,this.target=e.target.clone(),this.shadow=e.shadow.clone(),this}}const s0=new fn,ih=new j,jd=new j;class sA extends Jd{constructor(){super(new Fi(90,1,.5,500)),this.isPointLightShadow=!0,this._frameExtents=new Je(4,2),this._viewportCount=6,this._viewports=[new Hn(2,1,1,1),new Hn(0,1,1,1),new Hn(3,1,1,1),new Hn(1,1,1,1),new Hn(3,0,1,1),new Hn(1,0,1,1)],this._cubeDirections=[new j(1,0,0),new j(-1,0,0),new j(0,0,1),new j(0,0,-1),new j(0,1,0),new j(0,-1,0)],this._cubeUps=[new j(0,1,0),new j(0,1,0),new j(0,1,0),new j(0,1,0),new j(0,0,1),new j(0,0,-1)]}updateMatrices(e,n=0){const r=this.camera,a=this.matrix,l=e.distance||r.far;l!==r.far&&(r.far=l,r.updateProjectionMatrix()),ih.setFromMatrixPosition(e.matrixWorld),r.position.copy(ih),jd.copy(r.position),jd.add(this._cubeDirections[n]),r.up.copy(this._cubeUps[n]),r.lookAt(jd),r.updateMatrixWorld(),a.makeTranslation(-ih.x,-ih.y,-ih.z),s0.multiplyMatrices(r.projectionMatrix,r.matrixWorldInverse),this._frustum.setFromProjectionMatrix(s0)}}class a0 extends ua{constructor(e,n,r=0,a=2){super(e,n),this.isPointLight=!0,this.type="PointLight",this.distance=r,this.decay=a,this.shadow=new sA}get power(){return this.intensity*4*Math.PI}set power(e){this.intensity=e/(4*Math.PI)}dispose(){this.shadow.dispose()}copy(e,n){return super.copy(e,n),this.distance=e.distance,this.decay=e.decay,this.shadow=e.shadow.clone(),this}}class aA extends Jd{constructor(){super(new cu(-5,5,5,-5,.5,500)),this.isDirectionalLightShadow=!0}}class o0 extends ua{constructor(e,n){super(e,n),this.isDirectionalLight=!0,this.type="DirectionalLight",this.position.copy(Bn.DEFAULT_UP),this.updateMatrix(),this.target=new Bn,this.shadow=new aA}dispose(){this.shadow.dispose()}copy(e){return super.copy(e),this.target=e.target.clone(),this.shadow=e.shadow.clone(),this}}class l0 extends ua{constructor(e,n){super(e,n),this.isAmbientLight=!0,this.type="AmbientLight"}}class c0 extends ua{constructor(e,n,r=10,a=10){super(e,n),this.isRectAreaLight=!0,this.type="RectAreaLight",this.width=r,this.height=a}get power(){return this.intensity*this.width*this.height*Math.PI}set power(e){this.intensity=e/(this.width*this.height*Math.PI)}copy(e){return super.copy(e),this.width=e.width,this.height=e.height,this}toJSON(e){const n=super.toJSON(e);return n.object.width=this.width,n.object.height=this.height,n}}class h0{constructor(){this.isSphericalHarmonics3=!0,this.coefficients=[];for(let e=0;e<9;e++)this.coefficients.push(new j)}set(e){for(let n=0;n<9;n++)this.coefficients[n].copy(e[n]);return this}zero(){for(let e=0;e<9;e++)this.coefficients[e].set(0,0,0);return this}getAt(e,n){const r=e.x,a=e.y,l=e.z,u=this.coefficients;return n.copy(u[0]).multiplyScalar(.282095),n.addScaledVector(u[1],.488603*a),n.addScaledVector(u[2],.488603*l),n.addScaledVector(u[3],.488603*r),n.addScaledVector(u[4],1.092548*(r*a)),n.addScaledVector(u[5],1.092548*(a*l)),n.addScaledVector(u[6],.315392*(3*l*l-1)),n.addScaledVector(u[7],1.092548*(r*l)),n.addScaledVector(u[8],.546274*(r*r-a*a)),n}getIrradianceAt(e,n){const r=e.x,a=e.y,l=e.z,u=this.coefficients;return n.copy(u[0]).multiplyScalar(.886227),n.addScaledVector(u[1],2*.511664*a),n.addScaledVector(u[2],2*.511664*l),n.addScaledVector(u[3],2*.511664*r),n.addScaledVector(u[4],2*.429043*r*a),n.addScaledVector(u[5],2*.429043*a*l),n.addScaledVector(u[6],.743125*l*l-.247708),n.addScaledVector(u[7],2*.429043*r*l),n.addScaledVector(u[8],.429043*(r*r-a*a)),n}add(e){for(let n=0;n<9;n++)this.coefficients[n].add(e.coefficients[n]);return this}addScaledSH(e,n){for(let r=0;r<9;r++)this.coefficients[r].addScaledVector(e.coefficients[r],n);return this}scale(e){for(let n=0;n<9;n++)this.coefficients[n].multiplyScalar(e);return this}lerp(e,n){for(let r=0;r<9;r++)this.coefficients[r].lerp(e.coefficients[r],n);return this}equals(e){for(let n=0;n<9;n++)if(!this.coefficients[n].equals(e.coefficients[n]))return!1;return!0}copy(e){return this.set(e.coefficients)}clone(){return new this.constructor().copy(this)}fromArray(e,n=0){const r=this.coefficients;for(let a=0;a<9;a++)r[a].fromArray(e,n+a*3);return this}toArray(e=[],n=0){const r=this.coefficients;for(let a=0;a<9;a++)r[a].toArray(e,n+a*3);return e}static getBasisAt(e,n){const r=e.x,a=e.y,l=e.z;n[0]=.282095,n[1]=.488603*a,n[2]=.488603*l,n[3]=.488603*r,n[4]=1.092548*r*a,n[5]=1.092548*a*l,n[6]=.315392*(3*l*l-1),n[7]=1.092548*r*l,n[8]=.546274*(r*r-a*a)}}class Iu extends ua{constructor(e=new h0,n=1){super(void 0,n),this.isLightProbe=!0,this.sh=e}copy(e){return super.copy(e),this.sh.copy(e.sh),this}fromJSON(e){return this.intensity=e.intensity,this.sh.fromArray(e.sh),this}toJSON(e){const n=super.toJSON(e);return n.object.sh=this.sh.toArray(),n}}class Nu extends Sr{constructor(e){super(e),this.textures={}}load(e,n,r,a){const l=this,u=new zs(l.manager);u.setPath(l.path),u.setRequestHeader(l.requestHeader),u.setWithCredentials(l.withCredentials),u.load(e,function(d){try{n(l.parse(JSON.parse(d)))}catch(g){a?a(g):console.error(g),l.manager.itemError(e)}},r,a)}parse(e){const n=this.textures;function r(l){return n[l]===void 0&&console.warn("THREE.MaterialLoader: Undefined texture",l),n[l]}const a=Nu.createMaterialFromType(e.type);if(e.uuid!==void 0&&(a.uuid=e.uuid),e.name!==void 0&&(a.name=e.name),e.color!==void 0&&a.color!==void 0&&a.color.setHex(e.color),e.roughness!==void 0&&(a.roughness=e.roughness),e.metalness!==void 0&&(a.metalness=e.metalness),e.sheen!==void 0&&(a.sheen=e.sheen),e.sheenColor!==void 0&&(a.sheenColor=new At().setHex(e.sheenColor)),e.sheenRoughness!==void 0&&(a.sheenRoughness=e.sheenRoughness),e.emissive!==void 0&&a.emissive!==void 0&&a.emissive.setHex(e.emissive),e.specular!==void 0&&a.specular!==void 0&&a.specular.setHex(e.specular),e.specularIntensity!==void 0&&(a.specularIntensity=e.specularIntensity),e.specularColor!==void 0&&a.specularColor!==void 0&&a.specularColor.setHex(e.specularColor),e.shininess!==void 0&&(a.shininess=e.shininess),e.clearcoat!==void 0&&(a.clearcoat=e.clearcoat),e.clearcoatRoughness!==void 0&&(a.clearcoatRoughness=e.clearcoatRoughness),e.iridescence!==void 0&&(a.iridescence=e.iridescence),e.iridescenceIOR!==void 0&&(a.iridescenceIOR=e.iridescenceIOR),e.iridescenceThicknessRange!==void 0&&(a.iridescenceThicknessRange=e.iridescenceThicknessRange),e.transmission!==void 0&&(a.transmission=e.transmission),e.thickness!==void 0&&(a.thickness=e.thickness),e.attenuationDistance!==void 0&&(a.attenuationDistance=e.attenuationDistance),e.attenuationColor!==void 0&&a.attenuationColor!==void 0&&a.attenuationColor.setHex(e.attenuationColor),e.fog!==void 0&&(a.fog=e.fog),e.flatShading!==void 0&&(a.flatShading=e.flatShading),e.blending!==void 0&&(a.blending=e.blending),e.combine!==void 0&&(a.combine=e.combine),e.side!==void 0&&(a.side=e.side),e.shadowSide!==void 0&&(a.shadowSide=e.shadowSide),e.opacity!==void 0&&(a.opacity=e.opacity),e.transparent!==void 0&&(a.transparent=e.transparent),e.alphaTest!==void 0&&(a.alphaTest=e.alphaTest),e.depthTest!==void 0&&(a.depthTest=e.depthTest),e.depthWrite!==void 0&&(a.depthWrite=e.depthWrite),e.colorWrite!==void 0&&(a.colorWrite=e.colorWrite),e.stencilWrite!==void 0&&(a.stencilWrite=e.stencilWrite),e.stencilWriteMask!==void 0&&(a.stencilWriteMask=e.stencilWriteMask),e.stencilFunc!==void 0&&(a.stencilFunc=e.stencilFunc),e.stencilRef!==void 0&&(a.stencilRef=e.stencilRef),e.stencilFuncMask!==void 0&&(a.stencilFuncMask=e.stencilFuncMask),e.stencilFail!==void 0&&(a.stencilFail=e.stencilFail),e.stencilZFail!==void 0&&(a.stencilZFail=e.stencilZFail),e.stencilZPass!==void 0&&(a.stencilZPass=e.stencilZPass),e.wireframe!==void 0&&(a.wireframe=e.wireframe),e.wireframeLinewidth!==void 0&&(a.wireframeLinewidth=e.wireframeLinewidth),e.wireframeLinecap!==void 0&&(a.wireframeLinecap=e.wireframeLinecap),e.wireframeLinejoin!==void 0&&(a.wireframeLinejoin=e.wireframeLinejoin),e.rotation!==void 0&&(a.rotation=e.rotation),e.linewidth!==1&&(a.linewidth=e.linewidth),e.dashSize!==void 0&&(a.dashSize=e.dashSize),e.gapSize!==void 0&&(a.gapSize=e.gapSize),e.scale!==void 0&&(a.scale=e.scale),e.polygonOffset!==void 0&&(a.polygonOffset=e.polygonOffset),e.polygonOffsetFactor!==void 0&&(a.polygonOffsetFactor=e.polygonOffsetFactor),e.polygonOffsetUnits!==void 0&&(a.polygonOffsetUnits=e.polygonOffsetUnits),e.dithering!==void 0&&(a.dithering=e.dithering),e.alphaToCoverage!==void 0&&(a.alphaToCoverage=e.alphaToCoverage),e.premultipliedAlpha!==void 0&&(a.premultipliedAlpha=e.premultipliedAlpha),e.forceSinglePass!==void 0&&(a.forceSinglePass=e.forceSinglePass),e.visible!==void 0&&(a.visible=e.visible),e.toneMapped!==void 0&&(a.toneMapped=e.toneMapped),e.userData!==void 0&&(a.userData=e.userData),e.vertexColors!==void 0&&(typeof e.vertexColors=="number"?a.vertexColors=e.vertexColors>0:a.vertexColors=e.vertexColors),e.uniforms!==void 0)for(const l in e.uniforms){const u=e.uniforms[l];switch(a.uniforms[l]={},u.type){case"t":a.uniforms[l].value=r(u.value);break;case"c":a.uniforms[l].value=new At().setHex(u.value);break;case"v2":a.uniforms[l].value=new Je().fromArray(u.value);break;case"v3":a.uniforms[l].value=new j().fromArray(u.value);break;case"v4":a.uniforms[l].value=new Hn().fromArray(u.value);break;case"m3":a.uniforms[l].value=new wn().fromArray(u.value);break;case"m4":a.uniforms[l].value=new fn().fromArray(u.value);break;default:a.uniforms[l].value=u.value}}if(e.defines!==void 0&&(a.defines=e.defines),e.vertexShader!==void 0&&(a.vertexShader=e.vertexShader),e.fragmentShader!==void 0&&(a.fragmentShader=e.fragmentShader),e.glslVersion!==void 0&&(a.glslVersion=e.glslVersion),e.extensions!==void 0)for(const l in e.extensions)a.extensions[l]=e.extensions[l];if(e.lights!==void 0&&(a.lights=e.lights),e.clipping!==void 0&&(a.clipping=e.clipping),e.size!==void 0&&(a.size=e.size),e.sizeAttenuation!==void 0&&(a.sizeAttenuation=e.sizeAttenuation),e.map!==void 0&&(a.map=r(e.map)),e.matcap!==void 0&&(a.matcap=r(e.matcap)),e.alphaMap!==void 0&&(a.alphaMap=r(e.alphaMap)),e.bumpMap!==void 0&&(a.bumpMap=r(e.bumpMap)),e.bumpScale!==void 0&&(a.bumpScale=e.bumpScale),e.normalMap!==void 0&&(a.normalMap=r(e.normalMap)),e.normalMapType!==void 0&&(a.normalMapType=e.normalMapType),e.normalScale!==void 0){let l=e.normalScale;Array.isArray(l)===!1&&(l=[l,l]),a.normalScale=new Je().fromArray(l)}return e.displacementMap!==void 0&&(a.displacementMap=r(e.displacementMap)),e.displacementScale!==void 0&&(a.displacementScale=e.displacementScale),e.displacementBias!==void 0&&(a.displacementBias=e.displacementBias),e.roughnessMap!==void 0&&(a.roughnessMap=r(e.roughnessMap)),e.metalnessMap!==void 0&&(a.metalnessMap=r(e.metalnessMap)),e.emissiveMap!==void 0&&(a.emissiveMap=r(e.emissiveMap)),e.emissiveIntensity!==void 0&&(a.emissiveIntensity=e.emissiveIntensity),e.specularMap!==void 0&&(a.specularMap=r(e.specularMap)),e.specularIntensityMap!==void 0&&(a.specularIntensityMap=r(e.specularIntensityMap)),e.specularColorMap!==void 0&&(a.specularColorMap=r(e.specularColorMap)),e.envMap!==void 0&&(a.envMap=r(e.envMap)),e.envMapIntensity!==void 0&&(a.envMapIntensity=e.envMapIntensity),e.reflectivity!==void 0&&(a.reflectivity=e.reflectivity),e.refractionRatio!==void 0&&(a.refractionRatio=e.refractionRatio),e.lightMap!==void 0&&(a.lightMap=r(e.lightMap)),e.lightMapIntensity!==void 0&&(a.lightMapIntensity=e.lightMapIntensity),e.aoMap!==void 0&&(a.aoMap=r(e.aoMap)),e.aoMapIntensity!==void 0&&(a.aoMapIntensity=e.aoMapIntensity),e.gradientMap!==void 0&&(a.gradientMap=r(e.gradientMap)),e.clearcoatMap!==void 0&&(a.clearcoatMap=r(e.clearcoatMap)),e.clearcoatRoughnessMap!==void 0&&(a.clearcoatRoughnessMap=r(e.clearcoatRoughnessMap)),e.clearcoatNormalMap!==void 0&&(a.clearcoatNormalMap=r(e.clearcoatNormalMap)),e.clearcoatNormalScale!==void 0&&(a.clearcoatNormalScale=new Je().fromArray(e.clearcoatNormalScale)),e.iridescenceMap!==void 0&&(a.iridescenceMap=r(e.iridescenceMap)),e.iridescenceThicknessMap!==void 0&&(a.iridescenceThicknessMap=r(e.iridescenceThicknessMap)),e.transmissionMap!==void 0&&(a.transmissionMap=r(e.transmissionMap)),e.thicknessMap!==void 0&&(a.thicknessMap=r(e.thicknessMap)),e.sheenColorMap!==void 0&&(a.sheenColorMap=r(e.sheenColorMap)),e.sheenRoughnessMap!==void 0&&(a.sheenRoughnessMap=r(e.sheenRoughnessMap)),a}setTextures(e){return this.textures=e,this}static createMaterialFromType(e){const n={ShadowMaterial:G_,SpriteMaterial:bd,RawShaderMaterial:H_,ShaderMaterial:ps,PointsMaterial:Rd,MeshPhysicalMaterial:V_,MeshStandardMaterial:Vd,MeshPhongMaterial:W_,MeshToonMaterial:X_,MeshNormalMaterial:q_,MeshLambertMaterial:Y_,MeshDepthMaterial:Md,MeshDistanceMaterial:Sd,MeshBasicMaterial:oa,MeshMatcapMaterial:Z_,LineDashedMaterial:K_,LineBasicMaterial:Qi,Material:Gi};return new n[e]}}class Qd{static decodeText(e){if(typeof TextDecoder<"u")return new TextDecoder().decode(e);let n="";for(let r=0,a=e.length;r<a;r++)n+=String.fromCharCode(e[r]);try{return decodeURIComponent(escape(n))}catch{return n}}static extractUrlBase(e){const n=e.lastIndexOf("/");return n===-1?"./":e.slice(0,n+1)}static resolveURL(e,n){return typeof e!="string"||e===""?"":(/^https?:\/\//i.test(n)&&/^\//.test(e)&&(n=n.replace(/(^https?:\/\/[^\/]+).*/i,"$1")),/^(https?:)?\/\//i.test(e)||/^data:.*,.*$/i.test(e)||/^blob:.*$/i.test(e)?e:n+e)}}class u0 extends Mn{constructor(){super(),this.isInstancedBufferGeometry=!0,this.type="InstancedBufferGeometry",this.instanceCount=1/0}copy(e){return super.copy(e),this.instanceCount=e.instanceCount,this}toJSON(){const e=super.toJSON();return e.instanceCount=this.instanceCount,e.isInstancedBufferGeometry=!0,e}}class f0 extends Sr{constructor(e){super(e)}load(e,n,r,a){const l=this,u=new zs(l.manager);u.setPath(l.path),u.setRequestHeader(l.requestHeader),u.setWithCredentials(l.withCredentials),u.load(e,function(d){try{n(l.parse(JSON.parse(d)))}catch(g){a?a(g):console.error(g),l.manager.itemError(e)}},r,a)}parse(e){const n={},r={};function a(w,C){if(n[C]!==void 0)return n[C];const U=w.interleavedBuffers[C],A=l(w,U.buffer),z=Oo(U.type,A),F=new mu(z,U.stride);return F.uuid=U.uuid,n[C]=F,F}function l(w,C){if(r[C]!==void 0)return r[C];const U=w.arrayBuffers[C],A=new Uint32Array(U).buffer;return r[C]=A,A}const u=e.isInstancedBufferGeometry?new u0:new Mn,d=e.data.index;if(d!==void 0){const w=Oo(d.type,d.array);u.setIndex(new Xn(w,1))}const g=e.data.attributes;for(const w in g){const C=g[w];let I;if(C.isInterleavedBufferAttribute){const U=a(e.data,C.data);I=new Xa(U,C.itemSize,C.offset,C.normalized)}else{const U=Oo(C.type,C.array),A=C.isInstancedBufferAttribute?fl:Xn;I=new A(U,C.itemSize,C.normalized)}C.name!==void 0&&(I.name=C.name),C.usage!==void 0&&I.setUsage(C.usage),C.updateRange!==void 0&&(I.updateRange.offset=C.updateRange.offset,I.updateRange.count=C.updateRange.count),u.setAttribute(w,I)}const _=e.data.morphAttributes;if(_)for(const w in _){const C=_[w],I=[];for(let U=0,A=C.length;U<A;U++){const z=C[U];let F;if(z.isInterleavedBufferAttribute){const k=a(e.data,z.data);F=new Xa(k,z.itemSize,z.offset,z.normalized)}else{const k=Oo(z.type,z.array);F=new Xn(k,z.itemSize,z.normalized)}z.name!==void 0&&(F.name=z.name),I.push(F)}u.morphAttributes[w]=I}e.data.morphTargetsRelative&&(u.morphTargetsRelative=!0);const S=e.data.groups||e.data.drawcalls||e.data.offsets;if(S!==void 0)for(let w=0,C=S.length;w!==C;++w){const I=S[w];u.addGroup(I.start,I.count,I.materialIndex)}const E=e.data.boundingSphere;if(E!==void 0){const w=new j;E.center!==void 0&&w.fromArray(E.center),u.boundingSphere=new fs(w,E.radius)}return e.name&&(u.name=e.name),e.userData&&(u.userData=e.userData),u}}class oA extends Sr{constructor(e){super(e)}load(e,n,r,a){const l=this,u=this.path===""?Qd.extractUrlBase(e):this.path;this.resourcePath=this.resourcePath||u;const d=new zs(this.manager);d.setPath(this.path),d.setRequestHeader(this.requestHeader),d.setWithCredentials(this.withCredentials),d.load(e,function(g){let _=null;try{_=JSON.parse(g)}catch(S){a!==void 0&&a(S),console.error("THREE:ObjectLoader: Can't parse "+e+".",S.message);return}const y=_.metadata;if(y===void 0||y.type===void 0||y.type.toLowerCase()==="geometry"){a!==void 0&&a(new Error("THREE.ObjectLoader: Can't load "+e)),console.error("THREE.ObjectLoader: Can't load "+e);return}l.parse(_,n)},r,a)}async loadAsync(e,n){const r=this,a=this.path===""?Qd.extractUrlBase(e):this.path;this.resourcePath=this.resourcePath||a;const l=new zs(this.manager);l.setPath(this.path),l.setRequestHeader(this.requestHeader),l.setWithCredentials(this.withCredentials);const u=await l.loadAsync(e,n),d=JSON.parse(u),g=d.metadata;if(g===void 0||g.type===void 0||g.type.toLowerCase()==="geometry")throw new Error("THREE.ObjectLoader: Can't load "+e);return await r.parseAsync(d)}parse(e,n){const r=this.parseAnimations(e.animations),a=this.parseShapes(e.shapes),l=this.parseGeometries(e.geometries,a),u=this.parseImages(e.images,function(){n!==void 0&&n(_)}),d=this.parseTextures(e.textures,u),g=this.parseMaterials(e.materials,d),_=this.parseObject(e.object,l,g,d,r),y=this.parseSkeletons(e.skeletons,_);if(this.bindSkeletons(_,y),n!==void 0){let S=!1;for(const E in u)if(u[E].data instanceof HTMLImageElement){S=!0;break}S===!1&&n(_)}return _}async parseAsync(e){const n=this.parseAnimations(e.animations),r=this.parseShapes(e.shapes),a=this.parseGeometries(e.geometries,r),l=await this.parseImagesAsync(e.images),u=this.parseTextures(e.textures,l),d=this.parseMaterials(e.materials,u),g=this.parseObject(e.object,a,d,u,n),_=this.parseSkeletons(e.skeletons,g);return this.bindSkeletons(g,_),g}parseShapes(e){const n={};if(e!==void 0)for(let r=0,a=e.length;r<a;r++){const l=new Ya().fromJSON(e[r]);n[l.uuid]=l}return n}parseSkeletons(e,n){const r={},a={};if(n.traverse(function(l){l.isBone&&(a[l.uuid]=l)}),e!==void 0)for(let l=0,u=e.length;l<u;l++){const d=new yu().fromJSON(e[l],a);r[d.uuid]=d}return r}parseGeometries(e,n){const r={};if(e!==void 0){const a=new f0;for(let l=0,u=e.length;l<u;l++){let d;const g=e[l];switch(g.type){case"BufferGeometry":case"InstancedBufferGeometry":d=a.parse(g);break;default:g.type in k_?d=k_[g.type].fromJSON(g,n):console.warn(`THREE.ObjectLoader: Unsupported geometry type "${g.type}"`)}d.uuid=g.uuid,g.name!==void 0&&(d.name=g.name),g.userData!==void 0&&(d.userData=g.userData),r[g.uuid]=d}}return r}parseMaterials(e,n){const r={},a={};if(e!==void 0){const l=new Nu;l.setTextures(n);for(let u=0,d=e.length;u<d;u++){const g=e[u];r[g.uuid]===void 0&&(r[g.uuid]=l.parse(g)),a[g.uuid]=r[g.uuid]}}return a}parseAnimations(e){const n={};if(e!==void 0)for(let r=0;r<e.length;r++){const a=e[r],l=th.parse(a);n[l.uuid]=l}return n}parseImages(e,n){const r=this,a={};let l;function u(g){return r.manager.itemStart(g),l.load(g,function(){r.manager.itemEnd(g)},void 0,function(){r.manager.itemError(g),r.manager.itemEnd(g)})}function d(g){if(typeof g=="string"){const _=g,y=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(_)?_:r.resourcePath+_;return u(y)}else return g.data?{data:Oo(g.type,g.data),width:g.width,height:g.height}:null}if(e!==void 0&&e.length>0){const g=new Kd(n);l=new nh(g),l.setCrossOrigin(this.crossOrigin);for(let _=0,y=e.length;_<y;_++){const S=e[_],E=S.url;if(Array.isArray(E)){const w=[];for(let C=0,I=E.length;C<I;C++){const U=E[C],A=d(U);A!==null&&(A instanceof HTMLImageElement?w.push(A):w.push(new ul(A.data,A.width,A.height)))}a[S.uuid]=new za(w)}else{const w=d(S.url);a[S.uuid]=new za(w)}}}return a}async parseImagesAsync(e){const n=this,r={};let a;async function l(u){if(typeof u=="string"){const d=u,g=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(d)?d:n.resourcePath+d;return await a.loadAsync(g)}else return u.data?{data:Oo(u.type,u.data),width:u.width,height:u.height}:null}if(e!==void 0&&e.length>0){a=new nh(this.manager),a.setCrossOrigin(this.crossOrigin);for(let u=0,d=e.length;u<d;u++){const g=e[u],_=g.url;if(Array.isArray(_)){const y=[];for(let S=0,E=_.length;S<E;S++){const w=_[S],C=await l(w);C!==null&&(C instanceof HTMLImageElement?y.push(C):y.push(new ul(C.data,C.width,C.height)))}r[g.uuid]=new za(y)}else{const y=await l(g.url);r[g.uuid]=new za(y)}}}return r}parseTextures(e,n){function r(l,u){return typeof l=="number"?l:(console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.",l),u[l])}const a={};if(e!==void 0)for(let l=0,u=e.length;l<u;l++){const d=e[l];d.image===void 0&&console.warn('THREE.ObjectLoader: No "image" specified for',d.uuid),n[d.image]===void 0&&console.warn("THREE.ObjectLoader: Undefined image",d.image);const g=n[d.image],_=g.data;let y;Array.isArray(_)?(y=new Ac,_.length===6&&(y.needsUpdate=!0)):(_&&_.data?y=new ul:y=new di,_&&(y.needsUpdate=!0)),y.source=g,y.uuid=d.uuid,d.name!==void 0&&(y.name=d.name),d.mapping!==void 0&&(y.mapping=r(d.mapping,lA)),d.channel!==void 0&&(y.channel=d.channel),d.offset!==void 0&&y.offset.fromArray(d.offset),d.repeat!==void 0&&y.repeat.fromArray(d.repeat),d.center!==void 0&&y.center.fromArray(d.center),d.rotation!==void 0&&(y.rotation=d.rotation),d.wrap!==void 0&&(y.wrapS=r(d.wrap[0],d0),y.wrapT=r(d.wrap[1],d0)),d.format!==void 0&&(y.format=d.format),d.internalFormat!==void 0&&(y.internalFormat=d.internalFormat),d.type!==void 0&&(y.type=d.type),d.colorSpace!==void 0&&(y.colorSpace=d.colorSpace),d.encoding!==void 0&&(y.encoding=d.encoding),d.minFilter!==void 0&&(y.minFilter=r(d.minFilter,p0)),d.magFilter!==void 0&&(y.magFilter=r(d.magFilter,p0)),d.anisotropy!==void 0&&(y.anisotropy=d.anisotropy),d.flipY!==void 0&&(y.flipY=d.flipY),d.generateMipmaps!==void 0&&(y.generateMipmaps=d.generateMipmaps),d.premultiplyAlpha!==void 0&&(y.premultiplyAlpha=d.premultiplyAlpha),d.unpackAlignment!==void 0&&(y.unpackAlignment=d.unpackAlignment),d.userData!==void 0&&(y.userData=d.userData),a[d.uuid]=y}return a}parseObject(e,n,r,a,l){let u;function d(E){return n[E]===void 0&&console.warn("THREE.ObjectLoader: Undefined geometry",E),n[E]}function g(E){if(E!==void 0){if(Array.isArray(E)){const w=[];for(let C=0,I=E.length;C<I;C++){const U=E[C];r[U]===void 0&&console.warn("THREE.ObjectLoader: Undefined material",U),w.push(r[U])}return w}return r[E]===void 0&&console.warn("THREE.ObjectLoader: Undefined material",E),r[E]}}function _(E){return a[E]===void 0&&console.warn("THREE.ObjectLoader: Undefined texture",E),a[E]}let y,S;switch(e.type){case"Scene":u=new e_,e.background!==void 0&&(Number.isInteger(e.background)?u.background=new At(e.background):u.background=_(e.background)),e.environment!==void 0&&(u.environment=_(e.environment)),e.fog!==void 0&&(e.fog.type==="Fog"?u.fog=new pu(e.fog.color,e.fog.near,e.fog.far):e.fog.type==="FogExp2"&&(u.fog=new du(e.fog.color,e.fog.density))),e.backgroundBlurriness!==void 0&&(u.backgroundBlurriness=e.backgroundBlurriness),e.backgroundIntensity!==void 0&&(u.backgroundIntensity=e.backgroundIntensity);break;case"PerspectiveCamera":u=new Fi(e.fov,e.aspect,e.near,e.far),e.focus!==void 0&&(u.focus=e.focus),e.zoom!==void 0&&(u.zoom=e.zoom),e.filmGauge!==void 0&&(u.filmGauge=e.filmGauge),e.filmOffset!==void 0&&(u.filmOffset=e.filmOffset),e.view!==void 0&&(u.view=Object.assign({},e.view));break;case"OrthographicCamera":u=new cu(e.left,e.right,e.top,e.bottom,e.near,e.far),e.zoom!==void 0&&(u.zoom=e.zoom),e.view!==void 0&&(u.view=Object.assign({},e.view));break;case"AmbientLight":u=new l0(e.color,e.intensity);break;case"DirectionalLight":u=new o0(e.color,e.intensity);break;case"PointLight":u=new a0(e.color,e.intensity,e.distance,e.decay);break;case"RectAreaLight":u=new c0(e.color,e.intensity,e.width,e.height);break;case"SpotLight":u=new r0(e.color,e.intensity,e.distance,e.angle,e.penumbra,e.decay);break;case"HemisphereLight":u=new t0(e.color,e.groundColor,e.intensity);break;case"LightProbe":u=new Iu().fromJSON(e);break;case"SkinnedMesh":y=d(e.geometry),S=g(e.material),u=new u_(y,S),e.bindMode!==void 0&&(u.bindMode=e.bindMode),e.bindMatrix!==void 0&&u.bindMatrix.fromArray(e.bindMatrix),e.skeleton!==void 0&&(u.skeleton=e.skeleton);break;case"Mesh":y=d(e.geometry),S=g(e.material),u=new Ni(y,S);break;case"InstancedMesh":y=d(e.geometry),S=g(e.material);const E=e.count,w=e.instanceMatrix,C=e.instanceColor;u=new m_(y,S,E),u.instanceMatrix=new fl(new Float32Array(w.array),16),C!==void 0&&(u.instanceColor=new fl(new Float32Array(C.array),C.itemSize));break;case"LOD":u=new a_;break;case"Line":u=new ha(d(e.geometry),g(e.material));break;case"LineLoop":u=new M_(d(e.geometry),g(e.material));break;case"LineSegments":u=new ms(d(e.geometry),g(e.material));break;case"PointCloud":case"Points":u=new E_(d(e.geometry),g(e.material));break;case"Sprite":u=new r_(g(e.material));break;case"Group":u=new sl;break;case"Bone":u=new wd;break;default:u=new Bn}if(u.uuid=e.uuid,e.name!==void 0&&(u.name=e.name),e.matrix!==void 0?(u.matrix.fromArray(e.matrix),e.matrixAutoUpdate!==void 0&&(u.matrixAutoUpdate=e.matrixAutoUpdate),u.matrixAutoUpdate&&u.matrix.decompose(u.position,u.quaternion,u.scale)):(e.position!==void 0&&u.position.fromArray(e.position),e.rotation!==void 0&&u.rotation.fromArray(e.rotation),e.quaternion!==void 0&&u.quaternion.fromArray(e.quaternion),e.scale!==void 0&&u.scale.fromArray(e.scale)),e.up!==void 0&&u.up.fromArray(e.up),e.castShadow!==void 0&&(u.castShadow=e.castShadow),e.receiveShadow!==void 0&&(u.receiveShadow=e.receiveShadow),e.shadow&&(e.shadow.bias!==void 0&&(u.shadow.bias=e.shadow.bias),e.shadow.normalBias!==void 0&&(u.shadow.normalBias=e.shadow.normalBias),e.shadow.radius!==void 0&&(u.shadow.radius=e.shadow.radius),e.shadow.mapSize!==void 0&&u.shadow.mapSize.fromArray(e.shadow.mapSize),e.shadow.camera!==void 0&&(u.shadow.camera=this.parseObject(e.shadow.camera))),e.visible!==void 0&&(u.visible=e.visible),e.frustumCulled!==void 0&&(u.frustumCulled=e.frustumCulled),e.renderOrder!==void 0&&(u.renderOrder=e.renderOrder),e.userData!==void 0&&(u.userData=e.userData),e.layers!==void 0&&(u.layers.mask=e.layers),e.children!==void 0){const E=e.children;for(let w=0;w<E.length;w++)u.add(this.parseObject(E[w],n,r,a,l))}if(e.animations!==void 0){const E=e.animations;for(let w=0;w<E.length;w++){const C=E[w];u.animations.push(l[C])}}if(e.type==="LOD"){e.autoUpdate!==void 0&&(u.autoUpdate=e.autoUpdate);const E=e.levels;for(let w=0;w<E.length;w++){const C=E[w],I=u.getObjectByProperty("uuid",C.object);I!==void 0&&u.addLevel(I,C.distance,C.hysteresis)}}return u}bindSkeletons(e,n){Object.keys(n).length!==0&&e.traverse(function(r){if(r.isSkinnedMesh===!0&&r.skeleton!==void 0){const a=n[r.skeleton];a===void 0?console.warn("THREE.ObjectLoader: No skeleton found with UUID:",r.skeleton):r.bind(a,r.bindMatrix)}})}}const lA={UVMapping:$n,CubeReflectionMapping:dn,CubeRefractionMapping:Pn,EquirectangularReflectionMapping:li,EquirectangularRefractionMapping:ne,CubeUVReflectionMapping:X},d0={RepeatWrapping:Re,ClampToEdgeWrapping:qe,MirroredRepeatWrapping:it},p0={NearestFilter:st,NearestMipmapNearestFilter:ae,NearestMipmapLinearFilter:Ee,LinearFilter:ft,LinearMipmapNearestFilter:Nt,LinearMipmapLinearFilter:wt};class cA extends Sr{constructor(e){super(e),this.isImageBitmapLoader=!0,typeof createImageBitmap>"u"&&console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."),typeof fetch>"u"&&console.warn("THREE.ImageBitmapLoader: fetch() not supported."),this.options={premultiplyAlpha:"none"}}setOptions(e){return this.options=e,this}load(e,n,r,a){e===void 0&&(e=""),this.path!==void 0&&(e=this.path+e),e=this.manager.resolveURL(e);const l=this,u=ja.get(e);if(u!==void 0)return l.manager.itemStart(e),setTimeout(function(){n&&n(u),l.manager.itemEnd(e)},0),u;const d={};d.credentials=this.crossOrigin==="anonymous"?"same-origin":"include",d.headers=this.requestHeader,fetch(e,d).then(function(g){return g.blob()}).then(function(g){return createImageBitmap(g,Object.assign(l.options,{colorSpaceConversion:"none"}))}).then(function(g){ja.add(e,g),n&&n(g),l.manager.itemEnd(e)}).catch(function(g){a&&a(g),l.manager.itemError(e),l.manager.itemEnd(e)}),l.manager.itemStart(e)}}let Fu;class ep{static getContext(){return Fu===void 0&&(Fu=new(window.AudioContext||window.webkitAudioContext)),Fu}static setContext(e){Fu=e}}class hA extends Sr{constructor(e){super(e)}load(e,n,r,a){const l=this,u=new zs(this.manager);u.setResponseType("arraybuffer"),u.setPath(this.path),u.setRequestHeader(this.requestHeader),u.setWithCredentials(this.withCredentials),u.load(e,function(g){try{const _=g.slice(0);ep.getContext().decodeAudioData(_,function(S){n(S)},d)}catch(_){d(_)}},r,a);function d(g){a?a(g):console.error(g),l.manager.itemError(e)}}}class uA extends Iu{constructor(e,n,r=1){super(void 0,r),this.isHemisphereLightProbe=!0;const a=new At().set(e),l=new At().set(n),u=new j(a.r,a.g,a.b),d=new j(l.r,l.g,l.b),g=Math.sqrt(Math.PI),_=g*Math.sqrt(.75);this.sh.coefficients[0].copy(u).add(d).multiplyScalar(g),this.sh.coefficients[1].copy(u).sub(d).multiplyScalar(_)}}class fA extends Iu{constructor(e,n=1){super(void 0,n),this.isAmbientLightProbe=!0;const r=new At().set(e);this.sh.coefficients[0].set(r.r,r.g,r.b).multiplyScalar(2*Math.sqrt(Math.PI))}}const m0=new fn,g0=new fn,Qa=new fn;class dA{constructor(){this.type="StereoCamera",this.aspect=1,this.eyeSep=.064,this.cameraL=new Fi,this.cameraL.layers.enable(1),this.cameraL.matrixAutoUpdate=!1,this.cameraR=new Fi,this.cameraR.layers.enable(2),this.cameraR.matrixAutoUpdate=!1,this._cache={focus:null,fov:null,aspect:null,near:null,far:null,zoom:null,eyeSep:null}}update(e){const n=this._cache;if(n.focus!==e.focus||n.fov!==e.fov||n.aspect!==e.aspect*this.aspect||n.near!==e.near||n.far!==e.far||n.zoom!==e.zoom||n.eyeSep!==this.eyeSep){n.focus=e.focus,n.fov=e.fov,n.aspect=e.aspect*this.aspect,n.near=e.near,n.far=e.far,n.zoom=e.zoom,n.eyeSep=this.eyeSep,Qa.copy(e.projectionMatrix);const a=n.eyeSep/2,l=a*n.near/n.focus,u=n.near*Math.tan(Ba*n.fov*.5)/n.zoom;let d,g;g0.elements[12]=-a,m0.elements[12]=a,d=-u*n.aspect+l,g=u*n.aspect+l,Qa.elements[0]=2*n.near/(g-d),Qa.elements[8]=(g+d)/(g-d),this.cameraL.projectionMatrix.copy(Qa),d=-u*n.aspect-l,g=u*n.aspect-l,Qa.elements[0]=2*n.near/(g-d),Qa.elements[8]=(g+d)/(g-d),this.cameraR.projectionMatrix.copy(Qa)}this.cameraL.matrixWorld.copy(e.matrixWorld).multiply(g0),this.cameraR.matrixWorld.copy(e.matrixWorld).multiply(m0)}}class _0{constructor(e=!0){this.autoStart=e,this.startTime=0,this.oldTime=0,this.elapsedTime=0,this.running=!1}start(){this.startTime=x0(),this.oldTime=this.startTime,this.elapsedTime=0,this.running=!0}stop(){this.getElapsedTime(),this.running=!1,this.autoStart=!1}getElapsedTime(){return this.getDelta(),this.elapsedTime}getDelta(){let e=0;if(this.autoStart&&!this.running)return this.start(),0;if(this.running){const n=x0();e=(n-this.oldTime)/1e3,this.oldTime=n,this.elapsedTime+=e}return e}}function x0(){return(typeof performance>"u"?Date:performance).now()}const eo=new j,v0=new or,pA=new j,to=new j;class mA extends Bn{constructor(){super(),this.type="AudioListener",this.context=ep.getContext(),this.gain=this.context.createGain(),this.gain.connect(this.context.destination),this.filter=null,this.timeDelta=0,this._clock=new _0}getInput(){return this.gain}removeFilter(){return this.filter!==null&&(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination),this.gain.connect(this.context.destination),this.filter=null),this}getFilter(){return this.filter}setFilter(e){return this.filter!==null?(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination)):this.gain.disconnect(this.context.destination),this.filter=e,this.gain.connect(this.filter),this.filter.connect(this.context.destination),this}getMasterVolume(){return this.gain.gain.value}setMasterVolume(e){return this.gain.gain.setTargetAtTime(e,this.context.currentTime,.01),this}updateMatrixWorld(e){super.updateMatrixWorld(e);const n=this.context.listener,r=this.up;if(this.timeDelta=this._clock.getDelta(),this.matrixWorld.decompose(eo,v0,pA),to.set(0,0,-1).applyQuaternion(v0),n.positionX){const a=this.context.currentTime+this.timeDelta;n.positionX.linearRampToValueAtTime(eo.x,a),n.positionY.linearRampToValueAtTime(eo.y,a),n.positionZ.linearRampToValueAtTime(eo.z,a),n.forwardX.linearRampToValueAtTime(to.x,a),n.forwardY.linearRampToValueAtTime(to.y,a),n.forwardZ.linearRampToValueAtTime(to.z,a),n.upX.linearRampToValueAtTime(r.x,a),n.upY.linearRampToValueAtTime(r.y,a),n.upZ.linearRampToValueAtTime(r.z,a)}else n.setPosition(eo.x,eo.y,eo.z),n.setOrientation(to.x,to.y,to.z,r.x,r.y,r.z)}}class y0 extends Bn{constructor(e){super(),this.type="Audio",this.listener=e,this.context=e.context,this.gain=this.context.createGain(),this.gain.connect(e.getInput()),this.autoplay=!1,this.buffer=null,this.detune=0,this.loop=!1,this.loopStart=0,this.loopEnd=0,this.offset=0,this.duration=void 0,this.playbackRate=1,this.isPlaying=!1,this.hasPlaybackControl=!0,this.source=null,this.sourceType="empty",this._startedAt=0,this._progress=0,this._connected=!1,this.filters=[]}getOutput(){return this.gain}setNodeSource(e){return this.hasPlaybackControl=!1,this.sourceType="audioNode",this.source=e,this.connect(),this}setMediaElementSource(e){return this.hasPlaybackControl=!1,this.sourceType="mediaNode",this.source=this.context.createMediaElementSource(e),this.connect(),this}setMediaStreamSource(e){return this.hasPlaybackControl=!1,this.sourceType="mediaStreamNode",this.source=this.context.createMediaStreamSource(e),this.connect(),this}setBuffer(e){return this.buffer=e,this.sourceType="buffer",this.autoplay&&this.play(),this}play(e=0){if(this.isPlaying===!0){console.warn("THREE.Audio: Audio is already playing.");return}if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}this._startedAt=this.context.currentTime+e;const n=this.context.createBufferSource();return n.buffer=this.buffer,n.loop=this.loop,n.loopStart=this.loopStart,n.loopEnd=this.loopEnd,n.onended=this.onEnded.bind(this),n.start(this._startedAt,this._progress+this.offset,this.duration),this.isPlaying=!0,this.source=n,this.setDetune(this.detune),this.setPlaybackRate(this.playbackRate),this.connect()}pause(){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this.isPlaying===!0&&(this._progress+=Math.max(this.context.currentTime-this._startedAt,0)*this.playbackRate,this.loop===!0&&(this._progress=this._progress%(this.duration||this.buffer.duration)),this.source.stop(),this.source.onended=null,this.isPlaying=!1),this}stop(){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this._progress=0,this.source!==null&&(this.source.stop(),this.source.onended=null),this.isPlaying=!1,this}connect(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(let e=1,n=this.filters.length;e<n;e++)this.filters[e-1].connect(this.filters[e]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this._connected=!0,this}disconnect(){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(let e=1,n=this.filters.length;e<n;e++)this.filters[e-1].disconnect(this.filters[e]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this._connected=!1,this}getFilters(){return this.filters}setFilters(e){return e||(e=[]),this._connected===!0?(this.disconnect(),this.filters=e.slice(),this.connect()):this.filters=e.slice(),this}setDetune(e){if(this.detune=e,this.source.detune!==void 0)return this.isPlaying===!0&&this.source.detune.setTargetAtTime(this.detune,this.context.currentTime,.01),this}getDetune(){return this.detune}getFilter(){return this.getFilters()[0]}setFilter(e){return this.setFilters(e?[e]:[])}setPlaybackRate(e){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this.playbackRate=e,this.isPlaying===!0&&this.source.playbackRate.setTargetAtTime(this.playbackRate,this.context.currentTime,.01),this}getPlaybackRate(){return this.playbackRate}onEnded(){this.isPlaying=!1}getLoop(){return this.hasPlaybackControl===!1?(console.warn("THREE.Audio: this Audio has no playback control."),!1):this.loop}setLoop(e){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this.loop=e,this.isPlaying===!0&&(this.source.loop=this.loop),this}setLoopStart(e){return this.loopStart=e,this}setLoopEnd(e){return this.loopEnd=e,this}getVolume(){return this.gain.gain.value}setVolume(e){return this.gain.gain.setTargetAtTime(e,this.context.currentTime,.01),this}}const no=new j,M0=new or,gA=new j,io=new j;class _A extends y0{constructor(e){super(e),this.panner=this.context.createPanner(),this.panner.panningModel="HRTF",this.panner.connect(this.gain)}disconnect(){super.disconnect(),this.panner.disconnect(this.gain)}getOutput(){return this.panner}getRefDistance(){return this.panner.refDistance}setRefDistance(e){return this.panner.refDistance=e,this}getRolloffFactor(){return this.panner.rolloffFactor}setRolloffFactor(e){return this.panner.rolloffFactor=e,this}getDistanceModel(){return this.panner.distanceModel}setDistanceModel(e){return this.panner.distanceModel=e,this}getMaxDistance(){return this.panner.maxDistance}setMaxDistance(e){return this.panner.maxDistance=e,this}setDirectionalCone(e,n,r){return this.panner.coneInnerAngle=e,this.panner.coneOuterAngle=n,this.panner.coneOuterGain=r,this}updateMatrixWorld(e){if(super.updateMatrixWorld(e),this.hasPlaybackControl===!0&&this.isPlaying===!1)return;this.matrixWorld.decompose(no,M0,gA),io.set(0,0,1).applyQuaternion(M0);const n=this.panner;if(n.positionX){const r=this.context.currentTime+this.listener.timeDelta;n.positionX.linearRampToValueAtTime(no.x,r),n.positionY.linearRampToValueAtTime(no.y,r),n.positionZ.linearRampToValueAtTime(no.z,r),n.orientationX.linearRampToValueAtTime(io.x,r),n.orientationY.linearRampToValueAtTime(io.y,r),n.orientationZ.linearRampToValueAtTime(io.z,r)}else n.setPosition(no.x,no.y,no.z),n.setOrientation(io.x,io.y,io.z)}}class xA{constructor(e,n=2048){this.analyser=e.context.createAnalyser(),this.analyser.fftSize=n,this.data=new Uint8Array(this.analyser.frequencyBinCount),e.getOutput().connect(this.analyser)}getFrequencyData(){return this.analyser.getByteFrequencyData(this.data),this.data}getAverageFrequency(){let e=0;const n=this.getFrequencyData();for(let r=0;r<n.length;r++)e+=n[r];return e/n.length}}class S0{constructor(e,n,r){this.binding=e,this.valueSize=r;let a,l,u;switch(n){case"quaternion":a=this._slerp,l=this._slerpAdditive,u=this._setAdditiveIdentityQuaternion,this.buffer=new Float64Array(r*6),this._workIndex=5;break;case"string":case"bool":a=this._select,l=this._select,u=this._setAdditiveIdentityOther,this.buffer=new Array(r*5);break;default:a=this._lerp,l=this._lerpAdditive,u=this._setAdditiveIdentityNumeric,this.buffer=new Float64Array(r*5)}this._mixBufferRegion=a,this._mixBufferRegionAdditive=l,this._setIdentity=u,this._origIndex=3,this._addIndex=4,this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,this.useCount=0,this.referenceCount=0}accumulate(e,n){const r=this.buffer,a=this.valueSize,l=e*a+a;let u=this.cumulativeWeight;if(u===0){for(let d=0;d!==a;++d)r[l+d]=r[d];u=n}else{u+=n;const d=n/u;this._mixBufferRegion(r,l,0,d,a)}this.cumulativeWeight=u}accumulateAdditive(e){const n=this.buffer,r=this.valueSize,a=r*this._addIndex;this.cumulativeWeightAdditive===0&&this._setIdentity(),this._mixBufferRegionAdditive(n,a,0,e,r),this.cumulativeWeightAdditive+=e}apply(e){const n=this.valueSize,r=this.buffer,a=e*n+n,l=this.cumulativeWeight,u=this.cumulativeWeightAdditive,d=this.binding;if(this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,l<1){const g=n*this._origIndex;this._mixBufferRegion(r,a,g,1-l,n)}u>0&&this._mixBufferRegionAdditive(r,a,this._addIndex*n,1,n);for(let g=n,_=n+n;g!==_;++g)if(r[g]!==r[g+n]){d.setValue(r,a);break}}saveOriginalState(){const e=this.binding,n=this.buffer,r=this.valueSize,a=r*this._origIndex;e.getValue(n,a);for(let l=r,u=a;l!==u;++l)n[l]=n[a+l%r];this._setIdentity(),this.cumulativeWeight=0,this.cumulativeWeightAdditive=0}restoreOriginalState(){const e=this.valueSize*3;this.binding.setValue(this.buffer,e)}_setAdditiveIdentityNumeric(){const e=this._addIndex*this.valueSize,n=e+this.valueSize;for(let r=e;r<n;r++)this.buffer[r]=0}_setAdditiveIdentityQuaternion(){this._setAdditiveIdentityNumeric(),this.buffer[this._addIndex*this.valueSize+3]=1}_setAdditiveIdentityOther(){const e=this._origIndex*this.valueSize,n=this._addIndex*this.valueSize;for(let r=0;r<this.valueSize;r++)this.buffer[n+r]=this.buffer[e+r]}_select(e,n,r,a,l){if(a>=.5)for(let u=0;u!==l;++u)e[n+u]=e[r+u]}_slerp(e,n,r,a){or.slerpFlat(e,n,e,n,e,r,a)}_slerpAdditive(e,n,r,a,l){const u=this._workIndex*l;or.multiplyQuaternionsFlat(e,u,e,n,e,r),or.slerpFlat(e,n,e,n,e,u,a)}_lerp(e,n,r,a,l){const u=1-a;for(let d=0;d!==l;++d){const g=n+d;e[g]=e[g]*u+e[r+d]*a}}_lerpAdditive(e,n,r,a,l){for(let u=0;u!==l;++u){const d=n+u;e[d]=e[d]+e[r+u]*a}}}const tp="\\[\\]\\.:\\/",vA=new RegExp("["+tp+"]","g"),np="[^"+tp+"]",yA="[^"+tp.replace("\\.","")+"]",MA=/((?:WC+[\/:])*)/.source.replace("WC",np),SA=/(WCOD+)?/.source.replace("WCOD",yA),EA=/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC",np),bA=/\.(WC+)(?:\[(.+)\])?/.source.replace("WC",np),TA=new RegExp("^"+MA+SA+EA+bA+"$"),wA=["material","materials","bones","map"];class AA{constructor(e,n,r){const a=r||Fn.parseTrackName(n);this._targetGroup=e,this._bindings=e.subscribe_(n,a)}getValue(e,n){this.bind();const r=this._targetGroup.nCachedObjects_,a=this._bindings[r];a!==void 0&&a.getValue(e,n)}setValue(e,n){const r=this._bindings;for(let a=this._targetGroup.nCachedObjects_,l=r.length;a!==l;++a)r[a].setValue(e,n)}bind(){const e=this._bindings;for(let n=this._targetGroup.nCachedObjects_,r=e.length;n!==r;++n)e[n].bind()}unbind(){const e=this._bindings;for(let n=this._targetGroup.nCachedObjects_,r=e.length;n!==r;++n)e[n].unbind()}}class Fn{constructor(e,n,r){this.path=n,this.parsedPath=r||Fn.parseTrackName(n),this.node=Fn.findNode(e,this.parsedPath.nodeName),this.rootNode=e,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}static create(e,n,r){return e&&e.isAnimationObjectGroup?new Fn.Composite(e,n,r):new Fn(e,n,r)}static sanitizeNodeName(e){return e.replace(/\s/g,"_").replace(vA,"")}static parseTrackName(e){const n=TA.exec(e);if(n===null)throw new Error("PropertyBinding: Cannot parse trackName: "+e);const r={nodeName:n[2],objectName:n[3],objectIndex:n[4],propertyName:n[5],propertyIndex:n[6]},a=r.nodeName&&r.nodeName.lastIndexOf(".");if(a!==void 0&&a!==-1){const l=r.nodeName.substring(a+1);wA.indexOf(l)!==-1&&(r.nodeName=r.nodeName.substring(0,a),r.objectName=l)}if(r.propertyName===null||r.propertyName.length===0)throw new Error("PropertyBinding: can not parse propertyName from trackName: "+e);return r}static findNode(e,n){if(n===void 0||n===""||n==="."||n===-1||n===e.name||n===e.uuid)return e;if(e.skeleton){const r=e.skeleton.getBoneByName(n);if(r!==void 0)return r}if(e.children){const r=function(l){for(let u=0;u<l.length;u++){const d=l[u];if(d.name===n||d.uuid===n)return d;const g=r(d.children);if(g)return g}return null},a=r(e.children);if(a)return a}return null}_getValue_unavailable(){}_setValue_unavailable(){}_getValue_direct(e,n){e[n]=this.targetObject[this.propertyName]}_getValue_array(e,n){const r=this.resolvedProperty;for(let a=0,l=r.length;a!==l;++a)e[n++]=r[a]}_getValue_arrayElement(e,n){e[n]=this.resolvedProperty[this.propertyIndex]}_getValue_toArray(e,n){this.resolvedProperty.toArray(e,n)}_setValue_direct(e,n){this.targetObject[this.propertyName]=e[n]}_setValue_direct_setNeedsUpdate(e,n){this.targetObject[this.propertyName]=e[n],this.targetObject.needsUpdate=!0}_setValue_direct_setMatrixWorldNeedsUpdate(e,n){this.targetObject[this.propertyName]=e[n],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_array(e,n){const r=this.resolvedProperty;for(let a=0,l=r.length;a!==l;++a)r[a]=e[n++]}_setValue_array_setNeedsUpdate(e,n){const r=this.resolvedProperty;for(let a=0,l=r.length;a!==l;++a)r[a]=e[n++];this.targetObject.needsUpdate=!0}_setValue_array_setMatrixWorldNeedsUpdate(e,n){const r=this.resolvedProperty;for(let a=0,l=r.length;a!==l;++a)r[a]=e[n++];this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_arrayElement(e,n){this.resolvedProperty[this.propertyIndex]=e[n]}_setValue_arrayElement_setNeedsUpdate(e,n){this.resolvedProperty[this.propertyIndex]=e[n],this.targetObject.needsUpdate=!0}_setValue_arrayElement_setMatrixWorldNeedsUpdate(e,n){this.resolvedProperty[this.propertyIndex]=e[n],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_fromArray(e,n){this.resolvedProperty.fromArray(e,n)}_setValue_fromArray_setNeedsUpdate(e,n){this.resolvedProperty.fromArray(e,n),this.targetObject.needsUpdate=!0}_setValue_fromArray_setMatrixWorldNeedsUpdate(e,n){this.resolvedProperty.fromArray(e,n),this.targetObject.matrixWorldNeedsUpdate=!0}_getValue_unbound(e,n){this.bind(),this.getValue(e,n)}_setValue_unbound(e,n){this.bind(),this.setValue(e,n)}bind(){let e=this.node;const n=this.parsedPath,r=n.objectName,a=n.propertyName;let l=n.propertyIndex;if(e||(e=Fn.findNode(this.rootNode,n.nodeName),this.node=e),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,!e){console.error("THREE.PropertyBinding: Trying to update node for track: "+this.path+" but it wasn't found.");return}if(r){let _=n.objectIndex;switch(r){case"materials":if(!e.material){console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);return}if(!e.material.materials){console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);return}e=e.material.materials;break;case"bones":if(!e.skeleton){console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);return}e=e.skeleton.bones;for(let y=0;y<e.length;y++)if(e[y].name===_){_=y;break}break;case"map":if("map"in e){e=e.map;break}if(!e.material){console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);return}if(!e.material.map){console.error("THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.",this);return}e=e.material.map;break;default:if(e[r]===void 0){console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);return}e=e[r]}if(_!==void 0){if(e[_]===void 0){console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,e);return}e=e[_]}}const u=e[a];if(u===void 0){const _=n.nodeName;console.error("THREE.PropertyBinding: Trying to update property for track: "+_+"."+a+" but it wasn't found.",e);return}let d=this.Versioning.None;this.targetObject=e,e.needsUpdate!==void 0?d=this.Versioning.NeedsUpdate:e.matrixWorldNeedsUpdate!==void 0&&(d=this.Versioning.MatrixWorldNeedsUpdate);let g=this.BindingType.Direct;if(l!==void 0){if(a==="morphTargetInfluences"){if(!e.geometry){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);return}if(!e.geometry.morphAttributes){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);return}e.morphTargetDictionary[l]!==void 0&&(l=e.morphTargetDictionary[l])}g=this.BindingType.ArrayElement,this.resolvedProperty=u,this.propertyIndex=l}else u.fromArray!==void 0&&u.toArray!==void 0?(g=this.BindingType.HasFromToArray,this.resolvedProperty=u):Array.isArray(u)?(g=this.BindingType.EntireArray,this.resolvedProperty=u):this.propertyName=a;this.getValue=this.GetterByBindingType[g],this.setValue=this.SetterByBindingTypeAndVersioning[g][d]}unbind(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}}Fn.Composite=AA,Fn.prototype.BindingType={Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},Fn.prototype.Versioning={None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},Fn.prototype.GetterByBindingType=[Fn.prototype._getValue_direct,Fn.prototype._getValue_array,Fn.prototype._getValue_arrayElement,Fn.prototype._getValue_toArray],Fn.prototype.SetterByBindingTypeAndVersioning=[[Fn.prototype._setValue_direct,Fn.prototype._setValue_direct_setNeedsUpdate,Fn.prototype._setValue_direct_setMatrixWorldNeedsUpdate],[Fn.prototype._setValue_array,Fn.prototype._setValue_array_setNeedsUpdate,Fn.prototype._setValue_array_setMatrixWorldNeedsUpdate],[Fn.prototype._setValue_arrayElement,Fn.prototype._setValue_arrayElement_setNeedsUpdate,Fn.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate],[Fn.prototype._setValue_fromArray,Fn.prototype._setValue_fromArray_setNeedsUpdate,Fn.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];class RA{constructor(){this.isAnimationObjectGroup=!0,this.uuid=xr(),this._objects=Array.prototype.slice.call(arguments),this.nCachedObjects_=0;const e={};this._indicesByUUID=e;for(let r=0,a=arguments.length;r!==a;++r)e[arguments[r].uuid]=r;this._paths=[],this._parsedPaths=[],this._bindings=[],this._bindingsIndicesByPath={};const n=this;this.stats={objects:{get total(){return n._objects.length},get inUse(){return this.total-n.nCachedObjects_}},get bindingsPerObject(){return n._bindings.length}}}add(){const e=this._objects,n=this._indicesByUUID,r=this._paths,a=this._parsedPaths,l=this._bindings,u=l.length;let d,g=e.length,_=this.nCachedObjects_;for(let y=0,S=arguments.length;y!==S;++y){const E=arguments[y],w=E.uuid;let C=n[w];if(C===void 0){C=g++,n[w]=C,e.push(E);for(let I=0,U=u;I!==U;++I)l[I].push(new Fn(E,r[I],a[I]))}else if(C<_){d=e[C];const I=--_,U=e[I];n[U.uuid]=C,e[C]=U,n[w]=I,e[I]=E;for(let A=0,z=u;A!==z;++A){const F=l[A],k=F[I];let Y=F[C];F[C]=k,Y===void 0&&(Y=new Fn(E,r[A],a[A])),F[I]=Y}}else e[C]!==d&&console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.")}this.nCachedObjects_=_}remove(){const e=this._objects,n=this._indicesByUUID,r=this._bindings,a=r.length;let l=this.nCachedObjects_;for(let u=0,d=arguments.length;u!==d;++u){const g=arguments[u],_=g.uuid,y=n[_];if(y!==void 0&&y>=l){const S=l++,E=e[S];n[E.uuid]=y,e[y]=E,n[_]=S,e[S]=g;for(let w=0,C=a;w!==C;++w){const I=r[w],U=I[S],A=I[y];I[y]=U,I[S]=A}}}this.nCachedObjects_=l}uncache(){const e=this._objects,n=this._indicesByUUID,r=this._bindings,a=r.length;let l=this.nCachedObjects_,u=e.length;for(let d=0,g=arguments.length;d!==g;++d){const _=arguments[d],y=_.uuid,S=n[y];if(S!==void 0)if(delete n[y],S<l){const E=--l,w=e[E],C=--u,I=e[C];n[w.uuid]=S,e[S]=w,n[I.uuid]=E,e[E]=I,e.pop();for(let U=0,A=a;U!==A;++U){const z=r[U],F=z[E],k=z[C];z[S]=F,z[E]=k,z.pop()}}else{const E=--u,w=e[E];E>0&&(n[w.uuid]=S),e[S]=w,e.pop();for(let C=0,I=a;C!==I;++C){const U=r[C];U[S]=U[E],U.pop()}}}this.nCachedObjects_=l}subscribe_(e,n){const r=this._bindingsIndicesByPath;let a=r[e];const l=this._bindings;if(a!==void 0)return l[a];const u=this._paths,d=this._parsedPaths,g=this._objects,_=g.length,y=this.nCachedObjects_,S=new Array(_);a=l.length,r[e]=a,u.push(e),d.push(n),l.push(S);for(let E=y,w=g.length;E!==w;++E){const C=g[E];S[E]=new Fn(C,e,n)}return S}unsubscribe_(e){const n=this._bindingsIndicesByPath,r=n[e];if(r!==void 0){const a=this._paths,l=this._parsedPaths,u=this._bindings,d=u.length-1,g=u[d],_=e[d];n[_]=r,u[r]=g,u.pop(),l[r]=l[d],l.pop(),a[r]=a[d],a.pop()}}}class E0{constructor(e,n,r=null,a=n.blendMode){this._mixer=e,this._clip=n,this._localRoot=r,this.blendMode=a;const l=n.tracks,u=l.length,d=new Array(u),g={endingStart:Fa,endingEnd:Fa};for(let _=0;_!==u;++_){const y=l[_].createInterpolant(null);d[_]=y,y.settings=g}this._interpolantSettings=g,this._interpolants=d,this._propertyBindings=new Array(u),this._cacheIndex=null,this._byClipCacheIndex=null,this._timeScaleInterpolant=null,this._weightInterpolant=null,this.loop=Ym,this._loopCount=-1,this._startTime=null,this.time=0,this.timeScale=1,this._effectiveTimeScale=1,this.weight=1,this._effectiveWeight=1,this.repetitions=1/0,this.paused=!1,this.enabled=!0,this.clampWhenFinished=!1,this.zeroSlopeAtStart=!0,this.zeroSlopeAtEnd=!0}play(){return this._mixer._activateAction(this),this}stop(){return this._mixer._deactivateAction(this),this.reset()}reset(){return this.paused=!1,this.enabled=!0,this.time=0,this._loopCount=-1,this._startTime=null,this.stopFading().stopWarping()}isRunning(){return this.enabled&&!this.paused&&this.timeScale!==0&&this._startTime===null&&this._mixer._isActiveAction(this)}isScheduled(){return this._mixer._isActiveAction(this)}startAt(e){return this._startTime=e,this}setLoop(e,n){return this.loop=e,this.repetitions=n,this}setEffectiveWeight(e){return this.weight=e,this._effectiveWeight=this.enabled?e:0,this.stopFading()}getEffectiveWeight(){return this._effectiveWeight}fadeIn(e){return this._scheduleFading(e,0,1)}fadeOut(e){return this._scheduleFading(e,1,0)}crossFadeFrom(e,n,r){if(e.fadeOut(n),this.fadeIn(n),r){const a=this._clip.duration,l=e._clip.duration,u=l/a,d=a/l;e.warp(1,u,n),this.warp(d,1,n)}return this}crossFadeTo(e,n,r){return e.crossFadeFrom(this,n,r)}stopFading(){const e=this._weightInterpolant;return e!==null&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(e)),this}setEffectiveTimeScale(e){return this.timeScale=e,this._effectiveTimeScale=this.paused?0:e,this.stopWarping()}getEffectiveTimeScale(){return this._effectiveTimeScale}setDuration(e){return this.timeScale=this._clip.duration/e,this.stopWarping()}syncWith(e){return this.time=e.time,this.timeScale=e.timeScale,this.stopWarping()}halt(e){return this.warp(this._effectiveTimeScale,0,e)}warp(e,n,r){const a=this._mixer,l=a.time,u=this.timeScale;let d=this._timeScaleInterpolant;d===null&&(d=a._lendControlInterpolant(),this._timeScaleInterpolant=d);const g=d.parameterPositions,_=d.sampleValues;return g[0]=l,g[1]=l+r,_[0]=e/u,_[1]=n/u,this}stopWarping(){const e=this._timeScaleInterpolant;return e!==null&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(e)),this}getMixer(){return this._mixer}getClip(){return this._clip}getRoot(){return this._localRoot||this._mixer._root}_update(e,n,r,a){if(!this.enabled){this._updateWeight(e);return}const l=this._startTime;if(l!==null){const g=(e-l)*r;g<0||r===0?n=0:(this._startTime=null,n=r*g)}n*=this._updateTimeScale(e);const u=this._updateTime(n),d=this._updateWeight(e);if(d>0){const g=this._interpolants,_=this._propertyBindings;switch(this.blendMode){case Hf:for(let y=0,S=g.length;y!==S;++y)g[y].evaluate(u),_[y].accumulateAdditive(d);break;case Oh:default:for(let y=0,S=g.length;y!==S;++y)g[y].evaluate(u),_[y].accumulate(a,d)}}}_updateWeight(e){let n=0;if(this.enabled){n=this.weight;const r=this._weightInterpolant;if(r!==null){const a=r.evaluate(e)[0];n*=a,e>r.parameterPositions[1]&&(this.stopFading(),a===0&&(this.enabled=!1))}}return this._effectiveWeight=n,n}_updateTimeScale(e){let n=0;if(!this.paused){n=this.timeScale;const r=this._timeScaleInterpolant;if(r!==null){const a=r.evaluate(e)[0];n*=a,e>r.parameterPositions[1]&&(this.stopWarping(),n===0?this.paused=!0:this.timeScale=n)}}return this._effectiveTimeScale=n,n}_updateTime(e){const n=this._clip.duration,r=this.loop;let a=this.time+e,l=this._loopCount;const u=r===Zm;if(e===0)return l===-1?a:u&&(l&1)===1?n-a:a;if(r===qm){l===-1&&(this._loopCount=0,this._setEndings(!0,!0,!1));e:{if(a>=n)a=n;else if(a<0)a=0;else{this.time=a;break e}this.clampWhenFinished?this.paused=!0:this.enabled=!1,this.time=a,this._mixer.dispatchEvent({type:"finished",action:this,direction:e<0?-1:1})}}else{if(l===-1&&(e>=0?(l=0,this._setEndings(!0,this.repetitions===0,u)):this._setEndings(this.repetitions===0,!0,u)),a>=n||a<0){const d=Math.floor(a/n);a-=n*d,l+=Math.abs(d);const g=this.repetitions-l;if(g<=0)this.clampWhenFinished?this.paused=!0:this.enabled=!1,a=e>0?n:0,this.time=a,this._mixer.dispatchEvent({type:"finished",action:this,direction:e>0?1:-1});else{if(g===1){const _=e<0;this._setEndings(_,!_,u)}else this._setEndings(!1,!1,u);this._loopCount=l,this.time=a,this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:d})}}else this.time=a;if(u&&(l&1)===1)return n-a}return a}_setEndings(e,n,r){const a=this._interpolantSettings;r?(a.endingStart=Oa,a.endingEnd=Oa):(e?a.endingStart=this.zeroSlopeAtStart?Oa:Fa:a.endingStart=mc,n?a.endingEnd=this.zeroSlopeAtEnd?Oa:Fa:a.endingEnd=mc)}_scheduleFading(e,n,r){const a=this._mixer,l=a.time;let u=this._weightInterpolant;u===null&&(u=a._lendControlInterpolant(),this._weightInterpolant=u);const d=u.parameterPositions,g=u.sampleValues;return d[0]=l,g[0]=n,d[1]=l+e,g[1]=r,this}}const CA=new Float32Array(1);class PA extends Cs{constructor(e){super(),this._root=e,this._initMemoryManager(),this._accuIndex=0,this.time=0,this.timeScale=1}_bindAction(e,n){const r=e._localRoot||this._root,a=e._clip.tracks,l=a.length,u=e._propertyBindings,d=e._interpolants,g=r.uuid,_=this._bindingsByRootAndName;let y=_[g];y===void 0&&(y={},_[g]=y);for(let S=0;S!==l;++S){const E=a[S],w=E.name;let C=y[w];if(C!==void 0)++C.referenceCount,u[S]=C;else{if(C=u[S],C!==void 0){C._cacheIndex===null&&(++C.referenceCount,this._addInactiveBinding(C,g,w));continue}const I=n&&n._propertyBindings[S].binding.parsedPath;C=new S0(Fn.create(r,w,I),E.ValueTypeName,E.getValueSize()),++C.referenceCount,this._addInactiveBinding(C,g,w),u[S]=C}d[S].resultBuffer=C.buffer}}_activateAction(e){if(!this._isActiveAction(e)){if(e._cacheIndex===null){const r=(e._localRoot||this._root).uuid,a=e._clip.uuid,l=this._actionsByClip[a];this._bindAction(e,l&&l.knownActions[0]),this._addInactiveAction(e,a,r)}const n=e._propertyBindings;for(let r=0,a=n.length;r!==a;++r){const l=n[r];l.useCount++===0&&(this._lendBinding(l),l.saveOriginalState())}this._lendAction(e)}}_deactivateAction(e){if(this._isActiveAction(e)){const n=e._propertyBindings;for(let r=0,a=n.length;r!==a;++r){const l=n[r];--l.useCount===0&&(l.restoreOriginalState(),this._takeBackBinding(l))}this._takeBackAction(e)}}_initMemoryManager(){this._actions=[],this._nActiveActions=0,this._actionsByClip={},this._bindings=[],this._nActiveBindings=0,this._bindingsByRootAndName={},this._controlInterpolants=[],this._nActiveControlInterpolants=0;const e=this;this.stats={actions:{get total(){return e._actions.length},get inUse(){return e._nActiveActions}},bindings:{get total(){return e._bindings.length},get inUse(){return e._nActiveBindings}},controlInterpolants:{get total(){return e._controlInterpolants.length},get inUse(){return e._nActiveControlInterpolants}}}}_isActiveAction(e){const n=e._cacheIndex;return n!==null&&n<this._nActiveActions}_addInactiveAction(e,n,r){const a=this._actions,l=this._actionsByClip;let u=l[n];if(u===void 0)u={knownActions:[e],actionByRoot:{}},e._byClipCacheIndex=0,l[n]=u;else{const d=u.knownActions;e._byClipCacheIndex=d.length,d.push(e)}e._cacheIndex=a.length,a.push(e),u.actionByRoot[r]=e}_removeInactiveAction(e){const n=this._actions,r=n[n.length-1],a=e._cacheIndex;r._cacheIndex=a,n[a]=r,n.pop(),e._cacheIndex=null;const l=e._clip.uuid,u=this._actionsByClip,d=u[l],g=d.knownActions,_=g[g.length-1],y=e._byClipCacheIndex;_._byClipCacheIndex=y,g[y]=_,g.pop(),e._byClipCacheIndex=null;const S=d.actionByRoot,E=(e._localRoot||this._root).uuid;delete S[E],g.length===0&&delete u[l],this._removeInactiveBindingsForAction(e)}_removeInactiveBindingsForAction(e){const n=e._propertyBindings;for(let r=0,a=n.length;r!==a;++r){const l=n[r];--l.referenceCount===0&&this._removeInactiveBinding(l)}}_lendAction(e){const n=this._actions,r=e._cacheIndex,a=this._nActiveActions++,l=n[a];e._cacheIndex=a,n[a]=e,l._cacheIndex=r,n[r]=l}_takeBackAction(e){const n=this._actions,r=e._cacheIndex,a=--this._nActiveActions,l=n[a];e._cacheIndex=a,n[a]=e,l._cacheIndex=r,n[r]=l}_addInactiveBinding(e,n,r){const a=this._bindingsByRootAndName,l=this._bindings;let u=a[n];u===void 0&&(u={},a[n]=u),u[r]=e,e._cacheIndex=l.length,l.push(e)}_removeInactiveBinding(e){const n=this._bindings,r=e.binding,a=r.rootNode.uuid,l=r.path,u=this._bindingsByRootAndName,d=u[a],g=n[n.length-1],_=e._cacheIndex;g._cacheIndex=_,n[_]=g,n.pop(),delete d[l],Object.keys(d).length===0&&delete u[a]}_lendBinding(e){const n=this._bindings,r=e._cacheIndex,a=this._nActiveBindings++,l=n[a];e._cacheIndex=a,n[a]=e,l._cacheIndex=r,n[r]=l}_takeBackBinding(e){const n=this._bindings,r=e._cacheIndex,a=--this._nActiveBindings,l=n[a];e._cacheIndex=a,n[a]=e,l._cacheIndex=r,n[r]=l}_lendControlInterpolant(){const e=this._controlInterpolants,n=this._nActiveControlInterpolants++;let r=e[n];return r===void 0&&(r=new Yd(new Float32Array(2),new Float32Array(2),1,CA),r.__cacheIndex=n,e[n]=r),r}_takeBackControlInterpolant(e){const n=this._controlInterpolants,r=e.__cacheIndex,a=--this._nActiveControlInterpolants,l=n[a];e.__cacheIndex=a,n[a]=e,l.__cacheIndex=r,n[r]=l}clipAction(e,n,r){const a=n||this._root,l=a.uuid;let u=typeof e=="string"?th.findByName(a,e):e;const d=u!==null?u.uuid:e,g=this._actionsByClip[d];let _=null;if(r===void 0&&(u!==null?r=u.blendMode:r=Oh),g!==void 0){const S=g.actionByRoot[l];if(S!==void 0&&S.blendMode===r)return S;_=g.knownActions[0],u===null&&(u=_._clip)}if(u===null)return null;const y=new E0(this,u,n,r);return this._bindAction(y,_),this._addInactiveAction(y,d,l),y}existingAction(e,n){const r=n||this._root,a=r.uuid,l=typeof e=="string"?th.findByName(r,e):e,u=l?l.uuid:e,d=this._actionsByClip[u];return d!==void 0&&d.actionByRoot[a]||null}stopAllAction(){const e=this._actions,n=this._nActiveActions;for(let r=n-1;r>=0;--r)e[r].stop();return this}update(e){e*=this.timeScale;const n=this._actions,r=this._nActiveActions,a=this.time+=e,l=Math.sign(e),u=this._accuIndex^=1;for(let _=0;_!==r;++_)n[_]._update(a,e,l,u);const d=this._bindings,g=this._nActiveBindings;for(let _=0;_!==g;++_)d[_].apply(u);return this}setTime(e){this.time=0;for(let n=0;n<this._actions.length;n++)this._actions[n].time=0;return this.update(e)}getRoot(){return this._root}uncacheClip(e){const n=this._actions,r=e.uuid,a=this._actionsByClip,l=a[r];if(l!==void 0){const u=l.knownActions;for(let d=0,g=u.length;d!==g;++d){const _=u[d];this._deactivateAction(_);const y=_._cacheIndex,S=n[n.length-1];_._cacheIndex=null,_._byClipCacheIndex=null,S._cacheIndex=y,n[y]=S,n.pop(),this._removeInactiveBindingsForAction(_)}delete a[r]}}uncacheRoot(e){const n=e.uuid,r=this._actionsByClip;for(const u in r){const d=r[u].actionByRoot,g=d[n];g!==void 0&&(this._deactivateAction(g),this._removeInactiveAction(g))}const a=this._bindingsByRootAndName,l=a[n];if(l!==void 0)for(const u in l){const d=l[u];d.restoreOriginalState(),this._removeInactiveBinding(d)}}uncacheAction(e,n){const r=this.existingAction(e,n);r!==null&&(this._deactivateAction(r),this._removeInactiveAction(r))}}class ip{constructor(e){this.value=e}clone(){return new ip(this.value.clone===void 0?this.value:this.value.clone())}}let LA=0;class DA extends Cs{constructor(){super(),this.isUniformsGroup=!0,Object.defineProperty(this,"id",{value:LA++}),this.name="",this.usage=gc,this.uniforms=[]}add(e){return this.uniforms.push(e),this}remove(e){const n=this.uniforms.indexOf(e);return n!==-1&&this.uniforms.splice(n,1),this}setName(e){return this.name=e,this}setUsage(e){return this.usage=e,this}dispose(){return this.dispatchEvent({type:"dispose"}),this}copy(e){this.name=e.name,this.usage=e.usage;const n=e.uniforms;this.uniforms.length=0;for(let r=0,a=n.length;r<a;r++)this.uniforms.push(n[r].clone());return this}clone(){return new this.constructor().copy(this)}}class UA extends mu{constructor(e,n,r=1){super(e,n),this.isInstancedInterleavedBuffer=!0,this.meshPerAttribute=r}copy(e){return super.copy(e),this.meshPerAttribute=e.meshPerAttribute,this}clone(e){const n=super.clone(e);return n.meshPerAttribute=this.meshPerAttribute,n}toJSON(e){const n=super.toJSON(e);return n.isInstancedInterleavedBuffer=!0,n.meshPerAttribute=this.meshPerAttribute,n}}class IA{constructor(e,n,r,a,l){this.isGLBufferAttribute=!0,this.name="",this.buffer=e,this.type=n,this.itemSize=r,this.elementSize=a,this.count=l,this.version=0}set needsUpdate(e){e===!0&&this.version++}setBuffer(e){return this.buffer=e,this}setType(e,n){return this.type=e,this.elementSize=n,this}setItemSize(e){return this.itemSize=e,this}setCount(e){return this.count=e,this}}class NA{constructor(e,n,r=0,a=1/0){this.ray=new Sc(e,n),this.near=r,this.far=a,this.camera=null,this.layers=new qh,this.params={Mesh:{},Line:{threshold:1},LOD:{},Points:{threshold:1},Sprite:{}}}set(e,n){this.ray.set(e,n)}setFromCamera(e,n){n.isPerspectiveCamera?(this.ray.origin.setFromMatrixPosition(n.matrixWorld),this.ray.direction.set(e.x,e.y,.5).unproject(n).sub(this.ray.origin).normalize(),this.camera=n):n.isOrthographicCamera?(this.ray.origin.set(e.x,e.y,(n.near+n.far)/(n.near-n.far)).unproject(n),this.ray.direction.set(0,0,-1).transformDirection(n.matrixWorld),this.camera=n):console.error("THREE.Raycaster: Unsupported camera type: "+n.type)}intersectObject(e,n=!0,r=[]){return rp(e,this,r,n),r.sort(b0),r}intersectObjects(e,n=!0,r=[]){for(let a=0,l=e.length;a<l;a++)rp(e[a],this,r,n);return r.sort(b0),r}}function b0(c,e){return c.distance-e.distance}function rp(c,e,n,r){if(c.layers.test(e.layers)&&c.raycast(e,n),r===!0){const a=c.children;for(let l=0,u=a.length;l<u;l++)rp(a[l],e,n,!0)}}class FA{constructor(e=1,n=0,r=0){return this.radius=e,this.phi=n,this.theta=r,this}set(e,n,r){return this.radius=e,this.phi=n,this.theta=r,this}copy(e){return this.radius=e.radius,this.phi=e.phi,this.theta=e.theta,this}makeSafe(){return this.phi=Math.max(1e-6,Math.min(Math.PI-1e-6,this.phi)),this}setFromVector3(e){return this.setFromCartesianCoords(e.x,e.y,e.z)}setFromCartesianCoords(e,n,r){return this.radius=Math.sqrt(e*e+n*n+r*r),this.radius===0?(this.theta=0,this.phi=0):(this.theta=Math.atan2(e,r),this.phi=Math.acos(hi(n/this.radius,-1,1))),this}clone(){return new this.constructor().copy(this)}}class OA{constructor(e=1,n=0,r=0){return this.radius=e,this.theta=n,this.y=r,this}set(e,n,r){return this.radius=e,this.theta=n,this.y=r,this}copy(e){return this.radius=e.radius,this.theta=e.theta,this.y=e.y,this}setFromVector3(e){return this.setFromCartesianCoords(e.x,e.y,e.z)}setFromCartesianCoords(e,n,r){return this.radius=Math.sqrt(e*e+r*r),this.theta=Math.atan2(e,r),this.y=n,this}clone(){return new this.constructor().copy(this)}}const T0=new Je;class BA{constructor(e=new Je(1/0,1/0),n=new Je(-1/0,-1/0)){this.isBox2=!0,this.min=e,this.max=n}set(e,n){return this.min.copy(e),this.max.copy(n),this}setFromPoints(e){this.makeEmpty();for(let n=0,r=e.length;n<r;n++)this.expandByPoint(e[n]);return this}setFromCenterAndSize(e,n){const r=T0.copy(n).multiplyScalar(.5);return this.min.copy(e).sub(r),this.max.copy(e).add(r),this}clone(){return new this.constructor().copy(this)}copy(e){return this.min.copy(e.min),this.max.copy(e.max),this}makeEmpty(){return this.min.x=this.min.y=1/0,this.max.x=this.max.y=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y}getCenter(e){return this.isEmpty()?e.set(0,0):e.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(e){return this.isEmpty()?e.set(0,0):e.subVectors(this.max,this.min)}expandByPoint(e){return this.min.min(e),this.max.max(e),this}expandByVector(e){return this.min.sub(e),this.max.add(e),this}expandByScalar(e){return this.min.addScalar(-e),this.max.addScalar(e),this}containsPoint(e){return!(e.x<this.min.x||e.x>this.max.x||e.y<this.min.y||e.y>this.max.y)}containsBox(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y}getParameter(e,n){return n.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y))}intersectsBox(e){return!(e.max.x<this.min.x||e.min.x>this.max.x||e.max.y<this.min.y||e.min.y>this.max.y)}clampPoint(e,n){return n.copy(e).clamp(this.min,this.max)}distanceToPoint(e){return this.clampPoint(e,T0).distanceTo(e)}intersect(e){return this.min.max(e.min),this.max.min(e.max),this.isEmpty()&&this.makeEmpty(),this}union(e){return this.min.min(e.min),this.max.max(e.max),this}translate(e){return this.min.add(e),this.max.add(e),this}equals(e){return e.min.equals(this.min)&&e.max.equals(this.max)}}const w0=new j,Ou=new j;class zA{constructor(e=new j,n=new j){this.start=e,this.end=n}set(e,n){return this.start.copy(e),this.end.copy(n),this}copy(e){return this.start.copy(e.start),this.end.copy(e.end),this}getCenter(e){return e.addVectors(this.start,this.end).multiplyScalar(.5)}delta(e){return e.subVectors(this.end,this.start)}distanceSq(){return this.start.distanceToSquared(this.end)}distance(){return this.start.distanceTo(this.end)}at(e,n){return this.delta(n).multiplyScalar(e).add(this.start)}closestPointToPointParameter(e,n){w0.subVectors(e,this.start),Ou.subVectors(this.end,this.start);const r=Ou.dot(Ou);let l=Ou.dot(w0)/r;return n&&(l=hi(l,0,1)),l}closestPointToPoint(e,n,r){const a=this.closestPointToPointParameter(e,n);return this.delta(r).multiplyScalar(a).add(this.start)}applyMatrix4(e){return this.start.applyMatrix4(e),this.end.applyMatrix4(e),this}equals(e){return e.start.equals(this.start)&&e.end.equals(this.end)}clone(){return new this.constructor().copy(this)}}const A0=new j;class kA extends Bn{constructor(e,n){super(),this.light=e,this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.color=n,this.type="SpotLightHelper";const r=new Mn,a=[0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,-1,0,1,0,0,0,0,1,1,0,0,0,0,-1,1];for(let u=0,d=1,g=32;u<g;u++,d++){const _=u/g*Math.PI*2,y=d/g*Math.PI*2;a.push(Math.cos(_),Math.sin(_),1,Math.cos(y),Math.sin(y),1)}r.setAttribute("position",new Ut(a,3));const l=new Qi({fog:!1,toneMapped:!1});this.cone=new ms(r,l),this.add(this.cone),this.update()}dispose(){this.cone.geometry.dispose(),this.cone.material.dispose()}update(){this.light.updateWorldMatrix(!0,!1),this.light.target.updateWorldMatrix(!0,!1);const e=this.light.distance?this.light.distance:1e3,n=e*Math.tan(this.light.angle);this.cone.scale.set(n,n,e),A0.setFromMatrixPosition(this.light.target.matrixWorld),this.cone.lookAt(A0),this.color!==void 0?this.cone.material.color.set(this.color):this.cone.material.color.copy(this.light.color)}}const fa=new j,Bu=new fn,sp=new fn;class GA extends ms{constructor(e){const n=R0(e),r=new Mn,a=[],l=[],u=new At(0,0,1),d=new At(0,1,0);for(let _=0;_<n.length;_++){const y=n[_];y.parent&&y.parent.isBone&&(a.push(0,0,0),a.push(0,0,0),l.push(u.r,u.g,u.b),l.push(d.r,d.g,d.b))}r.setAttribute("position",new Ut(a,3)),r.setAttribute("color",new Ut(l,3));const g=new Qi({vertexColors:!0,depthTest:!1,depthWrite:!1,toneMapped:!1,transparent:!0});super(r,g),this.isSkeletonHelper=!0,this.type="SkeletonHelper",this.root=e,this.bones=n,this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1}updateMatrixWorld(e){const n=this.bones,r=this.geometry,a=r.getAttribute("position");sp.copy(this.root.matrixWorld).invert();for(let l=0,u=0;l<n.length;l++){const d=n[l];d.parent&&d.parent.isBone&&(Bu.multiplyMatrices(sp,d.matrixWorld),fa.setFromMatrixPosition(Bu),a.setXYZ(u,fa.x,fa.y,fa.z),Bu.multiplyMatrices(sp,d.parent.matrixWorld),fa.setFromMatrixPosition(Bu),a.setXYZ(u+1,fa.x,fa.y,fa.z),u+=2)}r.getAttribute("position").needsUpdate=!0,super.updateMatrixWorld(e)}dispose(){this.geometry.dispose(),this.material.dispose()}}function R0(c){const e=[];c.isBone===!0&&e.push(c);for(let n=0;n<c.children.length;n++)e.push.apply(e,R0(c.children[n]));return e}class HA extends Ni{constructor(e,n,r){const a=new _l(n,4,2),l=new oa({wireframe:!0,fog:!1,toneMapped:!1});super(a,l),this.light=e,this.color=r,this.type="PointLightHelper",this.matrix=this.light.matrixWorld,this.matrixAutoUpdate=!1,this.update()}dispose(){this.geometry.dispose(),this.material.dispose()}update(){this.light.updateWorldMatrix(!0,!1),this.color!==void 0?this.material.color.set(this.color):this.material.color.copy(this.light.color)}}const VA=new j,C0=new At,P0=new At;class WA extends Bn{constructor(e,n,r){super(),this.light=e,this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.color=r,this.type="HemisphereLightHelper";const a=new gl(n);a.rotateY(Math.PI*.5),this.material=new oa({wireframe:!0,fog:!1,toneMapped:!1}),this.color===void 0&&(this.material.vertexColors=!0);const l=a.getAttribute("position"),u=new Float32Array(l.count*3);a.setAttribute("color",new Xn(u,3)),this.add(new Ni(a,this.material)),this.update()}dispose(){this.children[0].geometry.dispose(),this.children[0].material.dispose()}update(){const e=this.children[0];if(this.color!==void 0)this.material.color.set(this.color);else{const n=e.geometry.getAttribute("color");C0.copy(this.light.color),P0.copy(this.light.groundColor);for(let r=0,a=n.count;r<a;r++){const l=r<a/2?C0:P0;n.setXYZ(r,l.r,l.g,l.b)}n.needsUpdate=!0}this.light.updateWorldMatrix(!0,!1),e.lookAt(VA.setFromMatrixPosition(this.light.matrixWorld).negate())}}class XA extends ms{constructor(e=10,n=10,r=4473924,a=8947848){r=new At(r),a=new At(a);const l=n/2,u=e/n,d=e/2,g=[],_=[];for(let E=0,w=0,C=-d;E<=n;E++,C+=u){g.push(-d,0,C,d,0,C),g.push(C,0,-d,C,0,d);const I=E===l?r:a;I.toArray(_,w),w+=3,I.toArray(_,w),w+=3,I.toArray(_,w),w+=3,I.toArray(_,w),w+=3}const y=new Mn;y.setAttribute("position",new Ut(g,3)),y.setAttribute("color",new Ut(_,3));const S=new Qi({vertexColors:!0,toneMapped:!1});super(y,S),this.type="GridHelper"}dispose(){this.geometry.dispose(),this.material.dispose()}}class qA extends ms{constructor(e=10,n=16,r=8,a=64,l=4473924,u=8947848){l=new At(l),u=new At(u);const d=[],g=[];if(n>1)for(let S=0;S<n;S++){const E=S/n*(Math.PI*2),w=Math.sin(E)*e,C=Math.cos(E)*e;d.push(0,0,0),d.push(w,0,C);const I=S&1?l:u;g.push(I.r,I.g,I.b),g.push(I.r,I.g,I.b)}for(let S=0;S<r;S++){const E=S&1?l:u,w=e-e/r*S;for(let C=0;C<a;C++){let I=C/a*(Math.PI*2),U=Math.sin(I)*w,A=Math.cos(I)*w;d.push(U,0,A),g.push(E.r,E.g,E.b),I=(C+1)/a*(Math.PI*2),U=Math.sin(I)*w,A=Math.cos(I)*w,d.push(U,0,A),g.push(E.r,E.g,E.b)}}const _=new Mn;_.setAttribute("position",new Ut(d,3)),_.setAttribute("color",new Ut(g,3));const y=new Qi({vertexColors:!0,toneMapped:!1});super(_,y),this.type="PolarGridHelper"}dispose(){this.geometry.dispose(),this.material.dispose()}}const L0=new j,zu=new j,D0=new j;class YA extends Bn{constructor(e,n,r){super(),this.light=e,this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.color=r,this.type="DirectionalLightHelper",n===void 0&&(n=1);let a=new Mn;a.setAttribute("position",new Ut([-n,n,0,n,n,0,n,-n,0,-n,-n,0,-n,n,0],3));const l=new Qi({fog:!1,toneMapped:!1});this.lightPlane=new ha(a,l),this.add(this.lightPlane),a=new Mn,a.setAttribute("position",new Ut([0,0,0,0,0,1],3)),this.targetLine=new ha(a,l),this.add(this.targetLine),this.update()}dispose(){this.lightPlane.geometry.dispose(),this.lightPlane.material.dispose(),this.targetLine.geometry.dispose(),this.targetLine.material.dispose()}update(){this.light.updateWorldMatrix(!0,!1),this.light.target.updateWorldMatrix(!0,!1),L0.setFromMatrixPosition(this.light.matrixWorld),zu.setFromMatrixPosition(this.light.target.matrixWorld),D0.subVectors(zu,L0),this.lightPlane.lookAt(zu),this.color!==void 0?(this.lightPlane.material.color.set(this.color),this.targetLine.material.color.set(this.color)):(this.lightPlane.material.color.copy(this.light.color),this.targetLine.material.color.copy(this.light.color)),this.targetLine.lookAt(zu),this.targetLine.scale.z=D0.length()}}const ku=new j,ui=new su;class ZA extends ms{constructor(e){const n=new Mn,r=new Qi({color:16777215,vertexColors:!0,toneMapped:!1}),a=[],l=[],u={};d("n1","n2"),d("n2","n4"),d("n4","n3"),d("n3","n1"),d("f1","f2"),d("f2","f4"),d("f4","f3"),d("f3","f1"),d("n1","f1"),d("n2","f2"),d("n3","f3"),d("n4","f4"),d("p","n1"),d("p","n2"),d("p","n3"),d("p","n4"),d("u1","u2"),d("u2","u3"),d("u3","u1"),d("c","t"),d("p","c"),d("cn1","cn2"),d("cn3","cn4"),d("cf1","cf2"),d("cf3","cf4");function d(C,I){g(C),g(I)}function g(C){a.push(0,0,0),l.push(0,0,0),u[C]===void 0&&(u[C]=[]),u[C].push(a.length/3-1)}n.setAttribute("position",new Ut(a,3)),n.setAttribute("color",new Ut(l,3)),super(n,r),this.type="CameraHelper",this.camera=e,this.camera.updateProjectionMatrix&&this.camera.updateProjectionMatrix(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.pointMap=u,this.update();const _=new At(16755200),y=new At(16711680),S=new At(43775),E=new At(16777215),w=new At(3355443);this.setColors(_,y,S,E,w)}setColors(e,n,r,a,l){const d=this.geometry.getAttribute("color");d.setXYZ(0,e.r,e.g,e.b),d.setXYZ(1,e.r,e.g,e.b),d.setXYZ(2,e.r,e.g,e.b),d.setXYZ(3,e.r,e.g,e.b),d.setXYZ(4,e.r,e.g,e.b),d.setXYZ(5,e.r,e.g,e.b),d.setXYZ(6,e.r,e.g,e.b),d.setXYZ(7,e.r,e.g,e.b),d.setXYZ(8,e.r,e.g,e.b),d.setXYZ(9,e.r,e.g,e.b),d.setXYZ(10,e.r,e.g,e.b),d.setXYZ(11,e.r,e.g,e.b),d.setXYZ(12,e.r,e.g,e.b),d.setXYZ(13,e.r,e.g,e.b),d.setXYZ(14,e.r,e.g,e.b),d.setXYZ(15,e.r,e.g,e.b),d.setXYZ(16,e.r,e.g,e.b),d.setXYZ(17,e.r,e.g,e.b),d.setXYZ(18,e.r,e.g,e.b),d.setXYZ(19,e.r,e.g,e.b),d.setXYZ(20,e.r,e.g,e.b),d.setXYZ(21,e.r,e.g,e.b),d.setXYZ(22,e.r,e.g,e.b),d.setXYZ(23,e.r,e.g,e.b),d.setXYZ(24,n.r,n.g,n.b),d.setXYZ(25,n.r,n.g,n.b),d.setXYZ(26,n.r,n.g,n.b),d.setXYZ(27,n.r,n.g,n.b),d.setXYZ(28,n.r,n.g,n.b),d.setXYZ(29,n.r,n.g,n.b),d.setXYZ(30,n.r,n.g,n.b),d.setXYZ(31,n.r,n.g,n.b),d.setXYZ(32,r.r,r.g,r.b),d.setXYZ(33,r.r,r.g,r.b),d.setXYZ(34,r.r,r.g,r.b),d.setXYZ(35,r.r,r.g,r.b),d.setXYZ(36,r.r,r.g,r.b),d.setXYZ(37,r.r,r.g,r.b),d.setXYZ(38,a.r,a.g,a.b),d.setXYZ(39,a.r,a.g,a.b),d.setXYZ(40,l.r,l.g,l.b),d.setXYZ(41,l.r,l.g,l.b),d.setXYZ(42,l.r,l.g,l.b),d.setXYZ(43,l.r,l.g,l.b),d.setXYZ(44,l.r,l.g,l.b),d.setXYZ(45,l.r,l.g,l.b),d.setXYZ(46,l.r,l.g,l.b),d.setXYZ(47,l.r,l.g,l.b),d.setXYZ(48,l.r,l.g,l.b),d.setXYZ(49,l.r,l.g,l.b),d.needsUpdate=!0}update(){const e=this.geometry,n=this.pointMap,r=1,a=1;ui.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse),pi("c",n,e,ui,0,0,-1),pi("t",n,e,ui,0,0,1),pi("n1",n,e,ui,-1,-1,-1),pi("n2",n,e,ui,r,-1,-1),pi("n3",n,e,ui,-1,a,-1),pi("n4",n,e,ui,r,a,-1),pi("f1",n,e,ui,-1,-1,1),pi("f2",n,e,ui,r,-1,1),pi("f3",n,e,ui,-1,a,1),pi("f4",n,e,ui,r,a,1),pi("u1",n,e,ui,r*.7,a*1.1,-1),pi("u2",n,e,ui,-1*.7,a*1.1,-1),pi("u3",n,e,ui,0,a*2,-1),pi("cf1",n,e,ui,-1,0,1),pi("cf2",n,e,ui,r,0,1),pi("cf3",n,e,ui,0,-1,1),pi("cf4",n,e,ui,0,a,1),pi("cn1",n,e,ui,-1,0,-1),pi("cn2",n,e,ui,r,0,-1),pi("cn3",n,e,ui,0,-1,-1),pi("cn4",n,e,ui,0,a,-1),e.getAttribute("position").needsUpdate=!0}dispose(){this.geometry.dispose(),this.material.dispose()}}function pi(c,e,n,r,a,l,u){ku.set(a,l,u).unproject(r);const d=e[c];if(d!==void 0){const g=n.getAttribute("position");for(let _=0,y=d.length;_<y;_++)g.setXYZ(d[_],ku.x,ku.y,ku.z)}}const Gu=new us;class KA extends ms{constructor(e,n=16776960){const r=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),a=new Float32Array(8*3),l=new Mn;l.setIndex(new Xn(r,1)),l.setAttribute("position",new Xn(a,3)),super(l,new Qi({color:n,toneMapped:!1})),this.object=e,this.type="BoxHelper",this.matrixAutoUpdate=!1,this.update()}update(e){if(e!==void 0&&console.warn("THREE.BoxHelper: .update() has no longer arguments."),this.object!==void 0&&Gu.setFromObject(this.object),Gu.isEmpty())return;const n=Gu.min,r=Gu.max,a=this.geometry.attributes.position,l=a.array;l[0]=r.x,l[1]=r.y,l[2]=r.z,l[3]=n.x,l[4]=r.y,l[5]=r.z,l[6]=n.x,l[7]=n.y,l[8]=r.z,l[9]=r.x,l[10]=n.y,l[11]=r.z,l[12]=r.x,l[13]=r.y,l[14]=n.z,l[15]=n.x,l[16]=r.y,l[17]=n.z,l[18]=n.x,l[19]=n.y,l[20]=n.z,l[21]=r.x,l[22]=n.y,l[23]=n.z,a.needsUpdate=!0,this.geometry.computeBoundingSphere()}setFromObject(e){return this.object=e,this.update(),this}copy(e,n){return super.copy(e,n),this.object=e.object,this}dispose(){this.geometry.dispose(),this.material.dispose()}}class $A extends ms{constructor(e,n=16776960){const r=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),a=[1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1],l=new Mn;l.setIndex(new Xn(r,1)),l.setAttribute("position",new Ut(a,3)),super(l,new Qi({color:n,toneMapped:!1})),this.box=e,this.type="Box3Helper",this.geometry.computeBoundingSphere()}updateMatrixWorld(e){const n=this.box;n.isEmpty()||(n.getCenter(this.position),n.getSize(this.scale),this.scale.multiplyScalar(.5),super.updateMatrixWorld(e))}dispose(){this.geometry.dispose(),this.material.dispose()}}class JA extends ha{constructor(e,n=1,r=16776960){const a=r,l=[1,-1,0,-1,1,0,-1,-1,0,1,1,0,-1,1,0,-1,-1,0,1,-1,0,1,1,0],u=new Mn;u.setAttribute("position",new Ut(l,3)),u.computeBoundingSphere(),super(u,new Qi({color:a,toneMapped:!1})),this.type="PlaneHelper",this.plane=e,this.size=n;const d=[1,1,0,-1,1,0,-1,-1,0,1,1,0,-1,-1,0,1,-1,0],g=new Mn;g.setAttribute("position",new Ut(d,3)),g.computeBoundingSphere(),this.add(new Ni(g,new oa({color:a,opacity:.2,transparent:!0,depthWrite:!1,toneMapped:!1})))}updateMatrixWorld(e){this.position.set(0,0,0),this.scale.set(.5*this.size,.5*this.size,1),this.lookAt(this.plane.normal),this.translateZ(-this.plane.constant),super.updateMatrixWorld(e)}dispose(){this.geometry.dispose(),this.material.dispose(),this.children[0].geometry.dispose(),this.children[0].material.dispose()}}const U0=new j;let Hu,ap;class jA extends Bn{constructor(e=new j(0,0,1),n=new j(0,0,0),r=1,a=16776960,l=r*.2,u=l*.2){super(),this.type="ArrowHelper",Hu===void 0&&(Hu=new Mn,Hu.setAttribute("position",new Ut([0,0,0,0,1,0],3)),ap=new qa(0,.5,1,5,1),ap.translate(0,-.5,0)),this.position.copy(n),this.line=new ha(Hu,new Qi({color:a,toneMapped:!1})),this.line.matrixAutoUpdate=!1,this.add(this.line),this.cone=new Ni(ap,new oa({color:a,toneMapped:!1})),this.cone.matrixAutoUpdate=!1,this.add(this.cone),this.setDirection(e),this.setLength(r,l,u)}setDirection(e){if(e.y>.99999)this.quaternion.set(0,0,0,1);else if(e.y<-.99999)this.quaternion.set(1,0,0,0);else{U0.set(e.z,0,-e.x).normalize();const n=Math.acos(e.y);this.quaternion.setFromAxisAngle(U0,n)}}setLength(e,n=e*.2,r=n*.2){this.line.scale.set(1,Math.max(1e-4,e-n),1),this.line.updateMatrix(),this.cone.scale.set(r,n,r),this.cone.position.y=e,this.cone.updateMatrix()}setColor(e){this.line.material.color.set(e),this.cone.material.color.set(e)}copy(e){return super.copy(e,!1),this.line.copy(e.line),this.cone.copy(e.cone),this}dispose(){this.line.geometry.dispose(),this.line.material.dispose(),this.cone.geometry.dispose(),this.cone.material.dispose()}}class QA extends ms{constructor(e=1){const n=[0,0,0,e,0,0,0,0,0,0,e,0,0,0,0,0,0,e],r=[1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1],a=new Mn;a.setAttribute("position",new Ut(n,3)),a.setAttribute("color",new Ut(r,3));const l=new Qi({vertexColors:!0,toneMapped:!1});super(a,l),this.type="AxesHelper"}setColors(e,n,r){const a=new At,l=this.geometry.attributes.color.array;return a.set(e),a.toArray(l,0),a.toArray(l,3),a.set(n),a.toArray(l,6),a.toArray(l,9),a.set(r),a.toArray(l,12),a.toArray(l,15),this.geometry.attributes.color.needsUpdate=!0,this}dispose(){this.geometry.dispose(),this.material.dispose()}}class e1{constructor(){this.type="ShapePath",this.color=new At,this.subPaths=[],this.currentPath=null}moveTo(e,n){return this.currentPath=new Fc,this.subPaths.push(this.currentPath),this.currentPath.moveTo(e,n),this}lineTo(e,n){return this.currentPath.lineTo(e,n),this}quadraticCurveTo(e,n,r,a){return this.currentPath.quadraticCurveTo(e,n,r,a),this}bezierCurveTo(e,n,r,a,l,u){return this.currentPath.bezierCurveTo(e,n,r,a,l,u),this}splineThru(e){return this.currentPath.splineThru(e),this}toShapes(e){function n(A){const z=[];for(let F=0,k=A.length;F<k;F++){const Y=A[F],K=new Ya;K.curves=Y.curves,z.push(K)}return z}function r(A,z){const F=z.length;let k=!1;for(let Y=F-1,K=0;K<F;Y=K++){let se=z[Y],le=z[K],G=le.x-se.x,ee=le.y-se.y;if(Math.abs(ee)>Number.EPSILON){if(ee<0&&(se=z[K],G=-G,le=z[Y],ee=-ee),A.y<se.y||A.y>le.y)continue;if(A.y===se.y){if(A.x===se.x)return!0}else{const Pe=ee*(A.x-se.x)-G*(A.y-se.y);if(Pe===0)return!0;if(Pe<0)continue;k=!k}}else{if(A.y!==se.y)continue;if(le.x<=A.x&&A.x<=se.x||se.x<=A.x&&A.x<=le.x)return!0}}return k}const a=gs.isClockWise,l=this.subPaths;if(l.length===0)return[];let u,d,g;const _=[];if(l.length===1)return d=l[0],g=new Ya,g.curves=d.curves,_.push(g),_;let y=!a(l[0].getPoints());y=e?!y:y;const S=[],E=[];let w=[],C=0,I;E[C]=void 0,w[C]=[];for(let A=0,z=l.length;A<z;A++)d=l[A],I=d.getPoints(),u=a(I),u=e?!u:u,u?(!y&&E[C]&&C++,E[C]={s:new Ya,p:I},E[C].s.curves=d.curves,y&&C++,w[C]=[]):w[C].push({h:d,p:I[0]});if(!E[0])return n(l);if(E.length>1){let A=!1,z=0;for(let F=0,k=E.length;F<k;F++)S[F]=[];for(let F=0,k=E.length;F<k;F++){const Y=w[F];for(let K=0;K<Y.length;K++){const se=Y[K];let le=!0;for(let G=0;G<E.length;G++)r(se.p,E[G].p)&&(F!==G&&z++,le?(le=!1,S[G].push(se)):A=!0);le&&S[F].push(se)}}z>0&&A===!1&&(w=S)}let U;for(let A=0,z=E.length;A<z;A++){g=E[A].s,_.push(g),U=w[A];for(let F=0,k=U.length;F<k;F++)g.holes.push(U[F].h)}return _}}class t1 extends la{constructor(e,n,r,a,l,u){console.warn("THREE.BoxBufferGeometry has been renamed to THREE.BoxGeometry."),super(e,n,r,a,l,u)}}class n1 extends Oc{constructor(e,n,r,a){console.warn("THREE.CapsuleBufferGeometry has been renamed to THREE.CapsuleGeometry."),super(e,n,r,a)}}class i1 extends Bc{constructor(e,n,r,a){console.warn("THREE.CircleBufferGeometry has been renamed to THREE.CircleGeometry."),super(e,n,r,a)}}class r1 extends zc{constructor(e,n,r,a,l,u,d){console.warn("THREE.ConeBufferGeometry has been renamed to THREE.ConeGeometry."),super(e,n,r,a,l,u,d)}}class s1 extends qa{constructor(e,n,r,a,l,u,d,g){console.warn("THREE.CylinderBufferGeometry has been renamed to THREE.CylinderGeometry."),super(e,n,r,a,l,u,d,g)}}class a1 extends kc{constructor(e,n){console.warn("THREE.DodecahedronBufferGeometry has been renamed to THREE.DodecahedronGeometry."),super(e,n)}}class o1 extends Wc{constructor(e,n){console.warn("THREE.ExtrudeBufferGeometry has been renamed to THREE.ExtrudeGeometry."),super(e,n)}}class l1 extends Xc{constructor(e,n){console.warn("THREE.IcosahedronBufferGeometry has been renamed to THREE.IcosahedronGeometry."),super(e,n)}}class c1 extends pl{constructor(e,n,r,a){console.warn("THREE.LatheBufferGeometry has been renamed to THREE.LatheGeometry."),super(e,n,r,a)}}class h1 extends gl{constructor(e,n){console.warn("THREE.OctahedronBufferGeometry has been renamed to THREE.OctahedronGeometry."),super(e,n)}}class u1 extends tl{constructor(e,n,r,a){console.warn("THREE.PlaneBufferGeometry has been renamed to THREE.PlaneGeometry."),super(e,n,r,a)}}class f1 extends Os{constructor(e,n,r,a){console.warn("THREE.PolyhedronBufferGeometry has been renamed to THREE.PolyhedronGeometry."),super(e,n,r,a)}}class d1 extends qc{constructor(e,n,r,a,l,u){console.warn("THREE.RingBufferGeometry has been renamed to THREE.RingGeometry."),super(e,n,r,a,l,u)}}class p1 extends Yc{constructor(e,n){console.warn("THREE.ShapeBufferGeometry has been renamed to THREE.ShapeGeometry."),super(e,n)}}class m1 extends _l{constructor(e,n,r,a,l,u,d){console.warn("THREE.SphereBufferGeometry has been renamed to THREE.SphereGeometry."),super(e,n,r,a,l,u,d)}}class g1 extends Zc{constructor(e,n){console.warn("THREE.TetrahedronBufferGeometry has been renamed to THREE.TetrahedronGeometry."),super(e,n)}}class _1 extends Kc{constructor(e,n,r,a,l){console.warn("THREE.TorusBufferGeometry has been renamed to THREE.TorusGeometry."),super(e,n,r,a,l)}}class x1 extends $c{constructor(e,n,r,a,l,u){console.warn("THREE.TorusKnotBufferGeometry has been renamed to THREE.TorusKnotGeometry."),super(e,n,r,a,l,u)}}class v1 extends Jc{constructor(e,n,r,a,l){console.warn("THREE.TubeBufferGeometry has been renamed to THREE.TubeGeometry."),super(e,n,r,a,l)}}return typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:h}})),typeof window<"u"&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=h),O.ACESFilmicToneMapping=Kn,O.AddEquation=H,O.AddOperation=Xt,O.AdditiveAnimationBlendMode=Hf,O.AdditiveBlending=R,O.AlphaFormat=ti,O.AlwaysDepth=lt,O.AlwaysStencilFunc=jm,O.AmbientLight=l0,O.AmbientLightProbe=fA,O.AnimationAction=E0,O.AnimationClip=th,O.AnimationLoader=Qw,O.AnimationMixer=PA,O.AnimationObjectGroup=RA,O.AnimationUtils=Kw,O.ArcCurve=T_,O.ArrayCamera=$g,O.ArrowHelper=jA,O.Audio=y0,O.AudioAnalyser=xA,O.AudioContext=ep,O.AudioListener=mA,O.AudioLoader=hA,O.AxesHelper=QA,O.BackSide=T,O.BasicDepthPacking=Km,O.BasicShadowMap=p,O.Bone=wd,O.BooleanKeyframeTrack=$a,O.Box2=BA,O.Box3=us,O.Box3Helper=$A,O.BoxBufferGeometry=t1,O.BoxGeometry=la,O.BoxHelper=KA,O.BufferAttribute=Xn,O.BufferGeometry=Mn,O.BufferGeometryLoader=f0,O.ByteType=ei,O.Cache=ja,O.Camera=su,O.CameraHelper=ZA,O.CanvasTexture=vw,O.CapsuleBufferGeometry=n1,O.CapsuleGeometry=Oc,O.CatmullRomCurve3=w_,O.CineonToneMapping=Qn,O.CircleBufferGeometry=i1,O.CircleGeometry=Bc,O.ClampToEdgeWrapping=qe,O.Clock=_0,O.Color=At,O.ColorKeyframeTrack=Zd,O.ColorManagement=Pr,O.CompressedArrayTexture=xw,O.CompressedTexture=Pd,O.CompressedTextureLoader=eA,O.ConeBufferGeometry=r1,O.ConeGeometry=zc,O.CubeCamera=Mg,O.CubeReflectionMapping=dn,O.CubeRefractionMapping=Pn,O.CubeTexture=Ac,O.CubeTextureLoader=tA,O.CubeUVReflectionMapping=X,O.CubicBezierCurve=Nd,O.CubicBezierCurve3=R_,O.CubicInterpolant=J_,O.CullFaceBack=o,O.CullFaceFront=f,O.CullFaceFrontBack=m,O.CullFaceNone=s,O.Curve=es,O.CurvePath=P_,O.CustomBlending=q,O.CustomToneMapping=ii,O.CylinderBufferGeometry=s1,O.CylinderGeometry=qa,O.Cylindrical=OA,O.Data3DTexture=jf,O.DataArrayTexture=kh,O.DataTexture=ul,O.DataTextureLoader=nA,O.DataUtils=lS,O.DecrementStencilOp=lM,O.DecrementWrapStencilOp=hM,O.DefaultLoadingManager=e0,O.DepthFormat=Wr,O.DepthStencilFormat=As,O.DepthTexture=Jg,O.DirectionalLight=o0,O.DirectionalLightHelper=YA,O.DiscreteInterpolant=j_,O.DisplayP3ColorSpace=Wf,O.DodecahedronBufferGeometry=a1,O.DodecahedronGeometry=kc,O.DoubleSide=P,O.DstAlphaFactor=He,O.DstColorFactor=Le,O.DynamicCopyUsage=TM,O.DynamicDrawUsage=vM,O.DynamicReadUsage=SM,O.EdgesGeometry=L_,O.EllipseCurve=Tu,O.EqualDepth=ut,O.EqualStencilFunc=pM,O.EquirectangularReflectionMapping=li,O.EquirectangularRefractionMapping=ne,O.Euler=Ec,O.EventDispatcher=Cs,O.ExtrudeBufferGeometry=o1,O.ExtrudeGeometry=Wc,O.FileLoader=zs,O.Float16BufferAttribute=pS,O.Float32BufferAttribute=Ut,O.Float64BufferAttribute=mS,O.FloatType=Ct,O.Fog=pu,O.FogExp2=du,O.FramebufferTexture=_w,O.FrontSide=b,O.Frustum=ou,O.GLBufferAttribute=IA,O.GLSL1=AM,O.GLSL3=Xf,O.GreaterDepth=fe,O.GreaterEqualDepth=St,O.GreaterEqualStencilFunc=xM,O.GreaterStencilFunc=gM,O.GridHelper=XA,O.Group=sl,O.HalfFloatType=Un,O.HemisphereLight=t0,O.HemisphereLightHelper=WA,O.HemisphereLightProbe=uA,O.IcosahedronBufferGeometry=l1,O.IcosahedronGeometry=Xc,O.ImageBitmapLoader=cA,O.ImageLoader=nh,O.ImageUtils=$f,O.IncrementStencilOp=oM,O.IncrementWrapStencilOp=cM,O.InstancedBufferAttribute=fl,O.InstancedBufferGeometry=u0,O.InstancedInterleavedBuffer=UA,O.InstancedMesh=m_,O.Int16BufferAttribute=fS,O.Int32BufferAttribute=dS,O.Int8BufferAttribute=cS,O.IntType=rt,O.InterleavedBuffer=mu,O.InterleavedBufferAttribute=Xa,O.Interpolant=jc,O.InterpolateDiscrete=dc,O.InterpolateLinear=pc,O.InterpolateSmooth=Fh,O.InvertStencilOp=uM,O.KeepStencilOp=Bh,O.KeyframeTrack=ts,O.LOD=a_,O.LatheBufferGeometry=c1,O.LatheGeometry=pl,O.Layers=qh,O.LessDepth=Ce,O.LessEqualDepth=ke,O.LessEqualStencilFunc=mM,O.LessStencilFunc=dM,O.Light=ua,O.LightProbe=Iu,O.Line=ha,O.Line3=zA,O.LineBasicMaterial=Qi,O.LineCurve=Au,O.LineCurve3=C_,O.LineDashedMaterial=K_,O.LineLoop=M_,O.LineSegments=ms,O.LinearEncoding=Vf,O.LinearFilter=ft,O.LinearInterpolant=Yd,O.LinearMipMapLinearFilter=sn,O.LinearMipMapNearestFilter=Tt,O.LinearMipmapLinearFilter=wt,O.LinearMipmapNearestFilter=Nt,O.LinearSRGBColorSpace=Zr,O.LinearToneMapping=Ft,O.Loader=Sr,O.LoaderUtils=Qd,O.LoadingManager=Kd,O.LoopOnce=qm,O.LoopPingPong=Zm,O.LoopRepeat=Ym,O.LuminanceAlphaFormat=Da,O.LuminanceFormat=_r,O.MOUSE=t,O.Material=Gi,O.MaterialLoader=Nu,O.MathUtils=GM,O.Matrix3=wn,O.Matrix4=fn,O.MaxEquation=B,O.Mesh=Ni,O.MeshBasicMaterial=oa,O.MeshDepthMaterial=Md,O.MeshDistanceMaterial=Sd,O.MeshLambertMaterial=Y_,O.MeshMatcapMaterial=Z_,O.MeshNormalMaterial=q_,O.MeshPhongMaterial=W_,O.MeshPhysicalMaterial=V_,O.MeshStandardMaterial=Vd,O.MeshToonMaterial=X_,O.MinEquation=oe,O.MirroredRepeatWrapping=it,O.MixOperation=mt,O.MultiplyBlending=V,O.MultiplyOperation=Wt,O.NearestFilter=st,O.NearestMipMapLinearFilter=yt,O.NearestMipMapNearestFilter=Xe,O.NearestMipmapLinearFilter=Ee,O.NearestMipmapNearestFilter=ae,O.NeverDepth=It,O.NeverStencilFunc=fM,O.NoBlending=L,O.NoColorSpace=na,O.NoToneMapping=hn,O.NormalAnimationBlendMode=Oh,O.NormalBlending=D,O.NotEqualDepth=tn,O.NotEqualStencilFunc=_M,O.NumberKeyframeTrack=Qc,O.Object3D=Bn,O.ObjectLoader=oA,O.ObjectSpaceNormalMap=Jm,O.OctahedronBufferGeometry=h1,O.OctahedronGeometry=gl,O.OneFactor=we,O.OneMinusDstAlphaFactor=be,O.OneMinusDstColorFactor=nt,O.OneMinusSrcAlphaFactor=ye,O.OneMinusSrcColorFactor=de,O.OrthographicCamera=cu,O.PCFShadowMap=v,O.PCFSoftShadowMap=x,O.PMREMGenerator=_d,O.Path=Fc,O.PerspectiveCamera=Fi,O.Plane=ca,O.PlaneBufferGeometry=u1,O.PlaneGeometry=tl,O.PlaneHelper=JA,O.PointLight=a0,O.PointLightHelper=HA,O.Points=E_,O.PointsMaterial=Rd,O.PolarGridHelper=qA,O.PolyhedronBufferGeometry=f1,O.PolyhedronGeometry=Os,O.PositionalAudio=_A,O.PropertyBinding=Fn,O.PropertyMixer=S0,O.QuadraticBezierCurve=Fd,O.QuadraticBezierCurve3=Od,O.Quaternion=or,O.QuaternionKeyframeTrack=xl,O.QuaternionLinearInterpolant=Q_,O.RED_GREEN_RGTC2_Format=kf,O.RED_RGTC1_Format=Nh,O.REVISION=h,O.RGBADepthPacking=$m,O.RGBAFormat=Jn,O.RGBAIntegerFormat=Ne,O.RGBA_ASTC_10x10_Format=Yr,O.RGBA_ASTC_10x5_Format=Rs,O.RGBA_ASTC_10x6_Format=Ia,O.RGBA_ASTC_10x8_Format=bi,O.RGBA_ASTC_12x10_Format=Na,O.RGBA_ASTC_12x12_Format=Ii,O.RGBA_ASTC_4x4_Format=$i,O.RGBA_ASTC_5x4_Format=Xr,O.RGBA_ASTC_5x5_Format=ni,O.RGBA_ASTC_6x5_Format=bn,O.RGBA_ASTC_6x6_Format=Ua,O.RGBA_ASTC_8x5_Format=ci,O.RGBA_ASTC_8x6_Format=qr,O.RGBA_ASTC_8x8_Format=Io,O.RGBA_BPTC_Format=Qs,O.RGBA_ETC2_EAC_Format=Ei,O.RGBA_PVRTC_2BPPV1_Format=mn,O.RGBA_PVRTC_4BPPV1_Format=pn,O.RGBA_S3TC_DXT1_Format=ze,O.RGBA_S3TC_DXT3_Format=zt,O.RGBA_S3TC_DXT5_Format=Vt,O.RGB_ETC1_Format=yn,O.RGB_ETC2_Format=On,O.RGB_PVRTC_2BPPV1_Format=ln,O.RGB_PVRTC_4BPPV1_Format=Qt,O.RGB_S3TC_DXT1_Format=me,O.RGFormat=$,O.RGIntegerFormat=ve,O.RawShaderMaterial=H_,O.Ray=Sc,O.Raycaster=NA,O.RectAreaLight=c0,O.RedFormat=Uh,O.RedIntegerFormat=Ih,O.ReinhardToneMapping=un,O.RepeatWrapping=Re,O.ReplaceStencilOp=aM,O.ReverseSubtractEquation=re,O.RingBufferGeometry=d1,O.RingGeometry=qc,O.SIGNED_RED_GREEN_RGTC2_Format=Gf,O.SIGNED_RED_RGTC1_Format=No,O.SRGBColorSpace=gn,O.Scene=e_,O.ShaderChunk=xn,O.ShaderLib=Qr,O.ShaderMaterial=ps,O.ShadowMaterial=G_,O.Shape=Ya,O.ShapeBufferGeometry=p1,O.ShapeGeometry=Yc,O.ShapePath=e1,O.ShapeUtils=gs,O.ShortType=ce,O.Skeleton=yu,O.SkeletonHelper=GA,O.SkinnedMesh=u_,O.Source=za,O.Sphere=fs,O.SphereBufferGeometry=m1,O.SphereGeometry=_l,O.Spherical=FA,O.SphericalHarmonics3=h0,O.SplineCurve=Bd,O.SpotLight=r0,O.SpotLightHelper=kA,O.Sprite=r_,O.SpriteMaterial=bd,O.SrcAlphaFactor=xe,O.SrcAlphaSaturateFactor=Ye,O.SrcColorFactor=Ae,O.StaticCopyUsage=bM,O.StaticDrawUsage=gc,O.StaticReadUsage=MM,O.StereoCamera=dA,O.StreamCopyUsage=wM,O.StreamDrawUsage=yM,O.StreamReadUsage=EM,O.StringKeyframeTrack=Ja,O.SubtractEquation=Q,O.SubtractiveBlending=W,O.TOUCH=i,O.TangentSpaceNormalMap=ta,O.TetrahedronBufferGeometry=g1,O.TetrahedronGeometry=Zc,O.Texture=di,O.TextureLoader=iA,O.TorusBufferGeometry=_1,O.TorusGeometry=Kc,O.TorusKnotBufferGeometry=x1,O.TorusKnotGeometry=$c,O.Triangle=lr,O.TriangleFanDrawMode=rM,O.TriangleStripDrawMode=iM,O.TrianglesDrawMode=nM,O.TubeBufferGeometry=v1,O.TubeGeometry=Jc,O.TwoPassDoubleSide=N,O.UVMapping=$n,O.Uint16BufferAttribute=hd,O.Uint32BufferAttribute=ud,O.Uint8BufferAttribute=hS,O.Uint8ClampedBufferAttribute=uS,O.Uniform=ip,O.UniformsGroup=DA,O.UniformsLib=gt,O.UniformsUtils=yg,O.UnsignedByteType=nn,O.UnsignedInt248Type=zi,O.UnsignedIntType=xt,O.UnsignedShort4444Type=Gn,O.UnsignedShort5551Type=Si,O.UnsignedShortType=Ie,O.VSMShadowMap=M,O.Vector2=Je,O.Vector3=j,O.Vector4=Hn,O.VectorKeyframeTrack=eh,O.VideoTexture=gw,O.WebGL1Renderer=Qg,O.WebGL3DRenderTarget=JM,O.WebGLArrayRenderTarget=$M,O.WebGLCubeRenderTarget=Sg,O.WebGLMultipleRenderTargets=jM,O.WebGLRenderTarget=Kr,O.WebGLRenderer=jg,O.WebGLUtils=Kg,O.WireframeGeometry=B_,O.WrapAroundEnding=mc,O.ZeroCurvatureEnding=Fa,O.ZeroFactor=te,O.ZeroSlopeEnding=Oa,O.ZeroStencilOp=sM,O._SRGBAFormat=zh,O.sRGBEncoding=ea,O}var $U=xh.exports,wv;function JU(){return wv||(wv=1,function(h,t){(function(){var i=this,s=typeof ZU<"u",o=i.THREE||s&&KU();if(!o)throw new Error("MeshLine requires three.js");class f extends o.BufferGeometry{constructor(){super(),this.isMeshLine=!0,this.type="MeshLine",this.positions=[],this.previous=[],this.next=[],this.side=[],this.width=[],this.indices_array=[],this.uvs=[],this.counters=[],this._points=[],this._geom=null,this.widthCallback=null,this.matrixWorld=new o.Matrix4,Object.defineProperties(this,{geometry:{enumerable:!0,get:function(){return this}},geom:{enumerable:!0,get:function(){return this._geom},set:function(M){this.setGeometry(M,this.widthCallback)}},points:{enumerable:!0,get:function(){return this._points},set:function(M){this.setPoints(M,this.widthCallback)}}})}}f.prototype.setMatrixWorld=function(x){this.matrixWorld=x},f.prototype.setGeometry=function(x,M){this._geometry=x,this.setPoints(x.getAttribute("position").array,M)},f.prototype.setPoints=function(x,M){if(!(x instanceof Float32Array)&&!(x instanceof Array)){console.error("ERROR: The BufferArray of points is not instancied correctly.");return}if(this._points=x,this.widthCallback=M,this.positions=[],this.counters=[],x.length&&x[0]instanceof o.Vector3)for(var b=0;b<x.length;b++){var T=x[b],P=b/x.length;this.positions.push(T.x,T.y,T.z),this.positions.push(T.x,T.y,T.z),this.counters.push(P),this.counters.push(P)}else for(var b=0;b<x.length;b+=3){var P=b/x.length;this.positions.push(x[b],x[b+1],x[b+2]),this.positions.push(x[b],x[b+1],x[b+2]),this.counters.push(P),this.counters.push(P)}this.process()};function m(x,M){var b=new o.Matrix4,T=new o.Ray,P=new o.Sphere,N=new o.Vector3,L=this.geometry;if(L.boundingSphere||L.computeBoundingSphere(),P.copy(L.boundingSphere),P.applyMatrix4(this.matrixWorld),x.ray.intersectSphere(P,N)!==!1){b.copy(this.matrixWorld).invert(),T.copy(x.ray).applyMatrix4(b);var D=new o.Vector3,R=new o.Vector3,W=new o.Vector3,V=this instanceof o.LineSegments?2:1,q=L.index,H=L.attributes;if(q!==null)for(var Q=q.array,re=H.position.array,oe=H.width.array,B=0,te=Q.length-1;B<te;B+=V){var we=Q[B],Ae=Q[B+1];D.fromArray(re,we*3),R.fromArray(re,Ae*3);var de=oe[Math.floor(B/3)]!==void 0?oe[Math.floor(B/3)]:1,xe=x.params.Line.threshold+this.material.lineWidth*de/2,ye=xe*xe,He=T.distanceSqToSegment(D,R,N,W);if(!(He>ye)){N.applyMatrix4(this.matrixWorld);var be=x.ray.origin.distanceTo(N);be<x.near||be>x.far||(M.push({distance:be,point:W.clone().applyMatrix4(this.matrixWorld),index:B,face:null,faceIndex:null,object:this}),B=te)}}}}f.prototype.raycast=m,f.prototype.compareV3=function(x,M){var b=x*6,T=M*6;return this.positions[b]===this.positions[T]&&this.positions[b+1]===this.positions[T+1]&&this.positions[b+2]===this.positions[T+2]},f.prototype.copyV3=function(x){var M=x*6;return[this.positions[M],this.positions[M+1],this.positions[M+2]]},f.prototype.process=function(){var x=this.positions.length/6;this.previous=[],this.next=[],this.side=[],this.width=[],this.indices_array=[],this.uvs=[];var M,b;this.compareV3(0,x-1)?b=this.copyV3(x-2):b=this.copyV3(0),this.previous.push(b[0],b[1],b[2]),this.previous.push(b[0],b[1],b[2]);for(var T=0;T<x;T++){if(this.side.push(1),this.side.push(-1),this.widthCallback?M=this.widthCallback(T/(x-1)):M=1,this.width.push(M),this.width.push(M),this.uvs.push(T/(x-1),0),this.uvs.push(T/(x-1),1),T<x-1){b=this.copyV3(T),this.previous.push(b[0],b[1],b[2]),this.previous.push(b[0],b[1],b[2]);var P=T*2;this.indices_array.push(P,P+1,P+2),this.indices_array.push(P+2,P+1,P+3)}T>0&&(b=this.copyV3(T),this.next.push(b[0],b[1],b[2]),this.next.push(b[0],b[1],b[2]))}this.compareV3(x-1,0)?b=this.copyV3(1):b=this.copyV3(x-1),this.next.push(b[0],b[1],b[2]),this.next.push(b[0],b[1],b[2]),!this._attributes||this._attributes.position.count!==this.positions.length?this._attributes={position:new o.BufferAttribute(new Float32Array(this.positions),3),previous:new o.BufferAttribute(new Float32Array(this.previous),3),next:new o.BufferAttribute(new Float32Array(this.next),3),side:new o.BufferAttribute(new Float32Array(this.side),1),width:new o.BufferAttribute(new Float32Array(this.width),1),uv:new o.BufferAttribute(new Float32Array(this.uvs),2),index:new o.BufferAttribute(new Uint16Array(this.indices_array),1),counters:new o.BufferAttribute(new Float32Array(this.counters),1)}:(this._attributes.position.copyArray(new Float32Array(this.positions)),this._attributes.position.needsUpdate=!0,this._attributes.previous.copyArray(new Float32Array(this.previous)),this._attributes.previous.needsUpdate=!0,this._attributes.next.copyArray(new Float32Array(this.next)),this._attributes.next.needsUpdate=!0,this._attributes.side.copyArray(new Float32Array(this.side)),this._attributes.side.needsUpdate=!0,this._attributes.width.copyArray(new Float32Array(this.width)),this._attributes.width.needsUpdate=!0,this._attributes.uv.copyArray(new Float32Array(this.uvs)),this._attributes.uv.needsUpdate=!0,this._attributes.index.copyArray(new Uint16Array(this.indices_array)),this._attributes.index.needsUpdate=!0),this.setAttribute("position",this._attributes.position),this.setAttribute("previous",this._attributes.previous),this.setAttribute("next",this._attributes.next),this.setAttribute("side",this._attributes.side),this.setAttribute("width",this._attributes.width),this.setAttribute("uv",this._attributes.uv),this.setAttribute("counters",this._attributes.counters),this.setIndex(this._attributes.index),this.computeBoundingSphere(),this.computeBoundingBox()};function p(x,M,b,T,P){var N;if(x=x.subarray||x.slice?x:x.buffer,b=b.subarray||b.slice?b:b.buffer,x=M?x.subarray?x.subarray(M,P&&M+P):x.slice(M,P&&M+P):x,b.set)b.set(x,T);else for(N=0;N<x.length;N++)b[N+T]=x[N];return b}f.prototype.advance=function(x){var M=this._attributes.position.array,b=this._attributes.previous.array,T=this._attributes.next.array,P=M.length;p(M,0,b,0,P),p(M,6,M,0,P-6),M[P-6]=x.x,M[P-5]=x.y,M[P-4]=x.z,M[P-3]=x.x,M[P-2]=x.y,M[P-1]=x.z,p(M,6,T,0,P-6),T[P-6]=x.x,T[P-5]=x.y,T[P-4]=x.z,T[P-3]=x.x,T[P-2]=x.y,T[P-1]=x.z,this._attributes.position.needsUpdate=!0,this._attributes.previous.needsUpdate=!0,this._attributes.next.needsUpdate=!0},o.ShaderChunk.meshline_vert=["",o.ShaderChunk.logdepthbuf_pars_vertex,o.ShaderChunk.fog_pars_vertex,"","attribute vec3 previous;","attribute vec3 next;","attribute float side;","attribute float width;","attribute float counters;","","uniform vec2 resolution;","uniform float lineWidth;","uniform vec3 color;","uniform float opacity;","uniform float sizeAttenuation;","","varying vec2 vUV;","varying vec4 vColor;","varying float vCounters;","","vec2 fix( vec4 i, float aspect ) {","","    vec2 res = i.xy / i.w;","    res.x *= aspect;","	 vCounters = counters;","    return res;","","}","","void main() {","","    float aspect = resolution.x / resolution.y;","","    vColor = vec4( color, opacity );","    vUV = uv;","","    mat4 m = projectionMatrix * modelViewMatrix;","    vec4 finalPosition = m * vec4( position, 1.0 );","    vec4 prevPos = m * vec4( previous, 1.0 );","    vec4 nextPos = m * vec4( next, 1.0 );","","    vec2 currentP = fix( finalPosition, aspect );","    vec2 prevP = fix( prevPos, aspect );","    vec2 nextP = fix( nextPos, aspect );","","    float w = lineWidth * width;","","    vec2 dir;","    if( nextP == currentP ) dir = normalize( currentP - prevP );","    else if( prevP == currentP ) dir = normalize( nextP - currentP );","    else {","        vec2 dir1 = normalize( currentP - prevP );","        vec2 dir2 = normalize( nextP - currentP );","        dir = normalize( dir1 + dir2 );","","        vec2 perp = vec2( -dir1.y, dir1.x );","        vec2 miter = vec2( -dir.y, dir.x );","        //w = clamp( w / dot( miter, perp ), 0., 4. * lineWidth * width );","","    }","","    //vec2 normal = ( cross( vec3( dir, 0. ), vec3( 0., 0., 1. ) ) ).xy;","    vec4 normal = vec4( -dir.y, dir.x, 0., 1. );","    normal.xy *= .5 * w;","    normal *= projectionMatrix;","    if( sizeAttenuation == 0. ) {","        normal.xy *= finalPosition.w;","        normal.xy /= ( vec4( resolution, 0., 1. ) * projectionMatrix ).xy;","    }","","    finalPosition.xy += normal.xy * side;","","    gl_Position = finalPosition;","",o.ShaderChunk.logdepthbuf_vertex,o.ShaderChunk.fog_vertex&&"    vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );",o.ShaderChunk.fog_vertex,"}"].join(`
`),o.ShaderChunk.meshline_frag=["",o.ShaderChunk.fog_pars_fragment,o.ShaderChunk.logdepthbuf_pars_fragment,"","uniform sampler2D map;","uniform sampler2D alphaMap;","uniform float useMap;","uniform float useAlphaMap;","uniform float useDash;","uniform float dashArray;","uniform float dashOffset;","uniform float dashRatio;","uniform float visibility;","uniform float alphaTest;","uniform vec2 repeat;","","varying vec2 vUV;","varying vec4 vColor;","varying float vCounters;","","void main() {","",o.ShaderChunk.logdepthbuf_fragment,"","    vec4 c = vColor;","    if( useMap == 1. ) c *= texture2D( map, vUV * repeat );","    if( useAlphaMap == 1. ) c.a *= texture2D( alphaMap, vUV * repeat ).a;","    if( c.a < alphaTest ) discard;","    if( useDash == 1. ){","        c.a *= ceil(mod(vCounters + dashOffset, dashArray) - (dashArray * dashRatio));","    }","    gl_FragColor = c;","    gl_FragColor.a *= step(vCounters, visibility);","",o.ShaderChunk.fog_fragment,"}"].join(`
`);class v extends o.ShaderMaterial{constructor(M){super({uniforms:Object.assign({},o.UniformsLib.fog,{lineWidth:{value:1},map:{value:null},useMap:{value:0},alphaMap:{value:null},useAlphaMap:{value:0},color:{value:new o.Color(16777215)},opacity:{value:1},resolution:{value:new o.Vector2(1,1)},sizeAttenuation:{value:1},dashArray:{value:0},dashOffset:{value:0},dashRatio:{value:.5},useDash:{value:0},visibility:{value:1},alphaTest:{value:0},repeat:{value:new o.Vector2(1,1)}}),vertexShader:o.ShaderChunk.meshline_vert,fragmentShader:o.ShaderChunk.meshline_frag}),this.isMeshLineMaterial=!0,this.type="MeshLineMaterial",Object.defineProperties(this,{lineWidth:{enumerable:!0,get:function(){return this.uniforms.lineWidth.value},set:function(b){this.uniforms.lineWidth.value=b}},map:{enumerable:!0,get:function(){return this.uniforms.map.value},set:function(b){this.uniforms.map.value=b}},useMap:{enumerable:!0,get:function(){return this.uniforms.useMap.value},set:function(b){this.uniforms.useMap.value=b}},alphaMap:{enumerable:!0,get:function(){return this.uniforms.alphaMap.value},set:function(b){this.uniforms.alphaMap.value=b}},useAlphaMap:{enumerable:!0,get:function(){return this.uniforms.useAlphaMap.value},set:function(b){this.uniforms.useAlphaMap.value=b}},color:{enumerable:!0,get:function(){return this.uniforms.color.value},set:function(b){this.uniforms.color.value=b}},opacity:{enumerable:!0,get:function(){return this.uniforms.opacity.value},set:function(b){this.uniforms.opacity.value=b}},resolution:{enumerable:!0,get:function(){return this.uniforms.resolution.value},set:function(b){this.uniforms.resolution.value.copy(b)}},sizeAttenuation:{enumerable:!0,get:function(){return this.uniforms.sizeAttenuation.value},set:function(b){this.uniforms.sizeAttenuation.value=b}},dashArray:{enumerable:!0,get:function(){return this.uniforms.dashArray.value},set:function(b){this.uniforms.dashArray.value=b,this.useDash=b!==0?1:0}},dashOffset:{enumerable:!0,get:function(){return this.uniforms.dashOffset.value},set:function(b){this.uniforms.dashOffset.value=b}},dashRatio:{enumerable:!0,get:function(){return this.uniforms.dashRatio.value},set:function(b){this.uniforms.dashRatio.value=b}},useDash:{enumerable:!0,get:function(){return this.uniforms.useDash.value},set:function(b){this.uniforms.useDash.value=b}},visibility:{enumerable:!0,get:function(){return this.uniforms.visibility.value},set:function(b){this.uniforms.visibility.value=b}},alphaTest:{enumerable:!0,get:function(){return this.uniforms.alphaTest.value},set:function(b){this.uniforms.alphaTest.value=b}},repeat:{enumerable:!0,get:function(){return this.uniforms.repeat.value},set:function(b){this.uniforms.repeat.value.copy(b)}}}),this.setValues(M)}}v.prototype.copy=function(x){return o.ShaderMaterial.prototype.copy.call(this,x),this.lineWidth=x.lineWidth,this.map=x.map,this.useMap=x.useMap,this.alphaMap=x.alphaMap,this.useAlphaMap=x.useAlphaMap,this.color.copy(x.color),this.opacity=x.opacity,this.resolution.copy(x.resolution),this.sizeAttenuation=x.sizeAttenuation,this.dashArray.copy(x.dashArray),this.dashOffset.copy(x.dashOffset),this.dashRatio.copy(x.dashRatio),this.useDash=x.useDash,this.visibility=x.visibility,this.alphaTest=x.alphaTest,this.repeat.copy(x.repeat),this},h.exports&&(t=h.exports={MeshLine:f,MeshLineMaterial:v,MeshLineRaycast:m}),t.MeshLine=f,t.MeshLineMaterial=v,t.MeshLineRaycast=m}).call($U)}(xh,xh.exports)),xh.exports}var Av=JU();class Lh{constructor(t=null){this.serverWS=null,this.colors=null,t!=null?this.colors=t:this.colors=Lh.defaultColors(),this.sidebar=window.document.getElementById("sidebar"),this.foregroundCheckbox=document.getElementById("foreground"),this.backgroundCheckbox=document.getElementById("background"),this.shoeboxMeshes={},this.boxSize=100,this.boxGeometry=new Co(this.boxSize,this.boxSize,this.boxSize),this.axesMeshes=[],this.bboxMeshes=[],this.axesPadding=5,this.preventMouseClick=!1,this.cursorActive=!0,this.loading=!1,this.hightlightColor=new kn(this.colors.highlight),this.shoeboxForegroundColor=new kn(this.colors.shoeboxForeground),this.shoeboxBackgroundColor=new kn(this.colors.shoeboxBackground),this.integrationMethod=""}static defaultColors(){return{background:133143,highlight:16777215,shoeboxForeground:9894267,shoeboxBackground:6977160}}static cameraPositions(){return{default:new pe(0,0,-3e3)}}toggleSidebar(){this.sidebar.style.display=this.sidebar.style.display==="block"?"none":"block"}showSidebar(){this.sidebar.style.display="block"}enableMouseClick(){this.preventMouseClick=!1}setCameraToDefaultPosition(){this.setCameraSmooth(Lh.cameraPositions().default)}setCameraSmooth(t){this.rotateToPos(t),window.controls.update()}rotateToPos(t){tM.to(window.camera.position,{duration:1,x:-t.x,y:-t.y,z:-t.z,onUpdate:function(){window.camera.lookAt(t),window.viewer.requestRender()}})}getBboxMesh(t,i){const s=new ws().setFromPoints(i);return new LD(s,t)}updateIntegrationMethod(t){t!==this.integrationMethod&&(t in this.shoeboxMeshes?(this.foregroundCheckbox.checked=!0,this.foregroundCheckbox.disabled=!1,this.backgroundCheckbox.checked=!0,this.backgroundCheckbox.disabled=!1):(this.foregroundCheckbox.checked=!1,this.foregroundCheckbox.disabled=!0,this.backgroundCheckbox.checked=!1,this.backgroundCheckbox.disabled=!0),this.integrationMethod=t,this.updateShoeboxVisibility())}addReflectionFromData(t){this.loading=!0,this.integrationMethod=t.integration_method;const i=t.data,s=t.mask,o=i.length*this.boxSize/2,f=i[0].length*this.boxSize/2,m=i[0][0].length*this.boxSize/2;let p=0;for(let L=0;L<i.length;L++)for(let D=0;D<i[0].length;D++)for(let R=0;R<i[0][0].length;R++)(s[L][D][R]&4||s[L][D][R]&2)&&p++;const v=new Ra({uniforms:{foregroundColor:{value:new kn(this.shoeboxForegroundColor)},backgroundColor:{value:new kn(this.shoeboxBackgroundColor)}},vertexShader:`
            precision highp float;
            attribute float instanceOpacity;
            attribute float colorIndex; // 0 for background, 1 for foreground
            varying float vOpacity;
            varying float vColorIndex;
            void main() {
                vOpacity = instanceOpacity;
                vColorIndex = colorIndex;
                gl_Position = projectionMatrix * modelViewMatrix * instanceMatrix * vec4(position, 1.0);
            }
        `,fragmentShader:`
            precision highp float;
            uniform vec3 foregroundColor;
            uniform vec3 backgroundColor;
            varying float vOpacity;
            varying float vColorIndex;
            void main() {
                vec3 color = mix(backgroundColor, foregroundColor, vColorIndex);
                gl_FragColor = vec4(color, vOpacity);
            }
        `,transparent:!0,depthWrite:!1});if(this.integrationMethod in this.shoeboxMeshes){const L=this.shoeboxMeshes[this.integrationMethod];window.scene.remove(L),L.geometry.dispose(),L.material.dispose(),L.isInstancedMesh&&(L.count=0,L.instanceMatrix.setUsage(Sf),L.instanceMatrix.needsUpdate=!0)}const x=new Co(this.boxSize,this.boxSize,this.boxSize).clone(),M=new CD(x,v,p);let b=0;const T=new oi,P=new Float32Array(p),N=new Float32Array(p);for(let L=0;L<i.length;L++)for(let D=0;D<i[0].length;D++)for(let R=0;R<i[0][0].length;R++){const W=i[L][D][R],V=new pe(L*this.boxSize-o,D*this.boxSize-f,R*this.boxSize-m);T.makeTranslation(V.x,V.y,V.z),s[L][D][R]&4?(M.setMatrixAt(b,T),P[b]=Math.min(Math.max(W,0),1),N[b]=1,b++):s[L][D][R]&2&&(M.setMatrixAt(b,T),P[b]=Math.min(Math.max(W,0),1),N[b]=0,b++)}M.geometry.setAttribute("instanceOpacity",new Tf(P,1)),M.geometry.setAttribute("colorIndex",new Tf(N,1)),M.instanceMatrix.needsUpdate=!0,M.geometry.attributes.instanceOpacity.needsUpdate=!0,M.geometry.attributes.colorIndex.needsUpdate=!0,M.geometry.attributes.position.needsUpdate=!0,M.geometry.attributes.normal.needsUpdate=!0,M.geometry.attributes.uv.needsUpdate=!0,M.instanceMatrix.needsUpdate=!0,M.instanceMatrix.setUsage(xp),M.geometry.attributes.instanceOpacity.setUsage(xp),M.geometry.attributes.colorIndex.setUsage(xp),M.integrationMethod=this.integrationMethod,window.scene.add(M),this.shoeboxMeshes[this.integrationMethod]=M,this.loading=!1,this.foregroundCheckbox.disabled=!1,this.backgroundCheckbox.disabled=!1,this.foregroundCheckbox.checked=!0,this.backgroundCheckbox.checked=!0,this.updateShoeboxVisibility(),this.requestRender()}disableMouseClick(){this.preventMouseClick=!0}enableMouseClick(){this.preventMouseClick=!1}clearBboxMesh(){for(let t=0;t<this.bboxMeshes.length;t++)window.scene.remove(this.bboxMeshes[t]),this.bboxMeshes[t].geometry.dispose(),this.bboxMeshes[t].material.dispose();this.bboxMeshes=[]}clearAxes(){for(let t=0;t<this.axesMeshes.length;t++)window.scene.remove(this.axesMeshes[t]),this.axesMeshes[t].geometry.dispose(),this.axesMeshes[t].material.dispose();this.axesMeshes=[]}addAxes(t,i){function s(b,T,P,N){var L=document.createElement("canvas"),D=L.getContext("2d"),R=32,W=R*N;D.font="Bold "+W+"px Tahoma";var V=D.measureText(b).width;L.width=V+20,L.height=W+20,D=L.getContext("2d"),D.font="Bold "+W+"px Tahoma",D.fillStyle=P,D.textAlign="center",D.textBaseline="middle",D.fillText(b,L.width/2,L.height/2);var q=new DD(L),H=new ey({map:q,transparent:!0,alphaTest:.5,depthWrite:!1,depthTest:!1,sizeAttenuation:!0}),Q=new AD(H);Q.scale.set(L.width/10*N,L.height/10*N,1),Q.position.copy(T),window.viewer.axesMeshes||(window.viewer.axesMeshes=[]),window.viewer.axesMeshes.push(Q),window.scene.add(Q),window.viewer.requestRender()}function o(b,T,P){const N=new Av.MeshLine;N.setPoints(T);const L=new Av.MeshLineMaterial({lineWidth:5,color:P,transparent:!0,opacity:.5,depthWrite:!1}),D=new cs(N,L);b.axesMeshes.push(D),window.scene.add(D)}this.axesMeshes=[];const f=t.clone().add(new pe(0,0,1).multiplyScalar(i.z)),m=t.clone().add(new pe(0,1,0).multiplyScalar(i.y)),p=t.clone().add(new pe(1,0,0).multiplyScalar(i.x)),v=[t,f],x=[t,m],M=[t,p];o(this,v,this.colors.highlight),s("Z",p.clone().add(new pe(10,0,0)),"white",3),o(this,x,this.colors.highlight),s("Y",m.clone().add(new pe(0,10,0)),"white",3),o(this,M,this.colors.highlight),s("X",f.clone().add(new pe(0,0,10)),"white",3),this.requestRender()}updateShoeboxVisibility(){if(Object.values(this.shoeboxMeshes).forEach(t=>{t.isInstancedMesh&&(t.count=t.visible?t.instanceMatrix.count:0,t.instanceMatrix.needsUpdate=!0),t.visible=!1}),this.integrationMethod in this.shoeboxMeshes){const t=this.shoeboxMeshes[this.integrationMethod];t.visible=!0,t.isInstancedMesh&&(t.count=t.instanceMatrix.count,t.instanceMatrix.needsUpdate=!0,t.geometry.attributes.instanceOpacity.needsUpdate=!0,t.geometry.attributes.colorIndex.needsUpdate=!0,t.frustumCulled=!1)}this.requestRender()}clearShoebox(){for(let t in this.shoeboxMeshes)window.scene.remove(this.shoeboxMeshes[t]),this.shoeboxMeshes[t].geometry.dispose(),this.shoeboxMeshes[t].material.dispose();this.shoeboxMeshes={},this.foregroundCheckbox.disabled=!0,this.backgroundCheckbox.disabled=!0,this.foregroundCheckbox.checked=!1,this.backgroundCheckbox.checked=!1,this.clearAxes(),this.requestRender(),this.integrationMethod=""}requestRender(){typeof window<"u"&&!this.renderRequested&&(this.renderRequested=!0,window.requestAnimationFrame(this.animate.bind(this)))}animate(){this.renderRequested&&(window.controls.update(),window.renderer.render(window.scene,window.camera),this.renderRequested=!1,window.viewer.enableMouseClick())}}function jU(){typeof window.viewer>"u"||(window.renderer=new Qv,window.renderer.setClearColor(window.viewer.colors.background),window.renderer.setSize(window.innerWidth,window.innerHeight),document.body.appendChild(window.renderer.domElement),window.scene=new TD,window.camera=new zr(45,window.innerWidth/window.innerHeight,100,1e5),window.renderer.render(window.scene,window.camera),window.rayCaster=new UD,window.controls=new ID(window.camera,window.renderer.domElement),window.controls.maxDistance=5e4,window.controls.enablePan=!1,window.controls.update(),window.controls.addEventListener("change",function(){window.viewer.requestRender()}),window.mousePosition=new cn,window.addEventListener("mousemove",function(h){window.mousePosition.x=h.clientX/window.innerWidth*2-1,window.mousePosition.y=-(h.clientY/window.innerHeight)*2+1,window.viewer.requestRender()}),window.addEventListener("resize",function(){window.camera.aspect=window.innerWidth/window.innerHeight,window.camera.updateProjectionMatrix(),window.renderer.setSize(window.innerWidth,window.innerHeight),window.viewer.requestRender()}),window.addEventListener("mousedown",function(h){h.button==2&&window.viewer.rotateToPos(Lh.cameraPositions().default)}),window.addEventListener("mouseout",function(h){this.window.viewer.cursorActive=!1}),window.addEventListener("mouseover",function(h){this.window.viewer.cursorActive=!0}),window.addEventListener("keydown",function(h){h.key==="s"&&window.viewer.toggleSidebar()}),window.viewer.setCameraToDefaultPosition(),window.viewer.requestRender())}function QU(h){return"channel"in h&&h.channel=="shoebox_viewer"}const eI="ws://127.0.0.1:50010/",tI={background:133143,highlight:16777215,shoeboxForeground:9894267,shoeboxBackground:6977160};window.viewer=new Lh(tI);window.viewer.serverWS=new WebSocket(eI);window.viewer.serverWS.onopen=()=>{console.log("Shoebox viewer opened Connection to server"),window.viewer.serverWS.send(JSON.stringify({channel:"server",command:"record_connection",id:"shoebox_viewer"}))};window.viewer.serverWS.onclose=()=>{console.log("Shoebox viewer closed Connection to server")};window.viewer.serverWS.onmessage=h=>{console.log("msg received",h.data);const t=JSON.parse(h.data);if(!QU(t))return;const i=t.command;switch(i){case"update_integration_method":window.viewer.updateIntegrationMethod(t.integration_method);break;case"clear_shoebox":window.viewer.clearShoebox();break;case"update_reflection":delete t.command,delete t.channel,window.viewer.addReflectionFromData(t);break;case"loading_reflection":window.viewer.showLoadingReflectionMsg();break;case"toggle_sidebar":window.viewer.toggleSidebar();break;default:console.warn("Unrecognised command ",i)}};jU();
