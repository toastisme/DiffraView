var iD=Object.defineProperty;var rD=(a,t,n)=>t in a?iD(a,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):a[t]=n;var co=(a,t,n)=>rD(a,typeof t!="symbol"?t+"":t,n);(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const o of document.querySelectorAll('link[rel="modulepreload"]'))r(o);new MutationObserver(o=>{for(const c of o)if(c.type==="childList")for(const d of c.addedNodes)d.tagName==="LINK"&&d.rel==="modulepreload"&&r(d)}).observe(document,{childList:!0,subtree:!0});function n(o){const c={};return o.integrity&&(c.integrity=o.integrity),o.referrerPolicy&&(c.referrerPolicy=o.referrerPolicy),o.crossOrigin==="use-credentials"?c.credentials="include":o.crossOrigin==="anonymous"?c.credentials="omit":c.credentials="same-origin",c}function r(o){if(o.ep)return;o.ep=!0;const c=n(o);fetch(o.href,c)}})();/**
 * @license
 * Copyright 2010-2024 Three.js Authors
 * SPDX-License-Identifier: MIT
 */const rx="172",rh={ROTATE:0,DOLLY:1,PAN:2},eh={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3},sD=0,$M=1,aD=2,uE=1,oD=2,Na=3,Do=0,$r=1,ka=2,Eo=0,sh=1,KM=2,JM=3,jM=4,lD=5,Tl=100,cD=101,hD=102,uD=103,fD=104,dD=200,pD=201,mD=202,_D=203,Xg=204,qg=205,gD=206,xD=207,vD=208,yD=209,MD=210,SD=211,bD=212,ED=213,wD=214,Yg=0,Zg=1,$g=2,fh=3,Kg=4,Jg=5,jg=6,Qg=7,fE=0,TD=1,AD=2,wo=0,RD=1,CD=2,PD=3,ID=4,DD=5,LD=6,UD=7,dE=300,dh=301,ph=302,e0=303,t0=304,im=306,n0=1e3,Rl=1001,i0=1002,$s=1003,ND=1004,Xd=1005,ca=1006,G_=1007,Cl=1008,Wa=1009,pE=1010,mE=1011,Hu=1012,sx=1013,Bl=1014,Va=1015,of=1016,ax=1017,ox=1018,mh=1020,_E=35902,gE=1021,xE=1022,Zs=1023,vE=1024,yE=1025,ah=1026,_h=1027,ME=1028,lx=1029,SE=1030,cx=1031,hx=1033,Ap=33776,Rp=33777,Cp=33778,Pp=33779,r0=35840,s0=35841,a0=35842,o0=35843,l0=36196,c0=37492,h0=37496,u0=37808,f0=37809,d0=37810,p0=37811,m0=37812,_0=37813,g0=37814,x0=37815,v0=37816,y0=37817,M0=37818,S0=37819,b0=37820,E0=37821,Ip=36492,w0=36494,T0=36495,bE=36283,A0=36284,R0=36285,C0=36286,FD=3200,OD=3201,BD=0,zD=1,xo="",Es="srgb",gh="srgb-linear",zp="linear",pi="srgb",Dc=7680,QM=519,kD=512,VD=513,HD=514,EE=515,GD=516,WD=517,XD=518,qD=519,kp=35044,eS="300 es",Ha=2e3,Vp=2001;class Xl{addEventListener(t,n){this._listeners===void 0&&(this._listeners={});const r=this._listeners;r[t]===void 0&&(r[t]=[]),r[t].indexOf(n)===-1&&r[t].push(n)}hasEventListener(t,n){if(this._listeners===void 0)return!1;const r=this._listeners;return r[t]!==void 0&&r[t].indexOf(n)!==-1}removeEventListener(t,n){if(this._listeners===void 0)return;const o=this._listeners[t];if(o!==void 0){const c=o.indexOf(n);c!==-1&&o.splice(c,1)}}dispatchEvent(t){if(this._listeners===void 0)return;const r=this._listeners[t.type];if(r!==void 0){t.target=this;const o=r.slice(0);for(let c=0,d=o.length;c<d;c++)o[c].call(this,t);t.target=null}}}const Mr=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"],Dp=Math.PI/180,P0=180/Math.PI;function To(){const a=Math.random()*4294967295|0,t=Math.random()*4294967295|0,n=Math.random()*4294967295|0,r=Math.random()*4294967295|0;return(Mr[a&255]+Mr[a>>8&255]+Mr[a>>16&255]+Mr[a>>24&255]+"-"+Mr[t&255]+Mr[t>>8&255]+"-"+Mr[t>>16&15|64]+Mr[t>>24&255]+"-"+Mr[n&63|128]+Mr[n>>8&255]+"-"+Mr[n>>16&255]+Mr[n>>24&255]+Mr[r&255]+Mr[r>>8&255]+Mr[r>>16&255]+Mr[r>>24&255]).toLowerCase()}function Bn(a,t,n){return Math.max(t,Math.min(n,a))}function YD(a,t){return(a%t+t)%t}function W_(a,t,n){return(1-n)*a+n*t}function aa(a,t){switch(t.constructor){case Float32Array:return a;case Uint32Array:return a/4294967295;case Uint16Array:return a/65535;case Uint8Array:return a/255;case Int32Array:return Math.max(a/2147483647,-1);case Int16Array:return Math.max(a/32767,-1);case Int8Array:return Math.max(a/127,-1);default:throw new Error("Invalid component type.")}}function mi(a,t){switch(t.constructor){case Float32Array:return a;case Uint32Array:return Math.round(a*4294967295);case Uint16Array:return Math.round(a*65535);case Uint8Array:return Math.round(a*255);case Int32Array:return Math.round(a*2147483647);case Int16Array:return Math.round(a*32767);case Int8Array:return Math.round(a*127);default:throw new Error("Invalid component type.")}}const ZD={DEG2RAD:Dp};class ln{constructor(t=0,n=0){ln.prototype.isVector2=!0,this.x=t,this.y=n}get width(){return this.x}set width(t){this.x=t}get height(){return this.y}set height(t){this.y=t}set(t,n){return this.x=t,this.y=n,this}setScalar(t){return this.x=t,this.y=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setComponent(t,n){switch(t){case 0:this.x=n;break;case 1:this.y=n;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y)}copy(t){return this.x=t.x,this.y=t.y,this}add(t){return this.x+=t.x,this.y+=t.y,this}addScalar(t){return this.x+=t,this.y+=t,this}addVectors(t,n){return this.x=t.x+n.x,this.y=t.y+n.y,this}addScaledVector(t,n){return this.x+=t.x*n,this.y+=t.y*n,this}sub(t){return this.x-=t.x,this.y-=t.y,this}subScalar(t){return this.x-=t,this.y-=t,this}subVectors(t,n){return this.x=t.x-n.x,this.y=t.y-n.y,this}multiply(t){return this.x*=t.x,this.y*=t.y,this}multiplyScalar(t){return this.x*=t,this.y*=t,this}divide(t){return this.x/=t.x,this.y/=t.y,this}divideScalar(t){return this.multiplyScalar(1/t)}applyMatrix3(t){const n=this.x,r=this.y,o=t.elements;return this.x=o[0]*n+o[3]*r+o[6],this.y=o[1]*n+o[4]*r+o[7],this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this}clamp(t,n){return this.x=Bn(this.x,t.x,n.x),this.y=Bn(this.y,t.y,n.y),this}clampScalar(t,n){return this.x=Bn(this.x,t,n),this.y=Bn(this.y,t,n),this}clampLength(t,n){const r=this.length();return this.divideScalar(r||1).multiplyScalar(Bn(r,t,n))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(t){return this.x*t.x+this.y*t.y}cross(t){return this.x*t.y-this.y*t.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}angleTo(t){const n=Math.sqrt(this.lengthSq()*t.lengthSq());if(n===0)return Math.PI/2;const r=this.dot(t)/n;return Math.acos(Bn(r,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const n=this.x-t.x,r=this.y-t.y;return n*n+r*r}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,n){return this.x+=(t.x-this.x)*n,this.y+=(t.y-this.y)*n,this}lerpVectors(t,n,r){return this.x=t.x+(n.x-t.x)*r,this.y=t.y+(n.y-t.y)*r,this}equals(t){return t.x===this.x&&t.y===this.y}fromArray(t,n=0){return this.x=t[n],this.y=t[n+1],this}toArray(t=[],n=0){return t[n]=this.x,t[n+1]=this.y,t}fromBufferAttribute(t,n){return this.x=t.getX(n),this.y=t.getY(n),this}rotateAround(t,n){const r=Math.cos(n),o=Math.sin(n),c=this.x-t.x,d=this.y-t.y;return this.x=c*r-d*o+t.x,this.y=c*o+d*r+t.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}}class nn{constructor(t,n,r,o,c,d,p,v,_){nn.prototype.isMatrix3=!0,this.elements=[1,0,0,0,1,0,0,0,1],t!==void 0&&this.set(t,n,r,o,c,d,p,v,_)}set(t,n,r,o,c,d,p,v,_){const x=this.elements;return x[0]=t,x[1]=o,x[2]=p,x[3]=n,x[4]=c,x[5]=v,x[6]=r,x[7]=d,x[8]=_,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(t){const n=this.elements,r=t.elements;return n[0]=r[0],n[1]=r[1],n[2]=r[2],n[3]=r[3],n[4]=r[4],n[5]=r[5],n[6]=r[6],n[7]=r[7],n[8]=r[8],this}extractBasis(t,n,r){return t.setFromMatrix3Column(this,0),n.setFromMatrix3Column(this,1),r.setFromMatrix3Column(this,2),this}setFromMatrix4(t){const n=t.elements;return this.set(n[0],n[4],n[8],n[1],n[5],n[9],n[2],n[6],n[10]),this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,n){const r=t.elements,o=n.elements,c=this.elements,d=r[0],p=r[3],v=r[6],_=r[1],x=r[4],M=r[7],b=r[2],E=r[5],U=r[8],L=o[0],P=o[3],A=o[6],X=o[1],k=o[4],O=o[7],z=o[2],Y=o[5],W=o[8];return c[0]=d*L+p*X+v*z,c[3]=d*P+p*k+v*Y,c[6]=d*A+p*O+v*W,c[1]=_*L+x*X+M*z,c[4]=_*P+x*k+M*Y,c[7]=_*A+x*O+M*W,c[2]=b*L+E*X+U*z,c[5]=b*P+E*k+U*Y,c[8]=b*A+E*O+U*W,this}multiplyScalar(t){const n=this.elements;return n[0]*=t,n[3]*=t,n[6]*=t,n[1]*=t,n[4]*=t,n[7]*=t,n[2]*=t,n[5]*=t,n[8]*=t,this}determinant(){const t=this.elements,n=t[0],r=t[1],o=t[2],c=t[3],d=t[4],p=t[5],v=t[6],_=t[7],x=t[8];return n*d*x-n*p*_-r*c*x+r*p*v+o*c*_-o*d*v}invert(){const t=this.elements,n=t[0],r=t[1],o=t[2],c=t[3],d=t[4],p=t[5],v=t[6],_=t[7],x=t[8],M=x*d-p*_,b=p*v-x*c,E=_*c-d*v,U=n*M+r*b+o*E;if(U===0)return this.set(0,0,0,0,0,0,0,0,0);const L=1/U;return t[0]=M*L,t[1]=(o*_-x*r)*L,t[2]=(p*r-o*d)*L,t[3]=b*L,t[4]=(x*n-o*v)*L,t[5]=(o*c-p*n)*L,t[6]=E*L,t[7]=(r*v-_*n)*L,t[8]=(d*n-r*c)*L,this}transpose(){let t;const n=this.elements;return t=n[1],n[1]=n[3],n[3]=t,t=n[2],n[2]=n[6],n[6]=t,t=n[5],n[5]=n[7],n[7]=t,this}getNormalMatrix(t){return this.setFromMatrix4(t).invert().transpose()}transposeIntoArray(t){const n=this.elements;return t[0]=n[0],t[1]=n[3],t[2]=n[6],t[3]=n[1],t[4]=n[4],t[5]=n[7],t[6]=n[2],t[7]=n[5],t[8]=n[8],this}setUvTransform(t,n,r,o,c,d,p){const v=Math.cos(c),_=Math.sin(c);return this.set(r*v,r*_,-r*(v*d+_*p)+d+t,-o*_,o*v,-o*(-_*d+v*p)+p+n,0,0,1),this}scale(t,n){return this.premultiply(X_.makeScale(t,n)),this}rotate(t){return this.premultiply(X_.makeRotation(-t)),this}translate(t,n){return this.premultiply(X_.makeTranslation(t,n)),this}makeTranslation(t,n){return t.isVector2?this.set(1,0,t.x,0,1,t.y,0,0,1):this.set(1,0,t,0,1,n,0,0,1),this}makeRotation(t){const n=Math.cos(t),r=Math.sin(t);return this.set(n,-r,0,r,n,0,0,0,1),this}makeScale(t,n){return this.set(t,0,0,0,n,0,0,0,1),this}equals(t){const n=this.elements,r=t.elements;for(let o=0;o<9;o++)if(n[o]!==r[o])return!1;return!0}fromArray(t,n=0){for(let r=0;r<9;r++)this.elements[r]=t[r+n];return this}toArray(t=[],n=0){const r=this.elements;return t[n]=r[0],t[n+1]=r[1],t[n+2]=r[2],t[n+3]=r[3],t[n+4]=r[4],t[n+5]=r[5],t[n+6]=r[6],t[n+7]=r[7],t[n+8]=r[8],t}clone(){return new this.constructor().fromArray(this.elements)}}const X_=new nn;function wE(a){for(let t=a.length-1;t>=0;--t)if(a[t]>=65535)return!0;return!1}function Gu(a){return document.createElementNS("http://www.w3.org/1999/xhtml",a)}function $D(){const a=Gu("canvas");return a.style.display="block",a}const tS={};function Qc(a){a in tS||(tS[a]=!0,console.warn(a))}function KD(a,t,n){return new Promise(function(r,o){function c(){switch(a.clientWaitSync(t,a.SYNC_FLUSH_COMMANDS_BIT,0)){case a.WAIT_FAILED:o();break;case a.TIMEOUT_EXPIRED:setTimeout(c,n);break;default:r()}}setTimeout(c,n)})}function JD(a){const t=a.elements;t[2]=.5*t[2]+.5*t[3],t[6]=.5*t[6]+.5*t[7],t[10]=.5*t[10]+.5*t[11],t[14]=.5*t[14]+.5*t[15]}function jD(a){const t=a.elements;t[11]===-1?(t[10]=-t[10]-1,t[14]=-t[14]):(t[10]=-t[10],t[14]=-t[14]+1)}const nS=new nn().set(.4123908,.3575843,.1804808,.212639,.7151687,.0721923,.0193308,.1191948,.9505322),iS=new nn().set(3.2409699,-1.5373832,-.4986108,-.9692436,1.8759675,.0415551,.0556301,-.203977,1.0569715);function QD(){const a={enabled:!0,workingColorSpace:gh,spaces:{},convert:function(o,c,d){return this.enabled===!1||c===d||!c||!d||(this.spaces[c].transfer===pi&&(o.r=Ga(o.r),o.g=Ga(o.g),o.b=Ga(o.b)),this.spaces[c].primaries!==this.spaces[d].primaries&&(o.applyMatrix3(this.spaces[c].toXYZ),o.applyMatrix3(this.spaces[d].fromXYZ)),this.spaces[d].transfer===pi&&(o.r=oh(o.r),o.g=oh(o.g),o.b=oh(o.b))),o},fromWorkingColorSpace:function(o,c){return this.convert(o,this.workingColorSpace,c)},toWorkingColorSpace:function(o,c){return this.convert(o,c,this.workingColorSpace)},getPrimaries:function(o){return this.spaces[o].primaries},getTransfer:function(o){return o===xo?zp:this.spaces[o].transfer},getLuminanceCoefficients:function(o,c=this.workingColorSpace){return o.fromArray(this.spaces[c].luminanceCoefficients)},define:function(o){Object.assign(this.spaces,o)},_getMatrix:function(o,c,d){return o.copy(this.spaces[c].toXYZ).multiply(this.spaces[d].fromXYZ)},_getDrawingBufferColorSpace:function(o){return this.spaces[o].outputColorSpaceConfig.drawingBufferColorSpace},_getUnpackColorSpace:function(o=this.workingColorSpace){return this.spaces[o].workingColorSpaceConfig.unpackColorSpace}},t=[.64,.33,.3,.6,.15,.06],n=[.2126,.7152,.0722],r=[.3127,.329];return a.define({[gh]:{primaries:t,whitePoint:r,transfer:zp,toXYZ:nS,fromXYZ:iS,luminanceCoefficients:n,workingColorSpaceConfig:{unpackColorSpace:Es},outputColorSpaceConfig:{drawingBufferColorSpace:Es}},[Es]:{primaries:t,whitePoint:r,transfer:pi,toXYZ:nS,fromXYZ:iS,luminanceCoefficients:n,outputColorSpaceConfig:{drawingBufferColorSpace:Es}}}),a}const ni=QD();function Ga(a){return a<.04045?a*.0773993808:Math.pow(a*.9478672986+.0521327014,2.4)}function oh(a){return a<.0031308?a*12.92:1.055*Math.pow(a,.41666)-.055}let Lc;class eL{static getDataURL(t){if(/^data:/i.test(t.src)||typeof HTMLCanvasElement>"u")return t.src;let n;if(t instanceof HTMLCanvasElement)n=t;else{Lc===void 0&&(Lc=Gu("canvas")),Lc.width=t.width,Lc.height=t.height;const r=Lc.getContext("2d");t instanceof ImageData?r.putImageData(t,0,0):r.drawImage(t,0,0,t.width,t.height),n=Lc}return n.width>2048||n.height>2048?(console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",t),n.toDataURL("image/jpeg",.6)):n.toDataURL("image/png")}static sRGBToLinear(t){if(typeof HTMLImageElement<"u"&&t instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&t instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&t instanceof ImageBitmap){const n=Gu("canvas");n.width=t.width,n.height=t.height;const r=n.getContext("2d");r.drawImage(t,0,0,t.width,t.height);const o=r.getImageData(0,0,t.width,t.height),c=o.data;for(let d=0;d<c.length;d++)c[d]=Ga(c[d]/255)*255;return r.putImageData(o,0,0),n}else if(t.data){const n=t.data.slice(0);for(let r=0;r<n.length;r++)n instanceof Uint8Array||n instanceof Uint8ClampedArray?n[r]=Math.floor(Ga(n[r]/255)*255):n[r]=Ga(n[r]);return{data:n,width:t.width,height:t.height}}else return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),t}}let tL=0;class TE{constructor(t=null){this.isSource=!0,Object.defineProperty(this,"id",{value:tL++}),this.uuid=To(),this.data=t,this.dataReady=!0,this.version=0}set needsUpdate(t){t===!0&&this.version++}toJSON(t){const n=t===void 0||typeof t=="string";if(!n&&t.images[this.uuid]!==void 0)return t.images[this.uuid];const r={uuid:this.uuid,url:""},o=this.data;if(o!==null){let c;if(Array.isArray(o)){c=[];for(let d=0,p=o.length;d<p;d++)o[d].isDataTexture?c.push(q_(o[d].image)):c.push(q_(o[d]))}else c=q_(o);r.url=c}return n||(t.images[this.uuid]=r),r}}function q_(a){return typeof HTMLImageElement<"u"&&a instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&a instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&a instanceof ImageBitmap?eL.getDataURL(a):a.data?{data:Array.from(a.data),width:a.width,height:a.height,type:a.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}let nL=0;class Tr extends Xl{constructor(t=Tr.DEFAULT_IMAGE,n=Tr.DEFAULT_MAPPING,r=Rl,o=Rl,c=ca,d=Cl,p=Zs,v=Wa,_=Tr.DEFAULT_ANISOTROPY,x=xo){super(),this.isTexture=!0,Object.defineProperty(this,"id",{value:nL++}),this.uuid=To(),this.name="",this.source=new TE(t),this.mipmaps=[],this.mapping=n,this.channel=0,this.wrapS=r,this.wrapT=o,this.magFilter=c,this.minFilter=d,this.anisotropy=_,this.format=p,this.internalFormat=null,this.type=v,this.offset=new ln(0,0),this.repeat=new ln(1,1),this.center=new ln(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new nn,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.colorSpace=x,this.userData={},this.version=0,this.onUpdate=null,this.renderTarget=null,this.isRenderTargetTexture=!1,this.pmremVersion=0}get image(){return this.source.data}set image(t=null){this.source.data=t}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return new this.constructor().copy(this)}copy(t){return this.name=t.name,this.source=t.source,this.mipmaps=t.mipmaps.slice(0),this.mapping=t.mapping,this.channel=t.channel,this.wrapS=t.wrapS,this.wrapT=t.wrapT,this.magFilter=t.magFilter,this.minFilter=t.minFilter,this.anisotropy=t.anisotropy,this.format=t.format,this.internalFormat=t.internalFormat,this.type=t.type,this.offset.copy(t.offset),this.repeat.copy(t.repeat),this.center.copy(t.center),this.rotation=t.rotation,this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrix.copy(t.matrix),this.generateMipmaps=t.generateMipmaps,this.premultiplyAlpha=t.premultiplyAlpha,this.flipY=t.flipY,this.unpackAlignment=t.unpackAlignment,this.colorSpace=t.colorSpace,this.renderTarget=t.renderTarget,this.isRenderTargetTexture=t.isRenderTargetTexture,this.userData=JSON.parse(JSON.stringify(t.userData)),this.needsUpdate=!0,this}toJSON(t){const n=t===void 0||typeof t=="string";if(!n&&t.textures[this.uuid]!==void 0)return t.textures[this.uuid];const r={metadata:{version:4.6,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(t).uuid,mapping:this.mapping,channel:this.channel,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,internalFormat:this.internalFormat,type:this.type,colorSpace:this.colorSpace,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,generateMipmaps:this.generateMipmaps,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return Object.keys(this.userData).length>0&&(r.userData=this.userData),n||(t.textures[this.uuid]=r),r}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(t){if(this.mapping!==dE)return t;if(t.applyMatrix3(this.matrix),t.x<0||t.x>1)switch(this.wrapS){case n0:t.x=t.x-Math.floor(t.x);break;case Rl:t.x=t.x<0?0:1;break;case i0:Math.abs(Math.floor(t.x)%2)===1?t.x=Math.ceil(t.x)-t.x:t.x=t.x-Math.floor(t.x);break}if(t.y<0||t.y>1)switch(this.wrapT){case n0:t.y=t.y-Math.floor(t.y);break;case Rl:t.y=t.y<0?0:1;break;case i0:Math.abs(Math.floor(t.y)%2)===1?t.y=Math.ceil(t.y)-t.y:t.y=t.y-Math.floor(t.y);break}return this.flipY&&(t.y=1-t.y),t}set needsUpdate(t){t===!0&&(this.version++,this.source.needsUpdate=!0)}set needsPMREMUpdate(t){t===!0&&this.pmremVersion++}}Tr.DEFAULT_IMAGE=null;Tr.DEFAULT_MAPPING=dE;Tr.DEFAULT_ANISOTROPY=1;class Vi{constructor(t=0,n=0,r=0,o=1){Vi.prototype.isVector4=!0,this.x=t,this.y=n,this.z=r,this.w=o}get width(){return this.z}set width(t){this.z=t}get height(){return this.w}set height(t){this.w=t}set(t,n,r,o){return this.x=t,this.y=n,this.z=r,this.w=o,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this.w=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setW(t){return this.w=t,this}setComponent(t,n){switch(t){case 0:this.x=n;break;case 1:this.y=n;break;case 2:this.z=n;break;case 3:this.w=n;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w!==void 0?t.w:1,this}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this.w+=t.w,this}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this.w+=t,this}addVectors(t,n){return this.x=t.x+n.x,this.y=t.y+n.y,this.z=t.z+n.z,this.w=t.w+n.w,this}addScaledVector(t,n){return this.x+=t.x*n,this.y+=t.y*n,this.z+=t.z*n,this.w+=t.w*n,this}sub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this.w-=t.w,this}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this.w-=t,this}subVectors(t,n){return this.x=t.x-n.x,this.y=t.y-n.y,this.z=t.z-n.z,this.w=t.w-n.w,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this.w*=t.w,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this.w*=t,this}applyMatrix4(t){const n=this.x,r=this.y,o=this.z,c=this.w,d=t.elements;return this.x=d[0]*n+d[4]*r+d[8]*o+d[12]*c,this.y=d[1]*n+d[5]*r+d[9]*o+d[13]*c,this.z=d[2]*n+d[6]*r+d[10]*o+d[14]*c,this.w=d[3]*n+d[7]*r+d[11]*o+d[15]*c,this}divide(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this.w/=t.w,this}divideScalar(t){return this.multiplyScalar(1/t)}setAxisAngleFromQuaternion(t){this.w=2*Math.acos(t.w);const n=Math.sqrt(1-t.w*t.w);return n<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=t.x/n,this.y=t.y/n,this.z=t.z/n),this}setAxisAngleFromRotationMatrix(t){let n,r,o,c;const v=t.elements,_=v[0],x=v[4],M=v[8],b=v[1],E=v[5],U=v[9],L=v[2],P=v[6],A=v[10];if(Math.abs(x-b)<.01&&Math.abs(M-L)<.01&&Math.abs(U-P)<.01){if(Math.abs(x+b)<.1&&Math.abs(M+L)<.1&&Math.abs(U+P)<.1&&Math.abs(_+E+A-3)<.1)return this.set(1,0,0,0),this;n=Math.PI;const k=(_+1)/2,O=(E+1)/2,z=(A+1)/2,Y=(x+b)/4,W=(M+L)/4,te=(U+P)/4;return k>O&&k>z?k<.01?(r=0,o=.707106781,c=.707106781):(r=Math.sqrt(k),o=Y/r,c=W/r):O>z?O<.01?(r=.707106781,o=0,c=.707106781):(o=Math.sqrt(O),r=Y/o,c=te/o):z<.01?(r=.707106781,o=.707106781,c=0):(c=Math.sqrt(z),r=W/c,o=te/c),this.set(r,o,c,n),this}let X=Math.sqrt((P-U)*(P-U)+(M-L)*(M-L)+(b-x)*(b-x));return Math.abs(X)<.001&&(X=1),this.x=(P-U)/X,this.y=(M-L)/X,this.z=(b-x)/X,this.w=Math.acos((_+E+A-1)/2),this}setFromMatrixPosition(t){const n=t.elements;return this.x=n[12],this.y=n[13],this.z=n[14],this.w=n[15],this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this.w=Math.min(this.w,t.w),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this.w=Math.max(this.w,t.w),this}clamp(t,n){return this.x=Bn(this.x,t.x,n.x),this.y=Bn(this.y,t.y,n.y),this.z=Bn(this.z,t.z,n.z),this.w=Bn(this.w,t.w,n.w),this}clampScalar(t,n){return this.x=Bn(this.x,t,n),this.y=Bn(this.y,t,n),this.z=Bn(this.z,t,n),this.w=Bn(this.w,t,n),this}clampLength(t,n){const r=this.length();return this.divideScalar(r||1).multiplyScalar(Bn(r,t,n))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this.w=Math.trunc(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,n){return this.x+=(t.x-this.x)*n,this.y+=(t.y-this.y)*n,this.z+=(t.z-this.z)*n,this.w+=(t.w-this.w)*n,this}lerpVectors(t,n,r){return this.x=t.x+(n.x-t.x)*r,this.y=t.y+(n.y-t.y)*r,this.z=t.z+(n.z-t.z)*r,this.w=t.w+(n.w-t.w)*r,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z&&t.w===this.w}fromArray(t,n=0){return this.x=t[n],this.y=t[n+1],this.z=t[n+2],this.w=t[n+3],this}toArray(t=[],n=0){return t[n]=this.x,t[n+1]=this.y,t[n+2]=this.z,t[n+3]=this.w,t}fromBufferAttribute(t,n){return this.x=t.getX(n),this.y=t.getY(n),this.z=t.getZ(n),this.w=t.getW(n),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}}class iL extends Xl{constructor(t=1,n=1,r={}){super(),this.isRenderTarget=!0,this.width=t,this.height=n,this.depth=1,this.scissor=new Vi(0,0,t,n),this.scissorTest=!1,this.viewport=new Vi(0,0,t,n);const o={width:t,height:n,depth:1};r=Object.assign({generateMipmaps:!1,internalFormat:null,minFilter:ca,depthBuffer:!0,stencilBuffer:!1,resolveDepthBuffer:!0,resolveStencilBuffer:!0,depthTexture:null,samples:0,count:1},r);const c=new Tr(o,r.mapping,r.wrapS,r.wrapT,r.magFilter,r.minFilter,r.format,r.type,r.anisotropy,r.colorSpace);c.flipY=!1,c.generateMipmaps=r.generateMipmaps,c.internalFormat=r.internalFormat,this.textures=[];const d=r.count;for(let p=0;p<d;p++)this.textures[p]=c.clone(),this.textures[p].isRenderTargetTexture=!0,this.textures[p].renderTarget=this;this.depthBuffer=r.depthBuffer,this.stencilBuffer=r.stencilBuffer,this.resolveDepthBuffer=r.resolveDepthBuffer,this.resolveStencilBuffer=r.resolveStencilBuffer,this._depthTexture=null,this.depthTexture=r.depthTexture,this.samples=r.samples}get texture(){return this.textures[0]}set texture(t){this.textures[0]=t}set depthTexture(t){this._depthTexture!==null&&(this._depthTexture.renderTarget=null),t!==null&&(t.renderTarget=this),this._depthTexture=t}get depthTexture(){return this._depthTexture}setSize(t,n,r=1){if(this.width!==t||this.height!==n||this.depth!==r){this.width=t,this.height=n,this.depth=r;for(let o=0,c=this.textures.length;o<c;o++)this.textures[o].image.width=t,this.textures[o].image.height=n,this.textures[o].image.depth=r;this.dispose()}this.viewport.set(0,0,t,n),this.scissor.set(0,0,t,n)}clone(){return new this.constructor().copy(this)}copy(t){this.width=t.width,this.height=t.height,this.depth=t.depth,this.scissor.copy(t.scissor),this.scissorTest=t.scissorTest,this.viewport.copy(t.viewport),this.textures.length=0;for(let r=0,o=t.textures.length;r<o;r++)this.textures[r]=t.textures[r].clone(),this.textures[r].isRenderTargetTexture=!0,this.textures[r].renderTarget=this;const n=Object.assign({},t.texture.image);return this.texture.source=new TE(n),this.depthBuffer=t.depthBuffer,this.stencilBuffer=t.stencilBuffer,this.resolveDepthBuffer=t.resolveDepthBuffer,this.resolveStencilBuffer=t.resolveStencilBuffer,t.depthTexture!==null&&(this.depthTexture=t.depthTexture.clone()),this.samples=t.samples,this}dispose(){this.dispatchEvent({type:"dispose"})}}class zl extends iL{constructor(t=1,n=1,r={}){super(t,n,r),this.isWebGLRenderTarget=!0}}class AE extends Tr{constructor(t=null,n=1,r=1,o=1){super(null),this.isDataArrayTexture=!0,this.image={data:t,width:n,height:r,depth:o},this.magFilter=$s,this.minFilter=$s,this.wrapR=Rl,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.layerUpdates=new Set}addLayerUpdate(t){this.layerUpdates.add(t)}clearLayerUpdates(){this.layerUpdates.clear()}}class rL extends Tr{constructor(t=null,n=1,r=1,o=1){super(null),this.isData3DTexture=!0,this.image={data:t,width:n,height:r,depth:o},this.magFilter=$s,this.minFilter=$s,this.wrapR=Rl,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class kl{constructor(t=0,n=0,r=0,o=1){this.isQuaternion=!0,this._x=t,this._y=n,this._z=r,this._w=o}static slerpFlat(t,n,r,o,c,d,p){let v=r[o+0],_=r[o+1],x=r[o+2],M=r[o+3];const b=c[d+0],E=c[d+1],U=c[d+2],L=c[d+3];if(p===0){t[n+0]=v,t[n+1]=_,t[n+2]=x,t[n+3]=M;return}if(p===1){t[n+0]=b,t[n+1]=E,t[n+2]=U,t[n+3]=L;return}if(M!==L||v!==b||_!==E||x!==U){let P=1-p;const A=v*b+_*E+x*U+M*L,X=A>=0?1:-1,k=1-A*A;if(k>Number.EPSILON){const z=Math.sqrt(k),Y=Math.atan2(z,A*X);P=Math.sin(P*Y)/z,p=Math.sin(p*Y)/z}const O=p*X;if(v=v*P+b*O,_=_*P+E*O,x=x*P+U*O,M=M*P+L*O,P===1-p){const z=1/Math.sqrt(v*v+_*_+x*x+M*M);v*=z,_*=z,x*=z,M*=z}}t[n]=v,t[n+1]=_,t[n+2]=x,t[n+3]=M}static multiplyQuaternionsFlat(t,n,r,o,c,d){const p=r[o],v=r[o+1],_=r[o+2],x=r[o+3],M=c[d],b=c[d+1],E=c[d+2],U=c[d+3];return t[n]=p*U+x*M+v*E-_*b,t[n+1]=v*U+x*b+_*M-p*E,t[n+2]=_*U+x*E+p*b-v*M,t[n+3]=x*U-p*M-v*b-_*E,t}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get w(){return this._w}set w(t){this._w=t,this._onChangeCallback()}set(t,n,r,o){return this._x=t,this._y=n,this._z=r,this._w=o,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(t){return this._x=t.x,this._y=t.y,this._z=t.z,this._w=t.w,this._onChangeCallback(),this}setFromEuler(t,n=!0){const r=t._x,o=t._y,c=t._z,d=t._order,p=Math.cos,v=Math.sin,_=p(r/2),x=p(o/2),M=p(c/2),b=v(r/2),E=v(o/2),U=v(c/2);switch(d){case"XYZ":this._x=b*x*M+_*E*U,this._y=_*E*M-b*x*U,this._z=_*x*U+b*E*M,this._w=_*x*M-b*E*U;break;case"YXZ":this._x=b*x*M+_*E*U,this._y=_*E*M-b*x*U,this._z=_*x*U-b*E*M,this._w=_*x*M+b*E*U;break;case"ZXY":this._x=b*x*M-_*E*U,this._y=_*E*M+b*x*U,this._z=_*x*U+b*E*M,this._w=_*x*M-b*E*U;break;case"ZYX":this._x=b*x*M-_*E*U,this._y=_*E*M+b*x*U,this._z=_*x*U-b*E*M,this._w=_*x*M+b*E*U;break;case"YZX":this._x=b*x*M+_*E*U,this._y=_*E*M+b*x*U,this._z=_*x*U-b*E*M,this._w=_*x*M-b*E*U;break;case"XZY":this._x=b*x*M-_*E*U,this._y=_*E*M-b*x*U,this._z=_*x*U+b*E*M,this._w=_*x*M+b*E*U;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+d)}return n===!0&&this._onChangeCallback(),this}setFromAxisAngle(t,n){const r=n/2,o=Math.sin(r);return this._x=t.x*o,this._y=t.y*o,this._z=t.z*o,this._w=Math.cos(r),this._onChangeCallback(),this}setFromRotationMatrix(t){const n=t.elements,r=n[0],o=n[4],c=n[8],d=n[1],p=n[5],v=n[9],_=n[2],x=n[6],M=n[10],b=r+p+M;if(b>0){const E=.5/Math.sqrt(b+1);this._w=.25/E,this._x=(x-v)*E,this._y=(c-_)*E,this._z=(d-o)*E}else if(r>p&&r>M){const E=2*Math.sqrt(1+r-p-M);this._w=(x-v)/E,this._x=.25*E,this._y=(o+d)/E,this._z=(c+_)/E}else if(p>M){const E=2*Math.sqrt(1+p-r-M);this._w=(c-_)/E,this._x=(o+d)/E,this._y=.25*E,this._z=(v+x)/E}else{const E=2*Math.sqrt(1+M-r-p);this._w=(d-o)/E,this._x=(c+_)/E,this._y=(v+x)/E,this._z=.25*E}return this._onChangeCallback(),this}setFromUnitVectors(t,n){let r=t.dot(n)+1;return r<Number.EPSILON?(r=0,Math.abs(t.x)>Math.abs(t.z)?(this._x=-t.y,this._y=t.x,this._z=0,this._w=r):(this._x=0,this._y=-t.z,this._z=t.y,this._w=r)):(this._x=t.y*n.z-t.z*n.y,this._y=t.z*n.x-t.x*n.z,this._z=t.x*n.y-t.y*n.x,this._w=r),this.normalize()}angleTo(t){return 2*Math.acos(Math.abs(Bn(this.dot(t),-1,1)))}rotateTowards(t,n){const r=this.angleTo(t);if(r===0)return this;const o=Math.min(1,n/r);return this.slerp(t,o),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(t){return this._x*t._x+this._y*t._y+this._z*t._z+this._w*t._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let t=this.length();return t===0?(this._x=0,this._y=0,this._z=0,this._w=1):(t=1/t,this._x=this._x*t,this._y=this._y*t,this._z=this._z*t,this._w=this._w*t),this._onChangeCallback(),this}multiply(t){return this.multiplyQuaternions(this,t)}premultiply(t){return this.multiplyQuaternions(t,this)}multiplyQuaternions(t,n){const r=t._x,o=t._y,c=t._z,d=t._w,p=n._x,v=n._y,_=n._z,x=n._w;return this._x=r*x+d*p+o*_-c*v,this._y=o*x+d*v+c*p-r*_,this._z=c*x+d*_+r*v-o*p,this._w=d*x-r*p-o*v-c*_,this._onChangeCallback(),this}slerp(t,n){if(n===0)return this;if(n===1)return this.copy(t);const r=this._x,o=this._y,c=this._z,d=this._w;let p=d*t._w+r*t._x+o*t._y+c*t._z;if(p<0?(this._w=-t._w,this._x=-t._x,this._y=-t._y,this._z=-t._z,p=-p):this.copy(t),p>=1)return this._w=d,this._x=r,this._y=o,this._z=c,this;const v=1-p*p;if(v<=Number.EPSILON){const E=1-n;return this._w=E*d+n*this._w,this._x=E*r+n*this._x,this._y=E*o+n*this._y,this._z=E*c+n*this._z,this.normalize(),this}const _=Math.sqrt(v),x=Math.atan2(_,p),M=Math.sin((1-n)*x)/_,b=Math.sin(n*x)/_;return this._w=d*M+this._w*b,this._x=r*M+this._x*b,this._y=o*M+this._y*b,this._z=c*M+this._z*b,this._onChangeCallback(),this}slerpQuaternions(t,n,r){return this.copy(t).slerp(n,r)}random(){const t=2*Math.PI*Math.random(),n=2*Math.PI*Math.random(),r=Math.random(),o=Math.sqrt(1-r),c=Math.sqrt(r);return this.set(o*Math.sin(t),o*Math.cos(t),c*Math.sin(n),c*Math.cos(n))}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._w===this._w}fromArray(t,n=0){return this._x=t[n],this._y=t[n+1],this._z=t[n+2],this._w=t[n+3],this._onChangeCallback(),this}toArray(t=[],n=0){return t[n]=this._x,t[n+1]=this._y,t[n+2]=this._z,t[n+3]=this._w,t}fromBufferAttribute(t,n){return this._x=t.getX(n),this._y=t.getY(n),this._z=t.getZ(n),this._w=t.getW(n),this._onChangeCallback(),this}toJSON(){return this.toArray()}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w}}class ue{constructor(t=0,n=0,r=0){ue.prototype.isVector3=!0,this.x=t,this.y=n,this.z=r}set(t,n,r){return r===void 0&&(r=this.z),this.x=t,this.y=n,this.z=r,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setComponent(t,n){switch(t){case 0:this.x=n;break;case 1:this.y=n;break;case 2:this.z=n;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this}addVectors(t,n){return this.x=t.x+n.x,this.y=t.y+n.y,this.z=t.z+n.z,this}addScaledVector(t,n){return this.x+=t.x*n,this.y+=t.y*n,this.z+=t.z*n,this}sub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this}subVectors(t,n){return this.x=t.x-n.x,this.y=t.y-n.y,this.z=t.z-n.z,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this}multiplyVectors(t,n){return this.x=t.x*n.x,this.y=t.y*n.y,this.z=t.z*n.z,this}applyEuler(t){return this.applyQuaternion(rS.setFromEuler(t))}applyAxisAngle(t,n){return this.applyQuaternion(rS.setFromAxisAngle(t,n))}applyMatrix3(t){const n=this.x,r=this.y,o=this.z,c=t.elements;return this.x=c[0]*n+c[3]*r+c[6]*o,this.y=c[1]*n+c[4]*r+c[7]*o,this.z=c[2]*n+c[5]*r+c[8]*o,this}applyNormalMatrix(t){return this.applyMatrix3(t).normalize()}applyMatrix4(t){const n=this.x,r=this.y,o=this.z,c=t.elements,d=1/(c[3]*n+c[7]*r+c[11]*o+c[15]);return this.x=(c[0]*n+c[4]*r+c[8]*o+c[12])*d,this.y=(c[1]*n+c[5]*r+c[9]*o+c[13])*d,this.z=(c[2]*n+c[6]*r+c[10]*o+c[14])*d,this}applyQuaternion(t){const n=this.x,r=this.y,o=this.z,c=t.x,d=t.y,p=t.z,v=t.w,_=2*(d*o-p*r),x=2*(p*n-c*o),M=2*(c*r-d*n);return this.x=n+v*_+d*M-p*x,this.y=r+v*x+p*_-c*M,this.z=o+v*M+c*x-d*_,this}project(t){return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(t.projectionMatrix)}unproject(t){return this.applyMatrix4(t.projectionMatrixInverse).applyMatrix4(t.matrixWorld)}transformDirection(t){const n=this.x,r=this.y,o=this.z,c=t.elements;return this.x=c[0]*n+c[4]*r+c[8]*o,this.y=c[1]*n+c[5]*r+c[9]*o,this.z=c[2]*n+c[6]*r+c[10]*o,this.normalize()}divide(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this}divideScalar(t){return this.multiplyScalar(1/t)}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this}clamp(t,n){return this.x=Bn(this.x,t.x,n.x),this.y=Bn(this.y,t.y,n.y),this.z=Bn(this.z,t.z,n.z),this}clampScalar(t,n){return this.x=Bn(this.x,t,n),this.y=Bn(this.y,t,n),this.z=Bn(this.z,t,n),this}clampLength(t,n){const r=this.length();return this.divideScalar(r||1).multiplyScalar(Bn(r,t,n))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,n){return this.x+=(t.x-this.x)*n,this.y+=(t.y-this.y)*n,this.z+=(t.z-this.z)*n,this}lerpVectors(t,n,r){return this.x=t.x+(n.x-t.x)*r,this.y=t.y+(n.y-t.y)*r,this.z=t.z+(n.z-t.z)*r,this}cross(t){return this.crossVectors(this,t)}crossVectors(t,n){const r=t.x,o=t.y,c=t.z,d=n.x,p=n.y,v=n.z;return this.x=o*v-c*p,this.y=c*d-r*v,this.z=r*p-o*d,this}projectOnVector(t){const n=t.lengthSq();if(n===0)return this.set(0,0,0);const r=t.dot(this)/n;return this.copy(t).multiplyScalar(r)}projectOnPlane(t){return Y_.copy(this).projectOnVector(t),this.sub(Y_)}reflect(t){return this.sub(Y_.copy(t).multiplyScalar(2*this.dot(t)))}angleTo(t){const n=Math.sqrt(this.lengthSq()*t.lengthSq());if(n===0)return Math.PI/2;const r=this.dot(t)/n;return Math.acos(Bn(r,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const n=this.x-t.x,r=this.y-t.y,o=this.z-t.z;return n*n+r*r+o*o}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)+Math.abs(this.z-t.z)}setFromSpherical(t){return this.setFromSphericalCoords(t.radius,t.phi,t.theta)}setFromSphericalCoords(t,n,r){const o=Math.sin(n)*t;return this.x=o*Math.sin(r),this.y=Math.cos(n)*t,this.z=o*Math.cos(r),this}setFromCylindrical(t){return this.setFromCylindricalCoords(t.radius,t.theta,t.y)}setFromCylindricalCoords(t,n,r){return this.x=t*Math.sin(n),this.y=r,this.z=t*Math.cos(n),this}setFromMatrixPosition(t){const n=t.elements;return this.x=n[12],this.y=n[13],this.z=n[14],this}setFromMatrixScale(t){const n=this.setFromMatrixColumn(t,0).length(),r=this.setFromMatrixColumn(t,1).length(),o=this.setFromMatrixColumn(t,2).length();return this.x=n,this.y=r,this.z=o,this}setFromMatrixColumn(t,n){return this.fromArray(t.elements,n*4)}setFromMatrix3Column(t,n){return this.fromArray(t.elements,n*3)}setFromEuler(t){return this.x=t._x,this.y=t._y,this.z=t._z,this}setFromColor(t){return this.x=t.r,this.y=t.g,this.z=t.b,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z}fromArray(t,n=0){return this.x=t[n],this.y=t[n+1],this.z=t[n+2],this}toArray(t=[],n=0){return t[n]=this.x,t[n+1]=this.y,t[n+2]=this.z,t}fromBufferAttribute(t,n){return this.x=t.getX(n),this.y=t.getY(n),this.z=t.getZ(n),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const t=Math.random()*Math.PI*2,n=Math.random()*2-1,r=Math.sqrt(1-n*n);return this.x=r*Math.cos(t),this.y=n,this.z=r*Math.sin(t),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}}const Y_=new ue,rS=new kl;class Ah{constructor(t=new ue(1/0,1/0,1/0),n=new ue(-1/0,-1/0,-1/0)){this.isBox3=!0,this.min=t,this.max=n}set(t,n){return this.min.copy(t),this.max.copy(n),this}setFromArray(t){this.makeEmpty();for(let n=0,r=t.length;n<r;n+=3)this.expandByPoint(Ws.fromArray(t,n));return this}setFromBufferAttribute(t){this.makeEmpty();for(let n=0,r=t.count;n<r;n++)this.expandByPoint(Ws.fromBufferAttribute(t,n));return this}setFromPoints(t){this.makeEmpty();for(let n=0,r=t.length;n<r;n++)this.expandByPoint(t[n]);return this}setFromCenterAndSize(t,n){const r=Ws.copy(n).multiplyScalar(.5);return this.min.copy(t).sub(r),this.max.copy(t).add(r),this}setFromObject(t,n=!1){return this.makeEmpty(),this.expandByObject(t,n)}clone(){return new this.constructor().copy(this)}copy(t){return this.min.copy(t.min),this.max.copy(t.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(t){return this.isEmpty()?t.set(0,0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(t){return this.isEmpty()?t.set(0,0,0):t.subVectors(this.max,this.min)}expandByPoint(t){return this.min.min(t),this.max.max(t),this}expandByVector(t){return this.min.sub(t),this.max.add(t),this}expandByScalar(t){return this.min.addScalar(-t),this.max.addScalar(t),this}expandByObject(t,n=!1){t.updateWorldMatrix(!1,!1);const r=t.geometry;if(r!==void 0){const c=r.getAttribute("position");if(n===!0&&c!==void 0&&t.isInstancedMesh!==!0)for(let d=0,p=c.count;d<p;d++)t.isMesh===!0?t.getVertexPosition(d,Ws):Ws.fromBufferAttribute(c,d),Ws.applyMatrix4(t.matrixWorld),this.expandByPoint(Ws);else t.boundingBox!==void 0?(t.boundingBox===null&&t.computeBoundingBox(),qd.copy(t.boundingBox)):(r.boundingBox===null&&r.computeBoundingBox(),qd.copy(r.boundingBox)),qd.applyMatrix4(t.matrixWorld),this.union(qd)}const o=t.children;for(let c=0,d=o.length;c<d;c++)this.expandByObject(o[c],n);return this}containsPoint(t){return t.x>=this.min.x&&t.x<=this.max.x&&t.y>=this.min.y&&t.y<=this.max.y&&t.z>=this.min.z&&t.z<=this.max.z}containsBox(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y&&this.min.z<=t.min.z&&t.max.z<=this.max.z}getParameter(t,n){return n.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y),(t.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(t){return t.max.x>=this.min.x&&t.min.x<=this.max.x&&t.max.y>=this.min.y&&t.min.y<=this.max.y&&t.max.z>=this.min.z&&t.min.z<=this.max.z}intersectsSphere(t){return this.clampPoint(t.center,Ws),Ws.distanceToSquared(t.center)<=t.radius*t.radius}intersectsPlane(t){let n,r;return t.normal.x>0?(n=t.normal.x*this.min.x,r=t.normal.x*this.max.x):(n=t.normal.x*this.max.x,r=t.normal.x*this.min.x),t.normal.y>0?(n+=t.normal.y*this.min.y,r+=t.normal.y*this.max.y):(n+=t.normal.y*this.max.y,r+=t.normal.y*this.min.y),t.normal.z>0?(n+=t.normal.z*this.min.z,r+=t.normal.z*this.max.z):(n+=t.normal.z*this.max.z,r+=t.normal.z*this.min.z),n<=-t.constant&&r>=-t.constant}intersectsTriangle(t){if(this.isEmpty())return!1;this.getCenter(vu),Yd.subVectors(this.max,vu),Uc.subVectors(t.a,vu),Nc.subVectors(t.b,vu),Fc.subVectors(t.c,vu),ho.subVectors(Nc,Uc),uo.subVectors(Fc,Nc),_l.subVectors(Uc,Fc);let n=[0,-ho.z,ho.y,0,-uo.z,uo.y,0,-_l.z,_l.y,ho.z,0,-ho.x,uo.z,0,-uo.x,_l.z,0,-_l.x,-ho.y,ho.x,0,-uo.y,uo.x,0,-_l.y,_l.x,0];return!Z_(n,Uc,Nc,Fc,Yd)||(n=[1,0,0,0,1,0,0,0,1],!Z_(n,Uc,Nc,Fc,Yd))?!1:(Zd.crossVectors(ho,uo),n=[Zd.x,Zd.y,Zd.z],Z_(n,Uc,Nc,Fc,Yd))}clampPoint(t,n){return n.copy(t).clamp(this.min,this.max)}distanceToPoint(t){return this.clampPoint(t,Ws).distanceTo(t)}getBoundingSphere(t){return this.isEmpty()?t.makeEmpty():(this.getCenter(t.center),t.radius=this.getSize(Ws).length()*.5),t}intersect(t){return this.min.max(t.min),this.max.min(t.max),this.isEmpty()&&this.makeEmpty(),this}union(t){return this.min.min(t.min),this.max.max(t.max),this}applyMatrix4(t){return this.isEmpty()?this:(Ca[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(t),Ca[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(t),Ca[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(t),Ca[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(t),Ca[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(t),Ca[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(t),Ca[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(t),Ca[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(t),this.setFromPoints(Ca),this)}translate(t){return this.min.add(t),this.max.add(t),this}equals(t){return t.min.equals(this.min)&&t.max.equals(this.max)}}const Ca=[new ue,new ue,new ue,new ue,new ue,new ue,new ue,new ue],Ws=new ue,qd=new Ah,Uc=new ue,Nc=new ue,Fc=new ue,ho=new ue,uo=new ue,_l=new ue,vu=new ue,Yd=new ue,Zd=new ue,gl=new ue;function Z_(a,t,n,r,o){for(let c=0,d=a.length-3;c<=d;c+=3){gl.fromArray(a,c);const p=o.x*Math.abs(gl.x)+o.y*Math.abs(gl.y)+o.z*Math.abs(gl.z),v=t.dot(gl),_=n.dot(gl),x=r.dot(gl);if(Math.max(-Math.max(v,_,x),Math.min(v,_,x))>p)return!1}return!0}const sL=new Ah,yu=new ue,$_=new ue;class lf{constructor(t=new ue,n=-1){this.isSphere=!0,this.center=t,this.radius=n}set(t,n){return this.center.copy(t),this.radius=n,this}setFromPoints(t,n){const r=this.center;n!==void 0?r.copy(n):sL.setFromPoints(t).getCenter(r);let o=0;for(let c=0,d=t.length;c<d;c++)o=Math.max(o,r.distanceToSquared(t[c]));return this.radius=Math.sqrt(o),this}copy(t){return this.center.copy(t.center),this.radius=t.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(t){return t.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(t){return t.distanceTo(this.center)-this.radius}intersectsSphere(t){const n=this.radius+t.radius;return t.center.distanceToSquared(this.center)<=n*n}intersectsBox(t){return t.intersectsSphere(this)}intersectsPlane(t){return Math.abs(t.distanceToPoint(this.center))<=this.radius}clampPoint(t,n){const r=this.center.distanceToSquared(t);return n.copy(t),r>this.radius*this.radius&&(n.sub(this.center).normalize(),n.multiplyScalar(this.radius).add(this.center)),n}getBoundingBox(t){return this.isEmpty()?(t.makeEmpty(),t):(t.set(this.center,this.center),t.expandByScalar(this.radius),t)}applyMatrix4(t){return this.center.applyMatrix4(t),this.radius=this.radius*t.getMaxScaleOnAxis(),this}translate(t){return this.center.add(t),this}expandByPoint(t){if(this.isEmpty())return this.center.copy(t),this.radius=0,this;yu.subVectors(t,this.center);const n=yu.lengthSq();if(n>this.radius*this.radius){const r=Math.sqrt(n),o=(r-this.radius)*.5;this.center.addScaledVector(yu,o/r),this.radius+=o}return this}union(t){return t.isEmpty()?this:this.isEmpty()?(this.copy(t),this):(this.center.equals(t.center)===!0?this.radius=Math.max(this.radius,t.radius):($_.subVectors(t.center,this.center).setLength(t.radius),this.expandByPoint(yu.copy(t.center).add($_)),this.expandByPoint(yu.copy(t.center).sub($_))),this)}equals(t){return t.center.equals(this.center)&&t.radius===this.radius}clone(){return new this.constructor().copy(this)}}const Pa=new ue,K_=new ue,$d=new ue,fo=new ue,J_=new ue,Kd=new ue,j_=new ue;class cf{constructor(t=new ue,n=new ue(0,0,-1)){this.origin=t,this.direction=n}set(t,n){return this.origin.copy(t),this.direction.copy(n),this}copy(t){return this.origin.copy(t.origin),this.direction.copy(t.direction),this}at(t,n){return n.copy(this.origin).addScaledVector(this.direction,t)}lookAt(t){return this.direction.copy(t).sub(this.origin).normalize(),this}recast(t){return this.origin.copy(this.at(t,Pa)),this}closestPointToPoint(t,n){n.subVectors(t,this.origin);const r=n.dot(this.direction);return r<0?n.copy(this.origin):n.copy(this.origin).addScaledVector(this.direction,r)}distanceToPoint(t){return Math.sqrt(this.distanceSqToPoint(t))}distanceSqToPoint(t){const n=Pa.subVectors(t,this.origin).dot(this.direction);return n<0?this.origin.distanceToSquared(t):(Pa.copy(this.origin).addScaledVector(this.direction,n),Pa.distanceToSquared(t))}distanceSqToSegment(t,n,r,o){K_.copy(t).add(n).multiplyScalar(.5),$d.copy(n).sub(t).normalize(),fo.copy(this.origin).sub(K_);const c=t.distanceTo(n)*.5,d=-this.direction.dot($d),p=fo.dot(this.direction),v=-fo.dot($d),_=fo.lengthSq(),x=Math.abs(1-d*d);let M,b,E,U;if(x>0)if(M=d*v-p,b=d*p-v,U=c*x,M>=0)if(b>=-U)if(b<=U){const L=1/x;M*=L,b*=L,E=M*(M+d*b+2*p)+b*(d*M+b+2*v)+_}else b=c,M=Math.max(0,-(d*b+p)),E=-M*M+b*(b+2*v)+_;else b=-c,M=Math.max(0,-(d*b+p)),E=-M*M+b*(b+2*v)+_;else b<=-U?(M=Math.max(0,-(-d*c+p)),b=M>0?-c:Math.min(Math.max(-c,-v),c),E=-M*M+b*(b+2*v)+_):b<=U?(M=0,b=Math.min(Math.max(-c,-v),c),E=b*(b+2*v)+_):(M=Math.max(0,-(d*c+p)),b=M>0?c:Math.min(Math.max(-c,-v),c),E=-M*M+b*(b+2*v)+_);else b=d>0?-c:c,M=Math.max(0,-(d*b+p)),E=-M*M+b*(b+2*v)+_;return r&&r.copy(this.origin).addScaledVector(this.direction,M),o&&o.copy(K_).addScaledVector($d,b),E}intersectSphere(t,n){Pa.subVectors(t.center,this.origin);const r=Pa.dot(this.direction),o=Pa.dot(Pa)-r*r,c=t.radius*t.radius;if(o>c)return null;const d=Math.sqrt(c-o),p=r-d,v=r+d;return v<0?null:p<0?this.at(v,n):this.at(p,n)}intersectsSphere(t){return this.distanceSqToPoint(t.center)<=t.radius*t.radius}distanceToPlane(t){const n=t.normal.dot(this.direction);if(n===0)return t.distanceToPoint(this.origin)===0?0:null;const r=-(this.origin.dot(t.normal)+t.constant)/n;return r>=0?r:null}intersectPlane(t,n){const r=this.distanceToPlane(t);return r===null?null:this.at(r,n)}intersectsPlane(t){const n=t.distanceToPoint(this.origin);return n===0||t.normal.dot(this.direction)*n<0}intersectBox(t,n){let r,o,c,d,p,v;const _=1/this.direction.x,x=1/this.direction.y,M=1/this.direction.z,b=this.origin;return _>=0?(r=(t.min.x-b.x)*_,o=(t.max.x-b.x)*_):(r=(t.max.x-b.x)*_,o=(t.min.x-b.x)*_),x>=0?(c=(t.min.y-b.y)*x,d=(t.max.y-b.y)*x):(c=(t.max.y-b.y)*x,d=(t.min.y-b.y)*x),r>d||c>o||((c>r||isNaN(r))&&(r=c),(d<o||isNaN(o))&&(o=d),M>=0?(p=(t.min.z-b.z)*M,v=(t.max.z-b.z)*M):(p=(t.max.z-b.z)*M,v=(t.min.z-b.z)*M),r>v||p>o)||((p>r||r!==r)&&(r=p),(v<o||o!==o)&&(o=v),o<0)?null:this.at(r>=0?r:o,n)}intersectsBox(t){return this.intersectBox(t,Pa)!==null}intersectTriangle(t,n,r,o,c){J_.subVectors(n,t),Kd.subVectors(r,t),j_.crossVectors(J_,Kd);let d=this.direction.dot(j_),p;if(d>0){if(o)return null;p=1}else if(d<0)p=-1,d=-d;else return null;fo.subVectors(this.origin,t);const v=p*this.direction.dot(Kd.crossVectors(fo,Kd));if(v<0)return null;const _=p*this.direction.dot(J_.cross(fo));if(_<0||v+_>d)return null;const x=-p*fo.dot(j_);return x<0?null:this.at(x/d,c)}applyMatrix4(t){return this.origin.applyMatrix4(t),this.direction.transformDirection(t),this}equals(t){return t.origin.equals(this.origin)&&t.direction.equals(this.direction)}clone(){return new this.constructor().copy(this)}}class Ti{constructor(t,n,r,o,c,d,p,v,_,x,M,b,E,U,L,P){Ti.prototype.isMatrix4=!0,this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],t!==void 0&&this.set(t,n,r,o,c,d,p,v,_,x,M,b,E,U,L,P)}set(t,n,r,o,c,d,p,v,_,x,M,b,E,U,L,P){const A=this.elements;return A[0]=t,A[4]=n,A[8]=r,A[12]=o,A[1]=c,A[5]=d,A[9]=p,A[13]=v,A[2]=_,A[6]=x,A[10]=M,A[14]=b,A[3]=E,A[7]=U,A[11]=L,A[15]=P,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return new Ti().fromArray(this.elements)}copy(t){const n=this.elements,r=t.elements;return n[0]=r[0],n[1]=r[1],n[2]=r[2],n[3]=r[3],n[4]=r[4],n[5]=r[5],n[6]=r[6],n[7]=r[7],n[8]=r[8],n[9]=r[9],n[10]=r[10],n[11]=r[11],n[12]=r[12],n[13]=r[13],n[14]=r[14],n[15]=r[15],this}copyPosition(t){const n=this.elements,r=t.elements;return n[12]=r[12],n[13]=r[13],n[14]=r[14],this}setFromMatrix3(t){const n=t.elements;return this.set(n[0],n[3],n[6],0,n[1],n[4],n[7],0,n[2],n[5],n[8],0,0,0,0,1),this}extractBasis(t,n,r){return t.setFromMatrixColumn(this,0),n.setFromMatrixColumn(this,1),r.setFromMatrixColumn(this,2),this}makeBasis(t,n,r){return this.set(t.x,n.x,r.x,0,t.y,n.y,r.y,0,t.z,n.z,r.z,0,0,0,0,1),this}extractRotation(t){const n=this.elements,r=t.elements,o=1/Oc.setFromMatrixColumn(t,0).length(),c=1/Oc.setFromMatrixColumn(t,1).length(),d=1/Oc.setFromMatrixColumn(t,2).length();return n[0]=r[0]*o,n[1]=r[1]*o,n[2]=r[2]*o,n[3]=0,n[4]=r[4]*c,n[5]=r[5]*c,n[6]=r[6]*c,n[7]=0,n[8]=r[8]*d,n[9]=r[9]*d,n[10]=r[10]*d,n[11]=0,n[12]=0,n[13]=0,n[14]=0,n[15]=1,this}makeRotationFromEuler(t){const n=this.elements,r=t.x,o=t.y,c=t.z,d=Math.cos(r),p=Math.sin(r),v=Math.cos(o),_=Math.sin(o),x=Math.cos(c),M=Math.sin(c);if(t.order==="XYZ"){const b=d*x,E=d*M,U=p*x,L=p*M;n[0]=v*x,n[4]=-v*M,n[8]=_,n[1]=E+U*_,n[5]=b-L*_,n[9]=-p*v,n[2]=L-b*_,n[6]=U+E*_,n[10]=d*v}else if(t.order==="YXZ"){const b=v*x,E=v*M,U=_*x,L=_*M;n[0]=b+L*p,n[4]=U*p-E,n[8]=d*_,n[1]=d*M,n[5]=d*x,n[9]=-p,n[2]=E*p-U,n[6]=L+b*p,n[10]=d*v}else if(t.order==="ZXY"){const b=v*x,E=v*M,U=_*x,L=_*M;n[0]=b-L*p,n[4]=-d*M,n[8]=U+E*p,n[1]=E+U*p,n[5]=d*x,n[9]=L-b*p,n[2]=-d*_,n[6]=p,n[10]=d*v}else if(t.order==="ZYX"){const b=d*x,E=d*M,U=p*x,L=p*M;n[0]=v*x,n[4]=U*_-E,n[8]=b*_+L,n[1]=v*M,n[5]=L*_+b,n[9]=E*_-U,n[2]=-_,n[6]=p*v,n[10]=d*v}else if(t.order==="YZX"){const b=d*v,E=d*_,U=p*v,L=p*_;n[0]=v*x,n[4]=L-b*M,n[8]=U*M+E,n[1]=M,n[5]=d*x,n[9]=-p*x,n[2]=-_*x,n[6]=E*M+U,n[10]=b-L*M}else if(t.order==="XZY"){const b=d*v,E=d*_,U=p*v,L=p*_;n[0]=v*x,n[4]=-M,n[8]=_*x,n[1]=b*M+L,n[5]=d*x,n[9]=E*M-U,n[2]=U*M-E,n[6]=p*x,n[10]=L*M+b}return n[3]=0,n[7]=0,n[11]=0,n[12]=0,n[13]=0,n[14]=0,n[15]=1,this}makeRotationFromQuaternion(t){return this.compose(aL,t,oL)}lookAt(t,n,r){const o=this.elements;return as.subVectors(t,n),as.lengthSq()===0&&(as.z=1),as.normalize(),po.crossVectors(r,as),po.lengthSq()===0&&(Math.abs(r.z)===1?as.x+=1e-4:as.z+=1e-4,as.normalize(),po.crossVectors(r,as)),po.normalize(),Jd.crossVectors(as,po),o[0]=po.x,o[4]=Jd.x,o[8]=as.x,o[1]=po.y,o[5]=Jd.y,o[9]=as.y,o[2]=po.z,o[6]=Jd.z,o[10]=as.z,this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,n){const r=t.elements,o=n.elements,c=this.elements,d=r[0],p=r[4],v=r[8],_=r[12],x=r[1],M=r[5],b=r[9],E=r[13],U=r[2],L=r[6],P=r[10],A=r[14],X=r[3],k=r[7],O=r[11],z=r[15],Y=o[0],W=o[4],te=o[8],N=o[12],B=o[1],ee=o[5],Ee=o[9],de=o[13],be=o[2],Ae=o[6],Me=o[10],me=o[14],_e=o[3],Fe=o[7],He=o[11],nt=o[15];return c[0]=d*Y+p*B+v*be+_*_e,c[4]=d*W+p*ee+v*Ae+_*Fe,c[8]=d*te+p*Ee+v*Me+_*He,c[12]=d*N+p*de+v*me+_*nt,c[1]=x*Y+M*B+b*be+E*_e,c[5]=x*W+M*ee+b*Ae+E*Fe,c[9]=x*te+M*Ee+b*Me+E*He,c[13]=x*N+M*de+b*me+E*nt,c[2]=U*Y+L*B+P*be+A*_e,c[6]=U*W+L*ee+P*Ae+A*Fe,c[10]=U*te+L*Ee+P*Me+A*He,c[14]=U*N+L*de+P*me+A*nt,c[3]=X*Y+k*B+O*be+z*_e,c[7]=X*W+k*ee+O*Ae+z*Fe,c[11]=X*te+k*Ee+O*Me+z*He,c[15]=X*N+k*de+O*me+z*nt,this}multiplyScalar(t){const n=this.elements;return n[0]*=t,n[4]*=t,n[8]*=t,n[12]*=t,n[1]*=t,n[5]*=t,n[9]*=t,n[13]*=t,n[2]*=t,n[6]*=t,n[10]*=t,n[14]*=t,n[3]*=t,n[7]*=t,n[11]*=t,n[15]*=t,this}determinant(){const t=this.elements,n=t[0],r=t[4],o=t[8],c=t[12],d=t[1],p=t[5],v=t[9],_=t[13],x=t[2],M=t[6],b=t[10],E=t[14],U=t[3],L=t[7],P=t[11],A=t[15];return U*(+c*v*M-o*_*M-c*p*b+r*_*b+o*p*E-r*v*E)+L*(+n*v*E-n*_*b+c*d*b-o*d*E+o*_*x-c*v*x)+P*(+n*_*M-n*p*E-c*d*M+r*d*E+c*p*x-r*_*x)+A*(-o*p*x-n*v*M+n*p*b+o*d*M-r*d*b+r*v*x)}transpose(){const t=this.elements;let n;return n=t[1],t[1]=t[4],t[4]=n,n=t[2],t[2]=t[8],t[8]=n,n=t[6],t[6]=t[9],t[9]=n,n=t[3],t[3]=t[12],t[12]=n,n=t[7],t[7]=t[13],t[13]=n,n=t[11],t[11]=t[14],t[14]=n,this}setPosition(t,n,r){const o=this.elements;return t.isVector3?(o[12]=t.x,o[13]=t.y,o[14]=t.z):(o[12]=t,o[13]=n,o[14]=r),this}invert(){const t=this.elements,n=t[0],r=t[1],o=t[2],c=t[3],d=t[4],p=t[5],v=t[6],_=t[7],x=t[8],M=t[9],b=t[10],E=t[11],U=t[12],L=t[13],P=t[14],A=t[15],X=M*P*_-L*b*_+L*v*E-p*P*E-M*v*A+p*b*A,k=U*b*_-x*P*_-U*v*E+d*P*E+x*v*A-d*b*A,O=x*L*_-U*M*_+U*p*E-d*L*E-x*p*A+d*M*A,z=U*M*v-x*L*v-U*p*b+d*L*b+x*p*P-d*M*P,Y=n*X+r*k+o*O+c*z;if(Y===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const W=1/Y;return t[0]=X*W,t[1]=(L*b*c-M*P*c-L*o*E+r*P*E+M*o*A-r*b*A)*W,t[2]=(p*P*c-L*v*c+L*o*_-r*P*_-p*o*A+r*v*A)*W,t[3]=(M*v*c-p*b*c-M*o*_+r*b*_+p*o*E-r*v*E)*W,t[4]=k*W,t[5]=(x*P*c-U*b*c+U*o*E-n*P*E-x*o*A+n*b*A)*W,t[6]=(U*v*c-d*P*c-U*o*_+n*P*_+d*o*A-n*v*A)*W,t[7]=(d*b*c-x*v*c+x*o*_-n*b*_-d*o*E+n*v*E)*W,t[8]=O*W,t[9]=(U*M*c-x*L*c-U*r*E+n*L*E+x*r*A-n*M*A)*W,t[10]=(d*L*c-U*p*c+U*r*_-n*L*_-d*r*A+n*p*A)*W,t[11]=(x*p*c-d*M*c-x*r*_+n*M*_+d*r*E-n*p*E)*W,t[12]=z*W,t[13]=(x*L*o-U*M*o+U*r*b-n*L*b-x*r*P+n*M*P)*W,t[14]=(U*p*o-d*L*o-U*r*v+n*L*v+d*r*P-n*p*P)*W,t[15]=(d*M*o-x*p*o+x*r*v-n*M*v-d*r*b+n*p*b)*W,this}scale(t){const n=this.elements,r=t.x,o=t.y,c=t.z;return n[0]*=r,n[4]*=o,n[8]*=c,n[1]*=r,n[5]*=o,n[9]*=c,n[2]*=r,n[6]*=o,n[10]*=c,n[3]*=r,n[7]*=o,n[11]*=c,this}getMaxScaleOnAxis(){const t=this.elements,n=t[0]*t[0]+t[1]*t[1]+t[2]*t[2],r=t[4]*t[4]+t[5]*t[5]+t[6]*t[6],o=t[8]*t[8]+t[9]*t[9]+t[10]*t[10];return Math.sqrt(Math.max(n,r,o))}makeTranslation(t,n,r){return t.isVector3?this.set(1,0,0,t.x,0,1,0,t.y,0,0,1,t.z,0,0,0,1):this.set(1,0,0,t,0,1,0,n,0,0,1,r,0,0,0,1),this}makeRotationX(t){const n=Math.cos(t),r=Math.sin(t);return this.set(1,0,0,0,0,n,-r,0,0,r,n,0,0,0,0,1),this}makeRotationY(t){const n=Math.cos(t),r=Math.sin(t);return this.set(n,0,r,0,0,1,0,0,-r,0,n,0,0,0,0,1),this}makeRotationZ(t){const n=Math.cos(t),r=Math.sin(t);return this.set(n,-r,0,0,r,n,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(t,n){const r=Math.cos(n),o=Math.sin(n),c=1-r,d=t.x,p=t.y,v=t.z,_=c*d,x=c*p;return this.set(_*d+r,_*p-o*v,_*v+o*p,0,_*p+o*v,x*p+r,x*v-o*d,0,_*v-o*p,x*v+o*d,c*v*v+r,0,0,0,0,1),this}makeScale(t,n,r){return this.set(t,0,0,0,0,n,0,0,0,0,r,0,0,0,0,1),this}makeShear(t,n,r,o,c,d){return this.set(1,r,c,0,t,1,d,0,n,o,1,0,0,0,0,1),this}compose(t,n,r){const o=this.elements,c=n._x,d=n._y,p=n._z,v=n._w,_=c+c,x=d+d,M=p+p,b=c*_,E=c*x,U=c*M,L=d*x,P=d*M,A=p*M,X=v*_,k=v*x,O=v*M,z=r.x,Y=r.y,W=r.z;return o[0]=(1-(L+A))*z,o[1]=(E+O)*z,o[2]=(U-k)*z,o[3]=0,o[4]=(E-O)*Y,o[5]=(1-(b+A))*Y,o[6]=(P+X)*Y,o[7]=0,o[8]=(U+k)*W,o[9]=(P-X)*W,o[10]=(1-(b+L))*W,o[11]=0,o[12]=t.x,o[13]=t.y,o[14]=t.z,o[15]=1,this}decompose(t,n,r){const o=this.elements;let c=Oc.set(o[0],o[1],o[2]).length();const d=Oc.set(o[4],o[5],o[6]).length(),p=Oc.set(o[8],o[9],o[10]).length();this.determinant()<0&&(c=-c),t.x=o[12],t.y=o[13],t.z=o[14],Xs.copy(this);const _=1/c,x=1/d,M=1/p;return Xs.elements[0]*=_,Xs.elements[1]*=_,Xs.elements[2]*=_,Xs.elements[4]*=x,Xs.elements[5]*=x,Xs.elements[6]*=x,Xs.elements[8]*=M,Xs.elements[9]*=M,Xs.elements[10]*=M,n.setFromRotationMatrix(Xs),r.x=c,r.y=d,r.z=p,this}makePerspective(t,n,r,o,c,d,p=Ha){const v=this.elements,_=2*c/(n-t),x=2*c/(r-o),M=(n+t)/(n-t),b=(r+o)/(r-o);let E,U;if(p===Ha)E=-(d+c)/(d-c),U=-2*d*c/(d-c);else if(p===Vp)E=-d/(d-c),U=-d*c/(d-c);else throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: "+p);return v[0]=_,v[4]=0,v[8]=M,v[12]=0,v[1]=0,v[5]=x,v[9]=b,v[13]=0,v[2]=0,v[6]=0,v[10]=E,v[14]=U,v[3]=0,v[7]=0,v[11]=-1,v[15]=0,this}makeOrthographic(t,n,r,o,c,d,p=Ha){const v=this.elements,_=1/(n-t),x=1/(r-o),M=1/(d-c),b=(n+t)*_,E=(r+o)*x;let U,L;if(p===Ha)U=(d+c)*M,L=-2*M;else if(p===Vp)U=c*M,L=-1*M;else throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: "+p);return v[0]=2*_,v[4]=0,v[8]=0,v[12]=-b,v[1]=0,v[5]=2*x,v[9]=0,v[13]=-E,v[2]=0,v[6]=0,v[10]=L,v[14]=-U,v[3]=0,v[7]=0,v[11]=0,v[15]=1,this}equals(t){const n=this.elements,r=t.elements;for(let o=0;o<16;o++)if(n[o]!==r[o])return!1;return!0}fromArray(t,n=0){for(let r=0;r<16;r++)this.elements[r]=t[r+n];return this}toArray(t=[],n=0){const r=this.elements;return t[n]=r[0],t[n+1]=r[1],t[n+2]=r[2],t[n+3]=r[3],t[n+4]=r[4],t[n+5]=r[5],t[n+6]=r[6],t[n+7]=r[7],t[n+8]=r[8],t[n+9]=r[9],t[n+10]=r[10],t[n+11]=r[11],t[n+12]=r[12],t[n+13]=r[13],t[n+14]=r[14],t[n+15]=r[15],t}}const Oc=new ue,Xs=new Ti,aL=new ue(0,0,0),oL=new ue(1,1,1),po=new ue,Jd=new ue,as=new ue,sS=new Ti,aS=new kl;class Xa{constructor(t=0,n=0,r=0,o=Xa.DEFAULT_ORDER){this.isEuler=!0,this._x=t,this._y=n,this._z=r,this._order=o}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get order(){return this._order}set order(t){this._order=t,this._onChangeCallback()}set(t,n,r,o=this._order){return this._x=t,this._y=n,this._z=r,this._order=o,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(t){return this._x=t._x,this._y=t._y,this._z=t._z,this._order=t._order,this._onChangeCallback(),this}setFromRotationMatrix(t,n=this._order,r=!0){const o=t.elements,c=o[0],d=o[4],p=o[8],v=o[1],_=o[5],x=o[9],M=o[2],b=o[6],E=o[10];switch(n){case"XYZ":this._y=Math.asin(Bn(p,-1,1)),Math.abs(p)<.9999999?(this._x=Math.atan2(-x,E),this._z=Math.atan2(-d,c)):(this._x=Math.atan2(b,_),this._z=0);break;case"YXZ":this._x=Math.asin(-Bn(x,-1,1)),Math.abs(x)<.9999999?(this._y=Math.atan2(p,E),this._z=Math.atan2(v,_)):(this._y=Math.atan2(-M,c),this._z=0);break;case"ZXY":this._x=Math.asin(Bn(b,-1,1)),Math.abs(b)<.9999999?(this._y=Math.atan2(-M,E),this._z=Math.atan2(-d,_)):(this._y=0,this._z=Math.atan2(v,c));break;case"ZYX":this._y=Math.asin(-Bn(M,-1,1)),Math.abs(M)<.9999999?(this._x=Math.atan2(b,E),this._z=Math.atan2(v,c)):(this._x=0,this._z=Math.atan2(-d,_));break;case"YZX":this._z=Math.asin(Bn(v,-1,1)),Math.abs(v)<.9999999?(this._x=Math.atan2(-x,_),this._y=Math.atan2(-M,c)):(this._x=0,this._y=Math.atan2(p,E));break;case"XZY":this._z=Math.asin(-Bn(d,-1,1)),Math.abs(d)<.9999999?(this._x=Math.atan2(b,_),this._y=Math.atan2(p,c)):(this._x=Math.atan2(-x,E),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+n)}return this._order=n,r===!0&&this._onChangeCallback(),this}setFromQuaternion(t,n,r){return sS.makeRotationFromQuaternion(t),this.setFromRotationMatrix(sS,n,r)}setFromVector3(t,n=this._order){return this.set(t.x,t.y,t.z,n)}reorder(t){return aS.setFromEuler(this),this.setFromQuaternion(aS,t)}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._order===this._order}fromArray(t){return this._x=t[0],this._y=t[1],this._z=t[2],t[3]!==void 0&&(this._order=t[3]),this._onChangeCallback(),this}toArray(t=[],n=0){return t[n]=this._x,t[n+1]=this._y,t[n+2]=this._z,t[n+3]=this._order,t}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._order}}Xa.DEFAULT_ORDER="XYZ";class ux{constructor(){this.mask=1}set(t){this.mask=(1<<t|0)>>>0}enable(t){this.mask|=1<<t|0}enableAll(){this.mask=-1}toggle(t){this.mask^=1<<t|0}disable(t){this.mask&=~(1<<t|0)}disableAll(){this.mask=0}test(t){return(this.mask&t.mask)!==0}isEnabled(t){return(this.mask&(1<<t|0))!==0}}let lL=0;const oS=new ue,Bc=new kl,Ia=new Ti,jd=new ue,Mu=new ue,cL=new ue,hL=new kl,lS=new ue(1,0,0),cS=new ue(0,1,0),hS=new ue(0,0,1),uS={type:"added"},uL={type:"removed"},zc={type:"childadded",child:null},Q_={type:"childremoved",child:null};class Ar extends Xl{constructor(){super(),this.isObject3D=!0,Object.defineProperty(this,"id",{value:lL++}),this.uuid=To(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=Ar.DEFAULT_UP.clone();const t=new ue,n=new Xa,r=new kl,o=new ue(1,1,1);function c(){r.setFromEuler(n,!1)}function d(){n.setFromQuaternion(r,void 0,!1)}n._onChange(c),r._onChange(d),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:t},rotation:{configurable:!0,enumerable:!0,value:n},quaternion:{configurable:!0,enumerable:!0,value:r},scale:{configurable:!0,enumerable:!0,value:o},modelViewMatrix:{value:new Ti},normalMatrix:{value:new nn}}),this.matrix=new Ti,this.matrixWorld=new Ti,this.matrixAutoUpdate=Ar.DEFAULT_MATRIX_AUTO_UPDATE,this.matrixWorldAutoUpdate=Ar.DEFAULT_MATRIX_WORLD_AUTO_UPDATE,this.matrixWorldNeedsUpdate=!1,this.layers=new ux,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeShadow(){}onAfterShadow(){}onBeforeRender(){}onAfterRender(){}applyMatrix4(t){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(t),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(t){return this.quaternion.premultiply(t),this}setRotationFromAxisAngle(t,n){this.quaternion.setFromAxisAngle(t,n)}setRotationFromEuler(t){this.quaternion.setFromEuler(t,!0)}setRotationFromMatrix(t){this.quaternion.setFromRotationMatrix(t)}setRotationFromQuaternion(t){this.quaternion.copy(t)}rotateOnAxis(t,n){return Bc.setFromAxisAngle(t,n),this.quaternion.multiply(Bc),this}rotateOnWorldAxis(t,n){return Bc.setFromAxisAngle(t,n),this.quaternion.premultiply(Bc),this}rotateX(t){return this.rotateOnAxis(lS,t)}rotateY(t){return this.rotateOnAxis(cS,t)}rotateZ(t){return this.rotateOnAxis(hS,t)}translateOnAxis(t,n){return oS.copy(t).applyQuaternion(this.quaternion),this.position.add(oS.multiplyScalar(n)),this}translateX(t){return this.translateOnAxis(lS,t)}translateY(t){return this.translateOnAxis(cS,t)}translateZ(t){return this.translateOnAxis(hS,t)}localToWorld(t){return this.updateWorldMatrix(!0,!1),t.applyMatrix4(this.matrixWorld)}worldToLocal(t){return this.updateWorldMatrix(!0,!1),t.applyMatrix4(Ia.copy(this.matrixWorld).invert())}lookAt(t,n,r){t.isVector3?jd.copy(t):jd.set(t,n,r);const o=this.parent;this.updateWorldMatrix(!0,!1),Mu.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?Ia.lookAt(Mu,jd,this.up):Ia.lookAt(jd,Mu,this.up),this.quaternion.setFromRotationMatrix(Ia),o&&(Ia.extractRotation(o.matrixWorld),Bc.setFromRotationMatrix(Ia),this.quaternion.premultiply(Bc.invert()))}add(t){if(arguments.length>1){for(let n=0;n<arguments.length;n++)this.add(arguments[n]);return this}return t===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",t),this):(t&&t.isObject3D?(t.removeFromParent(),t.parent=this,this.children.push(t),t.dispatchEvent(uS),zc.child=t,this.dispatchEvent(zc),zc.child=null):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",t),this)}remove(t){if(arguments.length>1){for(let r=0;r<arguments.length;r++)this.remove(arguments[r]);return this}const n=this.children.indexOf(t);return n!==-1&&(t.parent=null,this.children.splice(n,1),t.dispatchEvent(uL),Q_.child=t,this.dispatchEvent(Q_),Q_.child=null),this}removeFromParent(){const t=this.parent;return t!==null&&t.remove(this),this}clear(){return this.remove(...this.children)}attach(t){return this.updateWorldMatrix(!0,!1),Ia.copy(this.matrixWorld).invert(),t.parent!==null&&(t.parent.updateWorldMatrix(!0,!1),Ia.multiply(t.parent.matrixWorld)),t.applyMatrix4(Ia),t.removeFromParent(),t.parent=this,this.children.push(t),t.updateWorldMatrix(!1,!0),t.dispatchEvent(uS),zc.child=t,this.dispatchEvent(zc),zc.child=null,this}getObjectById(t){return this.getObjectByProperty("id",t)}getObjectByName(t){return this.getObjectByProperty("name",t)}getObjectByProperty(t,n){if(this[t]===n)return this;for(let r=0,o=this.children.length;r<o;r++){const d=this.children[r].getObjectByProperty(t,n);if(d!==void 0)return d}}getObjectsByProperty(t,n,r=[]){this[t]===n&&r.push(this);const o=this.children;for(let c=0,d=o.length;c<d;c++)o[c].getObjectsByProperty(t,n,r);return r}getWorldPosition(t){return this.updateWorldMatrix(!0,!1),t.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Mu,t,cL),t}getWorldScale(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Mu,hL,t),t}getWorldDirection(t){this.updateWorldMatrix(!0,!1);const n=this.matrixWorld.elements;return t.set(n[8],n[9],n[10]).normalize()}raycast(){}traverse(t){t(this);const n=this.children;for(let r=0,o=n.length;r<o;r++)n[r].traverse(t)}traverseVisible(t){if(this.visible===!1)return;t(this);const n=this.children;for(let r=0,o=n.length;r<o;r++)n[r].traverseVisible(t)}traverseAncestors(t){const n=this.parent;n!==null&&(t(n),n.traverseAncestors(t))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||t)&&(this.matrixWorldAutoUpdate===!0&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),this.matrixWorldNeedsUpdate=!1,t=!0);const n=this.children;for(let r=0,o=n.length;r<o;r++)n[r].updateMatrixWorld(t)}updateWorldMatrix(t,n){const r=this.parent;if(t===!0&&r!==null&&r.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),this.matrixWorldAutoUpdate===!0&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),n===!0){const o=this.children;for(let c=0,d=o.length;c<d;c++)o[c].updateWorldMatrix(!1,!0)}}toJSON(t){const n=t===void 0||typeof t=="string",r={};n&&(t={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},r.metadata={version:4.6,type:"Object",generator:"Object3D.toJSON"});const o={};o.uuid=this.uuid,o.type=this.type,this.name!==""&&(o.name=this.name),this.castShadow===!0&&(o.castShadow=!0),this.receiveShadow===!0&&(o.receiveShadow=!0),this.visible===!1&&(o.visible=!1),this.frustumCulled===!1&&(o.frustumCulled=!1),this.renderOrder!==0&&(o.renderOrder=this.renderOrder),Object.keys(this.userData).length>0&&(o.userData=this.userData),o.layers=this.layers.mask,o.matrix=this.matrix.toArray(),o.up=this.up.toArray(),this.matrixAutoUpdate===!1&&(o.matrixAutoUpdate=!1),this.isInstancedMesh&&(o.type="InstancedMesh",o.count=this.count,o.instanceMatrix=this.instanceMatrix.toJSON(),this.instanceColor!==null&&(o.instanceColor=this.instanceColor.toJSON())),this.isBatchedMesh&&(o.type="BatchedMesh",o.perObjectFrustumCulled=this.perObjectFrustumCulled,o.sortObjects=this.sortObjects,o.drawRanges=this._drawRanges,o.reservedRanges=this._reservedRanges,o.visibility=this._visibility,o.active=this._active,o.bounds=this._bounds.map(p=>({boxInitialized:p.boxInitialized,boxMin:p.box.min.toArray(),boxMax:p.box.max.toArray(),sphereInitialized:p.sphereInitialized,sphereRadius:p.sphere.radius,sphereCenter:p.sphere.center.toArray()})),o.maxInstanceCount=this._maxInstanceCount,o.maxVertexCount=this._maxVertexCount,o.maxIndexCount=this._maxIndexCount,o.geometryInitialized=this._geometryInitialized,o.geometryCount=this._geometryCount,o.matricesTexture=this._matricesTexture.toJSON(t),this._colorsTexture!==null&&(o.colorsTexture=this._colorsTexture.toJSON(t)),this.boundingSphere!==null&&(o.boundingSphere={center:o.boundingSphere.center.toArray(),radius:o.boundingSphere.radius}),this.boundingBox!==null&&(o.boundingBox={min:o.boundingBox.min.toArray(),max:o.boundingBox.max.toArray()}));function c(p,v){return p[v.uuid]===void 0&&(p[v.uuid]=v.toJSON(t)),v.uuid}if(this.isScene)this.background&&(this.background.isColor?o.background=this.background.toJSON():this.background.isTexture&&(o.background=this.background.toJSON(t).uuid)),this.environment&&this.environment.isTexture&&this.environment.isRenderTargetTexture!==!0&&(o.environment=this.environment.toJSON(t).uuid);else if(this.isMesh||this.isLine||this.isPoints){o.geometry=c(t.geometries,this.geometry);const p=this.geometry.parameters;if(p!==void 0&&p.shapes!==void 0){const v=p.shapes;if(Array.isArray(v))for(let _=0,x=v.length;_<x;_++){const M=v[_];c(t.shapes,M)}else c(t.shapes,v)}}if(this.isSkinnedMesh&&(o.bindMode=this.bindMode,o.bindMatrix=this.bindMatrix.toArray(),this.skeleton!==void 0&&(c(t.skeletons,this.skeleton),o.skeleton=this.skeleton.uuid)),this.material!==void 0)if(Array.isArray(this.material)){const p=[];for(let v=0,_=this.material.length;v<_;v++)p.push(c(t.materials,this.material[v]));o.material=p}else o.material=c(t.materials,this.material);if(this.children.length>0){o.children=[];for(let p=0;p<this.children.length;p++)o.children.push(this.children[p].toJSON(t).object)}if(this.animations.length>0){o.animations=[];for(let p=0;p<this.animations.length;p++){const v=this.animations[p];o.animations.push(c(t.animations,v))}}if(n){const p=d(t.geometries),v=d(t.materials),_=d(t.textures),x=d(t.images),M=d(t.shapes),b=d(t.skeletons),E=d(t.animations),U=d(t.nodes);p.length>0&&(r.geometries=p),v.length>0&&(r.materials=v),_.length>0&&(r.textures=_),x.length>0&&(r.images=x),M.length>0&&(r.shapes=M),b.length>0&&(r.skeletons=b),E.length>0&&(r.animations=E),U.length>0&&(r.nodes=U)}return r.object=o,r;function d(p){const v=[];for(const _ in p){const x=p[_];delete x.metadata,v.push(x)}return v}}clone(t){return new this.constructor().copy(this,t)}copy(t,n=!0){if(this.name=t.name,this.up.copy(t.up),this.position.copy(t.position),this.rotation.order=t.rotation.order,this.quaternion.copy(t.quaternion),this.scale.copy(t.scale),this.matrix.copy(t.matrix),this.matrixWorld.copy(t.matrixWorld),this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrixWorldAutoUpdate=t.matrixWorldAutoUpdate,this.matrixWorldNeedsUpdate=t.matrixWorldNeedsUpdate,this.layers.mask=t.layers.mask,this.visible=t.visible,this.castShadow=t.castShadow,this.receiveShadow=t.receiveShadow,this.frustumCulled=t.frustumCulled,this.renderOrder=t.renderOrder,this.animations=t.animations.slice(),this.userData=JSON.parse(JSON.stringify(t.userData)),n===!0)for(let r=0;r<t.children.length;r++){const o=t.children[r];this.add(o.clone())}return this}}Ar.DEFAULT_UP=new ue(0,1,0);Ar.DEFAULT_MATRIX_AUTO_UPDATE=!0;Ar.DEFAULT_MATRIX_WORLD_AUTO_UPDATE=!0;const qs=new ue,Da=new ue,eg=new ue,La=new ue,kc=new ue,Vc=new ue,fS=new ue,tg=new ue,ng=new ue,ig=new ue,rg=new Vi,sg=new Vi,ag=new Vi;class ws{constructor(t=new ue,n=new ue,r=new ue){this.a=t,this.b=n,this.c=r}static getNormal(t,n,r,o){o.subVectors(r,n),qs.subVectors(t,n),o.cross(qs);const c=o.lengthSq();return c>0?o.multiplyScalar(1/Math.sqrt(c)):o.set(0,0,0)}static getBarycoord(t,n,r,o,c){qs.subVectors(o,n),Da.subVectors(r,n),eg.subVectors(t,n);const d=qs.dot(qs),p=qs.dot(Da),v=qs.dot(eg),_=Da.dot(Da),x=Da.dot(eg),M=d*_-p*p;if(M===0)return c.set(0,0,0),null;const b=1/M,E=(_*v-p*x)*b,U=(d*x-p*v)*b;return c.set(1-E-U,U,E)}static containsPoint(t,n,r,o){return this.getBarycoord(t,n,r,o,La)===null?!1:La.x>=0&&La.y>=0&&La.x+La.y<=1}static getInterpolation(t,n,r,o,c,d,p,v){return this.getBarycoord(t,n,r,o,La)===null?(v.x=0,v.y=0,"z"in v&&(v.z=0),"w"in v&&(v.w=0),null):(v.setScalar(0),v.addScaledVector(c,La.x),v.addScaledVector(d,La.y),v.addScaledVector(p,La.z),v)}static getInterpolatedAttribute(t,n,r,o,c,d){return rg.setScalar(0),sg.setScalar(0),ag.setScalar(0),rg.fromBufferAttribute(t,n),sg.fromBufferAttribute(t,r),ag.fromBufferAttribute(t,o),d.setScalar(0),d.addScaledVector(rg,c.x),d.addScaledVector(sg,c.y),d.addScaledVector(ag,c.z),d}static isFrontFacing(t,n,r,o){return qs.subVectors(r,n),Da.subVectors(t,n),qs.cross(Da).dot(o)<0}set(t,n,r){return this.a.copy(t),this.b.copy(n),this.c.copy(r),this}setFromPointsAndIndices(t,n,r,o){return this.a.copy(t[n]),this.b.copy(t[r]),this.c.copy(t[o]),this}setFromAttributeAndIndices(t,n,r,o){return this.a.fromBufferAttribute(t,n),this.b.fromBufferAttribute(t,r),this.c.fromBufferAttribute(t,o),this}clone(){return new this.constructor().copy(this)}copy(t){return this.a.copy(t.a),this.b.copy(t.b),this.c.copy(t.c),this}getArea(){return qs.subVectors(this.c,this.b),Da.subVectors(this.a,this.b),qs.cross(Da).length()*.5}getMidpoint(t){return t.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(t){return ws.getNormal(this.a,this.b,this.c,t)}getPlane(t){return t.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(t,n){return ws.getBarycoord(t,this.a,this.b,this.c,n)}getInterpolation(t,n,r,o,c){return ws.getInterpolation(t,this.a,this.b,this.c,n,r,o,c)}containsPoint(t){return ws.containsPoint(t,this.a,this.b,this.c)}isFrontFacing(t){return ws.isFrontFacing(this.a,this.b,this.c,t)}intersectsBox(t){return t.intersectsTriangle(this)}closestPointToPoint(t,n){const r=this.a,o=this.b,c=this.c;let d,p;kc.subVectors(o,r),Vc.subVectors(c,r),tg.subVectors(t,r);const v=kc.dot(tg),_=Vc.dot(tg);if(v<=0&&_<=0)return n.copy(r);ng.subVectors(t,o);const x=kc.dot(ng),M=Vc.dot(ng);if(x>=0&&M<=x)return n.copy(o);const b=v*M-x*_;if(b<=0&&v>=0&&x<=0)return d=v/(v-x),n.copy(r).addScaledVector(kc,d);ig.subVectors(t,c);const E=kc.dot(ig),U=Vc.dot(ig);if(U>=0&&E<=U)return n.copy(c);const L=E*_-v*U;if(L<=0&&_>=0&&U<=0)return p=_/(_-U),n.copy(r).addScaledVector(Vc,p);const P=x*U-E*M;if(P<=0&&M-x>=0&&E-U>=0)return fS.subVectors(c,o),p=(M-x)/(M-x+(E-U)),n.copy(o).addScaledVector(fS,p);const A=1/(P+L+b);return d=L*A,p=b*A,n.copy(r).addScaledVector(kc,d).addScaledVector(Vc,p)}equals(t){return t.a.equals(this.a)&&t.b.equals(this.b)&&t.c.equals(this.c)}}const RE={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},mo={h:0,s:0,l:0},Qd={h:0,s:0,l:0};function og(a,t,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?a+(t-a)*6*n:n<1/2?t:n<2/3?a+(t-a)*6*(2/3-n):a}class Qn{constructor(t,n,r){return this.isColor=!0,this.r=1,this.g=1,this.b=1,this.set(t,n,r)}set(t,n,r){if(n===void 0&&r===void 0){const o=t;o&&o.isColor?this.copy(o):typeof o=="number"?this.setHex(o):typeof o=="string"&&this.setStyle(o)}else this.setRGB(t,n,r);return this}setScalar(t){return this.r=t,this.g=t,this.b=t,this}setHex(t,n=Es){return t=Math.floor(t),this.r=(t>>16&255)/255,this.g=(t>>8&255)/255,this.b=(t&255)/255,ni.toWorkingColorSpace(this,n),this}setRGB(t,n,r,o=ni.workingColorSpace){return this.r=t,this.g=n,this.b=r,ni.toWorkingColorSpace(this,o),this}setHSL(t,n,r,o=ni.workingColorSpace){if(t=YD(t,1),n=Bn(n,0,1),r=Bn(r,0,1),n===0)this.r=this.g=this.b=r;else{const c=r<=.5?r*(1+n):r+n-r*n,d=2*r-c;this.r=og(d,c,t+1/3),this.g=og(d,c,t),this.b=og(d,c,t-1/3)}return ni.toWorkingColorSpace(this,o),this}setStyle(t,n=Es){function r(c){c!==void 0&&parseFloat(c)<1&&console.warn("THREE.Color: Alpha component of "+t+" will be ignored.")}let o;if(o=/^(\w+)\(([^\)]*)\)/.exec(t)){let c;const d=o[1],p=o[2];switch(d){case"rgb":case"rgba":if(c=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(p))return r(c[4]),this.setRGB(Math.min(255,parseInt(c[1],10))/255,Math.min(255,parseInt(c[2],10))/255,Math.min(255,parseInt(c[3],10))/255,n);if(c=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(p))return r(c[4]),this.setRGB(Math.min(100,parseInt(c[1],10))/100,Math.min(100,parseInt(c[2],10))/100,Math.min(100,parseInt(c[3],10))/100,n);break;case"hsl":case"hsla":if(c=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(p))return r(c[4]),this.setHSL(parseFloat(c[1])/360,parseFloat(c[2])/100,parseFloat(c[3])/100,n);break;default:console.warn("THREE.Color: Unknown color model "+t)}}else if(o=/^\#([A-Fa-f\d]+)$/.exec(t)){const c=o[1],d=c.length;if(d===3)return this.setRGB(parseInt(c.charAt(0),16)/15,parseInt(c.charAt(1),16)/15,parseInt(c.charAt(2),16)/15,n);if(d===6)return this.setHex(parseInt(c,16),n);console.warn("THREE.Color: Invalid hex color "+t)}else if(t&&t.length>0)return this.setColorName(t,n);return this}setColorName(t,n=Es){const r=RE[t.toLowerCase()];return r!==void 0?this.setHex(r,n):console.warn("THREE.Color: Unknown color "+t),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(t){return this.r=t.r,this.g=t.g,this.b=t.b,this}copySRGBToLinear(t){return this.r=Ga(t.r),this.g=Ga(t.g),this.b=Ga(t.b),this}copyLinearToSRGB(t){return this.r=oh(t.r),this.g=oh(t.g),this.b=oh(t.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(t=Es){return ni.fromWorkingColorSpace(Sr.copy(this),t),Math.round(Bn(Sr.r*255,0,255))*65536+Math.round(Bn(Sr.g*255,0,255))*256+Math.round(Bn(Sr.b*255,0,255))}getHexString(t=Es){return("000000"+this.getHex(t).toString(16)).slice(-6)}getHSL(t,n=ni.workingColorSpace){ni.fromWorkingColorSpace(Sr.copy(this),n);const r=Sr.r,o=Sr.g,c=Sr.b,d=Math.max(r,o,c),p=Math.min(r,o,c);let v,_;const x=(p+d)/2;if(p===d)v=0,_=0;else{const M=d-p;switch(_=x<=.5?M/(d+p):M/(2-d-p),d){case r:v=(o-c)/M+(o<c?6:0);break;case o:v=(c-r)/M+2;break;case c:v=(r-o)/M+4;break}v/=6}return t.h=v,t.s=_,t.l=x,t}getRGB(t,n=ni.workingColorSpace){return ni.fromWorkingColorSpace(Sr.copy(this),n),t.r=Sr.r,t.g=Sr.g,t.b=Sr.b,t}getStyle(t=Es){ni.fromWorkingColorSpace(Sr.copy(this),t);const n=Sr.r,r=Sr.g,o=Sr.b;return t!==Es?`color(${t} ${n.toFixed(3)} ${r.toFixed(3)} ${o.toFixed(3)})`:`rgb(${Math.round(n*255)},${Math.round(r*255)},${Math.round(o*255)})`}offsetHSL(t,n,r){return this.getHSL(mo),this.setHSL(mo.h+t,mo.s+n,mo.l+r)}add(t){return this.r+=t.r,this.g+=t.g,this.b+=t.b,this}addColors(t,n){return this.r=t.r+n.r,this.g=t.g+n.g,this.b=t.b+n.b,this}addScalar(t){return this.r+=t,this.g+=t,this.b+=t,this}sub(t){return this.r=Math.max(0,this.r-t.r),this.g=Math.max(0,this.g-t.g),this.b=Math.max(0,this.b-t.b),this}multiply(t){return this.r*=t.r,this.g*=t.g,this.b*=t.b,this}multiplyScalar(t){return this.r*=t,this.g*=t,this.b*=t,this}lerp(t,n){return this.r+=(t.r-this.r)*n,this.g+=(t.g-this.g)*n,this.b+=(t.b-this.b)*n,this}lerpColors(t,n,r){return this.r=t.r+(n.r-t.r)*r,this.g=t.g+(n.g-t.g)*r,this.b=t.b+(n.b-t.b)*r,this}lerpHSL(t,n){this.getHSL(mo),t.getHSL(Qd);const r=W_(mo.h,Qd.h,n),o=W_(mo.s,Qd.s,n),c=W_(mo.l,Qd.l,n);return this.setHSL(r,o,c),this}setFromVector3(t){return this.r=t.x,this.g=t.y,this.b=t.z,this}applyMatrix3(t){const n=this.r,r=this.g,o=this.b,c=t.elements;return this.r=c[0]*n+c[3]*r+c[6]*o,this.g=c[1]*n+c[4]*r+c[7]*o,this.b=c[2]*n+c[5]*r+c[8]*o,this}equals(t){return t.r===this.r&&t.g===this.g&&t.b===this.b}fromArray(t,n=0){return this.r=t[n],this.g=t[n+1],this.b=t[n+2],this}toArray(t=[],n=0){return t[n]=this.r,t[n+1]=this.g,t[n+2]=this.b,t}fromBufferAttribute(t,n){return this.r=t.getX(n),this.g=t.getY(n),this.b=t.getZ(n),this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b}}const Sr=new Qn;Qn.NAMES=RE;let fL=0;class ql extends Xl{constructor(){super(),this.isMaterial=!0,Object.defineProperty(this,"id",{value:fL++}),this.uuid=To(),this.name="",this.type="Material",this.blending=sh,this.side=Do,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.alphaHash=!1,this.blendSrc=Xg,this.blendDst=qg,this.blendEquation=Tl,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.blendColor=new Qn(0,0,0),this.blendAlpha=0,this.depthFunc=fh,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=QM,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=Dc,this.stencilZFail=Dc,this.stencilZPass=Dc,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.forceSinglePass=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(t){this._alphaTest>0!=t>0&&this.version++,this._alphaTest=t}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(t){if(t!==void 0)for(const n in t){const r=t[n];if(r===void 0){console.warn(`THREE.Material: parameter '${n}' has value of undefined.`);continue}const o=this[n];if(o===void 0){console.warn(`THREE.Material: '${n}' is not a property of THREE.${this.type}.`);continue}o&&o.isColor?o.set(r):o&&o.isVector3&&r&&r.isVector3?o.copy(r):this[n]=r}}toJSON(t){const n=t===void 0||typeof t=="string";n&&(t={textures:{},images:{}});const r={metadata:{version:4.6,type:"Material",generator:"Material.toJSON"}};r.uuid=this.uuid,r.type=this.type,this.name!==""&&(r.name=this.name),this.color&&this.color.isColor&&(r.color=this.color.getHex()),this.roughness!==void 0&&(r.roughness=this.roughness),this.metalness!==void 0&&(r.metalness=this.metalness),this.sheen!==void 0&&(r.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(r.sheenColor=this.sheenColor.getHex()),this.sheenRoughness!==void 0&&(r.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(r.emissive=this.emissive.getHex()),this.emissiveIntensity!==void 0&&this.emissiveIntensity!==1&&(r.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(r.specular=this.specular.getHex()),this.specularIntensity!==void 0&&(r.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(r.specularColor=this.specularColor.getHex()),this.shininess!==void 0&&(r.shininess=this.shininess),this.clearcoat!==void 0&&(r.clearcoat=this.clearcoat),this.clearcoatRoughness!==void 0&&(r.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(r.clearcoatMap=this.clearcoatMap.toJSON(t).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(r.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(t).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(r.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(t).uuid,r.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.dispersion!==void 0&&(r.dispersion=this.dispersion),this.iridescence!==void 0&&(r.iridescence=this.iridescence),this.iridescenceIOR!==void 0&&(r.iridescenceIOR=this.iridescenceIOR),this.iridescenceThicknessRange!==void 0&&(r.iridescenceThicknessRange=this.iridescenceThicknessRange),this.iridescenceMap&&this.iridescenceMap.isTexture&&(r.iridescenceMap=this.iridescenceMap.toJSON(t).uuid),this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture&&(r.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(t).uuid),this.anisotropy!==void 0&&(r.anisotropy=this.anisotropy),this.anisotropyRotation!==void 0&&(r.anisotropyRotation=this.anisotropyRotation),this.anisotropyMap&&this.anisotropyMap.isTexture&&(r.anisotropyMap=this.anisotropyMap.toJSON(t).uuid),this.map&&this.map.isTexture&&(r.map=this.map.toJSON(t).uuid),this.matcap&&this.matcap.isTexture&&(r.matcap=this.matcap.toJSON(t).uuid),this.alphaMap&&this.alphaMap.isTexture&&(r.alphaMap=this.alphaMap.toJSON(t).uuid),this.lightMap&&this.lightMap.isTexture&&(r.lightMap=this.lightMap.toJSON(t).uuid,r.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(r.aoMap=this.aoMap.toJSON(t).uuid,r.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(r.bumpMap=this.bumpMap.toJSON(t).uuid,r.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(r.normalMap=this.normalMap.toJSON(t).uuid,r.normalMapType=this.normalMapType,r.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(r.displacementMap=this.displacementMap.toJSON(t).uuid,r.displacementScale=this.displacementScale,r.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(r.roughnessMap=this.roughnessMap.toJSON(t).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(r.metalnessMap=this.metalnessMap.toJSON(t).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(r.emissiveMap=this.emissiveMap.toJSON(t).uuid),this.specularMap&&this.specularMap.isTexture&&(r.specularMap=this.specularMap.toJSON(t).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(r.specularIntensityMap=this.specularIntensityMap.toJSON(t).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(r.specularColorMap=this.specularColorMap.toJSON(t).uuid),this.envMap&&this.envMap.isTexture&&(r.envMap=this.envMap.toJSON(t).uuid,this.combine!==void 0&&(r.combine=this.combine)),this.envMapRotation!==void 0&&(r.envMapRotation=this.envMapRotation.toArray()),this.envMapIntensity!==void 0&&(r.envMapIntensity=this.envMapIntensity),this.reflectivity!==void 0&&(r.reflectivity=this.reflectivity),this.refractionRatio!==void 0&&(r.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(r.gradientMap=this.gradientMap.toJSON(t).uuid),this.transmission!==void 0&&(r.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(r.transmissionMap=this.transmissionMap.toJSON(t).uuid),this.thickness!==void 0&&(r.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(r.thicknessMap=this.thicknessMap.toJSON(t).uuid),this.attenuationDistance!==void 0&&this.attenuationDistance!==1/0&&(r.attenuationDistance=this.attenuationDistance),this.attenuationColor!==void 0&&(r.attenuationColor=this.attenuationColor.getHex()),this.size!==void 0&&(r.size=this.size),this.shadowSide!==null&&(r.shadowSide=this.shadowSide),this.sizeAttenuation!==void 0&&(r.sizeAttenuation=this.sizeAttenuation),this.blending!==sh&&(r.blending=this.blending),this.side!==Do&&(r.side=this.side),this.vertexColors===!0&&(r.vertexColors=!0),this.opacity<1&&(r.opacity=this.opacity),this.transparent===!0&&(r.transparent=!0),this.blendSrc!==Xg&&(r.blendSrc=this.blendSrc),this.blendDst!==qg&&(r.blendDst=this.blendDst),this.blendEquation!==Tl&&(r.blendEquation=this.blendEquation),this.blendSrcAlpha!==null&&(r.blendSrcAlpha=this.blendSrcAlpha),this.blendDstAlpha!==null&&(r.blendDstAlpha=this.blendDstAlpha),this.blendEquationAlpha!==null&&(r.blendEquationAlpha=this.blendEquationAlpha),this.blendColor&&this.blendColor.isColor&&(r.blendColor=this.blendColor.getHex()),this.blendAlpha!==0&&(r.blendAlpha=this.blendAlpha),this.depthFunc!==fh&&(r.depthFunc=this.depthFunc),this.depthTest===!1&&(r.depthTest=this.depthTest),this.depthWrite===!1&&(r.depthWrite=this.depthWrite),this.colorWrite===!1&&(r.colorWrite=this.colorWrite),this.stencilWriteMask!==255&&(r.stencilWriteMask=this.stencilWriteMask),this.stencilFunc!==QM&&(r.stencilFunc=this.stencilFunc),this.stencilRef!==0&&(r.stencilRef=this.stencilRef),this.stencilFuncMask!==255&&(r.stencilFuncMask=this.stencilFuncMask),this.stencilFail!==Dc&&(r.stencilFail=this.stencilFail),this.stencilZFail!==Dc&&(r.stencilZFail=this.stencilZFail),this.stencilZPass!==Dc&&(r.stencilZPass=this.stencilZPass),this.stencilWrite===!0&&(r.stencilWrite=this.stencilWrite),this.rotation!==void 0&&this.rotation!==0&&(r.rotation=this.rotation),this.polygonOffset===!0&&(r.polygonOffset=!0),this.polygonOffsetFactor!==0&&(r.polygonOffsetFactor=this.polygonOffsetFactor),this.polygonOffsetUnits!==0&&(r.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth!==void 0&&this.linewidth!==1&&(r.linewidth=this.linewidth),this.dashSize!==void 0&&(r.dashSize=this.dashSize),this.gapSize!==void 0&&(r.gapSize=this.gapSize),this.scale!==void 0&&(r.scale=this.scale),this.dithering===!0&&(r.dithering=!0),this.alphaTest>0&&(r.alphaTest=this.alphaTest),this.alphaHash===!0&&(r.alphaHash=!0),this.alphaToCoverage===!0&&(r.alphaToCoverage=!0),this.premultipliedAlpha===!0&&(r.premultipliedAlpha=!0),this.forceSinglePass===!0&&(r.forceSinglePass=!0),this.wireframe===!0&&(r.wireframe=!0),this.wireframeLinewidth>1&&(r.wireframeLinewidth=this.wireframeLinewidth),this.wireframeLinecap!=="round"&&(r.wireframeLinecap=this.wireframeLinecap),this.wireframeLinejoin!=="round"&&(r.wireframeLinejoin=this.wireframeLinejoin),this.flatShading===!0&&(r.flatShading=!0),this.visible===!1&&(r.visible=!1),this.toneMapped===!1&&(r.toneMapped=!1),this.fog===!1&&(r.fog=!1),Object.keys(this.userData).length>0&&(r.userData=this.userData);function o(c){const d=[];for(const p in c){const v=c[p];delete v.metadata,d.push(v)}return d}if(n){const c=o(t.textures),d=o(t.images);c.length>0&&(r.textures=c),d.length>0&&(r.images=d)}return r}clone(){return new this.constructor().copy(this)}copy(t){this.name=t.name,this.blending=t.blending,this.side=t.side,this.vertexColors=t.vertexColors,this.opacity=t.opacity,this.transparent=t.transparent,this.blendSrc=t.blendSrc,this.blendDst=t.blendDst,this.blendEquation=t.blendEquation,this.blendSrcAlpha=t.blendSrcAlpha,this.blendDstAlpha=t.blendDstAlpha,this.blendEquationAlpha=t.blendEquationAlpha,this.blendColor.copy(t.blendColor),this.blendAlpha=t.blendAlpha,this.depthFunc=t.depthFunc,this.depthTest=t.depthTest,this.depthWrite=t.depthWrite,this.stencilWriteMask=t.stencilWriteMask,this.stencilFunc=t.stencilFunc,this.stencilRef=t.stencilRef,this.stencilFuncMask=t.stencilFuncMask,this.stencilFail=t.stencilFail,this.stencilZFail=t.stencilZFail,this.stencilZPass=t.stencilZPass,this.stencilWrite=t.stencilWrite;const n=t.clippingPlanes;let r=null;if(n!==null){const o=n.length;r=new Array(o);for(let c=0;c!==o;++c)r[c]=n[c].clone()}return this.clippingPlanes=r,this.clipIntersection=t.clipIntersection,this.clipShadows=t.clipShadows,this.shadowSide=t.shadowSide,this.colorWrite=t.colorWrite,this.precision=t.precision,this.polygonOffset=t.polygonOffset,this.polygonOffsetFactor=t.polygonOffsetFactor,this.polygonOffsetUnits=t.polygonOffsetUnits,this.dithering=t.dithering,this.alphaTest=t.alphaTest,this.alphaHash=t.alphaHash,this.alphaToCoverage=t.alphaToCoverage,this.premultipliedAlpha=t.premultipliedAlpha,this.forceSinglePass=t.forceSinglePass,this.visible=t.visible,this.toneMapped=t.toneMapped,this.userData=JSON.parse(JSON.stringify(t.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(t){t===!0&&this.version++}onBuild(){console.warn("Material: onBuild() has been removed.")}}class Hp extends ql{constructor(t){super(),this.isMeshBasicMaterial=!0,this.type="MeshBasicMaterial",this.color=new Qn(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new Xa,this.combine=fE,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.envMapRotation.copy(t.envMapRotation),this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.fog=t.fog,this}}const qi=new ue,ep=new ln;class ds{constructor(t,n,r=!1){if(Array.isArray(t))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.isBufferAttribute=!0,this.name="",this.array=t,this.itemSize=n,this.count=t!==void 0?t.length/n:0,this.normalized=r,this.usage=kp,this.updateRanges=[],this.gpuType=Va,this.version=0}onUploadCallback(){}set needsUpdate(t){t===!0&&this.version++}setUsage(t){return this.usage=t,this}addUpdateRange(t,n){this.updateRanges.push({start:t,count:n})}clearUpdateRanges(){this.updateRanges.length=0}copy(t){return this.name=t.name,this.array=new t.array.constructor(t.array),this.itemSize=t.itemSize,this.count=t.count,this.normalized=t.normalized,this.usage=t.usage,this.gpuType=t.gpuType,this}copyAt(t,n,r){t*=this.itemSize,r*=n.itemSize;for(let o=0,c=this.itemSize;o<c;o++)this.array[t+o]=n.array[r+o];return this}copyArray(t){return this.array.set(t),this}applyMatrix3(t){if(this.itemSize===2)for(let n=0,r=this.count;n<r;n++)ep.fromBufferAttribute(this,n),ep.applyMatrix3(t),this.setXY(n,ep.x,ep.y);else if(this.itemSize===3)for(let n=0,r=this.count;n<r;n++)qi.fromBufferAttribute(this,n),qi.applyMatrix3(t),this.setXYZ(n,qi.x,qi.y,qi.z);return this}applyMatrix4(t){for(let n=0,r=this.count;n<r;n++)qi.fromBufferAttribute(this,n),qi.applyMatrix4(t),this.setXYZ(n,qi.x,qi.y,qi.z);return this}applyNormalMatrix(t){for(let n=0,r=this.count;n<r;n++)qi.fromBufferAttribute(this,n),qi.applyNormalMatrix(t),this.setXYZ(n,qi.x,qi.y,qi.z);return this}transformDirection(t){for(let n=0,r=this.count;n<r;n++)qi.fromBufferAttribute(this,n),qi.transformDirection(t),this.setXYZ(n,qi.x,qi.y,qi.z);return this}set(t,n=0){return this.array.set(t,n),this}getComponent(t,n){let r=this.array[t*this.itemSize+n];return this.normalized&&(r=aa(r,this.array)),r}setComponent(t,n,r){return this.normalized&&(r=mi(r,this.array)),this.array[t*this.itemSize+n]=r,this}getX(t){let n=this.array[t*this.itemSize];return this.normalized&&(n=aa(n,this.array)),n}setX(t,n){return this.normalized&&(n=mi(n,this.array)),this.array[t*this.itemSize]=n,this}getY(t){let n=this.array[t*this.itemSize+1];return this.normalized&&(n=aa(n,this.array)),n}setY(t,n){return this.normalized&&(n=mi(n,this.array)),this.array[t*this.itemSize+1]=n,this}getZ(t){let n=this.array[t*this.itemSize+2];return this.normalized&&(n=aa(n,this.array)),n}setZ(t,n){return this.normalized&&(n=mi(n,this.array)),this.array[t*this.itemSize+2]=n,this}getW(t){let n=this.array[t*this.itemSize+3];return this.normalized&&(n=aa(n,this.array)),n}setW(t,n){return this.normalized&&(n=mi(n,this.array)),this.array[t*this.itemSize+3]=n,this}setXY(t,n,r){return t*=this.itemSize,this.normalized&&(n=mi(n,this.array),r=mi(r,this.array)),this.array[t+0]=n,this.array[t+1]=r,this}setXYZ(t,n,r,o){return t*=this.itemSize,this.normalized&&(n=mi(n,this.array),r=mi(r,this.array),o=mi(o,this.array)),this.array[t+0]=n,this.array[t+1]=r,this.array[t+2]=o,this}setXYZW(t,n,r,o,c){return t*=this.itemSize,this.normalized&&(n=mi(n,this.array),r=mi(r,this.array),o=mi(o,this.array),c=mi(c,this.array)),this.array[t+0]=n,this.array[t+1]=r,this.array[t+2]=o,this.array[t+3]=c,this}onUpload(t){return this.onUploadCallback=t,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const t={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};return this.name!==""&&(t.name=this.name),this.usage!==kp&&(t.usage=this.usage),t}}class CE extends ds{constructor(t,n,r){super(new Uint16Array(t),n,r)}}class PE extends ds{constructor(t,n,r){super(new Uint32Array(t),n,r)}}class Ps extends ds{constructor(t,n,r){super(new Float32Array(t),n,r)}}let dL=0;const Ss=new Ti,lg=new Ar,Hc=new ue,os=new Ah,Su=new Ah,sr=new ue;class Er extends Xl{constructor(){super(),this.isBufferGeometry=!0,Object.defineProperty(this,"id",{value:dL++}),this.uuid=To(),this.name="",this.type="BufferGeometry",this.index=null,this.indirect=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(t){return Array.isArray(t)?this.index=new(wE(t)?PE:CE)(t,1):this.index=t,this}setIndirect(t){return this.indirect=t,this}getIndirect(){return this.indirect}getAttribute(t){return this.attributes[t]}setAttribute(t,n){return this.attributes[t]=n,this}deleteAttribute(t){return delete this.attributes[t],this}hasAttribute(t){return this.attributes[t]!==void 0}addGroup(t,n,r=0){this.groups.push({start:t,count:n,materialIndex:r})}clearGroups(){this.groups=[]}setDrawRange(t,n){this.drawRange.start=t,this.drawRange.count=n}applyMatrix4(t){const n=this.attributes.position;n!==void 0&&(n.applyMatrix4(t),n.needsUpdate=!0);const r=this.attributes.normal;if(r!==void 0){const c=new nn().getNormalMatrix(t);r.applyNormalMatrix(c),r.needsUpdate=!0}const o=this.attributes.tangent;return o!==void 0&&(o.transformDirection(t),o.needsUpdate=!0),this.boundingBox!==null&&this.computeBoundingBox(),this.boundingSphere!==null&&this.computeBoundingSphere(),this}applyQuaternion(t){return Ss.makeRotationFromQuaternion(t),this.applyMatrix4(Ss),this}rotateX(t){return Ss.makeRotationX(t),this.applyMatrix4(Ss),this}rotateY(t){return Ss.makeRotationY(t),this.applyMatrix4(Ss),this}rotateZ(t){return Ss.makeRotationZ(t),this.applyMatrix4(Ss),this}translate(t,n,r){return Ss.makeTranslation(t,n,r),this.applyMatrix4(Ss),this}scale(t,n,r){return Ss.makeScale(t,n,r),this.applyMatrix4(Ss),this}lookAt(t){return lg.lookAt(t),lg.updateMatrix(),this.applyMatrix4(lg.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(Hc).negate(),this.translate(Hc.x,Hc.y,Hc.z),this}setFromPoints(t){const n=this.getAttribute("position");if(n===void 0){const r=[];for(let o=0,c=t.length;o<c;o++){const d=t[o];r.push(d.x,d.y,d.z||0)}this.setAttribute("position",new Ps(r,3))}else{const r=Math.min(t.length,n.count);for(let o=0;o<r;o++){const c=t[o];n.setXYZ(o,c.x,c.y,c.z||0)}t.length>n.count&&console.warn("THREE.BufferGeometry: Buffer size too small for points data. Use .dispose() and create a new geometry."),n.needsUpdate=!0}return this}computeBoundingBox(){this.boundingBox===null&&(this.boundingBox=new Ah);const t=this.attributes.position,n=this.morphAttributes.position;if(t&&t.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.",this),this.boundingBox.set(new ue(-1/0,-1/0,-1/0),new ue(1/0,1/0,1/0));return}if(t!==void 0){if(this.boundingBox.setFromBufferAttribute(t),n)for(let r=0,o=n.length;r<o;r++){const c=n[r];os.setFromBufferAttribute(c),this.morphTargetsRelative?(sr.addVectors(this.boundingBox.min,os.min),this.boundingBox.expandByPoint(sr),sr.addVectors(this.boundingBox.max,os.max),this.boundingBox.expandByPoint(sr)):(this.boundingBox.expandByPoint(os.min),this.boundingBox.expandByPoint(os.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){this.boundingSphere===null&&(this.boundingSphere=new lf);const t=this.attributes.position,n=this.morphAttributes.position;if(t&&t.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.",this),this.boundingSphere.set(new ue,1/0);return}if(t){const r=this.boundingSphere.center;if(os.setFromBufferAttribute(t),n)for(let c=0,d=n.length;c<d;c++){const p=n[c];Su.setFromBufferAttribute(p),this.morphTargetsRelative?(sr.addVectors(os.min,Su.min),os.expandByPoint(sr),sr.addVectors(os.max,Su.max),os.expandByPoint(sr)):(os.expandByPoint(Su.min),os.expandByPoint(Su.max))}os.getCenter(r);let o=0;for(let c=0,d=t.count;c<d;c++)sr.fromBufferAttribute(t,c),o=Math.max(o,r.distanceToSquared(sr));if(n)for(let c=0,d=n.length;c<d;c++){const p=n[c],v=this.morphTargetsRelative;for(let _=0,x=p.count;_<x;_++)sr.fromBufferAttribute(p,_),v&&(Hc.fromBufferAttribute(t,_),sr.add(Hc)),o=Math.max(o,r.distanceToSquared(sr))}this.boundingSphere.radius=Math.sqrt(o),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const t=this.index,n=this.attributes;if(t===null||n.position===void 0||n.normal===void 0||n.uv===void 0){console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");return}const r=n.position,o=n.normal,c=n.uv;this.hasAttribute("tangent")===!1&&this.setAttribute("tangent",new ds(new Float32Array(4*r.count),4));const d=this.getAttribute("tangent"),p=[],v=[];for(let te=0;te<r.count;te++)p[te]=new ue,v[te]=new ue;const _=new ue,x=new ue,M=new ue,b=new ln,E=new ln,U=new ln,L=new ue,P=new ue;function A(te,N,B){_.fromBufferAttribute(r,te),x.fromBufferAttribute(r,N),M.fromBufferAttribute(r,B),b.fromBufferAttribute(c,te),E.fromBufferAttribute(c,N),U.fromBufferAttribute(c,B),x.sub(_),M.sub(_),E.sub(b),U.sub(b);const ee=1/(E.x*U.y-U.x*E.y);isFinite(ee)&&(L.copy(x).multiplyScalar(U.y).addScaledVector(M,-E.y).multiplyScalar(ee),P.copy(M).multiplyScalar(E.x).addScaledVector(x,-U.x).multiplyScalar(ee),p[te].add(L),p[N].add(L),p[B].add(L),v[te].add(P),v[N].add(P),v[B].add(P))}let X=this.groups;X.length===0&&(X=[{start:0,count:t.count}]);for(let te=0,N=X.length;te<N;++te){const B=X[te],ee=B.start,Ee=B.count;for(let de=ee,be=ee+Ee;de<be;de+=3)A(t.getX(de+0),t.getX(de+1),t.getX(de+2))}const k=new ue,O=new ue,z=new ue,Y=new ue;function W(te){z.fromBufferAttribute(o,te),Y.copy(z);const N=p[te];k.copy(N),k.sub(z.multiplyScalar(z.dot(N))).normalize(),O.crossVectors(Y,N);const ee=O.dot(v[te])<0?-1:1;d.setXYZW(te,k.x,k.y,k.z,ee)}for(let te=0,N=X.length;te<N;++te){const B=X[te],ee=B.start,Ee=B.count;for(let de=ee,be=ee+Ee;de<be;de+=3)W(t.getX(de+0)),W(t.getX(de+1)),W(t.getX(de+2))}}computeVertexNormals(){const t=this.index,n=this.getAttribute("position");if(n!==void 0){let r=this.getAttribute("normal");if(r===void 0)r=new ds(new Float32Array(n.count*3),3),this.setAttribute("normal",r);else for(let b=0,E=r.count;b<E;b++)r.setXYZ(b,0,0,0);const o=new ue,c=new ue,d=new ue,p=new ue,v=new ue,_=new ue,x=new ue,M=new ue;if(t)for(let b=0,E=t.count;b<E;b+=3){const U=t.getX(b+0),L=t.getX(b+1),P=t.getX(b+2);o.fromBufferAttribute(n,U),c.fromBufferAttribute(n,L),d.fromBufferAttribute(n,P),x.subVectors(d,c),M.subVectors(o,c),x.cross(M),p.fromBufferAttribute(r,U),v.fromBufferAttribute(r,L),_.fromBufferAttribute(r,P),p.add(x),v.add(x),_.add(x),r.setXYZ(U,p.x,p.y,p.z),r.setXYZ(L,v.x,v.y,v.z),r.setXYZ(P,_.x,_.y,_.z)}else for(let b=0,E=n.count;b<E;b+=3)o.fromBufferAttribute(n,b+0),c.fromBufferAttribute(n,b+1),d.fromBufferAttribute(n,b+2),x.subVectors(d,c),M.subVectors(o,c),x.cross(M),r.setXYZ(b+0,x.x,x.y,x.z),r.setXYZ(b+1,x.x,x.y,x.z),r.setXYZ(b+2,x.x,x.y,x.z);this.normalizeNormals(),r.needsUpdate=!0}}normalizeNormals(){const t=this.attributes.normal;for(let n=0,r=t.count;n<r;n++)sr.fromBufferAttribute(t,n),sr.normalize(),t.setXYZ(n,sr.x,sr.y,sr.z)}toNonIndexed(){function t(p,v){const _=p.array,x=p.itemSize,M=p.normalized,b=new _.constructor(v.length*x);let E=0,U=0;for(let L=0,P=v.length;L<P;L++){p.isInterleavedBufferAttribute?E=v[L]*p.data.stride+p.offset:E=v[L]*x;for(let A=0;A<x;A++)b[U++]=_[E++]}return new ds(b,x,M)}if(this.index===null)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const n=new Er,r=this.index.array,o=this.attributes;for(const p in o){const v=o[p],_=t(v,r);n.setAttribute(p,_)}const c=this.morphAttributes;for(const p in c){const v=[],_=c[p];for(let x=0,M=_.length;x<M;x++){const b=_[x],E=t(b,r);v.push(E)}n.morphAttributes[p]=v}n.morphTargetsRelative=this.morphTargetsRelative;const d=this.groups;for(let p=0,v=d.length;p<v;p++){const _=d[p];n.addGroup(_.start,_.count,_.materialIndex)}return n}toJSON(){const t={metadata:{version:4.6,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(t.uuid=this.uuid,t.type=this.type,this.name!==""&&(t.name=this.name),Object.keys(this.userData).length>0&&(t.userData=this.userData),this.parameters!==void 0){const v=this.parameters;for(const _ in v)v[_]!==void 0&&(t[_]=v[_]);return t}t.data={attributes:{}};const n=this.index;n!==null&&(t.data.index={type:n.array.constructor.name,array:Array.prototype.slice.call(n.array)});const r=this.attributes;for(const v in r){const _=r[v];t.data.attributes[v]=_.toJSON(t.data)}const o={};let c=!1;for(const v in this.morphAttributes){const _=this.morphAttributes[v],x=[];for(let M=0,b=_.length;M<b;M++){const E=_[M];x.push(E.toJSON(t.data))}x.length>0&&(o[v]=x,c=!0)}c&&(t.data.morphAttributes=o,t.data.morphTargetsRelative=this.morphTargetsRelative);const d=this.groups;d.length>0&&(t.data.groups=JSON.parse(JSON.stringify(d)));const p=this.boundingSphere;return p!==null&&(t.data.boundingSphere={center:p.center.toArray(),radius:p.radius}),t}clone(){return new this.constructor().copy(this)}copy(t){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const n={};this.name=t.name;const r=t.index;r!==null&&this.setIndex(r.clone(n));const o=t.attributes;for(const _ in o){const x=o[_];this.setAttribute(_,x.clone(n))}const c=t.morphAttributes;for(const _ in c){const x=[],M=c[_];for(let b=0,E=M.length;b<E;b++)x.push(M[b].clone(n));this.morphAttributes[_]=x}this.morphTargetsRelative=t.morphTargetsRelative;const d=t.groups;for(let _=0,x=d.length;_<x;_++){const M=d[_];this.addGroup(M.start,M.count,M.materialIndex)}const p=t.boundingBox;p!==null&&(this.boundingBox=p.clone());const v=t.boundingSphere;return v!==null&&(this.boundingSphere=v.clone()),this.drawRange.start=t.drawRange.start,this.drawRange.count=t.drawRange.count,this.userData=t.userData,this}dispose(){this.dispatchEvent({type:"dispose"})}}const dS=new Ti,xl=new cf,tp=new lf,pS=new ue,np=new ue,ip=new ue,rp=new ue,cg=new ue,sp=new ue,mS=new ue,ap=new ue;class As extends Ar{constructor(t=new Er,n=new Hp){super(),this.isMesh=!0,this.type="Mesh",this.geometry=t,this.material=n,this.updateMorphTargets()}copy(t,n){return super.copy(t,n),t.morphTargetInfluences!==void 0&&(this.morphTargetInfluences=t.morphTargetInfluences.slice()),t.morphTargetDictionary!==void 0&&(this.morphTargetDictionary=Object.assign({},t.morphTargetDictionary)),this.material=Array.isArray(t.material)?t.material.slice():t.material,this.geometry=t.geometry,this}updateMorphTargets(){const n=this.geometry.morphAttributes,r=Object.keys(n);if(r.length>0){const o=n[r[0]];if(o!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let c=0,d=o.length;c<d;c++){const p=o[c].name||String(c);this.morphTargetInfluences.push(0),this.morphTargetDictionary[p]=c}}}}getVertexPosition(t,n){const r=this.geometry,o=r.attributes.position,c=r.morphAttributes.position,d=r.morphTargetsRelative;n.fromBufferAttribute(o,t);const p=this.morphTargetInfluences;if(c&&p){sp.set(0,0,0);for(let v=0,_=c.length;v<_;v++){const x=p[v],M=c[v];x!==0&&(cg.fromBufferAttribute(M,t),d?sp.addScaledVector(cg,x):sp.addScaledVector(cg.sub(n),x))}n.add(sp)}return n}raycast(t,n){const r=this.geometry,o=this.material,c=this.matrixWorld;o!==void 0&&(r.boundingSphere===null&&r.computeBoundingSphere(),tp.copy(r.boundingSphere),tp.applyMatrix4(c),xl.copy(t.ray).recast(t.near),!(tp.containsPoint(xl.origin)===!1&&(xl.intersectSphere(tp,pS)===null||xl.origin.distanceToSquared(pS)>(t.far-t.near)**2))&&(dS.copy(c).invert(),xl.copy(t.ray).applyMatrix4(dS),!(r.boundingBox!==null&&xl.intersectsBox(r.boundingBox)===!1)&&this._computeIntersections(t,n,xl)))}_computeIntersections(t,n,r){let o;const c=this.geometry,d=this.material,p=c.index,v=c.attributes.position,_=c.attributes.uv,x=c.attributes.uv1,M=c.attributes.normal,b=c.groups,E=c.drawRange;if(p!==null)if(Array.isArray(d))for(let U=0,L=b.length;U<L;U++){const P=b[U],A=d[P.materialIndex],X=Math.max(P.start,E.start),k=Math.min(p.count,Math.min(P.start+P.count,E.start+E.count));for(let O=X,z=k;O<z;O+=3){const Y=p.getX(O),W=p.getX(O+1),te=p.getX(O+2);o=op(this,A,t,r,_,x,M,Y,W,te),o&&(o.faceIndex=Math.floor(O/3),o.face.materialIndex=P.materialIndex,n.push(o))}}else{const U=Math.max(0,E.start),L=Math.min(p.count,E.start+E.count);for(let P=U,A=L;P<A;P+=3){const X=p.getX(P),k=p.getX(P+1),O=p.getX(P+2);o=op(this,d,t,r,_,x,M,X,k,O),o&&(o.faceIndex=Math.floor(P/3),n.push(o))}}else if(v!==void 0)if(Array.isArray(d))for(let U=0,L=b.length;U<L;U++){const P=b[U],A=d[P.materialIndex],X=Math.max(P.start,E.start),k=Math.min(v.count,Math.min(P.start+P.count,E.start+E.count));for(let O=X,z=k;O<z;O+=3){const Y=O,W=O+1,te=O+2;o=op(this,A,t,r,_,x,M,Y,W,te),o&&(o.faceIndex=Math.floor(O/3),o.face.materialIndex=P.materialIndex,n.push(o))}}else{const U=Math.max(0,E.start),L=Math.min(v.count,E.start+E.count);for(let P=U,A=L;P<A;P+=3){const X=P,k=P+1,O=P+2;o=op(this,d,t,r,_,x,M,X,k,O),o&&(o.faceIndex=Math.floor(P/3),n.push(o))}}}}function pL(a,t,n,r,o,c,d,p){let v;if(t.side===$r?v=r.intersectTriangle(d,c,o,!0,p):v=r.intersectTriangle(o,c,d,t.side===Do,p),v===null)return null;ap.copy(p),ap.applyMatrix4(a.matrixWorld);const _=n.ray.origin.distanceTo(ap);return _<n.near||_>n.far?null:{distance:_,point:ap.clone(),object:a}}function op(a,t,n,r,o,c,d,p,v,_){a.getVertexPosition(p,np),a.getVertexPosition(v,ip),a.getVertexPosition(_,rp);const x=pL(a,t,n,r,np,ip,rp,mS);if(x){const M=new ue;ws.getBarycoord(mS,np,ip,rp,M),o&&(x.uv=ws.getInterpolatedAttribute(o,p,v,_,M,new ln)),c&&(x.uv1=ws.getInterpolatedAttribute(c,p,v,_,M,new ln)),d&&(x.normal=ws.getInterpolatedAttribute(d,p,v,_,M,new ue),x.normal.dot(r.direction)>0&&x.normal.multiplyScalar(-1));const b={a:p,b:v,c:_,normal:new ue,materialIndex:0};ws.getNormal(np,ip,rp,b.normal),x.face=b,x.barycoord=M}return x}class hf extends Er{constructor(t=1,n=1,r=1,o=1,c=1,d=1){super(),this.type="BoxGeometry",this.parameters={width:t,height:n,depth:r,widthSegments:o,heightSegments:c,depthSegments:d};const p=this;o=Math.floor(o),c=Math.floor(c),d=Math.floor(d);const v=[],_=[],x=[],M=[];let b=0,E=0;U("z","y","x",-1,-1,r,n,t,d,c,0),U("z","y","x",1,-1,r,n,-t,d,c,1),U("x","z","y",1,1,t,r,n,o,d,2),U("x","z","y",1,-1,t,r,-n,o,d,3),U("x","y","z",1,-1,t,n,r,o,c,4),U("x","y","z",-1,-1,t,n,-r,o,c,5),this.setIndex(v),this.setAttribute("position",new Ps(_,3)),this.setAttribute("normal",new Ps(x,3)),this.setAttribute("uv",new Ps(M,2));function U(L,P,A,X,k,O,z,Y,W,te,N){const B=O/W,ee=z/te,Ee=O/2,de=z/2,be=Y/2,Ae=W+1,Me=te+1;let me=0,_e=0;const Fe=new ue;for(let He=0;He<Me;He++){const nt=He*ee-de;for(let ut=0;ut<Ae;ut++){const Yt=ut*B-Ee;Fe[L]=Yt*X,Fe[P]=nt*k,Fe[A]=be,_.push(Fe.x,Fe.y,Fe.z),Fe[L]=0,Fe[P]=0,Fe[A]=Y>0?1:-1,x.push(Fe.x,Fe.y,Fe.z),M.push(ut/W),M.push(1-He/te),me+=1}}for(let He=0;He<te;He++)for(let nt=0;nt<W;nt++){const ut=b+nt+Ae*He,Yt=b+nt+Ae*(He+1),Le=b+(nt+1)+Ae*(He+1),et=b+(nt+1)+Ae*He;v.push(ut,Yt,et),v.push(Yt,Le,et),_e+=6}p.addGroup(E,_e,N),E+=_e,b+=me}}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new hf(t.width,t.height,t.depth,t.widthSegments,t.heightSegments,t.depthSegments)}}function xh(a){const t={};for(const n in a){t[n]={};for(const r in a[n]){const o=a[n][r];o&&(o.isColor||o.isMatrix3||o.isMatrix4||o.isVector2||o.isVector3||o.isVector4||o.isTexture||o.isQuaternion)?o.isRenderTargetTexture?(console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."),t[n][r]=null):t[n][r]=o.clone():Array.isArray(o)?t[n][r]=o.slice():t[n][r]=o}}return t}function Fr(a){const t={};for(let n=0;n<a.length;n++){const r=xh(a[n]);for(const o in r)t[o]=r[o]}return t}function mL(a){const t=[];for(let n=0;n<a.length;n++)t.push(a[n].clone());return t}function IE(a){const t=a.getRenderTarget();return t===null?a.outputColorSpace:t.isXRRenderTarget===!0?t.texture.colorSpace:ni.workingColorSpace}const _L={clone:xh,merge:Fr};var gL=`void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`,xL=`void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}`;class Lo extends ql{constructor(t){super(),this.isShaderMaterial=!0,this.type="ShaderMaterial",this.defines={},this.uniforms={},this.uniformsGroups=[],this.vertexShader=gL,this.fragmentShader=xL,this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.forceSinglePass=!0,this.extensions={clipCullDistance:!1,multiDraw:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv1:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,t!==void 0&&this.setValues(t)}copy(t){return super.copy(t),this.fragmentShader=t.fragmentShader,this.vertexShader=t.vertexShader,this.uniforms=xh(t.uniforms),this.uniformsGroups=mL(t.uniformsGroups),this.defines=Object.assign({},t.defines),this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.fog=t.fog,this.lights=t.lights,this.clipping=t.clipping,this.extensions=Object.assign({},t.extensions),this.glslVersion=t.glslVersion,this}toJSON(t){const n=super.toJSON(t);n.glslVersion=this.glslVersion,n.uniforms={};for(const o in this.uniforms){const d=this.uniforms[o].value;d&&d.isTexture?n.uniforms[o]={type:"t",value:d.toJSON(t).uuid}:d&&d.isColor?n.uniforms[o]={type:"c",value:d.getHex()}:d&&d.isVector2?n.uniforms[o]={type:"v2",value:d.toArray()}:d&&d.isVector3?n.uniforms[o]={type:"v3",value:d.toArray()}:d&&d.isVector4?n.uniforms[o]={type:"v4",value:d.toArray()}:d&&d.isMatrix3?n.uniforms[o]={type:"m3",value:d.toArray()}:d&&d.isMatrix4?n.uniforms[o]={type:"m4",value:d.toArray()}:n.uniforms[o]={value:d}}Object.keys(this.defines).length>0&&(n.defines=this.defines),n.vertexShader=this.vertexShader,n.fragmentShader=this.fragmentShader,n.lights=this.lights,n.clipping=this.clipping;const r={};for(const o in this.extensions)this.extensions[o]===!0&&(r[o]=!0);return Object.keys(r).length>0&&(n.extensions=r),n}}class DE extends Ar{constructor(){super(),this.isCamera=!0,this.type="Camera",this.matrixWorldInverse=new Ti,this.projectionMatrix=new Ti,this.projectionMatrixInverse=new Ti,this.coordinateSystem=Ha}copy(t,n){return super.copy(t,n),this.matrixWorldInverse.copy(t.matrixWorldInverse),this.projectionMatrix.copy(t.projectionMatrix),this.projectionMatrixInverse.copy(t.projectionMatrixInverse),this.coordinateSystem=t.coordinateSystem,this}getWorldDirection(t){return super.getWorldDirection(t).negate()}updateMatrixWorld(t){super.updateMatrixWorld(t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(t,n){super.updateWorldMatrix(t,n),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return new this.constructor().copy(this)}}const _o=new ue,_S=new ln,gS=new ln;class Ys extends DE{constructor(t=50,n=1,r=.1,o=2e3){super(),this.isPerspectiveCamera=!0,this.type="PerspectiveCamera",this.fov=t,this.zoom=1,this.near=r,this.far=o,this.focus=10,this.aspect=n,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(t,n){return super.copy(t,n),this.fov=t.fov,this.zoom=t.zoom,this.near=t.near,this.far=t.far,this.focus=t.focus,this.aspect=t.aspect,this.view=t.view===null?null:Object.assign({},t.view),this.filmGauge=t.filmGauge,this.filmOffset=t.filmOffset,this}setFocalLength(t){const n=.5*this.getFilmHeight()/t;this.fov=P0*2*Math.atan(n),this.updateProjectionMatrix()}getFocalLength(){const t=Math.tan(Dp*.5*this.fov);return .5*this.getFilmHeight()/t}getEffectiveFOV(){return P0*2*Math.atan(Math.tan(Dp*.5*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}getViewBounds(t,n,r){_o.set(-1,-1,.5).applyMatrix4(this.projectionMatrixInverse),n.set(_o.x,_o.y).multiplyScalar(-t/_o.z),_o.set(1,1,.5).applyMatrix4(this.projectionMatrixInverse),r.set(_o.x,_o.y).multiplyScalar(-t/_o.z)}getViewSize(t,n){return this.getViewBounds(t,_S,gS),n.subVectors(gS,_S)}setViewOffset(t,n,r,o,c,d){this.aspect=t/n,this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=n,this.view.offsetX=r,this.view.offsetY=o,this.view.width=c,this.view.height=d,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=this.near;let n=t*Math.tan(Dp*.5*this.fov)/this.zoom,r=2*n,o=this.aspect*r,c=-.5*o;const d=this.view;if(this.view!==null&&this.view.enabled){const v=d.fullWidth,_=d.fullHeight;c+=d.offsetX*o/v,n-=d.offsetY*r/_,o*=d.width/v,r*=d.height/_}const p=this.filmOffset;p!==0&&(c+=t*p/this.getFilmWidth()),this.projectionMatrix.makePerspective(c,c+o,n,n-r,t,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const n=super.toJSON(t);return n.object.fov=this.fov,n.object.zoom=this.zoom,n.object.near=this.near,n.object.far=this.far,n.object.focus=this.focus,n.object.aspect=this.aspect,this.view!==null&&(n.object.view=Object.assign({},this.view)),n.object.filmGauge=this.filmGauge,n.object.filmOffset=this.filmOffset,n}}const Gc=-90,Wc=1;class vL extends Ar{constructor(t,n,r){super(),this.type="CubeCamera",this.renderTarget=r,this.coordinateSystem=null,this.activeMipmapLevel=0;const o=new Ys(Gc,Wc,t,n);o.layers=this.layers,this.add(o);const c=new Ys(Gc,Wc,t,n);c.layers=this.layers,this.add(c);const d=new Ys(Gc,Wc,t,n);d.layers=this.layers,this.add(d);const p=new Ys(Gc,Wc,t,n);p.layers=this.layers,this.add(p);const v=new Ys(Gc,Wc,t,n);v.layers=this.layers,this.add(v);const _=new Ys(Gc,Wc,t,n);_.layers=this.layers,this.add(_)}updateCoordinateSystem(){const t=this.coordinateSystem,n=this.children.concat(),[r,o,c,d,p,v]=n;for(const _ of n)this.remove(_);if(t===Ha)r.up.set(0,1,0),r.lookAt(1,0,0),o.up.set(0,1,0),o.lookAt(-1,0,0),c.up.set(0,0,-1),c.lookAt(0,1,0),d.up.set(0,0,1),d.lookAt(0,-1,0),p.up.set(0,1,0),p.lookAt(0,0,1),v.up.set(0,1,0),v.lookAt(0,0,-1);else if(t===Vp)r.up.set(0,-1,0),r.lookAt(-1,0,0),o.up.set(0,-1,0),o.lookAt(1,0,0),c.up.set(0,0,1),c.lookAt(0,1,0),d.up.set(0,0,-1),d.lookAt(0,-1,0),p.up.set(0,-1,0),p.lookAt(0,0,1),v.up.set(0,-1,0),v.lookAt(0,0,-1);else throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: "+t);for(const _ of n)this.add(_),_.updateMatrixWorld()}update(t,n){this.parent===null&&this.updateMatrixWorld();const{renderTarget:r,activeMipmapLevel:o}=this;this.coordinateSystem!==t.coordinateSystem&&(this.coordinateSystem=t.coordinateSystem,this.updateCoordinateSystem());const[c,d,p,v,_,x]=this.children,M=t.getRenderTarget(),b=t.getActiveCubeFace(),E=t.getActiveMipmapLevel(),U=t.xr.enabled;t.xr.enabled=!1;const L=r.texture.generateMipmaps;r.texture.generateMipmaps=!1,t.setRenderTarget(r,0,o),t.render(n,c),t.setRenderTarget(r,1,o),t.render(n,d),t.setRenderTarget(r,2,o),t.render(n,p),t.setRenderTarget(r,3,o),t.render(n,v),t.setRenderTarget(r,4,o),t.render(n,_),r.texture.generateMipmaps=L,t.setRenderTarget(r,5,o),t.render(n,x),t.setRenderTarget(M,b,E),t.xr.enabled=U,r.texture.needsPMREMUpdate=!0}}class LE extends Tr{constructor(t,n,r,o,c,d,p,v,_,x){t=t!==void 0?t:[],n=n!==void 0?n:dh,super(t,n,r,o,c,d,p,v,_,x),this.isCubeTexture=!0,this.flipY=!1}get images(){return this.image}set images(t){this.image=t}}class yL extends zl{constructor(t=1,n={}){super(t,t,n),this.isWebGLCubeRenderTarget=!0;const r={width:t,height:t,depth:1},o=[r,r,r,r,r,r];this.texture=new LE(o,n.mapping,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.colorSpace),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=n.generateMipmaps!==void 0?n.generateMipmaps:!1,this.texture.minFilter=n.minFilter!==void 0?n.minFilter:ca}fromEquirectangularTexture(t,n){this.texture.type=n.type,this.texture.colorSpace=n.colorSpace,this.texture.generateMipmaps=n.generateMipmaps,this.texture.minFilter=n.minFilter,this.texture.magFilter=n.magFilter;const r={uniforms:{tEquirect:{value:null}},vertexShader:`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,fragmentShader:`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`},o=new hf(5,5,5),c=new Lo({name:"CubemapFromEquirect",uniforms:xh(r.uniforms),vertexShader:r.vertexShader,fragmentShader:r.fragmentShader,side:$r,blending:Eo});c.uniforms.tEquirect.value=n;const d=new As(o,c),p=n.minFilter;return n.minFilter===Cl&&(n.minFilter=ca),new vL(1,10,this).update(t,d),n.minFilter=p,d.geometry.dispose(),d.material.dispose(),this}clear(t,n,r,o){const c=t.getRenderTarget();for(let d=0;d<6;d++)t.setRenderTarget(this,d),t.clear(n,r,o);t.setRenderTarget(c)}}class fx{constructor(t,n=1,r=1e3){this.isFog=!0,this.name="",this.color=new Qn(t),this.near=n,this.far=r}clone(){return new fx(this.color,this.near,this.far)}toJSON(){return{type:"Fog",name:this.name,color:this.color.getHex(),near:this.near,far:this.far}}}class ML extends Ar{constructor(){super(),this.isScene=!0,this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.backgroundBlurriness=0,this.backgroundIntensity=1,this.backgroundRotation=new Xa,this.environmentIntensity=1,this.environmentRotation=new Xa,this.overrideMaterial=null,typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(t,n){return super.copy(t,n),t.background!==null&&(this.background=t.background.clone()),t.environment!==null&&(this.environment=t.environment.clone()),t.fog!==null&&(this.fog=t.fog.clone()),this.backgroundBlurriness=t.backgroundBlurriness,this.backgroundIntensity=t.backgroundIntensity,this.backgroundRotation.copy(t.backgroundRotation),this.environmentIntensity=t.environmentIntensity,this.environmentRotation.copy(t.environmentRotation),t.overrideMaterial!==null&&(this.overrideMaterial=t.overrideMaterial.clone()),this.matrixAutoUpdate=t.matrixAutoUpdate,this}toJSON(t){const n=super.toJSON(t);return this.fog!==null&&(n.object.fog=this.fog.toJSON()),this.backgroundBlurriness>0&&(n.object.backgroundBlurriness=this.backgroundBlurriness),this.backgroundIntensity!==1&&(n.object.backgroundIntensity=this.backgroundIntensity),n.object.backgroundRotation=this.backgroundRotation.toArray(),this.environmentIntensity!==1&&(n.object.environmentIntensity=this.environmentIntensity),n.object.environmentRotation=this.environmentRotation.toArray(),n}}class SL{constructor(t,n){this.isInterleavedBuffer=!0,this.array=t,this.stride=n,this.count=t!==void 0?t.length/n:0,this.usage=kp,this.updateRanges=[],this.version=0,this.uuid=To()}onUploadCallback(){}set needsUpdate(t){t===!0&&this.version++}setUsage(t){return this.usage=t,this}addUpdateRange(t,n){this.updateRanges.push({start:t,count:n})}clearUpdateRanges(){this.updateRanges.length=0}copy(t){return this.array=new t.array.constructor(t.array),this.count=t.count,this.stride=t.stride,this.usage=t.usage,this}copyAt(t,n,r){t*=this.stride,r*=n.stride;for(let o=0,c=this.stride;o<c;o++)this.array[t+o]=n.array[r+o];return this}set(t,n=0){return this.array.set(t,n),this}clone(t){t.arrayBuffers===void 0&&(t.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=To()),t.arrayBuffers[this.array.buffer._uuid]===void 0&&(t.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer);const n=new this.array.constructor(t.arrayBuffers[this.array.buffer._uuid]),r=new this.constructor(n,this.stride);return r.setUsage(this.usage),r}onUpload(t){return this.onUploadCallback=t,this}toJSON(t){return t.arrayBuffers===void 0&&(t.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=To()),t.arrayBuffers[this.array.buffer._uuid]===void 0&&(t.arrayBuffers[this.array.buffer._uuid]=Array.from(new Uint32Array(this.array.buffer))),{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride}}}const Nr=new ue;class Gp{constructor(t,n,r,o=!1){this.isInterleavedBufferAttribute=!0,this.name="",this.data=t,this.itemSize=n,this.offset=r,this.normalized=o}get count(){return this.data.count}get array(){return this.data.array}set needsUpdate(t){this.data.needsUpdate=t}applyMatrix4(t){for(let n=0,r=this.data.count;n<r;n++)Nr.fromBufferAttribute(this,n),Nr.applyMatrix4(t),this.setXYZ(n,Nr.x,Nr.y,Nr.z);return this}applyNormalMatrix(t){for(let n=0,r=this.count;n<r;n++)Nr.fromBufferAttribute(this,n),Nr.applyNormalMatrix(t),this.setXYZ(n,Nr.x,Nr.y,Nr.z);return this}transformDirection(t){for(let n=0,r=this.count;n<r;n++)Nr.fromBufferAttribute(this,n),Nr.transformDirection(t),this.setXYZ(n,Nr.x,Nr.y,Nr.z);return this}getComponent(t,n){let r=this.array[t*this.data.stride+this.offset+n];return this.normalized&&(r=aa(r,this.array)),r}setComponent(t,n,r){return this.normalized&&(r=mi(r,this.array)),this.data.array[t*this.data.stride+this.offset+n]=r,this}setX(t,n){return this.normalized&&(n=mi(n,this.array)),this.data.array[t*this.data.stride+this.offset]=n,this}setY(t,n){return this.normalized&&(n=mi(n,this.array)),this.data.array[t*this.data.stride+this.offset+1]=n,this}setZ(t,n){return this.normalized&&(n=mi(n,this.array)),this.data.array[t*this.data.stride+this.offset+2]=n,this}setW(t,n){return this.normalized&&(n=mi(n,this.array)),this.data.array[t*this.data.stride+this.offset+3]=n,this}getX(t){let n=this.data.array[t*this.data.stride+this.offset];return this.normalized&&(n=aa(n,this.array)),n}getY(t){let n=this.data.array[t*this.data.stride+this.offset+1];return this.normalized&&(n=aa(n,this.array)),n}getZ(t){let n=this.data.array[t*this.data.stride+this.offset+2];return this.normalized&&(n=aa(n,this.array)),n}getW(t){let n=this.data.array[t*this.data.stride+this.offset+3];return this.normalized&&(n=aa(n,this.array)),n}setXY(t,n,r){return t=t*this.data.stride+this.offset,this.normalized&&(n=mi(n,this.array),r=mi(r,this.array)),this.data.array[t+0]=n,this.data.array[t+1]=r,this}setXYZ(t,n,r,o){return t=t*this.data.stride+this.offset,this.normalized&&(n=mi(n,this.array),r=mi(r,this.array),o=mi(o,this.array)),this.data.array[t+0]=n,this.data.array[t+1]=r,this.data.array[t+2]=o,this}setXYZW(t,n,r,o,c){return t=t*this.data.stride+this.offset,this.normalized&&(n=mi(n,this.array),r=mi(r,this.array),o=mi(o,this.array),c=mi(c,this.array)),this.data.array[t+0]=n,this.data.array[t+1]=r,this.data.array[t+2]=o,this.data.array[t+3]=c,this}clone(t){if(t===void 0){console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.");const n=[];for(let r=0;r<this.count;r++){const o=r*this.data.stride+this.offset;for(let c=0;c<this.itemSize;c++)n.push(this.data.array[o+c])}return new ds(new this.array.constructor(n),this.itemSize,this.normalized)}else return t.interleavedBuffers===void 0&&(t.interleavedBuffers={}),t.interleavedBuffers[this.data.uuid]===void 0&&(t.interleavedBuffers[this.data.uuid]=this.data.clone(t)),new Gp(t.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized)}toJSON(t){if(t===void 0){console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.");const n=[];for(let r=0;r<this.count;r++){const o=r*this.data.stride+this.offset;for(let c=0;c<this.itemSize;c++)n.push(this.data.array[o+c])}return{itemSize:this.itemSize,type:this.array.constructor.name,array:n,normalized:this.normalized}}else return t.interleavedBuffers===void 0&&(t.interleavedBuffers={}),t.interleavedBuffers[this.data.uuid]===void 0&&(t.interleavedBuffers[this.data.uuid]=this.data.toJSON(t)),{isInterleavedBufferAttribute:!0,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized}}}class UE extends ql{constructor(t){super(),this.isSpriteMaterial=!0,this.type="SpriteMaterial",this.color=new Qn(16777215),this.map=null,this.alphaMap=null,this.rotation=0,this.sizeAttenuation=!0,this.transparent=!0,this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.alphaMap=t.alphaMap,this.rotation=t.rotation,this.sizeAttenuation=t.sizeAttenuation,this.fog=t.fog,this}}let Xc;const bu=new ue,qc=new ue,Yc=new ue,Zc=new ln,Eu=new ln,NE=new Ti,lp=new ue,wu=new ue,cp=new ue,xS=new ln,hg=new ln,vS=new ln;class bL extends Ar{constructor(t=new UE){if(super(),this.isSprite=!0,this.type="Sprite",Xc===void 0){Xc=new Er;const n=new Float32Array([-.5,-.5,0,0,0,.5,-.5,0,1,0,.5,.5,0,1,1,-.5,.5,0,0,1]),r=new SL(n,5);Xc.setIndex([0,1,2,0,2,3]),Xc.setAttribute("position",new Gp(r,3,0,!1)),Xc.setAttribute("uv",new Gp(r,2,3,!1))}this.geometry=Xc,this.material=t,this.center=new ln(.5,.5)}raycast(t,n){t.camera===null&&console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'),qc.setFromMatrixScale(this.matrixWorld),NE.copy(t.camera.matrixWorld),this.modelViewMatrix.multiplyMatrices(t.camera.matrixWorldInverse,this.matrixWorld),Yc.setFromMatrixPosition(this.modelViewMatrix),t.camera.isPerspectiveCamera&&this.material.sizeAttenuation===!1&&qc.multiplyScalar(-Yc.z);const r=this.material.rotation;let o,c;r!==0&&(c=Math.cos(r),o=Math.sin(r));const d=this.center;hp(lp.set(-.5,-.5,0),Yc,d,qc,o,c),hp(wu.set(.5,-.5,0),Yc,d,qc,o,c),hp(cp.set(.5,.5,0),Yc,d,qc,o,c),xS.set(0,0),hg.set(1,0),vS.set(1,1);let p=t.ray.intersectTriangle(lp,wu,cp,!1,bu);if(p===null&&(hp(wu.set(-.5,.5,0),Yc,d,qc,o,c),hg.set(0,1),p=t.ray.intersectTriangle(lp,cp,wu,!1,bu),p===null))return;const v=t.ray.origin.distanceTo(bu);v<t.near||v>t.far||n.push({distance:v,point:bu.clone(),uv:ws.getInterpolation(bu,lp,wu,cp,xS,hg,vS,new ln),face:null,object:this})}copy(t,n){return super.copy(t,n),t.center!==void 0&&this.center.copy(t.center),this.material=t.material,this}}function hp(a,t,n,r,o,c){Zc.subVectors(a,n).addScalar(.5).multiply(r),o!==void 0?(Eu.x=c*Zc.x-o*Zc.y,Eu.y=o*Zc.x+c*Zc.y):Eu.copy(Zc),a.copy(t),a.x+=Eu.x,a.y+=Eu.y,a.applyMatrix4(NE)}const ug=new ue,EL=new ue,wL=new nn;class go{constructor(t=new ue(1,0,0),n=0){this.isPlane=!0,this.normal=t,this.constant=n}set(t,n){return this.normal.copy(t),this.constant=n,this}setComponents(t,n,r,o){return this.normal.set(t,n,r),this.constant=o,this}setFromNormalAndCoplanarPoint(t,n){return this.normal.copy(t),this.constant=-n.dot(this.normal),this}setFromCoplanarPoints(t,n,r){const o=ug.subVectors(r,n).cross(EL.subVectors(t,n)).normalize();return this.setFromNormalAndCoplanarPoint(o,t),this}copy(t){return this.normal.copy(t.normal),this.constant=t.constant,this}normalize(){const t=1/this.normal.length();return this.normal.multiplyScalar(t),this.constant*=t,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(t){return this.normal.dot(t)+this.constant}distanceToSphere(t){return this.distanceToPoint(t.center)-t.radius}projectPoint(t,n){return n.copy(t).addScaledVector(this.normal,-this.distanceToPoint(t))}intersectLine(t,n){const r=t.delta(ug),o=this.normal.dot(r);if(o===0)return this.distanceToPoint(t.start)===0?n.copy(t.start):null;const c=-(t.start.dot(this.normal)+this.constant)/o;return c<0||c>1?null:n.copy(t.start).addScaledVector(r,c)}intersectsLine(t){const n=this.distanceToPoint(t.start),r=this.distanceToPoint(t.end);return n<0&&r>0||r<0&&n>0}intersectsBox(t){return t.intersectsPlane(this)}intersectsSphere(t){return t.intersectsPlane(this)}coplanarPoint(t){return t.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(t,n){const r=n||wL.getNormalMatrix(t),o=this.coplanarPoint(ug).applyMatrix4(t),c=this.normal.applyMatrix3(r).normalize();return this.constant=-o.dot(c),this}translate(t){return this.constant-=t.dot(this.normal),this}equals(t){return t.normal.equals(this.normal)&&t.constant===this.constant}clone(){return new this.constructor().copy(this)}}const vl=new lf,up=new ue;class FE{constructor(t=new go,n=new go,r=new go,o=new go,c=new go,d=new go){this.planes=[t,n,r,o,c,d]}set(t,n,r,o,c,d){const p=this.planes;return p[0].copy(t),p[1].copy(n),p[2].copy(r),p[3].copy(o),p[4].copy(c),p[5].copy(d),this}copy(t){const n=this.planes;for(let r=0;r<6;r++)n[r].copy(t.planes[r]);return this}setFromProjectionMatrix(t,n=Ha){const r=this.planes,o=t.elements,c=o[0],d=o[1],p=o[2],v=o[3],_=o[4],x=o[5],M=o[6],b=o[7],E=o[8],U=o[9],L=o[10],P=o[11],A=o[12],X=o[13],k=o[14],O=o[15];if(r[0].setComponents(v-c,b-_,P-E,O-A).normalize(),r[1].setComponents(v+c,b+_,P+E,O+A).normalize(),r[2].setComponents(v+d,b+x,P+U,O+X).normalize(),r[3].setComponents(v-d,b-x,P-U,O-X).normalize(),r[4].setComponents(v-p,b-M,P-L,O-k).normalize(),n===Ha)r[5].setComponents(v+p,b+M,P+L,O+k).normalize();else if(n===Vp)r[5].setComponents(p,M,L,k).normalize();else throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: "+n);return this}intersectsObject(t){if(t.boundingSphere!==void 0)t.boundingSphere===null&&t.computeBoundingSphere(),vl.copy(t.boundingSphere).applyMatrix4(t.matrixWorld);else{const n=t.geometry;n.boundingSphere===null&&n.computeBoundingSphere(),vl.copy(n.boundingSphere).applyMatrix4(t.matrixWorld)}return this.intersectsSphere(vl)}intersectsSprite(t){return vl.center.set(0,0,0),vl.radius=.7071067811865476,vl.applyMatrix4(t.matrixWorld),this.intersectsSphere(vl)}intersectsSphere(t){const n=this.planes,r=t.center,o=-t.radius;for(let c=0;c<6;c++)if(n[c].distanceToPoint(r)<o)return!1;return!0}intersectsBox(t){const n=this.planes;for(let r=0;r<6;r++){const o=n[r];if(up.x=o.normal.x>0?t.max.x:t.min.x,up.y=o.normal.y>0?t.max.y:t.min.y,up.z=o.normal.z>0?t.max.z:t.min.z,o.distanceToPoint(up)<0)return!1}return!0}containsPoint(t){const n=this.planes;for(let r=0;r<6;r++)if(n[r].distanceToPoint(t)<0)return!1;return!0}clone(){return new this.constructor().copy(this)}}class Wp extends ql{constructor(t){super(),this.isLineBasicMaterial=!0,this.type="LineBasicMaterial",this.color=new Qn(16777215),this.map=null,this.linewidth=1,this.linecap="round",this.linejoin="round",this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.linewidth=t.linewidth,this.linecap=t.linecap,this.linejoin=t.linejoin,this.fog=t.fog,this}}const Xp=new ue,qp=new ue,yS=new Ti,Tu=new cf,fp=new lf,fg=new ue,MS=new ue;class dg extends Ar{constructor(t=new Er,n=new Wp){super(),this.isLine=!0,this.type="Line",this.geometry=t,this.material=n,this.updateMorphTargets()}copy(t,n){return super.copy(t,n),this.material=Array.isArray(t.material)?t.material.slice():t.material,this.geometry=t.geometry,this}computeLineDistances(){const t=this.geometry;if(t.index===null){const n=t.attributes.position,r=[0];for(let o=1,c=n.count;o<c;o++)Xp.fromBufferAttribute(n,o-1),qp.fromBufferAttribute(n,o),r[o]=r[o-1],r[o]+=Xp.distanceTo(qp);t.setAttribute("lineDistance",new Ps(r,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");return this}raycast(t,n){const r=this.geometry,o=this.matrixWorld,c=t.params.Line.threshold,d=r.drawRange;if(r.boundingSphere===null&&r.computeBoundingSphere(),fp.copy(r.boundingSphere),fp.applyMatrix4(o),fp.radius+=c,t.ray.intersectsSphere(fp)===!1)return;yS.copy(o).invert(),Tu.copy(t.ray).applyMatrix4(yS);const p=c/((this.scale.x+this.scale.y+this.scale.z)/3),v=p*p,_=this.isLineSegments?2:1,x=r.index,b=r.attributes.position;if(x!==null){const E=Math.max(0,d.start),U=Math.min(x.count,d.start+d.count);for(let L=E,P=U-1;L<P;L+=_){const A=x.getX(L),X=x.getX(L+1),k=dp(this,t,Tu,v,A,X);k&&n.push(k)}if(this.isLineLoop){const L=x.getX(U-1),P=x.getX(E),A=dp(this,t,Tu,v,L,P);A&&n.push(A)}}else{const E=Math.max(0,d.start),U=Math.min(b.count,d.start+d.count);for(let L=E,P=U-1;L<P;L+=_){const A=dp(this,t,Tu,v,L,L+1);A&&n.push(A)}if(this.isLineLoop){const L=dp(this,t,Tu,v,U-1,E);L&&n.push(L)}}}updateMorphTargets(){const n=this.geometry.morphAttributes,r=Object.keys(n);if(r.length>0){const o=n[r[0]];if(o!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let c=0,d=o.length;c<d;c++){const p=o[c].name||String(c);this.morphTargetInfluences.push(0),this.morphTargetDictionary[p]=c}}}}}function dp(a,t,n,r,o,c){const d=a.geometry.attributes.position;if(Xp.fromBufferAttribute(d,o),qp.fromBufferAttribute(d,c),n.distanceSqToSegment(Xp,qp,fg,MS)>r)return;fg.applyMatrix4(a.matrixWorld);const v=t.ray.origin.distanceTo(fg);if(!(v<t.near||v>t.far))return{distance:v,point:MS.clone().applyMatrix4(a.matrixWorld),index:o,face:null,faceIndex:null,barycoord:null,object:a}}class OE extends ql{constructor(t){super(),this.isPointsMaterial=!0,this.type="PointsMaterial",this.color=new Qn(16777215),this.map=null,this.alphaMap=null,this.size=1,this.sizeAttenuation=!0,this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.alphaMap=t.alphaMap,this.size=t.size,this.sizeAttenuation=t.sizeAttenuation,this.fog=t.fog,this}}const SS=new Ti,I0=new cf,pp=new lf,mp=new ue;class TL extends Ar{constructor(t=new Er,n=new OE){super(),this.isPoints=!0,this.type="Points",this.geometry=t,this.material=n,this.updateMorphTargets()}copy(t,n){return super.copy(t,n),this.material=Array.isArray(t.material)?t.material.slice():t.material,this.geometry=t.geometry,this}raycast(t,n){const r=this.geometry,o=this.matrixWorld,c=t.params.Points.threshold,d=r.drawRange;if(r.boundingSphere===null&&r.computeBoundingSphere(),pp.copy(r.boundingSphere),pp.applyMatrix4(o),pp.radius+=c,t.ray.intersectsSphere(pp)===!1)return;SS.copy(o).invert(),I0.copy(t.ray).applyMatrix4(SS);const p=c/((this.scale.x+this.scale.y+this.scale.z)/3),v=p*p,_=r.index,M=r.attributes.position;if(_!==null){const b=Math.max(0,d.start),E=Math.min(_.count,d.start+d.count);for(let U=b,L=E;U<L;U++){const P=_.getX(U);mp.fromBufferAttribute(M,P),bS(mp,P,v,o,t,n,this)}}else{const b=Math.max(0,d.start),E=Math.min(M.count,d.start+d.count);for(let U=b,L=E;U<L;U++)mp.fromBufferAttribute(M,U),bS(mp,U,v,o,t,n,this)}}updateMorphTargets(){const n=this.geometry.morphAttributes,r=Object.keys(n);if(r.length>0){const o=n[r[0]];if(o!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let c=0,d=o.length;c<d;c++){const p=o[c].name||String(c);this.morphTargetInfluences.push(0),this.morphTargetDictionary[p]=c}}}}}function bS(a,t,n,r,o,c,d){const p=I0.distanceSqToPoint(a);if(p<n){const v=new ue;I0.closestPointToPoint(a,v),v.applyMatrix4(r);const _=o.ray.origin.distanceTo(v);if(_<o.near||_>o.far)return;c.push({distance:_,distanceToRay:Math.sqrt(p),point:v,index:t,face:null,faceIndex:null,barycoord:null,object:d})}}class _p extends Ar{constructor(){super(),this.isGroup=!0,this.type="Group"}}class AL extends Tr{constructor(t,n,r,o,c,d,p,v,_){super(t,n,r,o,c,d,p,v,_),this.isCanvasTexture=!0,this.needsUpdate=!0}}class BE extends Tr{constructor(t,n,r,o,c,d,p,v,_,x=ah){if(x!==ah&&x!==_h)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");r===void 0&&x===ah&&(r=Bl),r===void 0&&x===_h&&(r=mh),super(null,o,c,d,p,v,x,r,_),this.isDepthTexture=!0,this.image={width:t,height:n},this.magFilter=p!==void 0?p:$s,this.minFilter=v!==void 0?v:$s,this.flipY=!1,this.generateMipmaps=!1,this.compareFunction=null}copy(t){return super.copy(t),this.compareFunction=t.compareFunction,this}toJSON(t){const n=super.toJSON(t);return this.compareFunction!==null&&(n.compareFunction=this.compareFunction),n}}class rm extends Er{constructor(t=1,n=1,r=1,o=1){super(),this.type="PlaneGeometry",this.parameters={width:t,height:n,widthSegments:r,heightSegments:o};const c=t/2,d=n/2,p=Math.floor(r),v=Math.floor(o),_=p+1,x=v+1,M=t/p,b=n/v,E=[],U=[],L=[],P=[];for(let A=0;A<x;A++){const X=A*b-d;for(let k=0;k<_;k++){const O=k*M-c;U.push(O,-X,0),L.push(0,0,1),P.push(k/p),P.push(1-A/v)}}for(let A=0;A<v;A++)for(let X=0;X<p;X++){const k=X+_*A,O=X+_*(A+1),z=X+1+_*(A+1),Y=X+1+_*A;E.push(k,O,Y),E.push(O,z,Y)}this.setIndex(E),this.setAttribute("position",new Ps(U,3)),this.setAttribute("normal",new Ps(L,3)),this.setAttribute("uv",new Ps(P,2))}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new rm(t.width,t.height,t.widthSegments,t.heightSegments)}}class dx extends Er{constructor(t=1,n=32,r=16,o=0,c=Math.PI*2,d=0,p=Math.PI){super(),this.type="SphereGeometry",this.parameters={radius:t,widthSegments:n,heightSegments:r,phiStart:o,phiLength:c,thetaStart:d,thetaLength:p},n=Math.max(3,Math.floor(n)),r=Math.max(2,Math.floor(r));const v=Math.min(d+p,Math.PI);let _=0;const x=[],M=new ue,b=new ue,E=[],U=[],L=[],P=[];for(let A=0;A<=r;A++){const X=[],k=A/r;let O=0;A===0&&d===0?O=.5/n:A===r&&v===Math.PI&&(O=-.5/n);for(let z=0;z<=n;z++){const Y=z/n;M.x=-t*Math.cos(o+Y*c)*Math.sin(d+k*p),M.y=t*Math.cos(d+k*p),M.z=t*Math.sin(o+Y*c)*Math.sin(d+k*p),U.push(M.x,M.y,M.z),b.copy(M).normalize(),L.push(b.x,b.y,b.z),P.push(Y+O,1-k),X.push(_++)}x.push(X)}for(let A=0;A<r;A++)for(let X=0;X<n;X++){const k=x[A][X+1],O=x[A][X],z=x[A+1][X],Y=x[A+1][X+1];(A!==0||d>0)&&E.push(k,O,Y),(A!==r-1||v<Math.PI)&&E.push(O,z,Y)}this.setIndex(E),this.setAttribute("position",new Ps(U,3)),this.setAttribute("normal",new Ps(L,3)),this.setAttribute("uv",new Ps(P,2))}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new dx(t.radius,t.widthSegments,t.heightSegments,t.phiStart,t.phiLength,t.thetaStart,t.thetaLength)}}class RL extends ql{constructor(t){super(),this.isMeshDepthMaterial=!0,this.type="MeshDepthMaterial",this.depthPacking=FD,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.setValues(t)}copy(t){return super.copy(t),this.depthPacking=t.depthPacking,this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this}}class CL extends ql{constructor(t){super(),this.isMeshDistanceMaterial=!0,this.type="MeshDistanceMaterial",this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.setValues(t)}copy(t){return super.copy(t),this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this}}class PL extends Wp{constructor(t){super(),this.isLineDashedMaterial=!0,this.type="LineDashedMaterial",this.scale=1,this.dashSize=3,this.gapSize=1,this.setValues(t)}copy(t){return super.copy(t),this.scale=t.scale,this.dashSize=t.dashSize,this.gapSize=t.gapSize,this}}const ES={enabled:!1,files:{},add:function(a,t){this.enabled!==!1&&(this.files[a]=t)},get:function(a){if(this.enabled!==!1)return this.files[a]},remove:function(a){delete this.files[a]},clear:function(){this.files={}}};class IL{constructor(t,n,r){const o=this;let c=!1,d=0,p=0,v;const _=[];this.onStart=void 0,this.onLoad=t,this.onProgress=n,this.onError=r,this.itemStart=function(x){p++,c===!1&&o.onStart!==void 0&&o.onStart(x,d,p),c=!0},this.itemEnd=function(x){d++,o.onProgress!==void 0&&o.onProgress(x,d,p),d===p&&(c=!1,o.onLoad!==void 0&&o.onLoad())},this.itemError=function(x){o.onError!==void 0&&o.onError(x)},this.resolveURL=function(x){return v?v(x):x},this.setURLModifier=function(x){return v=x,this},this.addHandler=function(x,M){return _.push(x,M),this},this.removeHandler=function(x){const M=_.indexOf(x);return M!==-1&&_.splice(M,2),this},this.getHandler=function(x){for(let M=0,b=_.length;M<b;M+=2){const E=_[M],U=_[M+1];if(E.global&&(E.lastIndex=0),E.test(x))return U}return null}}}const DL=new IL;class px{constructor(t){this.manager=t!==void 0?t:DL,this.crossOrigin="anonymous",this.withCredentials=!1,this.path="",this.resourcePath="",this.requestHeader={}}load(){}loadAsync(t,n){const r=this;return new Promise(function(o,c){r.load(t,o,n,c)})}parse(){}setCrossOrigin(t){return this.crossOrigin=t,this}setWithCredentials(t){return this.withCredentials=t,this}setPath(t){return this.path=t,this}setResourcePath(t){return this.resourcePath=t,this}setRequestHeader(t){return this.requestHeader=t,this}}px.DEFAULT_MATERIAL_NAME="__DEFAULT";class LL extends px{constructor(t){super(t)}load(t,n,r,o){this.path!==void 0&&(t=this.path+t),t=this.manager.resolveURL(t);const c=this,d=ES.get(t);if(d!==void 0)return c.manager.itemStart(t),setTimeout(function(){n&&n(d),c.manager.itemEnd(t)},0),d;const p=Gu("img");function v(){x(),ES.add(t,this),n&&n(this),c.manager.itemEnd(t)}function _(M){x(),o&&o(M),c.manager.itemError(t),c.manager.itemEnd(t)}function x(){p.removeEventListener("load",v,!1),p.removeEventListener("error",_,!1)}return p.addEventListener("load",v,!1),p.addEventListener("error",_,!1),t.slice(0,5)!=="data:"&&this.crossOrigin!==void 0&&(p.crossOrigin=this.crossOrigin),c.manager.itemStart(t),p.src=t,p}}class UL extends px{constructor(t){super(t)}load(t,n,r,o){const c=new Tr,d=new LL(this.manager);return d.setCrossOrigin(this.crossOrigin),d.setPath(this.path),d.load(t,function(p){c.image=p,c.needsUpdate=!0,n!==void 0&&n(c)},r,o),c}}class zE extends DE{constructor(t=-1,n=1,r=1,o=-1,c=.1,d=2e3){super(),this.isOrthographicCamera=!0,this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=t,this.right=n,this.top=r,this.bottom=o,this.near=c,this.far=d,this.updateProjectionMatrix()}copy(t,n){return super.copy(t,n),this.left=t.left,this.right=t.right,this.top=t.top,this.bottom=t.bottom,this.near=t.near,this.far=t.far,this.zoom=t.zoom,this.view=t.view===null?null:Object.assign({},t.view),this}setViewOffset(t,n,r,o,c,d){this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=n,this.view.offsetX=r,this.view.offsetY=o,this.view.width=c,this.view.height=d,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=(this.right-this.left)/(2*this.zoom),n=(this.top-this.bottom)/(2*this.zoom),r=(this.right+this.left)/2,o=(this.top+this.bottom)/2;let c=r-t,d=r+t,p=o+n,v=o-n;if(this.view!==null&&this.view.enabled){const _=(this.right-this.left)/this.view.fullWidth/this.zoom,x=(this.top-this.bottom)/this.view.fullHeight/this.zoom;c+=_*this.view.offsetX,d=c+_*this.view.width,p-=x*this.view.offsetY,v=p-x*this.view.height}this.projectionMatrix.makeOrthographic(c,d,p,v,this.near,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const n=super.toJSON(t);return n.object.zoom=this.zoom,n.object.left=this.left,n.object.right=this.right,n.object.top=this.top,n.object.bottom=this.bottom,n.object.near=this.near,n.object.far=this.far,this.view!==null&&(n.object.view=Object.assign({},this.view)),n}}class NL extends Ys{constructor(t=[]){super(),this.isArrayCamera=!0,this.cameras=t}}const wS=new Ti;class FL{constructor(t,n,r=0,o=1/0){this.ray=new cf(t,n),this.near=r,this.far=o,this.camera=null,this.layers=new ux,this.params={Mesh:{},Line:{threshold:1},LOD:{},Points:{threshold:1},Sprite:{}}}set(t,n){this.ray.set(t,n)}setFromCamera(t,n){n.isPerspectiveCamera?(this.ray.origin.setFromMatrixPosition(n.matrixWorld),this.ray.direction.set(t.x,t.y,.5).unproject(n).sub(this.ray.origin).normalize(),this.camera=n):n.isOrthographicCamera?(this.ray.origin.set(t.x,t.y,(n.near+n.far)/(n.near-n.far)).unproject(n),this.ray.direction.set(0,0,-1).transformDirection(n.matrixWorld),this.camera=n):console.error("THREE.Raycaster: Unsupported camera type: "+n.type)}setFromXRController(t){return wS.identity().extractRotation(t.matrixWorld),this.ray.origin.setFromMatrixPosition(t.matrixWorld),this.ray.direction.set(0,0,-1).applyMatrix4(wS),this}intersectObject(t,n=!0,r=[]){return D0(t,this,r,n),r.sort(TS),r}intersectObjects(t,n=!0,r=[]){for(let o=0,c=t.length;o<c;o++)D0(t[o],this,r,n);return r.sort(TS),r}}function TS(a,t){return a.distance-t.distance}function D0(a,t,n,r){let o=!0;if(a.layers.test(t.layers)&&a.raycast(t,n)===!1&&(o=!1),o===!0&&r===!0){const c=a.children;for(let d=0,p=c.length;d<p;d++)D0(c[d],t,n,!0)}}class AS{constructor(t=1,n=0,r=0){return this.radius=t,this.phi=n,this.theta=r,this}set(t,n,r){return this.radius=t,this.phi=n,this.theta=r,this}copy(t){return this.radius=t.radius,this.phi=t.phi,this.theta=t.theta,this}makeSafe(){return this.phi=Bn(this.phi,1e-6,Math.PI-1e-6),this}setFromVector3(t){return this.setFromCartesianCoords(t.x,t.y,t.z)}setFromCartesianCoords(t,n,r){return this.radius=Math.sqrt(t*t+n*n+r*r),this.radius===0?(this.theta=0,this.phi=0):(this.theta=Math.atan2(t,r),this.phi=Math.acos(Bn(n/this.radius,-1,1))),this}clone(){return new this.constructor().copy(this)}}class OL extends Xl{constructor(t,n=null){super(),this.object=t,this.domElement=n,this.enabled=!0,this.state=-1,this.keys={},this.mouseButtons={LEFT:null,MIDDLE:null,RIGHT:null},this.touches={ONE:null,TWO:null}}connect(){}disconnect(){}dispose(){}update(){}}function RS(a,t,n,r){const o=BL(r);switch(n){case gE:return a*t;case vE:return a*t;case yE:return a*t*2;case ME:return a*t/o.components*o.byteLength;case lx:return a*t/o.components*o.byteLength;case SE:return a*t*2/o.components*o.byteLength;case cx:return a*t*2/o.components*o.byteLength;case xE:return a*t*3/o.components*o.byteLength;case Zs:return a*t*4/o.components*o.byteLength;case hx:return a*t*4/o.components*o.byteLength;case Ap:case Rp:return Math.floor((a+3)/4)*Math.floor((t+3)/4)*8;case Cp:case Pp:return Math.floor((a+3)/4)*Math.floor((t+3)/4)*16;case s0:case o0:return Math.max(a,16)*Math.max(t,8)/4;case r0:case a0:return Math.max(a,8)*Math.max(t,8)/2;case l0:case c0:return Math.floor((a+3)/4)*Math.floor((t+3)/4)*8;case h0:return Math.floor((a+3)/4)*Math.floor((t+3)/4)*16;case u0:return Math.floor((a+3)/4)*Math.floor((t+3)/4)*16;case f0:return Math.floor((a+4)/5)*Math.floor((t+3)/4)*16;case d0:return Math.floor((a+4)/5)*Math.floor((t+4)/5)*16;case p0:return Math.floor((a+5)/6)*Math.floor((t+4)/5)*16;case m0:return Math.floor((a+5)/6)*Math.floor((t+5)/6)*16;case _0:return Math.floor((a+7)/8)*Math.floor((t+4)/5)*16;case g0:return Math.floor((a+7)/8)*Math.floor((t+5)/6)*16;case x0:return Math.floor((a+7)/8)*Math.floor((t+7)/8)*16;case v0:return Math.floor((a+9)/10)*Math.floor((t+4)/5)*16;case y0:return Math.floor((a+9)/10)*Math.floor((t+5)/6)*16;case M0:return Math.floor((a+9)/10)*Math.floor((t+7)/8)*16;case S0:return Math.floor((a+9)/10)*Math.floor((t+9)/10)*16;case b0:return Math.floor((a+11)/12)*Math.floor((t+9)/10)*16;case E0:return Math.floor((a+11)/12)*Math.floor((t+11)/12)*16;case Ip:case w0:case T0:return Math.ceil(a/4)*Math.ceil(t/4)*16;case bE:case A0:return Math.ceil(a/4)*Math.ceil(t/4)*8;case R0:case C0:return Math.ceil(a/4)*Math.ceil(t/4)*16}throw new Error(`Unable to determine texture byte length for ${n} format.`)}function BL(a){switch(a){case Wa:case pE:return{byteLength:1,components:1};case Hu:case mE:case of:return{byteLength:2,components:1};case ax:case ox:return{byteLength:2,components:4};case Bl:case sx:case Va:return{byteLength:4,components:1};case _E:return{byteLength:4,components:3}}throw new Error(`Unknown texture type ${a}.`)}typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:rx}}));typeof window<"u"&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=rx);/**
 * @license
 * Copyright 2010-2024 Three.js Authors
 * SPDX-License-Identifier: MIT
 */function kE(){let a=null,t=!1,n=null,r=null;function o(c,d){n(c,d),r=a.requestAnimationFrame(o)}return{start:function(){t!==!0&&n!==null&&(r=a.requestAnimationFrame(o),t=!0)},stop:function(){a.cancelAnimationFrame(r),t=!1},setAnimationLoop:function(c){n=c},setContext:function(c){a=c}}}function zL(a){const t=new WeakMap;function n(p,v){const _=p.array,x=p.usage,M=_.byteLength,b=a.createBuffer();a.bindBuffer(v,b),a.bufferData(v,_,x),p.onUploadCallback();let E;if(_ instanceof Float32Array)E=a.FLOAT;else if(_ instanceof Uint16Array)p.isFloat16BufferAttribute?E=a.HALF_FLOAT:E=a.UNSIGNED_SHORT;else if(_ instanceof Int16Array)E=a.SHORT;else if(_ instanceof Uint32Array)E=a.UNSIGNED_INT;else if(_ instanceof Int32Array)E=a.INT;else if(_ instanceof Int8Array)E=a.BYTE;else if(_ instanceof Uint8Array)E=a.UNSIGNED_BYTE;else if(_ instanceof Uint8ClampedArray)E=a.UNSIGNED_BYTE;else throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: "+_);return{buffer:b,type:E,bytesPerElement:_.BYTES_PER_ELEMENT,version:p.version,size:M}}function r(p,v,_){const x=v.array,M=v.updateRanges;if(a.bindBuffer(_,p),M.length===0)a.bufferSubData(_,0,x);else{M.sort((E,U)=>E.start-U.start);let b=0;for(let E=1;E<M.length;E++){const U=M[b],L=M[E];L.start<=U.start+U.count+1?U.count=Math.max(U.count,L.start+L.count-U.start):(++b,M[b]=L)}M.length=b+1;for(let E=0,U=M.length;E<U;E++){const L=M[E];a.bufferSubData(_,L.start*x.BYTES_PER_ELEMENT,x,L.start,L.count)}v.clearUpdateRanges()}v.onUploadCallback()}function o(p){return p.isInterleavedBufferAttribute&&(p=p.data),t.get(p)}function c(p){p.isInterleavedBufferAttribute&&(p=p.data);const v=t.get(p);v&&(a.deleteBuffer(v.buffer),t.delete(p))}function d(p,v){if(p.isInterleavedBufferAttribute&&(p=p.data),p.isGLBufferAttribute){const x=t.get(p);(!x||x.version<p.version)&&t.set(p,{buffer:p.buffer,type:p.type,bytesPerElement:p.elementSize,version:p.version});return}const _=t.get(p);if(_===void 0)t.set(p,n(p,v));else if(_.version<p.version){if(_.size!==p.array.byteLength)throw new Error("THREE.WebGLAttributes: The size of the buffer attribute's array buffer does not match the original size. Resizing buffer attributes is not supported.");r(_.buffer,p,v),_.version=p.version}}return{get:o,remove:c,update:d}}var kL=`#ifdef USE_ALPHAHASH
	if ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;
#endif`,VL=`#ifdef USE_ALPHAHASH
	const float ALPHA_HASH_SCALE = 0.05;
	float hash2D( vec2 value ) {
		return fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );
	}
	float hash3D( vec3 value ) {
		return hash2D( vec2( hash2D( value.xy ), value.z ) );
	}
	float getAlphaHashThreshold( vec3 position ) {
		float maxDeriv = max(
			length( dFdx( position.xyz ) ),
			length( dFdy( position.xyz ) )
		);
		float pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );
		vec2 pixScales = vec2(
			exp2( floor( log2( pixScale ) ) ),
			exp2( ceil( log2( pixScale ) ) )
		);
		vec2 alpha = vec2(
			hash3D( floor( pixScales.x * position.xyz ) ),
			hash3D( floor( pixScales.y * position.xyz ) )
		);
		float lerpFactor = fract( log2( pixScale ) );
		float x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;
		float a = min( lerpFactor, 1.0 - lerpFactor );
		vec3 cases = vec3(
			x * x / ( 2.0 * a * ( 1.0 - a ) ),
			( x - 0.5 * a ) / ( 1.0 - a ),
			1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )
		);
		float threshold = ( x < ( 1.0 - a ) )
			? ( ( x < a ) ? cases.x : cases.y )
			: cases.z;
		return clamp( threshold , 1.0e-6, 1.0 );
	}
#endif`,HL=`#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;
#endif`,GL=`#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,WL=`#ifdef USE_ALPHATEST
	#ifdef ALPHA_TO_COVERAGE
	diffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );
	if ( diffuseColor.a == 0.0 ) discard;
	#else
	if ( diffuseColor.a < alphaTest ) discard;
	#endif
#endif`,XL=`#ifdef USE_ALPHATEST
	uniform float alphaTest;
#endif`,qL=`#ifdef USE_AOMAP
	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;
	reflectedLight.indirectDiffuse *= ambientOcclusion;
	#if defined( USE_CLEARCOAT ) 
		clearcoatSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_SHEEN ) 
		sheenSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD )
		float dotNV = saturate( dot( geometryNormal, geometryViewDir ) );
		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );
	#endif
#endif`,YL=`#ifdef USE_AOMAP
	uniform sampler2D aoMap;
	uniform float aoMapIntensity;
#endif`,ZL=`#ifdef USE_BATCHING
	#if ! defined( GL_ANGLE_multi_draw )
	#define gl_DrawID _gl_DrawID
	uniform int _gl_DrawID;
	#endif
	uniform highp sampler2D batchingTexture;
	uniform highp usampler2D batchingIdTexture;
	mat4 getBatchingMatrix( const in float i ) {
		int size = textureSize( batchingTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
	float getIndirectIndex( const in int i ) {
		int size = textureSize( batchingIdTexture, 0 ).x;
		int x = i % size;
		int y = i / size;
		return float( texelFetch( batchingIdTexture, ivec2( x, y ), 0 ).r );
	}
#endif
#ifdef USE_BATCHING_COLOR
	uniform sampler2D batchingColorTexture;
	vec3 getBatchingColor( const in float i ) {
		int size = textureSize( batchingColorTexture, 0 ).x;
		int j = int( i );
		int x = j % size;
		int y = j / size;
		return texelFetch( batchingColorTexture, ivec2( x, y ), 0 ).rgb;
	}
#endif`,$L=`#ifdef USE_BATCHING
	mat4 batchingMatrix = getBatchingMatrix( getIndirectIndex( gl_DrawID ) );
#endif`,KL=`vec3 transformed = vec3( position );
#ifdef USE_ALPHAHASH
	vPosition = vec3( position );
#endif`,JL=`vec3 objectNormal = vec3( normal );
#ifdef USE_TANGENT
	vec3 objectTangent = vec3( tangent.xyz );
#endif`,jL=`float G_BlinnPhong_Implicit( ) {
	return 0.25;
}
float D_BlinnPhong( const in float shininess, const in float dotNH ) {
	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );
}
vec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( specularColor, 1.0, dotVH );
	float G = G_BlinnPhong_Implicit( );
	float D = D_BlinnPhong( shininess, dotNH );
	return F * ( G * D );
} // validated`,QL=`#ifdef USE_IRIDESCENCE
	const mat3 XYZ_TO_REC709 = mat3(
		 3.2404542, -0.9692660,  0.0556434,
		-1.5371385,  1.8760108, -0.2040259,
		-0.4985314,  0.0415560,  1.0572252
	);
	vec3 Fresnel0ToIor( vec3 fresnel0 ) {
		vec3 sqrtF0 = sqrt( fresnel0 );
		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );
	}
	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );
	}
	float IorToFresnel0( float transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));
	}
	vec3 evalSensitivity( float OPD, vec3 shift ) {
		float phase = 2.0 * PI * OPD * 1.0e-9;
		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );
		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );
		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );
		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );
		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );
		xyz /= 1.0685e-7;
		vec3 rgb = XYZ_TO_REC709 * xyz;
		return rgb;
	}
	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {
		vec3 I;
		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );
		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );
		float cosTheta2Sq = 1.0 - sinTheta2Sq;
		if ( cosTheta2Sq < 0.0 ) {
			return vec3( 1.0 );
		}
		float cosTheta2 = sqrt( cosTheta2Sq );
		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );
		float R12 = F_Schlick( R0, 1.0, cosTheta1 );
		float T121 = 1.0 - R12;
		float phi12 = 0.0;
		if ( iridescenceIOR < outsideIOR ) phi12 = PI;
		float phi21 = PI - phi12;
		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );
		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );
		vec3 phi23 = vec3( 0.0 );
		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;
		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;
		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;
		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;
		vec3 phi = vec3( phi21 ) + phi23;
		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );
		vec3 r123 = sqrt( R123 );
		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );
		vec3 C0 = R12 + Rs;
		I = C0;
		vec3 Cm = Rs - T121;
		for ( int m = 1; m <= 2; ++ m ) {
			Cm *= r123;
			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );
			I += Cm * Sm;
		}
		return max( I, vec3( 0.0 ) );
	}
#endif`,eU=`#ifdef USE_BUMPMAP
	uniform sampler2D bumpMap;
	uniform float bumpScale;
	vec2 dHdxy_fwd() {
		vec2 dSTdx = dFdx( vBumpMapUv );
		vec2 dSTdy = dFdy( vBumpMapUv );
		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;
		return vec2( dBx, dBy );
	}
	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {
		vec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );
		vec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );
		vec3 vN = surf_norm;
		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );
		float fDet = dot( vSigmaX, R1 ) * faceDirection;
		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );
	}
#endif`,tU=`#if NUM_CLIPPING_PLANES > 0
	vec4 plane;
	#ifdef ALPHA_TO_COVERAGE
		float distanceToPlane, distanceGradient;
		float clipOpacity = 1.0;
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
			distanceGradient = fwidth( distanceToPlane ) / 2.0;
			clipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			if ( clipOpacity == 0.0 ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			float unionClipOpacity = 1.0;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
				distanceGradient = fwidth( distanceToPlane ) / 2.0;
				unionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			}
			#pragma unroll_loop_end
			clipOpacity *= 1.0 - unionClipOpacity;
		#endif
		diffuseColor.a *= clipOpacity;
		if ( diffuseColor.a == 0.0 ) discard;
	#else
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			bool clipped = true;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;
			}
			#pragma unroll_loop_end
			if ( clipped ) discard;
		#endif
	#endif
#endif`,nU=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];
#endif`,iU=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
#endif`,rU=`#if NUM_CLIPPING_PLANES > 0
	vClipPosition = - mvPosition.xyz;
#endif`,sU=`#if defined( USE_COLOR_ALPHA )
	diffuseColor *= vColor;
#elif defined( USE_COLOR )
	diffuseColor.rgb *= vColor;
#endif`,aU=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR )
	varying vec3 vColor;
#endif`,oU=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )
	varying vec3 vColor;
#endif`,lU=`#if defined( USE_COLOR_ALPHA )
	vColor = vec4( 1.0 );
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )
	vColor = vec3( 1.0 );
#endif
#ifdef USE_COLOR
	vColor *= color;
#endif
#ifdef USE_INSTANCING_COLOR
	vColor.xyz *= instanceColor.xyz;
#endif
#ifdef USE_BATCHING_COLOR
	vec3 batchingColor = getBatchingColor( getIndirectIndex( gl_DrawID ) );
	vColor.xyz *= batchingColor.xyz;
#endif`,cU=`#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement( a ) ( 1.0 - saturate( a ) )
float pow2( const in float x ) { return x*x; }
vec3 pow2( const in vec3 x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }
float average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }
highp float rand( const in vec2 uv ) {
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
	return fract( sin( sn ) * c );
}
#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif
struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};
struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};
#ifdef USE_ALPHAHASH
	varying vec3 vPosition;
#endif
vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
}
vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
}
mat3 transposeMat3( const in mat3 m ) {
	mat3 tmp;
	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
	return tmp;
}
bool isPerspectiveMatrix( mat4 m ) {
	return m[ 2 ][ 3 ] == - 1.0;
}
vec2 equirectUv( in vec3 dir ) {
	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;
	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;
	return vec2( u, v );
}
vec3 BRDF_Lambert( const in vec3 diffuseColor ) {
	return RECIPROCAL_PI * diffuseColor;
}
vec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
float F_Schlick( const in float f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
} // validated`,hU=`#ifdef ENVMAP_TYPE_CUBE_UV
	#define cubeUV_minMipLevel 4.0
	#define cubeUV_minTileSize 16.0
	float getFace( vec3 direction ) {
		vec3 absDirection = abs( direction );
		float face = - 1.0;
		if ( absDirection.x > absDirection.z ) {
			if ( absDirection.x > absDirection.y )
				face = direction.x > 0.0 ? 0.0 : 3.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		} else {
			if ( absDirection.z > absDirection.y )
				face = direction.z > 0.0 ? 2.0 : 5.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		}
		return face;
	}
	vec2 getUV( vec3 direction, float face ) {
		vec2 uv;
		if ( face == 0.0 ) {
			uv = vec2( direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 1.0 ) {
			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );
		} else if ( face == 2.0 ) {
			uv = vec2( - direction.x, direction.y ) / abs( direction.z );
		} else if ( face == 3.0 ) {
			uv = vec2( - direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 4.0 ) {
			uv = vec2( - direction.x, direction.z ) / abs( direction.y );
		} else {
			uv = vec2( direction.x, direction.y ) / abs( direction.z );
		}
		return 0.5 * ( uv + 1.0 );
	}
	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {
		float face = getFace( direction );
		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );
		mipInt = max( mipInt, cubeUV_minMipLevel );
		float faceSize = exp2( mipInt );
		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;
		if ( face > 2.0 ) {
			uv.y += faceSize;
			face -= 3.0;
		}
		uv.x += face * faceSize;
		uv.x += filterInt * 3.0 * cubeUV_minTileSize;
		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );
		uv.x *= CUBEUV_TEXEL_WIDTH;
		uv.y *= CUBEUV_TEXEL_HEIGHT;
		#ifdef texture2DGradEXT
			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;
		#else
			return texture2D( envMap, uv ).rgb;
		#endif
	}
	#define cubeUV_r0 1.0
	#define cubeUV_m0 - 2.0
	#define cubeUV_r1 0.8
	#define cubeUV_m1 - 1.0
	#define cubeUV_r4 0.4
	#define cubeUV_m4 2.0
	#define cubeUV_r5 0.305
	#define cubeUV_m5 3.0
	#define cubeUV_r6 0.21
	#define cubeUV_m6 4.0
	float roughnessToMip( float roughness ) {
		float mip = 0.0;
		if ( roughness >= cubeUV_r1 ) {
			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;
		} else if ( roughness >= cubeUV_r4 ) {
			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;
		} else if ( roughness >= cubeUV_r5 ) {
			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;
		} else if ( roughness >= cubeUV_r6 ) {
			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;
		} else {
			mip = - 2.0 * log2( 1.16 * roughness );		}
		return mip;
	}
	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {
		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );
		float mipF = fract( mip );
		float mipInt = floor( mip );
		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );
		if ( mipF == 0.0 ) {
			return vec4( color0, 1.0 );
		} else {
			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );
			return vec4( mix( color0, color1, mipF ), 1.0 );
		}
	}
#endif`,uU=`vec3 transformedNormal = objectNormal;
#ifdef USE_TANGENT
	vec3 transformedTangent = objectTangent;
#endif
#ifdef USE_BATCHING
	mat3 bm = mat3( batchingMatrix );
	transformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );
	transformedNormal = bm * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = bm * transformedTangent;
	#endif
#endif
#ifdef USE_INSTANCING
	mat3 im = mat3( instanceMatrix );
	transformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );
	transformedNormal = im * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = im * transformedTangent;
	#endif
#endif
transformedNormal = normalMatrix * transformedNormal;
#ifdef FLIP_SIDED
	transformedNormal = - transformedNormal;
#endif
#ifdef USE_TANGENT
	transformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;
	#ifdef FLIP_SIDED
		transformedTangent = - transformedTangent;
	#endif
#endif`,fU=`#ifdef USE_DISPLACEMENTMAP
	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;
#endif`,dU=`#ifdef USE_DISPLACEMENTMAP
	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );
#endif`,pU=`#ifdef USE_EMISSIVEMAP
	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );
	#ifdef DECODE_VIDEO_TEXTURE_EMISSIVE
		emissiveColor = sRGBTransferEOTF( emissiveColor );
	#endif
	totalEmissiveRadiance *= emissiveColor.rgb;
#endif`,mU=`#ifdef USE_EMISSIVEMAP
	uniform sampler2D emissiveMap;
#endif`,_U="gl_FragColor = linearToOutputTexel( gl_FragColor );",gU=`vec4 LinearTransferOETF( in vec4 value ) {
	return value;
}
vec4 sRGBTransferEOTF( in vec4 value ) {
	return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );
}
vec4 sRGBTransferOETF( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}`,xU=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vec3 cameraToFrag;
		if ( isOrthographic ) {
			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToFrag = normalize( vWorldPosition - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( cameraToFrag, worldNormal );
		#else
			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );
		#endif
	#else
		vec3 reflectVec = vReflect;
	#endif
	#ifdef ENVMAP_TYPE_CUBE
		vec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );
	#else
		vec4 envColor = vec4( 0.0 );
	#endif
	#ifdef ENVMAP_BLENDING_MULTIPLY
		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_MIX )
		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_ADD )
		outgoingLight += envColor.xyz * specularStrength * reflectivity;
	#endif
#endif`,vU=`#ifdef USE_ENVMAP
	uniform float envMapIntensity;
	uniform float flipEnvMap;
	uniform mat3 envMapRotation;
	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif`,yU=`#ifdef USE_ENVMAP
	uniform float reflectivity;
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif
#endif`,MU=`#ifdef USE_ENVMAP
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;
	#else
		varying vec3 vReflect;
		uniform float refractionRatio;
	#endif
#endif`,SU=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vWorldPosition = worldPosition.xyz;
	#else
		vec3 cameraToVertex;
		if ( isOrthographic ) {
			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vReflect = reflect( cameraToVertex, worldNormal );
		#else
			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );
		#endif
	#endif
#endif`,bU=`#ifdef USE_FOG
	vFogDepth = - mvPosition.z;
#endif`,EU=`#ifdef USE_FOG
	varying float vFogDepth;
#endif`,wU=`#ifdef USE_FOG
	#ifdef FOG_EXP2
		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );
	#else
		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );
	#endif
	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );
#endif`,TU=`#ifdef USE_FOG
	uniform vec3 fogColor;
	varying float vFogDepth;
	#ifdef FOG_EXP2
		uniform float fogDensity;
	#else
		uniform float fogNear;
		uniform float fogFar;
	#endif
#endif`,AU=`#ifdef USE_GRADIENTMAP
	uniform sampler2D gradientMap;
#endif
vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );
	#ifdef USE_GRADIENTMAP
		return vec3( texture2D( gradientMap, coord ).r );
	#else
		vec2 fw = fwidth( coord ) * 0.5;
		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );
	#endif
}`,RU=`#ifdef USE_LIGHTMAP
	uniform sampler2D lightMap;
	uniform float lightMapIntensity;
#endif`,CU=`LambertMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularStrength = specularStrength;`,PU=`varying vec3 vViewPosition;
struct LambertMaterial {
	vec3 diffuseColor;
	float specularStrength;
};
void RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Lambert
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert`,IU=`uniform bool receiveShadow;
uniform vec3 ambientLightColor;
#if defined( USE_LIGHT_PROBES )
	uniform vec3 lightProbe[ 9 ];
#endif
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {
	float x = normal.x, y = normal.y, z = normal.z;
	vec3 result = shCoefficients[ 0 ] * 0.886227;
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
	return result;
}
vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {
	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );
	return irradiance;
}
vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {
	vec3 irradiance = ambientLightColor;
	return irradiance;
}
float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {
	float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );
	if ( cutoffDistance > 0.0 ) {
		distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );
	}
	return distanceFalloff;
}
float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {
	return smoothstep( coneCosine, penumbraCosine, angleCosine );
}
#if NUM_DIR_LIGHTS > 0
	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};
	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];
	void getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {
		light.color = directionalLight.color;
		light.direction = directionalLight.direction;
		light.visible = true;
	}
#endif
#if NUM_POINT_LIGHTS > 0
	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};
	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];
	void getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = pointLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float lightDistance = length( lVector );
		light.color = pointLight.color;
		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );
		light.visible = ( light.color != vec3( 0.0 ) );
	}
#endif
#if NUM_SPOT_LIGHTS > 0
	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};
	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];
	void getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = spotLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float angleCos = dot( light.direction, spotLight.direction );
		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );
		if ( spotAttenuation > 0.0 ) {
			float lightDistance = length( lVector );
			light.color = spotLight.color * spotAttenuation;
			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );
			light.visible = ( light.color != vec3( 0.0 ) );
		} else {
			light.color = vec3( 0.0 );
			light.visible = false;
		}
	}
#endif
#if NUM_RECT_AREA_LIGHTS > 0
	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};
	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;
	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];
#endif
#if NUM_HEMI_LIGHTS > 0
	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};
	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];
	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {
		float dotNL = dot( normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;
		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );
		return irradiance;
	}
#endif`,DU=`#ifdef USE_ENVMAP
	vec3 getIBLIrradiance( const in vec3 normal ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );
			return PI * envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 reflectVec = reflect( - viewDir, normal );
			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );
			return envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	#ifdef USE_ANISOTROPY
		vec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {
			#ifdef ENVMAP_TYPE_CUBE_UV
				vec3 bentNormal = cross( bitangent, viewDir );
				bentNormal = normalize( cross( bentNormal, bitangent ) );
				bentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );
				return getIBLRadiance( viewDir, bentNormal, roughness );
			#else
				return vec3( 0.0 );
			#endif
		}
	#endif
#endif`,LU=`ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;`,UU=`varying vec3 vViewPosition;
struct ToonMaterial {
	vec3 diffuseColor;
};
void RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	vec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon`,NU=`BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;`,FU=`varying vec3 vViewPosition;
struct BlinnPhongMaterial {
	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;
};
void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;
}
void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong`,OU=`PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
vec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );
material.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;
material.roughness = min( material.roughness, 1.0 );
#ifdef IOR
	material.ior = ior;
	#ifdef USE_SPECULAR
		float specularIntensityFactor = specularIntensity;
		vec3 specularColorFactor = specularColor;
		#ifdef USE_SPECULAR_COLORMAP
			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;
		#endif
		#ifdef USE_SPECULAR_INTENSITYMAP
			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;
		#endif
		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );
	#else
		float specularIntensityFactor = 1.0;
		vec3 specularColorFactor = vec3( 1.0 );
		material.specularF90 = 1.0;
	#endif
	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );
#else
	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );
	material.specularF90 = 1.0;
#endif
#ifdef USE_CLEARCOAT
	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	material.clearcoatF0 = vec3( 0.04 );
	material.clearcoatF90 = 1.0;
	#ifdef USE_CLEARCOATMAP
		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;
	#endif
	#ifdef USE_CLEARCOAT_ROUGHNESSMAP
		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;
	#endif
	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
#endif
#ifdef USE_DISPERSION
	material.dispersion = dispersion;
#endif
#ifdef USE_IRIDESCENCE
	material.iridescence = iridescence;
	material.iridescenceIOR = iridescenceIOR;
	#ifdef USE_IRIDESCENCEMAP
		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;
	#endif
	#ifdef USE_IRIDESCENCE_THICKNESSMAP
		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;
	#else
		material.iridescenceThickness = iridescenceThicknessMaximum;
	#endif
#endif
#ifdef USE_SHEEN
	material.sheenColor = sheenColor;
	#ifdef USE_SHEEN_COLORMAP
		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;
	#endif
	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );
	#ifdef USE_SHEEN_ROUGHNESSMAP
		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;
	#endif
#endif
#ifdef USE_ANISOTROPY
	#ifdef USE_ANISOTROPYMAP
		mat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );
		vec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;
		vec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;
	#else
		vec2 anisotropyV = anisotropyVector;
	#endif
	material.anisotropy = length( anisotropyV );
	if( material.anisotropy == 0.0 ) {
		anisotropyV = vec2( 1.0, 0.0 );
	} else {
		anisotropyV /= material.anisotropy;
		material.anisotropy = saturate( material.anisotropy );
	}
	material.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );
	material.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;
	material.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;
#endif`,BU=`struct PhysicalMaterial {
	vec3 diffuseColor;
	float roughness;
	vec3 specularColor;
	float specularF90;
	float dispersion;
	#ifdef USE_CLEARCOAT
		float clearcoat;
		float clearcoatRoughness;
		vec3 clearcoatF0;
		float clearcoatF90;
	#endif
	#ifdef USE_IRIDESCENCE
		float iridescence;
		float iridescenceIOR;
		float iridescenceThickness;
		vec3 iridescenceFresnel;
		vec3 iridescenceF0;
	#endif
	#ifdef USE_SHEEN
		vec3 sheenColor;
		float sheenRoughness;
	#endif
	#ifdef IOR
		float ior;
	#endif
	#ifdef USE_TRANSMISSION
		float transmission;
		float transmissionAlpha;
		float thickness;
		float attenuationDistance;
		vec3 attenuationColor;
	#endif
	#ifdef USE_ANISOTROPY
		float anisotropy;
		float alphaT;
		vec3 anisotropyT;
		vec3 anisotropyB;
	#endif
};
vec3 clearcoatSpecularDirect = vec3( 0.0 );
vec3 clearcoatSpecularIndirect = vec3( 0.0 );
vec3 sheenSpecularDirect = vec3( 0.0 );
vec3 sheenSpecularIndirect = vec3(0.0 );
vec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {
    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );
    float x2 = x * x;
    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );
    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );
}
float V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	return 0.5 / max( gv + gl, EPSILON );
}
float D_GGX( const in float alpha, const in float dotNH ) {
	float a2 = pow2( alpha );
	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;
	return RECIPROCAL_PI * a2 / pow2( denom );
}
#ifdef USE_ANISOTROPY
	float V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {
		float gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );
		float gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );
		float v = 0.5 / ( gv + gl );
		return saturate(v);
	}
	float D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {
		float a2 = alphaT * alphaB;
		highp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );
		highp float v2 = dot( v, v );
		float w2 = a2 / v2;
		return RECIPROCAL_PI * a2 * pow2 ( w2 );
	}
#endif
#ifdef USE_CLEARCOAT
	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {
		vec3 f0 = material.clearcoatF0;
		float f90 = material.clearcoatF90;
		float roughness = material.clearcoatRoughness;
		float alpha = pow2( roughness );
		vec3 halfDir = normalize( lightDir + viewDir );
		float dotNL = saturate( dot( normal, lightDir ) );
		float dotNV = saturate( dot( normal, viewDir ) );
		float dotNH = saturate( dot( normal, halfDir ) );
		float dotVH = saturate( dot( viewDir, halfDir ) );
		vec3 F = F_Schlick( f0, f90, dotVH );
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
		return F * ( V * D );
	}
#endif
vec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {
	vec3 f0 = material.specularColor;
	float f90 = material.specularF90;
	float roughness = material.roughness;
	float alpha = pow2( roughness );
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( f0, f90, dotVH );
	#ifdef USE_IRIDESCENCE
		F = mix( F, material.iridescenceFresnel, material.iridescence );
	#endif
	#ifdef USE_ANISOTROPY
		float dotTL = dot( material.anisotropyT, lightDir );
		float dotTV = dot( material.anisotropyT, viewDir );
		float dotTH = dot( material.anisotropyT, halfDir );
		float dotBL = dot( material.anisotropyB, lightDir );
		float dotBV = dot( material.anisotropyB, viewDir );
		float dotBH = dot( material.anisotropyB, halfDir );
		float V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );
		float D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );
	#else
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
	#endif
	return F * ( V * D );
}
vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	float dotNV = saturate( dot( N, V ) );
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
	uv = uv * LUT_SCALE + LUT_BIAS;
	return uv;
}
float LTC_ClippedSphereFormFactor( const in vec3 f ) {
	float l = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
	float x = dot( v1, v2 );
	float y = abs( x );
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;
	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
	return cross( v1, v2 ) * theta_sintheta;
}
vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );
	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 );
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return vec3( result );
}
#if defined( USE_SHEEN )
float D_Charlie( float roughness, float dotNH ) {
	float alpha = pow2( roughness );
	float invAlpha = 1.0 / alpha;
	float cos2h = dotNH * dotNH;
	float sin2h = max( 1.0 - cos2h, 0.0078125 );
	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
}
float V_Neubelt( float dotNV, float dotNL ) {
	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );
}
vec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float D = D_Charlie( sheenRoughness, dotNH );
	float V = V_Neubelt( dotNV, dotNL );
	return sheenColor * ( D * V );
}
#endif
float IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	float r2 = roughness * roughness;
	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;
	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;
	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );
	return saturate( DG * RECIPROCAL_PI );
}
vec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;
	return fab;
}
vec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	return specularColor * fab.x + specularF90 * fab.y;
}
#ifdef USE_IRIDESCENCE
void computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#else
void computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#endif
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	#ifdef USE_IRIDESCENCE
		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );
	#else
		vec3 Fr = specularColor;
	#endif
	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;
	float Ess = fab.x + fab.y;
	float Ems = 1.0 - Ess;
	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );
	singleScatter += FssEss;
	multiScatter += Fms * Ems;
}
#if NUM_RECT_AREA_LIGHTS > 0
	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
		vec3 normal = geometryNormal;
		vec3 viewDir = geometryViewDir;
		vec3 position = geometryPosition;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.roughness;
		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;
		vec2 uv = LTC_Uv( normal, viewDir, roughness );
		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );
		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(    0, 1,    0 ),
			vec3( t1.z, 0, t1.w )
		);
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );
		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );
		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );
	}
#endif
void RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifdef USE_CLEARCOAT
		float dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );
		vec3 ccIrradiance = dotNLcc * directLight.color;
		clearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );
	#endif
	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {
	#ifdef USE_CLEARCOAT
		clearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );
	#endif
	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;
	#ifdef USE_IRIDESCENCE
		computeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );
	#else
		computeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );
	#endif
	vec3 totalScattering = singleScattering + multiScattering;
	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );
	reflectedLight.indirectSpecular += radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;
	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {
	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
}`,zU=`
vec3 geometryPosition = - vViewPosition;
vec3 geometryNormal = normal;
vec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );
vec3 geometryClearcoatNormal = vec3( 0.0 );
#ifdef USE_CLEARCOAT
	geometryClearcoatNormal = clearcoatNormal;
#endif
#ifdef USE_IRIDESCENCE
	float dotNVi = saturate( dot( normal, geometryViewDir ) );
	if ( material.iridescenceThickness == 0.0 ) {
		material.iridescence = 0.0;
	} else {
		material.iridescence = saturate( material.iridescence );
	}
	if ( material.iridescence > 0.0 ) {
		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );
		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );
	}
#endif
IncidentLight directLight;
#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )
	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		pointLight = pointLights[ i ];
		getPointLightInfo( pointLight, geometryPosition, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowIntensity, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )
	SpotLight spotLight;
	vec4 spotColor;
	vec3 spotLightCoord;
	bool inSpotLightMap;
	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		spotLight = spotLights[ i ];
		getSpotLightInfo( spotLight, geometryPosition, directLight );
		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX
		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS
		#else
		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#endif
		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )
			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;
			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );
			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );
			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;
		#endif
		#undef SPOT_LIGHT_MAP_INDEX
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowIntensity, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )
	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		directionalLight = directionalLights[ i ];
		getDirectionalLightInfo( directionalLight, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowIntensity, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )
	RectAreaLight rectAreaLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {
		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if defined( RE_IndirectDiffuse )
	vec3 iblIrradiance = vec3( 0.0 );
	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );
	#if defined( USE_LIGHT_PROBES )
		irradiance += getLightProbeIrradiance( lightProbe, geometryNormal );
	#endif
	#if ( NUM_HEMI_LIGHTS > 0 )
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );
		}
		#pragma unroll_loop_end
	#endif
#endif
#if defined( RE_IndirectSpecular )
	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );
#endif`,kU=`#if defined( RE_IndirectDiffuse )
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
		irradiance += lightMapIrradiance;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )
		iblIrradiance += getIBLIrradiance( geometryNormal );
	#endif
#endif
#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )
	#ifdef USE_ANISOTROPY
		radiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );
	#else
		radiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );
	#endif
	#ifdef USE_CLEARCOAT
		clearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );
	#endif
#endif`,VU=`#if defined( RE_IndirectDiffuse )
	RE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif
#if defined( RE_IndirectSpecular )
	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif`,HU=`#if defined( USE_LOGDEPTHBUF )
	gl_FragDepth = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;
#endif`,GU=`#if defined( USE_LOGDEPTHBUF )
	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,WU=`#ifdef USE_LOGDEPTHBUF
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,XU=`#ifdef USE_LOGDEPTHBUF
	vFragDepth = 1.0 + gl_Position.w;
	vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );
#endif`,qU=`#ifdef USE_MAP
	vec4 sampledDiffuseColor = texture2D( map, vMapUv );
	#ifdef DECODE_VIDEO_TEXTURE
		sampledDiffuseColor = sRGBTransferEOTF( sampledDiffuseColor );
	#endif
	diffuseColor *= sampledDiffuseColor;
#endif`,YU=`#ifdef USE_MAP
	uniform sampler2D map;
#endif`,ZU=`#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	#if defined( USE_POINTS_UV )
		vec2 uv = vUv;
	#else
		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;
	#endif
#endif
#ifdef USE_MAP
	diffuseColor *= texture2D( map, uv );
#endif
#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, uv ).g;
#endif`,$U=`#if defined( USE_POINTS_UV )
	varying vec2 vUv;
#else
	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
		uniform mat3 uvTransform;
	#endif
#endif
#ifdef USE_MAP
	uniform sampler2D map;
#endif
#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,KU=`float metalnessFactor = metalness;
#ifdef USE_METALNESSMAP
	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );
	metalnessFactor *= texelMetalness.b;
#endif`,JU=`#ifdef USE_METALNESSMAP
	uniform sampler2D metalnessMap;
#endif`,jU=`#ifdef USE_INSTANCING_MORPH
	float morphTargetInfluences[ MORPHTARGETS_COUNT ];
	float morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		morphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;
	}
#endif`,QU=`#if defined( USE_MORPHCOLORS )
	vColor *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		#if defined( USE_COLOR_ALPHA )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];
		#elif defined( USE_COLOR )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];
		#endif
	}
#endif`,e3=`#ifdef USE_MORPHNORMALS
	objectNormal *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];
	}
#endif`,t3=`#ifdef USE_MORPHTARGETS
	#ifndef USE_INSTANCING_MORPH
		uniform float morphTargetBaseInfluence;
		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];
	#endif
	uniform sampler2DArray morphTargetsTexture;
	uniform ivec2 morphTargetsTextureSize;
	vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {
		int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;
		int y = texelIndex / morphTargetsTextureSize.x;
		int x = texelIndex - y * morphTargetsTextureSize.x;
		ivec3 morphUV = ivec3( x, y, morphTargetIndex );
		return texelFetch( morphTargetsTexture, morphUV, 0 );
	}
#endif`,n3=`#ifdef USE_MORPHTARGETS
	transformed *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];
	}
#endif`,i3=`float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;
#ifdef FLAT_SHADED
	vec3 fdx = dFdx( vViewPosition );
	vec3 fdy = dFdy( vViewPosition );
	vec3 normal = normalize( cross( fdx, fdy ) );
#else
	vec3 normal = normalize( vNormal );
	#ifdef DOUBLE_SIDED
		normal *= faceDirection;
	#endif
#endif
#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )
	#ifdef USE_TANGENT
		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn = getTangentFrame( - vViewPosition, normal,
		#if defined( USE_NORMALMAP )
			vNormalMapUv
		#elif defined( USE_CLEARCOAT_NORMALMAP )
			vClearcoatNormalMapUv
		#else
			vUv
		#endif
		);
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn[0] *= faceDirection;
		tbn[1] *= faceDirection;
	#endif
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	#ifdef USE_TANGENT
		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn2[0] *= faceDirection;
		tbn2[1] *= faceDirection;
	#endif
#endif
vec3 nonPerturbedNormal = normal;`,r3=`#ifdef USE_NORMALMAP_OBJECTSPACE
	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	#ifdef FLIP_SIDED
		normal = - normal;
	#endif
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	normal = normalize( normalMatrix * normal );
#elif defined( USE_NORMALMAP_TANGENTSPACE )
	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;
	normal = normalize( tbn * mapN );
#elif defined( USE_BUMPMAP )
	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );
#endif`,s3=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,a3=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,o3=`#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif`,l3=`#ifdef USE_NORMALMAP
	uniform sampler2D normalMap;
	uniform vec2 normalScale;
#endif
#ifdef USE_NORMALMAP_OBJECTSPACE
	uniform mat3 normalMatrix;
#endif
#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )
	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {
		vec3 q0 = dFdx( eye_pos.xyz );
		vec3 q1 = dFdy( eye_pos.xyz );
		vec2 st0 = dFdx( uv.st );
		vec2 st1 = dFdy( uv.st );
		vec3 N = surf_norm;
		vec3 q1perp = cross( q1, N );
		vec3 q0perp = cross( N, q0 );
		vec3 T = q1perp * st0.x + q0perp * st1.x;
		vec3 B = q1perp * st0.y + q0perp * st1.y;
		float det = max( dot( T, T ), dot( B, B ) );
		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );
		return mat3( T * scale, B * scale, N );
	}
#endif`,c3=`#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal = nonPerturbedNormal;
#endif`,h3=`#ifdef USE_CLEARCOAT_NORMALMAP
	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;
	clearcoatNormal = normalize( tbn2 * clearcoatMapN );
#endif`,u3=`#ifdef USE_CLEARCOATMAP
	uniform sampler2D clearcoatMap;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform sampler2D clearcoatRoughnessMap;
#endif`,f3=`#ifdef USE_IRIDESCENCEMAP
	uniform sampler2D iridescenceMap;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform sampler2D iridescenceThicknessMap;
#endif`,d3=`#ifdef OPAQUE
diffuseColor.a = 1.0;
#endif
#ifdef USE_TRANSMISSION
diffuseColor.a *= material.transmissionAlpha;
#endif
gl_FragColor = vec4( outgoingLight, diffuseColor.a );`,p3=`vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}
vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}
const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;const float ShiftRight8 = 1. / 256.;
const float Inv255 = 1. / 255.;
const vec4 PackFactors = vec4( 1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0 );
const vec2 UnpackFactors2 = vec2( UnpackDownscale, 1.0 / PackFactors.g );
const vec3 UnpackFactors3 = vec3( UnpackDownscale / PackFactors.rg, 1.0 / PackFactors.b );
const vec4 UnpackFactors4 = vec4( UnpackDownscale / PackFactors.rgb, 1.0 / PackFactors.a );
vec4 packDepthToRGBA( const in float v ) {
	if( v <= 0.0 )
		return vec4( 0., 0., 0., 0. );
	if( v >= 1.0 )
		return vec4( 1., 1., 1., 1. );
	float vuf;
	float af = modf( v * PackFactors.a, vuf );
	float bf = modf( vuf * ShiftRight8, vuf );
	float gf = modf( vuf * ShiftRight8, vuf );
	return vec4( vuf * Inv255, gf * PackUpscale, bf * PackUpscale, af );
}
vec3 packDepthToRGB( const in float v ) {
	if( v <= 0.0 )
		return vec3( 0., 0., 0. );
	if( v >= 1.0 )
		return vec3( 1., 1., 1. );
	float vuf;
	float bf = modf( v * PackFactors.b, vuf );
	float gf = modf( vuf * ShiftRight8, vuf );
	return vec3( vuf * Inv255, gf * PackUpscale, bf );
}
vec2 packDepthToRG( const in float v ) {
	if( v <= 0.0 )
		return vec2( 0., 0. );
	if( v >= 1.0 )
		return vec2( 1., 1. );
	float vuf;
	float gf = modf( v * 256., vuf );
	return vec2( vuf * Inv255, gf );
}
float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors4 );
}
float unpackRGBToDepth( const in vec3 v ) {
	return dot( v, UnpackFactors3 );
}
float unpackRGToDepth( const in vec2 v ) {
	return v.r * UnpackFactors2.r + v.g * UnpackFactors2.g;
}
vec4 pack2HalfToRGBA( const in vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );
}
vec2 unpackRGBATo2Half( const in vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}
float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	return ( viewZ + near ) / ( near - far );
}
float orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return depth * ( near - far ) - near;
}
float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );
}
float perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return ( near * far ) / ( ( far - near ) * depth - far );
}`,m3=`#ifdef PREMULTIPLIED_ALPHA
	gl_FragColor.rgb *= gl_FragColor.a;
#endif`,_3=`vec4 mvPosition = vec4( transformed, 1.0 );
#ifdef USE_BATCHING
	mvPosition = batchingMatrix * mvPosition;
#endif
#ifdef USE_INSTANCING
	mvPosition = instanceMatrix * mvPosition;
#endif
mvPosition = modelViewMatrix * mvPosition;
gl_Position = projectionMatrix * mvPosition;`,g3=`#ifdef DITHERING
	gl_FragColor.rgb = dithering( gl_FragColor.rgb );
#endif`,x3=`#ifdef DITHERING
	vec3 dithering( vec3 color ) {
		float grid_position = rand( gl_FragCoord.xy );
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
		return color + dither_shift_RGB;
	}
#endif`,v3=`float roughnessFactor = roughness;
#ifdef USE_ROUGHNESSMAP
	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );
	roughnessFactor *= texelRoughness.g;
#endif`,y3=`#ifdef USE_ROUGHNESSMAP
	uniform sampler2D roughnessMap;
#endif`,M3=`#if NUM_SPOT_LIGHT_COORDS > 0
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#if NUM_SPOT_LIGHT_MAPS > 0
	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {
		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );
	}
	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {
		return unpackRGBATo2Half( texture2D( shadow, uv ) );
	}
	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){
		float occlusion = 1.0;
		vec2 distribution = texture2DDistribution( shadow, uv );
		float hard_shadow = step( compare , distribution.x );
		if (hard_shadow != 1.0 ) {
			float distance = compare - distribution.x ;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );
		}
		return occlusion;
	}
	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord ) {
		float shadow = 1.0;
		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;
		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;
		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;
		if ( frustumTest ) {
		#if defined( SHADOWMAP_TYPE_PCF )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;
			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );
		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;
			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;
			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );
		#elif defined( SHADOWMAP_TYPE_VSM )
			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );
		#else
			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );
		#endif
		}
		return mix( 1.0, shadow, shadowIntensity );
	}
	vec2 cubeToUV( vec3 v, float texelSizeY ) {
		vec3 absV = abs( v );
		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );
		vec2 planar = v.xy;
		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;
		if ( absV.z >= almostOne ) {
			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;
		} else if ( absV.x >= almostOne ) {
			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;
		} else if ( absV.y >= almostOne ) {
			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;
		}
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );
	}
	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {
		float shadow = 1.0;
		vec3 lightToPosition = shadowCoord.xyz;
		
		float lightToPositionLength = length( lightToPosition );
		if ( lightToPositionLength - shadowCameraFar <= 0.0 && lightToPositionLength - shadowCameraNear >= 0.0 ) {
			float dp = ( lightToPositionLength - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );			dp += shadowBias;
			vec3 bd3D = normalize( lightToPosition );
			vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );
			#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )
				vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;
				shadow = (
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
				) * ( 1.0 / 9.0 );
			#else
				shadow = texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );
			#endif
		}
		return mix( 1.0, shadow, shadowIntensity );
	}
#endif`,S3=`#if NUM_SPOT_LIGHT_COORDS > 0
	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
#endif`,b3=`#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )
	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
	vec4 shadowWorldPosition;
#endif
#if defined( USE_SHADOWMAP )
	#if NUM_DIR_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
#endif
#if NUM_SPOT_LIGHT_COORDS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {
		shadowWorldPosition = worldPosition;
		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;
		#endif
		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
#endif`,E3=`float getShadowMask() {
	float shadow = 1.0;
	#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowIntensity, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowIntensity, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowIntensity, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#endif
	return shadow;
}`,w3=`#ifdef USE_SKINNING
	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );
#endif`,T3=`#ifdef USE_SKINNING
	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;
	uniform highp sampler2D boneTexture;
	mat4 getBoneMatrix( const in float i ) {
		int size = textureSize( boneTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
#endif`,A3=`#ifdef USE_SKINNING
	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;
	transformed = ( bindMatrixInverse * skinned ).xyz;
#endif`,R3=`#ifdef USE_SKINNING
	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;
	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;
	#ifdef USE_TANGENT
		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#endif
#endif`,C3=`float specularStrength;
#ifdef USE_SPECULARMAP
	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );
	specularStrength = texelSpecular.r;
#else
	specularStrength = 1.0;
#endif`,P3=`#ifdef USE_SPECULARMAP
	uniform sampler2D specularMap;
#endif`,I3=`#if defined( TONE_MAPPING )
	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );
#endif`,D3=`#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
uniform float toneMappingExposure;
vec3 LinearToneMapping( vec3 color ) {
	return saturate( toneMappingExposure * color );
}
vec3 ReinhardToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );
}
vec3 CineonToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );
}
vec3 RRTAndODTFit( vec3 v ) {
	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;
}
vec3 ACESFilmicToneMapping( vec3 color ) {
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);
	const mat3 ACESOutputMat = mat3(
		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,  1.07602 )
	);
	color *= toneMappingExposure / 0.6;
	color = ACESInputMat * color;
	color = RRTAndODTFit( color );
	color = ACESOutputMat * color;
	return saturate( color );
}
const mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(
	vec3( 1.6605, - 0.1246, - 0.0182 ),
	vec3( - 0.5876, 1.1329, - 0.1006 ),
	vec3( - 0.0728, - 0.0083, 1.1187 )
);
const mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(
	vec3( 0.6274, 0.0691, 0.0164 ),
	vec3( 0.3293, 0.9195, 0.0880 ),
	vec3( 0.0433, 0.0113, 0.8956 )
);
vec3 agxDefaultContrastApprox( vec3 x ) {
	vec3 x2 = x * x;
	vec3 x4 = x2 * x2;
	return + 15.5 * x4 * x2
		- 40.14 * x4 * x
		+ 31.96 * x4
		- 6.868 * x2 * x
		+ 0.4298 * x2
		+ 0.1191 * x
		- 0.00232;
}
vec3 AgXToneMapping( vec3 color ) {
	const mat3 AgXInsetMatrix = mat3(
		vec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),
		vec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),
		vec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )
	);
	const mat3 AgXOutsetMatrix = mat3(
		vec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),
		vec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),
		vec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )
	);
	const float AgxMinEv = - 12.47393;	const float AgxMaxEv = 4.026069;
	color *= toneMappingExposure;
	color = LINEAR_SRGB_TO_LINEAR_REC2020 * color;
	color = AgXInsetMatrix * color;
	color = max( color, 1e-10 );	color = log2( color );
	color = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );
	color = clamp( color, 0.0, 1.0 );
	color = agxDefaultContrastApprox( color );
	color = AgXOutsetMatrix * color;
	color = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );
	color = LINEAR_REC2020_TO_LINEAR_SRGB * color;
	color = clamp( color, 0.0, 1.0 );
	return color;
}
vec3 NeutralToneMapping( vec3 color ) {
	const float StartCompression = 0.8 - 0.04;
	const float Desaturation = 0.15;
	color *= toneMappingExposure;
	float x = min( color.r, min( color.g, color.b ) );
	float offset = x < 0.08 ? x - 6.25 * x * x : 0.04;
	color -= offset;
	float peak = max( color.r, max( color.g, color.b ) );
	if ( peak < StartCompression ) return color;
	float d = 1. - StartCompression;
	float newPeak = 1. - d * d / ( peak + d - StartCompression );
	color *= newPeak / peak;
	float g = 1. - 1. / ( Desaturation * ( peak - newPeak ) + 1. );
	return mix( color, vec3( newPeak ), g );
}
vec3 CustomToneMapping( vec3 color ) { return color; }`,L3=`#ifdef USE_TRANSMISSION
	material.transmission = transmission;
	material.transmissionAlpha = 1.0;
	material.thickness = thickness;
	material.attenuationDistance = attenuationDistance;
	material.attenuationColor = attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;
	#endif
	#ifdef USE_THICKNESSMAP
		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;
	#endif
	vec3 pos = vWorldPosition;
	vec3 v = normalize( cameraPosition - pos );
	vec3 n = inverseTransformDirection( normal, viewMatrix );
	vec4 transmitted = getIBLVolumeRefraction(
		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,
		pos, modelMatrix, viewMatrix, projectionMatrix, material.dispersion, material.ior, material.thickness,
		material.attenuationColor, material.attenuationDistance );
	material.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );
	totalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );
#endif`,U3=`#ifdef USE_TRANSMISSION
	uniform float transmission;
	uniform float thickness;
	uniform float attenuationDistance;
	uniform vec3 attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		uniform sampler2D transmissionMap;
	#endif
	#ifdef USE_THICKNESSMAP
		uniform sampler2D thicknessMap;
	#endif
	uniform vec2 transmissionSamplerSize;
	uniform sampler2D transmissionSamplerMap;
	uniform mat4 modelMatrix;
	uniform mat4 projectionMatrix;
	varying vec3 vWorldPosition;
	float w0( float a ) {
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );
	}
	float w1( float a ) {
		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );
	}
	float w2( float a ){
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );
	}
	float w3( float a ) {
		return ( 1.0 / 6.0 ) * ( a * a * a );
	}
	float g0( float a ) {
		return w0( a ) + w1( a );
	}
	float g1( float a ) {
		return w2( a ) + w3( a );
	}
	float h0( float a ) {
		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );
	}
	float h1( float a ) {
		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );
	}
	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {
		uv = uv * texelSize.zw + 0.5;
		vec2 iuv = floor( uv );
		vec2 fuv = fract( uv );
		float g0x = g0( fuv.x );
		float g1x = g1( fuv.x );
		float h0x = h0( fuv.x );
		float h1x = h1( fuv.x );
		float h0y = h0( fuv.y );
		float h1y = h1( fuv.y );
		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +
			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );
	}
	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {
		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );
		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );
		vec2 fLodSizeInv = 1.0 / fLodSize;
		vec2 cLodSizeInv = 1.0 / cLodSize;
		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );
		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );
		return mix( fSample, cSample, fract( lod ) );
	}
	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {
		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );
		vec3 modelScale;
		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );
		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );
		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );
		return normalize( refractionVector ) * thickness * modelScale;
	}
	float applyIorToRoughness( const in float roughness, const in float ior ) {
		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );
	}
	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {
		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );
	}
	vec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {
		if ( isinf( attenuationDistance ) ) {
			return vec3( 1.0 );
		} else {
			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;
			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance;
		}
	}
	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,
		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,
		const in mat4 viewMatrix, const in mat4 projMatrix, const in float dispersion, const in float ior, const in float thickness,
		const in vec3 attenuationColor, const in float attenuationDistance ) {
		vec4 transmittedLight;
		vec3 transmittance;
		#ifdef USE_DISPERSION
			float halfSpread = ( ior - 1.0 ) * 0.025 * dispersion;
			vec3 iors = vec3( ior - halfSpread, ior, ior + halfSpread );
			for ( int i = 0; i < 3; i ++ ) {
				vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, iors[ i ], modelMatrix );
				vec3 refractedRayExit = position + transmissionRay;
				vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
				vec2 refractionCoords = ndcPos.xy / ndcPos.w;
				refractionCoords += 1.0;
				refractionCoords /= 2.0;
				vec4 transmissionSample = getTransmissionSample( refractionCoords, roughness, iors[ i ] );
				transmittedLight[ i ] = transmissionSample[ i ];
				transmittedLight.a += transmissionSample.a;
				transmittance[ i ] = diffuseColor[ i ] * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance )[ i ];
			}
			transmittedLight.a /= 3.0;
		#else
			vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
			vec3 refractedRayExit = position + transmissionRay;
			vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
			vec2 refractionCoords = ndcPos.xy / ndcPos.w;
			refractionCoords += 1.0;
			refractionCoords /= 2.0;
			transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );
			transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );
		#endif
		vec3 attenuatedColor = transmittance * transmittedLight.rgb;
		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );
		float transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;
		return vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );
	}
#endif`,N3=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_SPECULARMAP
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`,F3=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	uniform mat3 mapTransform;
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	uniform mat3 alphaMapTransform;
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	uniform mat3 lightMapTransform;
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	uniform mat3 aoMapTransform;
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	uniform mat3 bumpMapTransform;
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	uniform mat3 normalMapTransform;
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_DISPLACEMENTMAP
	uniform mat3 displacementMapTransform;
	varying vec2 vDisplacementMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	uniform mat3 emissiveMapTransform;
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	uniform mat3 metalnessMapTransform;
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	uniform mat3 roughnessMapTransform;
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	uniform mat3 anisotropyMapTransform;
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	uniform mat3 clearcoatMapTransform;
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform mat3 clearcoatNormalMapTransform;
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform mat3 clearcoatRoughnessMapTransform;
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	uniform mat3 sheenColorMapTransform;
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	uniform mat3 sheenRoughnessMapTransform;
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	uniform mat3 iridescenceMapTransform;
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform mat3 iridescenceThicknessMapTransform;
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SPECULARMAP
	uniform mat3 specularMapTransform;
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	uniform mat3 specularColorMapTransform;
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	uniform mat3 specularIntensityMapTransform;
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`,O3=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	vUv = vec3( uv, 1 ).xy;
#endif
#ifdef USE_MAP
	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ALPHAMAP
	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_LIGHTMAP
	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_AOMAP
	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_BUMPMAP
	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_NORMALMAP
	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_DISPLACEMENTMAP
	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_EMISSIVEMAP
	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_METALNESSMAP
	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ROUGHNESSMAP
	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ANISOTROPYMAP
	vAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOATMAP
	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCEMAP
	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_COLORMAP
	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULARMAP
	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_COLORMAP
	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_TRANSMISSIONMAP
	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_THICKNESSMAP
	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;
#endif`,B3=`#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0
	vec4 worldPosition = vec4( transformed, 1.0 );
	#ifdef USE_BATCHING
		worldPosition = batchingMatrix * worldPosition;
	#endif
	#ifdef USE_INSTANCING
		worldPosition = instanceMatrix * worldPosition;
	#endif
	worldPosition = modelMatrix * worldPosition;
#endif`;const z3=`varying vec2 vUv;
uniform mat3 uvTransform;
void main() {
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	gl_Position = vec4( position.xy, 1.0, 1.0 );
}`,k3=`uniform sampler2D t2D;
uniform float backgroundIntensity;
varying vec2 vUv;
void main() {
	vec4 texColor = texture2D( t2D, vUv );
	#ifdef DECODE_VIDEO_TEXTURE
		texColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,V3=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,H3=`#ifdef ENVMAP_TYPE_CUBE
	uniform samplerCube envMap;
#elif defined( ENVMAP_TYPE_CUBE_UV )
	uniform sampler2D envMap;
#endif
uniform float flipEnvMap;
uniform float backgroundBlurriness;
uniform float backgroundIntensity;
uniform mat3 backgroundRotation;
varying vec3 vWorldDirection;
#include <cube_uv_reflection_fragment>
void main() {
	#ifdef ENVMAP_TYPE_CUBE
		vec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );
	#elif defined( ENVMAP_TYPE_CUBE_UV )
		vec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );
	#else
		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,G3=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,W3=`uniform samplerCube tCube;
uniform float tFlip;
uniform float opacity;
varying vec3 vWorldDirection;
void main() {
	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );
	gl_FragColor = texColor;
	gl_FragColor.a *= opacity;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,X3=`#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
varying vec2 vHighPrecisionZW;
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vHighPrecisionZW = gl_Position.zw;
}`,q3=`#if DEPTH_PACKING == 3200
	uniform float opacity;
#endif
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
varying vec2 vHighPrecisionZW;
void main() {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#if DEPTH_PACKING == 3200
		diffuseColor.a = opacity;
	#endif
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <logdepthbuf_fragment>
	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;
	#if DEPTH_PACKING == 3200
		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );
	#elif DEPTH_PACKING == 3201
		gl_FragColor = packDepthToRGBA( fragCoordZ );
	#elif DEPTH_PACKING == 3202
		gl_FragColor = vec4( packDepthToRGB( fragCoordZ ), 1.0 );
	#elif DEPTH_PACKING == 3203
		gl_FragColor = vec4( packDepthToRG( fragCoordZ ), 0.0, 1.0 );
	#endif
}`,Y3=`#define DISTANCE
varying vec3 vWorldPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	vWorldPosition = worldPosition.xyz;
}`,Z3=`#define DISTANCE
uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <clipping_planes_pars_fragment>
void main () {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist );
	gl_FragColor = packDepthToRGBA( dist );
}`,$3=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
}`,K3=`uniform sampler2D tEquirect;
varying vec3 vWorldDirection;
#include <common>
void main() {
	vec3 direction = normalize( vWorldDirection );
	vec2 sampleUV = equirectUv( direction );
	gl_FragColor = texture2D( tEquirect, sampleUV );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,J3=`uniform float scale;
attribute float lineDistance;
varying float vLineDistance;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	vLineDistance = scale * lineDistance;
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,j3=`uniform vec3 diffuse;
uniform float opacity;
uniform float dashSize;
uniform float totalSize;
varying float vLineDistance;
#include <common>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	if ( mod( vLineDistance, totalSize ) > dashSize ) {
		discard;
	}
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,Q3=`#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinbase_vertex>
		#include <skinnormal_vertex>
		#include <defaultnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>
}`,eN=`uniform vec3 diffuse;
uniform float opacity;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;
	#else
		reflectedLight.indirectDiffuse += vec3( 1.0 );
	#endif
	#include <aomap_fragment>
	reflectedLight.indirectDiffuse *= diffuseColor.rgb;
	vec3 outgoingLight = reflectedLight.indirectDiffuse;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,tN=`#define LAMBERT
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,nN=`#define LAMBERT
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_lambert_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_lambert_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,iN=`#define MATCAP
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
	vViewPosition = - mvPosition.xyz;
}`,rN=`#define MATCAP
uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;
varying vec3 vViewPosition;
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;
	#ifdef USE_MATCAP
		vec4 matcapColor = texture2D( matcap, uv );
	#else
		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );
	#endif
	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,sN=`#define NORMAL
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	vViewPosition = - mvPosition.xyz;
#endif
}`,aN=`#define NORMAL
uniform float opacity;
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <packing>
#include <uv_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	gl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );
	#ifdef OPAQUE
		gl_FragColor.a = 1.0;
	#endif
}`,oN=`#define PHONG
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,lN=`#define PHONG
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,cN=`#define STANDARD
varying vec3 vViewPosition;
#ifdef USE_TRANSMISSION
	varying vec3 vWorldPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
#ifdef USE_TRANSMISSION
	vWorldPosition = worldPosition.xyz;
#endif
}`,hN=`#define STANDARD
#ifdef PHYSICAL
	#define IOR
	#define USE_SPECULAR
#endif
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;
#ifdef IOR
	uniform float ior;
#endif
#ifdef USE_SPECULAR
	uniform float specularIntensity;
	uniform vec3 specularColor;
	#ifdef USE_SPECULAR_COLORMAP
		uniform sampler2D specularColorMap;
	#endif
	#ifdef USE_SPECULAR_INTENSITYMAP
		uniform sampler2D specularIntensityMap;
	#endif
#endif
#ifdef USE_CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif
#ifdef USE_DISPERSION
	uniform float dispersion;
#endif
#ifdef USE_IRIDESCENCE
	uniform float iridescence;
	uniform float iridescenceIOR;
	uniform float iridescenceThicknessMinimum;
	uniform float iridescenceThicknessMaximum;
#endif
#ifdef USE_SHEEN
	uniform vec3 sheenColor;
	uniform float sheenRoughness;
	#ifdef USE_SHEEN_COLORMAP
		uniform sampler2D sheenColorMap;
	#endif
	#ifdef USE_SHEEN_ROUGHNESSMAP
		uniform sampler2D sheenRoughnessMap;
	#endif
#endif
#ifdef USE_ANISOTROPY
	uniform vec2 anisotropyVector;
	#ifdef USE_ANISOTROPYMAP
		uniform sampler2D anisotropyMap;
	#endif
#endif
varying vec3 vViewPosition;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <iridescence_fragment>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_physical_pars_fragment>
#include <transmission_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <iridescence_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;
	#include <transmission_fragment>
	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;
	#ifdef USE_SHEEN
		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );
		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;
	#endif
	#ifdef USE_CLEARCOAT
		float dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );
		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );
		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;
	#endif
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,uN=`#define TOON
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,fN=`#define TOON
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,dN=`uniform float size;
uniform float scale;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
#ifdef USE_POINTS_UV
	varying vec2 vUv;
	uniform mat3 uvTransform;
#endif
void main() {
	#ifdef USE_POINTS_UV
		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	#endif
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	gl_PointSize = size;
	#ifdef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );
	#endif
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>
}`,pN=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,mN=`#include <common>
#include <batching_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <shadowmap_pars_vertex>
void main() {
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,_N=`uniform vec3 color;
uniform float opacity;
#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <logdepthbuf_pars_fragment>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
void main() {
	#include <logdepthbuf_fragment>
	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`,gN=`uniform float rotation;
uniform vec2 center;
#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	vec4 mvPosition = modelViewMatrix[ 3 ];
	vec2 scale = vec2( length( modelMatrix[ 0 ].xyz ), length( modelMatrix[ 1 ].xyz ) );
	#ifndef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) scale *= - mvPosition.z;
	#endif
	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;
	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
	mvPosition.xy += rotatedPosition;
	gl_Position = projectionMatrix * mvPosition;
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,xN=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`,Ln={alphahash_fragment:kL,alphahash_pars_fragment:VL,alphamap_fragment:HL,alphamap_pars_fragment:GL,alphatest_fragment:WL,alphatest_pars_fragment:XL,aomap_fragment:qL,aomap_pars_fragment:YL,batching_pars_vertex:ZL,batching_vertex:$L,begin_vertex:KL,beginnormal_vertex:JL,bsdfs:jL,iridescence_fragment:QL,bumpmap_pars_fragment:eU,clipping_planes_fragment:tU,clipping_planes_pars_fragment:nU,clipping_planes_pars_vertex:iU,clipping_planes_vertex:rU,color_fragment:sU,color_pars_fragment:aU,color_pars_vertex:oU,color_vertex:lU,common:cU,cube_uv_reflection_fragment:hU,defaultnormal_vertex:uU,displacementmap_pars_vertex:fU,displacementmap_vertex:dU,emissivemap_fragment:pU,emissivemap_pars_fragment:mU,colorspace_fragment:_U,colorspace_pars_fragment:gU,envmap_fragment:xU,envmap_common_pars_fragment:vU,envmap_pars_fragment:yU,envmap_pars_vertex:MU,envmap_physical_pars_fragment:DU,envmap_vertex:SU,fog_vertex:bU,fog_pars_vertex:EU,fog_fragment:wU,fog_pars_fragment:TU,gradientmap_pars_fragment:AU,lightmap_pars_fragment:RU,lights_lambert_fragment:CU,lights_lambert_pars_fragment:PU,lights_pars_begin:IU,lights_toon_fragment:LU,lights_toon_pars_fragment:UU,lights_phong_fragment:NU,lights_phong_pars_fragment:FU,lights_physical_fragment:OU,lights_physical_pars_fragment:BU,lights_fragment_begin:zU,lights_fragment_maps:kU,lights_fragment_end:VU,logdepthbuf_fragment:HU,logdepthbuf_pars_fragment:GU,logdepthbuf_pars_vertex:WU,logdepthbuf_vertex:XU,map_fragment:qU,map_pars_fragment:YU,map_particle_fragment:ZU,map_particle_pars_fragment:$U,metalnessmap_fragment:KU,metalnessmap_pars_fragment:JU,morphinstance_vertex:jU,morphcolor_vertex:QU,morphnormal_vertex:e3,morphtarget_pars_vertex:t3,morphtarget_vertex:n3,normal_fragment_begin:i3,normal_fragment_maps:r3,normal_pars_fragment:s3,normal_pars_vertex:a3,normal_vertex:o3,normalmap_pars_fragment:l3,clearcoat_normal_fragment_begin:c3,clearcoat_normal_fragment_maps:h3,clearcoat_pars_fragment:u3,iridescence_pars_fragment:f3,opaque_fragment:d3,packing:p3,premultiplied_alpha_fragment:m3,project_vertex:_3,dithering_fragment:g3,dithering_pars_fragment:x3,roughnessmap_fragment:v3,roughnessmap_pars_fragment:y3,shadowmap_pars_fragment:M3,shadowmap_pars_vertex:S3,shadowmap_vertex:b3,shadowmask_pars_fragment:E3,skinbase_vertex:w3,skinning_pars_vertex:T3,skinning_vertex:A3,skinnormal_vertex:R3,specularmap_fragment:C3,specularmap_pars_fragment:P3,tonemapping_fragment:I3,tonemapping_pars_fragment:D3,transmission_fragment:L3,transmission_pars_fragment:U3,uv_pars_fragment:N3,uv_pars_vertex:F3,uv_vertex:O3,worldpos_vertex:B3,background_vert:z3,background_frag:k3,backgroundCube_vert:V3,backgroundCube_frag:H3,cube_vert:G3,cube_frag:W3,depth_vert:X3,depth_frag:q3,distanceRGBA_vert:Y3,distanceRGBA_frag:Z3,equirect_vert:$3,equirect_frag:K3,linedashed_vert:J3,linedashed_frag:j3,meshbasic_vert:Q3,meshbasic_frag:eN,meshlambert_vert:tN,meshlambert_frag:nN,meshmatcap_vert:iN,meshmatcap_frag:rN,meshnormal_vert:sN,meshnormal_frag:aN,meshphong_vert:oN,meshphong_frag:lN,meshphysical_vert:cN,meshphysical_frag:hN,meshtoon_vert:uN,meshtoon_frag:fN,points_vert:dN,points_frag:pN,shadow_vert:mN,shadow_frag:_N,sprite_vert:gN,sprite_frag:xN},Mt={common:{diffuse:{value:new Qn(16777215)},opacity:{value:1},map:{value:null},mapTransform:{value:new nn},alphaMap:{value:null},alphaMapTransform:{value:new nn},alphaTest:{value:0}},specularmap:{specularMap:{value:null},specularMapTransform:{value:new nn}},envmap:{envMap:{value:null},envMapRotation:{value:new nn},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1},aoMapTransform:{value:new nn}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1},lightMapTransform:{value:new nn}},bumpmap:{bumpMap:{value:null},bumpMapTransform:{value:new nn},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalMapTransform:{value:new nn},normalScale:{value:new ln(1,1)}},displacementmap:{displacementMap:{value:null},displacementMapTransform:{value:new nn},displacementScale:{value:1},displacementBias:{value:0}},emissivemap:{emissiveMap:{value:null},emissiveMapTransform:{value:new nn}},metalnessmap:{metalnessMap:{value:null},metalnessMapTransform:{value:new nn}},roughnessmap:{roughnessMap:{value:null},roughnessMapTransform:{value:new nn}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new Qn(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotLightMap:{value:[]},spotShadowMap:{value:[]},spotLightMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new Qn(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaMapTransform:{value:new nn},alphaTest:{value:0},uvTransform:{value:new nn}},sprite:{diffuse:{value:new Qn(16777215)},opacity:{value:1},center:{value:new ln(.5,.5)},rotation:{value:0},map:{value:null},mapTransform:{value:new nn},alphaMap:{value:null},alphaMapTransform:{value:new nn},alphaTest:{value:0}}},sa={basic:{uniforms:Fr([Mt.common,Mt.specularmap,Mt.envmap,Mt.aomap,Mt.lightmap,Mt.fog]),vertexShader:Ln.meshbasic_vert,fragmentShader:Ln.meshbasic_frag},lambert:{uniforms:Fr([Mt.common,Mt.specularmap,Mt.envmap,Mt.aomap,Mt.lightmap,Mt.emissivemap,Mt.bumpmap,Mt.normalmap,Mt.displacementmap,Mt.fog,Mt.lights,{emissive:{value:new Qn(0)}}]),vertexShader:Ln.meshlambert_vert,fragmentShader:Ln.meshlambert_frag},phong:{uniforms:Fr([Mt.common,Mt.specularmap,Mt.envmap,Mt.aomap,Mt.lightmap,Mt.emissivemap,Mt.bumpmap,Mt.normalmap,Mt.displacementmap,Mt.fog,Mt.lights,{emissive:{value:new Qn(0)},specular:{value:new Qn(1118481)},shininess:{value:30}}]),vertexShader:Ln.meshphong_vert,fragmentShader:Ln.meshphong_frag},standard:{uniforms:Fr([Mt.common,Mt.envmap,Mt.aomap,Mt.lightmap,Mt.emissivemap,Mt.bumpmap,Mt.normalmap,Mt.displacementmap,Mt.roughnessmap,Mt.metalnessmap,Mt.fog,Mt.lights,{emissive:{value:new Qn(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:Ln.meshphysical_vert,fragmentShader:Ln.meshphysical_frag},toon:{uniforms:Fr([Mt.common,Mt.aomap,Mt.lightmap,Mt.emissivemap,Mt.bumpmap,Mt.normalmap,Mt.displacementmap,Mt.gradientmap,Mt.fog,Mt.lights,{emissive:{value:new Qn(0)}}]),vertexShader:Ln.meshtoon_vert,fragmentShader:Ln.meshtoon_frag},matcap:{uniforms:Fr([Mt.common,Mt.bumpmap,Mt.normalmap,Mt.displacementmap,Mt.fog,{matcap:{value:null}}]),vertexShader:Ln.meshmatcap_vert,fragmentShader:Ln.meshmatcap_frag},points:{uniforms:Fr([Mt.points,Mt.fog]),vertexShader:Ln.points_vert,fragmentShader:Ln.points_frag},dashed:{uniforms:Fr([Mt.common,Mt.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:Ln.linedashed_vert,fragmentShader:Ln.linedashed_frag},depth:{uniforms:Fr([Mt.common,Mt.displacementmap]),vertexShader:Ln.depth_vert,fragmentShader:Ln.depth_frag},normal:{uniforms:Fr([Mt.common,Mt.bumpmap,Mt.normalmap,Mt.displacementmap,{opacity:{value:1}}]),vertexShader:Ln.meshnormal_vert,fragmentShader:Ln.meshnormal_frag},sprite:{uniforms:Fr([Mt.sprite,Mt.fog]),vertexShader:Ln.sprite_vert,fragmentShader:Ln.sprite_frag},background:{uniforms:{uvTransform:{value:new nn},t2D:{value:null},backgroundIntensity:{value:1}},vertexShader:Ln.background_vert,fragmentShader:Ln.background_frag},backgroundCube:{uniforms:{envMap:{value:null},flipEnvMap:{value:-1},backgroundBlurriness:{value:0},backgroundIntensity:{value:1},backgroundRotation:{value:new nn}},vertexShader:Ln.backgroundCube_vert,fragmentShader:Ln.backgroundCube_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:Ln.cube_vert,fragmentShader:Ln.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:Ln.equirect_vert,fragmentShader:Ln.equirect_frag},distanceRGBA:{uniforms:Fr([Mt.common,Mt.displacementmap,{referencePosition:{value:new ue},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:Ln.distanceRGBA_vert,fragmentShader:Ln.distanceRGBA_frag},shadow:{uniforms:Fr([Mt.lights,Mt.fog,{color:{value:new Qn(0)},opacity:{value:1}}]),vertexShader:Ln.shadow_vert,fragmentShader:Ln.shadow_frag}};sa.physical={uniforms:Fr([sa.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatMapTransform:{value:new nn},clearcoatNormalMap:{value:null},clearcoatNormalMapTransform:{value:new nn},clearcoatNormalScale:{value:new ln(1,1)},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatRoughnessMapTransform:{value:new nn},dispersion:{value:0},iridescence:{value:0},iridescenceMap:{value:null},iridescenceMapTransform:{value:new nn},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},iridescenceThicknessMapTransform:{value:new nn},sheen:{value:0},sheenColor:{value:new Qn(0)},sheenColorMap:{value:null},sheenColorMapTransform:{value:new nn},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},sheenRoughnessMapTransform:{value:new nn},transmission:{value:0},transmissionMap:{value:null},transmissionMapTransform:{value:new nn},transmissionSamplerSize:{value:new ln},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},thicknessMapTransform:{value:new nn},attenuationDistance:{value:0},attenuationColor:{value:new Qn(0)},specularColor:{value:new Qn(1,1,1)},specularColorMap:{value:null},specularColorMapTransform:{value:new nn},specularIntensity:{value:1},specularIntensityMap:{value:null},specularIntensityMapTransform:{value:new nn},anisotropyVector:{value:new ln},anisotropyMap:{value:null},anisotropyMapTransform:{value:new nn}}]),vertexShader:Ln.meshphysical_vert,fragmentShader:Ln.meshphysical_frag};const gp={r:0,b:0,g:0},yl=new Xa,vN=new Ti;function yN(a,t,n,r,o,c,d){const p=new Qn(0);let v=c===!0?0:1,_,x,M=null,b=0,E=null;function U(k){let O=k.isScene===!0?k.background:null;return O&&O.isTexture&&(O=(k.backgroundBlurriness>0?n:t).get(O)),O}function L(k){let O=!1;const z=U(k);z===null?A(p,v):z&&z.isColor&&(A(z,1),O=!0);const Y=a.xr.getEnvironmentBlendMode();Y==="additive"?r.buffers.color.setClear(0,0,0,1,d):Y==="alpha-blend"&&r.buffers.color.setClear(0,0,0,0,d),(a.autoClear||O)&&(r.buffers.depth.setTest(!0),r.buffers.depth.setMask(!0),r.buffers.color.setMask(!0),a.clear(a.autoClearColor,a.autoClearDepth,a.autoClearStencil))}function P(k,O){const z=U(O);z&&(z.isCubeTexture||z.mapping===im)?(x===void 0&&(x=new As(new hf(1,1,1),new Lo({name:"BackgroundCubeMaterial",uniforms:xh(sa.backgroundCube.uniforms),vertexShader:sa.backgroundCube.vertexShader,fragmentShader:sa.backgroundCube.fragmentShader,side:$r,depthTest:!1,depthWrite:!1,fog:!1})),x.geometry.deleteAttribute("normal"),x.geometry.deleteAttribute("uv"),x.onBeforeRender=function(Y,W,te){this.matrixWorld.copyPosition(te.matrixWorld)},Object.defineProperty(x.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),o.update(x)),yl.copy(O.backgroundRotation),yl.x*=-1,yl.y*=-1,yl.z*=-1,z.isCubeTexture&&z.isRenderTargetTexture===!1&&(yl.y*=-1,yl.z*=-1),x.material.uniforms.envMap.value=z,x.material.uniforms.flipEnvMap.value=z.isCubeTexture&&z.isRenderTargetTexture===!1?-1:1,x.material.uniforms.backgroundBlurriness.value=O.backgroundBlurriness,x.material.uniforms.backgroundIntensity.value=O.backgroundIntensity,x.material.uniforms.backgroundRotation.value.setFromMatrix4(vN.makeRotationFromEuler(yl)),x.material.toneMapped=ni.getTransfer(z.colorSpace)!==pi,(M!==z||b!==z.version||E!==a.toneMapping)&&(x.material.needsUpdate=!0,M=z,b=z.version,E=a.toneMapping),x.layers.enableAll(),k.unshift(x,x.geometry,x.material,0,0,null)):z&&z.isTexture&&(_===void 0&&(_=new As(new rm(2,2),new Lo({name:"BackgroundMaterial",uniforms:xh(sa.background.uniforms),vertexShader:sa.background.vertexShader,fragmentShader:sa.background.fragmentShader,side:Do,depthTest:!1,depthWrite:!1,fog:!1})),_.geometry.deleteAttribute("normal"),Object.defineProperty(_.material,"map",{get:function(){return this.uniforms.t2D.value}}),o.update(_)),_.material.uniforms.t2D.value=z,_.material.uniforms.backgroundIntensity.value=O.backgroundIntensity,_.material.toneMapped=ni.getTransfer(z.colorSpace)!==pi,z.matrixAutoUpdate===!0&&z.updateMatrix(),_.material.uniforms.uvTransform.value.copy(z.matrix),(M!==z||b!==z.version||E!==a.toneMapping)&&(_.material.needsUpdate=!0,M=z,b=z.version,E=a.toneMapping),_.layers.enableAll(),k.unshift(_,_.geometry,_.material,0,0,null))}function A(k,O){k.getRGB(gp,IE(a)),r.buffers.color.setClear(gp.r,gp.g,gp.b,O,d)}function X(){x!==void 0&&(x.geometry.dispose(),x.material.dispose()),_!==void 0&&(_.geometry.dispose(),_.material.dispose())}return{getClearColor:function(){return p},setClearColor:function(k,O=1){p.set(k),v=O,A(p,v)},getClearAlpha:function(){return v},setClearAlpha:function(k){v=k,A(p,v)},render:L,addToRenderList:P,dispose:X}}function MN(a,t){const n=a.getParameter(a.MAX_VERTEX_ATTRIBS),r={},o=b(null);let c=o,d=!1;function p(B,ee,Ee,de,be){let Ae=!1;const Me=M(de,Ee,ee);c!==Me&&(c=Me,_(c.object)),Ae=E(B,de,Ee,be),Ae&&U(B,de,Ee,be),be!==null&&t.update(be,a.ELEMENT_ARRAY_BUFFER),(Ae||d)&&(d=!1,O(B,ee,Ee,de),be!==null&&a.bindBuffer(a.ELEMENT_ARRAY_BUFFER,t.get(be).buffer))}function v(){return a.createVertexArray()}function _(B){return a.bindVertexArray(B)}function x(B){return a.deleteVertexArray(B)}function M(B,ee,Ee){const de=Ee.wireframe===!0;let be=r[B.id];be===void 0&&(be={},r[B.id]=be);let Ae=be[ee.id];Ae===void 0&&(Ae={},be[ee.id]=Ae);let Me=Ae[de];return Me===void 0&&(Me=b(v()),Ae[de]=Me),Me}function b(B){const ee=[],Ee=[],de=[];for(let be=0;be<n;be++)ee[be]=0,Ee[be]=0,de[be]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:ee,enabledAttributes:Ee,attributeDivisors:de,object:B,attributes:{},index:null}}function E(B,ee,Ee,de){const be=c.attributes,Ae=ee.attributes;let Me=0;const me=Ee.getAttributes();for(const _e in me)if(me[_e].location>=0){const He=be[_e];let nt=Ae[_e];if(nt===void 0&&(_e==="instanceMatrix"&&B.instanceMatrix&&(nt=B.instanceMatrix),_e==="instanceColor"&&B.instanceColor&&(nt=B.instanceColor)),He===void 0||He.attribute!==nt||nt&&He.data!==nt.data)return!0;Me++}return c.attributesNum!==Me||c.index!==de}function U(B,ee,Ee,de){const be={},Ae=ee.attributes;let Me=0;const me=Ee.getAttributes();for(const _e in me)if(me[_e].location>=0){let He=Ae[_e];He===void 0&&(_e==="instanceMatrix"&&B.instanceMatrix&&(He=B.instanceMatrix),_e==="instanceColor"&&B.instanceColor&&(He=B.instanceColor));const nt={};nt.attribute=He,He&&He.data&&(nt.data=He.data),be[_e]=nt,Me++}c.attributes=be,c.attributesNum=Me,c.index=de}function L(){const B=c.newAttributes;for(let ee=0,Ee=B.length;ee<Ee;ee++)B[ee]=0}function P(B){A(B,0)}function A(B,ee){const Ee=c.newAttributes,de=c.enabledAttributes,be=c.attributeDivisors;Ee[B]=1,de[B]===0&&(a.enableVertexAttribArray(B),de[B]=1),be[B]!==ee&&(a.vertexAttribDivisor(B,ee),be[B]=ee)}function X(){const B=c.newAttributes,ee=c.enabledAttributes;for(let Ee=0,de=ee.length;Ee<de;Ee++)ee[Ee]!==B[Ee]&&(a.disableVertexAttribArray(Ee),ee[Ee]=0)}function k(B,ee,Ee,de,be,Ae,Me){Me===!0?a.vertexAttribIPointer(B,ee,Ee,be,Ae):a.vertexAttribPointer(B,ee,Ee,de,be,Ae)}function O(B,ee,Ee,de){L();const be=de.attributes,Ae=Ee.getAttributes(),Me=ee.defaultAttributeValues;for(const me in Ae){const _e=Ae[me];if(_e.location>=0){let Fe=be[me];if(Fe===void 0&&(me==="instanceMatrix"&&B.instanceMatrix&&(Fe=B.instanceMatrix),me==="instanceColor"&&B.instanceColor&&(Fe=B.instanceColor)),Fe!==void 0){const He=Fe.normalized,nt=Fe.itemSize,ut=t.get(Fe);if(ut===void 0)continue;const Yt=ut.buffer,Le=ut.type,et=ut.bytesPerElement,Pt=Le===a.INT||Le===a.UNSIGNED_INT||Fe.gpuType===sx;if(Fe.isInterleavedBufferAttribute){const lt=Fe.data,$t=lt.stride,sn=Fe.offset;if(lt.isInstancedInterleavedBuffer){for(let gn=0;gn<_e.locationSize;gn++)A(_e.location+gn,lt.meshPerAttribute);B.isInstancedMesh!==!0&&de._maxInstanceCount===void 0&&(de._maxInstanceCount=lt.meshPerAttribute*lt.count)}else for(let gn=0;gn<_e.locationSize;gn++)P(_e.location+gn);a.bindBuffer(a.ARRAY_BUFFER,Yt);for(let gn=0;gn<_e.locationSize;gn++)k(_e.location+gn,nt/_e.locationSize,Le,He,$t*et,(sn+nt/_e.locationSize*gn)*et,Pt)}else{if(Fe.isInstancedBufferAttribute){for(let lt=0;lt<_e.locationSize;lt++)A(_e.location+lt,Fe.meshPerAttribute);B.isInstancedMesh!==!0&&de._maxInstanceCount===void 0&&(de._maxInstanceCount=Fe.meshPerAttribute*Fe.count)}else for(let lt=0;lt<_e.locationSize;lt++)P(_e.location+lt);a.bindBuffer(a.ARRAY_BUFFER,Yt);for(let lt=0;lt<_e.locationSize;lt++)k(_e.location+lt,nt/_e.locationSize,Le,He,nt*et,nt/_e.locationSize*lt*et,Pt)}}else if(Me!==void 0){const He=Me[me];if(He!==void 0)switch(He.length){case 2:a.vertexAttrib2fv(_e.location,He);break;case 3:a.vertexAttrib3fv(_e.location,He);break;case 4:a.vertexAttrib4fv(_e.location,He);break;default:a.vertexAttrib1fv(_e.location,He)}}}}X()}function z(){te();for(const B in r){const ee=r[B];for(const Ee in ee){const de=ee[Ee];for(const be in de)x(de[be].object),delete de[be];delete ee[Ee]}delete r[B]}}function Y(B){if(r[B.id]===void 0)return;const ee=r[B.id];for(const Ee in ee){const de=ee[Ee];for(const be in de)x(de[be].object),delete de[be];delete ee[Ee]}delete r[B.id]}function W(B){for(const ee in r){const Ee=r[ee];if(Ee[B.id]===void 0)continue;const de=Ee[B.id];for(const be in de)x(de[be].object),delete de[be];delete Ee[B.id]}}function te(){N(),d=!0,c!==o&&(c=o,_(c.object))}function N(){o.geometry=null,o.program=null,o.wireframe=!1}return{setup:p,reset:te,resetDefaultState:N,dispose:z,releaseStatesOfGeometry:Y,releaseStatesOfProgram:W,initAttributes:L,enableAttribute:P,disableUnusedAttributes:X}}function SN(a,t,n){let r;function o(_){r=_}function c(_,x){a.drawArrays(r,_,x),n.update(x,r,1)}function d(_,x,M){M!==0&&(a.drawArraysInstanced(r,_,x,M),n.update(x,r,M))}function p(_,x,M){if(M===0)return;t.get("WEBGL_multi_draw").multiDrawArraysWEBGL(r,_,0,x,0,M);let E=0;for(let U=0;U<M;U++)E+=x[U];n.update(E,r,1)}function v(_,x,M,b){if(M===0)return;const E=t.get("WEBGL_multi_draw");if(E===null)for(let U=0;U<_.length;U++)d(_[U],x[U],b[U]);else{E.multiDrawArraysInstancedWEBGL(r,_,0,x,0,b,0,M);let U=0;for(let L=0;L<M;L++)U+=x[L]*b[L];n.update(U,r,1)}}this.setMode=o,this.render=c,this.renderInstances=d,this.renderMultiDraw=p,this.renderMultiDrawInstances=v}function bN(a,t,n,r){let o;function c(){if(o!==void 0)return o;if(t.has("EXT_texture_filter_anisotropic")===!0){const W=t.get("EXT_texture_filter_anisotropic");o=a.getParameter(W.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else o=0;return o}function d(W){return!(W!==Zs&&r.convert(W)!==a.getParameter(a.IMPLEMENTATION_COLOR_READ_FORMAT))}function p(W){const te=W===of&&(t.has("EXT_color_buffer_half_float")||t.has("EXT_color_buffer_float"));return!(W!==Wa&&r.convert(W)!==a.getParameter(a.IMPLEMENTATION_COLOR_READ_TYPE)&&W!==Va&&!te)}function v(W){if(W==="highp"){if(a.getShaderPrecisionFormat(a.VERTEX_SHADER,a.HIGH_FLOAT).precision>0&&a.getShaderPrecisionFormat(a.FRAGMENT_SHADER,a.HIGH_FLOAT).precision>0)return"highp";W="mediump"}return W==="mediump"&&a.getShaderPrecisionFormat(a.VERTEX_SHADER,a.MEDIUM_FLOAT).precision>0&&a.getShaderPrecisionFormat(a.FRAGMENT_SHADER,a.MEDIUM_FLOAT).precision>0?"mediump":"lowp"}let _=n.precision!==void 0?n.precision:"highp";const x=v(_);x!==_&&(console.warn("THREE.WebGLRenderer:",_,"not supported, using",x,"instead."),_=x);const M=n.logarithmicDepthBuffer===!0,b=n.reverseDepthBuffer===!0&&t.has("EXT_clip_control"),E=a.getParameter(a.MAX_TEXTURE_IMAGE_UNITS),U=a.getParameter(a.MAX_VERTEX_TEXTURE_IMAGE_UNITS),L=a.getParameter(a.MAX_TEXTURE_SIZE),P=a.getParameter(a.MAX_CUBE_MAP_TEXTURE_SIZE),A=a.getParameter(a.MAX_VERTEX_ATTRIBS),X=a.getParameter(a.MAX_VERTEX_UNIFORM_VECTORS),k=a.getParameter(a.MAX_VARYING_VECTORS),O=a.getParameter(a.MAX_FRAGMENT_UNIFORM_VECTORS),z=U>0,Y=a.getParameter(a.MAX_SAMPLES);return{isWebGL2:!0,getMaxAnisotropy:c,getMaxPrecision:v,textureFormatReadable:d,textureTypeReadable:p,precision:_,logarithmicDepthBuffer:M,reverseDepthBuffer:b,maxTextures:E,maxVertexTextures:U,maxTextureSize:L,maxCubemapSize:P,maxAttributes:A,maxVertexUniforms:X,maxVaryings:k,maxFragmentUniforms:O,vertexTextures:z,maxSamples:Y}}function EN(a){const t=this;let n=null,r=0,o=!1,c=!1;const d=new go,p=new nn,v={value:null,needsUpdate:!1};this.uniform=v,this.numPlanes=0,this.numIntersection=0,this.init=function(M,b){const E=M.length!==0||b||r!==0||o;return o=b,r=M.length,E},this.beginShadows=function(){c=!0,x(null)},this.endShadows=function(){c=!1},this.setGlobalState=function(M,b){n=x(M,b,0)},this.setState=function(M,b,E){const U=M.clippingPlanes,L=M.clipIntersection,P=M.clipShadows,A=a.get(M);if(!o||U===null||U.length===0||c&&!P)c?x(null):_();else{const X=c?0:r,k=X*4;let O=A.clippingState||null;v.value=O,O=x(U,b,k,E);for(let z=0;z!==k;++z)O[z]=n[z];A.clippingState=O,this.numIntersection=L?this.numPlanes:0,this.numPlanes+=X}};function _(){v.value!==n&&(v.value=n,v.needsUpdate=r>0),t.numPlanes=r,t.numIntersection=0}function x(M,b,E,U){const L=M!==null?M.length:0;let P=null;if(L!==0){if(P=v.value,U!==!0||P===null){const A=E+L*4,X=b.matrixWorldInverse;p.getNormalMatrix(X),(P===null||P.length<A)&&(P=new Float32Array(A));for(let k=0,O=E;k!==L;++k,O+=4)d.copy(M[k]).applyMatrix4(X,p),d.normal.toArray(P,O),P[O+3]=d.constant}v.value=P,v.needsUpdate=!0}return t.numPlanes=L,t.numIntersection=0,P}}function wN(a){let t=new WeakMap;function n(d,p){return p===e0?d.mapping=dh:p===t0&&(d.mapping=ph),d}function r(d){if(d&&d.isTexture){const p=d.mapping;if(p===e0||p===t0)if(t.has(d)){const v=t.get(d).texture;return n(v,d.mapping)}else{const v=d.image;if(v&&v.height>0){const _=new yL(v.height);return _.fromEquirectangularTexture(a,d),t.set(d,_),d.addEventListener("dispose",o),n(_.texture,d.mapping)}else return null}}return d}function o(d){const p=d.target;p.removeEventListener("dispose",o);const v=t.get(p);v!==void 0&&(t.delete(p),v.dispose())}function c(){t=new WeakMap}return{get:r,dispose:c}}const th=4,CS=[.125,.215,.35,.446,.526,.582],Al=20,pg=new zE,PS=new Qn;let mg=null,_g=0,gg=0,xg=!1;const El=(1+Math.sqrt(5))/2,$c=1/El,IS=[new ue(-El,$c,0),new ue(El,$c,0),new ue(-$c,0,El),new ue($c,0,El),new ue(0,El,-$c),new ue(0,El,$c),new ue(-1,1,-1),new ue(1,1,-1),new ue(-1,1,1),new ue(1,1,1)];class DS{constructor(t){this._renderer=t,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._compileMaterial(this._blurMaterial)}fromScene(t,n=0,r=.1,o=100){mg=this._renderer.getRenderTarget(),_g=this._renderer.getActiveCubeFace(),gg=this._renderer.getActiveMipmapLevel(),xg=this._renderer.xr.enabled,this._renderer.xr.enabled=!1,this._setSize(256);const c=this._allocateTargets();return c.depthBuffer=!0,this._sceneToCubeUV(t,r,o,c),n>0&&this._blur(c,0,0,n),this._applyPMREM(c),this._cleanup(c),c}fromEquirectangular(t,n=null){return this._fromTexture(t,n)}fromCubemap(t,n=null){return this._fromTexture(t,n)}compileCubemapShader(){this._cubemapMaterial===null&&(this._cubemapMaterial=NS(),this._compileMaterial(this._cubemapMaterial))}compileEquirectangularShader(){this._equirectMaterial===null&&(this._equirectMaterial=US(),this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),this._cubemapMaterial!==null&&this._cubemapMaterial.dispose(),this._equirectMaterial!==null&&this._equirectMaterial.dispose()}_setSize(t){this._lodMax=Math.floor(Math.log2(t)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){this._blurMaterial!==null&&this._blurMaterial.dispose(),this._pingPongRenderTarget!==null&&this._pingPongRenderTarget.dispose();for(let t=0;t<this._lodPlanes.length;t++)this._lodPlanes[t].dispose()}_cleanup(t){this._renderer.setRenderTarget(mg,_g,gg),this._renderer.xr.enabled=xg,t.scissorTest=!1,xp(t,0,0,t.width,t.height)}_fromTexture(t,n){t.mapping===dh||t.mapping===ph?this._setSize(t.image.length===0?16:t.image[0].width||t.image[0].image.width):this._setSize(t.image.width/4),mg=this._renderer.getRenderTarget(),_g=this._renderer.getActiveCubeFace(),gg=this._renderer.getActiveMipmapLevel(),xg=this._renderer.xr.enabled,this._renderer.xr.enabled=!1;const r=n||this._allocateTargets();return this._textureToCubeUV(t,r),this._applyPMREM(r),this._cleanup(r),r}_allocateTargets(){const t=3*Math.max(this._cubeSize,112),n=4*this._cubeSize,r={magFilter:ca,minFilter:ca,generateMipmaps:!1,type:of,format:Zs,colorSpace:gh,depthBuffer:!1},o=LS(t,n,r);if(this._pingPongRenderTarget===null||this._pingPongRenderTarget.width!==t||this._pingPongRenderTarget.height!==n){this._pingPongRenderTarget!==null&&this._dispose(),this._pingPongRenderTarget=LS(t,n,r);const{_lodMax:c}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=TN(c)),this._blurMaterial=AN(c,t,n)}return o}_compileMaterial(t){const n=new As(this._lodPlanes[0],t);this._renderer.compile(n,pg)}_sceneToCubeUV(t,n,r,o){const p=new Ys(90,1,n,r),v=[1,-1,1,1,1,1],_=[1,1,1,-1,-1,-1],x=this._renderer,M=x.autoClear,b=x.toneMapping;x.getClearColor(PS),x.toneMapping=wo,x.autoClear=!1;const E=new Hp({name:"PMREM.Background",side:$r,depthWrite:!1,depthTest:!1}),U=new As(new hf,E);let L=!1;const P=t.background;P?P.isColor&&(E.color.copy(P),t.background=null,L=!0):(E.color.copy(PS),L=!0);for(let A=0;A<6;A++){const X=A%3;X===0?(p.up.set(0,v[A],0),p.lookAt(_[A],0,0)):X===1?(p.up.set(0,0,v[A]),p.lookAt(0,_[A],0)):(p.up.set(0,v[A],0),p.lookAt(0,0,_[A]));const k=this._cubeSize;xp(o,X*k,A>2?k:0,k,k),x.setRenderTarget(o),L&&x.render(U,p),x.render(t,p)}U.geometry.dispose(),U.material.dispose(),x.toneMapping=b,x.autoClear=M,t.background=P}_textureToCubeUV(t,n){const r=this._renderer,o=t.mapping===dh||t.mapping===ph;o?(this._cubemapMaterial===null&&(this._cubemapMaterial=NS()),this._cubemapMaterial.uniforms.flipEnvMap.value=t.isRenderTargetTexture===!1?-1:1):this._equirectMaterial===null&&(this._equirectMaterial=US());const c=o?this._cubemapMaterial:this._equirectMaterial,d=new As(this._lodPlanes[0],c),p=c.uniforms;p.envMap.value=t;const v=this._cubeSize;xp(n,0,0,3*v,2*v),r.setRenderTarget(n),r.render(d,pg)}_applyPMREM(t){const n=this._renderer,r=n.autoClear;n.autoClear=!1;const o=this._lodPlanes.length;for(let c=1;c<o;c++){const d=Math.sqrt(this._sigmas[c]*this._sigmas[c]-this._sigmas[c-1]*this._sigmas[c-1]),p=IS[(o-c-1)%IS.length];this._blur(t,c-1,c,d,p)}n.autoClear=r}_blur(t,n,r,o,c){const d=this._pingPongRenderTarget;this._halfBlur(t,d,n,r,o,"latitudinal",c),this._halfBlur(d,t,r,r,o,"longitudinal",c)}_halfBlur(t,n,r,o,c,d,p){const v=this._renderer,_=this._blurMaterial;d!=="latitudinal"&&d!=="longitudinal"&&console.error("blur direction must be either latitudinal or longitudinal!");const x=3,M=new As(this._lodPlanes[o],_),b=_.uniforms,E=this._sizeLods[r]-1,U=isFinite(c)?Math.PI/(2*E):2*Math.PI/(2*Al-1),L=c/U,P=isFinite(c)?1+Math.floor(x*L):Al;P>Al&&console.warn(`sigmaRadians, ${c}, is too large and will clip, as it requested ${P} samples when the maximum is set to ${Al}`);const A=[];let X=0;for(let W=0;W<Al;++W){const te=W/L,N=Math.exp(-te*te/2);A.push(N),W===0?X+=N:W<P&&(X+=2*N)}for(let W=0;W<A.length;W++)A[W]=A[W]/X;b.envMap.value=t.texture,b.samples.value=P,b.weights.value=A,b.latitudinal.value=d==="latitudinal",p&&(b.poleAxis.value=p);const{_lodMax:k}=this;b.dTheta.value=U,b.mipInt.value=k-r;const O=this._sizeLods[o],z=3*O*(o>k-th?o-k+th:0),Y=4*(this._cubeSize-O);xp(n,z,Y,3*O,2*O),v.setRenderTarget(n),v.render(M,pg)}}function TN(a){const t=[],n=[],r=[];let o=a;const c=a-th+1+CS.length;for(let d=0;d<c;d++){const p=Math.pow(2,o);n.push(p);let v=1/p;d>a-th?v=CS[d-a+th-1]:d===0&&(v=0),r.push(v);const _=1/(p-2),x=-_,M=1+_,b=[x,x,M,x,M,M,x,x,M,M,x,M],E=6,U=6,L=3,P=2,A=1,X=new Float32Array(L*U*E),k=new Float32Array(P*U*E),O=new Float32Array(A*U*E);for(let Y=0;Y<E;Y++){const W=Y%3*2/3-1,te=Y>2?0:-1,N=[W,te,0,W+2/3,te,0,W+2/3,te+1,0,W,te,0,W+2/3,te+1,0,W,te+1,0];X.set(N,L*U*Y),k.set(b,P*U*Y);const B=[Y,Y,Y,Y,Y,Y];O.set(B,A*U*Y)}const z=new Er;z.setAttribute("position",new ds(X,L)),z.setAttribute("uv",new ds(k,P)),z.setAttribute("faceIndex",new ds(O,A)),t.push(z),o>th&&o--}return{lodPlanes:t,sizeLods:n,sigmas:r}}function LS(a,t,n){const r=new zl(a,t,n);return r.texture.mapping=im,r.texture.name="PMREM.cubeUv",r.scissorTest=!0,r}function xp(a,t,n,r,o){a.viewport.set(t,n,r,o),a.scissor.set(t,n,r,o)}function AN(a,t,n){const r=new Float32Array(Al),o=new ue(0,1,0);return new Lo({name:"SphericalGaussianBlur",defines:{n:Al,CUBEUV_TEXEL_WIDTH:1/t,CUBEUV_TEXEL_HEIGHT:1/n,CUBEUV_MAX_MIP:`${a}.0`},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:r},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:o}},vertexShader:mx(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,blending:Eo,depthTest:!1,depthWrite:!1})}function US(){return new Lo({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null}},vertexShader:mx(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`,blending:Eo,depthTest:!1,depthWrite:!1})}function NS(){return new Lo({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:mx(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`,blending:Eo,depthTest:!1,depthWrite:!1})}function mx(){return`

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`}function RN(a){let t=new WeakMap,n=null;function r(p){if(p&&p.isTexture){const v=p.mapping,_=v===e0||v===t0,x=v===dh||v===ph;if(_||x){let M=t.get(p);const b=M!==void 0?M.texture.pmremVersion:0;if(p.isRenderTargetTexture&&p.pmremVersion!==b)return n===null&&(n=new DS(a)),M=_?n.fromEquirectangular(p,M):n.fromCubemap(p,M),M.texture.pmremVersion=p.pmremVersion,t.set(p,M),M.texture;if(M!==void 0)return M.texture;{const E=p.image;return _&&E&&E.height>0||x&&E&&o(E)?(n===null&&(n=new DS(a)),M=_?n.fromEquirectangular(p):n.fromCubemap(p),M.texture.pmremVersion=p.pmremVersion,t.set(p,M),p.addEventListener("dispose",c),M.texture):null}}}return p}function o(p){let v=0;const _=6;for(let x=0;x<_;x++)p[x]!==void 0&&v++;return v===_}function c(p){const v=p.target;v.removeEventListener("dispose",c);const _=t.get(v);_!==void 0&&(t.delete(v),_.dispose())}function d(){t=new WeakMap,n!==null&&(n.dispose(),n=null)}return{get:r,dispose:d}}function CN(a){const t={};function n(r){if(t[r]!==void 0)return t[r];let o;switch(r){case"WEBGL_depth_texture":o=a.getExtension("WEBGL_depth_texture")||a.getExtension("MOZ_WEBGL_depth_texture")||a.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":o=a.getExtension("EXT_texture_filter_anisotropic")||a.getExtension("MOZ_EXT_texture_filter_anisotropic")||a.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":o=a.getExtension("WEBGL_compressed_texture_s3tc")||a.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||a.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":o=a.getExtension("WEBGL_compressed_texture_pvrtc")||a.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:o=a.getExtension(r)}return t[r]=o,o}return{has:function(r){return n(r)!==null},init:function(){n("EXT_color_buffer_float"),n("WEBGL_clip_cull_distance"),n("OES_texture_float_linear"),n("EXT_color_buffer_half_float"),n("WEBGL_multisampled_render_to_texture"),n("WEBGL_render_shared_exponent")},get:function(r){const o=n(r);return o===null&&Qc("THREE.WebGLRenderer: "+r+" extension not supported."),o}}}function PN(a,t,n,r){const o={},c=new WeakMap;function d(M){const b=M.target;b.index!==null&&t.remove(b.index);for(const U in b.attributes)t.remove(b.attributes[U]);b.removeEventListener("dispose",d),delete o[b.id];const E=c.get(b);E&&(t.remove(E),c.delete(b)),r.releaseStatesOfGeometry(b),b.isInstancedBufferGeometry===!0&&delete b._maxInstanceCount,n.memory.geometries--}function p(M,b){return o[b.id]===!0||(b.addEventListener("dispose",d),o[b.id]=!0,n.memory.geometries++),b}function v(M){const b=M.attributes;for(const E in b)t.update(b[E],a.ARRAY_BUFFER)}function _(M){const b=[],E=M.index,U=M.attributes.position;let L=0;if(E!==null){const X=E.array;L=E.version;for(let k=0,O=X.length;k<O;k+=3){const z=X[k+0],Y=X[k+1],W=X[k+2];b.push(z,Y,Y,W,W,z)}}else if(U!==void 0){const X=U.array;L=U.version;for(let k=0,O=X.length/3-1;k<O;k+=3){const z=k+0,Y=k+1,W=k+2;b.push(z,Y,Y,W,W,z)}}else return;const P=new(wE(b)?PE:CE)(b,1);P.version=L;const A=c.get(M);A&&t.remove(A),c.set(M,P)}function x(M){const b=c.get(M);if(b){const E=M.index;E!==null&&b.version<E.version&&_(M)}else _(M);return c.get(M)}return{get:p,update:v,getWireframeAttribute:x}}function IN(a,t,n){let r;function o(b){r=b}let c,d;function p(b){c=b.type,d=b.bytesPerElement}function v(b,E){a.drawElements(r,E,c,b*d),n.update(E,r,1)}function _(b,E,U){U!==0&&(a.drawElementsInstanced(r,E,c,b*d,U),n.update(E,r,U))}function x(b,E,U){if(U===0)return;t.get("WEBGL_multi_draw").multiDrawElementsWEBGL(r,E,0,c,b,0,U);let P=0;for(let A=0;A<U;A++)P+=E[A];n.update(P,r,1)}function M(b,E,U,L){if(U===0)return;const P=t.get("WEBGL_multi_draw");if(P===null)for(let A=0;A<b.length;A++)_(b[A]/d,E[A],L[A]);else{P.multiDrawElementsInstancedWEBGL(r,E,0,c,b,0,L,0,U);let A=0;for(let X=0;X<U;X++)A+=E[X]*L[X];n.update(A,r,1)}}this.setMode=o,this.setIndex=p,this.render=v,this.renderInstances=_,this.renderMultiDraw=x,this.renderMultiDrawInstances=M}function DN(a){const t={geometries:0,textures:0},n={frame:0,calls:0,triangles:0,points:0,lines:0};function r(c,d,p){switch(n.calls++,d){case a.TRIANGLES:n.triangles+=p*(c/3);break;case a.LINES:n.lines+=p*(c/2);break;case a.LINE_STRIP:n.lines+=p*(c-1);break;case a.LINE_LOOP:n.lines+=p*c;break;case a.POINTS:n.points+=p*c;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",d);break}}function o(){n.calls=0,n.triangles=0,n.points=0,n.lines=0}return{memory:t,render:n,programs:null,autoReset:!0,reset:o,update:r}}function LN(a,t,n){const r=new WeakMap,o=new Vi;function c(d,p,v){const _=d.morphTargetInfluences,x=p.morphAttributes.position||p.morphAttributes.normal||p.morphAttributes.color,M=x!==void 0?x.length:0;let b=r.get(p);if(b===void 0||b.count!==M){let N=function(){W.dispose(),r.delete(p),p.removeEventListener("dispose",N)};b!==void 0&&b.texture.dispose();const E=p.morphAttributes.position!==void 0,U=p.morphAttributes.normal!==void 0,L=p.morphAttributes.color!==void 0,P=p.morphAttributes.position||[],A=p.morphAttributes.normal||[],X=p.morphAttributes.color||[];let k=0;E===!0&&(k=1),U===!0&&(k=2),L===!0&&(k=3);let O=p.attributes.position.count*k,z=1;O>t.maxTextureSize&&(z=Math.ceil(O/t.maxTextureSize),O=t.maxTextureSize);const Y=new Float32Array(O*z*4*M),W=new AE(Y,O,z,M);W.type=Va,W.needsUpdate=!0;const te=k*4;for(let B=0;B<M;B++){const ee=P[B],Ee=A[B],de=X[B],be=O*z*4*B;for(let Ae=0;Ae<ee.count;Ae++){const Me=Ae*te;E===!0&&(o.fromBufferAttribute(ee,Ae),Y[be+Me+0]=o.x,Y[be+Me+1]=o.y,Y[be+Me+2]=o.z,Y[be+Me+3]=0),U===!0&&(o.fromBufferAttribute(Ee,Ae),Y[be+Me+4]=o.x,Y[be+Me+5]=o.y,Y[be+Me+6]=o.z,Y[be+Me+7]=0),L===!0&&(o.fromBufferAttribute(de,Ae),Y[be+Me+8]=o.x,Y[be+Me+9]=o.y,Y[be+Me+10]=o.z,Y[be+Me+11]=de.itemSize===4?o.w:1)}}b={count:M,texture:W,size:new ln(O,z)},r.set(p,b),p.addEventListener("dispose",N)}if(d.isInstancedMesh===!0&&d.morphTexture!==null)v.getUniforms().setValue(a,"morphTexture",d.morphTexture,n);else{let E=0;for(let L=0;L<_.length;L++)E+=_[L];const U=p.morphTargetsRelative?1:1-E;v.getUniforms().setValue(a,"morphTargetBaseInfluence",U),v.getUniforms().setValue(a,"morphTargetInfluences",_)}v.getUniforms().setValue(a,"morphTargetsTexture",b.texture,n),v.getUniforms().setValue(a,"morphTargetsTextureSize",b.size)}return{update:c}}function UN(a,t,n,r){let o=new WeakMap;function c(v){const _=r.render.frame,x=v.geometry,M=t.get(v,x);if(o.get(M)!==_&&(t.update(M),o.set(M,_)),v.isInstancedMesh&&(v.hasEventListener("dispose",p)===!1&&v.addEventListener("dispose",p),o.get(v)!==_&&(n.update(v.instanceMatrix,a.ARRAY_BUFFER),v.instanceColor!==null&&n.update(v.instanceColor,a.ARRAY_BUFFER),o.set(v,_))),v.isSkinnedMesh){const b=v.skeleton;o.get(b)!==_&&(b.update(),o.set(b,_))}return M}function d(){o=new WeakMap}function p(v){const _=v.target;_.removeEventListener("dispose",p),n.remove(_.instanceMatrix),_.instanceColor!==null&&n.remove(_.instanceColor)}return{update:c,dispose:d}}const VE=new Tr,FS=new BE(1,1),HE=new AE,GE=new rL,WE=new LE,OS=[],BS=[],zS=new Float32Array(16),kS=new Float32Array(9),VS=new Float32Array(4);function Rh(a,t,n){const r=a[0];if(r<=0||r>0)return a;const o=t*n;let c=OS[o];if(c===void 0&&(c=new Float32Array(o),OS[o]=c),t!==0){r.toArray(c,0);for(let d=1,p=0;d!==t;++d)p+=n,a[d].toArray(c,p)}return c}function Qi(a,t){if(a.length!==t.length)return!1;for(let n=0,r=a.length;n<r;n++)if(a[n]!==t[n])return!1;return!0}function er(a,t){for(let n=0,r=t.length;n<r;n++)a[n]=t[n]}function sm(a,t){let n=BS[t];n===void 0&&(n=new Int32Array(t),BS[t]=n);for(let r=0;r!==t;++r)n[r]=a.allocateTextureUnit();return n}function NN(a,t){const n=this.cache;n[0]!==t&&(a.uniform1f(this.addr,t),n[0]=t)}function FN(a,t){const n=this.cache;if(t.x!==void 0)(n[0]!==t.x||n[1]!==t.y)&&(a.uniform2f(this.addr,t.x,t.y),n[0]=t.x,n[1]=t.y);else{if(Qi(n,t))return;a.uniform2fv(this.addr,t),er(n,t)}}function ON(a,t){const n=this.cache;if(t.x!==void 0)(n[0]!==t.x||n[1]!==t.y||n[2]!==t.z)&&(a.uniform3f(this.addr,t.x,t.y,t.z),n[0]=t.x,n[1]=t.y,n[2]=t.z);else if(t.r!==void 0)(n[0]!==t.r||n[1]!==t.g||n[2]!==t.b)&&(a.uniform3f(this.addr,t.r,t.g,t.b),n[0]=t.r,n[1]=t.g,n[2]=t.b);else{if(Qi(n,t))return;a.uniform3fv(this.addr,t),er(n,t)}}function BN(a,t){const n=this.cache;if(t.x!==void 0)(n[0]!==t.x||n[1]!==t.y||n[2]!==t.z||n[3]!==t.w)&&(a.uniform4f(this.addr,t.x,t.y,t.z,t.w),n[0]=t.x,n[1]=t.y,n[2]=t.z,n[3]=t.w);else{if(Qi(n,t))return;a.uniform4fv(this.addr,t),er(n,t)}}function zN(a,t){const n=this.cache,r=t.elements;if(r===void 0){if(Qi(n,t))return;a.uniformMatrix2fv(this.addr,!1,t),er(n,t)}else{if(Qi(n,r))return;VS.set(r),a.uniformMatrix2fv(this.addr,!1,VS),er(n,r)}}function kN(a,t){const n=this.cache,r=t.elements;if(r===void 0){if(Qi(n,t))return;a.uniformMatrix3fv(this.addr,!1,t),er(n,t)}else{if(Qi(n,r))return;kS.set(r),a.uniformMatrix3fv(this.addr,!1,kS),er(n,r)}}function VN(a,t){const n=this.cache,r=t.elements;if(r===void 0){if(Qi(n,t))return;a.uniformMatrix4fv(this.addr,!1,t),er(n,t)}else{if(Qi(n,r))return;zS.set(r),a.uniformMatrix4fv(this.addr,!1,zS),er(n,r)}}function HN(a,t){const n=this.cache;n[0]!==t&&(a.uniform1i(this.addr,t),n[0]=t)}function GN(a,t){const n=this.cache;if(t.x!==void 0)(n[0]!==t.x||n[1]!==t.y)&&(a.uniform2i(this.addr,t.x,t.y),n[0]=t.x,n[1]=t.y);else{if(Qi(n,t))return;a.uniform2iv(this.addr,t),er(n,t)}}function WN(a,t){const n=this.cache;if(t.x!==void 0)(n[0]!==t.x||n[1]!==t.y||n[2]!==t.z)&&(a.uniform3i(this.addr,t.x,t.y,t.z),n[0]=t.x,n[1]=t.y,n[2]=t.z);else{if(Qi(n,t))return;a.uniform3iv(this.addr,t),er(n,t)}}function XN(a,t){const n=this.cache;if(t.x!==void 0)(n[0]!==t.x||n[1]!==t.y||n[2]!==t.z||n[3]!==t.w)&&(a.uniform4i(this.addr,t.x,t.y,t.z,t.w),n[0]=t.x,n[1]=t.y,n[2]=t.z,n[3]=t.w);else{if(Qi(n,t))return;a.uniform4iv(this.addr,t),er(n,t)}}function qN(a,t){const n=this.cache;n[0]!==t&&(a.uniform1ui(this.addr,t),n[0]=t)}function YN(a,t){const n=this.cache;if(t.x!==void 0)(n[0]!==t.x||n[1]!==t.y)&&(a.uniform2ui(this.addr,t.x,t.y),n[0]=t.x,n[1]=t.y);else{if(Qi(n,t))return;a.uniform2uiv(this.addr,t),er(n,t)}}function ZN(a,t){const n=this.cache;if(t.x!==void 0)(n[0]!==t.x||n[1]!==t.y||n[2]!==t.z)&&(a.uniform3ui(this.addr,t.x,t.y,t.z),n[0]=t.x,n[1]=t.y,n[2]=t.z);else{if(Qi(n,t))return;a.uniform3uiv(this.addr,t),er(n,t)}}function $N(a,t){const n=this.cache;if(t.x!==void 0)(n[0]!==t.x||n[1]!==t.y||n[2]!==t.z||n[3]!==t.w)&&(a.uniform4ui(this.addr,t.x,t.y,t.z,t.w),n[0]=t.x,n[1]=t.y,n[2]=t.z,n[3]=t.w);else{if(Qi(n,t))return;a.uniform4uiv(this.addr,t),er(n,t)}}function KN(a,t,n){const r=this.cache,o=n.allocateTextureUnit();r[0]!==o&&(a.uniform1i(this.addr,o),r[0]=o);let c;this.type===a.SAMPLER_2D_SHADOW?(FS.compareFunction=EE,c=FS):c=VE,n.setTexture2D(t||c,o)}function JN(a,t,n){const r=this.cache,o=n.allocateTextureUnit();r[0]!==o&&(a.uniform1i(this.addr,o),r[0]=o),n.setTexture3D(t||GE,o)}function jN(a,t,n){const r=this.cache,o=n.allocateTextureUnit();r[0]!==o&&(a.uniform1i(this.addr,o),r[0]=o),n.setTextureCube(t||WE,o)}function QN(a,t,n){const r=this.cache,o=n.allocateTextureUnit();r[0]!==o&&(a.uniform1i(this.addr,o),r[0]=o),n.setTexture2DArray(t||HE,o)}function eF(a){switch(a){case 5126:return NN;case 35664:return FN;case 35665:return ON;case 35666:return BN;case 35674:return zN;case 35675:return kN;case 35676:return VN;case 5124:case 35670:return HN;case 35667:case 35671:return GN;case 35668:case 35672:return WN;case 35669:case 35673:return XN;case 5125:return qN;case 36294:return YN;case 36295:return ZN;case 36296:return $N;case 35678:case 36198:case 36298:case 36306:case 35682:return KN;case 35679:case 36299:case 36307:return JN;case 35680:case 36300:case 36308:case 36293:return jN;case 36289:case 36303:case 36311:case 36292:return QN}}function tF(a,t){a.uniform1fv(this.addr,t)}function nF(a,t){const n=Rh(t,this.size,2);a.uniform2fv(this.addr,n)}function iF(a,t){const n=Rh(t,this.size,3);a.uniform3fv(this.addr,n)}function rF(a,t){const n=Rh(t,this.size,4);a.uniform4fv(this.addr,n)}function sF(a,t){const n=Rh(t,this.size,4);a.uniformMatrix2fv(this.addr,!1,n)}function aF(a,t){const n=Rh(t,this.size,9);a.uniformMatrix3fv(this.addr,!1,n)}function oF(a,t){const n=Rh(t,this.size,16);a.uniformMatrix4fv(this.addr,!1,n)}function lF(a,t){a.uniform1iv(this.addr,t)}function cF(a,t){a.uniform2iv(this.addr,t)}function hF(a,t){a.uniform3iv(this.addr,t)}function uF(a,t){a.uniform4iv(this.addr,t)}function fF(a,t){a.uniform1uiv(this.addr,t)}function dF(a,t){a.uniform2uiv(this.addr,t)}function pF(a,t){a.uniform3uiv(this.addr,t)}function mF(a,t){a.uniform4uiv(this.addr,t)}function _F(a,t,n){const r=this.cache,o=t.length,c=sm(n,o);Qi(r,c)||(a.uniform1iv(this.addr,c),er(r,c));for(let d=0;d!==o;++d)n.setTexture2D(t[d]||VE,c[d])}function gF(a,t,n){const r=this.cache,o=t.length,c=sm(n,o);Qi(r,c)||(a.uniform1iv(this.addr,c),er(r,c));for(let d=0;d!==o;++d)n.setTexture3D(t[d]||GE,c[d])}function xF(a,t,n){const r=this.cache,o=t.length,c=sm(n,o);Qi(r,c)||(a.uniform1iv(this.addr,c),er(r,c));for(let d=0;d!==o;++d)n.setTextureCube(t[d]||WE,c[d])}function vF(a,t,n){const r=this.cache,o=t.length,c=sm(n,o);Qi(r,c)||(a.uniform1iv(this.addr,c),er(r,c));for(let d=0;d!==o;++d)n.setTexture2DArray(t[d]||HE,c[d])}function yF(a){switch(a){case 5126:return tF;case 35664:return nF;case 35665:return iF;case 35666:return rF;case 35674:return sF;case 35675:return aF;case 35676:return oF;case 5124:case 35670:return lF;case 35667:case 35671:return cF;case 35668:case 35672:return hF;case 35669:case 35673:return uF;case 5125:return fF;case 36294:return dF;case 36295:return pF;case 36296:return mF;case 35678:case 36198:case 36298:case 36306:case 35682:return _F;case 35679:case 36299:case 36307:return gF;case 35680:case 36300:case 36308:case 36293:return xF;case 36289:case 36303:case 36311:case 36292:return vF}}class MF{constructor(t,n,r){this.id=t,this.addr=r,this.cache=[],this.type=n.type,this.setValue=eF(n.type)}}class SF{constructor(t,n,r){this.id=t,this.addr=r,this.cache=[],this.type=n.type,this.size=n.size,this.setValue=yF(n.type)}}class bF{constructor(t){this.id=t,this.seq=[],this.map={}}setValue(t,n,r){const o=this.seq;for(let c=0,d=o.length;c!==d;++c){const p=o[c];p.setValue(t,n[p.id],r)}}}const vg=/(\w+)(\])?(\[|\.)?/g;function HS(a,t){a.seq.push(t),a.map[t.id]=t}function EF(a,t,n){const r=a.name,o=r.length;for(vg.lastIndex=0;;){const c=vg.exec(r),d=vg.lastIndex;let p=c[1];const v=c[2]==="]",_=c[3];if(v&&(p=p|0),_===void 0||_==="["&&d+2===o){HS(n,_===void 0?new MF(p,a,t):new SF(p,a,t));break}else{let M=n.map[p];M===void 0&&(M=new bF(p),HS(n,M)),n=M}}}class Lp{constructor(t,n){this.seq=[],this.map={};const r=t.getProgramParameter(n,t.ACTIVE_UNIFORMS);for(let o=0;o<r;++o){const c=t.getActiveUniform(n,o),d=t.getUniformLocation(n,c.name);EF(c,d,this)}}setValue(t,n,r,o){const c=this.map[n];c!==void 0&&c.setValue(t,r,o)}setOptional(t,n,r){const o=n[r];o!==void 0&&this.setValue(t,r,o)}static upload(t,n,r,o){for(let c=0,d=n.length;c!==d;++c){const p=n[c],v=r[p.id];v.needsUpdate!==!1&&p.setValue(t,v.value,o)}}static seqWithValue(t,n){const r=[];for(let o=0,c=t.length;o!==c;++o){const d=t[o];d.id in n&&r.push(d)}return r}}function GS(a,t,n){const r=a.createShader(t);return a.shaderSource(r,n),a.compileShader(r),r}const wF=37297;let TF=0;function AF(a,t){const n=a.split(`
`),r=[],o=Math.max(t-6,0),c=Math.min(t+6,n.length);for(let d=o;d<c;d++){const p=d+1;r.push(`${p===t?">":" "} ${p}: ${n[d]}`)}return r.join(`
`)}const WS=new nn;function RF(a){ni._getMatrix(WS,ni.workingColorSpace,a);const t=`mat3( ${WS.elements.map(n=>n.toFixed(4))} )`;switch(ni.getTransfer(a)){case zp:return[t,"LinearTransferOETF"];case pi:return[t,"sRGBTransferOETF"];default:return console.warn("THREE.WebGLProgram: Unsupported color space: ",a),[t,"LinearTransferOETF"]}}function XS(a,t,n){const r=a.getShaderParameter(t,a.COMPILE_STATUS),o=a.getShaderInfoLog(t).trim();if(r&&o==="")return"";const c=/ERROR: 0:(\d+)/.exec(o);if(c){const d=parseInt(c[1]);return n.toUpperCase()+`

`+o+`

`+AF(a.getShaderSource(t),d)}else return o}function CF(a,t){const n=RF(t);return[`vec4 ${a}( vec4 value ) {`,`	return ${n[1]}( vec4( value.rgb * ${n[0]}, value.a ) );`,"}"].join(`
`)}function PF(a,t){let n;switch(t){case RD:n="Linear";break;case CD:n="Reinhard";break;case PD:n="Cineon";break;case ID:n="ACESFilmic";break;case LD:n="AgX";break;case UD:n="Neutral";break;case DD:n="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",t),n="Linear"}return"vec3 "+a+"( vec3 color ) { return "+n+"ToneMapping( color ); }"}const vp=new ue;function IF(){ni.getLuminanceCoefficients(vp);const a=vp.x.toFixed(4),t=vp.y.toFixed(4),n=vp.z.toFixed(4);return["float luminance( const in vec3 rgb ) {",`	const vec3 weights = vec3( ${a}, ${t}, ${n} );`,"	return dot( weights, rgb );","}"].join(`
`)}function DF(a){return[a.extensionClipCullDistance?"#extension GL_ANGLE_clip_cull_distance : require":"",a.extensionMultiDraw?"#extension GL_ANGLE_multi_draw : require":""].filter(Cu).join(`
`)}function LF(a){const t=[];for(const n in a){const r=a[n];r!==!1&&t.push("#define "+n+" "+r)}return t.join(`
`)}function UF(a,t){const n={},r=a.getProgramParameter(t,a.ACTIVE_ATTRIBUTES);for(let o=0;o<r;o++){const c=a.getActiveAttrib(t,o),d=c.name;let p=1;c.type===a.FLOAT_MAT2&&(p=2),c.type===a.FLOAT_MAT3&&(p=3),c.type===a.FLOAT_MAT4&&(p=4),n[d]={type:c.type,location:a.getAttribLocation(t,d),locationSize:p}}return n}function Cu(a){return a!==""}function qS(a,t){const n=t.numSpotLightShadows+t.numSpotLightMaps-t.numSpotLightShadowsWithMaps;return a.replace(/NUM_DIR_LIGHTS/g,t.numDirLights).replace(/NUM_SPOT_LIGHTS/g,t.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g,t.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g,n).replace(/NUM_RECT_AREA_LIGHTS/g,t.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,t.numPointLights).replace(/NUM_HEMI_LIGHTS/g,t.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,t.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g,t.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g,t.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,t.numPointLightShadows)}function YS(a,t){return a.replace(/NUM_CLIPPING_PLANES/g,t.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,t.numClippingPlanes-t.numClipIntersection)}const NF=/^[ \t]*#include +<([\w\d./]+)>/gm;function L0(a){return a.replace(NF,OF)}const FF=new Map;function OF(a,t){let n=Ln[t];if(n===void 0){const r=FF.get(t);if(r!==void 0)n=Ln[r],console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.',t,r);else throw new Error("Can not resolve #include <"+t+">")}return L0(n)}const BF=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function ZS(a){return a.replace(BF,zF)}function zF(a,t,n,r){let o="";for(let c=parseInt(t);c<parseInt(n);c++)o+=r.replace(/\[\s*i\s*\]/g,"[ "+c+" ]").replace(/UNROLLED_LOOP_INDEX/g,c);return o}function $S(a){let t=`precision ${a.precision} float;
	precision ${a.precision} int;
	precision ${a.precision} sampler2D;
	precision ${a.precision} samplerCube;
	precision ${a.precision} sampler3D;
	precision ${a.precision} sampler2DArray;
	precision ${a.precision} sampler2DShadow;
	precision ${a.precision} samplerCubeShadow;
	precision ${a.precision} sampler2DArrayShadow;
	precision ${a.precision} isampler2D;
	precision ${a.precision} isampler3D;
	precision ${a.precision} isamplerCube;
	precision ${a.precision} isampler2DArray;
	precision ${a.precision} usampler2D;
	precision ${a.precision} usampler3D;
	precision ${a.precision} usamplerCube;
	precision ${a.precision} usampler2DArray;
	`;return a.precision==="highp"?t+=`
#define HIGH_PRECISION`:a.precision==="mediump"?t+=`
#define MEDIUM_PRECISION`:a.precision==="lowp"&&(t+=`
#define LOW_PRECISION`),t}function kF(a){let t="SHADOWMAP_TYPE_BASIC";return a.shadowMapType===uE?t="SHADOWMAP_TYPE_PCF":a.shadowMapType===oD?t="SHADOWMAP_TYPE_PCF_SOFT":a.shadowMapType===Na&&(t="SHADOWMAP_TYPE_VSM"),t}function VF(a){let t="ENVMAP_TYPE_CUBE";if(a.envMap)switch(a.envMapMode){case dh:case ph:t="ENVMAP_TYPE_CUBE";break;case im:t="ENVMAP_TYPE_CUBE_UV";break}return t}function HF(a){let t="ENVMAP_MODE_REFLECTION";if(a.envMap)switch(a.envMapMode){case ph:t="ENVMAP_MODE_REFRACTION";break}return t}function GF(a){let t="ENVMAP_BLENDING_NONE";if(a.envMap)switch(a.combine){case fE:t="ENVMAP_BLENDING_MULTIPLY";break;case TD:t="ENVMAP_BLENDING_MIX";break;case AD:t="ENVMAP_BLENDING_ADD";break}return t}function WF(a){const t=a.envMapCubeUVHeight;if(t===null)return null;const n=Math.log2(t)-2,r=1/t;return{texelWidth:1/(3*Math.max(Math.pow(2,n),7*16)),texelHeight:r,maxMip:n}}function XF(a,t,n,r){const o=a.getContext(),c=n.defines;let d=n.vertexShader,p=n.fragmentShader;const v=kF(n),_=VF(n),x=HF(n),M=GF(n),b=WF(n),E=DF(n),U=LF(c),L=o.createProgram();let P,A,X=n.glslVersion?"#version "+n.glslVersion+`
`:"";n.isRawShaderMaterial?(P=["#define SHADER_TYPE "+n.shaderType,"#define SHADER_NAME "+n.shaderName,U].filter(Cu).join(`
`),P.length>0&&(P+=`
`),A=["#define SHADER_TYPE "+n.shaderType,"#define SHADER_NAME "+n.shaderName,U].filter(Cu).join(`
`),A.length>0&&(A+=`
`)):(P=[$S(n),"#define SHADER_TYPE "+n.shaderType,"#define SHADER_NAME "+n.shaderName,U,n.extensionClipCullDistance?"#define USE_CLIP_DISTANCE":"",n.batching?"#define USE_BATCHING":"",n.batchingColor?"#define USE_BATCHING_COLOR":"",n.instancing?"#define USE_INSTANCING":"",n.instancingColor?"#define USE_INSTANCING_COLOR":"",n.instancingMorph?"#define USE_INSTANCING_MORPH":"",n.useFog&&n.fog?"#define USE_FOG":"",n.useFog&&n.fogExp2?"#define FOG_EXP2":"",n.map?"#define USE_MAP":"",n.envMap?"#define USE_ENVMAP":"",n.envMap?"#define "+x:"",n.lightMap?"#define USE_LIGHTMAP":"",n.aoMap?"#define USE_AOMAP":"",n.bumpMap?"#define USE_BUMPMAP":"",n.normalMap?"#define USE_NORMALMAP":"",n.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",n.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",n.displacementMap?"#define USE_DISPLACEMENTMAP":"",n.emissiveMap?"#define USE_EMISSIVEMAP":"",n.anisotropy?"#define USE_ANISOTROPY":"",n.anisotropyMap?"#define USE_ANISOTROPYMAP":"",n.clearcoatMap?"#define USE_CLEARCOATMAP":"",n.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",n.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",n.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",n.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",n.specularMap?"#define USE_SPECULARMAP":"",n.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",n.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",n.roughnessMap?"#define USE_ROUGHNESSMAP":"",n.metalnessMap?"#define USE_METALNESSMAP":"",n.alphaMap?"#define USE_ALPHAMAP":"",n.alphaHash?"#define USE_ALPHAHASH":"",n.transmission?"#define USE_TRANSMISSION":"",n.transmissionMap?"#define USE_TRANSMISSIONMAP":"",n.thicknessMap?"#define USE_THICKNESSMAP":"",n.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",n.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",n.mapUv?"#define MAP_UV "+n.mapUv:"",n.alphaMapUv?"#define ALPHAMAP_UV "+n.alphaMapUv:"",n.lightMapUv?"#define LIGHTMAP_UV "+n.lightMapUv:"",n.aoMapUv?"#define AOMAP_UV "+n.aoMapUv:"",n.emissiveMapUv?"#define EMISSIVEMAP_UV "+n.emissiveMapUv:"",n.bumpMapUv?"#define BUMPMAP_UV "+n.bumpMapUv:"",n.normalMapUv?"#define NORMALMAP_UV "+n.normalMapUv:"",n.displacementMapUv?"#define DISPLACEMENTMAP_UV "+n.displacementMapUv:"",n.metalnessMapUv?"#define METALNESSMAP_UV "+n.metalnessMapUv:"",n.roughnessMapUv?"#define ROUGHNESSMAP_UV "+n.roughnessMapUv:"",n.anisotropyMapUv?"#define ANISOTROPYMAP_UV "+n.anisotropyMapUv:"",n.clearcoatMapUv?"#define CLEARCOATMAP_UV "+n.clearcoatMapUv:"",n.clearcoatNormalMapUv?"#define CLEARCOAT_NORMALMAP_UV "+n.clearcoatNormalMapUv:"",n.clearcoatRoughnessMapUv?"#define CLEARCOAT_ROUGHNESSMAP_UV "+n.clearcoatRoughnessMapUv:"",n.iridescenceMapUv?"#define IRIDESCENCEMAP_UV "+n.iridescenceMapUv:"",n.iridescenceThicknessMapUv?"#define IRIDESCENCE_THICKNESSMAP_UV "+n.iridescenceThicknessMapUv:"",n.sheenColorMapUv?"#define SHEEN_COLORMAP_UV "+n.sheenColorMapUv:"",n.sheenRoughnessMapUv?"#define SHEEN_ROUGHNESSMAP_UV "+n.sheenRoughnessMapUv:"",n.specularMapUv?"#define SPECULARMAP_UV "+n.specularMapUv:"",n.specularColorMapUv?"#define SPECULAR_COLORMAP_UV "+n.specularColorMapUv:"",n.specularIntensityMapUv?"#define SPECULAR_INTENSITYMAP_UV "+n.specularIntensityMapUv:"",n.transmissionMapUv?"#define TRANSMISSIONMAP_UV "+n.transmissionMapUv:"",n.thicknessMapUv?"#define THICKNESSMAP_UV "+n.thicknessMapUv:"",n.vertexTangents&&n.flatShading===!1?"#define USE_TANGENT":"",n.vertexColors?"#define USE_COLOR":"",n.vertexAlphas?"#define USE_COLOR_ALPHA":"",n.vertexUv1s?"#define USE_UV1":"",n.vertexUv2s?"#define USE_UV2":"",n.vertexUv3s?"#define USE_UV3":"",n.pointsUvs?"#define USE_POINTS_UV":"",n.flatShading?"#define FLAT_SHADED":"",n.skinning?"#define USE_SKINNING":"",n.morphTargets?"#define USE_MORPHTARGETS":"",n.morphNormals&&n.flatShading===!1?"#define USE_MORPHNORMALS":"",n.morphColors?"#define USE_MORPHCOLORS":"",n.morphTargetsCount>0?"#define MORPHTARGETS_TEXTURE_STRIDE "+n.morphTextureStride:"",n.morphTargetsCount>0?"#define MORPHTARGETS_COUNT "+n.morphTargetsCount:"",n.doubleSided?"#define DOUBLE_SIDED":"",n.flipSided?"#define FLIP_SIDED":"",n.shadowMapEnabled?"#define USE_SHADOWMAP":"",n.shadowMapEnabled?"#define "+v:"",n.sizeAttenuation?"#define USE_SIZEATTENUATION":"",n.numLightProbes>0?"#define USE_LIGHT_PROBES":"",n.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",n.reverseDepthBuffer?"#define USE_REVERSEDEPTHBUF":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","	attribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","	attribute vec3 instanceColor;","#endif","#ifdef USE_INSTANCING_MORPH","	uniform sampler2D morphTexture;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_UV1","	attribute vec2 uv1;","#endif","#ifdef USE_UV2","	attribute vec2 uv2;","#endif","#ifdef USE_UV3","	attribute vec2 uv3;","#endif","#ifdef USE_TANGENT","	attribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","	attribute vec4 color;","#elif defined( USE_COLOR )","	attribute vec3 color;","#endif","#ifdef USE_SKINNING","	attribute vec4 skinIndex;","	attribute vec4 skinWeight;","#endif",`
`].filter(Cu).join(`
`),A=[$S(n),"#define SHADER_TYPE "+n.shaderType,"#define SHADER_NAME "+n.shaderName,U,n.useFog&&n.fog?"#define USE_FOG":"",n.useFog&&n.fogExp2?"#define FOG_EXP2":"",n.alphaToCoverage?"#define ALPHA_TO_COVERAGE":"",n.map?"#define USE_MAP":"",n.matcap?"#define USE_MATCAP":"",n.envMap?"#define USE_ENVMAP":"",n.envMap?"#define "+_:"",n.envMap?"#define "+x:"",n.envMap?"#define "+M:"",b?"#define CUBEUV_TEXEL_WIDTH "+b.texelWidth:"",b?"#define CUBEUV_TEXEL_HEIGHT "+b.texelHeight:"",b?"#define CUBEUV_MAX_MIP "+b.maxMip+".0":"",n.lightMap?"#define USE_LIGHTMAP":"",n.aoMap?"#define USE_AOMAP":"",n.bumpMap?"#define USE_BUMPMAP":"",n.normalMap?"#define USE_NORMALMAP":"",n.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",n.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",n.emissiveMap?"#define USE_EMISSIVEMAP":"",n.anisotropy?"#define USE_ANISOTROPY":"",n.anisotropyMap?"#define USE_ANISOTROPYMAP":"",n.clearcoat?"#define USE_CLEARCOAT":"",n.clearcoatMap?"#define USE_CLEARCOATMAP":"",n.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",n.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",n.dispersion?"#define USE_DISPERSION":"",n.iridescence?"#define USE_IRIDESCENCE":"",n.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",n.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",n.specularMap?"#define USE_SPECULARMAP":"",n.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",n.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",n.roughnessMap?"#define USE_ROUGHNESSMAP":"",n.metalnessMap?"#define USE_METALNESSMAP":"",n.alphaMap?"#define USE_ALPHAMAP":"",n.alphaTest?"#define USE_ALPHATEST":"",n.alphaHash?"#define USE_ALPHAHASH":"",n.sheen?"#define USE_SHEEN":"",n.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",n.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",n.transmission?"#define USE_TRANSMISSION":"",n.transmissionMap?"#define USE_TRANSMISSIONMAP":"",n.thicknessMap?"#define USE_THICKNESSMAP":"",n.vertexTangents&&n.flatShading===!1?"#define USE_TANGENT":"",n.vertexColors||n.instancingColor||n.batchingColor?"#define USE_COLOR":"",n.vertexAlphas?"#define USE_COLOR_ALPHA":"",n.vertexUv1s?"#define USE_UV1":"",n.vertexUv2s?"#define USE_UV2":"",n.vertexUv3s?"#define USE_UV3":"",n.pointsUvs?"#define USE_POINTS_UV":"",n.gradientMap?"#define USE_GRADIENTMAP":"",n.flatShading?"#define FLAT_SHADED":"",n.doubleSided?"#define DOUBLE_SIDED":"",n.flipSided?"#define FLIP_SIDED":"",n.shadowMapEnabled?"#define USE_SHADOWMAP":"",n.shadowMapEnabled?"#define "+v:"",n.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",n.numLightProbes>0?"#define USE_LIGHT_PROBES":"",n.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",n.decodeVideoTextureEmissive?"#define DECODE_VIDEO_TEXTURE_EMISSIVE":"",n.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",n.reverseDepthBuffer?"#define USE_REVERSEDEPTHBUF":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",n.toneMapping!==wo?"#define TONE_MAPPING":"",n.toneMapping!==wo?Ln.tonemapping_pars_fragment:"",n.toneMapping!==wo?PF("toneMapping",n.toneMapping):"",n.dithering?"#define DITHERING":"",n.opaque?"#define OPAQUE":"",Ln.colorspace_pars_fragment,CF("linearToOutputTexel",n.outputColorSpace),IF(),n.useDepthPacking?"#define DEPTH_PACKING "+n.depthPacking:"",`
`].filter(Cu).join(`
`)),d=L0(d),d=qS(d,n),d=YS(d,n),p=L0(p),p=qS(p,n),p=YS(p,n),d=ZS(d),p=ZS(p),n.isRawShaderMaterial!==!0&&(X=`#version 300 es
`,P=[E,"#define attribute in","#define varying out","#define texture2D texture"].join(`
`)+`
`+P,A=["#define varying in",n.glslVersion===eS?"":"layout(location = 0) out highp vec4 pc_fragColor;",n.glslVersion===eS?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join(`
`)+`
`+A);const k=X+P+d,O=X+A+p,z=GS(o,o.VERTEX_SHADER,k),Y=GS(o,o.FRAGMENT_SHADER,O);o.attachShader(L,z),o.attachShader(L,Y),n.index0AttributeName!==void 0?o.bindAttribLocation(L,0,n.index0AttributeName):n.morphTargets===!0&&o.bindAttribLocation(L,0,"position"),o.linkProgram(L);function W(ee){if(a.debug.checkShaderErrors){const Ee=o.getProgramInfoLog(L).trim(),de=o.getShaderInfoLog(z).trim(),be=o.getShaderInfoLog(Y).trim();let Ae=!0,Me=!0;if(o.getProgramParameter(L,o.LINK_STATUS)===!1)if(Ae=!1,typeof a.debug.onShaderError=="function")a.debug.onShaderError(o,L,z,Y);else{const me=XS(o,z,"vertex"),_e=XS(o,Y,"fragment");console.error("THREE.WebGLProgram: Shader Error "+o.getError()+" - VALIDATE_STATUS "+o.getProgramParameter(L,o.VALIDATE_STATUS)+`

Material Name: `+ee.name+`
Material Type: `+ee.type+`

Program Info Log: `+Ee+`
`+me+`
`+_e)}else Ee!==""?console.warn("THREE.WebGLProgram: Program Info Log:",Ee):(de===""||be==="")&&(Me=!1);Me&&(ee.diagnostics={runnable:Ae,programLog:Ee,vertexShader:{log:de,prefix:P},fragmentShader:{log:be,prefix:A}})}o.deleteShader(z),o.deleteShader(Y),te=new Lp(o,L),N=UF(o,L)}let te;this.getUniforms=function(){return te===void 0&&W(this),te};let N;this.getAttributes=function(){return N===void 0&&W(this),N};let B=n.rendererExtensionParallelShaderCompile===!1;return this.isReady=function(){return B===!1&&(B=o.getProgramParameter(L,wF)),B},this.destroy=function(){r.releaseStatesOfProgram(this),o.deleteProgram(L),this.program=void 0},this.type=n.shaderType,this.name=n.shaderName,this.id=TF++,this.cacheKey=t,this.usedTimes=1,this.program=L,this.vertexShader=z,this.fragmentShader=Y,this}let qF=0;class YF{constructor(){this.shaderCache=new Map,this.materialCache=new Map}update(t){const n=t.vertexShader,r=t.fragmentShader,o=this._getShaderStage(n),c=this._getShaderStage(r),d=this._getShaderCacheForMaterial(t);return d.has(o)===!1&&(d.add(o),o.usedTimes++),d.has(c)===!1&&(d.add(c),c.usedTimes++),this}remove(t){const n=this.materialCache.get(t);for(const r of n)r.usedTimes--,r.usedTimes===0&&this.shaderCache.delete(r.code);return this.materialCache.delete(t),this}getVertexShaderID(t){return this._getShaderStage(t.vertexShader).id}getFragmentShaderID(t){return this._getShaderStage(t.fragmentShader).id}dispose(){this.shaderCache.clear(),this.materialCache.clear()}_getShaderCacheForMaterial(t){const n=this.materialCache;let r=n.get(t);return r===void 0&&(r=new Set,n.set(t,r)),r}_getShaderStage(t){const n=this.shaderCache;let r=n.get(t);return r===void 0&&(r=new ZF(t),n.set(t,r)),r}}class ZF{constructor(t){this.id=qF++,this.code=t,this.usedTimes=0}}function $F(a,t,n,r,o,c,d){const p=new ux,v=new YF,_=new Set,x=[],M=o.logarithmicDepthBuffer,b=o.vertexTextures;let E=o.precision;const U={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};function L(N){return _.add(N),N===0?"uv":`uv${N}`}function P(N,B,ee,Ee,de){const be=Ee.fog,Ae=de.geometry,Me=N.isMeshStandardMaterial?Ee.environment:null,me=(N.isMeshStandardMaterial?n:t).get(N.envMap||Me),_e=me&&me.mapping===im?me.image.height:null,Fe=U[N.type];N.precision!==null&&(E=o.getMaxPrecision(N.precision),E!==N.precision&&console.warn("THREE.WebGLProgram.getParameters:",N.precision,"not supported, using",E,"instead."));const He=Ae.morphAttributes.position||Ae.morphAttributes.normal||Ae.morphAttributes.color,nt=He!==void 0?He.length:0;let ut=0;Ae.morphAttributes.position!==void 0&&(ut=1),Ae.morphAttributes.normal!==void 0&&(ut=2),Ae.morphAttributes.color!==void 0&&(ut=3);let Yt,Le,et,Pt;if(Fe){const Xn=sa[Fe];Yt=Xn.vertexShader,Le=Xn.fragmentShader}else Yt=N.vertexShader,Le=N.fragmentShader,v.update(N),et=v.getVertexShaderID(N),Pt=v.getFragmentShaderID(N);const lt=a.getRenderTarget(),$t=a.state.buffers.depth.getReversed(),sn=de.isInstancedMesh===!0,gn=de.isBatchedMesh===!0,ei=!!N.map,vn=!!N.matcap,pn=!!me,fe=!!N.aoMap,Ii=!!N.lightMap,Nn=!!N.bumpMap,Fn=!!N.normalMap,Qt=!!N.displacementMap,ui=!!N.emissiveMap,Kt=!!N.metalnessMap,ae=!!N.roughnessMap,K=N.anisotropy>0,we=N.clearcoat>0,Ye=N.dispersion>0,je=N.iridescence>0,Ve=N.sheen>0,Ot=N.transmission>0,_t=K&&!!N.anisotropyMap,Tt=we&&!!N.clearcoatMap,In=we&&!!N.clearcoatNormalMap,it=we&&!!N.clearcoatRoughnessMap,xt=je&&!!N.iridescenceMap,tn=je&&!!N.iridescenceThicknessMap,kt=Ve&&!!N.sheenColorMap,Nt=Ve&&!!N.sheenRoughnessMap,zn=!!N.specularMap,mn=!!N.specularColorMap,fi=!!N.specularIntensityMap,pe=Ot&&!!N.transmissionMap,mt=Ot&&!!N.thicknessMap,Be=!!N.gradientMap,Ge=!!N.alphaMap,wt=N.alphaTest>0,ft=!!N.alphaHash,yn=!!N.extensions;let vi=wo;N.toneMapped&&(lt===null||lt.isXRRenderTarget===!0)&&(vi=a.toneMapping);const Ai={shaderID:Fe,shaderType:N.type,shaderName:N.name,vertexShader:Yt,fragmentShader:Le,defines:N.defines,customVertexShaderID:et,customFragmentShaderID:Pt,isRawShaderMaterial:N.isRawShaderMaterial===!0,glslVersion:N.glslVersion,precision:E,batching:gn,batchingColor:gn&&de._colorsTexture!==null,instancing:sn,instancingColor:sn&&de.instanceColor!==null,instancingMorph:sn&&de.morphTexture!==null,supportsVertexTextures:b,outputColorSpace:lt===null?a.outputColorSpace:lt.isXRRenderTarget===!0?lt.texture.colorSpace:gh,alphaToCoverage:!!N.alphaToCoverage,map:ei,matcap:vn,envMap:pn,envMapMode:pn&&me.mapping,envMapCubeUVHeight:_e,aoMap:fe,lightMap:Ii,bumpMap:Nn,normalMap:Fn,displacementMap:b&&Qt,emissiveMap:ui,normalMapObjectSpace:Fn&&N.normalMapType===zD,normalMapTangentSpace:Fn&&N.normalMapType===BD,metalnessMap:Kt,roughnessMap:ae,anisotropy:K,anisotropyMap:_t,clearcoat:we,clearcoatMap:Tt,clearcoatNormalMap:In,clearcoatRoughnessMap:it,dispersion:Ye,iridescence:je,iridescenceMap:xt,iridescenceThicknessMap:tn,sheen:Ve,sheenColorMap:kt,sheenRoughnessMap:Nt,specularMap:zn,specularColorMap:mn,specularIntensityMap:fi,transmission:Ot,transmissionMap:pe,thicknessMap:mt,gradientMap:Be,opaque:N.transparent===!1&&N.blending===sh&&N.alphaToCoverage===!1,alphaMap:Ge,alphaTest:wt,alphaHash:ft,combine:N.combine,mapUv:ei&&L(N.map.channel),aoMapUv:fe&&L(N.aoMap.channel),lightMapUv:Ii&&L(N.lightMap.channel),bumpMapUv:Nn&&L(N.bumpMap.channel),normalMapUv:Fn&&L(N.normalMap.channel),displacementMapUv:Qt&&L(N.displacementMap.channel),emissiveMapUv:ui&&L(N.emissiveMap.channel),metalnessMapUv:Kt&&L(N.metalnessMap.channel),roughnessMapUv:ae&&L(N.roughnessMap.channel),anisotropyMapUv:_t&&L(N.anisotropyMap.channel),clearcoatMapUv:Tt&&L(N.clearcoatMap.channel),clearcoatNormalMapUv:In&&L(N.clearcoatNormalMap.channel),clearcoatRoughnessMapUv:it&&L(N.clearcoatRoughnessMap.channel),iridescenceMapUv:xt&&L(N.iridescenceMap.channel),iridescenceThicknessMapUv:tn&&L(N.iridescenceThicknessMap.channel),sheenColorMapUv:kt&&L(N.sheenColorMap.channel),sheenRoughnessMapUv:Nt&&L(N.sheenRoughnessMap.channel),specularMapUv:zn&&L(N.specularMap.channel),specularColorMapUv:mn&&L(N.specularColorMap.channel),specularIntensityMapUv:fi&&L(N.specularIntensityMap.channel),transmissionMapUv:pe&&L(N.transmissionMap.channel),thicknessMapUv:mt&&L(N.thicknessMap.channel),alphaMapUv:Ge&&L(N.alphaMap.channel),vertexTangents:!!Ae.attributes.tangent&&(Fn||K),vertexColors:N.vertexColors,vertexAlphas:N.vertexColors===!0&&!!Ae.attributes.color&&Ae.attributes.color.itemSize===4,pointsUvs:de.isPoints===!0&&!!Ae.attributes.uv&&(ei||Ge),fog:!!be,useFog:N.fog===!0,fogExp2:!!be&&be.isFogExp2,flatShading:N.flatShading===!0,sizeAttenuation:N.sizeAttenuation===!0,logarithmicDepthBuffer:M,reverseDepthBuffer:$t,skinning:de.isSkinnedMesh===!0,morphTargets:Ae.morphAttributes.position!==void 0,morphNormals:Ae.morphAttributes.normal!==void 0,morphColors:Ae.morphAttributes.color!==void 0,morphTargetsCount:nt,morphTextureStride:ut,numDirLights:B.directional.length,numPointLights:B.point.length,numSpotLights:B.spot.length,numSpotLightMaps:B.spotLightMap.length,numRectAreaLights:B.rectArea.length,numHemiLights:B.hemi.length,numDirLightShadows:B.directionalShadowMap.length,numPointLightShadows:B.pointShadowMap.length,numSpotLightShadows:B.spotShadowMap.length,numSpotLightShadowsWithMaps:B.numSpotLightShadowsWithMaps,numLightProbes:B.numLightProbes,numClippingPlanes:d.numPlanes,numClipIntersection:d.numIntersection,dithering:N.dithering,shadowMapEnabled:a.shadowMap.enabled&&ee.length>0,shadowMapType:a.shadowMap.type,toneMapping:vi,decodeVideoTexture:ei&&N.map.isVideoTexture===!0&&ni.getTransfer(N.map.colorSpace)===pi,decodeVideoTextureEmissive:ui&&N.emissiveMap.isVideoTexture===!0&&ni.getTransfer(N.emissiveMap.colorSpace)===pi,premultipliedAlpha:N.premultipliedAlpha,doubleSided:N.side===ka,flipSided:N.side===$r,useDepthPacking:N.depthPacking>=0,depthPacking:N.depthPacking||0,index0AttributeName:N.index0AttributeName,extensionClipCullDistance:yn&&N.extensions.clipCullDistance===!0&&r.has("WEBGL_clip_cull_distance"),extensionMultiDraw:(yn&&N.extensions.multiDraw===!0||gn)&&r.has("WEBGL_multi_draw"),rendererExtensionParallelShaderCompile:r.has("KHR_parallel_shader_compile"),customProgramCacheKey:N.customProgramCacheKey()};return Ai.vertexUv1s=_.has(1),Ai.vertexUv2s=_.has(2),Ai.vertexUv3s=_.has(3),_.clear(),Ai}function A(N){const B=[];if(N.shaderID?B.push(N.shaderID):(B.push(N.customVertexShaderID),B.push(N.customFragmentShaderID)),N.defines!==void 0)for(const ee in N.defines)B.push(ee),B.push(N.defines[ee]);return N.isRawShaderMaterial===!1&&(X(B,N),k(B,N),B.push(a.outputColorSpace)),B.push(N.customProgramCacheKey),B.join()}function X(N,B){N.push(B.precision),N.push(B.outputColorSpace),N.push(B.envMapMode),N.push(B.envMapCubeUVHeight),N.push(B.mapUv),N.push(B.alphaMapUv),N.push(B.lightMapUv),N.push(B.aoMapUv),N.push(B.bumpMapUv),N.push(B.normalMapUv),N.push(B.displacementMapUv),N.push(B.emissiveMapUv),N.push(B.metalnessMapUv),N.push(B.roughnessMapUv),N.push(B.anisotropyMapUv),N.push(B.clearcoatMapUv),N.push(B.clearcoatNormalMapUv),N.push(B.clearcoatRoughnessMapUv),N.push(B.iridescenceMapUv),N.push(B.iridescenceThicknessMapUv),N.push(B.sheenColorMapUv),N.push(B.sheenRoughnessMapUv),N.push(B.specularMapUv),N.push(B.specularColorMapUv),N.push(B.specularIntensityMapUv),N.push(B.transmissionMapUv),N.push(B.thicknessMapUv),N.push(B.combine),N.push(B.fogExp2),N.push(B.sizeAttenuation),N.push(B.morphTargetsCount),N.push(B.morphAttributeCount),N.push(B.numDirLights),N.push(B.numPointLights),N.push(B.numSpotLights),N.push(B.numSpotLightMaps),N.push(B.numHemiLights),N.push(B.numRectAreaLights),N.push(B.numDirLightShadows),N.push(B.numPointLightShadows),N.push(B.numSpotLightShadows),N.push(B.numSpotLightShadowsWithMaps),N.push(B.numLightProbes),N.push(B.shadowMapType),N.push(B.toneMapping),N.push(B.numClippingPlanes),N.push(B.numClipIntersection),N.push(B.depthPacking)}function k(N,B){p.disableAll(),B.supportsVertexTextures&&p.enable(0),B.instancing&&p.enable(1),B.instancingColor&&p.enable(2),B.instancingMorph&&p.enable(3),B.matcap&&p.enable(4),B.envMap&&p.enable(5),B.normalMapObjectSpace&&p.enable(6),B.normalMapTangentSpace&&p.enable(7),B.clearcoat&&p.enable(8),B.iridescence&&p.enable(9),B.alphaTest&&p.enable(10),B.vertexColors&&p.enable(11),B.vertexAlphas&&p.enable(12),B.vertexUv1s&&p.enable(13),B.vertexUv2s&&p.enable(14),B.vertexUv3s&&p.enable(15),B.vertexTangents&&p.enable(16),B.anisotropy&&p.enable(17),B.alphaHash&&p.enable(18),B.batching&&p.enable(19),B.dispersion&&p.enable(20),B.batchingColor&&p.enable(21),N.push(p.mask),p.disableAll(),B.fog&&p.enable(0),B.useFog&&p.enable(1),B.flatShading&&p.enable(2),B.logarithmicDepthBuffer&&p.enable(3),B.reverseDepthBuffer&&p.enable(4),B.skinning&&p.enable(5),B.morphTargets&&p.enable(6),B.morphNormals&&p.enable(7),B.morphColors&&p.enable(8),B.premultipliedAlpha&&p.enable(9),B.shadowMapEnabled&&p.enable(10),B.doubleSided&&p.enable(11),B.flipSided&&p.enable(12),B.useDepthPacking&&p.enable(13),B.dithering&&p.enable(14),B.transmission&&p.enable(15),B.sheen&&p.enable(16),B.opaque&&p.enable(17),B.pointsUvs&&p.enable(18),B.decodeVideoTexture&&p.enable(19),B.decodeVideoTextureEmissive&&p.enable(20),B.alphaToCoverage&&p.enable(21),N.push(p.mask)}function O(N){const B=U[N.type];let ee;if(B){const Ee=sa[B];ee=_L.clone(Ee.uniforms)}else ee=N.uniforms;return ee}function z(N,B){let ee;for(let Ee=0,de=x.length;Ee<de;Ee++){const be=x[Ee];if(be.cacheKey===B){ee=be,++ee.usedTimes;break}}return ee===void 0&&(ee=new XF(a,B,N,c),x.push(ee)),ee}function Y(N){if(--N.usedTimes===0){const B=x.indexOf(N);x[B]=x[x.length-1],x.pop(),N.destroy()}}function W(N){v.remove(N)}function te(){v.dispose()}return{getParameters:P,getProgramCacheKey:A,getUniforms:O,acquireProgram:z,releaseProgram:Y,releaseShaderCache:W,programs:x,dispose:te}}function KF(){let a=new WeakMap;function t(d){return a.has(d)}function n(d){let p=a.get(d);return p===void 0&&(p={},a.set(d,p)),p}function r(d){a.delete(d)}function o(d,p,v){a.get(d)[p]=v}function c(){a=new WeakMap}return{has:t,get:n,remove:r,update:o,dispose:c}}function JF(a,t){return a.groupOrder!==t.groupOrder?a.groupOrder-t.groupOrder:a.renderOrder!==t.renderOrder?a.renderOrder-t.renderOrder:a.material.id!==t.material.id?a.material.id-t.material.id:a.z!==t.z?a.z-t.z:a.id-t.id}function KS(a,t){return a.groupOrder!==t.groupOrder?a.groupOrder-t.groupOrder:a.renderOrder!==t.renderOrder?a.renderOrder-t.renderOrder:a.z!==t.z?t.z-a.z:a.id-t.id}function JS(){const a=[];let t=0;const n=[],r=[],o=[];function c(){t=0,n.length=0,r.length=0,o.length=0}function d(M,b,E,U,L,P){let A=a[t];return A===void 0?(A={id:M.id,object:M,geometry:b,material:E,groupOrder:U,renderOrder:M.renderOrder,z:L,group:P},a[t]=A):(A.id=M.id,A.object=M,A.geometry=b,A.material=E,A.groupOrder=U,A.renderOrder=M.renderOrder,A.z=L,A.group=P),t++,A}function p(M,b,E,U,L,P){const A=d(M,b,E,U,L,P);E.transmission>0?r.push(A):E.transparent===!0?o.push(A):n.push(A)}function v(M,b,E,U,L,P){const A=d(M,b,E,U,L,P);E.transmission>0?r.unshift(A):E.transparent===!0?o.unshift(A):n.unshift(A)}function _(M,b){n.length>1&&n.sort(M||JF),r.length>1&&r.sort(b||KS),o.length>1&&o.sort(b||KS)}function x(){for(let M=t,b=a.length;M<b;M++){const E=a[M];if(E.id===null)break;E.id=null,E.object=null,E.geometry=null,E.material=null,E.group=null}}return{opaque:n,transmissive:r,transparent:o,init:c,push:p,unshift:v,finish:x,sort:_}}function jF(){let a=new WeakMap;function t(r,o){const c=a.get(r);let d;return c===void 0?(d=new JS,a.set(r,[d])):o>=c.length?(d=new JS,c.push(d)):d=c[o],d}function n(){a=new WeakMap}return{get:t,dispose:n}}function QF(){const a={};return{get:function(t){if(a[t.id]!==void 0)return a[t.id];let n;switch(t.type){case"DirectionalLight":n={direction:new ue,color:new Qn};break;case"SpotLight":n={position:new ue,direction:new ue,color:new Qn,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":n={position:new ue,color:new Qn,distance:0,decay:0};break;case"HemisphereLight":n={direction:new ue,skyColor:new Qn,groundColor:new Qn};break;case"RectAreaLight":n={color:new Qn,position:new ue,halfWidth:new ue,halfHeight:new ue};break}return a[t.id]=n,n}}}function eO(){const a={};return{get:function(t){if(a[t.id]!==void 0)return a[t.id];let n;switch(t.type){case"DirectionalLight":n={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new ln};break;case"SpotLight":n={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new ln};break;case"PointLight":n={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new ln,shadowCameraNear:1,shadowCameraFar:1e3};break}return a[t.id]=n,n}}}let tO=0;function nO(a,t){return(t.castShadow?2:0)-(a.castShadow?2:0)+(t.map?1:0)-(a.map?1:0)}function iO(a){const t=new QF,n=eO(),r={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1,numSpotMaps:-1,numLightProbes:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotLightMap:[],spotShadow:[],spotShadowMap:[],spotLightMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],numSpotLightShadowsWithMaps:0,numLightProbes:0};for(let _=0;_<9;_++)r.probe.push(new ue);const o=new ue,c=new Ti,d=new Ti;function p(_){let x=0,M=0,b=0;for(let N=0;N<9;N++)r.probe[N].set(0,0,0);let E=0,U=0,L=0,P=0,A=0,X=0,k=0,O=0,z=0,Y=0,W=0;_.sort(nO);for(let N=0,B=_.length;N<B;N++){const ee=_[N],Ee=ee.color,de=ee.intensity,be=ee.distance,Ae=ee.shadow&&ee.shadow.map?ee.shadow.map.texture:null;if(ee.isAmbientLight)x+=Ee.r*de,M+=Ee.g*de,b+=Ee.b*de;else if(ee.isLightProbe){for(let Me=0;Me<9;Me++)r.probe[Me].addScaledVector(ee.sh.coefficients[Me],de);W++}else if(ee.isDirectionalLight){const Me=t.get(ee);if(Me.color.copy(ee.color).multiplyScalar(ee.intensity),ee.castShadow){const me=ee.shadow,_e=n.get(ee);_e.shadowIntensity=me.intensity,_e.shadowBias=me.bias,_e.shadowNormalBias=me.normalBias,_e.shadowRadius=me.radius,_e.shadowMapSize=me.mapSize,r.directionalShadow[E]=_e,r.directionalShadowMap[E]=Ae,r.directionalShadowMatrix[E]=ee.shadow.matrix,X++}r.directional[E]=Me,E++}else if(ee.isSpotLight){const Me=t.get(ee);Me.position.setFromMatrixPosition(ee.matrixWorld),Me.color.copy(Ee).multiplyScalar(de),Me.distance=be,Me.coneCos=Math.cos(ee.angle),Me.penumbraCos=Math.cos(ee.angle*(1-ee.penumbra)),Me.decay=ee.decay,r.spot[L]=Me;const me=ee.shadow;if(ee.map&&(r.spotLightMap[z]=ee.map,z++,me.updateMatrices(ee),ee.castShadow&&Y++),r.spotLightMatrix[L]=me.matrix,ee.castShadow){const _e=n.get(ee);_e.shadowIntensity=me.intensity,_e.shadowBias=me.bias,_e.shadowNormalBias=me.normalBias,_e.shadowRadius=me.radius,_e.shadowMapSize=me.mapSize,r.spotShadow[L]=_e,r.spotShadowMap[L]=Ae,O++}L++}else if(ee.isRectAreaLight){const Me=t.get(ee);Me.color.copy(Ee).multiplyScalar(de),Me.halfWidth.set(ee.width*.5,0,0),Me.halfHeight.set(0,ee.height*.5,0),r.rectArea[P]=Me,P++}else if(ee.isPointLight){const Me=t.get(ee);if(Me.color.copy(ee.color).multiplyScalar(ee.intensity),Me.distance=ee.distance,Me.decay=ee.decay,ee.castShadow){const me=ee.shadow,_e=n.get(ee);_e.shadowIntensity=me.intensity,_e.shadowBias=me.bias,_e.shadowNormalBias=me.normalBias,_e.shadowRadius=me.radius,_e.shadowMapSize=me.mapSize,_e.shadowCameraNear=me.camera.near,_e.shadowCameraFar=me.camera.far,r.pointShadow[U]=_e,r.pointShadowMap[U]=Ae,r.pointShadowMatrix[U]=ee.shadow.matrix,k++}r.point[U]=Me,U++}else if(ee.isHemisphereLight){const Me=t.get(ee);Me.skyColor.copy(ee.color).multiplyScalar(de),Me.groundColor.copy(ee.groundColor).multiplyScalar(de),r.hemi[A]=Me,A++}}P>0&&(a.has("OES_texture_float_linear")===!0?(r.rectAreaLTC1=Mt.LTC_FLOAT_1,r.rectAreaLTC2=Mt.LTC_FLOAT_2):(r.rectAreaLTC1=Mt.LTC_HALF_1,r.rectAreaLTC2=Mt.LTC_HALF_2)),r.ambient[0]=x,r.ambient[1]=M,r.ambient[2]=b;const te=r.hash;(te.directionalLength!==E||te.pointLength!==U||te.spotLength!==L||te.rectAreaLength!==P||te.hemiLength!==A||te.numDirectionalShadows!==X||te.numPointShadows!==k||te.numSpotShadows!==O||te.numSpotMaps!==z||te.numLightProbes!==W)&&(r.directional.length=E,r.spot.length=L,r.rectArea.length=P,r.point.length=U,r.hemi.length=A,r.directionalShadow.length=X,r.directionalShadowMap.length=X,r.pointShadow.length=k,r.pointShadowMap.length=k,r.spotShadow.length=O,r.spotShadowMap.length=O,r.directionalShadowMatrix.length=X,r.pointShadowMatrix.length=k,r.spotLightMatrix.length=O+z-Y,r.spotLightMap.length=z,r.numSpotLightShadowsWithMaps=Y,r.numLightProbes=W,te.directionalLength=E,te.pointLength=U,te.spotLength=L,te.rectAreaLength=P,te.hemiLength=A,te.numDirectionalShadows=X,te.numPointShadows=k,te.numSpotShadows=O,te.numSpotMaps=z,te.numLightProbes=W,r.version=tO++)}function v(_,x){let M=0,b=0,E=0,U=0,L=0;const P=x.matrixWorldInverse;for(let A=0,X=_.length;A<X;A++){const k=_[A];if(k.isDirectionalLight){const O=r.directional[M];O.direction.setFromMatrixPosition(k.matrixWorld),o.setFromMatrixPosition(k.target.matrixWorld),O.direction.sub(o),O.direction.transformDirection(P),M++}else if(k.isSpotLight){const O=r.spot[E];O.position.setFromMatrixPosition(k.matrixWorld),O.position.applyMatrix4(P),O.direction.setFromMatrixPosition(k.matrixWorld),o.setFromMatrixPosition(k.target.matrixWorld),O.direction.sub(o),O.direction.transformDirection(P),E++}else if(k.isRectAreaLight){const O=r.rectArea[U];O.position.setFromMatrixPosition(k.matrixWorld),O.position.applyMatrix4(P),d.identity(),c.copy(k.matrixWorld),c.premultiply(P),d.extractRotation(c),O.halfWidth.set(k.width*.5,0,0),O.halfHeight.set(0,k.height*.5,0),O.halfWidth.applyMatrix4(d),O.halfHeight.applyMatrix4(d),U++}else if(k.isPointLight){const O=r.point[b];O.position.setFromMatrixPosition(k.matrixWorld),O.position.applyMatrix4(P),b++}else if(k.isHemisphereLight){const O=r.hemi[L];O.direction.setFromMatrixPosition(k.matrixWorld),O.direction.transformDirection(P),L++}}}return{setup:p,setupView:v,state:r}}function jS(a){const t=new iO(a),n=[],r=[];function o(x){_.camera=x,n.length=0,r.length=0}function c(x){n.push(x)}function d(x){r.push(x)}function p(){t.setup(n)}function v(x){t.setupView(n,x)}const _={lightsArray:n,shadowsArray:r,camera:null,lights:t,transmissionRenderTarget:{}};return{init:o,state:_,setupLights:p,setupLightsView:v,pushLight:c,pushShadow:d}}function rO(a){let t=new WeakMap;function n(o,c=0){const d=t.get(o);let p;return d===void 0?(p=new jS(a),t.set(o,[p])):c>=d.length?(p=new jS(a),d.push(p)):p=d[c],p}function r(){t=new WeakMap}return{get:n,dispose:r}}const sO=`void main() {
	gl_Position = vec4( position, 1.0 );
}`,aO=`uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;
#include <packing>
void main() {
	const float samples = float( VSM_SAMPLES );
	float mean = 0.0;
	float squared_mean = 0.0;
	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );
	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;
	for ( float i = 0.0; i < samples; i ++ ) {
		float uvOffset = uvStart + i * uvStride;
		#ifdef HORIZONTAL_PASS
			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );
			mean += distribution.x;
			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;
		#else
			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );
			mean += depth;
			squared_mean += depth * depth;
		#endif
	}
	mean = mean / samples;
	squared_mean = squared_mean / samples;
	float std_dev = sqrt( squared_mean - mean * mean );
	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );
}`;function oO(a,t,n){let r=new FE;const o=new ln,c=new ln,d=new Vi,p=new RL({depthPacking:OD}),v=new CL,_={},x=n.maxTextureSize,M={[Do]:$r,[$r]:Do,[ka]:ka},b=new Lo({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new ln},radius:{value:4}},vertexShader:sO,fragmentShader:aO}),E=b.clone();E.defines.HORIZONTAL_PASS=1;const U=new Er;U.setAttribute("position",new ds(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const L=new As(U,b),P=this;this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=uE;let A=this.type;this.render=function(Y,W,te){if(P.enabled===!1||P.autoUpdate===!1&&P.needsUpdate===!1||Y.length===0)return;const N=a.getRenderTarget(),B=a.getActiveCubeFace(),ee=a.getActiveMipmapLevel(),Ee=a.state;Ee.setBlending(Eo),Ee.buffers.color.setClear(1,1,1,1),Ee.buffers.depth.setTest(!0),Ee.setScissorTest(!1);const de=A!==Na&&this.type===Na,be=A===Na&&this.type!==Na;for(let Ae=0,Me=Y.length;Ae<Me;Ae++){const me=Y[Ae],_e=me.shadow;if(_e===void 0){console.warn("THREE.WebGLShadowMap:",me,"has no shadow.");continue}if(_e.autoUpdate===!1&&_e.needsUpdate===!1)continue;o.copy(_e.mapSize);const Fe=_e.getFrameExtents();if(o.multiply(Fe),c.copy(_e.mapSize),(o.x>x||o.y>x)&&(o.x>x&&(c.x=Math.floor(x/Fe.x),o.x=c.x*Fe.x,_e.mapSize.x=c.x),o.y>x&&(c.y=Math.floor(x/Fe.y),o.y=c.y*Fe.y,_e.mapSize.y=c.y)),_e.map===null||de===!0||be===!0){const nt=this.type!==Na?{minFilter:$s,magFilter:$s}:{};_e.map!==null&&_e.map.dispose(),_e.map=new zl(o.x,o.y,nt),_e.map.texture.name=me.name+".shadowMap",_e.camera.updateProjectionMatrix()}a.setRenderTarget(_e.map),a.clear();const He=_e.getViewportCount();for(let nt=0;nt<He;nt++){const ut=_e.getViewport(nt);d.set(c.x*ut.x,c.y*ut.y,c.x*ut.z,c.y*ut.w),Ee.viewport(d),_e.updateMatrices(me,nt),r=_e.getFrustum(),O(W,te,_e.camera,me,this.type)}_e.isPointLightShadow!==!0&&this.type===Na&&X(_e,te),_e.needsUpdate=!1}A=this.type,P.needsUpdate=!1,a.setRenderTarget(N,B,ee)};function X(Y,W){const te=t.update(L);b.defines.VSM_SAMPLES!==Y.blurSamples&&(b.defines.VSM_SAMPLES=Y.blurSamples,E.defines.VSM_SAMPLES=Y.blurSamples,b.needsUpdate=!0,E.needsUpdate=!0),Y.mapPass===null&&(Y.mapPass=new zl(o.x,o.y)),b.uniforms.shadow_pass.value=Y.map.texture,b.uniforms.resolution.value=Y.mapSize,b.uniforms.radius.value=Y.radius,a.setRenderTarget(Y.mapPass),a.clear(),a.renderBufferDirect(W,null,te,b,L,null),E.uniforms.shadow_pass.value=Y.mapPass.texture,E.uniforms.resolution.value=Y.mapSize,E.uniforms.radius.value=Y.radius,a.setRenderTarget(Y.map),a.clear(),a.renderBufferDirect(W,null,te,E,L,null)}function k(Y,W,te,N){let B=null;const ee=te.isPointLight===!0?Y.customDistanceMaterial:Y.customDepthMaterial;if(ee!==void 0)B=ee;else if(B=te.isPointLight===!0?v:p,a.localClippingEnabled&&W.clipShadows===!0&&Array.isArray(W.clippingPlanes)&&W.clippingPlanes.length!==0||W.displacementMap&&W.displacementScale!==0||W.alphaMap&&W.alphaTest>0||W.map&&W.alphaTest>0){const Ee=B.uuid,de=W.uuid;let be=_[Ee];be===void 0&&(be={},_[Ee]=be);let Ae=be[de];Ae===void 0&&(Ae=B.clone(),be[de]=Ae,W.addEventListener("dispose",z)),B=Ae}if(B.visible=W.visible,B.wireframe=W.wireframe,N===Na?B.side=W.shadowSide!==null?W.shadowSide:W.side:B.side=W.shadowSide!==null?W.shadowSide:M[W.side],B.alphaMap=W.alphaMap,B.alphaTest=W.alphaTest,B.map=W.map,B.clipShadows=W.clipShadows,B.clippingPlanes=W.clippingPlanes,B.clipIntersection=W.clipIntersection,B.displacementMap=W.displacementMap,B.displacementScale=W.displacementScale,B.displacementBias=W.displacementBias,B.wireframeLinewidth=W.wireframeLinewidth,B.linewidth=W.linewidth,te.isPointLight===!0&&B.isMeshDistanceMaterial===!0){const Ee=a.properties.get(B);Ee.light=te}return B}function O(Y,W,te,N,B){if(Y.visible===!1)return;if(Y.layers.test(W.layers)&&(Y.isMesh||Y.isLine||Y.isPoints)&&(Y.castShadow||Y.receiveShadow&&B===Na)&&(!Y.frustumCulled||r.intersectsObject(Y))){Y.modelViewMatrix.multiplyMatrices(te.matrixWorldInverse,Y.matrixWorld);const de=t.update(Y),be=Y.material;if(Array.isArray(be)){const Ae=de.groups;for(let Me=0,me=Ae.length;Me<me;Me++){const _e=Ae[Me],Fe=be[_e.materialIndex];if(Fe&&Fe.visible){const He=k(Y,Fe,N,B);Y.onBeforeShadow(a,Y,W,te,de,He,_e),a.renderBufferDirect(te,null,de,He,Y,_e),Y.onAfterShadow(a,Y,W,te,de,He,_e)}}}else if(be.visible){const Ae=k(Y,be,N,B);Y.onBeforeShadow(a,Y,W,te,de,Ae,null),a.renderBufferDirect(te,null,de,Ae,Y,null),Y.onAfterShadow(a,Y,W,te,de,Ae,null)}}const Ee=Y.children;for(let de=0,be=Ee.length;de<be;de++)O(Ee[de],W,te,N,B)}function z(Y){Y.target.removeEventListener("dispose",z);for(const te in _){const N=_[te],B=Y.target.uuid;B in N&&(N[B].dispose(),delete N[B])}}}const lO={[Yg]:Zg,[$g]:jg,[Kg]:Qg,[fh]:Jg,[Zg]:Yg,[jg]:$g,[Qg]:Kg,[Jg]:fh};function cO(a,t){function n(){let pe=!1;const mt=new Vi;let Be=null;const Ge=new Vi(0,0,0,0);return{setMask:function(wt){Be!==wt&&!pe&&(a.colorMask(wt,wt,wt,wt),Be=wt)},setLocked:function(wt){pe=wt},setClear:function(wt,ft,yn,vi,Ai){Ai===!0&&(wt*=vi,ft*=vi,yn*=vi),mt.set(wt,ft,yn,vi),Ge.equals(mt)===!1&&(a.clearColor(wt,ft,yn,vi),Ge.copy(mt))},reset:function(){pe=!1,Be=null,Ge.set(-1,0,0,0)}}}function r(){let pe=!1,mt=!1,Be=null,Ge=null,wt=null;return{setReversed:function(ft){if(mt!==ft){const yn=t.get("EXT_clip_control");mt?yn.clipControlEXT(yn.LOWER_LEFT_EXT,yn.ZERO_TO_ONE_EXT):yn.clipControlEXT(yn.LOWER_LEFT_EXT,yn.NEGATIVE_ONE_TO_ONE_EXT);const vi=wt;wt=null,this.setClear(vi)}mt=ft},getReversed:function(){return mt},setTest:function(ft){ft?lt(a.DEPTH_TEST):$t(a.DEPTH_TEST)},setMask:function(ft){Be!==ft&&!pe&&(a.depthMask(ft),Be=ft)},setFunc:function(ft){if(mt&&(ft=lO[ft]),Ge!==ft){switch(ft){case Yg:a.depthFunc(a.NEVER);break;case Zg:a.depthFunc(a.ALWAYS);break;case $g:a.depthFunc(a.LESS);break;case fh:a.depthFunc(a.LEQUAL);break;case Kg:a.depthFunc(a.EQUAL);break;case Jg:a.depthFunc(a.GEQUAL);break;case jg:a.depthFunc(a.GREATER);break;case Qg:a.depthFunc(a.NOTEQUAL);break;default:a.depthFunc(a.LEQUAL)}Ge=ft}},setLocked:function(ft){pe=ft},setClear:function(ft){wt!==ft&&(mt&&(ft=1-ft),a.clearDepth(ft),wt=ft)},reset:function(){pe=!1,Be=null,Ge=null,wt=null,mt=!1}}}function o(){let pe=!1,mt=null,Be=null,Ge=null,wt=null,ft=null,yn=null,vi=null,Ai=null;return{setTest:function(Xn){pe||(Xn?lt(a.STENCIL_TEST):$t(a.STENCIL_TEST))},setMask:function(Xn){mt!==Xn&&!pe&&(a.stencilMask(Xn),mt=Xn)},setFunc:function(Xn,Bi,Si){(Be!==Xn||Ge!==Bi||wt!==Si)&&(a.stencilFunc(Xn,Bi,Si),Be=Xn,Ge=Bi,wt=Si)},setOp:function(Xn,Bi,Si){(ft!==Xn||yn!==Bi||vi!==Si)&&(a.stencilOp(Xn,Bi,Si),ft=Xn,yn=Bi,vi=Si)},setLocked:function(Xn){pe=Xn},setClear:function(Xn){Ai!==Xn&&(a.clearStencil(Xn),Ai=Xn)},reset:function(){pe=!1,mt=null,Be=null,Ge=null,wt=null,ft=null,yn=null,vi=null,Ai=null}}}const c=new n,d=new r,p=new o,v=new WeakMap,_=new WeakMap;let x={},M={},b=new WeakMap,E=[],U=null,L=!1,P=null,A=null,X=null,k=null,O=null,z=null,Y=null,W=new Qn(0,0,0),te=0,N=!1,B=null,ee=null,Ee=null,de=null,be=null;const Ae=a.getParameter(a.MAX_COMBINED_TEXTURE_IMAGE_UNITS);let Me=!1,me=0;const _e=a.getParameter(a.VERSION);_e.indexOf("WebGL")!==-1?(me=parseFloat(/^WebGL (\d)/.exec(_e)[1]),Me=me>=1):_e.indexOf("OpenGL ES")!==-1&&(me=parseFloat(/^OpenGL ES (\d)/.exec(_e)[1]),Me=me>=2);let Fe=null,He={};const nt=a.getParameter(a.SCISSOR_BOX),ut=a.getParameter(a.VIEWPORT),Yt=new Vi().fromArray(nt),Le=new Vi().fromArray(ut);function et(pe,mt,Be,Ge){const wt=new Uint8Array(4),ft=a.createTexture();a.bindTexture(pe,ft),a.texParameteri(pe,a.TEXTURE_MIN_FILTER,a.NEAREST),a.texParameteri(pe,a.TEXTURE_MAG_FILTER,a.NEAREST);for(let yn=0;yn<Be;yn++)pe===a.TEXTURE_3D||pe===a.TEXTURE_2D_ARRAY?a.texImage3D(mt,0,a.RGBA,1,1,Ge,0,a.RGBA,a.UNSIGNED_BYTE,wt):a.texImage2D(mt+yn,0,a.RGBA,1,1,0,a.RGBA,a.UNSIGNED_BYTE,wt);return ft}const Pt={};Pt[a.TEXTURE_2D]=et(a.TEXTURE_2D,a.TEXTURE_2D,1),Pt[a.TEXTURE_CUBE_MAP]=et(a.TEXTURE_CUBE_MAP,a.TEXTURE_CUBE_MAP_POSITIVE_X,6),Pt[a.TEXTURE_2D_ARRAY]=et(a.TEXTURE_2D_ARRAY,a.TEXTURE_2D_ARRAY,1,1),Pt[a.TEXTURE_3D]=et(a.TEXTURE_3D,a.TEXTURE_3D,1,1),c.setClear(0,0,0,1),d.setClear(1),p.setClear(0),lt(a.DEPTH_TEST),d.setFunc(fh),Nn(!1),Fn($M),lt(a.CULL_FACE),fe(Eo);function lt(pe){x[pe]!==!0&&(a.enable(pe),x[pe]=!0)}function $t(pe){x[pe]!==!1&&(a.disable(pe),x[pe]=!1)}function sn(pe,mt){return M[pe]!==mt?(a.bindFramebuffer(pe,mt),M[pe]=mt,pe===a.DRAW_FRAMEBUFFER&&(M[a.FRAMEBUFFER]=mt),pe===a.FRAMEBUFFER&&(M[a.DRAW_FRAMEBUFFER]=mt),!0):!1}function gn(pe,mt){let Be=E,Ge=!1;if(pe){Be=b.get(mt),Be===void 0&&(Be=[],b.set(mt,Be));const wt=pe.textures;if(Be.length!==wt.length||Be[0]!==a.COLOR_ATTACHMENT0){for(let ft=0,yn=wt.length;ft<yn;ft++)Be[ft]=a.COLOR_ATTACHMENT0+ft;Be.length=wt.length,Ge=!0}}else Be[0]!==a.BACK&&(Be[0]=a.BACK,Ge=!0);Ge&&a.drawBuffers(Be)}function ei(pe){return U!==pe?(a.useProgram(pe),U=pe,!0):!1}const vn={[Tl]:a.FUNC_ADD,[cD]:a.FUNC_SUBTRACT,[hD]:a.FUNC_REVERSE_SUBTRACT};vn[uD]=a.MIN,vn[fD]=a.MAX;const pn={[dD]:a.ZERO,[pD]:a.ONE,[mD]:a.SRC_COLOR,[Xg]:a.SRC_ALPHA,[MD]:a.SRC_ALPHA_SATURATE,[vD]:a.DST_COLOR,[gD]:a.DST_ALPHA,[_D]:a.ONE_MINUS_SRC_COLOR,[qg]:a.ONE_MINUS_SRC_ALPHA,[yD]:a.ONE_MINUS_DST_COLOR,[xD]:a.ONE_MINUS_DST_ALPHA,[SD]:a.CONSTANT_COLOR,[bD]:a.ONE_MINUS_CONSTANT_COLOR,[ED]:a.CONSTANT_ALPHA,[wD]:a.ONE_MINUS_CONSTANT_ALPHA};function fe(pe,mt,Be,Ge,wt,ft,yn,vi,Ai,Xn){if(pe===Eo){L===!0&&($t(a.BLEND),L=!1);return}if(L===!1&&(lt(a.BLEND),L=!0),pe!==lD){if(pe!==P||Xn!==N){if((A!==Tl||O!==Tl)&&(a.blendEquation(a.FUNC_ADD),A=Tl,O=Tl),Xn)switch(pe){case sh:a.blendFuncSeparate(a.ONE,a.ONE_MINUS_SRC_ALPHA,a.ONE,a.ONE_MINUS_SRC_ALPHA);break;case KM:a.blendFunc(a.ONE,a.ONE);break;case JM:a.blendFuncSeparate(a.ZERO,a.ONE_MINUS_SRC_COLOR,a.ZERO,a.ONE);break;case jM:a.blendFuncSeparate(a.ZERO,a.SRC_COLOR,a.ZERO,a.SRC_ALPHA);break;default:console.error("THREE.WebGLState: Invalid blending: ",pe);break}else switch(pe){case sh:a.blendFuncSeparate(a.SRC_ALPHA,a.ONE_MINUS_SRC_ALPHA,a.ONE,a.ONE_MINUS_SRC_ALPHA);break;case KM:a.blendFunc(a.SRC_ALPHA,a.ONE);break;case JM:a.blendFuncSeparate(a.ZERO,a.ONE_MINUS_SRC_COLOR,a.ZERO,a.ONE);break;case jM:a.blendFunc(a.ZERO,a.SRC_COLOR);break;default:console.error("THREE.WebGLState: Invalid blending: ",pe);break}X=null,k=null,z=null,Y=null,W.set(0,0,0),te=0,P=pe,N=Xn}return}wt=wt||mt,ft=ft||Be,yn=yn||Ge,(mt!==A||wt!==O)&&(a.blendEquationSeparate(vn[mt],vn[wt]),A=mt,O=wt),(Be!==X||Ge!==k||ft!==z||yn!==Y)&&(a.blendFuncSeparate(pn[Be],pn[Ge],pn[ft],pn[yn]),X=Be,k=Ge,z=ft,Y=yn),(vi.equals(W)===!1||Ai!==te)&&(a.blendColor(vi.r,vi.g,vi.b,Ai),W.copy(vi),te=Ai),P=pe,N=!1}function Ii(pe,mt){pe.side===ka?$t(a.CULL_FACE):lt(a.CULL_FACE);let Be=pe.side===$r;mt&&(Be=!Be),Nn(Be),pe.blending===sh&&pe.transparent===!1?fe(Eo):fe(pe.blending,pe.blendEquation,pe.blendSrc,pe.blendDst,pe.blendEquationAlpha,pe.blendSrcAlpha,pe.blendDstAlpha,pe.blendColor,pe.blendAlpha,pe.premultipliedAlpha),d.setFunc(pe.depthFunc),d.setTest(pe.depthTest),d.setMask(pe.depthWrite),c.setMask(pe.colorWrite);const Ge=pe.stencilWrite;p.setTest(Ge),Ge&&(p.setMask(pe.stencilWriteMask),p.setFunc(pe.stencilFunc,pe.stencilRef,pe.stencilFuncMask),p.setOp(pe.stencilFail,pe.stencilZFail,pe.stencilZPass)),ui(pe.polygonOffset,pe.polygonOffsetFactor,pe.polygonOffsetUnits),pe.alphaToCoverage===!0?lt(a.SAMPLE_ALPHA_TO_COVERAGE):$t(a.SAMPLE_ALPHA_TO_COVERAGE)}function Nn(pe){B!==pe&&(pe?a.frontFace(a.CW):a.frontFace(a.CCW),B=pe)}function Fn(pe){pe!==sD?(lt(a.CULL_FACE),pe!==ee&&(pe===$M?a.cullFace(a.BACK):pe===aD?a.cullFace(a.FRONT):a.cullFace(a.FRONT_AND_BACK))):$t(a.CULL_FACE),ee=pe}function Qt(pe){pe!==Ee&&(Me&&a.lineWidth(pe),Ee=pe)}function ui(pe,mt,Be){pe?(lt(a.POLYGON_OFFSET_FILL),(de!==mt||be!==Be)&&(a.polygonOffset(mt,Be),de=mt,be=Be)):$t(a.POLYGON_OFFSET_FILL)}function Kt(pe){pe?lt(a.SCISSOR_TEST):$t(a.SCISSOR_TEST)}function ae(pe){pe===void 0&&(pe=a.TEXTURE0+Ae-1),Fe!==pe&&(a.activeTexture(pe),Fe=pe)}function K(pe,mt,Be){Be===void 0&&(Fe===null?Be=a.TEXTURE0+Ae-1:Be=Fe);let Ge=He[Be];Ge===void 0&&(Ge={type:void 0,texture:void 0},He[Be]=Ge),(Ge.type!==pe||Ge.texture!==mt)&&(Fe!==Be&&(a.activeTexture(Be),Fe=Be),a.bindTexture(pe,mt||Pt[pe]),Ge.type=pe,Ge.texture=mt)}function we(){const pe=He[Fe];pe!==void 0&&pe.type!==void 0&&(a.bindTexture(pe.type,null),pe.type=void 0,pe.texture=void 0)}function Ye(){try{a.compressedTexImage2D.apply(a,arguments)}catch(pe){console.error("THREE.WebGLState:",pe)}}function je(){try{a.compressedTexImage3D.apply(a,arguments)}catch(pe){console.error("THREE.WebGLState:",pe)}}function Ve(){try{a.texSubImage2D.apply(a,arguments)}catch(pe){console.error("THREE.WebGLState:",pe)}}function Ot(){try{a.texSubImage3D.apply(a,arguments)}catch(pe){console.error("THREE.WebGLState:",pe)}}function _t(){try{a.compressedTexSubImage2D.apply(a,arguments)}catch(pe){console.error("THREE.WebGLState:",pe)}}function Tt(){try{a.compressedTexSubImage3D.apply(a,arguments)}catch(pe){console.error("THREE.WebGLState:",pe)}}function In(){try{a.texStorage2D.apply(a,arguments)}catch(pe){console.error("THREE.WebGLState:",pe)}}function it(){try{a.texStorage3D.apply(a,arguments)}catch(pe){console.error("THREE.WebGLState:",pe)}}function xt(){try{a.texImage2D.apply(a,arguments)}catch(pe){console.error("THREE.WebGLState:",pe)}}function tn(){try{a.texImage3D.apply(a,arguments)}catch(pe){console.error("THREE.WebGLState:",pe)}}function kt(pe){Yt.equals(pe)===!1&&(a.scissor(pe.x,pe.y,pe.z,pe.w),Yt.copy(pe))}function Nt(pe){Le.equals(pe)===!1&&(a.viewport(pe.x,pe.y,pe.z,pe.w),Le.copy(pe))}function zn(pe,mt){let Be=_.get(mt);Be===void 0&&(Be=new WeakMap,_.set(mt,Be));let Ge=Be.get(pe);Ge===void 0&&(Ge=a.getUniformBlockIndex(mt,pe.name),Be.set(pe,Ge))}function mn(pe,mt){const Ge=_.get(mt).get(pe);v.get(mt)!==Ge&&(a.uniformBlockBinding(mt,Ge,pe.__bindingPointIndex),v.set(mt,Ge))}function fi(){a.disable(a.BLEND),a.disable(a.CULL_FACE),a.disable(a.DEPTH_TEST),a.disable(a.POLYGON_OFFSET_FILL),a.disable(a.SCISSOR_TEST),a.disable(a.STENCIL_TEST),a.disable(a.SAMPLE_ALPHA_TO_COVERAGE),a.blendEquation(a.FUNC_ADD),a.blendFunc(a.ONE,a.ZERO),a.blendFuncSeparate(a.ONE,a.ZERO,a.ONE,a.ZERO),a.blendColor(0,0,0,0),a.colorMask(!0,!0,!0,!0),a.clearColor(0,0,0,0),a.depthMask(!0),a.depthFunc(a.LESS),d.setReversed(!1),a.clearDepth(1),a.stencilMask(4294967295),a.stencilFunc(a.ALWAYS,0,4294967295),a.stencilOp(a.KEEP,a.KEEP,a.KEEP),a.clearStencil(0),a.cullFace(a.BACK),a.frontFace(a.CCW),a.polygonOffset(0,0),a.activeTexture(a.TEXTURE0),a.bindFramebuffer(a.FRAMEBUFFER,null),a.bindFramebuffer(a.DRAW_FRAMEBUFFER,null),a.bindFramebuffer(a.READ_FRAMEBUFFER,null),a.useProgram(null),a.lineWidth(1),a.scissor(0,0,a.canvas.width,a.canvas.height),a.viewport(0,0,a.canvas.width,a.canvas.height),x={},Fe=null,He={},M={},b=new WeakMap,E=[],U=null,L=!1,P=null,A=null,X=null,k=null,O=null,z=null,Y=null,W=new Qn(0,0,0),te=0,N=!1,B=null,ee=null,Ee=null,de=null,be=null,Yt.set(0,0,a.canvas.width,a.canvas.height),Le.set(0,0,a.canvas.width,a.canvas.height),c.reset(),d.reset(),p.reset()}return{buffers:{color:c,depth:d,stencil:p},enable:lt,disable:$t,bindFramebuffer:sn,drawBuffers:gn,useProgram:ei,setBlending:fe,setMaterial:Ii,setFlipSided:Nn,setCullFace:Fn,setLineWidth:Qt,setPolygonOffset:ui,setScissorTest:Kt,activeTexture:ae,bindTexture:K,unbindTexture:we,compressedTexImage2D:Ye,compressedTexImage3D:je,texImage2D:xt,texImage3D:tn,updateUBOMapping:zn,uniformBlockBinding:mn,texStorage2D:In,texStorage3D:it,texSubImage2D:Ve,texSubImage3D:Ot,compressedTexSubImage2D:_t,compressedTexSubImage3D:Tt,scissor:kt,viewport:Nt,reset:fi}}function hO(a,t,n,r,o,c,d){const p=t.has("WEBGL_multisampled_render_to_texture")?t.get("WEBGL_multisampled_render_to_texture"):null,v=typeof navigator>"u"?!1:/OculusBrowser/g.test(navigator.userAgent),_=new ln,x=new WeakMap;let M;const b=new WeakMap;let E=!1;try{E=typeof OffscreenCanvas<"u"&&new OffscreenCanvas(1,1).getContext("2d")!==null}catch{}function U(ae,K){return E?new OffscreenCanvas(ae,K):Gu("canvas")}function L(ae,K,we){let Ye=1;const je=Kt(ae);if((je.width>we||je.height>we)&&(Ye=we/Math.max(je.width,je.height)),Ye<1)if(typeof HTMLImageElement<"u"&&ae instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&ae instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&ae instanceof ImageBitmap||typeof VideoFrame<"u"&&ae instanceof VideoFrame){const Ve=Math.floor(Ye*je.width),Ot=Math.floor(Ye*je.height);M===void 0&&(M=U(Ve,Ot));const _t=K?U(Ve,Ot):M;return _t.width=Ve,_t.height=Ot,_t.getContext("2d").drawImage(ae,0,0,Ve,Ot),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+je.width+"x"+je.height+") to ("+Ve+"x"+Ot+")."),_t}else return"data"in ae&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+je.width+"x"+je.height+")."),ae;return ae}function P(ae){return ae.generateMipmaps}function A(ae){a.generateMipmap(ae)}function X(ae){return ae.isWebGLCubeRenderTarget?a.TEXTURE_CUBE_MAP:ae.isWebGL3DRenderTarget?a.TEXTURE_3D:ae.isWebGLArrayRenderTarget||ae.isCompressedArrayTexture?a.TEXTURE_2D_ARRAY:a.TEXTURE_2D}function k(ae,K,we,Ye,je=!1){if(ae!==null){if(a[ae]!==void 0)return a[ae];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+ae+"'")}let Ve=K;if(K===a.RED&&(we===a.FLOAT&&(Ve=a.R32F),we===a.HALF_FLOAT&&(Ve=a.R16F),we===a.UNSIGNED_BYTE&&(Ve=a.R8)),K===a.RED_INTEGER&&(we===a.UNSIGNED_BYTE&&(Ve=a.R8UI),we===a.UNSIGNED_SHORT&&(Ve=a.R16UI),we===a.UNSIGNED_INT&&(Ve=a.R32UI),we===a.BYTE&&(Ve=a.R8I),we===a.SHORT&&(Ve=a.R16I),we===a.INT&&(Ve=a.R32I)),K===a.RG&&(we===a.FLOAT&&(Ve=a.RG32F),we===a.HALF_FLOAT&&(Ve=a.RG16F),we===a.UNSIGNED_BYTE&&(Ve=a.RG8)),K===a.RG_INTEGER&&(we===a.UNSIGNED_BYTE&&(Ve=a.RG8UI),we===a.UNSIGNED_SHORT&&(Ve=a.RG16UI),we===a.UNSIGNED_INT&&(Ve=a.RG32UI),we===a.BYTE&&(Ve=a.RG8I),we===a.SHORT&&(Ve=a.RG16I),we===a.INT&&(Ve=a.RG32I)),K===a.RGB_INTEGER&&(we===a.UNSIGNED_BYTE&&(Ve=a.RGB8UI),we===a.UNSIGNED_SHORT&&(Ve=a.RGB16UI),we===a.UNSIGNED_INT&&(Ve=a.RGB32UI),we===a.BYTE&&(Ve=a.RGB8I),we===a.SHORT&&(Ve=a.RGB16I),we===a.INT&&(Ve=a.RGB32I)),K===a.RGBA_INTEGER&&(we===a.UNSIGNED_BYTE&&(Ve=a.RGBA8UI),we===a.UNSIGNED_SHORT&&(Ve=a.RGBA16UI),we===a.UNSIGNED_INT&&(Ve=a.RGBA32UI),we===a.BYTE&&(Ve=a.RGBA8I),we===a.SHORT&&(Ve=a.RGBA16I),we===a.INT&&(Ve=a.RGBA32I)),K===a.RGB&&we===a.UNSIGNED_INT_5_9_9_9_REV&&(Ve=a.RGB9_E5),K===a.RGBA){const Ot=je?zp:ni.getTransfer(Ye);we===a.FLOAT&&(Ve=a.RGBA32F),we===a.HALF_FLOAT&&(Ve=a.RGBA16F),we===a.UNSIGNED_BYTE&&(Ve=Ot===pi?a.SRGB8_ALPHA8:a.RGBA8),we===a.UNSIGNED_SHORT_4_4_4_4&&(Ve=a.RGBA4),we===a.UNSIGNED_SHORT_5_5_5_1&&(Ve=a.RGB5_A1)}return(Ve===a.R16F||Ve===a.R32F||Ve===a.RG16F||Ve===a.RG32F||Ve===a.RGBA16F||Ve===a.RGBA32F)&&t.get("EXT_color_buffer_float"),Ve}function O(ae,K){let we;return ae?K===null||K===Bl||K===mh?we=a.DEPTH24_STENCIL8:K===Va?we=a.DEPTH32F_STENCIL8:K===Hu&&(we=a.DEPTH24_STENCIL8,console.warn("DepthTexture: 16 bit depth attachment is not supported with stencil. Using 24-bit attachment.")):K===null||K===Bl||K===mh?we=a.DEPTH_COMPONENT24:K===Va?we=a.DEPTH_COMPONENT32F:K===Hu&&(we=a.DEPTH_COMPONENT16),we}function z(ae,K){return P(ae)===!0||ae.isFramebufferTexture&&ae.minFilter!==$s&&ae.minFilter!==ca?Math.log2(Math.max(K.width,K.height))+1:ae.mipmaps!==void 0&&ae.mipmaps.length>0?ae.mipmaps.length:ae.isCompressedTexture&&Array.isArray(ae.image)?K.mipmaps.length:1}function Y(ae){const K=ae.target;K.removeEventListener("dispose",Y),te(K),K.isVideoTexture&&x.delete(K)}function W(ae){const K=ae.target;K.removeEventListener("dispose",W),B(K)}function te(ae){const K=r.get(ae);if(K.__webglInit===void 0)return;const we=ae.source,Ye=b.get(we);if(Ye){const je=Ye[K.__cacheKey];je.usedTimes--,je.usedTimes===0&&N(ae),Object.keys(Ye).length===0&&b.delete(we)}r.remove(ae)}function N(ae){const K=r.get(ae);a.deleteTexture(K.__webglTexture);const we=ae.source,Ye=b.get(we);delete Ye[K.__cacheKey],d.memory.textures--}function B(ae){const K=r.get(ae);if(ae.depthTexture&&(ae.depthTexture.dispose(),r.remove(ae.depthTexture)),ae.isWebGLCubeRenderTarget)for(let Ye=0;Ye<6;Ye++){if(Array.isArray(K.__webglFramebuffer[Ye]))for(let je=0;je<K.__webglFramebuffer[Ye].length;je++)a.deleteFramebuffer(K.__webglFramebuffer[Ye][je]);else a.deleteFramebuffer(K.__webglFramebuffer[Ye]);K.__webglDepthbuffer&&a.deleteRenderbuffer(K.__webglDepthbuffer[Ye])}else{if(Array.isArray(K.__webglFramebuffer))for(let Ye=0;Ye<K.__webglFramebuffer.length;Ye++)a.deleteFramebuffer(K.__webglFramebuffer[Ye]);else a.deleteFramebuffer(K.__webglFramebuffer);if(K.__webglDepthbuffer&&a.deleteRenderbuffer(K.__webglDepthbuffer),K.__webglMultisampledFramebuffer&&a.deleteFramebuffer(K.__webglMultisampledFramebuffer),K.__webglColorRenderbuffer)for(let Ye=0;Ye<K.__webglColorRenderbuffer.length;Ye++)K.__webglColorRenderbuffer[Ye]&&a.deleteRenderbuffer(K.__webglColorRenderbuffer[Ye]);K.__webglDepthRenderbuffer&&a.deleteRenderbuffer(K.__webglDepthRenderbuffer)}const we=ae.textures;for(let Ye=0,je=we.length;Ye<je;Ye++){const Ve=r.get(we[Ye]);Ve.__webglTexture&&(a.deleteTexture(Ve.__webglTexture),d.memory.textures--),r.remove(we[Ye])}r.remove(ae)}let ee=0;function Ee(){ee=0}function de(){const ae=ee;return ae>=o.maxTextures&&console.warn("THREE.WebGLTextures: Trying to use "+ae+" texture units while this GPU supports only "+o.maxTextures),ee+=1,ae}function be(ae){const K=[];return K.push(ae.wrapS),K.push(ae.wrapT),K.push(ae.wrapR||0),K.push(ae.magFilter),K.push(ae.minFilter),K.push(ae.anisotropy),K.push(ae.internalFormat),K.push(ae.format),K.push(ae.type),K.push(ae.generateMipmaps),K.push(ae.premultiplyAlpha),K.push(ae.flipY),K.push(ae.unpackAlignment),K.push(ae.colorSpace),K.join()}function Ae(ae,K){const we=r.get(ae);if(ae.isVideoTexture&&Qt(ae),ae.isRenderTargetTexture===!1&&ae.version>0&&we.__version!==ae.version){const Ye=ae.image;if(Ye===null)console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");else if(Ye.complete===!1)console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");else{Le(we,ae,K);return}}n.bindTexture(a.TEXTURE_2D,we.__webglTexture,a.TEXTURE0+K)}function Me(ae,K){const we=r.get(ae);if(ae.version>0&&we.__version!==ae.version){Le(we,ae,K);return}n.bindTexture(a.TEXTURE_2D_ARRAY,we.__webglTexture,a.TEXTURE0+K)}function me(ae,K){const we=r.get(ae);if(ae.version>0&&we.__version!==ae.version){Le(we,ae,K);return}n.bindTexture(a.TEXTURE_3D,we.__webglTexture,a.TEXTURE0+K)}function _e(ae,K){const we=r.get(ae);if(ae.version>0&&we.__version!==ae.version){et(we,ae,K);return}n.bindTexture(a.TEXTURE_CUBE_MAP,we.__webglTexture,a.TEXTURE0+K)}const Fe={[n0]:a.REPEAT,[Rl]:a.CLAMP_TO_EDGE,[i0]:a.MIRRORED_REPEAT},He={[$s]:a.NEAREST,[ND]:a.NEAREST_MIPMAP_NEAREST,[Xd]:a.NEAREST_MIPMAP_LINEAR,[ca]:a.LINEAR,[G_]:a.LINEAR_MIPMAP_NEAREST,[Cl]:a.LINEAR_MIPMAP_LINEAR},nt={[kD]:a.NEVER,[qD]:a.ALWAYS,[VD]:a.LESS,[EE]:a.LEQUAL,[HD]:a.EQUAL,[XD]:a.GEQUAL,[GD]:a.GREATER,[WD]:a.NOTEQUAL};function ut(ae,K){if(K.type===Va&&t.has("OES_texture_float_linear")===!1&&(K.magFilter===ca||K.magFilter===G_||K.magFilter===Xd||K.magFilter===Cl||K.minFilter===ca||K.minFilter===G_||K.minFilter===Xd||K.minFilter===Cl)&&console.warn("THREE.WebGLRenderer: Unable to use linear filtering with floating point textures. OES_texture_float_linear not supported on this device."),a.texParameteri(ae,a.TEXTURE_WRAP_S,Fe[K.wrapS]),a.texParameteri(ae,a.TEXTURE_WRAP_T,Fe[K.wrapT]),(ae===a.TEXTURE_3D||ae===a.TEXTURE_2D_ARRAY)&&a.texParameteri(ae,a.TEXTURE_WRAP_R,Fe[K.wrapR]),a.texParameteri(ae,a.TEXTURE_MAG_FILTER,He[K.magFilter]),a.texParameteri(ae,a.TEXTURE_MIN_FILTER,He[K.minFilter]),K.compareFunction&&(a.texParameteri(ae,a.TEXTURE_COMPARE_MODE,a.COMPARE_REF_TO_TEXTURE),a.texParameteri(ae,a.TEXTURE_COMPARE_FUNC,nt[K.compareFunction])),t.has("EXT_texture_filter_anisotropic")===!0){if(K.magFilter===$s||K.minFilter!==Xd&&K.minFilter!==Cl||K.type===Va&&t.has("OES_texture_float_linear")===!1)return;if(K.anisotropy>1||r.get(K).__currentAnisotropy){const we=t.get("EXT_texture_filter_anisotropic");a.texParameterf(ae,we.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(K.anisotropy,o.getMaxAnisotropy())),r.get(K).__currentAnisotropy=K.anisotropy}}}function Yt(ae,K){let we=!1;ae.__webglInit===void 0&&(ae.__webglInit=!0,K.addEventListener("dispose",Y));const Ye=K.source;let je=b.get(Ye);je===void 0&&(je={},b.set(Ye,je));const Ve=be(K);if(Ve!==ae.__cacheKey){je[Ve]===void 0&&(je[Ve]={texture:a.createTexture(),usedTimes:0},d.memory.textures++,we=!0),je[Ve].usedTimes++;const Ot=je[ae.__cacheKey];Ot!==void 0&&(je[ae.__cacheKey].usedTimes--,Ot.usedTimes===0&&N(K)),ae.__cacheKey=Ve,ae.__webglTexture=je[Ve].texture}return we}function Le(ae,K,we){let Ye=a.TEXTURE_2D;(K.isDataArrayTexture||K.isCompressedArrayTexture)&&(Ye=a.TEXTURE_2D_ARRAY),K.isData3DTexture&&(Ye=a.TEXTURE_3D);const je=Yt(ae,K),Ve=K.source;n.bindTexture(Ye,ae.__webglTexture,a.TEXTURE0+we);const Ot=r.get(Ve);if(Ve.version!==Ot.__version||je===!0){n.activeTexture(a.TEXTURE0+we);const _t=ni.getPrimaries(ni.workingColorSpace),Tt=K.colorSpace===xo?null:ni.getPrimaries(K.colorSpace),In=K.colorSpace===xo||_t===Tt?a.NONE:a.BROWSER_DEFAULT_WEBGL;a.pixelStorei(a.UNPACK_FLIP_Y_WEBGL,K.flipY),a.pixelStorei(a.UNPACK_PREMULTIPLY_ALPHA_WEBGL,K.premultiplyAlpha),a.pixelStorei(a.UNPACK_ALIGNMENT,K.unpackAlignment),a.pixelStorei(a.UNPACK_COLORSPACE_CONVERSION_WEBGL,In);let it=L(K.image,!1,o.maxTextureSize);it=ui(K,it);const xt=c.convert(K.format,K.colorSpace),tn=c.convert(K.type);let kt=k(K.internalFormat,xt,tn,K.colorSpace,K.isVideoTexture);ut(Ye,K);let Nt;const zn=K.mipmaps,mn=K.isVideoTexture!==!0,fi=Ot.__version===void 0||je===!0,pe=Ve.dataReady,mt=z(K,it);if(K.isDepthTexture)kt=O(K.format===_h,K.type),fi&&(mn?n.texStorage2D(a.TEXTURE_2D,1,kt,it.width,it.height):n.texImage2D(a.TEXTURE_2D,0,kt,it.width,it.height,0,xt,tn,null));else if(K.isDataTexture)if(zn.length>0){mn&&fi&&n.texStorage2D(a.TEXTURE_2D,mt,kt,zn[0].width,zn[0].height);for(let Be=0,Ge=zn.length;Be<Ge;Be++)Nt=zn[Be],mn?pe&&n.texSubImage2D(a.TEXTURE_2D,Be,0,0,Nt.width,Nt.height,xt,tn,Nt.data):n.texImage2D(a.TEXTURE_2D,Be,kt,Nt.width,Nt.height,0,xt,tn,Nt.data);K.generateMipmaps=!1}else mn?(fi&&n.texStorage2D(a.TEXTURE_2D,mt,kt,it.width,it.height),pe&&n.texSubImage2D(a.TEXTURE_2D,0,0,0,it.width,it.height,xt,tn,it.data)):n.texImage2D(a.TEXTURE_2D,0,kt,it.width,it.height,0,xt,tn,it.data);else if(K.isCompressedTexture)if(K.isCompressedArrayTexture){mn&&fi&&n.texStorage3D(a.TEXTURE_2D_ARRAY,mt,kt,zn[0].width,zn[0].height,it.depth);for(let Be=0,Ge=zn.length;Be<Ge;Be++)if(Nt=zn[Be],K.format!==Zs)if(xt!==null)if(mn){if(pe)if(K.layerUpdates.size>0){const wt=RS(Nt.width,Nt.height,K.format,K.type);for(const ft of K.layerUpdates){const yn=Nt.data.subarray(ft*wt/Nt.data.BYTES_PER_ELEMENT,(ft+1)*wt/Nt.data.BYTES_PER_ELEMENT);n.compressedTexSubImage3D(a.TEXTURE_2D_ARRAY,Be,0,0,ft,Nt.width,Nt.height,1,xt,yn)}K.clearLayerUpdates()}else n.compressedTexSubImage3D(a.TEXTURE_2D_ARRAY,Be,0,0,0,Nt.width,Nt.height,it.depth,xt,Nt.data)}else n.compressedTexImage3D(a.TEXTURE_2D_ARRAY,Be,kt,Nt.width,Nt.height,it.depth,0,Nt.data,0,0);else console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");else mn?pe&&n.texSubImage3D(a.TEXTURE_2D_ARRAY,Be,0,0,0,Nt.width,Nt.height,it.depth,xt,tn,Nt.data):n.texImage3D(a.TEXTURE_2D_ARRAY,Be,kt,Nt.width,Nt.height,it.depth,0,xt,tn,Nt.data)}else{mn&&fi&&n.texStorage2D(a.TEXTURE_2D,mt,kt,zn[0].width,zn[0].height);for(let Be=0,Ge=zn.length;Be<Ge;Be++)Nt=zn[Be],K.format!==Zs?xt!==null?mn?pe&&n.compressedTexSubImage2D(a.TEXTURE_2D,Be,0,0,Nt.width,Nt.height,xt,Nt.data):n.compressedTexImage2D(a.TEXTURE_2D,Be,kt,Nt.width,Nt.height,0,Nt.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):mn?pe&&n.texSubImage2D(a.TEXTURE_2D,Be,0,0,Nt.width,Nt.height,xt,tn,Nt.data):n.texImage2D(a.TEXTURE_2D,Be,kt,Nt.width,Nt.height,0,xt,tn,Nt.data)}else if(K.isDataArrayTexture)if(mn){if(fi&&n.texStorage3D(a.TEXTURE_2D_ARRAY,mt,kt,it.width,it.height,it.depth),pe)if(K.layerUpdates.size>0){const Be=RS(it.width,it.height,K.format,K.type);for(const Ge of K.layerUpdates){const wt=it.data.subarray(Ge*Be/it.data.BYTES_PER_ELEMENT,(Ge+1)*Be/it.data.BYTES_PER_ELEMENT);n.texSubImage3D(a.TEXTURE_2D_ARRAY,0,0,0,Ge,it.width,it.height,1,xt,tn,wt)}K.clearLayerUpdates()}else n.texSubImage3D(a.TEXTURE_2D_ARRAY,0,0,0,0,it.width,it.height,it.depth,xt,tn,it.data)}else n.texImage3D(a.TEXTURE_2D_ARRAY,0,kt,it.width,it.height,it.depth,0,xt,tn,it.data);else if(K.isData3DTexture)mn?(fi&&n.texStorage3D(a.TEXTURE_3D,mt,kt,it.width,it.height,it.depth),pe&&n.texSubImage3D(a.TEXTURE_3D,0,0,0,0,it.width,it.height,it.depth,xt,tn,it.data)):n.texImage3D(a.TEXTURE_3D,0,kt,it.width,it.height,it.depth,0,xt,tn,it.data);else if(K.isFramebufferTexture){if(fi)if(mn)n.texStorage2D(a.TEXTURE_2D,mt,kt,it.width,it.height);else{let Be=it.width,Ge=it.height;for(let wt=0;wt<mt;wt++)n.texImage2D(a.TEXTURE_2D,wt,kt,Be,Ge,0,xt,tn,null),Be>>=1,Ge>>=1}}else if(zn.length>0){if(mn&&fi){const Be=Kt(zn[0]);n.texStorage2D(a.TEXTURE_2D,mt,kt,Be.width,Be.height)}for(let Be=0,Ge=zn.length;Be<Ge;Be++)Nt=zn[Be],mn?pe&&n.texSubImage2D(a.TEXTURE_2D,Be,0,0,xt,tn,Nt):n.texImage2D(a.TEXTURE_2D,Be,kt,xt,tn,Nt);K.generateMipmaps=!1}else if(mn){if(fi){const Be=Kt(it);n.texStorage2D(a.TEXTURE_2D,mt,kt,Be.width,Be.height)}pe&&n.texSubImage2D(a.TEXTURE_2D,0,0,0,xt,tn,it)}else n.texImage2D(a.TEXTURE_2D,0,kt,xt,tn,it);P(K)&&A(Ye),Ot.__version=Ve.version,K.onUpdate&&K.onUpdate(K)}ae.__version=K.version}function et(ae,K,we){if(K.image.length!==6)return;const Ye=Yt(ae,K),je=K.source;n.bindTexture(a.TEXTURE_CUBE_MAP,ae.__webglTexture,a.TEXTURE0+we);const Ve=r.get(je);if(je.version!==Ve.__version||Ye===!0){n.activeTexture(a.TEXTURE0+we);const Ot=ni.getPrimaries(ni.workingColorSpace),_t=K.colorSpace===xo?null:ni.getPrimaries(K.colorSpace),Tt=K.colorSpace===xo||Ot===_t?a.NONE:a.BROWSER_DEFAULT_WEBGL;a.pixelStorei(a.UNPACK_FLIP_Y_WEBGL,K.flipY),a.pixelStorei(a.UNPACK_PREMULTIPLY_ALPHA_WEBGL,K.premultiplyAlpha),a.pixelStorei(a.UNPACK_ALIGNMENT,K.unpackAlignment),a.pixelStorei(a.UNPACK_COLORSPACE_CONVERSION_WEBGL,Tt);const In=K.isCompressedTexture||K.image[0].isCompressedTexture,it=K.image[0]&&K.image[0].isDataTexture,xt=[];for(let Ge=0;Ge<6;Ge++)!In&&!it?xt[Ge]=L(K.image[Ge],!0,o.maxCubemapSize):xt[Ge]=it?K.image[Ge].image:K.image[Ge],xt[Ge]=ui(K,xt[Ge]);const tn=xt[0],kt=c.convert(K.format,K.colorSpace),Nt=c.convert(K.type),zn=k(K.internalFormat,kt,Nt,K.colorSpace),mn=K.isVideoTexture!==!0,fi=Ve.__version===void 0||Ye===!0,pe=je.dataReady;let mt=z(K,tn);ut(a.TEXTURE_CUBE_MAP,K);let Be;if(In){mn&&fi&&n.texStorage2D(a.TEXTURE_CUBE_MAP,mt,zn,tn.width,tn.height);for(let Ge=0;Ge<6;Ge++){Be=xt[Ge].mipmaps;for(let wt=0;wt<Be.length;wt++){const ft=Be[wt];K.format!==Zs?kt!==null?mn?pe&&n.compressedTexSubImage2D(a.TEXTURE_CUBE_MAP_POSITIVE_X+Ge,wt,0,0,ft.width,ft.height,kt,ft.data):n.compressedTexImage2D(a.TEXTURE_CUBE_MAP_POSITIVE_X+Ge,wt,zn,ft.width,ft.height,0,ft.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):mn?pe&&n.texSubImage2D(a.TEXTURE_CUBE_MAP_POSITIVE_X+Ge,wt,0,0,ft.width,ft.height,kt,Nt,ft.data):n.texImage2D(a.TEXTURE_CUBE_MAP_POSITIVE_X+Ge,wt,zn,ft.width,ft.height,0,kt,Nt,ft.data)}}}else{if(Be=K.mipmaps,mn&&fi){Be.length>0&&mt++;const Ge=Kt(xt[0]);n.texStorage2D(a.TEXTURE_CUBE_MAP,mt,zn,Ge.width,Ge.height)}for(let Ge=0;Ge<6;Ge++)if(it){mn?pe&&n.texSubImage2D(a.TEXTURE_CUBE_MAP_POSITIVE_X+Ge,0,0,0,xt[Ge].width,xt[Ge].height,kt,Nt,xt[Ge].data):n.texImage2D(a.TEXTURE_CUBE_MAP_POSITIVE_X+Ge,0,zn,xt[Ge].width,xt[Ge].height,0,kt,Nt,xt[Ge].data);for(let wt=0;wt<Be.length;wt++){const yn=Be[wt].image[Ge].image;mn?pe&&n.texSubImage2D(a.TEXTURE_CUBE_MAP_POSITIVE_X+Ge,wt+1,0,0,yn.width,yn.height,kt,Nt,yn.data):n.texImage2D(a.TEXTURE_CUBE_MAP_POSITIVE_X+Ge,wt+1,zn,yn.width,yn.height,0,kt,Nt,yn.data)}}else{mn?pe&&n.texSubImage2D(a.TEXTURE_CUBE_MAP_POSITIVE_X+Ge,0,0,0,kt,Nt,xt[Ge]):n.texImage2D(a.TEXTURE_CUBE_MAP_POSITIVE_X+Ge,0,zn,kt,Nt,xt[Ge]);for(let wt=0;wt<Be.length;wt++){const ft=Be[wt];mn?pe&&n.texSubImage2D(a.TEXTURE_CUBE_MAP_POSITIVE_X+Ge,wt+1,0,0,kt,Nt,ft.image[Ge]):n.texImage2D(a.TEXTURE_CUBE_MAP_POSITIVE_X+Ge,wt+1,zn,kt,Nt,ft.image[Ge])}}}P(K)&&A(a.TEXTURE_CUBE_MAP),Ve.__version=je.version,K.onUpdate&&K.onUpdate(K)}ae.__version=K.version}function Pt(ae,K,we,Ye,je,Ve){const Ot=c.convert(we.format,we.colorSpace),_t=c.convert(we.type),Tt=k(we.internalFormat,Ot,_t,we.colorSpace),In=r.get(K),it=r.get(we);if(it.__renderTarget=K,!In.__hasExternalTextures){const xt=Math.max(1,K.width>>Ve),tn=Math.max(1,K.height>>Ve);je===a.TEXTURE_3D||je===a.TEXTURE_2D_ARRAY?n.texImage3D(je,Ve,Tt,xt,tn,K.depth,0,Ot,_t,null):n.texImage2D(je,Ve,Tt,xt,tn,0,Ot,_t,null)}n.bindFramebuffer(a.FRAMEBUFFER,ae),Fn(K)?p.framebufferTexture2DMultisampleEXT(a.FRAMEBUFFER,Ye,je,it.__webglTexture,0,Nn(K)):(je===a.TEXTURE_2D||je>=a.TEXTURE_CUBE_MAP_POSITIVE_X&&je<=a.TEXTURE_CUBE_MAP_NEGATIVE_Z)&&a.framebufferTexture2D(a.FRAMEBUFFER,Ye,je,it.__webglTexture,Ve),n.bindFramebuffer(a.FRAMEBUFFER,null)}function lt(ae,K,we){if(a.bindRenderbuffer(a.RENDERBUFFER,ae),K.depthBuffer){const Ye=K.depthTexture,je=Ye&&Ye.isDepthTexture?Ye.type:null,Ve=O(K.stencilBuffer,je),Ot=K.stencilBuffer?a.DEPTH_STENCIL_ATTACHMENT:a.DEPTH_ATTACHMENT,_t=Nn(K);Fn(K)?p.renderbufferStorageMultisampleEXT(a.RENDERBUFFER,_t,Ve,K.width,K.height):we?a.renderbufferStorageMultisample(a.RENDERBUFFER,_t,Ve,K.width,K.height):a.renderbufferStorage(a.RENDERBUFFER,Ve,K.width,K.height),a.framebufferRenderbuffer(a.FRAMEBUFFER,Ot,a.RENDERBUFFER,ae)}else{const Ye=K.textures;for(let je=0;je<Ye.length;je++){const Ve=Ye[je],Ot=c.convert(Ve.format,Ve.colorSpace),_t=c.convert(Ve.type),Tt=k(Ve.internalFormat,Ot,_t,Ve.colorSpace),In=Nn(K);we&&Fn(K)===!1?a.renderbufferStorageMultisample(a.RENDERBUFFER,In,Tt,K.width,K.height):Fn(K)?p.renderbufferStorageMultisampleEXT(a.RENDERBUFFER,In,Tt,K.width,K.height):a.renderbufferStorage(a.RENDERBUFFER,Tt,K.width,K.height)}}a.bindRenderbuffer(a.RENDERBUFFER,null)}function $t(ae,K){if(K&&K.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(n.bindFramebuffer(a.FRAMEBUFFER,ae),!(K.depthTexture&&K.depthTexture.isDepthTexture))throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");const Ye=r.get(K.depthTexture);Ye.__renderTarget=K,(!Ye.__webglTexture||K.depthTexture.image.width!==K.width||K.depthTexture.image.height!==K.height)&&(K.depthTexture.image.width=K.width,K.depthTexture.image.height=K.height,K.depthTexture.needsUpdate=!0),Ae(K.depthTexture,0);const je=Ye.__webglTexture,Ve=Nn(K);if(K.depthTexture.format===ah)Fn(K)?p.framebufferTexture2DMultisampleEXT(a.FRAMEBUFFER,a.DEPTH_ATTACHMENT,a.TEXTURE_2D,je,0,Ve):a.framebufferTexture2D(a.FRAMEBUFFER,a.DEPTH_ATTACHMENT,a.TEXTURE_2D,je,0);else if(K.depthTexture.format===_h)Fn(K)?p.framebufferTexture2DMultisampleEXT(a.FRAMEBUFFER,a.DEPTH_STENCIL_ATTACHMENT,a.TEXTURE_2D,je,0,Ve):a.framebufferTexture2D(a.FRAMEBUFFER,a.DEPTH_STENCIL_ATTACHMENT,a.TEXTURE_2D,je,0);else throw new Error("Unknown depthTexture format")}function sn(ae){const K=r.get(ae),we=ae.isWebGLCubeRenderTarget===!0;if(K.__boundDepthTexture!==ae.depthTexture){const Ye=ae.depthTexture;if(K.__depthDisposeCallback&&K.__depthDisposeCallback(),Ye){const je=()=>{delete K.__boundDepthTexture,delete K.__depthDisposeCallback,Ye.removeEventListener("dispose",je)};Ye.addEventListener("dispose",je),K.__depthDisposeCallback=je}K.__boundDepthTexture=Ye}if(ae.depthTexture&&!K.__autoAllocateDepthBuffer){if(we)throw new Error("target.depthTexture not supported in Cube render targets");$t(K.__webglFramebuffer,ae)}else if(we){K.__webglDepthbuffer=[];for(let Ye=0;Ye<6;Ye++)if(n.bindFramebuffer(a.FRAMEBUFFER,K.__webglFramebuffer[Ye]),K.__webglDepthbuffer[Ye]===void 0)K.__webglDepthbuffer[Ye]=a.createRenderbuffer(),lt(K.__webglDepthbuffer[Ye],ae,!1);else{const je=ae.stencilBuffer?a.DEPTH_STENCIL_ATTACHMENT:a.DEPTH_ATTACHMENT,Ve=K.__webglDepthbuffer[Ye];a.bindRenderbuffer(a.RENDERBUFFER,Ve),a.framebufferRenderbuffer(a.FRAMEBUFFER,je,a.RENDERBUFFER,Ve)}}else if(n.bindFramebuffer(a.FRAMEBUFFER,K.__webglFramebuffer),K.__webglDepthbuffer===void 0)K.__webglDepthbuffer=a.createRenderbuffer(),lt(K.__webglDepthbuffer,ae,!1);else{const Ye=ae.stencilBuffer?a.DEPTH_STENCIL_ATTACHMENT:a.DEPTH_ATTACHMENT,je=K.__webglDepthbuffer;a.bindRenderbuffer(a.RENDERBUFFER,je),a.framebufferRenderbuffer(a.FRAMEBUFFER,Ye,a.RENDERBUFFER,je)}n.bindFramebuffer(a.FRAMEBUFFER,null)}function gn(ae,K,we){const Ye=r.get(ae);K!==void 0&&Pt(Ye.__webglFramebuffer,ae,ae.texture,a.COLOR_ATTACHMENT0,a.TEXTURE_2D,0),we!==void 0&&sn(ae)}function ei(ae){const K=ae.texture,we=r.get(ae),Ye=r.get(K);ae.addEventListener("dispose",W);const je=ae.textures,Ve=ae.isWebGLCubeRenderTarget===!0,Ot=je.length>1;if(Ot||(Ye.__webglTexture===void 0&&(Ye.__webglTexture=a.createTexture()),Ye.__version=K.version,d.memory.textures++),Ve){we.__webglFramebuffer=[];for(let _t=0;_t<6;_t++)if(K.mipmaps&&K.mipmaps.length>0){we.__webglFramebuffer[_t]=[];for(let Tt=0;Tt<K.mipmaps.length;Tt++)we.__webglFramebuffer[_t][Tt]=a.createFramebuffer()}else we.__webglFramebuffer[_t]=a.createFramebuffer()}else{if(K.mipmaps&&K.mipmaps.length>0){we.__webglFramebuffer=[];for(let _t=0;_t<K.mipmaps.length;_t++)we.__webglFramebuffer[_t]=a.createFramebuffer()}else we.__webglFramebuffer=a.createFramebuffer();if(Ot)for(let _t=0,Tt=je.length;_t<Tt;_t++){const In=r.get(je[_t]);In.__webglTexture===void 0&&(In.__webglTexture=a.createTexture(),d.memory.textures++)}if(ae.samples>0&&Fn(ae)===!1){we.__webglMultisampledFramebuffer=a.createFramebuffer(),we.__webglColorRenderbuffer=[],n.bindFramebuffer(a.FRAMEBUFFER,we.__webglMultisampledFramebuffer);for(let _t=0;_t<je.length;_t++){const Tt=je[_t];we.__webglColorRenderbuffer[_t]=a.createRenderbuffer(),a.bindRenderbuffer(a.RENDERBUFFER,we.__webglColorRenderbuffer[_t]);const In=c.convert(Tt.format,Tt.colorSpace),it=c.convert(Tt.type),xt=k(Tt.internalFormat,In,it,Tt.colorSpace,ae.isXRRenderTarget===!0),tn=Nn(ae);a.renderbufferStorageMultisample(a.RENDERBUFFER,tn,xt,ae.width,ae.height),a.framebufferRenderbuffer(a.FRAMEBUFFER,a.COLOR_ATTACHMENT0+_t,a.RENDERBUFFER,we.__webglColorRenderbuffer[_t])}a.bindRenderbuffer(a.RENDERBUFFER,null),ae.depthBuffer&&(we.__webglDepthRenderbuffer=a.createRenderbuffer(),lt(we.__webglDepthRenderbuffer,ae,!0)),n.bindFramebuffer(a.FRAMEBUFFER,null)}}if(Ve){n.bindTexture(a.TEXTURE_CUBE_MAP,Ye.__webglTexture),ut(a.TEXTURE_CUBE_MAP,K);for(let _t=0;_t<6;_t++)if(K.mipmaps&&K.mipmaps.length>0)for(let Tt=0;Tt<K.mipmaps.length;Tt++)Pt(we.__webglFramebuffer[_t][Tt],ae,K,a.COLOR_ATTACHMENT0,a.TEXTURE_CUBE_MAP_POSITIVE_X+_t,Tt);else Pt(we.__webglFramebuffer[_t],ae,K,a.COLOR_ATTACHMENT0,a.TEXTURE_CUBE_MAP_POSITIVE_X+_t,0);P(K)&&A(a.TEXTURE_CUBE_MAP),n.unbindTexture()}else if(Ot){for(let _t=0,Tt=je.length;_t<Tt;_t++){const In=je[_t],it=r.get(In);n.bindTexture(a.TEXTURE_2D,it.__webglTexture),ut(a.TEXTURE_2D,In),Pt(we.__webglFramebuffer,ae,In,a.COLOR_ATTACHMENT0+_t,a.TEXTURE_2D,0),P(In)&&A(a.TEXTURE_2D)}n.unbindTexture()}else{let _t=a.TEXTURE_2D;if((ae.isWebGL3DRenderTarget||ae.isWebGLArrayRenderTarget)&&(_t=ae.isWebGL3DRenderTarget?a.TEXTURE_3D:a.TEXTURE_2D_ARRAY),n.bindTexture(_t,Ye.__webglTexture),ut(_t,K),K.mipmaps&&K.mipmaps.length>0)for(let Tt=0;Tt<K.mipmaps.length;Tt++)Pt(we.__webglFramebuffer[Tt],ae,K,a.COLOR_ATTACHMENT0,_t,Tt);else Pt(we.__webglFramebuffer,ae,K,a.COLOR_ATTACHMENT0,_t,0);P(K)&&A(_t),n.unbindTexture()}ae.depthBuffer&&sn(ae)}function vn(ae){const K=ae.textures;for(let we=0,Ye=K.length;we<Ye;we++){const je=K[we];if(P(je)){const Ve=X(ae),Ot=r.get(je).__webglTexture;n.bindTexture(Ve,Ot),A(Ve),n.unbindTexture()}}}const pn=[],fe=[];function Ii(ae){if(ae.samples>0){if(Fn(ae)===!1){const K=ae.textures,we=ae.width,Ye=ae.height;let je=a.COLOR_BUFFER_BIT;const Ve=ae.stencilBuffer?a.DEPTH_STENCIL_ATTACHMENT:a.DEPTH_ATTACHMENT,Ot=r.get(ae),_t=K.length>1;if(_t)for(let Tt=0;Tt<K.length;Tt++)n.bindFramebuffer(a.FRAMEBUFFER,Ot.__webglMultisampledFramebuffer),a.framebufferRenderbuffer(a.FRAMEBUFFER,a.COLOR_ATTACHMENT0+Tt,a.RENDERBUFFER,null),n.bindFramebuffer(a.FRAMEBUFFER,Ot.__webglFramebuffer),a.framebufferTexture2D(a.DRAW_FRAMEBUFFER,a.COLOR_ATTACHMENT0+Tt,a.TEXTURE_2D,null,0);n.bindFramebuffer(a.READ_FRAMEBUFFER,Ot.__webglMultisampledFramebuffer),n.bindFramebuffer(a.DRAW_FRAMEBUFFER,Ot.__webglFramebuffer);for(let Tt=0;Tt<K.length;Tt++){if(ae.resolveDepthBuffer&&(ae.depthBuffer&&(je|=a.DEPTH_BUFFER_BIT),ae.stencilBuffer&&ae.resolveStencilBuffer&&(je|=a.STENCIL_BUFFER_BIT)),_t){a.framebufferRenderbuffer(a.READ_FRAMEBUFFER,a.COLOR_ATTACHMENT0,a.RENDERBUFFER,Ot.__webglColorRenderbuffer[Tt]);const In=r.get(K[Tt]).__webglTexture;a.framebufferTexture2D(a.DRAW_FRAMEBUFFER,a.COLOR_ATTACHMENT0,a.TEXTURE_2D,In,0)}a.blitFramebuffer(0,0,we,Ye,0,0,we,Ye,je,a.NEAREST),v===!0&&(pn.length=0,fe.length=0,pn.push(a.COLOR_ATTACHMENT0+Tt),ae.depthBuffer&&ae.resolveDepthBuffer===!1&&(pn.push(Ve),fe.push(Ve),a.invalidateFramebuffer(a.DRAW_FRAMEBUFFER,fe)),a.invalidateFramebuffer(a.READ_FRAMEBUFFER,pn))}if(n.bindFramebuffer(a.READ_FRAMEBUFFER,null),n.bindFramebuffer(a.DRAW_FRAMEBUFFER,null),_t)for(let Tt=0;Tt<K.length;Tt++){n.bindFramebuffer(a.FRAMEBUFFER,Ot.__webglMultisampledFramebuffer),a.framebufferRenderbuffer(a.FRAMEBUFFER,a.COLOR_ATTACHMENT0+Tt,a.RENDERBUFFER,Ot.__webglColorRenderbuffer[Tt]);const In=r.get(K[Tt]).__webglTexture;n.bindFramebuffer(a.FRAMEBUFFER,Ot.__webglFramebuffer),a.framebufferTexture2D(a.DRAW_FRAMEBUFFER,a.COLOR_ATTACHMENT0+Tt,a.TEXTURE_2D,In,0)}n.bindFramebuffer(a.DRAW_FRAMEBUFFER,Ot.__webglMultisampledFramebuffer)}else if(ae.depthBuffer&&ae.resolveDepthBuffer===!1&&v){const K=ae.stencilBuffer?a.DEPTH_STENCIL_ATTACHMENT:a.DEPTH_ATTACHMENT;a.invalidateFramebuffer(a.DRAW_FRAMEBUFFER,[K])}}}function Nn(ae){return Math.min(o.maxSamples,ae.samples)}function Fn(ae){const K=r.get(ae);return ae.samples>0&&t.has("WEBGL_multisampled_render_to_texture")===!0&&K.__useRenderToTexture!==!1}function Qt(ae){const K=d.render.frame;x.get(ae)!==K&&(x.set(ae,K),ae.update())}function ui(ae,K){const we=ae.colorSpace,Ye=ae.format,je=ae.type;return ae.isCompressedTexture===!0||ae.isVideoTexture===!0||we!==gh&&we!==xo&&(ni.getTransfer(we)===pi?(Ye!==Zs||je!==Wa)&&console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType."):console.error("THREE.WebGLTextures: Unsupported texture color space:",we)),K}function Kt(ae){return typeof HTMLImageElement<"u"&&ae instanceof HTMLImageElement?(_.width=ae.naturalWidth||ae.width,_.height=ae.naturalHeight||ae.height):typeof VideoFrame<"u"&&ae instanceof VideoFrame?(_.width=ae.displayWidth,_.height=ae.displayHeight):(_.width=ae.width,_.height=ae.height),_}this.allocateTextureUnit=de,this.resetTextureUnits=Ee,this.setTexture2D=Ae,this.setTexture2DArray=Me,this.setTexture3D=me,this.setTextureCube=_e,this.rebindTextures=gn,this.setupRenderTarget=ei,this.updateRenderTargetMipmap=vn,this.updateMultisampleRenderTarget=Ii,this.setupDepthRenderbuffer=sn,this.setupFrameBufferTexture=Pt,this.useMultisampledRTT=Fn}function uO(a,t){function n(r,o=xo){let c;const d=ni.getTransfer(o);if(r===Wa)return a.UNSIGNED_BYTE;if(r===ax)return a.UNSIGNED_SHORT_4_4_4_4;if(r===ox)return a.UNSIGNED_SHORT_5_5_5_1;if(r===_E)return a.UNSIGNED_INT_5_9_9_9_REV;if(r===pE)return a.BYTE;if(r===mE)return a.SHORT;if(r===Hu)return a.UNSIGNED_SHORT;if(r===sx)return a.INT;if(r===Bl)return a.UNSIGNED_INT;if(r===Va)return a.FLOAT;if(r===of)return a.HALF_FLOAT;if(r===gE)return a.ALPHA;if(r===xE)return a.RGB;if(r===Zs)return a.RGBA;if(r===vE)return a.LUMINANCE;if(r===yE)return a.LUMINANCE_ALPHA;if(r===ah)return a.DEPTH_COMPONENT;if(r===_h)return a.DEPTH_STENCIL;if(r===ME)return a.RED;if(r===lx)return a.RED_INTEGER;if(r===SE)return a.RG;if(r===cx)return a.RG_INTEGER;if(r===hx)return a.RGBA_INTEGER;if(r===Ap||r===Rp||r===Cp||r===Pp)if(d===pi)if(c=t.get("WEBGL_compressed_texture_s3tc_srgb"),c!==null){if(r===Ap)return c.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(r===Rp)return c.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(r===Cp)return c.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(r===Pp)return c.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else return null;else if(c=t.get("WEBGL_compressed_texture_s3tc"),c!==null){if(r===Ap)return c.COMPRESSED_RGB_S3TC_DXT1_EXT;if(r===Rp)return c.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(r===Cp)return c.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(r===Pp)return c.COMPRESSED_RGBA_S3TC_DXT5_EXT}else return null;if(r===r0||r===s0||r===a0||r===o0)if(c=t.get("WEBGL_compressed_texture_pvrtc"),c!==null){if(r===r0)return c.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(r===s0)return c.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(r===a0)return c.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(r===o0)return c.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}else return null;if(r===l0||r===c0||r===h0)if(c=t.get("WEBGL_compressed_texture_etc"),c!==null){if(r===l0||r===c0)return d===pi?c.COMPRESSED_SRGB8_ETC2:c.COMPRESSED_RGB8_ETC2;if(r===h0)return d===pi?c.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:c.COMPRESSED_RGBA8_ETC2_EAC}else return null;if(r===u0||r===f0||r===d0||r===p0||r===m0||r===_0||r===g0||r===x0||r===v0||r===y0||r===M0||r===S0||r===b0||r===E0)if(c=t.get("WEBGL_compressed_texture_astc"),c!==null){if(r===u0)return d===pi?c.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:c.COMPRESSED_RGBA_ASTC_4x4_KHR;if(r===f0)return d===pi?c.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:c.COMPRESSED_RGBA_ASTC_5x4_KHR;if(r===d0)return d===pi?c.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:c.COMPRESSED_RGBA_ASTC_5x5_KHR;if(r===p0)return d===pi?c.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:c.COMPRESSED_RGBA_ASTC_6x5_KHR;if(r===m0)return d===pi?c.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:c.COMPRESSED_RGBA_ASTC_6x6_KHR;if(r===_0)return d===pi?c.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:c.COMPRESSED_RGBA_ASTC_8x5_KHR;if(r===g0)return d===pi?c.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:c.COMPRESSED_RGBA_ASTC_8x6_KHR;if(r===x0)return d===pi?c.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:c.COMPRESSED_RGBA_ASTC_8x8_KHR;if(r===v0)return d===pi?c.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:c.COMPRESSED_RGBA_ASTC_10x5_KHR;if(r===y0)return d===pi?c.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:c.COMPRESSED_RGBA_ASTC_10x6_KHR;if(r===M0)return d===pi?c.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:c.COMPRESSED_RGBA_ASTC_10x8_KHR;if(r===S0)return d===pi?c.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:c.COMPRESSED_RGBA_ASTC_10x10_KHR;if(r===b0)return d===pi?c.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:c.COMPRESSED_RGBA_ASTC_12x10_KHR;if(r===E0)return d===pi?c.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:c.COMPRESSED_RGBA_ASTC_12x12_KHR}else return null;if(r===Ip||r===w0||r===T0)if(c=t.get("EXT_texture_compression_bptc"),c!==null){if(r===Ip)return d===pi?c.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:c.COMPRESSED_RGBA_BPTC_UNORM_EXT;if(r===w0)return c.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;if(r===T0)return c.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT}else return null;if(r===bE||r===A0||r===R0||r===C0)if(c=t.get("EXT_texture_compression_rgtc"),c!==null){if(r===Ip)return c.COMPRESSED_RED_RGTC1_EXT;if(r===A0)return c.COMPRESSED_SIGNED_RED_RGTC1_EXT;if(r===R0)return c.COMPRESSED_RED_GREEN_RGTC2_EXT;if(r===C0)return c.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}else return null;return r===mh?a.UNSIGNED_INT_24_8:a[r]!==void 0?a[r]:null}return{convert:n}}const fO={type:"move"};class yg{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return this._hand===null&&(this._hand=new _p,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return this._targetRay===null&&(this._targetRay=new _p,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new ue,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new ue),this._targetRay}getGripSpace(){return this._grip===null&&(this._grip=new _p,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new ue,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new ue),this._grip}dispatchEvent(t){return this._targetRay!==null&&this._targetRay.dispatchEvent(t),this._grip!==null&&this._grip.dispatchEvent(t),this._hand!==null&&this._hand.dispatchEvent(t),this}connect(t){if(t&&t.hand){const n=this._hand;if(n)for(const r of t.hand.values())this._getHandJoint(n,r)}return this.dispatchEvent({type:"connected",data:t}),this}disconnect(t){return this.dispatchEvent({type:"disconnected",data:t}),this._targetRay!==null&&(this._targetRay.visible=!1),this._grip!==null&&(this._grip.visible=!1),this._hand!==null&&(this._hand.visible=!1),this}update(t,n,r){let o=null,c=null,d=null;const p=this._targetRay,v=this._grip,_=this._hand;if(t&&n.session.visibilityState!=="visible-blurred"){if(_&&t.hand){d=!0;for(const L of t.hand.values()){const P=n.getJointPose(L,r),A=this._getHandJoint(_,L);P!==null&&(A.matrix.fromArray(P.transform.matrix),A.matrix.decompose(A.position,A.rotation,A.scale),A.matrixWorldNeedsUpdate=!0,A.jointRadius=P.radius),A.visible=P!==null}const x=_.joints["index-finger-tip"],M=_.joints["thumb-tip"],b=x.position.distanceTo(M.position),E=.02,U=.005;_.inputState.pinching&&b>E+U?(_.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:t.handedness,target:this})):!_.inputState.pinching&&b<=E-U&&(_.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:t.handedness,target:this}))}else v!==null&&t.gripSpace&&(c=n.getPose(t.gripSpace,r),c!==null&&(v.matrix.fromArray(c.transform.matrix),v.matrix.decompose(v.position,v.rotation,v.scale),v.matrixWorldNeedsUpdate=!0,c.linearVelocity?(v.hasLinearVelocity=!0,v.linearVelocity.copy(c.linearVelocity)):v.hasLinearVelocity=!1,c.angularVelocity?(v.hasAngularVelocity=!0,v.angularVelocity.copy(c.angularVelocity)):v.hasAngularVelocity=!1));p!==null&&(o=n.getPose(t.targetRaySpace,r),o===null&&c!==null&&(o=c),o!==null&&(p.matrix.fromArray(o.transform.matrix),p.matrix.decompose(p.position,p.rotation,p.scale),p.matrixWorldNeedsUpdate=!0,o.linearVelocity?(p.hasLinearVelocity=!0,p.linearVelocity.copy(o.linearVelocity)):p.hasLinearVelocity=!1,o.angularVelocity?(p.hasAngularVelocity=!0,p.angularVelocity.copy(o.angularVelocity)):p.hasAngularVelocity=!1,this.dispatchEvent(fO)))}return p!==null&&(p.visible=o!==null),v!==null&&(v.visible=c!==null),_!==null&&(_.visible=d!==null),this}_getHandJoint(t,n){if(t.joints[n.jointName]===void 0){const r=new _p;r.matrixAutoUpdate=!1,r.visible=!1,t.joints[n.jointName]=r,t.add(r)}return t.joints[n.jointName]}}const dO=`
void main() {

	gl_Position = vec4( position, 1.0 );

}`,pO=`
uniform sampler2DArray depthColor;
uniform float depthWidth;
uniform float depthHeight;

void main() {

	vec2 coord = vec2( gl_FragCoord.x / depthWidth, gl_FragCoord.y / depthHeight );

	if ( coord.x >= 1.0 ) {

		gl_FragDepth = texture( depthColor, vec3( coord.x - 1.0, coord.y, 1 ) ).r;

	} else {

		gl_FragDepth = texture( depthColor, vec3( coord.x, coord.y, 0 ) ).r;

	}

}`;class mO{constructor(){this.texture=null,this.mesh=null,this.depthNear=0,this.depthFar=0}init(t,n,r){if(this.texture===null){const o=new Tr,c=t.properties.get(o);c.__webglTexture=n.texture,(n.depthNear!==r.depthNear||n.depthFar!==r.depthFar)&&(this.depthNear=n.depthNear,this.depthFar=n.depthFar),this.texture=o}}getMesh(t){if(this.texture!==null&&this.mesh===null){const n=t.cameras[0].viewport,r=new Lo({vertexShader:dO,fragmentShader:pO,uniforms:{depthColor:{value:this.texture},depthWidth:{value:n.z},depthHeight:{value:n.w}}});this.mesh=new As(new rm(20,20),r)}return this.mesh}reset(){this.texture=null,this.mesh=null}getDepthTexture(){return this.texture}}class _O extends Xl{constructor(t,n){super();const r=this;let o=null,c=1,d=null,p="local-floor",v=1,_=null,x=null,M=null,b=null,E=null,U=null;const L=new mO,P=n.getContextAttributes();let A=null,X=null;const k=[],O=[],z=new ln;let Y=null;const W=new Ys;W.viewport=new Vi;const te=new Ys;te.viewport=new Vi;const N=[W,te],B=new NL;let ee=null,Ee=null;this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(Le){let et=k[Le];return et===void 0&&(et=new yg,k[Le]=et),et.getTargetRaySpace()},this.getControllerGrip=function(Le){let et=k[Le];return et===void 0&&(et=new yg,k[Le]=et),et.getGripSpace()},this.getHand=function(Le){let et=k[Le];return et===void 0&&(et=new yg,k[Le]=et),et.getHandSpace()};function de(Le){const et=O.indexOf(Le.inputSource);if(et===-1)return;const Pt=k[et];Pt!==void 0&&(Pt.update(Le.inputSource,Le.frame,_||d),Pt.dispatchEvent({type:Le.type,data:Le.inputSource}))}function be(){o.removeEventListener("select",de),o.removeEventListener("selectstart",de),o.removeEventListener("selectend",de),o.removeEventListener("squeeze",de),o.removeEventListener("squeezestart",de),o.removeEventListener("squeezeend",de),o.removeEventListener("end",be),o.removeEventListener("inputsourceschange",Ae);for(let Le=0;Le<k.length;Le++){const et=O[Le];et!==null&&(O[Le]=null,k[Le].disconnect(et))}ee=null,Ee=null,L.reset(),t.setRenderTarget(A),E=null,b=null,M=null,o=null,X=null,Yt.stop(),r.isPresenting=!1,t.setPixelRatio(Y),t.setSize(z.width,z.height,!1),r.dispatchEvent({type:"sessionend"})}this.setFramebufferScaleFactor=function(Le){c=Le,r.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(Le){p=Le,r.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return _||d},this.setReferenceSpace=function(Le){_=Le},this.getBaseLayer=function(){return b!==null?b:E},this.getBinding=function(){return M},this.getFrame=function(){return U},this.getSession=function(){return o},this.setSession=async function(Le){if(o=Le,o!==null){if(A=t.getRenderTarget(),o.addEventListener("select",de),o.addEventListener("selectstart",de),o.addEventListener("selectend",de),o.addEventListener("squeeze",de),o.addEventListener("squeezestart",de),o.addEventListener("squeezeend",de),o.addEventListener("end",be),o.addEventListener("inputsourceschange",Ae),P.xrCompatible!==!0&&await n.makeXRCompatible(),Y=t.getPixelRatio(),t.getSize(z),o.enabledFeatures!==void 0&&o.enabledFeatures.includes("layers")){let Pt=null,lt=null,$t=null;P.depth&&($t=P.stencil?n.DEPTH24_STENCIL8:n.DEPTH_COMPONENT24,Pt=P.stencil?_h:ah,lt=P.stencil?mh:Bl);const sn={colorFormat:n.RGBA8,depthFormat:$t,scaleFactor:c};M=new XRWebGLBinding(o,n),b=M.createProjectionLayer(sn),o.updateRenderState({layers:[b]}),t.setPixelRatio(1),t.setSize(b.textureWidth,b.textureHeight,!1),X=new zl(b.textureWidth,b.textureHeight,{format:Zs,type:Wa,depthTexture:new BE(b.textureWidth,b.textureHeight,lt,void 0,void 0,void 0,void 0,void 0,void 0,Pt),stencilBuffer:P.stencil,colorSpace:t.outputColorSpace,samples:P.antialias?4:0,resolveDepthBuffer:b.ignoreDepthValues===!1})}else{const Pt={antialias:P.antialias,alpha:!0,depth:P.depth,stencil:P.stencil,framebufferScaleFactor:c};E=new XRWebGLLayer(o,n,Pt),o.updateRenderState({baseLayer:E}),t.setPixelRatio(1),t.setSize(E.framebufferWidth,E.framebufferHeight,!1),X=new zl(E.framebufferWidth,E.framebufferHeight,{format:Zs,type:Wa,colorSpace:t.outputColorSpace,stencilBuffer:P.stencil})}X.isXRRenderTarget=!0,this.setFoveation(v),_=null,d=await o.requestReferenceSpace(p),Yt.setContext(o),Yt.start(),r.isPresenting=!0,r.dispatchEvent({type:"sessionstart"})}},this.getEnvironmentBlendMode=function(){if(o!==null)return o.environmentBlendMode},this.getDepthTexture=function(){return L.getDepthTexture()};function Ae(Le){for(let et=0;et<Le.removed.length;et++){const Pt=Le.removed[et],lt=O.indexOf(Pt);lt>=0&&(O[lt]=null,k[lt].disconnect(Pt))}for(let et=0;et<Le.added.length;et++){const Pt=Le.added[et];let lt=O.indexOf(Pt);if(lt===-1){for(let sn=0;sn<k.length;sn++)if(sn>=O.length){O.push(Pt),lt=sn;break}else if(O[sn]===null){O[sn]=Pt,lt=sn;break}if(lt===-1)break}const $t=k[lt];$t&&$t.connect(Pt)}}const Me=new ue,me=new ue;function _e(Le,et,Pt){Me.setFromMatrixPosition(et.matrixWorld),me.setFromMatrixPosition(Pt.matrixWorld);const lt=Me.distanceTo(me),$t=et.projectionMatrix.elements,sn=Pt.projectionMatrix.elements,gn=$t[14]/($t[10]-1),ei=$t[14]/($t[10]+1),vn=($t[9]+1)/$t[5],pn=($t[9]-1)/$t[5],fe=($t[8]-1)/$t[0],Ii=(sn[8]+1)/sn[0],Nn=gn*fe,Fn=gn*Ii,Qt=lt/(-fe+Ii),ui=Qt*-fe;if(et.matrixWorld.decompose(Le.position,Le.quaternion,Le.scale),Le.translateX(ui),Le.translateZ(Qt),Le.matrixWorld.compose(Le.position,Le.quaternion,Le.scale),Le.matrixWorldInverse.copy(Le.matrixWorld).invert(),$t[10]===-1)Le.projectionMatrix.copy(et.projectionMatrix),Le.projectionMatrixInverse.copy(et.projectionMatrixInverse);else{const Kt=gn+Qt,ae=ei+Qt,K=Nn-ui,we=Fn+(lt-ui),Ye=vn*ei/ae*Kt,je=pn*ei/ae*Kt;Le.projectionMatrix.makePerspective(K,we,Ye,je,Kt,ae),Le.projectionMatrixInverse.copy(Le.projectionMatrix).invert()}}function Fe(Le,et){et===null?Le.matrixWorld.copy(Le.matrix):Le.matrixWorld.multiplyMatrices(et.matrixWorld,Le.matrix),Le.matrixWorldInverse.copy(Le.matrixWorld).invert()}this.updateCamera=function(Le){if(o===null)return;let et=Le.near,Pt=Le.far;L.texture!==null&&(L.depthNear>0&&(et=L.depthNear),L.depthFar>0&&(Pt=L.depthFar)),B.near=te.near=W.near=et,B.far=te.far=W.far=Pt,(ee!==B.near||Ee!==B.far)&&(o.updateRenderState({depthNear:B.near,depthFar:B.far}),ee=B.near,Ee=B.far),W.layers.mask=Le.layers.mask|2,te.layers.mask=Le.layers.mask|4,B.layers.mask=W.layers.mask|te.layers.mask;const lt=Le.parent,$t=B.cameras;Fe(B,lt);for(let sn=0;sn<$t.length;sn++)Fe($t[sn],lt);$t.length===2?_e(B,W,te):B.projectionMatrix.copy(W.projectionMatrix),He(Le,B,lt)};function He(Le,et,Pt){Pt===null?Le.matrix.copy(et.matrixWorld):(Le.matrix.copy(Pt.matrixWorld),Le.matrix.invert(),Le.matrix.multiply(et.matrixWorld)),Le.matrix.decompose(Le.position,Le.quaternion,Le.scale),Le.updateMatrixWorld(!0),Le.projectionMatrix.copy(et.projectionMatrix),Le.projectionMatrixInverse.copy(et.projectionMatrixInverse),Le.isPerspectiveCamera&&(Le.fov=P0*2*Math.atan(1/Le.projectionMatrix.elements[5]),Le.zoom=1)}this.getCamera=function(){return B},this.getFoveation=function(){if(!(b===null&&E===null))return v},this.setFoveation=function(Le){v=Le,b!==null&&(b.fixedFoveation=Le),E!==null&&E.fixedFoveation!==void 0&&(E.fixedFoveation=Le)},this.hasDepthSensing=function(){return L.texture!==null},this.getDepthSensingMesh=function(){return L.getMesh(B)};let nt=null;function ut(Le,et){if(x=et.getViewerPose(_||d),U=et,x!==null){const Pt=x.views;E!==null&&(t.setRenderTargetFramebuffer(X,E.framebuffer),t.setRenderTarget(X));let lt=!1;Pt.length!==B.cameras.length&&(B.cameras.length=0,lt=!0);for(let sn=0;sn<Pt.length;sn++){const gn=Pt[sn];let ei=null;if(E!==null)ei=E.getViewport(gn);else{const pn=M.getViewSubImage(b,gn);ei=pn.viewport,sn===0&&(t.setRenderTargetTextures(X,pn.colorTexture,b.ignoreDepthValues?void 0:pn.depthStencilTexture),t.setRenderTarget(X))}let vn=N[sn];vn===void 0&&(vn=new Ys,vn.layers.enable(sn),vn.viewport=new Vi,N[sn]=vn),vn.matrix.fromArray(gn.transform.matrix),vn.matrix.decompose(vn.position,vn.quaternion,vn.scale),vn.projectionMatrix.fromArray(gn.projectionMatrix),vn.projectionMatrixInverse.copy(vn.projectionMatrix).invert(),vn.viewport.set(ei.x,ei.y,ei.width,ei.height),sn===0&&(B.matrix.copy(vn.matrix),B.matrix.decompose(B.position,B.quaternion,B.scale)),lt===!0&&B.cameras.push(vn)}const $t=o.enabledFeatures;if($t&&$t.includes("depth-sensing")){const sn=M.getDepthInformation(Pt[0]);sn&&sn.isValid&&sn.texture&&L.init(t,sn,o.renderState)}}for(let Pt=0;Pt<k.length;Pt++){const lt=O[Pt],$t=k[Pt];lt!==null&&$t!==void 0&&$t.update(lt,et,_||d)}nt&&nt(Le,et),et.detectedPlanes&&r.dispatchEvent({type:"planesdetected",data:et}),U=null}const Yt=new kE;Yt.setAnimationLoop(ut),this.setAnimationLoop=function(Le){nt=Le},this.dispose=function(){}}}const Ml=new Xa,gO=new Ti;function xO(a,t){function n(P,A){P.matrixAutoUpdate===!0&&P.updateMatrix(),A.value.copy(P.matrix)}function r(P,A){A.color.getRGB(P.fogColor.value,IE(a)),A.isFog?(P.fogNear.value=A.near,P.fogFar.value=A.far):A.isFogExp2&&(P.fogDensity.value=A.density)}function o(P,A,X,k,O){A.isMeshBasicMaterial||A.isMeshLambertMaterial?c(P,A):A.isMeshToonMaterial?(c(P,A),M(P,A)):A.isMeshPhongMaterial?(c(P,A),x(P,A)):A.isMeshStandardMaterial?(c(P,A),b(P,A),A.isMeshPhysicalMaterial&&E(P,A,O)):A.isMeshMatcapMaterial?(c(P,A),U(P,A)):A.isMeshDepthMaterial?c(P,A):A.isMeshDistanceMaterial?(c(P,A),L(P,A)):A.isMeshNormalMaterial?c(P,A):A.isLineBasicMaterial?(d(P,A),A.isLineDashedMaterial&&p(P,A)):A.isPointsMaterial?v(P,A,X,k):A.isSpriteMaterial?_(P,A):A.isShadowMaterial?(P.color.value.copy(A.color),P.opacity.value=A.opacity):A.isShaderMaterial&&(A.uniformsNeedUpdate=!1)}function c(P,A){P.opacity.value=A.opacity,A.color&&P.diffuse.value.copy(A.color),A.emissive&&P.emissive.value.copy(A.emissive).multiplyScalar(A.emissiveIntensity),A.map&&(P.map.value=A.map,n(A.map,P.mapTransform)),A.alphaMap&&(P.alphaMap.value=A.alphaMap,n(A.alphaMap,P.alphaMapTransform)),A.bumpMap&&(P.bumpMap.value=A.bumpMap,n(A.bumpMap,P.bumpMapTransform),P.bumpScale.value=A.bumpScale,A.side===$r&&(P.bumpScale.value*=-1)),A.normalMap&&(P.normalMap.value=A.normalMap,n(A.normalMap,P.normalMapTransform),P.normalScale.value.copy(A.normalScale),A.side===$r&&P.normalScale.value.negate()),A.displacementMap&&(P.displacementMap.value=A.displacementMap,n(A.displacementMap,P.displacementMapTransform),P.displacementScale.value=A.displacementScale,P.displacementBias.value=A.displacementBias),A.emissiveMap&&(P.emissiveMap.value=A.emissiveMap,n(A.emissiveMap,P.emissiveMapTransform)),A.specularMap&&(P.specularMap.value=A.specularMap,n(A.specularMap,P.specularMapTransform)),A.alphaTest>0&&(P.alphaTest.value=A.alphaTest);const X=t.get(A),k=X.envMap,O=X.envMapRotation;k&&(P.envMap.value=k,Ml.copy(O),Ml.x*=-1,Ml.y*=-1,Ml.z*=-1,k.isCubeTexture&&k.isRenderTargetTexture===!1&&(Ml.y*=-1,Ml.z*=-1),P.envMapRotation.value.setFromMatrix4(gO.makeRotationFromEuler(Ml)),P.flipEnvMap.value=k.isCubeTexture&&k.isRenderTargetTexture===!1?-1:1,P.reflectivity.value=A.reflectivity,P.ior.value=A.ior,P.refractionRatio.value=A.refractionRatio),A.lightMap&&(P.lightMap.value=A.lightMap,P.lightMapIntensity.value=A.lightMapIntensity,n(A.lightMap,P.lightMapTransform)),A.aoMap&&(P.aoMap.value=A.aoMap,P.aoMapIntensity.value=A.aoMapIntensity,n(A.aoMap,P.aoMapTransform))}function d(P,A){P.diffuse.value.copy(A.color),P.opacity.value=A.opacity,A.map&&(P.map.value=A.map,n(A.map,P.mapTransform))}function p(P,A){P.dashSize.value=A.dashSize,P.totalSize.value=A.dashSize+A.gapSize,P.scale.value=A.scale}function v(P,A,X,k){P.diffuse.value.copy(A.color),P.opacity.value=A.opacity,P.size.value=A.size*X,P.scale.value=k*.5,A.map&&(P.map.value=A.map,n(A.map,P.uvTransform)),A.alphaMap&&(P.alphaMap.value=A.alphaMap,n(A.alphaMap,P.alphaMapTransform)),A.alphaTest>0&&(P.alphaTest.value=A.alphaTest)}function _(P,A){P.diffuse.value.copy(A.color),P.opacity.value=A.opacity,P.rotation.value=A.rotation,A.map&&(P.map.value=A.map,n(A.map,P.mapTransform)),A.alphaMap&&(P.alphaMap.value=A.alphaMap,n(A.alphaMap,P.alphaMapTransform)),A.alphaTest>0&&(P.alphaTest.value=A.alphaTest)}function x(P,A){P.specular.value.copy(A.specular),P.shininess.value=Math.max(A.shininess,1e-4)}function M(P,A){A.gradientMap&&(P.gradientMap.value=A.gradientMap)}function b(P,A){P.metalness.value=A.metalness,A.metalnessMap&&(P.metalnessMap.value=A.metalnessMap,n(A.metalnessMap,P.metalnessMapTransform)),P.roughness.value=A.roughness,A.roughnessMap&&(P.roughnessMap.value=A.roughnessMap,n(A.roughnessMap,P.roughnessMapTransform)),A.envMap&&(P.envMapIntensity.value=A.envMapIntensity)}function E(P,A,X){P.ior.value=A.ior,A.sheen>0&&(P.sheenColor.value.copy(A.sheenColor).multiplyScalar(A.sheen),P.sheenRoughness.value=A.sheenRoughness,A.sheenColorMap&&(P.sheenColorMap.value=A.sheenColorMap,n(A.sheenColorMap,P.sheenColorMapTransform)),A.sheenRoughnessMap&&(P.sheenRoughnessMap.value=A.sheenRoughnessMap,n(A.sheenRoughnessMap,P.sheenRoughnessMapTransform))),A.clearcoat>0&&(P.clearcoat.value=A.clearcoat,P.clearcoatRoughness.value=A.clearcoatRoughness,A.clearcoatMap&&(P.clearcoatMap.value=A.clearcoatMap,n(A.clearcoatMap,P.clearcoatMapTransform)),A.clearcoatRoughnessMap&&(P.clearcoatRoughnessMap.value=A.clearcoatRoughnessMap,n(A.clearcoatRoughnessMap,P.clearcoatRoughnessMapTransform)),A.clearcoatNormalMap&&(P.clearcoatNormalMap.value=A.clearcoatNormalMap,n(A.clearcoatNormalMap,P.clearcoatNormalMapTransform),P.clearcoatNormalScale.value.copy(A.clearcoatNormalScale),A.side===$r&&P.clearcoatNormalScale.value.negate())),A.dispersion>0&&(P.dispersion.value=A.dispersion),A.iridescence>0&&(P.iridescence.value=A.iridescence,P.iridescenceIOR.value=A.iridescenceIOR,P.iridescenceThicknessMinimum.value=A.iridescenceThicknessRange[0],P.iridescenceThicknessMaximum.value=A.iridescenceThicknessRange[1],A.iridescenceMap&&(P.iridescenceMap.value=A.iridescenceMap,n(A.iridescenceMap,P.iridescenceMapTransform)),A.iridescenceThicknessMap&&(P.iridescenceThicknessMap.value=A.iridescenceThicknessMap,n(A.iridescenceThicknessMap,P.iridescenceThicknessMapTransform))),A.transmission>0&&(P.transmission.value=A.transmission,P.transmissionSamplerMap.value=X.texture,P.transmissionSamplerSize.value.set(X.width,X.height),A.transmissionMap&&(P.transmissionMap.value=A.transmissionMap,n(A.transmissionMap,P.transmissionMapTransform)),P.thickness.value=A.thickness,A.thicknessMap&&(P.thicknessMap.value=A.thicknessMap,n(A.thicknessMap,P.thicknessMapTransform)),P.attenuationDistance.value=A.attenuationDistance,P.attenuationColor.value.copy(A.attenuationColor)),A.anisotropy>0&&(P.anisotropyVector.value.set(A.anisotropy*Math.cos(A.anisotropyRotation),A.anisotropy*Math.sin(A.anisotropyRotation)),A.anisotropyMap&&(P.anisotropyMap.value=A.anisotropyMap,n(A.anisotropyMap,P.anisotropyMapTransform))),P.specularIntensity.value=A.specularIntensity,P.specularColor.value.copy(A.specularColor),A.specularColorMap&&(P.specularColorMap.value=A.specularColorMap,n(A.specularColorMap,P.specularColorMapTransform)),A.specularIntensityMap&&(P.specularIntensityMap.value=A.specularIntensityMap,n(A.specularIntensityMap,P.specularIntensityMapTransform))}function U(P,A){A.matcap&&(P.matcap.value=A.matcap)}function L(P,A){const X=t.get(A).light;P.referencePosition.value.setFromMatrixPosition(X.matrixWorld),P.nearDistance.value=X.shadow.camera.near,P.farDistance.value=X.shadow.camera.far}return{refreshFogUniforms:r,refreshMaterialUniforms:o}}function vO(a,t,n,r){let o={},c={},d=[];const p=a.getParameter(a.MAX_UNIFORM_BUFFER_BINDINGS);function v(X,k){const O=k.program;r.uniformBlockBinding(X,O)}function _(X,k){let O=o[X.id];O===void 0&&(U(X),O=x(X),o[X.id]=O,X.addEventListener("dispose",P));const z=k.program;r.updateUBOMapping(X,z);const Y=t.render.frame;c[X.id]!==Y&&(b(X),c[X.id]=Y)}function x(X){const k=M();X.__bindingPointIndex=k;const O=a.createBuffer(),z=X.__size,Y=X.usage;return a.bindBuffer(a.UNIFORM_BUFFER,O),a.bufferData(a.UNIFORM_BUFFER,z,Y),a.bindBuffer(a.UNIFORM_BUFFER,null),a.bindBufferBase(a.UNIFORM_BUFFER,k,O),O}function M(){for(let X=0;X<p;X++)if(d.indexOf(X)===-1)return d.push(X),X;return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."),0}function b(X){const k=o[X.id],O=X.uniforms,z=X.__cache;a.bindBuffer(a.UNIFORM_BUFFER,k);for(let Y=0,W=O.length;Y<W;Y++){const te=Array.isArray(O[Y])?O[Y]:[O[Y]];for(let N=0,B=te.length;N<B;N++){const ee=te[N];if(E(ee,Y,N,z)===!0){const Ee=ee.__offset,de=Array.isArray(ee.value)?ee.value:[ee.value];let be=0;for(let Ae=0;Ae<de.length;Ae++){const Me=de[Ae],me=L(Me);typeof Me=="number"||typeof Me=="boolean"?(ee.__data[0]=Me,a.bufferSubData(a.UNIFORM_BUFFER,Ee+be,ee.__data)):Me.isMatrix3?(ee.__data[0]=Me.elements[0],ee.__data[1]=Me.elements[1],ee.__data[2]=Me.elements[2],ee.__data[3]=0,ee.__data[4]=Me.elements[3],ee.__data[5]=Me.elements[4],ee.__data[6]=Me.elements[5],ee.__data[7]=0,ee.__data[8]=Me.elements[6],ee.__data[9]=Me.elements[7],ee.__data[10]=Me.elements[8],ee.__data[11]=0):(Me.toArray(ee.__data,be),be+=me.storage/Float32Array.BYTES_PER_ELEMENT)}a.bufferSubData(a.UNIFORM_BUFFER,Ee,ee.__data)}}}a.bindBuffer(a.UNIFORM_BUFFER,null)}function E(X,k,O,z){const Y=X.value,W=k+"_"+O;if(z[W]===void 0)return typeof Y=="number"||typeof Y=="boolean"?z[W]=Y:z[W]=Y.clone(),!0;{const te=z[W];if(typeof Y=="number"||typeof Y=="boolean"){if(te!==Y)return z[W]=Y,!0}else if(te.equals(Y)===!1)return te.copy(Y),!0}return!1}function U(X){const k=X.uniforms;let O=0;const z=16;for(let W=0,te=k.length;W<te;W++){const N=Array.isArray(k[W])?k[W]:[k[W]];for(let B=0,ee=N.length;B<ee;B++){const Ee=N[B],de=Array.isArray(Ee.value)?Ee.value:[Ee.value];for(let be=0,Ae=de.length;be<Ae;be++){const Me=de[be],me=L(Me),_e=O%z,Fe=_e%me.boundary,He=_e+Fe;O+=Fe,He!==0&&z-He<me.storage&&(O+=z-He),Ee.__data=new Float32Array(me.storage/Float32Array.BYTES_PER_ELEMENT),Ee.__offset=O,O+=me.storage}}}const Y=O%z;return Y>0&&(O+=z-Y),X.__size=O,X.__cache={},this}function L(X){const k={boundary:0,storage:0};return typeof X=="number"||typeof X=="boolean"?(k.boundary=4,k.storage=4):X.isVector2?(k.boundary=8,k.storage=8):X.isVector3||X.isColor?(k.boundary=16,k.storage=12):X.isVector4?(k.boundary=16,k.storage=16):X.isMatrix3?(k.boundary=48,k.storage=48):X.isMatrix4?(k.boundary=64,k.storage=64):X.isTexture?console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group."):console.warn("THREE.WebGLRenderer: Unsupported uniform value type.",X),k}function P(X){const k=X.target;k.removeEventListener("dispose",P);const O=d.indexOf(k.__bindingPointIndex);d.splice(O,1),a.deleteBuffer(o[k.id]),delete o[k.id],delete c[k.id]}function A(){for(const X in o)a.deleteBuffer(o[X]);d=[],o={},c={}}return{bind:v,update:_,dispose:A}}class yO{constructor(t={}){const{canvas:n=$D(),context:r=null,depth:o=!0,stencil:c=!1,alpha:d=!1,antialias:p=!1,premultipliedAlpha:v=!0,preserveDrawingBuffer:_=!1,powerPreference:x="default",failIfMajorPerformanceCaveat:M=!1,reverseDepthBuffer:b=!1}=t;this.isWebGLRenderer=!0;let E;if(r!==null){if(typeof WebGLRenderingContext<"u"&&r instanceof WebGLRenderingContext)throw new Error("THREE.WebGLRenderer: WebGL 1 is not supported since r163.");E=r.getContextAttributes().alpha}else E=d;const U=new Uint32Array(4),L=new Int32Array(4);let P=null,A=null;const X=[],k=[];this.domElement=n,this.debug={checkShaderErrors:!0,onShaderError:null},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this._outputColorSpace=Es,this.toneMapping=wo,this.toneMappingExposure=1;const O=this;let z=!1,Y=0,W=0,te=null,N=-1,B=null;const ee=new Vi,Ee=new Vi;let de=null;const be=new Qn(0);let Ae=0,Me=n.width,me=n.height,_e=1,Fe=null,He=null;const nt=new Vi(0,0,Me,me),ut=new Vi(0,0,Me,me);let Yt=!1;const Le=new FE;let et=!1,Pt=!1;this.transmissionResolutionScale=1;const lt=new Ti,$t=new Ti,sn=new ue,gn=new Vi,ei={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};let vn=!1;function pn(){return te===null?_e:1}let fe=r;function Ii(J,ge){return n.getContext(J,ge)}try{const J={alpha:!0,depth:o,stencil:c,antialias:p,premultipliedAlpha:v,preserveDrawingBuffer:_,powerPreference:x,failIfMajorPerformanceCaveat:M};if("setAttribute"in n&&n.setAttribute("data-engine",`three.js r${rx}`),n.addEventListener("webglcontextlost",Ge,!1),n.addEventListener("webglcontextrestored",wt,!1),n.addEventListener("webglcontextcreationerror",ft,!1),fe===null){const ge="webgl2";if(fe=Ii(ge,J),fe===null)throw Ii(ge)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}}catch(J){throw console.error("THREE.WebGLRenderer: "+J.message),J}let Nn,Fn,Qt,ui,Kt,ae,K,we,Ye,je,Ve,Ot,_t,Tt,In,it,xt,tn,kt,Nt,zn,mn,fi,pe;function mt(){Nn=new CN(fe),Nn.init(),mn=new uO(fe,Nn),Fn=new bN(fe,Nn,t,mn),Qt=new cO(fe,Nn),Fn.reverseDepthBuffer&&b&&Qt.buffers.depth.setReversed(!0),ui=new DN(fe),Kt=new KF,ae=new hO(fe,Nn,Qt,Kt,Fn,mn,ui),K=new wN(O),we=new RN(O),Ye=new zL(fe),fi=new MN(fe,Ye),je=new PN(fe,Ye,ui,fi),Ve=new UN(fe,je,Ye,ui),kt=new LN(fe,Fn,ae),it=new EN(Kt),Ot=new $F(O,K,we,Nn,Fn,fi,it),_t=new xO(O,Kt),Tt=new jF,In=new rO(Nn),tn=new yN(O,K,we,Qt,Ve,E,v),xt=new oO(O,Ve,Fn),pe=new vO(fe,ui,Fn,Qt),Nt=new SN(fe,Nn,ui),zn=new IN(fe,Nn,ui),ui.programs=Ot.programs,O.capabilities=Fn,O.extensions=Nn,O.properties=Kt,O.renderLists=Tt,O.shadowMap=xt,O.state=Qt,O.info=ui}mt();const Be=new _O(O,fe);this.xr=Be,this.getContext=function(){return fe},this.getContextAttributes=function(){return fe.getContextAttributes()},this.forceContextLoss=function(){const J=Nn.get("WEBGL_lose_context");J&&J.loseContext()},this.forceContextRestore=function(){const J=Nn.get("WEBGL_lose_context");J&&J.restoreContext()},this.getPixelRatio=function(){return _e},this.setPixelRatio=function(J){J!==void 0&&(_e=J,this.setSize(Me,me,!1))},this.getSize=function(J){return J.set(Me,me)},this.setSize=function(J,ge,Re=!0){if(Be.isPresenting){console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");return}Me=J,me=ge,n.width=Math.floor(J*_e),n.height=Math.floor(ge*_e),Re===!0&&(n.style.width=J+"px",n.style.height=ge+"px"),this.setViewport(0,0,J,ge)},this.getDrawingBufferSize=function(J){return J.set(Me*_e,me*_e).floor()},this.setDrawingBufferSize=function(J,ge,Re){Me=J,me=ge,_e=Re,n.width=Math.floor(J*Re),n.height=Math.floor(ge*Re),this.setViewport(0,0,J,ge)},this.getCurrentViewport=function(J){return J.copy(ee)},this.getViewport=function(J){return J.copy(nt)},this.setViewport=function(J,ge,Re,Ce){J.isVector4?nt.set(J.x,J.y,J.z,J.w):nt.set(J,ge,Re,Ce),Qt.viewport(ee.copy(nt).multiplyScalar(_e).round())},this.getScissor=function(J){return J.copy(ut)},this.setScissor=function(J,ge,Re,Ce){J.isVector4?ut.set(J.x,J.y,J.z,J.w):ut.set(J,ge,Re,Ce),Qt.scissor(Ee.copy(ut).multiplyScalar(_e).round())},this.getScissorTest=function(){return Yt},this.setScissorTest=function(J){Qt.setScissorTest(Yt=J)},this.setOpaqueSort=function(J){Fe=J},this.setTransparentSort=function(J){He=J},this.getClearColor=function(J){return J.copy(tn.getClearColor())},this.setClearColor=function(){tn.setClearColor.apply(tn,arguments)},this.getClearAlpha=function(){return tn.getClearAlpha()},this.setClearAlpha=function(){tn.setClearAlpha.apply(tn,arguments)},this.clear=function(J=!0,ge=!0,Re=!0){let Ce=0;if(J){let ve=!1;if(te!==null){const tt=te.texture.format;ve=tt===hx||tt===cx||tt===lx}if(ve){const tt=te.texture.type,gt=tt===Wa||tt===Bl||tt===Hu||tt===mh||tt===ax||tt===ox,At=tn.getClearColor(),Lt=tn.getClearAlpha(),cn=At.r,hn=At.g,Jt=At.b;gt?(U[0]=cn,U[1]=hn,U[2]=Jt,U[3]=Lt,fe.clearBufferuiv(fe.COLOR,0,U)):(L[0]=cn,L[1]=hn,L[2]=Jt,L[3]=Lt,fe.clearBufferiv(fe.COLOR,0,L))}else Ce|=fe.COLOR_BUFFER_BIT}ge&&(Ce|=fe.DEPTH_BUFFER_BIT),Re&&(Ce|=fe.STENCIL_BUFFER_BIT,this.state.buffers.stencil.setMask(4294967295)),fe.clear(Ce)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){n.removeEventListener("webglcontextlost",Ge,!1),n.removeEventListener("webglcontextrestored",wt,!1),n.removeEventListener("webglcontextcreationerror",ft,!1),tn.dispose(),Tt.dispose(),In.dispose(),Kt.dispose(),K.dispose(),we.dispose(),Ve.dispose(),fi.dispose(),pe.dispose(),Ot.dispose(),Be.dispose(),Be.removeEventListener("sessionstart",ma),Be.removeEventListener("sessionend",Oo),gs.stop()};function Ge(J){J.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),z=!0}function wt(){console.log("THREE.WebGLRenderer: Context Restored."),z=!1;const J=ui.autoReset,ge=xt.enabled,Re=xt.autoUpdate,Ce=xt.needsUpdate,ve=xt.type;mt(),ui.autoReset=J,xt.enabled=ge,xt.autoUpdate=Re,xt.needsUpdate=Ce,xt.type=ve}function ft(J){console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ",J.statusMessage)}function yn(J){const ge=J.target;ge.removeEventListener("dispose",yn),vi(ge)}function vi(J){Ai(J),Kt.remove(J)}function Ai(J){const ge=Kt.get(J).programs;ge!==void 0&&(ge.forEach(function(Re){Ot.releaseProgram(Re)}),J.isShaderMaterial&&Ot.releaseShaderCache(J))}this.renderBufferDirect=function(J,ge,Re,Ce,ve,tt){ge===null&&(ge=ei);const gt=ve.isMesh&&ve.matrixWorld.determinant()<0,At=_a(J,ge,Re,Ce,ve);Qt.setMaterial(Ce,gt);let Lt=Re.index,cn=1;if(Ce.wireframe===!0){if(Lt=je.getWireframeAttribute(Re),Lt===void 0)return;cn=2}const hn=Re.drawRange,Jt=Re.attributes.position;let Un=hn.start*cn,Vn=(hn.start+hn.count)*cn;tt!==null&&(Un=Math.max(Un,tt.start*cn),Vn=Math.min(Vn,(tt.start+tt.count)*cn)),Lt!==null?(Un=Math.max(Un,0),Vn=Math.min(Vn,Lt.count)):Jt!=null&&(Un=Math.max(Un,0),Vn=Math.min(Vn,Jt.count));const Mi=Vn-Un;if(Mi<0||Mi===1/0)return;fi.setup(ve,Ce,At,Re,Lt);let gi,On=Nt;if(Lt!==null&&(gi=Ye.get(Lt),On=zn,On.setIndex(gi)),ve.isMesh)Ce.wireframe===!0?(Qt.setLineWidth(Ce.wireframeLinewidth*pn()),On.setMode(fe.LINES)):On.setMode(fe.TRIANGLES);else if(ve.isLine){let en=Ce.linewidth;en===void 0&&(en=1),Qt.setLineWidth(en*pn()),ve.isLineSegments?On.setMode(fe.LINES):ve.isLineLoop?On.setMode(fe.LINE_LOOP):On.setMode(fe.LINE_STRIP)}else ve.isPoints?On.setMode(fe.POINTS):ve.isSprite&&On.setMode(fe.TRIANGLES);if(ve.isBatchedMesh)if(ve._multiDrawInstances!==null)On.renderMultiDrawInstances(ve._multiDrawStarts,ve._multiDrawCounts,ve._multiDrawCount,ve._multiDrawInstances);else if(Nn.get("WEBGL_multi_draw"))On.renderMultiDraw(ve._multiDrawStarts,ve._multiDrawCounts,ve._multiDrawCount);else{const en=ve._multiDrawStarts,Di=ve._multiDrawCounts,Hn=ve._multiDrawCount,pr=Lt?Ye.get(Lt).bytesPerElement:1,Ls=Kt.get(Ce).currentProgram.getUniforms();for(let nr=0;nr<Hn;nr++)Ls.setValue(fe,"_gl_DrawID",nr),On.render(en[nr]/pr,Di[nr])}else if(ve.isInstancedMesh)On.renderInstances(Un,Mi,ve.count);else if(Re.isInstancedBufferGeometry){const en=Re._maxInstanceCount!==void 0?Re._maxInstanceCount:1/0,Di=Math.min(Re.instanceCount,en);On.renderInstances(Un,Mi,Di)}else On.render(Un,Mi)};function Xn(J,ge,Re){J.transparent===!0&&J.side===ka&&J.forceSinglePass===!1?(J.side=$r,J.needsUpdate=!0,$a(J,ge,Re),J.side=Do,J.needsUpdate=!0,$a(J,ge,Re),J.side=ka):$a(J,ge,Re)}this.compile=function(J,ge,Re=null){Re===null&&(Re=J),A=In.get(Re),A.init(ge),k.push(A),Re.traverseVisible(function(ve){ve.isLight&&ve.layers.test(ge.layers)&&(A.pushLight(ve),ve.castShadow&&A.pushShadow(ve))}),J!==Re&&J.traverseVisible(function(ve){ve.isLight&&ve.layers.test(ge.layers)&&(A.pushLight(ve),ve.castShadow&&A.pushShadow(ve))}),A.setupLights();const Ce=new Set;return J.traverse(function(ve){if(!(ve.isMesh||ve.isPoints||ve.isLine||ve.isSprite))return;const tt=ve.material;if(tt)if(Array.isArray(tt))for(let gt=0;gt<tt.length;gt++){const At=tt[gt];Xn(At,Re,ve),Ce.add(At)}else Xn(tt,Re,ve),Ce.add(tt)}),k.pop(),A=null,Ce},this.compileAsync=function(J,ge,Re=null){const Ce=this.compile(J,ge,Re);return new Promise(ve=>{function tt(){if(Ce.forEach(function(gt){Kt.get(gt).currentProgram.isReady()&&Ce.delete(gt)}),Ce.size===0){ve(J);return}setTimeout(tt,10)}Nn.get("KHR_parallel_shader_compile")!==null?tt():setTimeout(tt,10)})};let Bi=null;function Si(J){Bi&&Bi(J)}function ma(){gs.stop()}function Oo(){gs.start()}const gs=new kE;gs.setAnimationLoop(Si),typeof self<"u"&&gs.setContext(self),this.setAnimationLoop=function(J){Bi=J,Be.setAnimationLoop(J),J===null?gs.stop():gs.start()},Be.addEventListener("sessionstart",ma),Be.addEventListener("sessionend",Oo),this.render=function(J,ge){if(ge!==void 0&&ge.isCamera!==!0){console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");return}if(z===!0)return;if(J.matrixWorldAutoUpdate===!0&&J.updateMatrixWorld(),ge.parent===null&&ge.matrixWorldAutoUpdate===!0&&ge.updateMatrixWorld(),Be.enabled===!0&&Be.isPresenting===!0&&(Be.cameraAutoUpdate===!0&&Be.updateCamera(ge),ge=Be.getCamera()),J.isScene===!0&&J.onBeforeRender(O,J,ge,te),A=In.get(J,k.length),A.init(ge),k.push(A),$t.multiplyMatrices(ge.projectionMatrix,ge.matrixWorldInverse),Le.setFromProjectionMatrix($t),Pt=this.localClippingEnabled,et=it.init(this.clippingPlanes,Pt),P=Tt.get(J,X.length),P.init(),X.push(P),Be.enabled===!0&&Be.isPresenting===!0){const tt=O.xr.getDepthSensingMesh();tt!==null&&Ds(tt,ge,-1/0,O.sortObjects)}Ds(J,ge,0,O.sortObjects),P.finish(),O.sortObjects===!0&&P.sort(Fe,He),vn=Be.enabled===!1||Be.isPresenting===!1||Be.hasDepthSensing()===!1,vn&&tn.addToRenderList(P,J),this.info.render.frame++,et===!0&&it.beginShadows();const Re=A.state.shadowsArray;xt.render(Re,J,ge),et===!0&&it.endShadows(),this.info.autoReset===!0&&this.info.reset();const Ce=P.opaque,ve=P.transmissive;if(A.setupLights(),ge.isArrayCamera){const tt=ge.cameras;if(ve.length>0)for(let gt=0,At=tt.length;gt<At;gt++){const Lt=tt[gt];Kl(Ce,ve,J,Lt)}vn&&tn.render(J);for(let gt=0,At=tt.length;gt<At;gt++){const Lt=tt[gt];$l(P,J,Lt,Lt.viewport)}}else ve.length>0&&Kl(Ce,ve,J,ge),vn&&tn.render(J),$l(P,J,ge);te!==null&&W===0&&(ae.updateMultisampleRenderTarget(te),ae.updateRenderTargetMipmap(te)),J.isScene===!0&&J.onAfterRender(O,J,ge),fi.resetDefaultState(),N=-1,B=null,k.pop(),k.length>0?(A=k[k.length-1],et===!0&&it.setGlobalState(O.clippingPlanes,A.state.camera)):A=null,X.pop(),X.length>0?P=X[X.length-1]:P=null};function Ds(J,ge,Re,Ce){if(J.visible===!1)return;if(J.layers.test(ge.layers)){if(J.isGroup)Re=J.renderOrder;else if(J.isLOD)J.autoUpdate===!0&&J.update(ge);else if(J.isLight)A.pushLight(J),J.castShadow&&A.pushShadow(J);else if(J.isSprite){if(!J.frustumCulled||Le.intersectsSprite(J)){Ce&&gn.setFromMatrixPosition(J.matrixWorld).applyMatrix4($t);const gt=Ve.update(J),At=J.material;At.visible&&P.push(J,gt,At,Re,gn.z,null)}}else if((J.isMesh||J.isLine||J.isPoints)&&(!J.frustumCulled||Le.intersectsObject(J))){const gt=Ve.update(J),At=J.material;if(Ce&&(J.boundingSphere!==void 0?(J.boundingSphere===null&&J.computeBoundingSphere(),gn.copy(J.boundingSphere.center)):(gt.boundingSphere===null&&gt.computeBoundingSphere(),gn.copy(gt.boundingSphere.center)),gn.applyMatrix4(J.matrixWorld).applyMatrix4($t)),Array.isArray(At)){const Lt=gt.groups;for(let cn=0,hn=Lt.length;cn<hn;cn++){const Jt=Lt[cn],Un=At[Jt.materialIndex];Un&&Un.visible&&P.push(J,gt,Un,Re,gn.z,Jt)}}else At.visible&&P.push(J,gt,At,Re,gn.z,null)}}const tt=J.children;for(let gt=0,At=tt.length;gt<At;gt++)Ds(tt[gt],ge,Re,Ce)}function $l(J,ge,Re,Ce){const ve=J.opaque,tt=J.transmissive,gt=J.transparent;A.setupLightsView(Re),et===!0&&it.setGlobalState(O.clippingPlanes,Re),Ce&&Qt.viewport(ee.copy(Ce)),ve.length>0&&Za(ve,ge,Re),tt.length>0&&Za(tt,ge,Re),gt.length>0&&Za(gt,ge,Re),Qt.buffers.depth.setTest(!0),Qt.buffers.depth.setMask(!0),Qt.buffers.color.setMask(!0),Qt.setPolygonOffset(!1)}function Kl(J,ge,Re,Ce){if((Re.isScene===!0?Re.overrideMaterial:null)!==null)return;A.state.transmissionRenderTarget[Ce.id]===void 0&&(A.state.transmissionRenderTarget[Ce.id]=new zl(1,1,{generateMipmaps:!0,type:Nn.has("EXT_color_buffer_half_float")||Nn.has("EXT_color_buffer_float")?of:Wa,minFilter:Cl,samples:4,stencilBuffer:c,resolveDepthBuffer:!1,resolveStencilBuffer:!1,colorSpace:ni.workingColorSpace}));const tt=A.state.transmissionRenderTarget[Ce.id],gt=Ce.viewport||ee;tt.setSize(gt.z*O.transmissionResolutionScale,gt.w*O.transmissionResolutionScale);const At=O.getRenderTarget();O.setRenderTarget(tt),O.getClearColor(be),Ae=O.getClearAlpha(),Ae<1&&O.setClearColor(16777215,.5),O.clear(),vn&&tn.render(Re);const Lt=O.toneMapping;O.toneMapping=wo;const cn=Ce.viewport;if(Ce.viewport!==void 0&&(Ce.viewport=void 0),A.setupLightsView(Ce),et===!0&&it.setGlobalState(O.clippingPlanes,Ce),Za(J,Re,Ce),ae.updateMultisampleRenderTarget(tt),ae.updateRenderTargetMipmap(tt),Nn.has("WEBGL_multisampled_render_to_texture")===!1){let hn=!1;for(let Jt=0,Un=ge.length;Jt<Un;Jt++){const Vn=ge[Jt],Mi=Vn.object,gi=Vn.geometry,On=Vn.material,en=Vn.group;if(On.side===ka&&Mi.layers.test(Ce.layers)){const Di=On.side;On.side=$r,On.needsUpdate=!0,tr(Mi,Re,Ce,gi,On,en),On.side=Di,On.needsUpdate=!0,hn=!0}}hn===!0&&(ae.updateMultisampleRenderTarget(tt),ae.updateRenderTargetMipmap(tt))}O.setRenderTarget(At),O.setClearColor(be,Ae),cn!==void 0&&(Ce.viewport=cn),O.toneMapping=Lt}function Za(J,ge,Re){const Ce=ge.isScene===!0?ge.overrideMaterial:null;for(let ve=0,tt=J.length;ve<tt;ve++){const gt=J[ve],At=gt.object,Lt=gt.geometry,cn=Ce===null?gt.material:Ce,hn=gt.group;At.layers.test(Re.layers)&&tr(At,ge,Re,Lt,cn,hn)}}function tr(J,ge,Re,Ce,ve,tt){J.onBeforeRender(O,ge,Re,Ce,ve,tt),J.modelViewMatrix.multiplyMatrices(Re.matrixWorldInverse,J.matrixWorld),J.normalMatrix.getNormalMatrix(J.modelViewMatrix),ve.onBeforeRender(O,ge,Re,Ce,J,tt),ve.transparent===!0&&ve.side===ka&&ve.forceSinglePass===!1?(ve.side=$r,ve.needsUpdate=!0,O.renderBufferDirect(Re,ge,Ce,ve,J,tt),ve.side=Do,ve.needsUpdate=!0,O.renderBufferDirect(Re,ge,Ce,ve,J,tt),ve.side=ka):O.renderBufferDirect(Re,ge,Ce,ve,J,tt),J.onAfterRender(O,ge,Re,Ce,ve,tt)}function $a(J,ge,Re){ge.isScene!==!0&&(ge=ei);const Ce=Kt.get(J),ve=A.state.lights,tt=A.state.shadowsArray,gt=ve.state.version,At=Ot.getParameters(J,ve.state,tt,ge,Re),Lt=Ot.getProgramCacheKey(At);let cn=Ce.programs;Ce.environment=J.isMeshStandardMaterial?ge.environment:null,Ce.fog=ge.fog,Ce.envMap=(J.isMeshStandardMaterial?we:K).get(J.envMap||Ce.environment),Ce.envMapRotation=Ce.environment!==null&&J.envMap===null?ge.environmentRotation:J.envMapRotation,cn===void 0&&(J.addEventListener("dispose",yn),cn=new Map,Ce.programs=cn);let hn=cn.get(Lt);if(hn!==void 0){if(Ce.currentProgram===hn&&Ce.lightsStateVersion===gt)return Ks(J,At),hn}else At.uniforms=Ot.getUniforms(J),J.onBeforeCompile(At,O),hn=Ot.acquireProgram(At,Lt),cn.set(Lt,hn),Ce.uniforms=At.uniforms;const Jt=Ce.uniforms;return(!J.isShaderMaterial&&!J.isRawShaderMaterial||J.clipping===!0)&&(Jt.clippingPlanes=it.uniform),Ks(J,At),Ce.needsLights=Bo(J),Ce.lightsStateVersion=gt,Ce.needsLights&&(Jt.ambientLightColor.value=ve.state.ambient,Jt.lightProbe.value=ve.state.probe,Jt.directionalLights.value=ve.state.directional,Jt.directionalLightShadows.value=ve.state.directionalShadow,Jt.spotLights.value=ve.state.spot,Jt.spotLightShadows.value=ve.state.spotShadow,Jt.rectAreaLights.value=ve.state.rectArea,Jt.ltc_1.value=ve.state.rectAreaLTC1,Jt.ltc_2.value=ve.state.rectAreaLTC2,Jt.pointLights.value=ve.state.point,Jt.pointLightShadows.value=ve.state.pointShadow,Jt.hemisphereLights.value=ve.state.hemi,Jt.directionalShadowMap.value=ve.state.directionalShadowMap,Jt.directionalShadowMatrix.value=ve.state.directionalShadowMatrix,Jt.spotShadowMap.value=ve.state.spotShadowMap,Jt.spotLightMatrix.value=ve.state.spotLightMatrix,Jt.spotLightMap.value=ve.state.spotLightMap,Jt.pointShadowMap.value=ve.state.pointShadowMap,Jt.pointShadowMatrix.value=ve.state.pointShadowMatrix),Ce.currentProgram=hn,Ce.uniformsList=null,hn}function Jl(J){if(J.uniformsList===null){const ge=J.currentProgram.getUniforms();J.uniformsList=Lp.seqWithValue(ge.seq,J.uniforms)}return J.uniformsList}function Ks(J,ge){const Re=Kt.get(J);Re.outputColorSpace=ge.outputColorSpace,Re.batching=ge.batching,Re.batchingColor=ge.batchingColor,Re.instancing=ge.instancing,Re.instancingColor=ge.instancingColor,Re.instancingMorph=ge.instancingMorph,Re.skinning=ge.skinning,Re.morphTargets=ge.morphTargets,Re.morphNormals=ge.morphNormals,Re.morphColors=ge.morphColors,Re.morphTargetsCount=ge.morphTargetsCount,Re.numClippingPlanes=ge.numClippingPlanes,Re.numIntersection=ge.numClipIntersection,Re.vertexAlphas=ge.vertexAlphas,Re.vertexTangents=ge.vertexTangents,Re.toneMapping=ge.toneMapping}function _a(J,ge,Re,Ce,ve){ge.isScene!==!0&&(ge=ei),ae.resetTextureUnits();const tt=ge.fog,gt=Ce.isMeshStandardMaterial?ge.environment:null,At=te===null?O.outputColorSpace:te.isXRRenderTarget===!0?te.texture.colorSpace:gh,Lt=(Ce.isMeshStandardMaterial?we:K).get(Ce.envMap||gt),cn=Ce.vertexColors===!0&&!!Re.attributes.color&&Re.attributes.color.itemSize===4,hn=!!Re.attributes.tangent&&(!!Ce.normalMap||Ce.anisotropy>0),Jt=!!Re.morphAttributes.position,Un=!!Re.morphAttributes.normal,Vn=!!Re.morphAttributes.color;let Mi=wo;Ce.toneMapped&&(te===null||te.isXRRenderTarget===!0)&&(Mi=O.toneMapping);const gi=Re.morphAttributes.position||Re.morphAttributes.normal||Re.morphAttributes.color,On=gi!==void 0?gi.length:0,en=Kt.get(Ce),Di=A.state.lights;if(et===!0&&(Pt===!0||J!==B)){const Hi=J===B&&Ce.id===N;it.setState(Ce,J,Hi)}let Hn=!1;Ce.version===en.__version?(en.needsLights&&en.lightsStateVersion!==Di.state.version||en.outputColorSpace!==At||ve.isBatchedMesh&&en.batching===!1||!ve.isBatchedMesh&&en.batching===!0||ve.isBatchedMesh&&en.batchingColor===!0&&ve.colorTexture===null||ve.isBatchedMesh&&en.batchingColor===!1&&ve.colorTexture!==null||ve.isInstancedMesh&&en.instancing===!1||!ve.isInstancedMesh&&en.instancing===!0||ve.isSkinnedMesh&&en.skinning===!1||!ve.isSkinnedMesh&&en.skinning===!0||ve.isInstancedMesh&&en.instancingColor===!0&&ve.instanceColor===null||ve.isInstancedMesh&&en.instancingColor===!1&&ve.instanceColor!==null||ve.isInstancedMesh&&en.instancingMorph===!0&&ve.morphTexture===null||ve.isInstancedMesh&&en.instancingMorph===!1&&ve.morphTexture!==null||en.envMap!==Lt||Ce.fog===!0&&en.fog!==tt||en.numClippingPlanes!==void 0&&(en.numClippingPlanes!==it.numPlanes||en.numIntersection!==it.numIntersection)||en.vertexAlphas!==cn||en.vertexTangents!==hn||en.morphTargets!==Jt||en.morphNormals!==Un||en.morphColors!==Vn||en.toneMapping!==Mi||en.morphTargetsCount!==On)&&(Hn=!0):(Hn=!0,en.__version=Ce.version);let pr=en.currentProgram;Hn===!0&&(pr=$a(Ce,ge,ve));let Ls=!1,nr=!1,Js=!1;const oi=pr.getUniforms(),cr=en.uniforms;if(Qt.useProgram(pr.program)&&(Ls=!0,nr=!0,Js=!0),Ce.id!==N&&(N=Ce.id,nr=!0),Ls||B!==J){Qt.buffers.depth.getReversed()?(lt.copy(J.projectionMatrix),JD(lt),jD(lt),oi.setValue(fe,"projectionMatrix",lt)):oi.setValue(fe,"projectionMatrix",J.projectionMatrix),oi.setValue(fe,"viewMatrix",J.matrixWorldInverse);const $i=oi.map.cameraPosition;$i!==void 0&&$i.setValue(fe,sn.setFromMatrixPosition(J.matrixWorld)),Fn.logarithmicDepthBuffer&&oi.setValue(fe,"logDepthBufFC",2/(Math.log(J.far+1)/Math.LN2)),(Ce.isMeshPhongMaterial||Ce.isMeshToonMaterial||Ce.isMeshLambertMaterial||Ce.isMeshBasicMaterial||Ce.isMeshStandardMaterial||Ce.isShaderMaterial)&&oi.setValue(fe,"isOrthographic",J.isOrthographicCamera===!0),B!==J&&(B=J,nr=!0,Js=!0)}if(ve.isSkinnedMesh){oi.setOptional(fe,ve,"bindMatrix"),oi.setOptional(fe,ve,"bindMatrixInverse");const Hi=ve.skeleton;Hi&&(Hi.boneTexture===null&&Hi.computeBoneTexture(),oi.setValue(fe,"boneTexture",Hi.boneTexture,ae))}ve.isBatchedMesh&&(oi.setOptional(fe,ve,"batchingTexture"),oi.setValue(fe,"batchingTexture",ve._matricesTexture,ae),oi.setOptional(fe,ve,"batchingIdTexture"),oi.setValue(fe,"batchingIdTexture",ve._indirectTexture,ae),oi.setOptional(fe,ve,"batchingColorTexture"),ve._colorsTexture!==null&&oi.setValue(fe,"batchingColorTexture",ve._colorsTexture,ae));const ir=Re.morphAttributes;if((ir.position!==void 0||ir.normal!==void 0||ir.color!==void 0)&&kt.update(ve,Re,pr),(nr||en.receiveShadow!==ve.receiveShadow)&&(en.receiveShadow=ve.receiveShadow,oi.setValue(fe,"receiveShadow",ve.receiveShadow)),Ce.isMeshGouraudMaterial&&Ce.envMap!==null&&(cr.envMap.value=Lt,cr.flipEnvMap.value=Lt.isCubeTexture&&Lt.isRenderTargetTexture===!1?-1:1),Ce.isMeshStandardMaterial&&Ce.envMap===null&&ge.environment!==null&&(cr.envMapIntensity.value=ge.environmentIntensity),nr&&(oi.setValue(fe,"toneMappingExposure",O.toneMappingExposure),en.needsLights&&jl(cr,Js),tt&&Ce.fog===!0&&_t.refreshFogUniforms(cr,tt),_t.refreshMaterialUniforms(cr,Ce,_e,me,A.state.transmissionRenderTarget[J.id]),Lp.upload(fe,Jl(en),cr,ae)),Ce.isShaderMaterial&&Ce.uniformsNeedUpdate===!0&&(Lp.upload(fe,Jl(en),cr,ae),Ce.uniformsNeedUpdate=!1),Ce.isSpriteMaterial&&oi.setValue(fe,"center",ve.center),oi.setValue(fe,"modelViewMatrix",ve.modelViewMatrix),oi.setValue(fe,"normalMatrix",ve.normalMatrix),oi.setValue(fe,"modelMatrix",ve.matrixWorld),Ce.isShaderMaterial||Ce.isRawShaderMaterial){const Hi=Ce.uniformsGroups;for(let $i=0,zo=Hi.length;$i<zo;$i++){const xs=Hi[$i];pe.update(xs,pr),pe.bind(xs,pr)}}return pr}function jl(J,ge){J.ambientLightColor.needsUpdate=ge,J.lightProbe.needsUpdate=ge,J.directionalLights.needsUpdate=ge,J.directionalLightShadows.needsUpdate=ge,J.pointLights.needsUpdate=ge,J.pointLightShadows.needsUpdate=ge,J.spotLights.needsUpdate=ge,J.spotLightShadows.needsUpdate=ge,J.rectAreaLights.needsUpdate=ge,J.hemisphereLights.needsUpdate=ge}function Bo(J){return J.isMeshLambertMaterial||J.isMeshToonMaterial||J.isMeshPhongMaterial||J.isMeshStandardMaterial||J.isShadowMaterial||J.isShaderMaterial&&J.lights===!0}this.getActiveCubeFace=function(){return Y},this.getActiveMipmapLevel=function(){return W},this.getRenderTarget=function(){return te},this.setRenderTargetTextures=function(J,ge,Re){Kt.get(J.texture).__webglTexture=ge,Kt.get(J.depthTexture).__webglTexture=Re;const Ce=Kt.get(J);Ce.__hasExternalTextures=!0,Ce.__autoAllocateDepthBuffer=Re===void 0,Ce.__autoAllocateDepthBuffer||Nn.has("WEBGL_multisampled_render_to_texture")===!0&&(console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided"),Ce.__useRenderToTexture=!1)},this.setRenderTargetFramebuffer=function(J,ge){const Re=Kt.get(J);Re.__webglFramebuffer=ge,Re.__useDefaultFramebuffer=ge===void 0};const Dh=fe.createFramebuffer();this.setRenderTarget=function(J,ge=0,Re=0){te=J,Y=ge,W=Re;let Ce=!0,ve=null,tt=!1,gt=!1;if(J){const Lt=Kt.get(J);if(Lt.__useDefaultFramebuffer!==void 0)Qt.bindFramebuffer(fe.FRAMEBUFFER,null),Ce=!1;else if(Lt.__webglFramebuffer===void 0)ae.setupRenderTarget(J);else if(Lt.__hasExternalTextures)ae.rebindTextures(J,Kt.get(J.texture).__webglTexture,Kt.get(J.depthTexture).__webglTexture);else if(J.depthBuffer){const Jt=J.depthTexture;if(Lt.__boundDepthTexture!==Jt){if(Jt!==null&&Kt.has(Jt)&&(J.width!==Jt.image.width||J.height!==Jt.image.height))throw new Error("WebGLRenderTarget: Attached DepthTexture is initialized to the incorrect size.");ae.setupDepthRenderbuffer(J)}}const cn=J.texture;(cn.isData3DTexture||cn.isDataArrayTexture||cn.isCompressedArrayTexture)&&(gt=!0);const hn=Kt.get(J).__webglFramebuffer;J.isWebGLCubeRenderTarget?(Array.isArray(hn[ge])?ve=hn[ge][Re]:ve=hn[ge],tt=!0):J.samples>0&&ae.useMultisampledRTT(J)===!1?ve=Kt.get(J).__webglMultisampledFramebuffer:Array.isArray(hn)?ve=hn[Re]:ve=hn,ee.copy(J.viewport),Ee.copy(J.scissor),de=J.scissorTest}else ee.copy(nt).multiplyScalar(_e).floor(),Ee.copy(ut).multiplyScalar(_e).floor(),de=Yt;if(Re!==0&&(ve=Dh),Qt.bindFramebuffer(fe.FRAMEBUFFER,ve)&&Ce&&Qt.drawBuffers(J,ve),Qt.viewport(ee),Qt.scissor(Ee),Qt.setScissorTest(de),tt){const Lt=Kt.get(J.texture);fe.framebufferTexture2D(fe.FRAMEBUFFER,fe.COLOR_ATTACHMENT0,fe.TEXTURE_CUBE_MAP_POSITIVE_X+ge,Lt.__webglTexture,Re)}else if(gt){const Lt=Kt.get(J.texture),cn=ge;fe.framebufferTextureLayer(fe.FRAMEBUFFER,fe.COLOR_ATTACHMENT0,Lt.__webglTexture,Re,cn)}else if(J!==null&&Re!==0){const Lt=Kt.get(J.texture);fe.framebufferTexture2D(fe.FRAMEBUFFER,fe.COLOR_ATTACHMENT0,fe.TEXTURE_2D,Lt.__webglTexture,Re)}N=-1},this.readRenderTargetPixels=function(J,ge,Re,Ce,ve,tt,gt){if(!(J&&J.isWebGLRenderTarget)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");return}let At=Kt.get(J).__webglFramebuffer;if(J.isWebGLCubeRenderTarget&&gt!==void 0&&(At=At[gt]),At){Qt.bindFramebuffer(fe.FRAMEBUFFER,At);try{const Lt=J.texture,cn=Lt.format,hn=Lt.type;if(!Fn.textureFormatReadable(cn)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");return}if(!Fn.textureTypeReadable(hn)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");return}ge>=0&&ge<=J.width-Ce&&Re>=0&&Re<=J.height-ve&&fe.readPixels(ge,Re,Ce,ve,mn.convert(cn),mn.convert(hn),tt)}finally{const Lt=te!==null?Kt.get(te).__webglFramebuffer:null;Qt.bindFramebuffer(fe.FRAMEBUFFER,Lt)}}},this.readRenderTargetPixelsAsync=async function(J,ge,Re,Ce,ve,tt,gt){if(!(J&&J.isWebGLRenderTarget))throw new Error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");let At=Kt.get(J).__webglFramebuffer;if(J.isWebGLCubeRenderTarget&&gt!==void 0&&(At=At[gt]),At){const Lt=J.texture,cn=Lt.format,hn=Lt.type;if(!Fn.textureFormatReadable(cn))throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in RGBA or implementation defined format.");if(!Fn.textureTypeReadable(hn))throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in UnsignedByteType or implementation defined type.");if(ge>=0&&ge<=J.width-Ce&&Re>=0&&Re<=J.height-ve){Qt.bindFramebuffer(fe.FRAMEBUFFER,At);const Jt=fe.createBuffer();fe.bindBuffer(fe.PIXEL_PACK_BUFFER,Jt),fe.bufferData(fe.PIXEL_PACK_BUFFER,tt.byteLength,fe.STREAM_READ),fe.readPixels(ge,Re,Ce,ve,mn.convert(cn),mn.convert(hn),0);const Un=te!==null?Kt.get(te).__webglFramebuffer:null;Qt.bindFramebuffer(fe.FRAMEBUFFER,Un);const Vn=fe.fenceSync(fe.SYNC_GPU_COMMANDS_COMPLETE,0);return fe.flush(),await KD(fe,Vn,4),fe.bindBuffer(fe.PIXEL_PACK_BUFFER,Jt),fe.getBufferSubData(fe.PIXEL_PACK_BUFFER,0,tt),fe.deleteBuffer(Jt),fe.deleteSync(Vn),tt}else throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: requested read bounds are out of range.")}},this.copyFramebufferToTexture=function(J,ge=null,Re=0){J.isTexture!==!0&&(Qc("WebGLRenderer: copyFramebufferToTexture function signature has changed."),ge=arguments[0]||null,J=arguments[1]);const Ce=Math.pow(2,-Re),ve=Math.floor(J.image.width*Ce),tt=Math.floor(J.image.height*Ce),gt=ge!==null?ge.x:0,At=ge!==null?ge.y:0;ae.setTexture2D(J,0),fe.copyTexSubImage2D(fe.TEXTURE_2D,Re,0,0,gt,At,ve,tt),Qt.unbindTexture()};const Ql=fe.createFramebuffer(),fm=fe.createFramebuffer();this.copyTextureToTexture=function(J,ge,Re=null,Ce=null,ve=0,tt=null){J.isTexture!==!0&&(Qc("WebGLRenderer: copyTextureToTexture function signature has changed."),Ce=arguments[0]||null,J=arguments[1],ge=arguments[2],tt=arguments[3]||0,Re=null),tt===null&&(ve!==0?(Qc("WebGLRenderer: copyTextureToTexture function signature has changed to support src and dst mipmap levels."),tt=ve,ve=0):tt=0);let gt,At,Lt,cn,hn,Jt,Un,Vn,Mi;const gi=J.isCompressedTexture?J.mipmaps[tt]:J.image;if(Re!==null)gt=Re.max.x-Re.min.x,At=Re.max.y-Re.min.y,Lt=Re.isBox3?Re.max.z-Re.min.z:1,cn=Re.min.x,hn=Re.min.y,Jt=Re.isBox3?Re.min.z:0;else{const ir=Math.pow(2,-ve);gt=Math.floor(gi.width*ir),At=Math.floor(gi.height*ir),J.isDataArrayTexture?Lt=gi.depth:J.isData3DTexture?Lt=Math.floor(gi.depth*ir):Lt=1,cn=0,hn=0,Jt=0}Ce!==null?(Un=Ce.x,Vn=Ce.y,Mi=Ce.z):(Un=0,Vn=0,Mi=0);const On=mn.convert(ge.format),en=mn.convert(ge.type);let Di;ge.isData3DTexture?(ae.setTexture3D(ge,0),Di=fe.TEXTURE_3D):ge.isDataArrayTexture||ge.isCompressedArrayTexture?(ae.setTexture2DArray(ge,0),Di=fe.TEXTURE_2D_ARRAY):(ae.setTexture2D(ge,0),Di=fe.TEXTURE_2D),fe.pixelStorei(fe.UNPACK_FLIP_Y_WEBGL,ge.flipY),fe.pixelStorei(fe.UNPACK_PREMULTIPLY_ALPHA_WEBGL,ge.premultiplyAlpha),fe.pixelStorei(fe.UNPACK_ALIGNMENT,ge.unpackAlignment);const Hn=fe.getParameter(fe.UNPACK_ROW_LENGTH),pr=fe.getParameter(fe.UNPACK_IMAGE_HEIGHT),Ls=fe.getParameter(fe.UNPACK_SKIP_PIXELS),nr=fe.getParameter(fe.UNPACK_SKIP_ROWS),Js=fe.getParameter(fe.UNPACK_SKIP_IMAGES);fe.pixelStorei(fe.UNPACK_ROW_LENGTH,gi.width),fe.pixelStorei(fe.UNPACK_IMAGE_HEIGHT,gi.height),fe.pixelStorei(fe.UNPACK_SKIP_PIXELS,cn),fe.pixelStorei(fe.UNPACK_SKIP_ROWS,hn),fe.pixelStorei(fe.UNPACK_SKIP_IMAGES,Jt);const oi=J.isDataArrayTexture||J.isData3DTexture,cr=ge.isDataArrayTexture||ge.isData3DTexture;if(J.isDepthTexture){const ir=Kt.get(J),Hi=Kt.get(ge),$i=Kt.get(ir.__renderTarget),zo=Kt.get(Hi.__renderTarget);Qt.bindFramebuffer(fe.READ_FRAMEBUFFER,$i.__webglFramebuffer),Qt.bindFramebuffer(fe.DRAW_FRAMEBUFFER,zo.__webglFramebuffer);for(let xs=0;xs<Lt;xs++)oi&&(fe.framebufferTextureLayer(fe.READ_FRAMEBUFFER,fe.COLOR_ATTACHMENT0,Kt.get(J).__webglTexture,ve,Jt+xs),fe.framebufferTextureLayer(fe.DRAW_FRAMEBUFFER,fe.COLOR_ATTACHMENT0,Kt.get(ge).__webglTexture,tt,Mi+xs)),fe.blitFramebuffer(cn,hn,gt,At,Un,Vn,gt,At,fe.DEPTH_BUFFER_BIT,fe.NEAREST);Qt.bindFramebuffer(fe.READ_FRAMEBUFFER,null),Qt.bindFramebuffer(fe.DRAW_FRAMEBUFFER,null)}else if(ve!==0||J.isRenderTargetTexture||Kt.has(J)){const ir=Kt.get(J),Hi=Kt.get(ge);Qt.bindFramebuffer(fe.READ_FRAMEBUFFER,Ql),Qt.bindFramebuffer(fe.DRAW_FRAMEBUFFER,fm);for(let $i=0;$i<Lt;$i++)oi?fe.framebufferTextureLayer(fe.READ_FRAMEBUFFER,fe.COLOR_ATTACHMENT0,ir.__webglTexture,ve,Jt+$i):fe.framebufferTexture2D(fe.READ_FRAMEBUFFER,fe.COLOR_ATTACHMENT0,fe.TEXTURE_2D,ir.__webglTexture,ve),cr?fe.framebufferTextureLayer(fe.DRAW_FRAMEBUFFER,fe.COLOR_ATTACHMENT0,Hi.__webglTexture,tt,Mi+$i):fe.framebufferTexture2D(fe.DRAW_FRAMEBUFFER,fe.COLOR_ATTACHMENT0,fe.TEXTURE_2D,Hi.__webglTexture,tt),ve!==0?fe.blitFramebuffer(cn,hn,gt,At,Un,Vn,gt,At,fe.COLOR_BUFFER_BIT,fe.NEAREST):cr?fe.copyTexSubImage3D(Di,tt,Un,Vn,Mi+$i,cn,hn,gt,At):fe.copyTexSubImage2D(Di,tt,Un,Vn,cn,hn,gt,At);Qt.bindFramebuffer(fe.READ_FRAMEBUFFER,null),Qt.bindFramebuffer(fe.DRAW_FRAMEBUFFER,null)}else cr?J.isDataTexture||J.isData3DTexture?fe.texSubImage3D(Di,tt,Un,Vn,Mi,gt,At,Lt,On,en,gi.data):ge.isCompressedArrayTexture?fe.compressedTexSubImage3D(Di,tt,Un,Vn,Mi,gt,At,Lt,On,gi.data):fe.texSubImage3D(Di,tt,Un,Vn,Mi,gt,At,Lt,On,en,gi):J.isDataTexture?fe.texSubImage2D(fe.TEXTURE_2D,tt,Un,Vn,gt,At,On,en,gi.data):J.isCompressedTexture?fe.compressedTexSubImage2D(fe.TEXTURE_2D,tt,Un,Vn,gi.width,gi.height,On,gi.data):fe.texSubImage2D(fe.TEXTURE_2D,tt,Un,Vn,gt,At,On,en,gi);fe.pixelStorei(fe.UNPACK_ROW_LENGTH,Hn),fe.pixelStorei(fe.UNPACK_IMAGE_HEIGHT,pr),fe.pixelStorei(fe.UNPACK_SKIP_PIXELS,Ls),fe.pixelStorei(fe.UNPACK_SKIP_ROWS,nr),fe.pixelStorei(fe.UNPACK_SKIP_IMAGES,Js),tt===0&&ge.generateMipmaps&&fe.generateMipmap(Di),Qt.unbindTexture()},this.copyTextureToTexture3D=function(J,ge,Re=null,Ce=null,ve=0){return J.isTexture!==!0&&(Qc("WebGLRenderer: copyTextureToTexture3D function signature has changed."),Re=arguments[0]||null,Ce=arguments[1]||null,J=arguments[2],ge=arguments[3],ve=arguments[4]||0),Qc('WebGLRenderer: copyTextureToTexture3D function has been deprecated. Use "copyTextureToTexture" instead.'),this.copyTextureToTexture(J,ge,Re,Ce,ve)},this.initRenderTarget=function(J){Kt.get(J).__webglFramebuffer===void 0&&ae.setupRenderTarget(J)},this.initTexture=function(J){J.isCubeTexture?ae.setTextureCube(J,0):J.isData3DTexture?ae.setTexture3D(J,0):J.isDataArrayTexture||J.isCompressedArrayTexture?ae.setTexture2DArray(J,0):ae.setTexture2D(J,0),Qt.unbindTexture()},this.resetState=function(){Y=0,W=0,te=null,Qt.reset(),fi.reset()},typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}get coordinateSystem(){return Ha}get outputColorSpace(){return this._outputColorSpace}set outputColorSpace(t){this._outputColorSpace=t;const n=this.getContext();n.drawingBufferColorspace=ni._getDrawingBufferColorSpace(t),n.unpackColorSpace=ni._getUnpackColorSpace()}}const QS={type:"change"},_x={type:"start"},XE={type:"end"},yp=new cf,eb=new go,MO=Math.cos(70*ZD.DEG2RAD),ji=new ue,qr=2*Math.PI,_i={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_PAN:4,TOUCH_DOLLY_PAN:5,TOUCH_DOLLY_ROTATE:6},Mg=1e-6;class SO extends OL{constructor(t,n=null){super(t,n),this.state=_i.NONE,this.enabled=!0,this.target=new ue,this.cursor=new ue,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minTargetRadius=0,this.maxTargetRadius=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-1/0,this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.05,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.keyRotateSpeed=1,this.enablePan=!0,this.panSpeed=1,this.screenSpacePanning=!0,this.keyPanSpeed=7,this.zoomToCursor=!1,this.autoRotate=!1,this.autoRotateSpeed=2,this.keys={LEFT:"ArrowLeft",UP:"ArrowUp",RIGHT:"ArrowRight",BOTTOM:"ArrowDown"},this.mouseButtons={LEFT:rh.ROTATE,MIDDLE:rh.DOLLY,RIGHT:rh.PAN},this.touches={ONE:eh.ROTATE,TWO:eh.DOLLY_PAN},this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom,this._domElementKeyEvents=null,this._lastPosition=new ue,this._lastQuaternion=new kl,this._lastTargetPosition=new ue,this._quat=new kl().setFromUnitVectors(t.up,new ue(0,1,0)),this._quatInverse=this._quat.clone().invert(),this._spherical=new AS,this._sphericalDelta=new AS,this._scale=1,this._panOffset=new ue,this._rotateStart=new ln,this._rotateEnd=new ln,this._rotateDelta=new ln,this._panStart=new ln,this._panEnd=new ln,this._panDelta=new ln,this._dollyStart=new ln,this._dollyEnd=new ln,this._dollyDelta=new ln,this._dollyDirection=new ue,this._mouse=new ln,this._performCursorZoom=!1,this._pointers=[],this._pointerPositions={},this._controlActive=!1,this._onPointerMove=EO.bind(this),this._onPointerDown=bO.bind(this),this._onPointerUp=wO.bind(this),this._onContextMenu=DO.bind(this),this._onMouseWheel=RO.bind(this),this._onKeyDown=CO.bind(this),this._onTouchStart=PO.bind(this),this._onTouchMove=IO.bind(this),this._onMouseDown=TO.bind(this),this._onMouseMove=AO.bind(this),this._interceptControlDown=LO.bind(this),this._interceptControlUp=UO.bind(this),this.domElement!==null&&this.connect(),this.update()}connect(){this.domElement.addEventListener("pointerdown",this._onPointerDown),this.domElement.addEventListener("pointercancel",this._onPointerUp),this.domElement.addEventListener("contextmenu",this._onContextMenu),this.domElement.addEventListener("wheel",this._onMouseWheel,{passive:!1}),this.domElement.getRootNode().addEventListener("keydown",this._interceptControlDown,{passive:!0,capture:!0}),this.domElement.style.touchAction="none"}disconnect(){this.domElement.removeEventListener("pointerdown",this._onPointerDown),this.domElement.removeEventListener("pointermove",this._onPointerMove),this.domElement.removeEventListener("pointerup",this._onPointerUp),this.domElement.removeEventListener("pointercancel",this._onPointerUp),this.domElement.removeEventListener("wheel",this._onMouseWheel),this.domElement.removeEventListener("contextmenu",this._onContextMenu),this.stopListenToKeyEvents(),this.domElement.getRootNode().removeEventListener("keydown",this._interceptControlDown,{capture:!0}),this.domElement.style.touchAction="auto"}dispose(){this.disconnect()}getPolarAngle(){return this._spherical.phi}getAzimuthalAngle(){return this._spherical.theta}getDistance(){return this.object.position.distanceTo(this.target)}listenToKeyEvents(t){t.addEventListener("keydown",this._onKeyDown),this._domElementKeyEvents=t}stopListenToKeyEvents(){this._domElementKeyEvents!==null&&(this._domElementKeyEvents.removeEventListener("keydown",this._onKeyDown),this._domElementKeyEvents=null)}saveState(){this.target0.copy(this.target),this.position0.copy(this.object.position),this.zoom0=this.object.zoom}reset(){this.target.copy(this.target0),this.object.position.copy(this.position0),this.object.zoom=this.zoom0,this.object.updateProjectionMatrix(),this.dispatchEvent(QS),this.update(),this.state=_i.NONE}update(t=null){const n=this.object.position;ji.copy(n).sub(this.target),ji.applyQuaternion(this._quat),this._spherical.setFromVector3(ji),this.autoRotate&&this.state===_i.NONE&&this._rotateLeft(this._getAutoRotationAngle(t)),this.enableDamping?(this._spherical.theta+=this._sphericalDelta.theta*this.dampingFactor,this._spherical.phi+=this._sphericalDelta.phi*this.dampingFactor):(this._spherical.theta+=this._sphericalDelta.theta,this._spherical.phi+=this._sphericalDelta.phi);let r=this.minAzimuthAngle,o=this.maxAzimuthAngle;isFinite(r)&&isFinite(o)&&(r<-Math.PI?r+=qr:r>Math.PI&&(r-=qr),o<-Math.PI?o+=qr:o>Math.PI&&(o-=qr),r<=o?this._spherical.theta=Math.max(r,Math.min(o,this._spherical.theta)):this._spherical.theta=this._spherical.theta>(r+o)/2?Math.max(r,this._spherical.theta):Math.min(o,this._spherical.theta)),this._spherical.phi=Math.max(this.minPolarAngle,Math.min(this.maxPolarAngle,this._spherical.phi)),this._spherical.makeSafe(),this.enableDamping===!0?this.target.addScaledVector(this._panOffset,this.dampingFactor):this.target.add(this._panOffset),this.target.sub(this.cursor),this.target.clampLength(this.minTargetRadius,this.maxTargetRadius),this.target.add(this.cursor);let c=!1;if(this.zoomToCursor&&this._performCursorZoom||this.object.isOrthographicCamera)this._spherical.radius=this._clampDistance(this._spherical.radius);else{const d=this._spherical.radius;this._spherical.radius=this._clampDistance(this._spherical.radius*this._scale),c=d!=this._spherical.radius}if(ji.setFromSpherical(this._spherical),ji.applyQuaternion(this._quatInverse),n.copy(this.target).add(ji),this.object.lookAt(this.target),this.enableDamping===!0?(this._sphericalDelta.theta*=1-this.dampingFactor,this._sphericalDelta.phi*=1-this.dampingFactor,this._panOffset.multiplyScalar(1-this.dampingFactor)):(this._sphericalDelta.set(0,0,0),this._panOffset.set(0,0,0)),this.zoomToCursor&&this._performCursorZoom){let d=null;if(this.object.isPerspectiveCamera){const p=ji.length();d=this._clampDistance(p*this._scale);const v=p-d;this.object.position.addScaledVector(this._dollyDirection,v),this.object.updateMatrixWorld(),c=!!v}else if(this.object.isOrthographicCamera){const p=new ue(this._mouse.x,this._mouse.y,0);p.unproject(this.object);const v=this.object.zoom;this.object.zoom=Math.max(this.minZoom,Math.min(this.maxZoom,this.object.zoom/this._scale)),this.object.updateProjectionMatrix(),c=v!==this.object.zoom;const _=new ue(this._mouse.x,this._mouse.y,0);_.unproject(this.object),this.object.position.sub(_).add(p),this.object.updateMatrixWorld(),d=ji.length()}else console.warn("WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled."),this.zoomToCursor=!1;d!==null&&(this.screenSpacePanning?this.target.set(0,0,-1).transformDirection(this.object.matrix).multiplyScalar(d).add(this.object.position):(yp.origin.copy(this.object.position),yp.direction.set(0,0,-1).transformDirection(this.object.matrix),Math.abs(this.object.up.dot(yp.direction))<MO?this.object.lookAt(this.target):(eb.setFromNormalAndCoplanarPoint(this.object.up,this.target),yp.intersectPlane(eb,this.target))))}else if(this.object.isOrthographicCamera){const d=this.object.zoom;this.object.zoom=Math.max(this.minZoom,Math.min(this.maxZoom,this.object.zoom/this._scale)),d!==this.object.zoom&&(this.object.updateProjectionMatrix(),c=!0)}return this._scale=1,this._performCursorZoom=!1,c||this._lastPosition.distanceToSquared(this.object.position)>Mg||8*(1-this._lastQuaternion.dot(this.object.quaternion))>Mg||this._lastTargetPosition.distanceToSquared(this.target)>Mg?(this.dispatchEvent(QS),this._lastPosition.copy(this.object.position),this._lastQuaternion.copy(this.object.quaternion),this._lastTargetPosition.copy(this.target),!0):!1}_getAutoRotationAngle(t){return t!==null?qr/60*this.autoRotateSpeed*t:qr/60/60*this.autoRotateSpeed}_getZoomScale(t){const n=Math.abs(t*.01);return Math.pow(.95,this.zoomSpeed*n)}_rotateLeft(t){this._sphericalDelta.theta-=t}_rotateUp(t){this._sphericalDelta.phi-=t}_panLeft(t,n){ji.setFromMatrixColumn(n,0),ji.multiplyScalar(-t),this._panOffset.add(ji)}_panUp(t,n){this.screenSpacePanning===!0?ji.setFromMatrixColumn(n,1):(ji.setFromMatrixColumn(n,0),ji.crossVectors(this.object.up,ji)),ji.multiplyScalar(t),this._panOffset.add(ji)}_pan(t,n){const r=this.domElement;if(this.object.isPerspectiveCamera){const o=this.object.position;ji.copy(o).sub(this.target);let c=ji.length();c*=Math.tan(this.object.fov/2*Math.PI/180),this._panLeft(2*t*c/r.clientHeight,this.object.matrix),this._panUp(2*n*c/r.clientHeight,this.object.matrix)}else this.object.isOrthographicCamera?(this._panLeft(t*(this.object.right-this.object.left)/this.object.zoom/r.clientWidth,this.object.matrix),this._panUp(n*(this.object.top-this.object.bottom)/this.object.zoom/r.clientHeight,this.object.matrix)):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."),this.enablePan=!1)}_dollyOut(t){this.object.isPerspectiveCamera||this.object.isOrthographicCamera?this._scale/=t:(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),this.enableZoom=!1)}_dollyIn(t){this.object.isPerspectiveCamera||this.object.isOrthographicCamera?this._scale*=t:(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),this.enableZoom=!1)}_updateZoomParameters(t,n){if(!this.zoomToCursor)return;this._performCursorZoom=!0;const r=this.domElement.getBoundingClientRect(),o=t-r.left,c=n-r.top,d=r.width,p=r.height;this._mouse.x=o/d*2-1,this._mouse.y=-(c/p)*2+1,this._dollyDirection.set(this._mouse.x,this._mouse.y,1).unproject(this.object).sub(this.object.position).normalize()}_clampDistance(t){return Math.max(this.minDistance,Math.min(this.maxDistance,t))}_handleMouseDownRotate(t){this._rotateStart.set(t.clientX,t.clientY)}_handleMouseDownDolly(t){this._updateZoomParameters(t.clientX,t.clientX),this._dollyStart.set(t.clientX,t.clientY)}_handleMouseDownPan(t){this._panStart.set(t.clientX,t.clientY)}_handleMouseMoveRotate(t){this._rotateEnd.set(t.clientX,t.clientY),this._rotateDelta.subVectors(this._rotateEnd,this._rotateStart).multiplyScalar(this.rotateSpeed);const n=this.domElement;this._rotateLeft(qr*this._rotateDelta.x/n.clientHeight),this._rotateUp(qr*this._rotateDelta.y/n.clientHeight),this._rotateStart.copy(this._rotateEnd),this.update()}_handleMouseMoveDolly(t){this._dollyEnd.set(t.clientX,t.clientY),this._dollyDelta.subVectors(this._dollyEnd,this._dollyStart),this._dollyDelta.y>0?this._dollyOut(this._getZoomScale(this._dollyDelta.y)):this._dollyDelta.y<0&&this._dollyIn(this._getZoomScale(this._dollyDelta.y)),this._dollyStart.copy(this._dollyEnd),this.update()}_handleMouseMovePan(t){this._panEnd.set(t.clientX,t.clientY),this._panDelta.subVectors(this._panEnd,this._panStart).multiplyScalar(this.panSpeed),this._pan(this._panDelta.x,this._panDelta.y),this._panStart.copy(this._panEnd),this.update()}_handleMouseWheel(t){this._updateZoomParameters(t.clientX,t.clientY),t.deltaY<0?this._dollyIn(this._getZoomScale(t.deltaY)):t.deltaY>0&&this._dollyOut(this._getZoomScale(t.deltaY)),this.update()}_handleKeyDown(t){let n=!1;switch(t.code){case this.keys.UP:t.ctrlKey||t.metaKey||t.shiftKey?this.enableRotate&&this._rotateUp(qr*this.keyRotateSpeed/this.domElement.clientHeight):this.enablePan&&this._pan(0,this.keyPanSpeed),n=!0;break;case this.keys.BOTTOM:t.ctrlKey||t.metaKey||t.shiftKey?this.enableRotate&&this._rotateUp(-qr*this.keyRotateSpeed/this.domElement.clientHeight):this.enablePan&&this._pan(0,-this.keyPanSpeed),n=!0;break;case this.keys.LEFT:t.ctrlKey||t.metaKey||t.shiftKey?this.enableRotate&&this._rotateLeft(qr*this.keyRotateSpeed/this.domElement.clientHeight):this.enablePan&&this._pan(this.keyPanSpeed,0),n=!0;break;case this.keys.RIGHT:t.ctrlKey||t.metaKey||t.shiftKey?this.enableRotate&&this._rotateLeft(-qr*this.keyRotateSpeed/this.domElement.clientHeight):this.enablePan&&this._pan(-this.keyPanSpeed,0),n=!0;break}n&&(t.preventDefault(),this.update())}_handleTouchStartRotate(t){if(this._pointers.length===1)this._rotateStart.set(t.pageX,t.pageY);else{const n=this._getSecondPointerPosition(t),r=.5*(t.pageX+n.x),o=.5*(t.pageY+n.y);this._rotateStart.set(r,o)}}_handleTouchStartPan(t){if(this._pointers.length===1)this._panStart.set(t.pageX,t.pageY);else{const n=this._getSecondPointerPosition(t),r=.5*(t.pageX+n.x),o=.5*(t.pageY+n.y);this._panStart.set(r,o)}}_handleTouchStartDolly(t){const n=this._getSecondPointerPosition(t),r=t.pageX-n.x,o=t.pageY-n.y,c=Math.sqrt(r*r+o*o);this._dollyStart.set(0,c)}_handleTouchStartDollyPan(t){this.enableZoom&&this._handleTouchStartDolly(t),this.enablePan&&this._handleTouchStartPan(t)}_handleTouchStartDollyRotate(t){this.enableZoom&&this._handleTouchStartDolly(t),this.enableRotate&&this._handleTouchStartRotate(t)}_handleTouchMoveRotate(t){if(this._pointers.length==1)this._rotateEnd.set(t.pageX,t.pageY);else{const r=this._getSecondPointerPosition(t),o=.5*(t.pageX+r.x),c=.5*(t.pageY+r.y);this._rotateEnd.set(o,c)}this._rotateDelta.subVectors(this._rotateEnd,this._rotateStart).multiplyScalar(this.rotateSpeed);const n=this.domElement;this._rotateLeft(qr*this._rotateDelta.x/n.clientHeight),this._rotateUp(qr*this._rotateDelta.y/n.clientHeight),this._rotateStart.copy(this._rotateEnd)}_handleTouchMovePan(t){if(this._pointers.length===1)this._panEnd.set(t.pageX,t.pageY);else{const n=this._getSecondPointerPosition(t),r=.5*(t.pageX+n.x),o=.5*(t.pageY+n.y);this._panEnd.set(r,o)}this._panDelta.subVectors(this._panEnd,this._panStart).multiplyScalar(this.panSpeed),this._pan(this._panDelta.x,this._panDelta.y),this._panStart.copy(this._panEnd)}_handleTouchMoveDolly(t){const n=this._getSecondPointerPosition(t),r=t.pageX-n.x,o=t.pageY-n.y,c=Math.sqrt(r*r+o*o);this._dollyEnd.set(0,c),this._dollyDelta.set(0,Math.pow(this._dollyEnd.y/this._dollyStart.y,this.zoomSpeed)),this._dollyOut(this._dollyDelta.y),this._dollyStart.copy(this._dollyEnd);const d=(t.pageX+n.x)*.5,p=(t.pageY+n.y)*.5;this._updateZoomParameters(d,p)}_handleTouchMoveDollyPan(t){this.enableZoom&&this._handleTouchMoveDolly(t),this.enablePan&&this._handleTouchMovePan(t)}_handleTouchMoveDollyRotate(t){this.enableZoom&&this._handleTouchMoveDolly(t),this.enableRotate&&this._handleTouchMoveRotate(t)}_addPointer(t){this._pointers.push(t.pointerId)}_removePointer(t){delete this._pointerPositions[t.pointerId];for(let n=0;n<this._pointers.length;n++)if(this._pointers[n]==t.pointerId){this._pointers.splice(n,1);return}}_isTrackingPointer(t){for(let n=0;n<this._pointers.length;n++)if(this._pointers[n]==t.pointerId)return!0;return!1}_trackPointer(t){let n=this._pointerPositions[t.pointerId];n===void 0&&(n=new ln,this._pointerPositions[t.pointerId]=n),n.set(t.pageX,t.pageY)}_getSecondPointerPosition(t){const n=t.pointerId===this._pointers[0]?this._pointers[1]:this._pointers[0];return this._pointerPositions[n]}_customWheelEvent(t){const n=t.deltaMode,r={clientX:t.clientX,clientY:t.clientY,deltaY:t.deltaY};switch(n){case 1:r.deltaY*=16;break;case 2:r.deltaY*=100;break}return t.ctrlKey&&!this._controlActive&&(r.deltaY*=10),r}}function bO(a){this.enabled!==!1&&(this._pointers.length===0&&(this.domElement.setPointerCapture(a.pointerId),this.domElement.addEventListener("pointermove",this._onPointerMove),this.domElement.addEventListener("pointerup",this._onPointerUp)),!this._isTrackingPointer(a)&&(this._addPointer(a),a.pointerType==="touch"?this._onTouchStart(a):this._onMouseDown(a)))}function EO(a){this.enabled!==!1&&(a.pointerType==="touch"?this._onTouchMove(a):this._onMouseMove(a))}function wO(a){switch(this._removePointer(a),this._pointers.length){case 0:this.domElement.releasePointerCapture(a.pointerId),this.domElement.removeEventListener("pointermove",this._onPointerMove),this.domElement.removeEventListener("pointerup",this._onPointerUp),this.dispatchEvent(XE),this.state=_i.NONE;break;case 1:const t=this._pointers[0],n=this._pointerPositions[t];this._onTouchStart({pointerId:t,pageX:n.x,pageY:n.y});break}}function TO(a){let t;switch(a.button){case 0:t=this.mouseButtons.LEFT;break;case 1:t=this.mouseButtons.MIDDLE;break;case 2:t=this.mouseButtons.RIGHT;break;default:t=-1}switch(t){case rh.DOLLY:if(this.enableZoom===!1)return;this._handleMouseDownDolly(a),this.state=_i.DOLLY;break;case rh.ROTATE:if(a.ctrlKey||a.metaKey||a.shiftKey){if(this.enablePan===!1)return;this._handleMouseDownPan(a),this.state=_i.PAN}else{if(this.enableRotate===!1)return;this._handleMouseDownRotate(a),this.state=_i.ROTATE}break;case rh.PAN:if(a.ctrlKey||a.metaKey||a.shiftKey){if(this.enableRotate===!1)return;this._handleMouseDownRotate(a),this.state=_i.ROTATE}else{if(this.enablePan===!1)return;this._handleMouseDownPan(a),this.state=_i.PAN}break;default:this.state=_i.NONE}this.state!==_i.NONE&&this.dispatchEvent(_x)}function AO(a){switch(this.state){case _i.ROTATE:if(this.enableRotate===!1)return;this._handleMouseMoveRotate(a);break;case _i.DOLLY:if(this.enableZoom===!1)return;this._handleMouseMoveDolly(a);break;case _i.PAN:if(this.enablePan===!1)return;this._handleMouseMovePan(a);break}}function RO(a){this.enabled===!1||this.enableZoom===!1||this.state!==_i.NONE||(a.preventDefault(),this.dispatchEvent(_x),this._handleMouseWheel(this._customWheelEvent(a)),this.dispatchEvent(XE))}function CO(a){this.enabled!==!1&&this._handleKeyDown(a)}function PO(a){switch(this._trackPointer(a),this._pointers.length){case 1:switch(this.touches.ONE){case eh.ROTATE:if(this.enableRotate===!1)return;this._handleTouchStartRotate(a),this.state=_i.TOUCH_ROTATE;break;case eh.PAN:if(this.enablePan===!1)return;this._handleTouchStartPan(a),this.state=_i.TOUCH_PAN;break;default:this.state=_i.NONE}break;case 2:switch(this.touches.TWO){case eh.DOLLY_PAN:if(this.enableZoom===!1&&this.enablePan===!1)return;this._handleTouchStartDollyPan(a),this.state=_i.TOUCH_DOLLY_PAN;break;case eh.DOLLY_ROTATE:if(this.enableZoom===!1&&this.enableRotate===!1)return;this._handleTouchStartDollyRotate(a),this.state=_i.TOUCH_DOLLY_ROTATE;break;default:this.state=_i.NONE}break;default:this.state=_i.NONE}this.state!==_i.NONE&&this.dispatchEvent(_x)}function IO(a){switch(this._trackPointer(a),this.state){case _i.TOUCH_ROTATE:if(this.enableRotate===!1)return;this._handleTouchMoveRotate(a),this.update();break;case _i.TOUCH_PAN:if(this.enablePan===!1)return;this._handleTouchMovePan(a),this.update();break;case _i.TOUCH_DOLLY_PAN:if(this.enableZoom===!1&&this.enablePan===!1)return;this._handleTouchMoveDollyPan(a),this.update();break;case _i.TOUCH_DOLLY_ROTATE:if(this.enableZoom===!1&&this.enableRotate===!1)return;this._handleTouchMoveDollyRotate(a),this.update();break;default:this.state=_i.NONE}}function DO(a){this.enabled!==!1&&a.preventDefault()}function LO(a){a.key==="Control"&&(this._controlActive=!0,this.domElement.getRootNode().addEventListener("keyup",this._interceptControlUp,{passive:!0,capture:!0}))}function UO(a){a.key==="Control"&&(this._controlActive=!1,this.domElement.getRootNode().removeEventListener("keyup",this._interceptControlUp,{passive:!0,capture:!0}))}function Fa(a){if(a===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return a}function qE(a,t){a.prototype=Object.create(t.prototype),a.prototype.constructor=a,a.__proto__=t}/*!
 * GSAP 3.13.0
 * https://gsap.com
 *
 * @license Copyright 2008-2025, GreenSock. All rights reserved.
 * Subject to the terms at https://gsap.com/standard-license
 * @author: Jack Doyle, jack@greensock.com
*/var ps={autoSleep:120,force3D:"auto",nullTargetWarn:1,units:{lineHeight:""}},vh={duration:.5,overwrite:!1,delay:0},gx,dr,wi,ua=1e8,wr=1/ua,U0=Math.PI*2,NO=U0/4,FO=0,YE=Math.sqrt,OO=Math.cos,BO=Math.sin,lr=function(t){return typeof t=="string"},Oi=function(t){return typeof t=="function"},qa=function(t){return typeof t=="number"},xx=function(t){return typeof t>"u"},pa=function(t){return typeof t=="object"},Kr=function(t){return t!==!1},vx=function(){return typeof window<"u"},Mp=function(t){return Oi(t)||lr(t)},ZE=typeof ArrayBuffer=="function"&&ArrayBuffer.isView||function(){},Rr=Array.isArray,N0=/(?:-?\.?\d|\.)+/gi,$E=/[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,nh=/[-+=.]*\d+[.e-]*\d*[a-z%]*/g,Sg=/[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,KE=/[+-]=-?[.\d]+/,JE=/[^,'"\[\]\s]+/gi,zO=/^[+\-=e\s\d]*\d+[.\d]*([a-z]*|%)\s*$/i,Ci,ra,F0,yx,ms={},Yp={},jE,QE=function(t){return(Yp=yh(t,ms))&&es},Mx=function(t,n){return console.warn("Invalid property",t,"set to",n,"Missing plugin? gsap.registerPlugin()")},Wu=function(t,n){return!n&&console.warn(t)},ew=function(t,n){return t&&(ms[t]=n)&&Yp&&(Yp[t]=n)||ms},Xu=function(){return 0},kO={suppressEvents:!0,isStart:!0,kill:!1},Up={suppressEvents:!0,kill:!1},VO={suppressEvents:!0},Sx={},Ao=[],O0={},tw,cs={},bg={},tb=30,Np=[],bx="",Ex=function(t){var n=t[0],r,o;if(pa(n)||Oi(n)||(t=[t]),!(r=(n._gsap||{}).harness)){for(o=Np.length;o--&&!Np[o].targetTest(n););r=Np[o]}for(o=t.length;o--;)t[o]&&(t[o]._gsap||(t[o]._gsap=new ww(t[o],r)))||t.splice(o,1);return t},Ul=function(t){return t._gsap||Ex(Rs(t))[0]._gsap},nw=function(t,n,r){return(r=t[n])&&Oi(r)?t[n]():xx(r)&&t.getAttribute&&t.getAttribute(n)||r},Jr=function(t,n){return(t=t.split(",")).forEach(n)||t},ki=function(t){return Math.round(t*1e5)/1e5||0},Zi=function(t){return Math.round(t*1e7)/1e7||0},lh=function(t,n){var r=n.charAt(0),o=parseFloat(n.substr(2));return t=parseFloat(t),r==="+"?t+o:r==="-"?t-o:r==="*"?t*o:t/o},HO=function(t,n){for(var r=n.length,o=0;t.indexOf(n[o])<0&&++o<r;);return o<r},Zp=function(){var t=Ao.length,n=Ao.slice(0),r,o;for(O0={},Ao.length=0,r=0;r<t;r++)o=n[r],o&&o._lazy&&(o.render(o._lazy[0],o._lazy[1],!0)._lazy=0)},wx=function(t){return!!(t._initted||t._startAt||t.add)},iw=function(t,n,r,o){Ao.length&&!dr&&Zp(),t.render(n,r,!!(dr&&n<0&&wx(t))),Ao.length&&!dr&&Zp()},rw=function(t){var n=parseFloat(t);return(n||n===0)&&(t+"").match(JE).length<2?n:lr(t)?t.trim():t},sw=function(t){return t},_s=function(t,n){for(var r in n)r in t||(t[r]=n[r]);return t},GO=function(t){return function(n,r){for(var o in r)o in n||o==="duration"&&t||o==="ease"||(n[o]=r[o])}},yh=function(t,n){for(var r in n)t[r]=n[r];return t},nb=function a(t,n){for(var r in n)r!=="__proto__"&&r!=="constructor"&&r!=="prototype"&&(t[r]=pa(n[r])?a(t[r]||(t[r]={}),n[r]):n[r]);return t},$p=function(t,n){var r={},o;for(o in t)o in n||(r[o]=t[o]);return r},Nu=function(t){var n=t.parent||Ci,r=t.keyframes?GO(Rr(t.keyframes)):_s;if(Kr(t.inherit))for(;n;)r(t,n.vars.defaults),n=n.parent||n._dp;return t},WO=function(t,n){for(var r=t.length,o=r===n.length;o&&r--&&t[r]===n[r];);return r<0},aw=function(t,n,r,o,c){var d=t[o],p;if(c)for(p=n[c];d&&d[c]>p;)d=d._prev;return d?(n._next=d._next,d._next=n):(n._next=t[r],t[r]=n),n._next?n._next._prev=n:t[o]=n,n._prev=d,n.parent=n._dp=t,n},am=function(t,n,r,o){r===void 0&&(r="_first"),o===void 0&&(o="_last");var c=n._prev,d=n._next;c?c._next=d:t[r]===n&&(t[r]=d),d?d._prev=c:t[o]===n&&(t[o]=c),n._next=n._prev=n.parent=null},Uo=function(t,n){t.parent&&(!n||t.parent.autoRemoveChildren)&&t.parent.remove&&t.parent.remove(t),t._act=0},Nl=function(t,n){if(t&&(!n||n._end>t._dur||n._start<0))for(var r=t;r;)r._dirty=1,r=r.parent;return t},XO=function(t){for(var n=t.parent;n&&n.parent;)n._dirty=1,n.totalDuration(),n=n.parent;return t},B0=function(t,n,r,o){return t._startAt&&(dr?t._startAt.revert(Up):t.vars.immediateRender&&!t.vars.autoRevert||t._startAt.render(n,!0,o))},qO=function a(t){return!t||t._ts&&a(t.parent)},ib=function(t){return t._repeat?Mh(t._tTime,t=t.duration()+t._rDelay)*t:0},Mh=function(t,n){var r=Math.floor(t=Zi(t/n));return t&&r===t?r-1:r},Kp=function(t,n){return(t-n._start)*n._ts+(n._ts>=0?0:n._dirty?n.totalDuration():n._tDur)},om=function(t){return t._end=Zi(t._start+(t._tDur/Math.abs(t._ts||t._rts||wr)||0))},lm=function(t,n){var r=t._dp;return r&&r.smoothChildTiming&&t._ts&&(t._start=Zi(r._time-(t._ts>0?n/t._ts:((t._dirty?t.totalDuration():t._tDur)-n)/-t._ts)),om(t),r._dirty||Nl(r,t)),t},ow=function(t,n){var r;if((n._time||!n._dur&&n._initted||n._start<t._time&&(n._dur||!n.add))&&(r=Kp(t.rawTime(),n),(!n._dur||uf(0,n.totalDuration(),r)-n._tTime>wr)&&n.render(r,!0)),Nl(t,n)._dp&&t._initted&&t._time>=t._dur&&t._ts){if(t._dur<t.duration())for(r=t;r._dp;)r.rawTime()>=0&&r.totalTime(r._tTime),r=r._dp;t._zTime=-1e-8}},oa=function(t,n,r,o){return n.parent&&Uo(n),n._start=Zi((qa(r)?r:r||t!==Ci?bs(t,r,n):t._time)+n._delay),n._end=Zi(n._start+(n.totalDuration()/Math.abs(n.timeScale())||0)),aw(t,n,"_first","_last",t._sort?"_start":0),z0(n)||(t._recent=n),o||ow(t,n),t._ts<0&&lm(t,t._tTime),t},lw=function(t,n){return(ms.ScrollTrigger||Mx("scrollTrigger",n))&&ms.ScrollTrigger.create(n,t)},cw=function(t,n,r,o,c){if(Ax(t,n,c),!t._initted)return 1;if(!r&&t._pt&&!dr&&(t._dur&&t.vars.lazy!==!1||!t._dur&&t.vars.lazy)&&tw!==hs.frame)return Ao.push(t),t._lazy=[c,o],1},YO=function a(t){var n=t.parent;return n&&n._ts&&n._initted&&!n._lock&&(n.rawTime()<0||a(n))},z0=function(t){var n=t.data;return n==="isFromStart"||n==="isStart"},ZO=function(t,n,r,o){var c=t.ratio,d=n<0||!n&&(!t._start&&YO(t)&&!(!t._initted&&z0(t))||(t._ts<0||t._dp._ts<0)&&!z0(t))?0:1,p=t._rDelay,v=0,_,x,M;if(p&&t._repeat&&(v=uf(0,t._tDur,n),x=Mh(v,p),t._yoyo&&x&1&&(d=1-d),x!==Mh(t._tTime,p)&&(c=1-d,t.vars.repeatRefresh&&t._initted&&t.invalidate())),d!==c||dr||o||t._zTime===wr||!n&&t._zTime){if(!t._initted&&cw(t,n,o,r,v))return;for(M=t._zTime,t._zTime=n||(r?wr:0),r||(r=n&&!M),t.ratio=d,t._from&&(d=1-d),t._time=0,t._tTime=v,_=t._pt;_;)_.r(d,_.d),_=_._next;n<0&&B0(t,n,r,!0),t._onUpdate&&!r&&us(t,"onUpdate"),v&&t._repeat&&!r&&t.parent&&us(t,"onRepeat"),(n>=t._tDur||n<0)&&t.ratio===d&&(d&&Uo(t,1),!r&&!dr&&(us(t,d?"onComplete":"onReverseComplete",!0),t._prom&&t._prom()))}else t._zTime||(t._zTime=n)},$O=function(t,n,r){var o;if(r>n)for(o=t._first;o&&o._start<=r;){if(o.data==="isPause"&&o._start>n)return o;o=o._next}else for(o=t._last;o&&o._start>=r;){if(o.data==="isPause"&&o._start<n)return o;o=o._prev}},Sh=function(t,n,r,o){var c=t._repeat,d=Zi(n)||0,p=t._tTime/t._tDur;return p&&!o&&(t._time*=d/t._dur),t._dur=d,t._tDur=c?c<0?1e10:Zi(d*(c+1)+t._rDelay*c):d,p>0&&!o&&lm(t,t._tTime=t._tDur*p),t.parent&&om(t),r||Nl(t.parent,t),t},rb=function(t){return t instanceof Or?Nl(t):Sh(t,t._dur)},KO={_start:0,endTime:Xu,totalDuration:Xu},bs=function a(t,n,r){var o=t.labels,c=t._recent||KO,d=t.duration()>=ua?c.endTime(!1):t._dur,p,v,_;return lr(n)&&(isNaN(n)||n in o)?(v=n.charAt(0),_=n.substr(-1)==="%",p=n.indexOf("="),v==="<"||v===">"?(p>=0&&(n=n.replace(/=/,"")),(v==="<"?c._start:c.endTime(c._repeat>=0))+(parseFloat(n.substr(1))||0)*(_?(p<0?c:r).totalDuration()/100:1)):p<0?(n in o||(o[n]=d),o[n]):(v=parseFloat(n.charAt(p-1)+n.substr(p+1)),_&&r&&(v=v/100*(Rr(r)?r[0]:r).totalDuration()),p>1?a(t,n.substr(0,p-1),r)+v:d+v)):n==null?d:+n},Fu=function(t,n,r){var o=qa(n[1]),c=(o?2:1)+(t<2?0:1),d=n[c],p,v;if(o&&(d.duration=n[1]),d.parent=r,t){for(p=d,v=r;v&&!("immediateRender"in p);)p=v.vars.defaults||{},v=Kr(v.vars.inherit)&&v.parent;d.immediateRender=Kr(p.immediateRender),t<2?d.runBackwards=1:d.startAt=n[c-1]}return new Yi(n[0],d,n[c+1])},Fo=function(t,n){return t||t===0?n(t):n},uf=function(t,n,r){return r<t?t:r>n?n:r},br=function(t,n){return!lr(t)||!(n=zO.exec(t))?"":n[1]},JO=function(t,n,r){return Fo(r,function(o){return uf(t,n,o)})},k0=[].slice,hw=function(t,n){return t&&pa(t)&&"length"in t&&(!n&&!t.length||t.length-1 in t&&pa(t[0]))&&!t.nodeType&&t!==ra},jO=function(t,n,r){return r===void 0&&(r=[]),t.forEach(function(o){var c;return lr(o)&&!n||hw(o,1)?(c=r).push.apply(c,Rs(o)):r.push(o)})||r},Rs=function(t,n,r){return wi&&!n&&wi.selector?wi.selector(t):lr(t)&&!r&&(F0||!bh())?k0.call((n||yx).querySelectorAll(t),0):Rr(t)?jO(t,r):hw(t)?k0.call(t,0):t?[t]:[]},V0=function(t){return t=Rs(t)[0]||Wu("Invalid scope")||{},function(n){var r=t.current||t.nativeElement||t;return Rs(n,r.querySelectorAll?r:r===t?Wu("Invalid scope")||yx.createElement("div"):t)}},uw=function(t){return t.sort(function(){return .5-Math.random()})},fw=function(t){if(Oi(t))return t;var n=pa(t)?t:{each:t},r=Fl(n.ease),o=n.from||0,c=parseFloat(n.base)||0,d={},p=o>0&&o<1,v=isNaN(o)||p,_=n.axis,x=o,M=o;return lr(o)?x=M={center:.5,edges:.5,end:1}[o]||0:!p&&v&&(x=o[0],M=o[1]),function(b,E,U){var L=(U||n).length,P=d[L],A,X,k,O,z,Y,W,te,N;if(!P){if(N=n.grid==="auto"?0:(n.grid||[1,ua])[1],!N){for(W=-1e8;W<(W=U[N++].getBoundingClientRect().left)&&N<L;);N<L&&N--}for(P=d[L]=[],A=v?Math.min(N,L)*x-.5:o%N,X=N===ua?0:v?L*M/N-.5:o/N|0,W=0,te=ua,Y=0;Y<L;Y++)k=Y%N-A,O=X-(Y/N|0),P[Y]=z=_?Math.abs(_==="y"?O:k):YE(k*k+O*O),z>W&&(W=z),z<te&&(te=z);o==="random"&&uw(P),P.max=W-te,P.min=te,P.v=L=(parseFloat(n.amount)||parseFloat(n.each)*(N>L?L-1:_?_==="y"?L/N:N:Math.max(N,L/N))||0)*(o==="edges"?-1:1),P.b=L<0?c-L:c,P.u=br(n.amount||n.each)||0,r=r&&L<0?Sw(r):r}return L=(P[b]-P.min)/P.max||0,Zi(P.b+(r?r(L):L)*P.v)+P.u}},H0=function(t){var n=Math.pow(10,((t+"").split(".")[1]||"").length);return function(r){var o=Zi(Math.round(parseFloat(r)/t)*t*n);return(o-o%1)/n+(qa(r)?0:br(r))}},dw=function(t,n){var r=Rr(t),o,c;return!r&&pa(t)&&(o=r=t.radius||ua,t.values?(t=Rs(t.values),(c=!qa(t[0]))&&(o*=o)):t=H0(t.increment)),Fo(n,r?Oi(t)?function(d){return c=t(d),Math.abs(c-d)<=o?c:d}:function(d){for(var p=parseFloat(c?d.x:d),v=parseFloat(c?d.y:0),_=ua,x=0,M=t.length,b,E;M--;)c?(b=t[M].x-p,E=t[M].y-v,b=b*b+E*E):b=Math.abs(t[M]-p),b<_&&(_=b,x=M);return x=!o||_<=o?t[x]:d,c||x===d||qa(d)?x:x+br(d)}:H0(t))},pw=function(t,n,r,o){return Fo(Rr(t)?!n:r===!0?!!(r=0):!o,function(){return Rr(t)?t[~~(Math.random()*t.length)]:(r=r||1e-5)&&(o=r<1?Math.pow(10,(r+"").length-2):1)&&Math.floor(Math.round((t-r/2+Math.random()*(n-t+r*.99))/r)*r*o)/o})},QO=function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return function(o){return n.reduce(function(c,d){return d(c)},o)}},eB=function(t,n){return function(r){return t(parseFloat(r))+(n||br(r))}},tB=function(t,n,r){return _w(t,n,0,1,r)},mw=function(t,n,r){return Fo(r,function(o){return t[~~n(o)]})},nB=function a(t,n,r){var o=n-t;return Rr(t)?mw(t,a(0,t.length),n):Fo(r,function(c){return(o+(c-t)%o)%o+t})},iB=function a(t,n,r){var o=n-t,c=o*2;return Rr(t)?mw(t,a(0,t.length-1),n):Fo(r,function(d){return d=(c+(d-t)%c)%c||0,t+(d>o?c-d:d)})},qu=function(t){for(var n=0,r="",o,c,d,p;~(o=t.indexOf("random(",n));)d=t.indexOf(")",o),p=t.charAt(o+7)==="[",c=t.substr(o+7,d-o-7).match(p?JE:N0),r+=t.substr(n,o-n)+pw(p?c:+c[0],p?0:+c[1],+c[2]||1e-5),n=d+1;return r+t.substr(n,t.length-n)},_w=function(t,n,r,o,c){var d=n-t,p=o-r;return Fo(c,function(v){return r+((v-t)/d*p||0)})},rB=function a(t,n,r,o){var c=isNaN(t+n)?0:function(E){return(1-E)*t+E*n};if(!c){var d=lr(t),p={},v,_,x,M,b;if(r===!0&&(o=1)&&(r=null),d)t={p:t},n={p:n};else if(Rr(t)&&!Rr(n)){for(x=[],M=t.length,b=M-2,_=1;_<M;_++)x.push(a(t[_-1],t[_]));M--,c=function(U){U*=M;var L=Math.min(b,~~U);return x[L](U-L)},r=n}else o||(t=yh(Rr(t)?[]:{},t));if(!x){for(v in n)Tx.call(p,t,v,"get",n[v]);c=function(U){return Px(U,p)||(d?t.p:t)}}}return Fo(r,c)},sb=function(t,n,r){var o=t.labels,c=ua,d,p,v;for(d in o)p=o[d]-n,p<0==!!r&&p&&c>(p=Math.abs(p))&&(v=d,c=p);return v},us=function(t,n,r){var o=t.vars,c=o[n],d=wi,p=t._ctx,v,_,x;if(c)return v=o[n+"Params"],_=o.callbackScope||t,r&&Ao.length&&Zp(),p&&(wi=p),x=v?c.apply(_,v):c.call(_),wi=d,x},Pu=function(t){return Uo(t),t.scrollTrigger&&t.scrollTrigger.kill(!!dr),t.progress()<1&&us(t,"onInterrupt"),t},ih,gw=[],xw=function(t){if(t)if(t=!t.name&&t.default||t,vx()||t.headless){var n=t.name,r=Oi(t),o=n&&!r&&t.init?function(){this._props=[]}:t,c={init:Xu,render:Px,add:Tx,kill:yB,modifier:vB,rawVars:0},d={targetTest:0,get:0,getSetter:Cx,aliases:{},register:0};if(bh(),t!==o){if(cs[n])return;_s(o,_s($p(t,c),d)),yh(o.prototype,yh(c,$p(t,d))),cs[o.prop=n]=o,t.targetTest&&(Np.push(o),Sx[n]=1),n=(n==="css"?"CSS":n.charAt(0).toUpperCase()+n.substr(1))+"Plugin"}ew(n,o),t.register&&t.register(es,o,jr)}else gw.push(t)},xi=255,Iu={aqua:[0,xi,xi],lime:[0,xi,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,xi],navy:[0,0,128],white:[xi,xi,xi],olive:[128,128,0],yellow:[xi,xi,0],orange:[xi,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[xi,0,0],pink:[xi,192,203],cyan:[0,xi,xi],transparent:[xi,xi,xi,0]},Eg=function(t,n,r){return t+=t<0?1:t>1?-1:0,(t*6<1?n+(r-n)*t*6:t<.5?r:t*3<2?n+(r-n)*(2/3-t)*6:n)*xi+.5|0},vw=function(t,n,r){var o=t?qa(t)?[t>>16,t>>8&xi,t&xi]:0:Iu.black,c,d,p,v,_,x,M,b,E,U;if(!o){if(t.substr(-1)===","&&(t=t.substr(0,t.length-1)),Iu[t])o=Iu[t];else if(t.charAt(0)==="#"){if(t.length<6&&(c=t.charAt(1),d=t.charAt(2),p=t.charAt(3),t="#"+c+c+d+d+p+p+(t.length===5?t.charAt(4)+t.charAt(4):"")),t.length===9)return o=parseInt(t.substr(1,6),16),[o>>16,o>>8&xi,o&xi,parseInt(t.substr(7),16)/255];t=parseInt(t.substr(1),16),o=[t>>16,t>>8&xi,t&xi]}else if(t.substr(0,3)==="hsl"){if(o=U=t.match(N0),!n)v=+o[0]%360/360,_=+o[1]/100,x=+o[2]/100,d=x<=.5?x*(_+1):x+_-x*_,c=x*2-d,o.length>3&&(o[3]*=1),o[0]=Eg(v+1/3,c,d),o[1]=Eg(v,c,d),o[2]=Eg(v-1/3,c,d);else if(~t.indexOf("="))return o=t.match($E),r&&o.length<4&&(o[3]=1),o}else o=t.match(N0)||Iu.transparent;o=o.map(Number)}return n&&!U&&(c=o[0]/xi,d=o[1]/xi,p=o[2]/xi,M=Math.max(c,d,p),b=Math.min(c,d,p),x=(M+b)/2,M===b?v=_=0:(E=M-b,_=x>.5?E/(2-M-b):E/(M+b),v=M===c?(d-p)/E+(d<p?6:0):M===d?(p-c)/E+2:(c-d)/E+4,v*=60),o[0]=~~(v+.5),o[1]=~~(_*100+.5),o[2]=~~(x*100+.5)),r&&o.length<4&&(o[3]=1),o},yw=function(t){var n=[],r=[],o=-1;return t.split(Ro).forEach(function(c){var d=c.match(nh)||[];n.push.apply(n,d),r.push(o+=d.length+1)}),n.c=r,n},ab=function(t,n,r){var o="",c=(t+o).match(Ro),d=n?"hsla(":"rgba(",p=0,v,_,x,M;if(!c)return t;if(c=c.map(function(b){return(b=vw(b,n,1))&&d+(n?b[0]+","+b[1]+"%,"+b[2]+"%,"+b[3]:b.join(","))+")"}),r&&(x=yw(t),v=r.c,v.join(o)!==x.c.join(o)))for(_=t.replace(Ro,"1").split(nh),M=_.length-1;p<M;p++)o+=_[p]+(~v.indexOf(p)?c.shift()||d+"0,0,0,0)":(x.length?x:c.length?c:r).shift());if(!_)for(_=t.split(Ro),M=_.length-1;p<M;p++)o+=_[p]+c[p];return o+_[M]},Ro=function(){var a="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b",t;for(t in Iu)a+="|"+t+"\\b";return new RegExp(a+")","gi")}(),sB=/hsl[a]?\(/,Mw=function(t){var n=t.join(" "),r;if(Ro.lastIndex=0,Ro.test(n))return r=sB.test(n),t[1]=ab(t[1],r),t[0]=ab(t[0],r,yw(t[1])),!0},Yu,hs=function(){var a=Date.now,t=500,n=33,r=a(),o=r,c=1e3/240,d=c,p=[],v,_,x,M,b,E,U=function L(P){var A=a()-o,X=P===!0,k,O,z,Y;if((A>t||A<0)&&(r+=A-n),o+=A,z=o-r,k=z-d,(k>0||X)&&(Y=++M.frame,b=z-M.time*1e3,M.time=z=z/1e3,d+=k+(k>=c?4:c-k),O=1),X||(v=_(L)),O)for(E=0;E<p.length;E++)p[E](z,b,Y,P)};return M={time:0,frame:0,tick:function(){U(!0)},deltaRatio:function(P){return b/(1e3/(P||60))},wake:function(){jE&&(!F0&&vx()&&(ra=F0=window,yx=ra.document||{},ms.gsap=es,(ra.gsapVersions||(ra.gsapVersions=[])).push(es.version),QE(Yp||ra.GreenSockGlobals||!ra.gsap&&ra||{}),gw.forEach(xw)),x=typeof requestAnimationFrame<"u"&&requestAnimationFrame,v&&M.sleep(),_=x||function(P){return setTimeout(P,d-M.time*1e3+1|0)},Yu=1,U(2))},sleep:function(){(x?cancelAnimationFrame:clearTimeout)(v),Yu=0,_=Xu},lagSmoothing:function(P,A){t=P||1/0,n=Math.min(A||33,t)},fps:function(P){c=1e3/(P||240),d=M.time*1e3+c},add:function(P,A,X){var k=A?function(O,z,Y,W){P(O,z,Y,W),M.remove(k)}:P;return M.remove(P),p[X?"unshift":"push"](k),bh(),k},remove:function(P,A){~(A=p.indexOf(P))&&p.splice(A,1)&&E>=A&&E--},_listeners:p},M}(),bh=function(){return!Yu&&hs.wake()},Wn={},aB=/^[\d.\-M][\d.\-,\s]/,oB=/["']/g,lB=function(t){for(var n={},r=t.substr(1,t.length-3).split(":"),o=r[0],c=1,d=r.length,p,v,_;c<d;c++)v=r[c],p=c!==d-1?v.lastIndexOf(","):v.length,_=v.substr(0,p),n[o]=isNaN(_)?_.replace(oB,"").trim():+_,o=v.substr(p+1).trim();return n},cB=function(t){var n=t.indexOf("(")+1,r=t.indexOf(")"),o=t.indexOf("(",n);return t.substring(n,~o&&o<r?t.indexOf(")",r+1):r)},hB=function(t){var n=(t+"").split("("),r=Wn[n[0]];return r&&n.length>1&&r.config?r.config.apply(null,~t.indexOf("{")?[lB(n[1])]:cB(t).split(",").map(rw)):Wn._CE&&aB.test(t)?Wn._CE("",t):r},Sw=function(t){return function(n){return 1-t(1-n)}},bw=function a(t,n){for(var r=t._first,o;r;)r instanceof Or?a(r,n):r.vars.yoyoEase&&(!r._yoyo||!r._repeat)&&r._yoyo!==n&&(r.timeline?a(r.timeline,n):(o=r._ease,r._ease=r._yEase,r._yEase=o,r._yoyo=n)),r=r._next},Fl=function(t,n){return t&&(Oi(t)?t:Wn[t]||hB(t))||n},Yl=function(t,n,r,o){r===void 0&&(r=function(v){return 1-n(1-v)}),o===void 0&&(o=function(v){return v<.5?n(v*2)/2:1-n((1-v)*2)/2});var c={easeIn:n,easeOut:r,easeInOut:o},d;return Jr(t,function(p){Wn[p]=ms[p]=c,Wn[d=p.toLowerCase()]=r;for(var v in c)Wn[d+(v==="easeIn"?".in":v==="easeOut"?".out":".inOut")]=Wn[p+"."+v]=c[v]}),c},Ew=function(t){return function(n){return n<.5?(1-t(1-n*2))/2:.5+t((n-.5)*2)/2}},wg=function a(t,n,r){var o=n>=1?n:1,c=(r||(t?.3:.45))/(n<1?n:1),d=c/U0*(Math.asin(1/o)||0),p=function(x){return x===1?1:o*Math.pow(2,-10*x)*BO((x-d)*c)+1},v=t==="out"?p:t==="in"?function(_){return 1-p(1-_)}:Ew(p);return c=U0/c,v.config=function(_,x){return a(t,_,x)},v},Tg=function a(t,n){n===void 0&&(n=1.70158);var r=function(d){return d?--d*d*((n+1)*d+n)+1:0},o=t==="out"?r:t==="in"?function(c){return 1-r(1-c)}:Ew(r);return o.config=function(c){return a(t,c)},o};Jr("Linear,Quad,Cubic,Quart,Quint,Strong",function(a,t){var n=t<5?t+1:t;Yl(a+",Power"+(n-1),t?function(r){return Math.pow(r,n)}:function(r){return r},function(r){return 1-Math.pow(1-r,n)},function(r){return r<.5?Math.pow(r*2,n)/2:1-Math.pow((1-r)*2,n)/2})});Wn.Linear.easeNone=Wn.none=Wn.Linear.easeIn;Yl("Elastic",wg("in"),wg("out"),wg());(function(a,t){var n=1/t,r=2*n,o=2.5*n,c=function(p){return p<n?a*p*p:p<r?a*Math.pow(p-1.5/t,2)+.75:p<o?a*(p-=2.25/t)*p+.9375:a*Math.pow(p-2.625/t,2)+.984375};Yl("Bounce",function(d){return 1-c(1-d)},c)})(7.5625,2.75);Yl("Expo",function(a){return Math.pow(2,10*(a-1))*a+a*a*a*a*a*a*(1-a)});Yl("Circ",function(a){return-(YE(1-a*a)-1)});Yl("Sine",function(a){return a===1?1:-OO(a*NO)+1});Yl("Back",Tg("in"),Tg("out"),Tg());Wn.SteppedEase=Wn.steps=ms.SteppedEase={config:function(t,n){t===void 0&&(t=1);var r=1/t,o=t+(n?0:1),c=n?1:0,d=1-wr;return function(p){return((o*uf(0,d,p)|0)+c)*r}}};vh.ease=Wn["quad.out"];Jr("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt",function(a){return bx+=a+","+a+"Params,"});var ww=function(t,n){this.id=FO++,t._gsap=this,this.target=t,this.harness=n,this.get=n?n.get:nw,this.set=n?n.getSetter:Cx},Zu=function(){function a(n){this.vars=n,this._delay=+n.delay||0,(this._repeat=n.repeat===1/0?-2:n.repeat||0)&&(this._rDelay=n.repeatDelay||0,this._yoyo=!!n.yoyo||!!n.yoyoEase),this._ts=1,Sh(this,+n.duration,1,1),this.data=n.data,wi&&(this._ctx=wi,wi.data.push(this)),Yu||hs.wake()}var t=a.prototype;return t.delay=function(r){return r||r===0?(this.parent&&this.parent.smoothChildTiming&&this.startTime(this._start+r-this._delay),this._delay=r,this):this._delay},t.duration=function(r){return arguments.length?this.totalDuration(this._repeat>0?r+(r+this._rDelay)*this._repeat:r):this.totalDuration()&&this._dur},t.totalDuration=function(r){return arguments.length?(this._dirty=0,Sh(this,this._repeat<0?r:(r-this._repeat*this._rDelay)/(this._repeat+1))):this._tDur},t.totalTime=function(r,o){if(bh(),!arguments.length)return this._tTime;var c=this._dp;if(c&&c.smoothChildTiming&&this._ts){for(lm(this,r),!c._dp||c.parent||ow(c,this);c&&c.parent;)c.parent._time!==c._start+(c._ts>=0?c._tTime/c._ts:(c.totalDuration()-c._tTime)/-c._ts)&&c.totalTime(c._tTime,!0),c=c.parent;!this.parent&&this._dp.autoRemoveChildren&&(this._ts>0&&r<this._tDur||this._ts<0&&r>0||!this._tDur&&!r)&&oa(this._dp,this,this._start-this._delay)}return(this._tTime!==r||!this._dur&&!o||this._initted&&Math.abs(this._zTime)===wr||!r&&!this._initted&&(this.add||this._ptLookup))&&(this._ts||(this._pTime=r),iw(this,r,o)),this},t.time=function(r,o){return arguments.length?this.totalTime(Math.min(this.totalDuration(),r+ib(this))%(this._dur+this._rDelay)||(r?this._dur:0),o):this._time},t.totalProgress=function(r,o){return arguments.length?this.totalTime(this.totalDuration()*r,o):this.totalDuration()?Math.min(1,this._tTime/this._tDur):this.rawTime()>=0&&this._initted?1:0},t.progress=function(r,o){return arguments.length?this.totalTime(this.duration()*(this._yoyo&&!(this.iteration()&1)?1-r:r)+ib(this),o):this.duration()?Math.min(1,this._time/this._dur):this.rawTime()>0?1:0},t.iteration=function(r,o){var c=this.duration()+this._rDelay;return arguments.length?this.totalTime(this._time+(r-1)*c,o):this._repeat?Mh(this._tTime,c)+1:1},t.timeScale=function(r,o){if(!arguments.length)return this._rts===-1e-8?0:this._rts;if(this._rts===r)return this;var c=this.parent&&this._ts?Kp(this.parent._time,this):this._tTime;return this._rts=+r||0,this._ts=this._ps||r===-1e-8?0:this._rts,this.totalTime(uf(-Math.abs(this._delay),this.totalDuration(),c),o!==!1),om(this),XO(this)},t.paused=function(r){return arguments.length?(this._ps!==r&&(this._ps=r,r?(this._pTime=this._tTime||Math.max(-this._delay,this.rawTime()),this._ts=this._act=0):(bh(),this._ts=this._rts,this.totalTime(this.parent&&!this.parent.smoothChildTiming?this.rawTime():this._tTime||this._pTime,this.progress()===1&&Math.abs(this._zTime)!==wr&&(this._tTime-=wr)))),this):this._ps},t.startTime=function(r){if(arguments.length){this._start=r;var o=this.parent||this._dp;return o&&(o._sort||!this.parent)&&oa(o,this,r-this._delay),this}return this._start},t.endTime=function(r){return this._start+(Kr(r)?this.totalDuration():this.duration())/Math.abs(this._ts||1)},t.rawTime=function(r){var o=this.parent||this._dp;return o?r&&(!this._ts||this._repeat&&this._time&&this.totalProgress()<1)?this._tTime%(this._dur+this._rDelay):this._ts?Kp(o.rawTime(r),this):this._tTime:this._tTime},t.revert=function(r){r===void 0&&(r=VO);var o=dr;return dr=r,wx(this)&&(this.timeline&&this.timeline.revert(r),this.totalTime(-.01,r.suppressEvents)),this.data!=="nested"&&r.kill!==!1&&this.kill(),dr=o,this},t.globalTime=function(r){for(var o=this,c=arguments.length?r:o.rawTime();o;)c=o._start+c/(Math.abs(o._ts)||1),o=o._dp;return!this.parent&&this._sat?this._sat.globalTime(r):c},t.repeat=function(r){return arguments.length?(this._repeat=r===1/0?-2:r,rb(this)):this._repeat===-2?1/0:this._repeat},t.repeatDelay=function(r){if(arguments.length){var o=this._time;return this._rDelay=r,rb(this),o?this.time(o):this}return this._rDelay},t.yoyo=function(r){return arguments.length?(this._yoyo=r,this):this._yoyo},t.seek=function(r,o){return this.totalTime(bs(this,r),Kr(o))},t.restart=function(r,o){return this.play().totalTime(r?-this._delay:0,Kr(o)),this._dur||(this._zTime=-1e-8),this},t.play=function(r,o){return r!=null&&this.seek(r,o),this.reversed(!1).paused(!1)},t.reverse=function(r,o){return r!=null&&this.seek(r||this.totalDuration(),o),this.reversed(!0).paused(!1)},t.pause=function(r,o){return r!=null&&this.seek(r,o),this.paused(!0)},t.resume=function(){return this.paused(!1)},t.reversed=function(r){return arguments.length?(!!r!==this.reversed()&&this.timeScale(-this._rts||(r?-1e-8:0)),this):this._rts<0},t.invalidate=function(){return this._initted=this._act=0,this._zTime=-1e-8,this},t.isActive=function(){var r=this.parent||this._dp,o=this._start,c;return!!(!r||this._ts&&this._initted&&r.isActive()&&(c=r.rawTime(!0))>=o&&c<this.endTime(!0)-wr)},t.eventCallback=function(r,o,c){var d=this.vars;return arguments.length>1?(o?(d[r]=o,c&&(d[r+"Params"]=c),r==="onUpdate"&&(this._onUpdate=o)):delete d[r],this):d[r]},t.then=function(r){var o=this;return new Promise(function(c){var d=Oi(r)?r:sw,p=function(){var _=o.then;o.then=null,Oi(d)&&(d=d(o))&&(d.then||d===o)&&(o.then=_),c(d),o.then=_};o._initted&&o.totalProgress()===1&&o._ts>=0||!o._tTime&&o._ts<0?p():o._prom=p})},t.kill=function(){Pu(this)},a}();_s(Zu.prototype,{_time:0,_start:0,_end:0,_tTime:0,_tDur:0,_dirty:0,_repeat:0,_yoyo:!1,parent:null,_initted:!1,_rDelay:0,_ts:1,_dp:0,ratio:0,_zTime:-1e-8,_prom:0,_ps:!1,_rts:1});var Or=function(a){qE(t,a);function t(r,o){var c;return r===void 0&&(r={}),c=a.call(this,r)||this,c.labels={},c.smoothChildTiming=!!r.smoothChildTiming,c.autoRemoveChildren=!!r.autoRemoveChildren,c._sort=Kr(r.sortChildren),Ci&&oa(r.parent||Ci,Fa(c),o),r.reversed&&c.reverse(),r.paused&&c.paused(!0),r.scrollTrigger&&lw(Fa(c),r.scrollTrigger),c}var n=t.prototype;return n.to=function(o,c,d){return Fu(0,arguments,this),this},n.from=function(o,c,d){return Fu(1,arguments,this),this},n.fromTo=function(o,c,d,p){return Fu(2,arguments,this),this},n.set=function(o,c,d){return c.duration=0,c.parent=this,Nu(c).repeatDelay||(c.repeat=0),c.immediateRender=!!c.immediateRender,new Yi(o,c,bs(this,d),1),this},n.call=function(o,c,d){return oa(this,Yi.delayedCall(0,o,c),d)},n.staggerTo=function(o,c,d,p,v,_,x){return d.duration=c,d.stagger=d.stagger||p,d.onComplete=_,d.onCompleteParams=x,d.parent=this,new Yi(o,d,bs(this,v)),this},n.staggerFrom=function(o,c,d,p,v,_,x){return d.runBackwards=1,Nu(d).immediateRender=Kr(d.immediateRender),this.staggerTo(o,c,d,p,v,_,x)},n.staggerFromTo=function(o,c,d,p,v,_,x,M){return p.startAt=d,Nu(p).immediateRender=Kr(p.immediateRender),this.staggerTo(o,c,p,v,_,x,M)},n.render=function(o,c,d){var p=this._time,v=this._dirty?this.totalDuration():this._tDur,_=this._dur,x=o<=0?0:Zi(o),M=this._zTime<0!=o<0&&(this._initted||!_),b,E,U,L,P,A,X,k,O,z,Y,W;if(this!==Ci&&x>v&&o>=0&&(x=v),x!==this._tTime||d||M){if(p!==this._time&&_&&(x+=this._time-p,o+=this._time-p),b=x,O=this._start,k=this._ts,A=!k,M&&(_||(p=this._zTime),(o||!c)&&(this._zTime=o)),this._repeat){if(Y=this._yoyo,P=_+this._rDelay,this._repeat<-1&&o<0)return this.totalTime(P*100+o,c,d);if(b=Zi(x%P),x===v?(L=this._repeat,b=_):(z=Zi(x/P),L=~~z,L&&L===z&&(b=_,L--),b>_&&(b=_)),z=Mh(this._tTime,P),!p&&this._tTime&&z!==L&&this._tTime-z*P-this._dur<=0&&(z=L),Y&&L&1&&(b=_-b,W=1),L!==z&&!this._lock){var te=Y&&z&1,N=te===(Y&&L&1);if(L<z&&(te=!te),p=te?0:x%_?_:x,this._lock=1,this.render(p||(W?0:Zi(L*P)),c,!_)._lock=0,this._tTime=x,!c&&this.parent&&us(this,"onRepeat"),this.vars.repeatRefresh&&!W&&(this.invalidate()._lock=1),p&&p!==this._time||A!==!this._ts||this.vars.onRepeat&&!this.parent&&!this._act)return this;if(_=this._dur,v=this._tDur,N&&(this._lock=2,p=te?_:-1e-4,this.render(p,!0),this.vars.repeatRefresh&&!W&&this.invalidate()),this._lock=0,!this._ts&&!A)return this;bw(this,W)}}if(this._hasPause&&!this._forcing&&this._lock<2&&(X=$O(this,Zi(p),Zi(b)),X&&(x-=b-(b=X._start))),this._tTime=x,this._time=b,this._act=!k,this._initted||(this._onUpdate=this.vars.onUpdate,this._initted=1,this._zTime=o,p=0),!p&&x&&!c&&!z&&(us(this,"onStart"),this._tTime!==x))return this;if(b>=p&&o>=0)for(E=this._first;E;){if(U=E._next,(E._act||b>=E._start)&&E._ts&&X!==E){if(E.parent!==this)return this.render(o,c,d);if(E.render(E._ts>0?(b-E._start)*E._ts:(E._dirty?E.totalDuration():E._tDur)+(b-E._start)*E._ts,c,d),b!==this._time||!this._ts&&!A){X=0,U&&(x+=this._zTime=-1e-8);break}}E=U}else{E=this._last;for(var B=o<0?o:b;E;){if(U=E._prev,(E._act||B<=E._end)&&E._ts&&X!==E){if(E.parent!==this)return this.render(o,c,d);if(E.render(E._ts>0?(B-E._start)*E._ts:(E._dirty?E.totalDuration():E._tDur)+(B-E._start)*E._ts,c,d||dr&&wx(E)),b!==this._time||!this._ts&&!A){X=0,U&&(x+=this._zTime=B?-1e-8:wr);break}}E=U}}if(X&&!c&&(this.pause(),X.render(b>=p?0:-1e-8)._zTime=b>=p?1:-1,this._ts))return this._start=O,om(this),this.render(o,c,d);this._onUpdate&&!c&&us(this,"onUpdate",!0),(x===v&&this._tTime>=this.totalDuration()||!x&&p)&&(O===this._start||Math.abs(k)!==Math.abs(this._ts))&&(this._lock||((o||!_)&&(x===v&&this._ts>0||!x&&this._ts<0)&&Uo(this,1),!c&&!(o<0&&!p)&&(x||p||!v)&&(us(this,x===v&&o>=0?"onComplete":"onReverseComplete",!0),this._prom&&!(x<v&&this.timeScale()>0)&&this._prom())))}return this},n.add=function(o,c){var d=this;if(qa(c)||(c=bs(this,c,o)),!(o instanceof Zu)){if(Rr(o))return o.forEach(function(p){return d.add(p,c)}),this;if(lr(o))return this.addLabel(o,c);if(Oi(o))o=Yi.delayedCall(0,o);else return this}return this!==o?oa(this,o,c):this},n.getChildren=function(o,c,d,p){o===void 0&&(o=!0),c===void 0&&(c=!0),d===void 0&&(d=!0),p===void 0&&(p=-1e8);for(var v=[],_=this._first;_;)_._start>=p&&(_ instanceof Yi?c&&v.push(_):(d&&v.push(_),o&&v.push.apply(v,_.getChildren(!0,c,d)))),_=_._next;return v},n.getById=function(o){for(var c=this.getChildren(1,1,1),d=c.length;d--;)if(c[d].vars.id===o)return c[d]},n.remove=function(o){return lr(o)?this.removeLabel(o):Oi(o)?this.killTweensOf(o):(o.parent===this&&am(this,o),o===this._recent&&(this._recent=this._last),Nl(this))},n.totalTime=function(o,c){return arguments.length?(this._forcing=1,!this._dp&&this._ts&&(this._start=Zi(hs.time-(this._ts>0?o/this._ts:(this.totalDuration()-o)/-this._ts))),a.prototype.totalTime.call(this,o,c),this._forcing=0,this):this._tTime},n.addLabel=function(o,c){return this.labels[o]=bs(this,c),this},n.removeLabel=function(o){return delete this.labels[o],this},n.addPause=function(o,c,d){var p=Yi.delayedCall(0,c||Xu,d);return p.data="isPause",this._hasPause=1,oa(this,p,bs(this,o))},n.removePause=function(o){var c=this._first;for(o=bs(this,o);c;)c._start===o&&c.data==="isPause"&&Uo(c),c=c._next},n.killTweensOf=function(o,c,d){for(var p=this.getTweensOf(o,d),v=p.length;v--;)yo!==p[v]&&p[v].kill(o,c);return this},n.getTweensOf=function(o,c){for(var d=[],p=Rs(o),v=this._first,_=qa(c),x;v;)v instanceof Yi?HO(v._targets,p)&&(_?(!yo||v._initted&&v._ts)&&v.globalTime(0)<=c&&v.globalTime(v.totalDuration())>c:!c||v.isActive())&&d.push(v):(x=v.getTweensOf(p,c)).length&&d.push.apply(d,x),v=v._next;return d},n.tweenTo=function(o,c){c=c||{};var d=this,p=bs(d,o),v=c,_=v.startAt,x=v.onStart,M=v.onStartParams,b=v.immediateRender,E,U=Yi.to(d,_s({ease:c.ease||"none",lazy:!1,immediateRender:!1,time:p,overwrite:"auto",duration:c.duration||Math.abs((p-(_&&"time"in _?_.time:d._time))/d.timeScale())||wr,onStart:function(){if(d.pause(),!E){var P=c.duration||Math.abs((p-(_&&"time"in _?_.time:d._time))/d.timeScale());U._dur!==P&&Sh(U,P,0,1).render(U._time,!0,!0),E=1}x&&x.apply(U,M||[])}},c));return b?U.render(0):U},n.tweenFromTo=function(o,c,d){return this.tweenTo(c,_s({startAt:{time:bs(this,o)}},d))},n.recent=function(){return this._recent},n.nextLabel=function(o){return o===void 0&&(o=this._time),sb(this,bs(this,o))},n.previousLabel=function(o){return o===void 0&&(o=this._time),sb(this,bs(this,o),1)},n.currentLabel=function(o){return arguments.length?this.seek(o,!0):this.previousLabel(this._time+wr)},n.shiftChildren=function(o,c,d){d===void 0&&(d=0);for(var p=this._first,v=this.labels,_;p;)p._start>=d&&(p._start+=o,p._end+=o),p=p._next;if(c)for(_ in v)v[_]>=d&&(v[_]+=o);return Nl(this)},n.invalidate=function(o){var c=this._first;for(this._lock=0;c;)c.invalidate(o),c=c._next;return a.prototype.invalidate.call(this,o)},n.clear=function(o){o===void 0&&(o=!0);for(var c=this._first,d;c;)d=c._next,this.remove(c),c=d;return this._dp&&(this._time=this._tTime=this._pTime=0),o&&(this.labels={}),Nl(this)},n.totalDuration=function(o){var c=0,d=this,p=d._last,v=ua,_,x,M;if(arguments.length)return d.timeScale((d._repeat<0?d.duration():d.totalDuration())/(d.reversed()?-o:o));if(d._dirty){for(M=d.parent;p;)_=p._prev,p._dirty&&p.totalDuration(),x=p._start,x>v&&d._sort&&p._ts&&!d._lock?(d._lock=1,oa(d,p,x-p._delay,1)._lock=0):v=x,x<0&&p._ts&&(c-=x,(!M&&!d._dp||M&&M.smoothChildTiming)&&(d._start+=x/d._ts,d._time-=x,d._tTime-=x),d.shiftChildren(-x,!1,-1/0),v=0),p._end>c&&p._ts&&(c=p._end),p=_;Sh(d,d===Ci&&d._time>c?d._time:c,1,1),d._dirty=0}return d._tDur},t.updateRoot=function(o){if(Ci._ts&&(iw(Ci,Kp(o,Ci)),tw=hs.frame),hs.frame>=tb){tb+=ps.autoSleep||120;var c=Ci._first;if((!c||!c._ts)&&ps.autoSleep&&hs._listeners.length<2){for(;c&&!c._ts;)c=c._next;c||hs.sleep()}}},t}(Zu);_s(Or.prototype,{_lock:0,_hasPause:0,_forcing:0});var uB=function(t,n,r,o,c,d,p){var v=new jr(this._pt,t,n,0,1,Iw,null,c),_=0,x=0,M,b,E,U,L,P,A,X;for(v.b=r,v.e=o,r+="",o+="",(A=~o.indexOf("random("))&&(o=qu(o)),d&&(X=[r,o],d(X,t,n),r=X[0],o=X[1]),b=r.match(Sg)||[];M=Sg.exec(o);)U=M[0],L=o.substring(_,M.index),E?E=(E+1)%5:L.substr(-5)==="rgba("&&(E=1),U!==b[x++]&&(P=parseFloat(b[x-1])||0,v._pt={_next:v._pt,p:L||x===1?L:",",s:P,c:U.charAt(1)==="="?lh(P,U)-P:parseFloat(U)-P,m:E&&E<4?Math.round:0},_=Sg.lastIndex);return v.c=_<o.length?o.substring(_,o.length):"",v.fp=p,(KE.test(o)||A)&&(v.e=0),this._pt=v,v},Tx=function(t,n,r,o,c,d,p,v,_,x){Oi(o)&&(o=o(c||0,t,d));var M=t[n],b=r!=="get"?r:Oi(M)?_?t[n.indexOf("set")||!Oi(t["get"+n.substr(3)])?n:"get"+n.substr(3)](_):t[n]():M,E=Oi(M)?_?_B:Cw:Rx,U;if(lr(o)&&(~o.indexOf("random(")&&(o=qu(o)),o.charAt(1)==="="&&(U=lh(b,o)+(br(b)||0),(U||U===0)&&(o=U))),!x||b!==o||G0)return!isNaN(b*o)&&o!==""?(U=new jr(this._pt,t,n,+b||0,o-(b||0),typeof M=="boolean"?xB:Pw,0,E),_&&(U.fp=_),p&&U.modifier(p,this,t),this._pt=U):(!M&&!(n in t)&&Mx(n,o),uB.call(this,t,n,b,o,E,v||ps.stringFilter,_))},fB=function(t,n,r,o,c){if(Oi(t)&&(t=Ou(t,c,n,r,o)),!pa(t)||t.style&&t.nodeType||Rr(t)||ZE(t))return lr(t)?Ou(t,c,n,r,o):t;var d={},p;for(p in t)d[p]=Ou(t[p],c,n,r,o);return d},Tw=function(t,n,r,o,c,d){var p,v,_,x;if(cs[t]&&(p=new cs[t]).init(c,p.rawVars?n[t]:fB(n[t],o,c,d,r),r,o,d)!==!1&&(r._pt=v=new jr(r._pt,c,t,0,1,p.render,p,0,p.priority),r!==ih))for(_=r._ptLookup[r._targets.indexOf(c)],x=p._props.length;x--;)_[p._props[x]]=v;return p},yo,G0,Ax=function a(t,n,r){var o=t.vars,c=o.ease,d=o.startAt,p=o.immediateRender,v=o.lazy,_=o.onUpdate,x=o.runBackwards,M=o.yoyoEase,b=o.keyframes,E=o.autoRevert,U=t._dur,L=t._startAt,P=t._targets,A=t.parent,X=A&&A.data==="nested"?A.vars.targets:P,k=t._overwrite==="auto"&&!gx,O=t.timeline,z,Y,W,te,N,B,ee,Ee,de,be,Ae,Me,me;if(O&&(!b||!c)&&(c="none"),t._ease=Fl(c,vh.ease),t._yEase=M?Sw(Fl(M===!0?c:M,vh.ease)):0,M&&t._yoyo&&!t._repeat&&(M=t._yEase,t._yEase=t._ease,t._ease=M),t._from=!O&&!!o.runBackwards,!O||b&&!o.stagger){if(Ee=P[0]?Ul(P[0]).harness:0,Me=Ee&&o[Ee.prop],z=$p(o,Sx),L&&(L._zTime<0&&L.progress(1),n<0&&x&&p&&!E?L.render(-1,!0):L.revert(x&&U?Up:kO),L._lazy=0),d){if(Uo(t._startAt=Yi.set(P,_s({data:"isStart",overwrite:!1,parent:A,immediateRender:!0,lazy:!L&&Kr(v),startAt:null,delay:0,onUpdate:_&&function(){return us(t,"onUpdate")},stagger:0},d))),t._startAt._dp=0,t._startAt._sat=t,n<0&&(dr||!p&&!E)&&t._startAt.revert(Up),p&&U&&n<=0&&r<=0){n&&(t._zTime=n);return}}else if(x&&U&&!L){if(n&&(p=!1),W=_s({overwrite:!1,data:"isFromStart",lazy:p&&!L&&Kr(v),immediateRender:p,stagger:0,parent:A},z),Me&&(W[Ee.prop]=Me),Uo(t._startAt=Yi.set(P,W)),t._startAt._dp=0,t._startAt._sat=t,n<0&&(dr?t._startAt.revert(Up):t._startAt.render(-1,!0)),t._zTime=n,!p)a(t._startAt,wr,wr);else if(!n)return}for(t._pt=t._ptCache=0,v=U&&Kr(v)||v&&!U,Y=0;Y<P.length;Y++){if(N=P[Y],ee=N._gsap||Ex(P)[Y]._gsap,t._ptLookup[Y]=be={},O0[ee.id]&&Ao.length&&Zp(),Ae=X===P?Y:X.indexOf(N),Ee&&(de=new Ee).init(N,Me||z,t,Ae,X)!==!1&&(t._pt=te=new jr(t._pt,N,de.name,0,1,de.render,de,0,de.priority),de._props.forEach(function(_e){be[_e]=te}),de.priority&&(B=1)),!Ee||Me)for(W in z)cs[W]&&(de=Tw(W,z,t,Ae,N,X))?de.priority&&(B=1):be[W]=te=Tx.call(t,N,W,"get",z[W],Ae,X,0,o.stringFilter);t._op&&t._op[Y]&&t.kill(N,t._op[Y]),k&&t._pt&&(yo=t,Ci.killTweensOf(N,be,t.globalTime(n)),me=!t.parent,yo=0),t._pt&&v&&(O0[ee.id]=1)}B&&Dw(t),t._onInit&&t._onInit(t)}t._onUpdate=_,t._initted=(!t._op||t._pt)&&!me,b&&n<=0&&O.render(ua,!0,!0)},dB=function(t,n,r,o,c,d,p,v){var _=(t._pt&&t._ptCache||(t._ptCache={}))[n],x,M,b,E;if(!_)for(_=t._ptCache[n]=[],b=t._ptLookup,E=t._targets.length;E--;){if(x=b[E][n],x&&x.d&&x.d._pt)for(x=x.d._pt;x&&x.p!==n&&x.fp!==n;)x=x._next;if(!x)return G0=1,t.vars[n]="+=0",Ax(t,p),G0=0,v?Wu(n+" not eligible for reset"):1;_.push(x)}for(E=_.length;E--;)M=_[E],x=M._pt||M,x.s=(o||o===0)&&!c?o:x.s+(o||0)+d*x.c,x.c=r-x.s,M.e&&(M.e=ki(r)+br(M.e)),M.b&&(M.b=x.s+br(M.b))},pB=function(t,n){var r=t[0]?Ul(t[0]).harness:0,o=r&&r.aliases,c,d,p,v;if(!o)return n;c=yh({},n);for(d in o)if(d in c)for(v=o[d].split(","),p=v.length;p--;)c[v[p]]=c[d];return c},mB=function(t,n,r,o){var c=n.ease||o||"power1.inOut",d,p;if(Rr(n))p=r[t]||(r[t]=[]),n.forEach(function(v,_){return p.push({t:_/(n.length-1)*100,v,e:c})});else for(d in n)p=r[d]||(r[d]=[]),d==="ease"||p.push({t:parseFloat(t),v:n[d],e:c})},Ou=function(t,n,r,o,c){return Oi(t)?t.call(n,r,o,c):lr(t)&&~t.indexOf("random(")?qu(t):t},Aw=bx+"repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert",Rw={};Jr(Aw+",id,stagger,delay,duration,paused,scrollTrigger",function(a){return Rw[a]=1});var Yi=function(a){qE(t,a);function t(r,o,c,d){var p;typeof o=="number"&&(c.duration=o,o=c,c=null),p=a.call(this,d?o:Nu(o))||this;var v=p.vars,_=v.duration,x=v.delay,M=v.immediateRender,b=v.stagger,E=v.overwrite,U=v.keyframes,L=v.defaults,P=v.scrollTrigger,A=v.yoyoEase,X=o.parent||Ci,k=(Rr(r)||ZE(r)?qa(r[0]):"length"in o)?[r]:Rs(r),O,z,Y,W,te,N,B,ee;if(p._targets=k.length?Ex(k):Wu("GSAP target "+r+" not found. https://gsap.com",!ps.nullTargetWarn)||[],p._ptLookup=[],p._overwrite=E,U||b||Mp(_)||Mp(x)){if(o=p.vars,O=p.timeline=new Or({data:"nested",defaults:L||{},targets:X&&X.data==="nested"?X.vars.targets:k}),O.kill(),O.parent=O._dp=Fa(p),O._start=0,b||Mp(_)||Mp(x)){if(W=k.length,B=b&&fw(b),pa(b))for(te in b)~Aw.indexOf(te)&&(ee||(ee={}),ee[te]=b[te]);for(z=0;z<W;z++)Y=$p(o,Rw),Y.stagger=0,A&&(Y.yoyoEase=A),ee&&yh(Y,ee),N=k[z],Y.duration=+Ou(_,Fa(p),z,N,k),Y.delay=(+Ou(x,Fa(p),z,N,k)||0)-p._delay,!b&&W===1&&Y.delay&&(p._delay=x=Y.delay,p._start+=x,Y.delay=0),O.to(N,Y,B?B(z,N,k):0),O._ease=Wn.none;O.duration()?_=x=0:p.timeline=0}else if(U){Nu(_s(O.vars.defaults,{ease:"none"})),O._ease=Fl(U.ease||o.ease||"none");var Ee=0,de,be,Ae;if(Rr(U))U.forEach(function(Me){return O.to(k,Me,">")}),O.duration();else{Y={};for(te in U)te==="ease"||te==="easeEach"||mB(te,U[te],Y,U.easeEach);for(te in Y)for(de=Y[te].sort(function(Me,me){return Me.t-me.t}),Ee=0,z=0;z<de.length;z++)be=de[z],Ae={ease:be.e,duration:(be.t-(z?de[z-1].t:0))/100*_},Ae[te]=be.v,O.to(k,Ae,Ee),Ee+=Ae.duration;O.duration()<_&&O.to({},{duration:_-O.duration()})}}_||p.duration(_=O.duration())}else p.timeline=0;return E===!0&&!gx&&(yo=Fa(p),Ci.killTweensOf(k),yo=0),oa(X,Fa(p),c),o.reversed&&p.reverse(),o.paused&&p.paused(!0),(M||!_&&!U&&p._start===Zi(X._time)&&Kr(M)&&qO(Fa(p))&&X.data!=="nested")&&(p._tTime=-1e-8,p.render(Math.max(0,-x)||0)),P&&lw(Fa(p),P),p}var n=t.prototype;return n.render=function(o,c,d){var p=this._time,v=this._tDur,_=this._dur,x=o<0,M=o>v-wr&&!x?v:o<wr?0:o,b,E,U,L,P,A,X,k,O;if(!_)ZO(this,o,c,d);else if(M!==this._tTime||!o||d||!this._initted&&this._tTime||this._startAt&&this._zTime<0!==x||this._lazy){if(b=M,k=this.timeline,this._repeat){if(L=_+this._rDelay,this._repeat<-1&&x)return this.totalTime(L*100+o,c,d);if(b=Zi(M%L),M===v?(U=this._repeat,b=_):(P=Zi(M/L),U=~~P,U&&U===P?(b=_,U--):b>_&&(b=_)),A=this._yoyo&&U&1,A&&(O=this._yEase,b=_-b),P=Mh(this._tTime,L),b===p&&!d&&this._initted&&U===P)return this._tTime=M,this;U!==P&&(k&&this._yEase&&bw(k,A),this.vars.repeatRefresh&&!A&&!this._lock&&b!==L&&this._initted&&(this._lock=d=1,this.render(Zi(L*U),!0).invalidate()._lock=0))}if(!this._initted){if(cw(this,x?o:b,d,c,M))return this._tTime=0,this;if(p!==this._time&&!(d&&this.vars.repeatRefresh&&U!==P))return this;if(_!==this._dur)return this.render(o,c,d)}if(this._tTime=M,this._time=b,!this._act&&this._ts&&(this._act=1,this._lazy=0),this.ratio=X=(O||this._ease)(b/_),this._from&&(this.ratio=X=1-X),!p&&M&&!c&&!P&&(us(this,"onStart"),this._tTime!==M))return this;for(E=this._pt;E;)E.r(X,E.d),E=E._next;k&&k.render(o<0?o:k._dur*k._ease(b/this._dur),c,d)||this._startAt&&(this._zTime=o),this._onUpdate&&!c&&(x&&B0(this,o,c,d),us(this,"onUpdate")),this._repeat&&U!==P&&this.vars.onRepeat&&!c&&this.parent&&us(this,"onRepeat"),(M===this._tDur||!M)&&this._tTime===M&&(x&&!this._onUpdate&&B0(this,o,!0,!0),(o||!_)&&(M===this._tDur&&this._ts>0||!M&&this._ts<0)&&Uo(this,1),!c&&!(x&&!p)&&(M||p||A)&&(us(this,M===v?"onComplete":"onReverseComplete",!0),this._prom&&!(M<v&&this.timeScale()>0)&&this._prom()))}return this},n.targets=function(){return this._targets},n.invalidate=function(o){return(!o||!this.vars.runBackwards)&&(this._startAt=0),this._pt=this._op=this._onUpdate=this._lazy=this.ratio=0,this._ptLookup=[],this.timeline&&this.timeline.invalidate(o),a.prototype.invalidate.call(this,o)},n.resetTo=function(o,c,d,p,v){Yu||hs.wake(),this._ts||this.play();var _=Math.min(this._dur,(this._dp._time-this._start)*this._ts),x;return this._initted||Ax(this,_),x=this._ease(_/this._dur),dB(this,o,c,d,p,x,_,v)?this.resetTo(o,c,d,p,1):(lm(this,0),this.parent||aw(this._dp,this,"_first","_last",this._dp._sort?"_start":0),this.render(0))},n.kill=function(o,c){if(c===void 0&&(c="all"),!o&&(!c||c==="all"))return this._lazy=this._pt=0,this.parent?Pu(this):this.scrollTrigger&&this.scrollTrigger.kill(!!dr),this;if(this.timeline){var d=this.timeline.totalDuration();return this.timeline.killTweensOf(o,c,yo&&yo.vars.overwrite!==!0)._first||Pu(this),this.parent&&d!==this.timeline.totalDuration()&&Sh(this,this._dur*this.timeline._tDur/d,0,1),this}var p=this._targets,v=o?Rs(o):p,_=this._ptLookup,x=this._pt,M,b,E,U,L,P,A;if((!c||c==="all")&&WO(p,v))return c==="all"&&(this._pt=0),Pu(this);for(M=this._op=this._op||[],c!=="all"&&(lr(c)&&(L={},Jr(c,function(X){return L[X]=1}),c=L),c=pB(p,c)),A=p.length;A--;)if(~v.indexOf(p[A])){b=_[A],c==="all"?(M[A]=c,U=b,E={}):(E=M[A]=M[A]||{},U=c);for(L in U)P=b&&b[L],P&&((!("kill"in P.d)||P.d.kill(L)===!0)&&am(this,P,"_pt"),delete b[L]),E!=="all"&&(E[L]=1)}return this._initted&&!this._pt&&x&&Pu(this),this},t.to=function(o,c){return new t(o,c,arguments[2])},t.from=function(o,c){return Fu(1,arguments)},t.delayedCall=function(o,c,d,p){return new t(c,0,{immediateRender:!1,lazy:!1,overwrite:!1,delay:o,onComplete:c,onReverseComplete:c,onCompleteParams:d,onReverseCompleteParams:d,callbackScope:p})},t.fromTo=function(o,c,d){return Fu(2,arguments)},t.set=function(o,c){return c.duration=0,c.repeatDelay||(c.repeat=0),new t(o,c)},t.killTweensOf=function(o,c,d){return Ci.killTweensOf(o,c,d)},t}(Zu);_s(Yi.prototype,{_targets:[],_lazy:0,_startAt:0,_op:0,_onInit:0});Jr("staggerTo,staggerFrom,staggerFromTo",function(a){Yi[a]=function(){var t=new Or,n=k0.call(arguments,0);return n.splice(a==="staggerFromTo"?5:4,0,0),t[a].apply(t,n)}});var Rx=function(t,n,r){return t[n]=r},Cw=function(t,n,r){return t[n](r)},_B=function(t,n,r,o){return t[n](o.fp,r)},gB=function(t,n,r){return t.setAttribute(n,r)},Cx=function(t,n){return Oi(t[n])?Cw:xx(t[n])&&t.setAttribute?gB:Rx},Pw=function(t,n){return n.set(n.t,n.p,Math.round((n.s+n.c*t)*1e6)/1e6,n)},xB=function(t,n){return n.set(n.t,n.p,!!(n.s+n.c*t),n)},Iw=function(t,n){var r=n._pt,o="";if(!t&&n.b)o=n.b;else if(t===1&&n.e)o=n.e;else{for(;r;)o=r.p+(r.m?r.m(r.s+r.c*t):Math.round((r.s+r.c*t)*1e4)/1e4)+o,r=r._next;o+=n.c}n.set(n.t,n.p,o,n)},Px=function(t,n){for(var r=n._pt;r;)r.r(t,r.d),r=r._next},vB=function(t,n,r,o){for(var c=this._pt,d;c;)d=c._next,c.p===o&&c.modifier(t,n,r),c=d},yB=function(t){for(var n=this._pt,r,o;n;)o=n._next,n.p===t&&!n.op||n.op===t?am(this,n,"_pt"):n.dep||(r=1),n=o;return!r},MB=function(t,n,r,o){o.mSet(t,n,o.m.call(o.tween,r,o.mt),o)},Dw=function(t){for(var n=t._pt,r,o,c,d;n;){for(r=n._next,o=c;o&&o.pr>n.pr;)o=o._next;(n._prev=o?o._prev:d)?n._prev._next=n:c=n,(n._next=o)?o._prev=n:d=n,n=r}t._pt=c},jr=function(){function a(n,r,o,c,d,p,v,_,x){this.t=r,this.s=c,this.c=d,this.p=o,this.r=p||Pw,this.d=v||this,this.set=_||Rx,this.pr=x||0,this._next=n,n&&(n._prev=this)}var t=a.prototype;return t.modifier=function(r,o,c){this.mSet=this.mSet||this.set,this.set=MB,this.m=r,this.mt=c,this.tween=o},a}();Jr(bx+"parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger",function(a){return Sx[a]=1});ms.TweenMax=ms.TweenLite=Yi;ms.TimelineLite=ms.TimelineMax=Or;Ci=new Or({sortChildren:!1,defaults:vh,autoRemoveChildren:!0,id:"root",smoothChildTiming:!0});ps.stringFilter=Mw;var Ol=[],Fp={},SB=[],ob=0,bB=0,Ag=function(t){return(Fp[t]||SB).map(function(n){return n()})},W0=function(){var t=Date.now(),n=[];t-ob>2&&(Ag("matchMediaInit"),Ol.forEach(function(r){var o=r.queries,c=r.conditions,d,p,v,_;for(p in o)d=ra.matchMedia(o[p]).matches,d&&(v=1),d!==c[p]&&(c[p]=d,_=1);_&&(r.revert(),v&&n.push(r))}),Ag("matchMediaRevert"),n.forEach(function(r){return r.onMatch(r,function(o){return r.add(null,o)})}),ob=t,Ag("matchMedia"))},Lw=function(){function a(n,r){this.selector=r&&V0(r),this.data=[],this._r=[],this.isReverted=!1,this.id=bB++,n&&this.add(n)}var t=a.prototype;return t.add=function(r,o,c){Oi(r)&&(c=o,o=r,r=Oi);var d=this,p=function(){var _=wi,x=d.selector,M;return _&&_!==d&&_.data.push(d),c&&(d.selector=V0(c)),wi=d,M=o.apply(d,arguments),Oi(M)&&d._r.push(M),wi=_,d.selector=x,d.isReverted=!1,M};return d.last=p,r===Oi?p(d,function(v){return d.add(null,v)}):r?d[r]=p:p},t.ignore=function(r){var o=wi;wi=null,r(this),wi=o},t.getTweens=function(){var r=[];return this.data.forEach(function(o){return o instanceof a?r.push.apply(r,o.getTweens()):o instanceof Yi&&!(o.parent&&o.parent.data==="nested")&&r.push(o)}),r},t.clear=function(){this._r.length=this.data.length=0},t.kill=function(r,o){var c=this;if(r?function(){for(var p=c.getTweens(),v=c.data.length,_;v--;)_=c.data[v],_.data==="isFlip"&&(_.revert(),_.getChildren(!0,!0,!1).forEach(function(x){return p.splice(p.indexOf(x),1)}));for(p.map(function(x){return{g:x._dur||x._delay||x._sat&&!x._sat.vars.immediateRender?x.globalTime(0):-1/0,t:x}}).sort(function(x,M){return M.g-x.g||-1/0}).forEach(function(x){return x.t.revert(r)}),v=c.data.length;v--;)_=c.data[v],_ instanceof Or?_.data!=="nested"&&(_.scrollTrigger&&_.scrollTrigger.revert(),_.kill()):!(_ instanceof Yi)&&_.revert&&_.revert(r);c._r.forEach(function(x){return x(r,c)}),c.isReverted=!0}():this.data.forEach(function(p){return p.kill&&p.kill()}),this.clear(),o)for(var d=Ol.length;d--;)Ol[d].id===this.id&&Ol.splice(d,1)},t.revert=function(r){this.kill(r||{})},a}(),EB=function(){function a(n){this.contexts=[],this.scope=n,wi&&wi.data.push(this)}var t=a.prototype;return t.add=function(r,o,c){pa(r)||(r={matches:r});var d=new Lw(0,c||this.scope),p=d.conditions={},v,_,x;wi&&!d.selector&&(d.selector=wi.selector),this.contexts.push(d),o=d.add("onMatch",o),d.queries=r;for(_ in r)_==="all"?x=1:(v=ra.matchMedia(r[_]),v&&(Ol.indexOf(d)<0&&Ol.push(d),(p[_]=v.matches)&&(x=1),v.addListener?v.addListener(W0):v.addEventListener("change",W0)));return x&&o(d,function(M){return d.add(null,M)}),this},t.revert=function(r){this.kill(r||{})},t.kill=function(r){this.contexts.forEach(function(o){return o.kill(r,!0)})},a}(),Jp={registerPlugin:function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];n.forEach(function(o){return xw(o)})},timeline:function(t){return new Or(t)},getTweensOf:function(t,n){return Ci.getTweensOf(t,n)},getProperty:function(t,n,r,o){lr(t)&&(t=Rs(t)[0]);var c=Ul(t||{}).get,d=r?sw:rw;return r==="native"&&(r=""),t&&(n?d((cs[n]&&cs[n].get||c)(t,n,r,o)):function(p,v,_){return d((cs[p]&&cs[p].get||c)(t,p,v,_))})},quickSetter:function(t,n,r){if(t=Rs(t),t.length>1){var o=t.map(function(x){return es.quickSetter(x,n,r)}),c=o.length;return function(x){for(var M=c;M--;)o[M](x)}}t=t[0]||{};var d=cs[n],p=Ul(t),v=p.harness&&(p.harness.aliases||{})[n]||n,_=d?function(x){var M=new d;ih._pt=0,M.init(t,r?x+r:x,ih,0,[t]),M.render(1,M),ih._pt&&Px(1,ih)}:p.set(t,v);return d?_:function(x){return _(t,v,r?x+r:x,p,1)}},quickTo:function(t,n,r){var o,c=es.to(t,_s((o={},o[n]="+=0.1",o.paused=!0,o.stagger=0,o),r||{})),d=function(v,_,x){return c.resetTo(n,v,_,x)};return d.tween=c,d},isTweening:function(t){return Ci.getTweensOf(t,!0).length>0},defaults:function(t){return t&&t.ease&&(t.ease=Fl(t.ease,vh.ease)),nb(vh,t||{})},config:function(t){return nb(ps,t||{})},registerEffect:function(t){var n=t.name,r=t.effect,o=t.plugins,c=t.defaults,d=t.extendTimeline;(o||"").split(",").forEach(function(p){return p&&!cs[p]&&!ms[p]&&Wu(n+" effect requires "+p+" plugin.")}),bg[n]=function(p,v,_){return r(Rs(p),_s(v||{},c),_)},d&&(Or.prototype[n]=function(p,v,_){return this.add(bg[n](p,pa(v)?v:(_=v)&&{},this),_)})},registerEase:function(t,n){Wn[t]=Fl(n)},parseEase:function(t,n){return arguments.length?Fl(t,n):Wn},getById:function(t){return Ci.getById(t)},exportRoot:function(t,n){t===void 0&&(t={});var r=new Or(t),o,c;for(r.smoothChildTiming=Kr(t.smoothChildTiming),Ci.remove(r),r._dp=0,r._time=r._tTime=Ci._time,o=Ci._first;o;)c=o._next,(n||!(!o._dur&&o instanceof Yi&&o.vars.onComplete===o._targets[0]))&&oa(r,o,o._start-o._delay),o=c;return oa(Ci,r,0),r},context:function(t,n){return t?new Lw(t,n):wi},matchMedia:function(t){return new EB(t)},matchMediaRefresh:function(){return Ol.forEach(function(t){var n=t.conditions,r,o;for(o in n)n[o]&&(n[o]=!1,r=1);r&&t.revert()})||W0()},addEventListener:function(t,n){var r=Fp[t]||(Fp[t]=[]);~r.indexOf(n)||r.push(n)},removeEventListener:function(t,n){var r=Fp[t],o=r&&r.indexOf(n);o>=0&&r.splice(o,1)},utils:{wrap:nB,wrapYoyo:iB,distribute:fw,random:pw,snap:dw,normalize:tB,getUnit:br,clamp:JO,splitColor:vw,toArray:Rs,selector:V0,mapRange:_w,pipe:QO,unitize:eB,interpolate:rB,shuffle:uw},install:QE,effects:bg,ticker:hs,updateRoot:Or.updateRoot,plugins:cs,globalTimeline:Ci,core:{PropTween:jr,globals:ew,Tween:Yi,Timeline:Or,Animation:Zu,getCache:Ul,_removeLinkedListItem:am,reverting:function(){return dr},context:function(t){return t&&wi&&(wi.data.push(t),t._ctx=wi),wi},suppressOverwrites:function(t){return gx=t}}};Jr("to,from,fromTo,delayedCall,set,killTweensOf",function(a){return Jp[a]=Yi[a]});hs.add(Or.updateRoot);ih=Jp.to({},{duration:0});var wB=function(t,n){for(var r=t._pt;r&&r.p!==n&&r.op!==n&&r.fp!==n;)r=r._next;return r},TB=function(t,n){var r=t._targets,o,c,d;for(o in n)for(c=r.length;c--;)d=t._ptLookup[c][o],d&&(d=d.d)&&(d._pt&&(d=wB(d,o)),d&&d.modifier&&d.modifier(n[o],t,r[c],o))},Rg=function(t,n){return{name:t,headless:1,rawVars:1,init:function(o,c,d){d._onInit=function(p){var v,_;if(lr(c)&&(v={},Jr(c,function(x){return v[x]=1}),c=v),n){v={};for(_ in c)v[_]=n(c[_]);c=v}TB(p,c)}}}},es=Jp.registerPlugin({name:"attr",init:function(t,n,r,o,c){var d,p,v;this.tween=r;for(d in n)v=t.getAttribute(d)||"",p=this.add(t,"setAttribute",(v||0)+"",n[d],o,c,0,0,d),p.op=d,p.b=v,this._props.push(d)},render:function(t,n){for(var r=n._pt;r;)dr?r.set(r.t,r.p,r.b,r):r.r(t,r.d),r=r._next}},{name:"endArray",headless:1,init:function(t,n){for(var r=n.length;r--;)this.add(t,r,t[r]||0,n[r],0,0,0,0,0,1)}},Rg("roundProps",H0),Rg("modifiers"),Rg("snap",dw))||Jp;Yi.version=Or.version=es.version="3.13.0";jE=1;vx()&&bh();Wn.Power0;Wn.Power1;Wn.Power2;Wn.Power3;Wn.Power4;Wn.Linear;Wn.Quad;Wn.Cubic;Wn.Quart;Wn.Quint;Wn.Strong;Wn.Elastic;Wn.Back;Wn.SteppedEase;Wn.Bounce;Wn.Sine;Wn.Expo;Wn.Circ;/*!
 * CSSPlugin 3.13.0
 * https://gsap.com
 *
 * Copyright 2008-2025, GreenSock. All rights reserved.
 * Subject to the terms at https://gsap.com/standard-license
 * @author: Jack Doyle, jack@greensock.com
*/var lb,Mo,ch,Ix,Pl,cb,Dx,AB=function(){return typeof window<"u"},Ya={},wl=180/Math.PI,hh=Math.PI/180,Kc=Math.atan2,hb=1e8,Lx=/([A-Z])/g,RB=/(left|right|width|margin|padding|x)/i,CB=/[\s,\(]\S/,ha={autoAlpha:"opacity,visibility",scale:"scaleX,scaleY",alpha:"opacity"},X0=function(t,n){return n.set(n.t,n.p,Math.round((n.s+n.c*t)*1e4)/1e4+n.u,n)},PB=function(t,n){return n.set(n.t,n.p,t===1?n.e:Math.round((n.s+n.c*t)*1e4)/1e4+n.u,n)},IB=function(t,n){return n.set(n.t,n.p,t?Math.round((n.s+n.c*t)*1e4)/1e4+n.u:n.b,n)},DB=function(t,n){var r=n.s+n.c*t;n.set(n.t,n.p,~~(r+(r<0?-.5:.5))+n.u,n)},Uw=function(t,n){return n.set(n.t,n.p,t?n.e:n.b,n)},Nw=function(t,n){return n.set(n.t,n.p,t!==1?n.b:n.e,n)},LB=function(t,n,r){return t.style[n]=r},UB=function(t,n,r){return t.style.setProperty(n,r)},NB=function(t,n,r){return t._gsap[n]=r},FB=function(t,n,r){return t._gsap.scaleX=t._gsap.scaleY=r},OB=function(t,n,r,o,c){var d=t._gsap;d.scaleX=d.scaleY=r,d.renderTransform(c,d)},BB=function(t,n,r,o,c){var d=t._gsap;d[n]=r,d.renderTransform(c,d)},Pi="transform",Qr=Pi+"Origin",zB=function a(t,n){var r=this,o=this.target,c=o.style,d=o._gsap;if(t in Ya&&c){if(this.tfm=this.tfm||{},t!=="transform")t=ha[t]||t,~t.indexOf(",")?t.split(",").forEach(function(p){return r.tfm[p]=Oa(o,p)}):this.tfm[t]=d.x?d[t]:Oa(o,t),t===Qr&&(this.tfm.zOrigin=d.zOrigin);else return ha.transform.split(",").forEach(function(p){return a.call(r,p,n)});if(this.props.indexOf(Pi)>=0)return;d.svg&&(this.svgo=o.getAttribute("data-svg-origin"),this.props.push(Qr,n,"")),t=Pi}(c||n)&&this.props.push(t,n,c[t])},Fw=function(t){t.translate&&(t.removeProperty("translate"),t.removeProperty("scale"),t.removeProperty("rotate"))},kB=function(){var t=this.props,n=this.target,r=n.style,o=n._gsap,c,d;for(c=0;c<t.length;c+=3)t[c+1]?t[c+1]===2?n[t[c]](t[c+2]):n[t[c]]=t[c+2]:t[c+2]?r[t[c]]=t[c+2]:r.removeProperty(t[c].substr(0,2)==="--"?t[c]:t[c].replace(Lx,"-$1").toLowerCase());if(this.tfm){for(d in this.tfm)o[d]=this.tfm[d];o.svg&&(o.renderTransform(),n.setAttribute("data-svg-origin",this.svgo||"")),c=Dx(),(!c||!c.isStart)&&!r[Pi]&&(Fw(r),o.zOrigin&&r[Qr]&&(r[Qr]+=" "+o.zOrigin+"px",o.zOrigin=0,o.renderTransform()),o.uncache=1)}},Ow=function(t,n){var r={target:t,props:[],revert:kB,save:zB};return t._gsap||es.core.getCache(t),n&&t.style&&t.nodeType&&n.split(",").forEach(function(o){return r.save(o)}),r},Bw,q0=function(t,n){var r=Mo.createElementNS?Mo.createElementNS((n||"http://www.w3.org/1999/xhtml").replace(/^https/,"http"),t):Mo.createElement(t);return r&&r.style?r:Mo.createElement(t)},Cs=function a(t,n,r){var o=getComputedStyle(t);return o[n]||o.getPropertyValue(n.replace(Lx,"-$1").toLowerCase())||o.getPropertyValue(n)||!r&&a(t,Eh(n)||n,1)||""},ub="O,Moz,ms,Ms,Webkit".split(","),Eh=function(t,n,r){var o=n||Pl,c=o.style,d=5;if(t in c&&!r)return t;for(t=t.charAt(0).toUpperCase()+t.substr(1);d--&&!(ub[d]+t in c););return d<0?null:(d===3?"ms":d>=0?ub[d]:"")+t},Y0=function(){AB()&&window.document&&(lb=window,Mo=lb.document,ch=Mo.documentElement,Pl=q0("div")||{style:{}},q0("div"),Pi=Eh(Pi),Qr=Pi+"Origin",Pl.style.cssText="border-width:0;line-height:0;position:absolute;padding:0",Bw=!!Eh("perspective"),Dx=es.core.reverting,Ix=1)},fb=function(t){var n=t.ownerSVGElement,r=q0("svg",n&&n.getAttribute("xmlns")||"http://www.w3.org/2000/svg"),o=t.cloneNode(!0),c;o.style.display="block",r.appendChild(o),ch.appendChild(r);try{c=o.getBBox()}catch{}return r.removeChild(o),ch.removeChild(r),c},db=function(t,n){for(var r=n.length;r--;)if(t.hasAttribute(n[r]))return t.getAttribute(n[r])},zw=function(t){var n,r;try{n=t.getBBox()}catch{n=fb(t),r=1}return n&&(n.width||n.height)||r||(n=fb(t)),n&&!n.width&&!n.x&&!n.y?{x:+db(t,["x","cx","x1"])||0,y:+db(t,["y","cy","y1"])||0,width:0,height:0}:n},kw=function(t){return!!(t.getCTM&&(!t.parentNode||t.ownerSVGElement)&&zw(t))},Vl=function(t,n){if(n){var r=t.style,o;n in Ya&&n!==Qr&&(n=Pi),r.removeProperty?(o=n.substr(0,2),(o==="ms"||n.substr(0,6)==="webkit")&&(n="-"+n),r.removeProperty(o==="--"?n:n.replace(Lx,"-$1").toLowerCase())):r.removeAttribute(n)}},So=function(t,n,r,o,c,d){var p=new jr(t._pt,n,r,0,1,d?Nw:Uw);return t._pt=p,p.b=o,p.e=c,t._props.push(r),p},pb={deg:1,rad:1,turn:1},VB={grid:1,flex:1},No=function a(t,n,r,o){var c=parseFloat(r)||0,d=(r+"").trim().substr((c+"").length)||"px",p=Pl.style,v=RB.test(n),_=t.tagName.toLowerCase()==="svg",x=(_?"client":"offset")+(v?"Width":"Height"),M=100,b=o==="px",E=o==="%",U,L,P,A;if(o===d||!c||pb[o]||pb[d])return c;if(d!=="px"&&!b&&(c=a(t,n,r,"px")),A=t.getCTM&&kw(t),(E||d==="%")&&(Ya[n]||~n.indexOf("adius")))return U=A?t.getBBox()[v?"width":"height"]:t[x],ki(E?c/U*M:c/100*U);if(p[v?"width":"height"]=M+(b?d:o),L=o!=="rem"&&~n.indexOf("adius")||o==="em"&&t.appendChild&&!_?t:t.parentNode,A&&(L=(t.ownerSVGElement||{}).parentNode),(!L||L===Mo||!L.appendChild)&&(L=Mo.body),P=L._gsap,P&&E&&P.width&&v&&P.time===hs.time&&!P.uncache)return ki(c/P.width*M);if(E&&(n==="height"||n==="width")){var X=t.style[n];t.style[n]=M+o,U=t[x],X?t.style[n]=X:Vl(t,n)}else(E||d==="%")&&!VB[Cs(L,"display")]&&(p.position=Cs(t,"position")),L===t&&(p.position="static"),L.appendChild(Pl),U=Pl[x],L.removeChild(Pl),p.position="absolute";return v&&E&&(P=Ul(L),P.time=hs.time,P.width=L[x]),ki(b?U*c/M:U&&c?M/U*c:0)},Oa=function(t,n,r,o){var c;return Ix||Y0(),n in ha&&n!=="transform"&&(n=ha[n],~n.indexOf(",")&&(n=n.split(",")[0])),Ya[n]&&n!=="transform"?(c=Ku(t,o),c=n!=="transformOrigin"?c[n]:c.svg?c.origin:Qp(Cs(t,Qr))+" "+c.zOrigin+"px"):(c=t.style[n],(!c||c==="auto"||o||~(c+"").indexOf("calc("))&&(c=jp[n]&&jp[n](t,n,r)||Cs(t,n)||nw(t,n)||(n==="opacity"?1:0))),r&&!~(c+"").trim().indexOf(" ")?No(t,n,c,r)+r:c},HB=function(t,n,r,o){if(!r||r==="none"){var c=Eh(n,t,1),d=c&&Cs(t,c,1);d&&d!==r?(n=c,r=d):n==="borderColor"&&(r=Cs(t,"borderTopColor"))}var p=new jr(this._pt,t.style,n,0,1,Iw),v=0,_=0,x,M,b,E,U,L,P,A,X,k,O,z;if(p.b=r,p.e=o,r+="",o+="",o.substring(0,6)==="var(--"&&(o=Cs(t,o.substring(4,o.indexOf(")")))),o==="auto"&&(L=t.style[n],t.style[n]=o,o=Cs(t,n)||o,L?t.style[n]=L:Vl(t,n)),x=[r,o],Mw(x),r=x[0],o=x[1],b=r.match(nh)||[],z=o.match(nh)||[],z.length){for(;M=nh.exec(o);)P=M[0],X=o.substring(v,M.index),U?U=(U+1)%5:(X.substr(-5)==="rgba("||X.substr(-5)==="hsla(")&&(U=1),P!==(L=b[_++]||"")&&(E=parseFloat(L)||0,O=L.substr((E+"").length),P.charAt(1)==="="&&(P=lh(E,P)+O),A=parseFloat(P),k=P.substr((A+"").length),v=nh.lastIndex-k.length,k||(k=k||ps.units[n]||O,v===o.length&&(o+=k,p.e+=k)),O!==k&&(E=No(t,n,L,k)||0),p._pt={_next:p._pt,p:X||_===1?X:",",s:E,c:A-E,m:U&&U<4||n==="zIndex"?Math.round:0});p.c=v<o.length?o.substring(v,o.length):""}else p.r=n==="display"&&o==="none"?Nw:Uw;return KE.test(o)&&(p.e=0),this._pt=p,p},mb={top:"0%",bottom:"100%",left:"0%",right:"100%",center:"50%"},GB=function(t){var n=t.split(" "),r=n[0],o=n[1]||"50%";return(r==="top"||r==="bottom"||o==="left"||o==="right")&&(t=r,r=o,o=t),n[0]=mb[r]||r,n[1]=mb[o]||o,n.join(" ")},WB=function(t,n){if(n.tween&&n.tween._time===n.tween._dur){var r=n.t,o=r.style,c=n.u,d=r._gsap,p,v,_;if(c==="all"||c===!0)o.cssText="",v=1;else for(c=c.split(","),_=c.length;--_>-1;)p=c[_],Ya[p]&&(v=1,p=p==="transformOrigin"?Qr:Pi),Vl(r,p);v&&(Vl(r,Pi),d&&(d.svg&&r.removeAttribute("transform"),o.scale=o.rotate=o.translate="none",Ku(r,1),d.uncache=1,Fw(o)))}},jp={clearProps:function(t,n,r,o,c){if(c.data!=="isFromStart"){var d=t._pt=new jr(t._pt,n,r,0,0,WB);return d.u=o,d.pr=-10,d.tween=c,t._props.push(r),1}}},$u=[1,0,0,1,0,0],Vw={},Hw=function(t){return t==="matrix(1, 0, 0, 1, 0, 0)"||t==="none"||!t},_b=function(t){var n=Cs(t,Pi);return Hw(n)?$u:n.substr(7).match($E).map(ki)},Ux=function(t,n){var r=t._gsap||Ul(t),o=t.style,c=_b(t),d,p,v,_;return r.svg&&t.getAttribute("transform")?(v=t.transform.baseVal.consolidate().matrix,c=[v.a,v.b,v.c,v.d,v.e,v.f],c.join(",")==="1,0,0,1,0,0"?$u:c):(c===$u&&!t.offsetParent&&t!==ch&&!r.svg&&(v=o.display,o.display="block",d=t.parentNode,(!d||!t.offsetParent&&!t.getBoundingClientRect().width)&&(_=1,p=t.nextElementSibling,ch.appendChild(t)),c=_b(t),v?o.display=v:Vl(t,"display"),_&&(p?d.insertBefore(t,p):d?d.appendChild(t):ch.removeChild(t))),n&&c.length>6?[c[0],c[1],c[4],c[5],c[12],c[13]]:c)},Z0=function(t,n,r,o,c,d){var p=t._gsap,v=c||Ux(t,!0),_=p.xOrigin||0,x=p.yOrigin||0,M=p.xOffset||0,b=p.yOffset||0,E=v[0],U=v[1],L=v[2],P=v[3],A=v[4],X=v[5],k=n.split(" "),O=parseFloat(k[0])||0,z=parseFloat(k[1])||0,Y,W,te,N;r?v!==$u&&(W=E*P-U*L)&&(te=O*(P/W)+z*(-L/W)+(L*X-P*A)/W,N=O*(-U/W)+z*(E/W)-(E*X-U*A)/W,O=te,z=N):(Y=zw(t),O=Y.x+(~k[0].indexOf("%")?O/100*Y.width:O),z=Y.y+(~(k[1]||k[0]).indexOf("%")?z/100*Y.height:z)),o||o!==!1&&p.smooth?(A=O-_,X=z-x,p.xOffset=M+(A*E+X*L)-A,p.yOffset=b+(A*U+X*P)-X):p.xOffset=p.yOffset=0,p.xOrigin=O,p.yOrigin=z,p.smooth=!!o,p.origin=n,p.originIsAbsolute=!!r,t.style[Qr]="0px 0px",d&&(So(d,p,"xOrigin",_,O),So(d,p,"yOrigin",x,z),So(d,p,"xOffset",M,p.xOffset),So(d,p,"yOffset",b,p.yOffset)),t.setAttribute("data-svg-origin",O+" "+z)},Ku=function(t,n){var r=t._gsap||new ww(t);if("x"in r&&!n&&!r.uncache)return r;var o=t.style,c=r.scaleX<0,d="px",p="deg",v=getComputedStyle(t),_=Cs(t,Qr)||"0",x,M,b,E,U,L,P,A,X,k,O,z,Y,W,te,N,B,ee,Ee,de,be,Ae,Me,me,_e,Fe,He,nt,ut,Yt,Le,et;return x=M=b=L=P=A=X=k=O=0,E=U=1,r.svg=!!(t.getCTM&&kw(t)),v.translate&&((v.translate!=="none"||v.scale!=="none"||v.rotate!=="none")&&(o[Pi]=(v.translate!=="none"?"translate3d("+(v.translate+" 0 0").split(" ").slice(0,3).join(", ")+") ":"")+(v.rotate!=="none"?"rotate("+v.rotate+") ":"")+(v.scale!=="none"?"scale("+v.scale.split(" ").join(",")+") ":"")+(v[Pi]!=="none"?v[Pi]:"")),o.scale=o.rotate=o.translate="none"),W=Ux(t,r.svg),r.svg&&(r.uncache?(_e=t.getBBox(),_=r.xOrigin-_e.x+"px "+(r.yOrigin-_e.y)+"px",me=""):me=!n&&t.getAttribute("data-svg-origin"),Z0(t,me||_,!!me||r.originIsAbsolute,r.smooth!==!1,W)),z=r.xOrigin||0,Y=r.yOrigin||0,W!==$u&&(ee=W[0],Ee=W[1],de=W[2],be=W[3],x=Ae=W[4],M=Me=W[5],W.length===6?(E=Math.sqrt(ee*ee+Ee*Ee),U=Math.sqrt(be*be+de*de),L=ee||Ee?Kc(Ee,ee)*wl:0,X=de||be?Kc(de,be)*wl+L:0,X&&(U*=Math.abs(Math.cos(X*hh))),r.svg&&(x-=z-(z*ee+Y*de),M-=Y-(z*Ee+Y*be))):(et=W[6],Yt=W[7],He=W[8],nt=W[9],ut=W[10],Le=W[11],x=W[12],M=W[13],b=W[14],te=Kc(et,ut),P=te*wl,te&&(N=Math.cos(-te),B=Math.sin(-te),me=Ae*N+He*B,_e=Me*N+nt*B,Fe=et*N+ut*B,He=Ae*-B+He*N,nt=Me*-B+nt*N,ut=et*-B+ut*N,Le=Yt*-B+Le*N,Ae=me,Me=_e,et=Fe),te=Kc(-de,ut),A=te*wl,te&&(N=Math.cos(-te),B=Math.sin(-te),me=ee*N-He*B,_e=Ee*N-nt*B,Fe=de*N-ut*B,Le=be*B+Le*N,ee=me,Ee=_e,de=Fe),te=Kc(Ee,ee),L=te*wl,te&&(N=Math.cos(te),B=Math.sin(te),me=ee*N+Ee*B,_e=Ae*N+Me*B,Ee=Ee*N-ee*B,Me=Me*N-Ae*B,ee=me,Ae=_e),P&&Math.abs(P)+Math.abs(L)>359.9&&(P=L=0,A=180-A),E=ki(Math.sqrt(ee*ee+Ee*Ee+de*de)),U=ki(Math.sqrt(Me*Me+et*et)),te=Kc(Ae,Me),X=Math.abs(te)>2e-4?te*wl:0,O=Le?1/(Le<0?-Le:Le):0),r.svg&&(me=t.getAttribute("transform"),r.forceCSS=t.setAttribute("transform","")||!Hw(Cs(t,Pi)),me&&t.setAttribute("transform",me))),Math.abs(X)>90&&Math.abs(X)<270&&(c?(E*=-1,X+=L<=0?180:-180,L+=L<=0?180:-180):(U*=-1,X+=X<=0?180:-180)),n=n||r.uncache,r.x=x-((r.xPercent=x&&(!n&&r.xPercent||(Math.round(t.offsetWidth/2)===Math.round(-x)?-50:0)))?t.offsetWidth*r.xPercent/100:0)+d,r.y=M-((r.yPercent=M&&(!n&&r.yPercent||(Math.round(t.offsetHeight/2)===Math.round(-M)?-50:0)))?t.offsetHeight*r.yPercent/100:0)+d,r.z=b+d,r.scaleX=ki(E),r.scaleY=ki(U),r.rotation=ki(L)+p,r.rotationX=ki(P)+p,r.rotationY=ki(A)+p,r.skewX=X+p,r.skewY=k+p,r.transformPerspective=O+d,(r.zOrigin=parseFloat(_.split(" ")[2])||!n&&r.zOrigin||0)&&(o[Qr]=Qp(_)),r.xOffset=r.yOffset=0,r.force3D=ps.force3D,r.renderTransform=r.svg?qB:Bw?Gw:XB,r.uncache=0,r},Qp=function(t){return(t=t.split(" "))[0]+" "+t[1]},Cg=function(t,n,r){var o=br(n);return ki(parseFloat(n)+parseFloat(No(t,"x",r+"px",o)))+o},XB=function(t,n){n.z="0px",n.rotationY=n.rotationX="0deg",n.force3D=0,Gw(t,n)},Sl="0deg",Au="0px",bl=") ",Gw=function(t,n){var r=n||this,o=r.xPercent,c=r.yPercent,d=r.x,p=r.y,v=r.z,_=r.rotation,x=r.rotationY,M=r.rotationX,b=r.skewX,E=r.skewY,U=r.scaleX,L=r.scaleY,P=r.transformPerspective,A=r.force3D,X=r.target,k=r.zOrigin,O="",z=A==="auto"&&t&&t!==1||A===!0;if(k&&(M!==Sl||x!==Sl)){var Y=parseFloat(x)*hh,W=Math.sin(Y),te=Math.cos(Y),N;Y=parseFloat(M)*hh,N=Math.cos(Y),d=Cg(X,d,W*N*-k),p=Cg(X,p,-Math.sin(Y)*-k),v=Cg(X,v,te*N*-k+k)}P!==Au&&(O+="perspective("+P+bl),(o||c)&&(O+="translate("+o+"%, "+c+"%) "),(z||d!==Au||p!==Au||v!==Au)&&(O+=v!==Au||z?"translate3d("+d+", "+p+", "+v+") ":"translate("+d+", "+p+bl),_!==Sl&&(O+="rotate("+_+bl),x!==Sl&&(O+="rotateY("+x+bl),M!==Sl&&(O+="rotateX("+M+bl),(b!==Sl||E!==Sl)&&(O+="skew("+b+", "+E+bl),(U!==1||L!==1)&&(O+="scale("+U+", "+L+bl),X.style[Pi]=O||"translate(0, 0)"},qB=function(t,n){var r=n||this,o=r.xPercent,c=r.yPercent,d=r.x,p=r.y,v=r.rotation,_=r.skewX,x=r.skewY,M=r.scaleX,b=r.scaleY,E=r.target,U=r.xOrigin,L=r.yOrigin,P=r.xOffset,A=r.yOffset,X=r.forceCSS,k=parseFloat(d),O=parseFloat(p),z,Y,W,te,N;v=parseFloat(v),_=parseFloat(_),x=parseFloat(x),x&&(x=parseFloat(x),_+=x,v+=x),v||_?(v*=hh,_*=hh,z=Math.cos(v)*M,Y=Math.sin(v)*M,W=Math.sin(v-_)*-b,te=Math.cos(v-_)*b,_&&(x*=hh,N=Math.tan(_-x),N=Math.sqrt(1+N*N),W*=N,te*=N,x&&(N=Math.tan(x),N=Math.sqrt(1+N*N),z*=N,Y*=N)),z=ki(z),Y=ki(Y),W=ki(W),te=ki(te)):(z=M,te=b,Y=W=0),(k&&!~(d+"").indexOf("px")||O&&!~(p+"").indexOf("px"))&&(k=No(E,"x",d,"px"),O=No(E,"y",p,"px")),(U||L||P||A)&&(k=ki(k+U-(U*z+L*W)+P),O=ki(O+L-(U*Y+L*te)+A)),(o||c)&&(N=E.getBBox(),k=ki(k+o/100*N.width),O=ki(O+c/100*N.height)),N="matrix("+z+","+Y+","+W+","+te+","+k+","+O+")",E.setAttribute("transform",N),X&&(E.style[Pi]=N)},YB=function(t,n,r,o,c){var d=360,p=lr(c),v=parseFloat(c)*(p&&~c.indexOf("rad")?wl:1),_=v-o,x=o+_+"deg",M,b;return p&&(M=c.split("_")[1],M==="short"&&(_%=d,_!==_%(d/2)&&(_+=_<0?d:-360)),M==="cw"&&_<0?_=(_+d*hb)%d-~~(_/d)*d:M==="ccw"&&_>0&&(_=(_-d*hb)%d-~~(_/d)*d)),t._pt=b=new jr(t._pt,n,r,o,_,PB),b.e=x,b.u="deg",t._props.push(r),b},gb=function(t,n){for(var r in n)t[r]=n[r];return t},ZB=function(t,n,r){var o=gb({},r._gsap),c="perspective,force3D,transformOrigin,svgOrigin",d=r.style,p,v,_,x,M,b,E,U;o.svg?(_=r.getAttribute("transform"),r.setAttribute("transform",""),d[Pi]=n,p=Ku(r,1),Vl(r,Pi),r.setAttribute("transform",_)):(_=getComputedStyle(r)[Pi],d[Pi]=n,p=Ku(r,1),d[Pi]=_);for(v in Ya)_=o[v],x=p[v],_!==x&&c.indexOf(v)<0&&(E=br(_),U=br(x),M=E!==U?No(r,v,_,U):parseFloat(_),b=parseFloat(x),t._pt=new jr(t._pt,p,v,M,b-M,X0),t._pt.u=U||0,t._props.push(v));gb(p,o)};Jr("padding,margin,Width,Radius",function(a,t){var n="Top",r="Right",o="Bottom",c="Left",d=(t<3?[n,r,o,c]:[n+c,n+r,o+r,o+c]).map(function(p){return t<2?a+p:"border"+p+a});jp[t>1?"border"+a:a]=function(p,v,_,x,M){var b,E;if(arguments.length<4)return b=d.map(function(U){return Oa(p,U,_)}),E=b.join(" "),E.split(b[0]).length===5?b[0]:E;b=(x+"").split(" "),E={},d.forEach(function(U,L){return E[U]=b[L]=b[L]||b[(L-1)/2|0]}),p.init(v,E,M)}});var Ww={name:"css",register:Y0,targetTest:function(t){return t.style&&t.nodeType},init:function(t,n,r,o,c){var d=this._props,p=t.style,v=r.vars.startAt,_,x,M,b,E,U,L,P,A,X,k,O,z,Y,W,te;Ix||Y0(),this.styles=this.styles||Ow(t),te=this.styles.props,this.tween=r;for(L in n)if(L!=="autoRound"&&(x=n[L],!(cs[L]&&Tw(L,n,r,o,t,c)))){if(E=typeof x,U=jp[L],E==="function"&&(x=x.call(r,o,t,c),E=typeof x),E==="string"&&~x.indexOf("random(")&&(x=qu(x)),U)U(this,t,L,x,r)&&(W=1);else if(L.substr(0,2)==="--")_=(getComputedStyle(t).getPropertyValue(L)+"").trim(),x+="",Ro.lastIndex=0,Ro.test(_)||(P=br(_),A=br(x)),A?P!==A&&(_=No(t,L,_,A)+A):P&&(x+=P),this.add(p,"setProperty",_,x,o,c,0,0,L),d.push(L),te.push(L,0,p[L]);else if(E!=="undefined"){if(v&&L in v?(_=typeof v[L]=="function"?v[L].call(r,o,t,c):v[L],lr(_)&&~_.indexOf("random(")&&(_=qu(_)),br(_+"")||_==="auto"||(_+=ps.units[L]||br(Oa(t,L))||""),(_+"").charAt(1)==="="&&(_=Oa(t,L))):_=Oa(t,L),b=parseFloat(_),X=E==="string"&&x.charAt(1)==="="&&x.substr(0,2),X&&(x=x.substr(2)),M=parseFloat(x),L in ha&&(L==="autoAlpha"&&(b===1&&Oa(t,"visibility")==="hidden"&&M&&(b=0),te.push("visibility",0,p.visibility),So(this,p,"visibility",b?"inherit":"hidden",M?"inherit":"hidden",!M)),L!=="scale"&&L!=="transform"&&(L=ha[L],~L.indexOf(",")&&(L=L.split(",")[0]))),k=L in Ya,k){if(this.styles.save(L),E==="string"&&x.substring(0,6)==="var(--"&&(x=Cs(t,x.substring(4,x.indexOf(")"))),M=parseFloat(x)),O||(z=t._gsap,z.renderTransform&&!n.parseTransform||Ku(t,n.parseTransform),Y=n.smoothOrigin!==!1&&z.smooth,O=this._pt=new jr(this._pt,p,Pi,0,1,z.renderTransform,z,0,-1),O.dep=1),L==="scale")this._pt=new jr(this._pt,z,"scaleY",z.scaleY,(X?lh(z.scaleY,X+M):M)-z.scaleY||0,X0),this._pt.u=0,d.push("scaleY",L),L+="X";else if(L==="transformOrigin"){te.push(Qr,0,p[Qr]),x=GB(x),z.svg?Z0(t,x,0,Y,0,this):(A=parseFloat(x.split(" ")[2])||0,A!==z.zOrigin&&So(this,z,"zOrigin",z.zOrigin,A),So(this,p,L,Qp(_),Qp(x)));continue}else if(L==="svgOrigin"){Z0(t,x,1,Y,0,this);continue}else if(L in Vw){YB(this,z,L,b,X?lh(b,X+x):x);continue}else if(L==="smoothOrigin"){So(this,z,"smooth",z.smooth,x);continue}else if(L==="force3D"){z[L]=x;continue}else if(L==="transform"){ZB(this,x,t);continue}}else L in p||(L=Eh(L)||L);if(k||(M||M===0)&&(b||b===0)&&!CB.test(x)&&L in p)P=(_+"").substr((b+"").length),M||(M=0),A=br(x)||(L in ps.units?ps.units[L]:P),P!==A&&(b=No(t,L,_,A)),this._pt=new jr(this._pt,k?z:p,L,b,(X?lh(b,X+M):M)-b,!k&&(A==="px"||L==="zIndex")&&n.autoRound!==!1?DB:X0),this._pt.u=A||0,P!==A&&A!=="%"&&(this._pt.b=_,this._pt.r=IB);else if(L in p)HB.call(this,t,L,_,X?X+x:x);else if(L in t)this.add(t,L,_||t[L],X?X+x:x,o,c);else if(L!=="parseTransform"){Mx(L,x);continue}k||(L in p?te.push(L,0,p[L]):typeof t[L]=="function"?te.push(L,2,t[L]()):te.push(L,1,_||t[L])),d.push(L)}}W&&Dw(this)},render:function(t,n){if(n.tween._time||!Dx())for(var r=n._pt;r;)r.r(t,r.d),r=r._next;else n.styles.revert()},get:Oa,aliases:ha,getSetter:function(t,n,r){var o=ha[n];return o&&o.indexOf(",")<0&&(n=o),n in Ya&&n!==Qr&&(t._gsap.x||Oa(t,"x"))?r&&cb===r?n==="scale"?FB:NB:(cb=r||{})&&(n==="scale"?OB:BB):t.style&&!xx(t.style[n])?LB:~n.indexOf("-")?UB:Cx(t,n)},core:{_removeProperty:Vl,_getMatrix:Ux}};es.utils.checkPrefix=Eh;es.core.getStyleSaver=Ow;(function(a,t,n,r){var o=Jr(a+","+t+","+n,function(c){Ya[c]=1});Jr(t,function(c){ps.units[c]="deg",Vw[c]=1}),ha[o[13]]=a+","+t,Jr(r,function(c){var d=c.split(":");ha[d[1]]=o[d[0]]})})("x,y,z,scale,scaleX,scaleY,xPercent,yPercent","rotation,rotationX,rotationY,skewX,skewY","transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective","0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY");Jr("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective",function(a){ps.units[a]="px"});es.registerPlugin(Ww);var Op=es.registerPlugin(Ww)||es;Op.core.Tween;function $B(a){throw new Error('Could not dynamically require "'+a+'". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.')}var Du={exports:{}},V={};/**
 * @license
 * Copyright 2010-2024 Three.js Authors
 * SPDX-License-Identifier: MIT
 */var xb;function KB(){if(xb)return V;xb=1;const a="172",t={LEFT:0,MIDDLE:1,RIGHT:2,ROTATE:0,DOLLY:1,PAN:2},n={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3},r=0,o=1,c=2,d=3,p=0,v=1,_=2,x=3,M=0,b=1,E=2,U=0,L=1,P=2,A=3,X=4,k=5,O=100,z=101,Y=102,W=103,te=104,N=200,B=201,ee=202,Ee=203,de=204,be=205,Ae=206,Me=207,me=208,_e=209,Fe=210,He=211,nt=212,ut=213,Yt=214,Le=0,et=1,Pt=2,lt=3,$t=4,sn=5,gn=6,ei=7,vn=0,pn=1,fe=2,Ii=0,Nn=1,Fn=2,Qt=3,ui=4,Kt=5,ae=6,K=7,we="attached",Ye="detached",je=300,Ve=301,Ot=302,_t=303,Tt=304,In=306,it=1e3,xt=1001,tn=1002,kt=1003,Nt=1004,zn=1004,mn=1005,fi=1005,pe=1006,mt=1007,Be=1007,Ge=1008,wt=1008,ft=1009,yn=1010,vi=1011,Ai=1012,Xn=1013,Bi=1014,Si=1015,ma=1016,Oo=1017,gs=1018,Ds=1020,$l=35902,Kl=1021,Za=1022,tr=1023,$a=1024,Jl=1025,Ks=1026,_a=1027,jl=1028,Bo=1029,Dh=1030,Ql=1031,fm=1032,J=1033,ge=33776,Re=33777,Ce=33778,ve=33779,tt=35840,gt=35841,At=35842,Lt=35843,cn=36196,hn=37492,Jt=37496,Un=37808,Vn=37809,Mi=37810,gi=37811,On=37812,en=37813,Di=37814,Hn=37815,pr=37816,Ls=37817,nr=37818,Js=37819,oi=37820,cr=37821,ir=36492,Hi=36494,$i=36495,zo=36283,xs=36284,gf=36285,xf=36286,Hx=2200,Gx=2201,Wx=2202,Lh=2300,vf=2301,yf=2302,ko=2400,Vo=2401,Uh=2402,Mf=2500,dm=2501,TT=0,AT=1,RT=2,Xx=3200,qx=3201,CT=3202,PT=3203,Ka=0,Yx=1,ga="",zr="srgb",Ho="srgb-linear",Nh="linear",li="srgb",IT=0,Go=7680,DT=7681,LT=7682,UT=7683,NT=34055,FT=34056,OT=5386,BT=512,zT=513,kT=514,VT=515,HT=516,GT=517,WT=518,pm=519,Zx=512,$x=513,Kx=514,mm=515,Jx=516,jx=517,Qx=518,ev=519,Fh=35044,XT=35048,qT=35040,YT=35045,ZT=35049,$T=35041,KT=35046,JT=35050,jT=35042,QT="100",_m="300 es",Us=2e3,Oh=2001;class js{addEventListener(e,i){this._listeners===void 0&&(this._listeners={});const s=this._listeners;s[e]===void 0&&(s[e]=[]),s[e].indexOf(i)===-1&&s[e].push(i)}hasEventListener(e,i){if(this._listeners===void 0)return!1;const s=this._listeners;return s[e]!==void 0&&s[e].indexOf(i)!==-1}removeEventListener(e,i){if(this._listeners===void 0)return;const l=this._listeners[e];if(l!==void 0){const h=l.indexOf(i);h!==-1&&l.splice(h,1)}}dispatchEvent(e){if(this._listeners===void 0)return;const s=this._listeners[e.type];if(s!==void 0){e.target=this;const l=s.slice(0);for(let h=0,f=l.length;h<f;h++)l[h].call(this,e);e.target=null}}}const mr=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"];let tv=1234567;const Wo=Math.PI/180,ec=180/Math.PI;function ts(){const u=Math.random()*4294967295|0,e=Math.random()*4294967295|0,i=Math.random()*4294967295|0,s=Math.random()*4294967295|0;return(mr[u&255]+mr[u>>8&255]+mr[u>>16&255]+mr[u>>24&255]+"-"+mr[e&255]+mr[e>>8&255]+"-"+mr[e>>16&15|64]+mr[e>>24&255]+"-"+mr[i&63|128]+mr[i>>8&255]+"-"+mr[i>>16&255]+mr[i>>24&255]+mr[s&255]+mr[s>>8&255]+mr[s>>16&255]+mr[s>>24&255]).toLowerCase()}function bn(u,e,i){return Math.max(e,Math.min(i,u))}function gm(u,e){return(u%e+e)%e}function eA(u,e,i,s,l){return s+(u-e)*(l-s)/(i-e)}function tA(u,e,i){return u!==e?(i-u)/(e-u):0}function Bh(u,e,i){return(1-i)*u+i*e}function nA(u,e,i,s){return Bh(u,e,1-Math.exp(-i*s))}function iA(u,e=1){return e-Math.abs(gm(u,e*2)-e)}function rA(u,e,i){return u<=e?0:u>=i?1:(u=(u-e)/(i-e),u*u*(3-2*u))}function sA(u,e,i){return u<=e?0:u>=i?1:(u=(u-e)/(i-e),u*u*u*(u*(u*6-15)+10))}function aA(u,e){return u+Math.floor(Math.random()*(e-u+1))}function oA(u,e){return u+Math.random()*(e-u)}function lA(u){return u*(.5-Math.random())}function cA(u){u!==void 0&&(tv=u);let e=tv+=1831565813;return e=Math.imul(e^e>>>15,e|1),e^=e+Math.imul(e^e>>>7,e|61),((e^e>>>14)>>>0)/4294967296}function hA(u){return u*Wo}function uA(u){return u*ec}function fA(u){return(u&u-1)===0&&u!==0}function dA(u){return Math.pow(2,Math.ceil(Math.log(u)/Math.LN2))}function pA(u){return Math.pow(2,Math.floor(Math.log(u)/Math.LN2))}function mA(u,e,i,s,l){const h=Math.cos,f=Math.sin,m=h(i/2),g=f(i/2),y=h((e+s)/2),S=f((e+s)/2),w=h((e-s)/2),T=f((e-s)/2),R=h((s-e)/2),I=f((s-e)/2);switch(l){case"XYX":u.set(m*S,g*w,g*T,m*y);break;case"YZY":u.set(g*T,m*S,g*w,m*y);break;case"ZXZ":u.set(g*w,g*T,m*S,m*y);break;case"XZX":u.set(m*S,g*I,g*R,m*y);break;case"YXY":u.set(g*R,m*S,g*I,m*y);break;case"ZYZ":u.set(g*I,g*R,m*S,m*y);break;default:console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: "+l)}}function Cr(u,e){switch(e.constructor){case Float32Array:return u;case Uint32Array:return u/4294967295;case Uint16Array:return u/65535;case Uint8Array:return u/255;case Int32Array:return Math.max(u/2147483647,-1);case Int16Array:return Math.max(u/32767,-1);case Int8Array:return Math.max(u/127,-1);default:throw new Error("Invalid component type.")}}function Tn(u,e){switch(e.constructor){case Float32Array:return u;case Uint32Array:return Math.round(u*4294967295);case Uint16Array:return Math.round(u*65535);case Uint8Array:return Math.round(u*255);case Int32Array:return Math.round(u*2147483647);case Int16Array:return Math.round(u*32767);case Int8Array:return Math.round(u*127);default:throw new Error("Invalid component type.")}}const _A={DEG2RAD:Wo,RAD2DEG:ec,generateUUID:ts,clamp:bn,euclideanModulo:gm,mapLinear:eA,inverseLerp:tA,lerp:Bh,damp:nA,pingpong:iA,smoothstep:rA,smootherstep:sA,randInt:aA,randFloat:oA,randFloatSpread:lA,seededRandom:cA,degToRad:hA,radToDeg:uA,isPowerOfTwo:fA,ceilPowerOfTwo:dA,floorPowerOfTwo:pA,setQuaternionFromProperEuler:mA,normalize:Tn,denormalize:Cr};class Ze{constructor(e=0,i=0){Ze.prototype.isVector2=!0,this.x=e,this.y=i}get width(){return this.x}set width(e){this.x=e}get height(){return this.y}set height(e){this.y=e}set(e,i){return this.x=e,this.y=i,this}setScalar(e){return this.x=e,this.y=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setComponent(e,i){switch(e){case 0:this.x=i;break;case 1:this.y=i;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y)}copy(e){return this.x=e.x,this.y=e.y,this}add(e){return this.x+=e.x,this.y+=e.y,this}addScalar(e){return this.x+=e,this.y+=e,this}addVectors(e,i){return this.x=e.x+i.x,this.y=e.y+i.y,this}addScaledVector(e,i){return this.x+=e.x*i,this.y+=e.y*i,this}sub(e){return this.x-=e.x,this.y-=e.y,this}subScalar(e){return this.x-=e,this.y-=e,this}subVectors(e,i){return this.x=e.x-i.x,this.y=e.y-i.y,this}multiply(e){return this.x*=e.x,this.y*=e.y,this}multiplyScalar(e){return this.x*=e,this.y*=e,this}divide(e){return this.x/=e.x,this.y/=e.y,this}divideScalar(e){return this.multiplyScalar(1/e)}applyMatrix3(e){const i=this.x,s=this.y,l=e.elements;return this.x=l[0]*i+l[3]*s+l[6],this.y=l[1]*i+l[4]*s+l[7],this}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this}clamp(e,i){return this.x=bn(this.x,e.x,i.x),this.y=bn(this.y,e.y,i.y),this}clampScalar(e,i){return this.x=bn(this.x,e,i),this.y=bn(this.y,e,i),this}clampLength(e,i){const s=this.length();return this.divideScalar(s||1).multiplyScalar(bn(s,e,i))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(e){return this.x*e.x+this.y*e.y}cross(e){return this.x*e.y-this.y*e.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}angleTo(e){const i=Math.sqrt(this.lengthSq()*e.lengthSq());if(i===0)return Math.PI/2;const s=this.dot(e)/i;return Math.acos(bn(s,-1,1))}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const i=this.x-e.x,s=this.y-e.y;return i*i+s*s}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,i){return this.x+=(e.x-this.x)*i,this.y+=(e.y-this.y)*i,this}lerpVectors(e,i,s){return this.x=e.x+(i.x-e.x)*s,this.y=e.y+(i.y-e.y)*s,this}equals(e){return e.x===this.x&&e.y===this.y}fromArray(e,i=0){return this.x=e[i],this.y=e[i+1],this}toArray(e=[],i=0){return e[i]=this.x,e[i+1]=this.y,e}fromBufferAttribute(e,i){return this.x=e.getX(i),this.y=e.getY(i),this}rotateAround(e,i){const s=Math.cos(i),l=Math.sin(i),h=this.x-e.x,f=this.y-e.y;return this.x=h*s-f*l+e.x,this.y=h*l+f*s+e.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}}class wn{constructor(e,i,s,l,h,f,m,g,y){wn.prototype.isMatrix3=!0,this.elements=[1,0,0,0,1,0,0,0,1],e!==void 0&&this.set(e,i,s,l,h,f,m,g,y)}set(e,i,s,l,h,f,m,g,y){const S=this.elements;return S[0]=e,S[1]=l,S[2]=m,S[3]=i,S[4]=h,S[5]=g,S[6]=s,S[7]=f,S[8]=y,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(e){const i=this.elements,s=e.elements;return i[0]=s[0],i[1]=s[1],i[2]=s[2],i[3]=s[3],i[4]=s[4],i[5]=s[5],i[6]=s[6],i[7]=s[7],i[8]=s[8],this}extractBasis(e,i,s){return e.setFromMatrix3Column(this,0),i.setFromMatrix3Column(this,1),s.setFromMatrix3Column(this,2),this}setFromMatrix4(e){const i=e.elements;return this.set(i[0],i[4],i[8],i[1],i[5],i[9],i[2],i[6],i[10]),this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,i){const s=e.elements,l=i.elements,h=this.elements,f=s[0],m=s[3],g=s[6],y=s[1],S=s[4],w=s[7],T=s[2],R=s[5],I=s[8],F=l[0],D=l[3],C=l[6],q=l[1],G=l[4],H=l[7],le=l[2],ne=l[5],oe=l[8];return h[0]=f*F+m*q+g*le,h[3]=f*D+m*G+g*ne,h[6]=f*C+m*H+g*oe,h[1]=y*F+S*q+w*le,h[4]=y*D+S*G+w*ne,h[7]=y*C+S*H+w*oe,h[2]=T*F+R*q+I*le,h[5]=T*D+R*G+I*ne,h[8]=T*C+R*H+I*oe,this}multiplyScalar(e){const i=this.elements;return i[0]*=e,i[3]*=e,i[6]*=e,i[1]*=e,i[4]*=e,i[7]*=e,i[2]*=e,i[5]*=e,i[8]*=e,this}determinant(){const e=this.elements,i=e[0],s=e[1],l=e[2],h=e[3],f=e[4],m=e[5],g=e[6],y=e[7],S=e[8];return i*f*S-i*m*y-s*h*S+s*m*g+l*h*y-l*f*g}invert(){const e=this.elements,i=e[0],s=e[1],l=e[2],h=e[3],f=e[4],m=e[5],g=e[6],y=e[7],S=e[8],w=S*f-m*y,T=m*g-S*h,R=y*h-f*g,I=i*w+s*T+l*R;if(I===0)return this.set(0,0,0,0,0,0,0,0,0);const F=1/I;return e[0]=w*F,e[1]=(l*y-S*s)*F,e[2]=(m*s-l*f)*F,e[3]=T*F,e[4]=(S*i-l*g)*F,e[5]=(l*h-m*i)*F,e[6]=R*F,e[7]=(s*g-y*i)*F,e[8]=(f*i-s*h)*F,this}transpose(){let e;const i=this.elements;return e=i[1],i[1]=i[3],i[3]=e,e=i[2],i[2]=i[6],i[6]=e,e=i[5],i[5]=i[7],i[7]=e,this}getNormalMatrix(e){return this.setFromMatrix4(e).invert().transpose()}transposeIntoArray(e){const i=this.elements;return e[0]=i[0],e[1]=i[3],e[2]=i[6],e[3]=i[1],e[4]=i[4],e[5]=i[7],e[6]=i[2],e[7]=i[5],e[8]=i[8],this}setUvTransform(e,i,s,l,h,f,m){const g=Math.cos(h),y=Math.sin(h);return this.set(s*g,s*y,-s*(g*f+y*m)+f+e,-l*y,l*g,-l*(-y*f+g*m)+m+i,0,0,1),this}scale(e,i){return this.premultiply(xm.makeScale(e,i)),this}rotate(e){return this.premultiply(xm.makeRotation(-e)),this}translate(e,i){return this.premultiply(xm.makeTranslation(e,i)),this}makeTranslation(e,i){return e.isVector2?this.set(1,0,e.x,0,1,e.y,0,0,1):this.set(1,0,e,0,1,i,0,0,1),this}makeRotation(e){const i=Math.cos(e),s=Math.sin(e);return this.set(i,-s,0,s,i,0,0,0,1),this}makeScale(e,i){return this.set(e,0,0,0,i,0,0,0,1),this}equals(e){const i=this.elements,s=e.elements;for(let l=0;l<9;l++)if(i[l]!==s[l])return!1;return!0}fromArray(e,i=0){for(let s=0;s<9;s++)this.elements[s]=e[s+i];return this}toArray(e=[],i=0){const s=this.elements;return e[i]=s[0],e[i+1]=s[1],e[i+2]=s[2],e[i+3]=s[3],e[i+4]=s[4],e[i+5]=s[5],e[i+6]=s[6],e[i+7]=s[7],e[i+8]=s[8],e}clone(){return new this.constructor().fromArray(this.elements)}}const xm=new wn;function nv(u){for(let e=u.length-1;e>=0;--e)if(u[e]>=65535)return!0;return!1}const gA={Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array};function tc(u,e){return new gA[u](e)}function zh(u){return document.createElementNS("http://www.w3.org/1999/xhtml",u)}function iv(){const u=zh("canvas");return u.style.display="block",u}const rv={};function nc(u){u in rv||(rv[u]=!0,console.warn(u))}function xA(u,e,i){return new Promise(function(s,l){function h(){switch(u.clientWaitSync(e,u.SYNC_FLUSH_COMMANDS_BIT,0)){case u.WAIT_FAILED:l();break;case u.TIMEOUT_EXPIRED:setTimeout(h,i);break;default:s()}}setTimeout(h,i)})}function vA(u){const e=u.elements;e[2]=.5*e[2]+.5*e[3],e[6]=.5*e[6]+.5*e[7],e[10]=.5*e[10]+.5*e[11],e[14]=.5*e[14]+.5*e[15]}function yA(u){const e=u.elements;e[11]===-1?(e[10]=-e[10]-1,e[14]=-e[14]):(e[10]=-e[10],e[14]=-e[14]+1)}const sv=new wn().set(.4123908,.3575843,.1804808,.212639,.7151687,.0721923,.0193308,.1191948,.9505322),av=new wn().set(3.2409699,-1.5373832,-.4986108,-.9692436,1.8759675,.0415551,.0556301,-.203977,1.0569715);function MA(){const u={enabled:!0,workingColorSpace:Ho,spaces:{},convert:function(l,h,f){return this.enabled===!1||h===f||!h||!f||(this.spaces[h].transfer===li&&(l.r=xa(l.r),l.g=xa(l.g),l.b=xa(l.b)),this.spaces[h].primaries!==this.spaces[f].primaries&&(l.applyMatrix3(this.spaces[h].toXYZ),l.applyMatrix3(this.spaces[f].fromXYZ)),this.spaces[f].transfer===li&&(l.r=ic(l.r),l.g=ic(l.g),l.b=ic(l.b))),l},fromWorkingColorSpace:function(l,h){return this.convert(l,this.workingColorSpace,h)},toWorkingColorSpace:function(l,h){return this.convert(l,h,this.workingColorSpace)},getPrimaries:function(l){return this.spaces[l].primaries},getTransfer:function(l){return l===ga?Nh:this.spaces[l].transfer},getLuminanceCoefficients:function(l,h=this.workingColorSpace){return l.fromArray(this.spaces[h].luminanceCoefficients)},define:function(l){Object.assign(this.spaces,l)},_getMatrix:function(l,h,f){return l.copy(this.spaces[h].toXYZ).multiply(this.spaces[f].fromXYZ)},_getDrawingBufferColorSpace:function(l){return this.spaces[l].outputColorSpaceConfig.drawingBufferColorSpace},_getUnpackColorSpace:function(l=this.workingColorSpace){return this.spaces[l].workingColorSpaceConfig.unpackColorSpace}},e=[.64,.33,.3,.6,.15,.06],i=[.2126,.7152,.0722],s=[.3127,.329];return u.define({[Ho]:{primaries:e,whitePoint:s,transfer:Nh,toXYZ:sv,fromXYZ:av,luminanceCoefficients:i,workingColorSpaceConfig:{unpackColorSpace:zr},outputColorSpaceConfig:{drawingBufferColorSpace:zr}},[zr]:{primaries:e,whitePoint:s,transfer:li,toXYZ:sv,fromXYZ:av,luminanceCoefficients:i,outputColorSpaceConfig:{drawingBufferColorSpace:zr}}}),u}const qn=MA();function xa(u){return u<.04045?u*.0773993808:Math.pow(u*.9478672986+.0521327014,2.4)}function ic(u){return u<.0031308?u*12.92:1.055*Math.pow(u,.41666)-.055}let rc;class ov{static getDataURL(e){if(/^data:/i.test(e.src)||typeof HTMLCanvasElement>"u")return e.src;let i;if(e instanceof HTMLCanvasElement)i=e;else{rc===void 0&&(rc=zh("canvas")),rc.width=e.width,rc.height=e.height;const s=rc.getContext("2d");e instanceof ImageData?s.putImageData(e,0,0):s.drawImage(e,0,0,e.width,e.height),i=rc}return i.width>2048||i.height>2048?(console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",e),i.toDataURL("image/jpeg",.6)):i.toDataURL("image/png")}static sRGBToLinear(e){if(typeof HTMLImageElement<"u"&&e instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&e instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&e instanceof ImageBitmap){const i=zh("canvas");i.width=e.width,i.height=e.height;const s=i.getContext("2d");s.drawImage(e,0,0,e.width,e.height);const l=s.getImageData(0,0,e.width,e.height),h=l.data;for(let f=0;f<h.length;f++)h[f]=xa(h[f]/255)*255;return s.putImageData(l,0,0),i}else if(e.data){const i=e.data.slice(0);for(let s=0;s<i.length;s++)i instanceof Uint8Array||i instanceof Uint8ClampedArray?i[s]=Math.floor(xa(i[s]/255)*255):i[s]=xa(i[s]);return{data:i,width:e.width,height:e.height}}else return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),e}}let SA=0;class Xo{constructor(e=null){this.isSource=!0,Object.defineProperty(this,"id",{value:SA++}),this.uuid=ts(),this.data=e,this.dataReady=!0,this.version=0}set needsUpdate(e){e===!0&&this.version++}toJSON(e){const i=e===void 0||typeof e=="string";if(!i&&e.images[this.uuid]!==void 0)return e.images[this.uuid];const s={uuid:this.uuid,url:""},l=this.data;if(l!==null){let h;if(Array.isArray(l)){h=[];for(let f=0,m=l.length;f<m;f++)l[f].isDataTexture?h.push(vm(l[f].image)):h.push(vm(l[f]))}else h=vm(l);s.url=h}return i||(e.images[this.uuid]=s),s}}function vm(u){return typeof HTMLImageElement<"u"&&u instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&u instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&u instanceof ImageBitmap?ov.getDataURL(u):u.data?{data:Array.from(u.data),width:u.width,height:u.height,type:u.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}let bA=0;class Li extends js{constructor(e=Li.DEFAULT_IMAGE,i=Li.DEFAULT_MAPPING,s=xt,l=xt,h=pe,f=Ge,m=tr,g=ft,y=Li.DEFAULT_ANISOTROPY,S=ga){super(),this.isTexture=!0,Object.defineProperty(this,"id",{value:bA++}),this.uuid=ts(),this.name="",this.source=new Xo(e),this.mipmaps=[],this.mapping=i,this.channel=0,this.wrapS=s,this.wrapT=l,this.magFilter=h,this.minFilter=f,this.anisotropy=y,this.format=m,this.internalFormat=null,this.type=g,this.offset=new Ze(0,0),this.repeat=new Ze(1,1),this.center=new Ze(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new wn,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.colorSpace=S,this.userData={},this.version=0,this.onUpdate=null,this.renderTarget=null,this.isRenderTargetTexture=!1,this.pmremVersion=0}get image(){return this.source.data}set image(e=null){this.source.data=e}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return new this.constructor().copy(this)}copy(e){return this.name=e.name,this.source=e.source,this.mipmaps=e.mipmaps.slice(0),this.mapping=e.mapping,this.channel=e.channel,this.wrapS=e.wrapS,this.wrapT=e.wrapT,this.magFilter=e.magFilter,this.minFilter=e.minFilter,this.anisotropy=e.anisotropy,this.format=e.format,this.internalFormat=e.internalFormat,this.type=e.type,this.offset.copy(e.offset),this.repeat.copy(e.repeat),this.center.copy(e.center),this.rotation=e.rotation,this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrix.copy(e.matrix),this.generateMipmaps=e.generateMipmaps,this.premultiplyAlpha=e.premultiplyAlpha,this.flipY=e.flipY,this.unpackAlignment=e.unpackAlignment,this.colorSpace=e.colorSpace,this.renderTarget=e.renderTarget,this.isRenderTargetTexture=e.isRenderTargetTexture,this.userData=JSON.parse(JSON.stringify(e.userData)),this.needsUpdate=!0,this}toJSON(e){const i=e===void 0||typeof e=="string";if(!i&&e.textures[this.uuid]!==void 0)return e.textures[this.uuid];const s={metadata:{version:4.6,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(e).uuid,mapping:this.mapping,channel:this.channel,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,internalFormat:this.internalFormat,type:this.type,colorSpace:this.colorSpace,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,generateMipmaps:this.generateMipmaps,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return Object.keys(this.userData).length>0&&(s.userData=this.userData),i||(e.textures[this.uuid]=s),s}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(e){if(this.mapping!==je)return e;if(e.applyMatrix3(this.matrix),e.x<0||e.x>1)switch(this.wrapS){case it:e.x=e.x-Math.floor(e.x);break;case xt:e.x=e.x<0?0:1;break;case tn:Math.abs(Math.floor(e.x)%2)===1?e.x=Math.ceil(e.x)-e.x:e.x=e.x-Math.floor(e.x);break}if(e.y<0||e.y>1)switch(this.wrapT){case it:e.y=e.y-Math.floor(e.y);break;case xt:e.y=e.y<0?0:1;break;case tn:Math.abs(Math.floor(e.y)%2)===1?e.y=Math.ceil(e.y)-e.y:e.y=e.y-Math.floor(e.y);break}return this.flipY&&(e.y=1-e.y),e}set needsUpdate(e){e===!0&&(this.version++,this.source.needsUpdate=!0)}set needsPMREMUpdate(e){e===!0&&this.pmremVersion++}}Li.DEFAULT_IMAGE=null,Li.DEFAULT_MAPPING=je,Li.DEFAULT_ANISOTROPY=1;class Zn{constructor(e=0,i=0,s=0,l=1){Zn.prototype.isVector4=!0,this.x=e,this.y=i,this.z=s,this.w=l}get width(){return this.z}set width(e){this.z=e}get height(){return this.w}set height(e){this.w=e}set(e,i,s,l){return this.x=e,this.y=i,this.z=s,this.w=l,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this.w=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setZ(e){return this.z=e,this}setW(e){return this.w=e,this}setComponent(e,i){switch(e){case 0:this.x=i;break;case 1:this.y=i;break;case 2:this.z=i;break;case 3:this.w=i;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this.w=e.w!==void 0?e.w:1,this}add(e){return this.x+=e.x,this.y+=e.y,this.z+=e.z,this.w+=e.w,this}addScalar(e){return this.x+=e,this.y+=e,this.z+=e,this.w+=e,this}addVectors(e,i){return this.x=e.x+i.x,this.y=e.y+i.y,this.z=e.z+i.z,this.w=e.w+i.w,this}addScaledVector(e,i){return this.x+=e.x*i,this.y+=e.y*i,this.z+=e.z*i,this.w+=e.w*i,this}sub(e){return this.x-=e.x,this.y-=e.y,this.z-=e.z,this.w-=e.w,this}subScalar(e){return this.x-=e,this.y-=e,this.z-=e,this.w-=e,this}subVectors(e,i){return this.x=e.x-i.x,this.y=e.y-i.y,this.z=e.z-i.z,this.w=e.w-i.w,this}multiply(e){return this.x*=e.x,this.y*=e.y,this.z*=e.z,this.w*=e.w,this}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this.w*=e,this}applyMatrix4(e){const i=this.x,s=this.y,l=this.z,h=this.w,f=e.elements;return this.x=f[0]*i+f[4]*s+f[8]*l+f[12]*h,this.y=f[1]*i+f[5]*s+f[9]*l+f[13]*h,this.z=f[2]*i+f[6]*s+f[10]*l+f[14]*h,this.w=f[3]*i+f[7]*s+f[11]*l+f[15]*h,this}divide(e){return this.x/=e.x,this.y/=e.y,this.z/=e.z,this.w/=e.w,this}divideScalar(e){return this.multiplyScalar(1/e)}setAxisAngleFromQuaternion(e){this.w=2*Math.acos(e.w);const i=Math.sqrt(1-e.w*e.w);return i<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=e.x/i,this.y=e.y/i,this.z=e.z/i),this}setAxisAngleFromRotationMatrix(e){let i,s,l,h;const g=e.elements,y=g[0],S=g[4],w=g[8],T=g[1],R=g[5],I=g[9],F=g[2],D=g[6],C=g[10];if(Math.abs(S-T)<.01&&Math.abs(w-F)<.01&&Math.abs(I-D)<.01){if(Math.abs(S+T)<.1&&Math.abs(w+F)<.1&&Math.abs(I+D)<.1&&Math.abs(y+R+C-3)<.1)return this.set(1,0,0,0),this;i=Math.PI;const G=(y+1)/2,H=(R+1)/2,le=(C+1)/2,ne=(S+T)/4,oe=(w+F)/4,ce=(I+D)/4;return G>H&&G>le?G<.01?(s=0,l=.707106781,h=.707106781):(s=Math.sqrt(G),l=ne/s,h=oe/s):H>le?H<.01?(s=.707106781,l=0,h=.707106781):(l=Math.sqrt(H),s=ne/l,h=ce/l):le<.01?(s=.707106781,l=.707106781,h=0):(h=Math.sqrt(le),s=oe/h,l=ce/h),this.set(s,l,h,i),this}let q=Math.sqrt((D-I)*(D-I)+(w-F)*(w-F)+(T-S)*(T-S));return Math.abs(q)<.001&&(q=1),this.x=(D-I)/q,this.y=(w-F)/q,this.z=(T-S)/q,this.w=Math.acos((y+R+C-1)/2),this}setFromMatrixPosition(e){const i=e.elements;return this.x=i[12],this.y=i[13],this.z=i[14],this.w=i[15],this}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this.w=Math.min(this.w,e.w),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this.w=Math.max(this.w,e.w),this}clamp(e,i){return this.x=bn(this.x,e.x,i.x),this.y=bn(this.y,e.y,i.y),this.z=bn(this.z,e.z,i.z),this.w=bn(this.w,e.w,i.w),this}clampScalar(e,i){return this.x=bn(this.x,e,i),this.y=bn(this.y,e,i),this.z=bn(this.z,e,i),this.w=bn(this.w,e,i),this}clampLength(e,i){const s=this.length();return this.divideScalar(s||1).multiplyScalar(bn(s,e,i))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this.w=Math.trunc(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z+this.w*e.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,i){return this.x+=(e.x-this.x)*i,this.y+=(e.y-this.y)*i,this.z+=(e.z-this.z)*i,this.w+=(e.w-this.w)*i,this}lerpVectors(e,i,s){return this.x=e.x+(i.x-e.x)*s,this.y=e.y+(i.y-e.y)*s,this.z=e.z+(i.z-e.z)*s,this.w=e.w+(i.w-e.w)*s,this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z&&e.w===this.w}fromArray(e,i=0){return this.x=e[i],this.y=e[i+1],this.z=e[i+2],this.w=e[i+3],this}toArray(e=[],i=0){return e[i]=this.x,e[i+1]=this.y,e[i+2]=this.z,e[i+3]=this.w,e}fromBufferAttribute(e,i){return this.x=e.getX(i),this.y=e.getY(i),this.z=e.getZ(i),this.w=e.getW(i),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}}class Sf extends js{constructor(e=1,i=1,s={}){super(),this.isRenderTarget=!0,this.width=e,this.height=i,this.depth=1,this.scissor=new Zn(0,0,e,i),this.scissorTest=!1,this.viewport=new Zn(0,0,e,i);const l={width:e,height:i,depth:1};s=Object.assign({generateMipmaps:!1,internalFormat:null,minFilter:pe,depthBuffer:!0,stencilBuffer:!1,resolveDepthBuffer:!0,resolveStencilBuffer:!0,depthTexture:null,samples:0,count:1},s);const h=new Li(l,s.mapping,s.wrapS,s.wrapT,s.magFilter,s.minFilter,s.format,s.type,s.anisotropy,s.colorSpace);h.flipY=!1,h.generateMipmaps=s.generateMipmaps,h.internalFormat=s.internalFormat,this.textures=[];const f=s.count;for(let m=0;m<f;m++)this.textures[m]=h.clone(),this.textures[m].isRenderTargetTexture=!0,this.textures[m].renderTarget=this;this.depthBuffer=s.depthBuffer,this.stencilBuffer=s.stencilBuffer,this.resolveDepthBuffer=s.resolveDepthBuffer,this.resolveStencilBuffer=s.resolveStencilBuffer,this._depthTexture=null,this.depthTexture=s.depthTexture,this.samples=s.samples}get texture(){return this.textures[0]}set texture(e){this.textures[0]=e}set depthTexture(e){this._depthTexture!==null&&(this._depthTexture.renderTarget=null),e!==null&&(e.renderTarget=this),this._depthTexture=e}get depthTexture(){return this._depthTexture}setSize(e,i,s=1){if(this.width!==e||this.height!==i||this.depth!==s){this.width=e,this.height=i,this.depth=s;for(let l=0,h=this.textures.length;l<h;l++)this.textures[l].image.width=e,this.textures[l].image.height=i,this.textures[l].image.depth=s;this.dispose()}this.viewport.set(0,0,e,i),this.scissor.set(0,0,e,i)}clone(){return new this.constructor().copy(this)}copy(e){this.width=e.width,this.height=e.height,this.depth=e.depth,this.scissor.copy(e.scissor),this.scissorTest=e.scissorTest,this.viewport.copy(e.viewport),this.textures.length=0;for(let s=0,l=e.textures.length;s<l;s++)this.textures[s]=e.textures[s].clone(),this.textures[s].isRenderTargetTexture=!0,this.textures[s].renderTarget=this;const i=Object.assign({},e.texture.image);return this.texture.source=new Xo(i),this.depthBuffer=e.depthBuffer,this.stencilBuffer=e.stencilBuffer,this.resolveDepthBuffer=e.resolveDepthBuffer,this.resolveStencilBuffer=e.resolveStencilBuffer,e.depthTexture!==null&&(this.depthTexture=e.depthTexture.clone()),this.samples=e.samples,this}dispose(){this.dispatchEvent({type:"dispose"})}}class Qs extends Sf{constructor(e=1,i=1,s={}){super(e,i,s),this.isWebGLRenderTarget=!0}}class kh extends Li{constructor(e=null,i=1,s=1,l=1){super(null),this.isDataArrayTexture=!0,this.image={data:e,width:i,height:s,depth:l},this.magFilter=kt,this.minFilter=kt,this.wrapR=xt,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.layerUpdates=new Set}addLayerUpdate(e){this.layerUpdates.add(e)}clearLayerUpdates(){this.layerUpdates.clear()}}class EA extends Qs{constructor(e=1,i=1,s=1,l={}){super(e,i,l),this.isWebGLArrayRenderTarget=!0,this.depth=s,this.texture=new kh(null,e,i,s),this.texture.isRenderTargetTexture=!0}}class bf extends Li{constructor(e=null,i=1,s=1,l=1){super(null),this.isData3DTexture=!0,this.image={data:e,width:i,height:s,depth:l},this.magFilter=kt,this.minFilter=kt,this.wrapR=xt,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class wA extends Qs{constructor(e=1,i=1,s=1,l={}){super(e,i,l),this.isWebGL3DRenderTarget=!0,this.depth=s,this.texture=new bf(null,e,i,s),this.texture.isRenderTargetTexture=!0}}class kr{constructor(e=0,i=0,s=0,l=1){this.isQuaternion=!0,this._x=e,this._y=i,this._z=s,this._w=l}static slerpFlat(e,i,s,l,h,f,m){let g=s[l+0],y=s[l+1],S=s[l+2],w=s[l+3];const T=h[f+0],R=h[f+1],I=h[f+2],F=h[f+3];if(m===0){e[i+0]=g,e[i+1]=y,e[i+2]=S,e[i+3]=w;return}if(m===1){e[i+0]=T,e[i+1]=R,e[i+2]=I,e[i+3]=F;return}if(w!==F||g!==T||y!==R||S!==I){let D=1-m;const C=g*T+y*R+S*I+w*F,q=C>=0?1:-1,G=1-C*C;if(G>Number.EPSILON){const le=Math.sqrt(G),ne=Math.atan2(le,C*q);D=Math.sin(D*ne)/le,m=Math.sin(m*ne)/le}const H=m*q;if(g=g*D+T*H,y=y*D+R*H,S=S*D+I*H,w=w*D+F*H,D===1-m){const le=1/Math.sqrt(g*g+y*y+S*S+w*w);g*=le,y*=le,S*=le,w*=le}}e[i]=g,e[i+1]=y,e[i+2]=S,e[i+3]=w}static multiplyQuaternionsFlat(e,i,s,l,h,f){const m=s[l],g=s[l+1],y=s[l+2],S=s[l+3],w=h[f],T=h[f+1],R=h[f+2],I=h[f+3];return e[i]=m*I+S*w+g*R-y*T,e[i+1]=g*I+S*T+y*w-m*R,e[i+2]=y*I+S*R+m*T-g*w,e[i+3]=S*I-m*w-g*T-y*R,e}get x(){return this._x}set x(e){this._x=e,this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e,this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e,this._onChangeCallback()}get w(){return this._w}set w(e){this._w=e,this._onChangeCallback()}set(e,i,s,l){return this._x=e,this._y=i,this._z=s,this._w=l,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(e){return this._x=e.x,this._y=e.y,this._z=e.z,this._w=e.w,this._onChangeCallback(),this}setFromEuler(e,i=!0){const s=e._x,l=e._y,h=e._z,f=e._order,m=Math.cos,g=Math.sin,y=m(s/2),S=m(l/2),w=m(h/2),T=g(s/2),R=g(l/2),I=g(h/2);switch(f){case"XYZ":this._x=T*S*w+y*R*I,this._y=y*R*w-T*S*I,this._z=y*S*I+T*R*w,this._w=y*S*w-T*R*I;break;case"YXZ":this._x=T*S*w+y*R*I,this._y=y*R*w-T*S*I,this._z=y*S*I-T*R*w,this._w=y*S*w+T*R*I;break;case"ZXY":this._x=T*S*w-y*R*I,this._y=y*R*w+T*S*I,this._z=y*S*I+T*R*w,this._w=y*S*w-T*R*I;break;case"ZYX":this._x=T*S*w-y*R*I,this._y=y*R*w+T*S*I,this._z=y*S*I-T*R*w,this._w=y*S*w+T*R*I;break;case"YZX":this._x=T*S*w+y*R*I,this._y=y*R*w+T*S*I,this._z=y*S*I-T*R*w,this._w=y*S*w-T*R*I;break;case"XZY":this._x=T*S*w-y*R*I,this._y=y*R*w-T*S*I,this._z=y*S*I+T*R*w,this._w=y*S*w+T*R*I;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+f)}return i===!0&&this._onChangeCallback(),this}setFromAxisAngle(e,i){const s=i/2,l=Math.sin(s);return this._x=e.x*l,this._y=e.y*l,this._z=e.z*l,this._w=Math.cos(s),this._onChangeCallback(),this}setFromRotationMatrix(e){const i=e.elements,s=i[0],l=i[4],h=i[8],f=i[1],m=i[5],g=i[9],y=i[2],S=i[6],w=i[10],T=s+m+w;if(T>0){const R=.5/Math.sqrt(T+1);this._w=.25/R,this._x=(S-g)*R,this._y=(h-y)*R,this._z=(f-l)*R}else if(s>m&&s>w){const R=2*Math.sqrt(1+s-m-w);this._w=(S-g)/R,this._x=.25*R,this._y=(l+f)/R,this._z=(h+y)/R}else if(m>w){const R=2*Math.sqrt(1+m-s-w);this._w=(h-y)/R,this._x=(l+f)/R,this._y=.25*R,this._z=(g+S)/R}else{const R=2*Math.sqrt(1+w-s-m);this._w=(f-l)/R,this._x=(h+y)/R,this._y=(g+S)/R,this._z=.25*R}return this._onChangeCallback(),this}setFromUnitVectors(e,i){let s=e.dot(i)+1;return s<Number.EPSILON?(s=0,Math.abs(e.x)>Math.abs(e.z)?(this._x=-e.y,this._y=e.x,this._z=0,this._w=s):(this._x=0,this._y=-e.z,this._z=e.y,this._w=s)):(this._x=e.y*i.z-e.z*i.y,this._y=e.z*i.x-e.x*i.z,this._z=e.x*i.y-e.y*i.x,this._w=s),this.normalize()}angleTo(e){return 2*Math.acos(Math.abs(bn(this.dot(e),-1,1)))}rotateTowards(e,i){const s=this.angleTo(e);if(s===0)return this;const l=Math.min(1,i/s);return this.slerp(e,l),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(e){return this._x*e._x+this._y*e._y+this._z*e._z+this._w*e._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let e=this.length();return e===0?(this._x=0,this._y=0,this._z=0,this._w=1):(e=1/e,this._x=this._x*e,this._y=this._y*e,this._z=this._z*e,this._w=this._w*e),this._onChangeCallback(),this}multiply(e){return this.multiplyQuaternions(this,e)}premultiply(e){return this.multiplyQuaternions(e,this)}multiplyQuaternions(e,i){const s=e._x,l=e._y,h=e._z,f=e._w,m=i._x,g=i._y,y=i._z,S=i._w;return this._x=s*S+f*m+l*y-h*g,this._y=l*S+f*g+h*m-s*y,this._z=h*S+f*y+s*g-l*m,this._w=f*S-s*m-l*g-h*y,this._onChangeCallback(),this}slerp(e,i){if(i===0)return this;if(i===1)return this.copy(e);const s=this._x,l=this._y,h=this._z,f=this._w;let m=f*e._w+s*e._x+l*e._y+h*e._z;if(m<0?(this._w=-e._w,this._x=-e._x,this._y=-e._y,this._z=-e._z,m=-m):this.copy(e),m>=1)return this._w=f,this._x=s,this._y=l,this._z=h,this;const g=1-m*m;if(g<=Number.EPSILON){const R=1-i;return this._w=R*f+i*this._w,this._x=R*s+i*this._x,this._y=R*l+i*this._y,this._z=R*h+i*this._z,this.normalize(),this}const y=Math.sqrt(g),S=Math.atan2(y,m),w=Math.sin((1-i)*S)/y,T=Math.sin(i*S)/y;return this._w=f*w+this._w*T,this._x=s*w+this._x*T,this._y=l*w+this._y*T,this._z=h*w+this._z*T,this._onChangeCallback(),this}slerpQuaternions(e,i,s){return this.copy(e).slerp(i,s)}random(){const e=2*Math.PI*Math.random(),i=2*Math.PI*Math.random(),s=Math.random(),l=Math.sqrt(1-s),h=Math.sqrt(s);return this.set(l*Math.sin(e),l*Math.cos(e),h*Math.sin(i),h*Math.cos(i))}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._w===this._w}fromArray(e,i=0){return this._x=e[i],this._y=e[i+1],this._z=e[i+2],this._w=e[i+3],this._onChangeCallback(),this}toArray(e=[],i=0){return e[i]=this._x,e[i+1]=this._y,e[i+2]=this._z,e[i+3]=this._w,e}fromBufferAttribute(e,i){return this._x=e.getX(i),this._y=e.getY(i),this._z=e.getZ(i),this._w=e.getW(i),this._onChangeCallback(),this}toJSON(){return this.toArray()}_onChange(e){return this._onChangeCallback=e,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w}}class re{constructor(e=0,i=0,s=0){re.prototype.isVector3=!0,this.x=e,this.y=i,this.z=s}set(e,i,s){return s===void 0&&(s=this.z),this.x=e,this.y=i,this.z=s,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setZ(e){return this.z=e,this}setComponent(e,i){switch(e){case 0:this.x=i;break;case 1:this.y=i;break;case 2:this.z=i;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this}add(e){return this.x+=e.x,this.y+=e.y,this.z+=e.z,this}addScalar(e){return this.x+=e,this.y+=e,this.z+=e,this}addVectors(e,i){return this.x=e.x+i.x,this.y=e.y+i.y,this.z=e.z+i.z,this}addScaledVector(e,i){return this.x+=e.x*i,this.y+=e.y*i,this.z+=e.z*i,this}sub(e){return this.x-=e.x,this.y-=e.y,this.z-=e.z,this}subScalar(e){return this.x-=e,this.y-=e,this.z-=e,this}subVectors(e,i){return this.x=e.x-i.x,this.y=e.y-i.y,this.z=e.z-i.z,this}multiply(e){return this.x*=e.x,this.y*=e.y,this.z*=e.z,this}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this}multiplyVectors(e,i){return this.x=e.x*i.x,this.y=e.y*i.y,this.z=e.z*i.z,this}applyEuler(e){return this.applyQuaternion(lv.setFromEuler(e))}applyAxisAngle(e,i){return this.applyQuaternion(lv.setFromAxisAngle(e,i))}applyMatrix3(e){const i=this.x,s=this.y,l=this.z,h=e.elements;return this.x=h[0]*i+h[3]*s+h[6]*l,this.y=h[1]*i+h[4]*s+h[7]*l,this.z=h[2]*i+h[5]*s+h[8]*l,this}applyNormalMatrix(e){return this.applyMatrix3(e).normalize()}applyMatrix4(e){const i=this.x,s=this.y,l=this.z,h=e.elements,f=1/(h[3]*i+h[7]*s+h[11]*l+h[15]);return this.x=(h[0]*i+h[4]*s+h[8]*l+h[12])*f,this.y=(h[1]*i+h[5]*s+h[9]*l+h[13])*f,this.z=(h[2]*i+h[6]*s+h[10]*l+h[14])*f,this}applyQuaternion(e){const i=this.x,s=this.y,l=this.z,h=e.x,f=e.y,m=e.z,g=e.w,y=2*(f*l-m*s),S=2*(m*i-h*l),w=2*(h*s-f*i);return this.x=i+g*y+f*w-m*S,this.y=s+g*S+m*y-h*w,this.z=l+g*w+h*S-f*y,this}project(e){return this.applyMatrix4(e.matrixWorldInverse).applyMatrix4(e.projectionMatrix)}unproject(e){return this.applyMatrix4(e.projectionMatrixInverse).applyMatrix4(e.matrixWorld)}transformDirection(e){const i=this.x,s=this.y,l=this.z,h=e.elements;return this.x=h[0]*i+h[4]*s+h[8]*l,this.y=h[1]*i+h[5]*s+h[9]*l,this.z=h[2]*i+h[6]*s+h[10]*l,this.normalize()}divide(e){return this.x/=e.x,this.y/=e.y,this.z/=e.z,this}divideScalar(e){return this.multiplyScalar(1/e)}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this}clamp(e,i){return this.x=bn(this.x,e.x,i.x),this.y=bn(this.y,e.y,i.y),this.z=bn(this.z,e.z,i.z),this}clampScalar(e,i){return this.x=bn(this.x,e,i),this.y=bn(this.y,e,i),this.z=bn(this.z,e,i),this}clampLength(e,i){const s=this.length();return this.divideScalar(s||1).multiplyScalar(bn(s,e,i))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,i){return this.x+=(e.x-this.x)*i,this.y+=(e.y-this.y)*i,this.z+=(e.z-this.z)*i,this}lerpVectors(e,i,s){return this.x=e.x+(i.x-e.x)*s,this.y=e.y+(i.y-e.y)*s,this.z=e.z+(i.z-e.z)*s,this}cross(e){return this.crossVectors(this,e)}crossVectors(e,i){const s=e.x,l=e.y,h=e.z,f=i.x,m=i.y,g=i.z;return this.x=l*g-h*m,this.y=h*f-s*g,this.z=s*m-l*f,this}projectOnVector(e){const i=e.lengthSq();if(i===0)return this.set(0,0,0);const s=e.dot(this)/i;return this.copy(e).multiplyScalar(s)}projectOnPlane(e){return ym.copy(this).projectOnVector(e),this.sub(ym)}reflect(e){return this.sub(ym.copy(e).multiplyScalar(2*this.dot(e)))}angleTo(e){const i=Math.sqrt(this.lengthSq()*e.lengthSq());if(i===0)return Math.PI/2;const s=this.dot(e)/i;return Math.acos(bn(s,-1,1))}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const i=this.x-e.x,s=this.y-e.y,l=this.z-e.z;return i*i+s*s+l*l}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)+Math.abs(this.z-e.z)}setFromSpherical(e){return this.setFromSphericalCoords(e.radius,e.phi,e.theta)}setFromSphericalCoords(e,i,s){const l=Math.sin(i)*e;return this.x=l*Math.sin(s),this.y=Math.cos(i)*e,this.z=l*Math.cos(s),this}setFromCylindrical(e){return this.setFromCylindricalCoords(e.radius,e.theta,e.y)}setFromCylindricalCoords(e,i,s){return this.x=e*Math.sin(i),this.y=s,this.z=e*Math.cos(i),this}setFromMatrixPosition(e){const i=e.elements;return this.x=i[12],this.y=i[13],this.z=i[14],this}setFromMatrixScale(e){const i=this.setFromMatrixColumn(e,0).length(),s=this.setFromMatrixColumn(e,1).length(),l=this.setFromMatrixColumn(e,2).length();return this.x=i,this.y=s,this.z=l,this}setFromMatrixColumn(e,i){return this.fromArray(e.elements,i*4)}setFromMatrix3Column(e,i){return this.fromArray(e.elements,i*3)}setFromEuler(e){return this.x=e._x,this.y=e._y,this.z=e._z,this}setFromColor(e){return this.x=e.r,this.y=e.g,this.z=e.b,this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z}fromArray(e,i=0){return this.x=e[i],this.y=e[i+1],this.z=e[i+2],this}toArray(e=[],i=0){return e[i]=this.x,e[i+1]=this.y,e[i+2]=this.z,e}fromBufferAttribute(e,i){return this.x=e.getX(i),this.y=e.getY(i),this.z=e.getZ(i),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const e=Math.random()*Math.PI*2,i=Math.random()*2-1,s=Math.sqrt(1-i*i);return this.x=s*Math.cos(e),this.y=i,this.z=s*Math.sin(e),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}}const ym=new re,lv=new kr;class Pr{constructor(e=new re(1/0,1/0,1/0),i=new re(-1/0,-1/0,-1/0)){this.isBox3=!0,this.min=e,this.max=i}set(e,i){return this.min.copy(e),this.max.copy(i),this}setFromArray(e){this.makeEmpty();for(let i=0,s=e.length;i<s;i+=3)this.expandByPoint(Ns.fromArray(e,i));return this}setFromBufferAttribute(e){this.makeEmpty();for(let i=0,s=e.count;i<s;i++)this.expandByPoint(Ns.fromBufferAttribute(e,i));return this}setFromPoints(e){this.makeEmpty();for(let i=0,s=e.length;i<s;i++)this.expandByPoint(e[i]);return this}setFromCenterAndSize(e,i){const s=Ns.copy(i).multiplyScalar(.5);return this.min.copy(e).sub(s),this.max.copy(e).add(s),this}setFromObject(e,i=!1){return this.makeEmpty(),this.expandByObject(e,i)}clone(){return new this.constructor().copy(this)}copy(e){return this.min.copy(e.min),this.max.copy(e.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(e){return this.isEmpty()?e.set(0,0,0):e.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(e){return this.isEmpty()?e.set(0,0,0):e.subVectors(this.max,this.min)}expandByPoint(e){return this.min.min(e),this.max.max(e),this}expandByVector(e){return this.min.sub(e),this.max.add(e),this}expandByScalar(e){return this.min.addScalar(-e),this.max.addScalar(e),this}expandByObject(e,i=!1){e.updateWorldMatrix(!1,!1);const s=e.geometry;if(s!==void 0){const h=s.getAttribute("position");if(i===!0&&h!==void 0&&e.isInstancedMesh!==!0)for(let f=0,m=h.count;f<m;f++)e.isMesh===!0?e.getVertexPosition(f,Ns):Ns.fromBufferAttribute(h,f),Ns.applyMatrix4(e.matrixWorld),this.expandByPoint(Ns);else e.boundingBox!==void 0?(e.boundingBox===null&&e.computeBoundingBox(),Ef.copy(e.boundingBox)):(s.boundingBox===null&&s.computeBoundingBox(),Ef.copy(s.boundingBox)),Ef.applyMatrix4(e.matrixWorld),this.union(Ef)}const l=e.children;for(let h=0,f=l.length;h<f;h++)this.expandByObject(l[h],i);return this}containsPoint(e){return e.x>=this.min.x&&e.x<=this.max.x&&e.y>=this.min.y&&e.y<=this.max.y&&e.z>=this.min.z&&e.z<=this.max.z}containsBox(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y&&this.min.z<=e.min.z&&e.max.z<=this.max.z}getParameter(e,i){return i.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y),(e.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(e){return e.max.x>=this.min.x&&e.min.x<=this.max.x&&e.max.y>=this.min.y&&e.min.y<=this.max.y&&e.max.z>=this.min.z&&e.min.z<=this.max.z}intersectsSphere(e){return this.clampPoint(e.center,Ns),Ns.distanceToSquared(e.center)<=e.radius*e.radius}intersectsPlane(e){let i,s;return e.normal.x>0?(i=e.normal.x*this.min.x,s=e.normal.x*this.max.x):(i=e.normal.x*this.max.x,s=e.normal.x*this.min.x),e.normal.y>0?(i+=e.normal.y*this.min.y,s+=e.normal.y*this.max.y):(i+=e.normal.y*this.max.y,s+=e.normal.y*this.min.y),e.normal.z>0?(i+=e.normal.z*this.min.z,s+=e.normal.z*this.max.z):(i+=e.normal.z*this.max.z,s+=e.normal.z*this.min.z),i<=-e.constant&&s>=-e.constant}intersectsTriangle(e){if(this.isEmpty())return!1;this.getCenter(Vh),wf.subVectors(this.max,Vh),sc.subVectors(e.a,Vh),ac.subVectors(e.b,Vh),oc.subVectors(e.c,Vh),Ja.subVectors(ac,sc),ja.subVectors(oc,ac),qo.subVectors(sc,oc);let i=[0,-Ja.z,Ja.y,0,-ja.z,ja.y,0,-qo.z,qo.y,Ja.z,0,-Ja.x,ja.z,0,-ja.x,qo.z,0,-qo.x,-Ja.y,Ja.x,0,-ja.y,ja.x,0,-qo.y,qo.x,0];return!Mm(i,sc,ac,oc,wf)||(i=[1,0,0,0,1,0,0,0,1],!Mm(i,sc,ac,oc,wf))?!1:(Tf.crossVectors(Ja,ja),i=[Tf.x,Tf.y,Tf.z],Mm(i,sc,ac,oc,wf))}clampPoint(e,i){return i.copy(e).clamp(this.min,this.max)}distanceToPoint(e){return this.clampPoint(e,Ns).distanceTo(e)}getBoundingSphere(e){return this.isEmpty()?e.makeEmpty():(this.getCenter(e.center),e.radius=this.getSize(Ns).length()*.5),e}intersect(e){return this.min.max(e.min),this.max.min(e.max),this.isEmpty()&&this.makeEmpty(),this}union(e){return this.min.min(e.min),this.max.max(e.max),this}applyMatrix4(e){return this.isEmpty()?this:(va[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(e),va[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(e),va[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(e),va[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(e),va[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(e),va[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(e),va[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(e),va[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(e),this.setFromPoints(va),this)}translate(e){return this.min.add(e),this.max.add(e),this}equals(e){return e.min.equals(this.min)&&e.max.equals(this.max)}}const va=[new re,new re,new re,new re,new re,new re,new re,new re],Ns=new re,Ef=new Pr,sc=new re,ac=new re,oc=new re,Ja=new re,ja=new re,qo=new re,Vh=new re,wf=new re,Tf=new re,Yo=new re;function Mm(u,e,i,s,l){for(let h=0,f=u.length-3;h<=f;h+=3){Yo.fromArray(u,h);const m=l.x*Math.abs(Yo.x)+l.y*Math.abs(Yo.y)+l.z*Math.abs(Yo.z),g=e.dot(Yo),y=i.dot(Yo),S=s.dot(Yo);if(Math.max(-Math.max(g,y,S),Math.min(g,y,S))>m)return!1}return!0}const TA=new Pr,Hh=new re,Sm=new re;class _r{constructor(e=new re,i=-1){this.isSphere=!0,this.center=e,this.radius=i}set(e,i){return this.center.copy(e),this.radius=i,this}setFromPoints(e,i){const s=this.center;i!==void 0?s.copy(i):TA.setFromPoints(e).getCenter(s);let l=0;for(let h=0,f=e.length;h<f;h++)l=Math.max(l,s.distanceToSquared(e[h]));return this.radius=Math.sqrt(l),this}copy(e){return this.center.copy(e.center),this.radius=e.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(e){return e.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(e){return e.distanceTo(this.center)-this.radius}intersectsSphere(e){const i=this.radius+e.radius;return e.center.distanceToSquared(this.center)<=i*i}intersectsBox(e){return e.intersectsSphere(this)}intersectsPlane(e){return Math.abs(e.distanceToPoint(this.center))<=this.radius}clampPoint(e,i){const s=this.center.distanceToSquared(e);return i.copy(e),s>this.radius*this.radius&&(i.sub(this.center).normalize(),i.multiplyScalar(this.radius).add(this.center)),i}getBoundingBox(e){return this.isEmpty()?(e.makeEmpty(),e):(e.set(this.center,this.center),e.expandByScalar(this.radius),e)}applyMatrix4(e){return this.center.applyMatrix4(e),this.radius=this.radius*e.getMaxScaleOnAxis(),this}translate(e){return this.center.add(e),this}expandByPoint(e){if(this.isEmpty())return this.center.copy(e),this.radius=0,this;Hh.subVectors(e,this.center);const i=Hh.lengthSq();if(i>this.radius*this.radius){const s=Math.sqrt(i),l=(s-this.radius)*.5;this.center.addScaledVector(Hh,l/s),this.radius+=l}return this}union(e){return e.isEmpty()?this:this.isEmpty()?(this.copy(e),this):(this.center.equals(e.center)===!0?this.radius=Math.max(this.radius,e.radius):(Sm.subVectors(e.center,this.center).setLength(e.radius),this.expandByPoint(Hh.copy(e.center).add(Sm)),this.expandByPoint(Hh.copy(e.center).sub(Sm))),this)}equals(e){return e.center.equals(this.center)&&e.radius===this.radius}clone(){return new this.constructor().copy(this)}}const ya=new re,bm=new re,Af=new re,Qa=new re,Em=new re,Rf=new re,wm=new re;class lc{constructor(e=new re,i=new re(0,0,-1)){this.origin=e,this.direction=i}set(e,i){return this.origin.copy(e),this.direction.copy(i),this}copy(e){return this.origin.copy(e.origin),this.direction.copy(e.direction),this}at(e,i){return i.copy(this.origin).addScaledVector(this.direction,e)}lookAt(e){return this.direction.copy(e).sub(this.origin).normalize(),this}recast(e){return this.origin.copy(this.at(e,ya)),this}closestPointToPoint(e,i){i.subVectors(e,this.origin);const s=i.dot(this.direction);return s<0?i.copy(this.origin):i.copy(this.origin).addScaledVector(this.direction,s)}distanceToPoint(e){return Math.sqrt(this.distanceSqToPoint(e))}distanceSqToPoint(e){const i=ya.subVectors(e,this.origin).dot(this.direction);return i<0?this.origin.distanceToSquared(e):(ya.copy(this.origin).addScaledVector(this.direction,i),ya.distanceToSquared(e))}distanceSqToSegment(e,i,s,l){bm.copy(e).add(i).multiplyScalar(.5),Af.copy(i).sub(e).normalize(),Qa.copy(this.origin).sub(bm);const h=e.distanceTo(i)*.5,f=-this.direction.dot(Af),m=Qa.dot(this.direction),g=-Qa.dot(Af),y=Qa.lengthSq(),S=Math.abs(1-f*f);let w,T,R,I;if(S>0)if(w=f*g-m,T=f*m-g,I=h*S,w>=0)if(T>=-I)if(T<=I){const F=1/S;w*=F,T*=F,R=w*(w+f*T+2*m)+T*(f*w+T+2*g)+y}else T=h,w=Math.max(0,-(f*T+m)),R=-w*w+T*(T+2*g)+y;else T=-h,w=Math.max(0,-(f*T+m)),R=-w*w+T*(T+2*g)+y;else T<=-I?(w=Math.max(0,-(-f*h+m)),T=w>0?-h:Math.min(Math.max(-h,-g),h),R=-w*w+T*(T+2*g)+y):T<=I?(w=0,T=Math.min(Math.max(-h,-g),h),R=T*(T+2*g)+y):(w=Math.max(0,-(f*h+m)),T=w>0?h:Math.min(Math.max(-h,-g),h),R=-w*w+T*(T+2*g)+y);else T=f>0?-h:h,w=Math.max(0,-(f*T+m)),R=-w*w+T*(T+2*g)+y;return s&&s.copy(this.origin).addScaledVector(this.direction,w),l&&l.copy(bm).addScaledVector(Af,T),R}intersectSphere(e,i){ya.subVectors(e.center,this.origin);const s=ya.dot(this.direction),l=ya.dot(ya)-s*s,h=e.radius*e.radius;if(l>h)return null;const f=Math.sqrt(h-l),m=s-f,g=s+f;return g<0?null:m<0?this.at(g,i):this.at(m,i)}intersectsSphere(e){return this.distanceSqToPoint(e.center)<=e.radius*e.radius}distanceToPlane(e){const i=e.normal.dot(this.direction);if(i===0)return e.distanceToPoint(this.origin)===0?0:null;const s=-(this.origin.dot(e.normal)+e.constant)/i;return s>=0?s:null}intersectPlane(e,i){const s=this.distanceToPlane(e);return s===null?null:this.at(s,i)}intersectsPlane(e){const i=e.distanceToPoint(this.origin);return i===0||e.normal.dot(this.direction)*i<0}intersectBox(e,i){let s,l,h,f,m,g;const y=1/this.direction.x,S=1/this.direction.y,w=1/this.direction.z,T=this.origin;return y>=0?(s=(e.min.x-T.x)*y,l=(e.max.x-T.x)*y):(s=(e.max.x-T.x)*y,l=(e.min.x-T.x)*y),S>=0?(h=(e.min.y-T.y)*S,f=(e.max.y-T.y)*S):(h=(e.max.y-T.y)*S,f=(e.min.y-T.y)*S),s>f||h>l||((h>s||isNaN(s))&&(s=h),(f<l||isNaN(l))&&(l=f),w>=0?(m=(e.min.z-T.z)*w,g=(e.max.z-T.z)*w):(m=(e.max.z-T.z)*w,g=(e.min.z-T.z)*w),s>g||m>l)||((m>s||s!==s)&&(s=m),(g<l||l!==l)&&(l=g),l<0)?null:this.at(s>=0?s:l,i)}intersectsBox(e){return this.intersectBox(e,ya)!==null}intersectTriangle(e,i,s,l,h){Em.subVectors(i,e),Rf.subVectors(s,e),wm.crossVectors(Em,Rf);let f=this.direction.dot(wm),m;if(f>0){if(l)return null;m=1}else if(f<0)m=-1,f=-f;else return null;Qa.subVectors(this.origin,e);const g=m*this.direction.dot(Rf.crossVectors(Qa,Rf));if(g<0)return null;const y=m*this.direction.dot(Em.cross(Qa));if(y<0||g+y>f)return null;const S=-m*Qa.dot(wm);return S<0?null:this.at(S/f,h)}applyMatrix4(e){return this.origin.applyMatrix4(e),this.direction.transformDirection(e),this}equals(e){return e.origin.equals(this.origin)&&e.direction.equals(this.direction)}clone(){return new this.constructor().copy(this)}}class fn{constructor(e,i,s,l,h,f,m,g,y,S,w,T,R,I,F,D){fn.prototype.isMatrix4=!0,this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],e!==void 0&&this.set(e,i,s,l,h,f,m,g,y,S,w,T,R,I,F,D)}set(e,i,s,l,h,f,m,g,y,S,w,T,R,I,F,D){const C=this.elements;return C[0]=e,C[4]=i,C[8]=s,C[12]=l,C[1]=h,C[5]=f,C[9]=m,C[13]=g,C[2]=y,C[6]=S,C[10]=w,C[14]=T,C[3]=R,C[7]=I,C[11]=F,C[15]=D,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return new fn().fromArray(this.elements)}copy(e){const i=this.elements,s=e.elements;return i[0]=s[0],i[1]=s[1],i[2]=s[2],i[3]=s[3],i[4]=s[4],i[5]=s[5],i[6]=s[6],i[7]=s[7],i[8]=s[8],i[9]=s[9],i[10]=s[10],i[11]=s[11],i[12]=s[12],i[13]=s[13],i[14]=s[14],i[15]=s[15],this}copyPosition(e){const i=this.elements,s=e.elements;return i[12]=s[12],i[13]=s[13],i[14]=s[14],this}setFromMatrix3(e){const i=e.elements;return this.set(i[0],i[3],i[6],0,i[1],i[4],i[7],0,i[2],i[5],i[8],0,0,0,0,1),this}extractBasis(e,i,s){return e.setFromMatrixColumn(this,0),i.setFromMatrixColumn(this,1),s.setFromMatrixColumn(this,2),this}makeBasis(e,i,s){return this.set(e.x,i.x,s.x,0,e.y,i.y,s.y,0,e.z,i.z,s.z,0,0,0,0,1),this}extractRotation(e){const i=this.elements,s=e.elements,l=1/cc.setFromMatrixColumn(e,0).length(),h=1/cc.setFromMatrixColumn(e,1).length(),f=1/cc.setFromMatrixColumn(e,2).length();return i[0]=s[0]*l,i[1]=s[1]*l,i[2]=s[2]*l,i[3]=0,i[4]=s[4]*h,i[5]=s[5]*h,i[6]=s[6]*h,i[7]=0,i[8]=s[8]*f,i[9]=s[9]*f,i[10]=s[10]*f,i[11]=0,i[12]=0,i[13]=0,i[14]=0,i[15]=1,this}makeRotationFromEuler(e){const i=this.elements,s=e.x,l=e.y,h=e.z,f=Math.cos(s),m=Math.sin(s),g=Math.cos(l),y=Math.sin(l),S=Math.cos(h),w=Math.sin(h);if(e.order==="XYZ"){const T=f*S,R=f*w,I=m*S,F=m*w;i[0]=g*S,i[4]=-g*w,i[8]=y,i[1]=R+I*y,i[5]=T-F*y,i[9]=-m*g,i[2]=F-T*y,i[6]=I+R*y,i[10]=f*g}else if(e.order==="YXZ"){const T=g*S,R=g*w,I=y*S,F=y*w;i[0]=T+F*m,i[4]=I*m-R,i[8]=f*y,i[1]=f*w,i[5]=f*S,i[9]=-m,i[2]=R*m-I,i[6]=F+T*m,i[10]=f*g}else if(e.order==="ZXY"){const T=g*S,R=g*w,I=y*S,F=y*w;i[0]=T-F*m,i[4]=-f*w,i[8]=I+R*m,i[1]=R+I*m,i[5]=f*S,i[9]=F-T*m,i[2]=-f*y,i[6]=m,i[10]=f*g}else if(e.order==="ZYX"){const T=f*S,R=f*w,I=m*S,F=m*w;i[0]=g*S,i[4]=I*y-R,i[8]=T*y+F,i[1]=g*w,i[5]=F*y+T,i[9]=R*y-I,i[2]=-y,i[6]=m*g,i[10]=f*g}else if(e.order==="YZX"){const T=f*g,R=f*y,I=m*g,F=m*y;i[0]=g*S,i[4]=F-T*w,i[8]=I*w+R,i[1]=w,i[5]=f*S,i[9]=-m*S,i[2]=-y*S,i[6]=R*w+I,i[10]=T-F*w}else if(e.order==="XZY"){const T=f*g,R=f*y,I=m*g,F=m*y;i[0]=g*S,i[4]=-w,i[8]=y*S,i[1]=T*w+F,i[5]=f*S,i[9]=R*w-I,i[2]=I*w-R,i[6]=m*S,i[10]=F*w+T}return i[3]=0,i[7]=0,i[11]=0,i[12]=0,i[13]=0,i[14]=0,i[15]=1,this}makeRotationFromQuaternion(e){return this.compose(AA,e,RA)}lookAt(e,i,s){const l=this.elements;return ns.subVectors(e,i),ns.lengthSq()===0&&(ns.z=1),ns.normalize(),eo.crossVectors(s,ns),eo.lengthSq()===0&&(Math.abs(s.z)===1?ns.x+=1e-4:ns.z+=1e-4,ns.normalize(),eo.crossVectors(s,ns)),eo.normalize(),Cf.crossVectors(ns,eo),l[0]=eo.x,l[4]=Cf.x,l[8]=ns.x,l[1]=eo.y,l[5]=Cf.y,l[9]=ns.y,l[2]=eo.z,l[6]=Cf.z,l[10]=ns.z,this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,i){const s=e.elements,l=i.elements,h=this.elements,f=s[0],m=s[4],g=s[8],y=s[12],S=s[1],w=s[5],T=s[9],R=s[13],I=s[2],F=s[6],D=s[10],C=s[14],q=s[3],G=s[7],H=s[11],le=s[15],ne=l[0],oe=l[4],ce=l[8],Q=l[12],Z=l[1],he=l[5],Ue=l[9],Pe=l[13],Ne=l[2],$e=l[6],Oe=l[10],ot=l[14],ze=l[3],yt=l[7],Ut=l[11],Wt=l[15];return h[0]=f*ne+m*Z+g*Ne+y*ze,h[4]=f*oe+m*he+g*$e+y*yt,h[8]=f*ce+m*Ue+g*Oe+y*Ut,h[12]=f*Q+m*Pe+g*ot+y*Wt,h[1]=S*ne+w*Z+T*Ne+R*ze,h[5]=S*oe+w*he+T*$e+R*yt,h[9]=S*ce+w*Ue+T*Oe+R*Ut,h[13]=S*Q+w*Pe+T*ot+R*Wt,h[2]=I*ne+F*Z+D*Ne+C*ze,h[6]=I*oe+F*he+D*$e+C*yt,h[10]=I*ce+F*Ue+D*Oe+C*Ut,h[14]=I*Q+F*Pe+D*ot+C*Wt,h[3]=q*ne+G*Z+H*Ne+le*ze,h[7]=q*oe+G*he+H*$e+le*yt,h[11]=q*ce+G*Ue+H*Oe+le*Ut,h[15]=q*Q+G*Pe+H*ot+le*Wt,this}multiplyScalar(e){const i=this.elements;return i[0]*=e,i[4]*=e,i[8]*=e,i[12]*=e,i[1]*=e,i[5]*=e,i[9]*=e,i[13]*=e,i[2]*=e,i[6]*=e,i[10]*=e,i[14]*=e,i[3]*=e,i[7]*=e,i[11]*=e,i[15]*=e,this}determinant(){const e=this.elements,i=e[0],s=e[4],l=e[8],h=e[12],f=e[1],m=e[5],g=e[9],y=e[13],S=e[2],w=e[6],T=e[10],R=e[14],I=e[3],F=e[7],D=e[11],C=e[15];return I*(+h*g*w-l*y*w-h*m*T+s*y*T+l*m*R-s*g*R)+F*(+i*g*R-i*y*T+h*f*T-l*f*R+l*y*S-h*g*S)+D*(+i*y*w-i*m*R-h*f*w+s*f*R+h*m*S-s*y*S)+C*(-l*m*S-i*g*w+i*m*T+l*f*w-s*f*T+s*g*S)}transpose(){const e=this.elements;let i;return i=e[1],e[1]=e[4],e[4]=i,i=e[2],e[2]=e[8],e[8]=i,i=e[6],e[6]=e[9],e[9]=i,i=e[3],e[3]=e[12],e[12]=i,i=e[7],e[7]=e[13],e[13]=i,i=e[11],e[11]=e[14],e[14]=i,this}setPosition(e,i,s){const l=this.elements;return e.isVector3?(l[12]=e.x,l[13]=e.y,l[14]=e.z):(l[12]=e,l[13]=i,l[14]=s),this}invert(){const e=this.elements,i=e[0],s=e[1],l=e[2],h=e[3],f=e[4],m=e[5],g=e[6],y=e[7],S=e[8],w=e[9],T=e[10],R=e[11],I=e[12],F=e[13],D=e[14],C=e[15],q=w*D*y-F*T*y+F*g*R-m*D*R-w*g*C+m*T*C,G=I*T*y-S*D*y-I*g*R+f*D*R+S*g*C-f*T*C,H=S*F*y-I*w*y+I*m*R-f*F*R-S*m*C+f*w*C,le=I*w*g-S*F*g-I*m*T+f*F*T+S*m*D-f*w*D,ne=i*q+s*G+l*H+h*le;if(ne===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const oe=1/ne;return e[0]=q*oe,e[1]=(F*T*h-w*D*h-F*l*R+s*D*R+w*l*C-s*T*C)*oe,e[2]=(m*D*h-F*g*h+F*l*y-s*D*y-m*l*C+s*g*C)*oe,e[3]=(w*g*h-m*T*h-w*l*y+s*T*y+m*l*R-s*g*R)*oe,e[4]=G*oe,e[5]=(S*D*h-I*T*h+I*l*R-i*D*R-S*l*C+i*T*C)*oe,e[6]=(I*g*h-f*D*h-I*l*y+i*D*y+f*l*C-i*g*C)*oe,e[7]=(f*T*h-S*g*h+S*l*y-i*T*y-f*l*R+i*g*R)*oe,e[8]=H*oe,e[9]=(I*w*h-S*F*h-I*s*R+i*F*R+S*s*C-i*w*C)*oe,e[10]=(f*F*h-I*m*h+I*s*y-i*F*y-f*s*C+i*m*C)*oe,e[11]=(S*m*h-f*w*h-S*s*y+i*w*y+f*s*R-i*m*R)*oe,e[12]=le*oe,e[13]=(S*F*l-I*w*l+I*s*T-i*F*T-S*s*D+i*w*D)*oe,e[14]=(I*m*l-f*F*l-I*s*g+i*F*g+f*s*D-i*m*D)*oe,e[15]=(f*w*l-S*m*l+S*s*g-i*w*g-f*s*T+i*m*T)*oe,this}scale(e){const i=this.elements,s=e.x,l=e.y,h=e.z;return i[0]*=s,i[4]*=l,i[8]*=h,i[1]*=s,i[5]*=l,i[9]*=h,i[2]*=s,i[6]*=l,i[10]*=h,i[3]*=s,i[7]*=l,i[11]*=h,this}getMaxScaleOnAxis(){const e=this.elements,i=e[0]*e[0]+e[1]*e[1]+e[2]*e[2],s=e[4]*e[4]+e[5]*e[5]+e[6]*e[6],l=e[8]*e[8]+e[9]*e[9]+e[10]*e[10];return Math.sqrt(Math.max(i,s,l))}makeTranslation(e,i,s){return e.isVector3?this.set(1,0,0,e.x,0,1,0,e.y,0,0,1,e.z,0,0,0,1):this.set(1,0,0,e,0,1,0,i,0,0,1,s,0,0,0,1),this}makeRotationX(e){const i=Math.cos(e),s=Math.sin(e);return this.set(1,0,0,0,0,i,-s,0,0,s,i,0,0,0,0,1),this}makeRotationY(e){const i=Math.cos(e),s=Math.sin(e);return this.set(i,0,s,0,0,1,0,0,-s,0,i,0,0,0,0,1),this}makeRotationZ(e){const i=Math.cos(e),s=Math.sin(e);return this.set(i,-s,0,0,s,i,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(e,i){const s=Math.cos(i),l=Math.sin(i),h=1-s,f=e.x,m=e.y,g=e.z,y=h*f,S=h*m;return this.set(y*f+s,y*m-l*g,y*g+l*m,0,y*m+l*g,S*m+s,S*g-l*f,0,y*g-l*m,S*g+l*f,h*g*g+s,0,0,0,0,1),this}makeScale(e,i,s){return this.set(e,0,0,0,0,i,0,0,0,0,s,0,0,0,0,1),this}makeShear(e,i,s,l,h,f){return this.set(1,s,h,0,e,1,f,0,i,l,1,0,0,0,0,1),this}compose(e,i,s){const l=this.elements,h=i._x,f=i._y,m=i._z,g=i._w,y=h+h,S=f+f,w=m+m,T=h*y,R=h*S,I=h*w,F=f*S,D=f*w,C=m*w,q=g*y,G=g*S,H=g*w,le=s.x,ne=s.y,oe=s.z;return l[0]=(1-(F+C))*le,l[1]=(R+H)*le,l[2]=(I-G)*le,l[3]=0,l[4]=(R-H)*ne,l[5]=(1-(T+C))*ne,l[6]=(D+q)*ne,l[7]=0,l[8]=(I+G)*oe,l[9]=(D-q)*oe,l[10]=(1-(T+F))*oe,l[11]=0,l[12]=e.x,l[13]=e.y,l[14]=e.z,l[15]=1,this}decompose(e,i,s){const l=this.elements;let h=cc.set(l[0],l[1],l[2]).length();const f=cc.set(l[4],l[5],l[6]).length(),m=cc.set(l[8],l[9],l[10]).length();this.determinant()<0&&(h=-h),e.x=l[12],e.y=l[13],e.z=l[14],Fs.copy(this);const y=1/h,S=1/f,w=1/m;return Fs.elements[0]*=y,Fs.elements[1]*=y,Fs.elements[2]*=y,Fs.elements[4]*=S,Fs.elements[5]*=S,Fs.elements[6]*=S,Fs.elements[8]*=w,Fs.elements[9]*=w,Fs.elements[10]*=w,i.setFromRotationMatrix(Fs),s.x=h,s.y=f,s.z=m,this}makePerspective(e,i,s,l,h,f,m=Us){const g=this.elements,y=2*h/(i-e),S=2*h/(s-l),w=(i+e)/(i-e),T=(s+l)/(s-l);let R,I;if(m===Us)R=-(f+h)/(f-h),I=-2*f*h/(f-h);else if(m===Oh)R=-f/(f-h),I=-f*h/(f-h);else throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: "+m);return g[0]=y,g[4]=0,g[8]=w,g[12]=0,g[1]=0,g[5]=S,g[9]=T,g[13]=0,g[2]=0,g[6]=0,g[10]=R,g[14]=I,g[3]=0,g[7]=0,g[11]=-1,g[15]=0,this}makeOrthographic(e,i,s,l,h,f,m=Us){const g=this.elements,y=1/(i-e),S=1/(s-l),w=1/(f-h),T=(i+e)*y,R=(s+l)*S;let I,F;if(m===Us)I=(f+h)*w,F=-2*w;else if(m===Oh)I=h*w,F=-1*w;else throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: "+m);return g[0]=2*y,g[4]=0,g[8]=0,g[12]=-T,g[1]=0,g[5]=2*S,g[9]=0,g[13]=-R,g[2]=0,g[6]=0,g[10]=F,g[14]=-I,g[3]=0,g[7]=0,g[11]=0,g[15]=1,this}equals(e){const i=this.elements,s=e.elements;for(let l=0;l<16;l++)if(i[l]!==s[l])return!1;return!0}fromArray(e,i=0){for(let s=0;s<16;s++)this.elements[s]=e[s+i];return this}toArray(e=[],i=0){const s=this.elements;return e[i]=s[0],e[i+1]=s[1],e[i+2]=s[2],e[i+3]=s[3],e[i+4]=s[4],e[i+5]=s[5],e[i+6]=s[6],e[i+7]=s[7],e[i+8]=s[8],e[i+9]=s[9],e[i+10]=s[10],e[i+11]=s[11],e[i+12]=s[12],e[i+13]=s[13],e[i+14]=s[14],e[i+15]=s[15],e}}const cc=new re,Fs=new fn,AA=new re(0,0,0),RA=new re(1,1,1),eo=new re,Cf=new re,ns=new re,cv=new fn,hv=new kr;class is{constructor(e=0,i=0,s=0,l=is.DEFAULT_ORDER){this.isEuler=!0,this._x=e,this._y=i,this._z=s,this._order=l}get x(){return this._x}set x(e){this._x=e,this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e,this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e,this._onChangeCallback()}get order(){return this._order}set order(e){this._order=e,this._onChangeCallback()}set(e,i,s,l=this._order){return this._x=e,this._y=i,this._z=s,this._order=l,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(e){return this._x=e._x,this._y=e._y,this._z=e._z,this._order=e._order,this._onChangeCallback(),this}setFromRotationMatrix(e,i=this._order,s=!0){const l=e.elements,h=l[0],f=l[4],m=l[8],g=l[1],y=l[5],S=l[9],w=l[2],T=l[6],R=l[10];switch(i){case"XYZ":this._y=Math.asin(bn(m,-1,1)),Math.abs(m)<.9999999?(this._x=Math.atan2(-S,R),this._z=Math.atan2(-f,h)):(this._x=Math.atan2(T,y),this._z=0);break;case"YXZ":this._x=Math.asin(-bn(S,-1,1)),Math.abs(S)<.9999999?(this._y=Math.atan2(m,R),this._z=Math.atan2(g,y)):(this._y=Math.atan2(-w,h),this._z=0);break;case"ZXY":this._x=Math.asin(bn(T,-1,1)),Math.abs(T)<.9999999?(this._y=Math.atan2(-w,R),this._z=Math.atan2(-f,y)):(this._y=0,this._z=Math.atan2(g,h));break;case"ZYX":this._y=Math.asin(-bn(w,-1,1)),Math.abs(w)<.9999999?(this._x=Math.atan2(T,R),this._z=Math.atan2(g,h)):(this._x=0,this._z=Math.atan2(-f,y));break;case"YZX":this._z=Math.asin(bn(g,-1,1)),Math.abs(g)<.9999999?(this._x=Math.atan2(-S,y),this._y=Math.atan2(-w,h)):(this._x=0,this._y=Math.atan2(m,R));break;case"XZY":this._z=Math.asin(-bn(f,-1,1)),Math.abs(f)<.9999999?(this._x=Math.atan2(T,y),this._y=Math.atan2(m,h)):(this._x=Math.atan2(-S,R),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+i)}return this._order=i,s===!0&&this._onChangeCallback(),this}setFromQuaternion(e,i,s){return cv.makeRotationFromQuaternion(e),this.setFromRotationMatrix(cv,i,s)}setFromVector3(e,i=this._order){return this.set(e.x,e.y,e.z,i)}reorder(e){return hv.setFromEuler(this),this.setFromQuaternion(hv,e)}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._order===this._order}fromArray(e){return this._x=e[0],this._y=e[1],this._z=e[2],e[3]!==void 0&&(this._order=e[3]),this._onChangeCallback(),this}toArray(e=[],i=0){return e[i]=this._x,e[i+1]=this._y,e[i+2]=this._z,e[i+3]=this._order,e}_onChange(e){return this._onChangeCallback=e,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._order}}is.DEFAULT_ORDER="XYZ";class Pf{constructor(){this.mask=1}set(e){this.mask=(1<<e|0)>>>0}enable(e){this.mask|=1<<e|0}enableAll(){this.mask=-1}toggle(e){this.mask^=1<<e|0}disable(e){this.mask&=~(1<<e|0)}disableAll(){this.mask=0}test(e){return(this.mask&e.mask)!==0}isEnabled(e){return(this.mask&(1<<e|0))!==0}}let CA=0;const uv=new re,hc=new kr,Ma=new fn,If=new re,Gh=new re,PA=new re,IA=new kr,fv=new re(1,0,0),dv=new re(0,1,0),pv=new re(0,0,1),mv={type:"added"},DA={type:"removed"},uc={type:"childadded",child:null},Tm={type:"childremoved",child:null};class $n extends js{constructor(){super(),this.isObject3D=!0,Object.defineProperty(this,"id",{value:CA++}),this.uuid=ts(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=$n.DEFAULT_UP.clone();const e=new re,i=new is,s=new kr,l=new re(1,1,1);function h(){s.setFromEuler(i,!1)}function f(){i.setFromQuaternion(s,void 0,!1)}i._onChange(h),s._onChange(f),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:e},rotation:{configurable:!0,enumerable:!0,value:i},quaternion:{configurable:!0,enumerable:!0,value:s},scale:{configurable:!0,enumerable:!0,value:l},modelViewMatrix:{value:new fn},normalMatrix:{value:new wn}}),this.matrix=new fn,this.matrixWorld=new fn,this.matrixAutoUpdate=$n.DEFAULT_MATRIX_AUTO_UPDATE,this.matrixWorldAutoUpdate=$n.DEFAULT_MATRIX_WORLD_AUTO_UPDATE,this.matrixWorldNeedsUpdate=!1,this.layers=new Pf,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeShadow(){}onAfterShadow(){}onBeforeRender(){}onAfterRender(){}applyMatrix4(e){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(e),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(e){return this.quaternion.premultiply(e),this}setRotationFromAxisAngle(e,i){this.quaternion.setFromAxisAngle(e,i)}setRotationFromEuler(e){this.quaternion.setFromEuler(e,!0)}setRotationFromMatrix(e){this.quaternion.setFromRotationMatrix(e)}setRotationFromQuaternion(e){this.quaternion.copy(e)}rotateOnAxis(e,i){return hc.setFromAxisAngle(e,i),this.quaternion.multiply(hc),this}rotateOnWorldAxis(e,i){return hc.setFromAxisAngle(e,i),this.quaternion.premultiply(hc),this}rotateX(e){return this.rotateOnAxis(fv,e)}rotateY(e){return this.rotateOnAxis(dv,e)}rotateZ(e){return this.rotateOnAxis(pv,e)}translateOnAxis(e,i){return uv.copy(e).applyQuaternion(this.quaternion),this.position.add(uv.multiplyScalar(i)),this}translateX(e){return this.translateOnAxis(fv,e)}translateY(e){return this.translateOnAxis(dv,e)}translateZ(e){return this.translateOnAxis(pv,e)}localToWorld(e){return this.updateWorldMatrix(!0,!1),e.applyMatrix4(this.matrixWorld)}worldToLocal(e){return this.updateWorldMatrix(!0,!1),e.applyMatrix4(Ma.copy(this.matrixWorld).invert())}lookAt(e,i,s){e.isVector3?If.copy(e):If.set(e,i,s);const l=this.parent;this.updateWorldMatrix(!0,!1),Gh.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?Ma.lookAt(Gh,If,this.up):Ma.lookAt(If,Gh,this.up),this.quaternion.setFromRotationMatrix(Ma),l&&(Ma.extractRotation(l.matrixWorld),hc.setFromRotationMatrix(Ma),this.quaternion.premultiply(hc.invert()))}add(e){if(arguments.length>1){for(let i=0;i<arguments.length;i++)this.add(arguments[i]);return this}return e===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",e),this):(e&&e.isObject3D?(e.removeFromParent(),e.parent=this,this.children.push(e),e.dispatchEvent(mv),uc.child=e,this.dispatchEvent(uc),uc.child=null):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",e),this)}remove(e){if(arguments.length>1){for(let s=0;s<arguments.length;s++)this.remove(arguments[s]);return this}const i=this.children.indexOf(e);return i!==-1&&(e.parent=null,this.children.splice(i,1),e.dispatchEvent(DA),Tm.child=e,this.dispatchEvent(Tm),Tm.child=null),this}removeFromParent(){const e=this.parent;return e!==null&&e.remove(this),this}clear(){return this.remove(...this.children)}attach(e){return this.updateWorldMatrix(!0,!1),Ma.copy(this.matrixWorld).invert(),e.parent!==null&&(e.parent.updateWorldMatrix(!0,!1),Ma.multiply(e.parent.matrixWorld)),e.applyMatrix4(Ma),e.removeFromParent(),e.parent=this,this.children.push(e),e.updateWorldMatrix(!1,!0),e.dispatchEvent(mv),uc.child=e,this.dispatchEvent(uc),uc.child=null,this}getObjectById(e){return this.getObjectByProperty("id",e)}getObjectByName(e){return this.getObjectByProperty("name",e)}getObjectByProperty(e,i){if(this[e]===i)return this;for(let s=0,l=this.children.length;s<l;s++){const f=this.children[s].getObjectByProperty(e,i);if(f!==void 0)return f}}getObjectsByProperty(e,i,s=[]){this[e]===i&&s.push(this);const l=this.children;for(let h=0,f=l.length;h<f;h++)l[h].getObjectsByProperty(e,i,s);return s}getWorldPosition(e){return this.updateWorldMatrix(!0,!1),e.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(e){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Gh,e,PA),e}getWorldScale(e){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Gh,IA,e),e}getWorldDirection(e){this.updateWorldMatrix(!0,!1);const i=this.matrixWorld.elements;return e.set(i[8],i[9],i[10]).normalize()}raycast(){}traverse(e){e(this);const i=this.children;for(let s=0,l=i.length;s<l;s++)i[s].traverse(e)}traverseVisible(e){if(this.visible===!1)return;e(this);const i=this.children;for(let s=0,l=i.length;s<l;s++)i[s].traverseVisible(e)}traverseAncestors(e){const i=this.parent;i!==null&&(e(i),i.traverseAncestors(e))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(e){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||e)&&(this.matrixWorldAutoUpdate===!0&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),this.matrixWorldNeedsUpdate=!1,e=!0);const i=this.children;for(let s=0,l=i.length;s<l;s++)i[s].updateMatrixWorld(e)}updateWorldMatrix(e,i){const s=this.parent;if(e===!0&&s!==null&&s.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),this.matrixWorldAutoUpdate===!0&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),i===!0){const l=this.children;for(let h=0,f=l.length;h<f;h++)l[h].updateWorldMatrix(!1,!0)}}toJSON(e){const i=e===void 0||typeof e=="string",s={};i&&(e={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},s.metadata={version:4.6,type:"Object",generator:"Object3D.toJSON"});const l={};l.uuid=this.uuid,l.type=this.type,this.name!==""&&(l.name=this.name),this.castShadow===!0&&(l.castShadow=!0),this.receiveShadow===!0&&(l.receiveShadow=!0),this.visible===!1&&(l.visible=!1),this.frustumCulled===!1&&(l.frustumCulled=!1),this.renderOrder!==0&&(l.renderOrder=this.renderOrder),Object.keys(this.userData).length>0&&(l.userData=this.userData),l.layers=this.layers.mask,l.matrix=this.matrix.toArray(),l.up=this.up.toArray(),this.matrixAutoUpdate===!1&&(l.matrixAutoUpdate=!1),this.isInstancedMesh&&(l.type="InstancedMesh",l.count=this.count,l.instanceMatrix=this.instanceMatrix.toJSON(),this.instanceColor!==null&&(l.instanceColor=this.instanceColor.toJSON())),this.isBatchedMesh&&(l.type="BatchedMesh",l.perObjectFrustumCulled=this.perObjectFrustumCulled,l.sortObjects=this.sortObjects,l.drawRanges=this._drawRanges,l.reservedRanges=this._reservedRanges,l.visibility=this._visibility,l.active=this._active,l.bounds=this._bounds.map(m=>({boxInitialized:m.boxInitialized,boxMin:m.box.min.toArray(),boxMax:m.box.max.toArray(),sphereInitialized:m.sphereInitialized,sphereRadius:m.sphere.radius,sphereCenter:m.sphere.center.toArray()})),l.maxInstanceCount=this._maxInstanceCount,l.maxVertexCount=this._maxVertexCount,l.maxIndexCount=this._maxIndexCount,l.geometryInitialized=this._geometryInitialized,l.geometryCount=this._geometryCount,l.matricesTexture=this._matricesTexture.toJSON(e),this._colorsTexture!==null&&(l.colorsTexture=this._colorsTexture.toJSON(e)),this.boundingSphere!==null&&(l.boundingSphere={center:l.boundingSphere.center.toArray(),radius:l.boundingSphere.radius}),this.boundingBox!==null&&(l.boundingBox={min:l.boundingBox.min.toArray(),max:l.boundingBox.max.toArray()}));function h(m,g){return m[g.uuid]===void 0&&(m[g.uuid]=g.toJSON(e)),g.uuid}if(this.isScene)this.background&&(this.background.isColor?l.background=this.background.toJSON():this.background.isTexture&&(l.background=this.background.toJSON(e).uuid)),this.environment&&this.environment.isTexture&&this.environment.isRenderTargetTexture!==!0&&(l.environment=this.environment.toJSON(e).uuid);else if(this.isMesh||this.isLine||this.isPoints){l.geometry=h(e.geometries,this.geometry);const m=this.geometry.parameters;if(m!==void 0&&m.shapes!==void 0){const g=m.shapes;if(Array.isArray(g))for(let y=0,S=g.length;y<S;y++){const w=g[y];h(e.shapes,w)}else h(e.shapes,g)}}if(this.isSkinnedMesh&&(l.bindMode=this.bindMode,l.bindMatrix=this.bindMatrix.toArray(),this.skeleton!==void 0&&(h(e.skeletons,this.skeleton),l.skeleton=this.skeleton.uuid)),this.material!==void 0)if(Array.isArray(this.material)){const m=[];for(let g=0,y=this.material.length;g<y;g++)m.push(h(e.materials,this.material[g]));l.material=m}else l.material=h(e.materials,this.material);if(this.children.length>0){l.children=[];for(let m=0;m<this.children.length;m++)l.children.push(this.children[m].toJSON(e).object)}if(this.animations.length>0){l.animations=[];for(let m=0;m<this.animations.length;m++){const g=this.animations[m];l.animations.push(h(e.animations,g))}}if(i){const m=f(e.geometries),g=f(e.materials),y=f(e.textures),S=f(e.images),w=f(e.shapes),T=f(e.skeletons),R=f(e.animations),I=f(e.nodes);m.length>0&&(s.geometries=m),g.length>0&&(s.materials=g),y.length>0&&(s.textures=y),S.length>0&&(s.images=S),w.length>0&&(s.shapes=w),T.length>0&&(s.skeletons=T),R.length>0&&(s.animations=R),I.length>0&&(s.nodes=I)}return s.object=l,s;function f(m){const g=[];for(const y in m){const S=m[y];delete S.metadata,g.push(S)}return g}}clone(e){return new this.constructor().copy(this,e)}copy(e,i=!0){if(this.name=e.name,this.up.copy(e.up),this.position.copy(e.position),this.rotation.order=e.rotation.order,this.quaternion.copy(e.quaternion),this.scale.copy(e.scale),this.matrix.copy(e.matrix),this.matrixWorld.copy(e.matrixWorld),this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrixWorldAutoUpdate=e.matrixWorldAutoUpdate,this.matrixWorldNeedsUpdate=e.matrixWorldNeedsUpdate,this.layers.mask=e.layers.mask,this.visible=e.visible,this.castShadow=e.castShadow,this.receiveShadow=e.receiveShadow,this.frustumCulled=e.frustumCulled,this.renderOrder=e.renderOrder,this.animations=e.animations.slice(),this.userData=JSON.parse(JSON.stringify(e.userData)),i===!0)for(let s=0;s<e.children.length;s++){const l=e.children[s];this.add(l.clone())}return this}}$n.DEFAULT_UP=new re(0,1,0),$n.DEFAULT_MATRIX_AUTO_UPDATE=!0,$n.DEFAULT_MATRIX_WORLD_AUTO_UPDATE=!0;const Os=new re,Sa=new re,Am=new re,ba=new re,fc=new re,dc=new re,_v=new re,Rm=new re,Cm=new re,Pm=new re,Im=new Zn,Dm=new Zn,Lm=new Zn;class Vr{constructor(e=new re,i=new re,s=new re){this.a=e,this.b=i,this.c=s}static getNormal(e,i,s,l){l.subVectors(s,i),Os.subVectors(e,i),l.cross(Os);const h=l.lengthSq();return h>0?l.multiplyScalar(1/Math.sqrt(h)):l.set(0,0,0)}static getBarycoord(e,i,s,l,h){Os.subVectors(l,i),Sa.subVectors(s,i),Am.subVectors(e,i);const f=Os.dot(Os),m=Os.dot(Sa),g=Os.dot(Am),y=Sa.dot(Sa),S=Sa.dot(Am),w=f*y-m*m;if(w===0)return h.set(0,0,0),null;const T=1/w,R=(y*g-m*S)*T,I=(f*S-m*g)*T;return h.set(1-R-I,I,R)}static containsPoint(e,i,s,l){return this.getBarycoord(e,i,s,l,ba)===null?!1:ba.x>=0&&ba.y>=0&&ba.x+ba.y<=1}static getInterpolation(e,i,s,l,h,f,m,g){return this.getBarycoord(e,i,s,l,ba)===null?(g.x=0,g.y=0,"z"in g&&(g.z=0),"w"in g&&(g.w=0),null):(g.setScalar(0),g.addScaledVector(h,ba.x),g.addScaledVector(f,ba.y),g.addScaledVector(m,ba.z),g)}static getInterpolatedAttribute(e,i,s,l,h,f){return Im.setScalar(0),Dm.setScalar(0),Lm.setScalar(0),Im.fromBufferAttribute(e,i),Dm.fromBufferAttribute(e,s),Lm.fromBufferAttribute(e,l),f.setScalar(0),f.addScaledVector(Im,h.x),f.addScaledVector(Dm,h.y),f.addScaledVector(Lm,h.z),f}static isFrontFacing(e,i,s,l){return Os.subVectors(s,i),Sa.subVectors(e,i),Os.cross(Sa).dot(l)<0}set(e,i,s){return this.a.copy(e),this.b.copy(i),this.c.copy(s),this}setFromPointsAndIndices(e,i,s,l){return this.a.copy(e[i]),this.b.copy(e[s]),this.c.copy(e[l]),this}setFromAttributeAndIndices(e,i,s,l){return this.a.fromBufferAttribute(e,i),this.b.fromBufferAttribute(e,s),this.c.fromBufferAttribute(e,l),this}clone(){return new this.constructor().copy(this)}copy(e){return this.a.copy(e.a),this.b.copy(e.b),this.c.copy(e.c),this}getArea(){return Os.subVectors(this.c,this.b),Sa.subVectors(this.a,this.b),Os.cross(Sa).length()*.5}getMidpoint(e){return e.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(e){return Vr.getNormal(this.a,this.b,this.c,e)}getPlane(e){return e.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(e,i){return Vr.getBarycoord(e,this.a,this.b,this.c,i)}getInterpolation(e,i,s,l,h){return Vr.getInterpolation(e,this.a,this.b,this.c,i,s,l,h)}containsPoint(e){return Vr.containsPoint(e,this.a,this.b,this.c)}isFrontFacing(e){return Vr.isFrontFacing(this.a,this.b,this.c,e)}intersectsBox(e){return e.intersectsTriangle(this)}closestPointToPoint(e,i){const s=this.a,l=this.b,h=this.c;let f,m;fc.subVectors(l,s),dc.subVectors(h,s),Rm.subVectors(e,s);const g=fc.dot(Rm),y=dc.dot(Rm);if(g<=0&&y<=0)return i.copy(s);Cm.subVectors(e,l);const S=fc.dot(Cm),w=dc.dot(Cm);if(S>=0&&w<=S)return i.copy(l);const T=g*w-S*y;if(T<=0&&g>=0&&S<=0)return f=g/(g-S),i.copy(s).addScaledVector(fc,f);Pm.subVectors(e,h);const R=fc.dot(Pm),I=dc.dot(Pm);if(I>=0&&R<=I)return i.copy(h);const F=R*y-g*I;if(F<=0&&y>=0&&I<=0)return m=y/(y-I),i.copy(s).addScaledVector(dc,m);const D=S*I-R*w;if(D<=0&&w-S>=0&&R-I>=0)return _v.subVectors(h,l),m=(w-S)/(w-S+(R-I)),i.copy(l).addScaledVector(_v,m);const C=1/(D+F+T);return f=F*C,m=T*C,i.copy(s).addScaledVector(fc,f).addScaledVector(dc,m)}equals(e){return e.a.equals(this.a)&&e.b.equals(this.b)&&e.c.equals(this.c)}}const gv={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},to={h:0,s:0,l:0},Df={h:0,s:0,l:0};function Um(u,e,i){return i<0&&(i+=1),i>1&&(i-=1),i<1/6?u+(e-u)*6*i:i<1/2?e:i<2/3?u+(e-u)*6*(2/3-i):u}class It{constructor(e,i,s){return this.isColor=!0,this.r=1,this.g=1,this.b=1,this.set(e,i,s)}set(e,i,s){if(i===void 0&&s===void 0){const l=e;l&&l.isColor?this.copy(l):typeof l=="number"?this.setHex(l):typeof l=="string"&&this.setStyle(l)}else this.setRGB(e,i,s);return this}setScalar(e){return this.r=e,this.g=e,this.b=e,this}setHex(e,i=zr){return e=Math.floor(e),this.r=(e>>16&255)/255,this.g=(e>>8&255)/255,this.b=(e&255)/255,qn.toWorkingColorSpace(this,i),this}setRGB(e,i,s,l=qn.workingColorSpace){return this.r=e,this.g=i,this.b=s,qn.toWorkingColorSpace(this,l),this}setHSL(e,i,s,l=qn.workingColorSpace){if(e=gm(e,1),i=bn(i,0,1),s=bn(s,0,1),i===0)this.r=this.g=this.b=s;else{const h=s<=.5?s*(1+i):s+i-s*i,f=2*s-h;this.r=Um(f,h,e+1/3),this.g=Um(f,h,e),this.b=Um(f,h,e-1/3)}return qn.toWorkingColorSpace(this,l),this}setStyle(e,i=zr){function s(h){h!==void 0&&parseFloat(h)<1&&console.warn("THREE.Color: Alpha component of "+e+" will be ignored.")}let l;if(l=/^(\w+)\(([^\)]*)\)/.exec(e)){let h;const f=l[1],m=l[2];switch(f){case"rgb":case"rgba":if(h=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(m))return s(h[4]),this.setRGB(Math.min(255,parseInt(h[1],10))/255,Math.min(255,parseInt(h[2],10))/255,Math.min(255,parseInt(h[3],10))/255,i);if(h=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(m))return s(h[4]),this.setRGB(Math.min(100,parseInt(h[1],10))/100,Math.min(100,parseInt(h[2],10))/100,Math.min(100,parseInt(h[3],10))/100,i);break;case"hsl":case"hsla":if(h=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(m))return s(h[4]),this.setHSL(parseFloat(h[1])/360,parseFloat(h[2])/100,parseFloat(h[3])/100,i);break;default:console.warn("THREE.Color: Unknown color model "+e)}}else if(l=/^\#([A-Fa-f\d]+)$/.exec(e)){const h=l[1],f=h.length;if(f===3)return this.setRGB(parseInt(h.charAt(0),16)/15,parseInt(h.charAt(1),16)/15,parseInt(h.charAt(2),16)/15,i);if(f===6)return this.setHex(parseInt(h,16),i);console.warn("THREE.Color: Invalid hex color "+e)}else if(e&&e.length>0)return this.setColorName(e,i);return this}setColorName(e,i=zr){const s=gv[e.toLowerCase()];return s!==void 0?this.setHex(s,i):console.warn("THREE.Color: Unknown color "+e),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(e){return this.r=e.r,this.g=e.g,this.b=e.b,this}copySRGBToLinear(e){return this.r=xa(e.r),this.g=xa(e.g),this.b=xa(e.b),this}copyLinearToSRGB(e){return this.r=ic(e.r),this.g=ic(e.g),this.b=ic(e.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(e=zr){return qn.fromWorkingColorSpace(gr.copy(this),e),Math.round(bn(gr.r*255,0,255))*65536+Math.round(bn(gr.g*255,0,255))*256+Math.round(bn(gr.b*255,0,255))}getHexString(e=zr){return("000000"+this.getHex(e).toString(16)).slice(-6)}getHSL(e,i=qn.workingColorSpace){qn.fromWorkingColorSpace(gr.copy(this),i);const s=gr.r,l=gr.g,h=gr.b,f=Math.max(s,l,h),m=Math.min(s,l,h);let g,y;const S=(m+f)/2;if(m===f)g=0,y=0;else{const w=f-m;switch(y=S<=.5?w/(f+m):w/(2-f-m),f){case s:g=(l-h)/w+(l<h?6:0);break;case l:g=(h-s)/w+2;break;case h:g=(s-l)/w+4;break}g/=6}return e.h=g,e.s=y,e.l=S,e}getRGB(e,i=qn.workingColorSpace){return qn.fromWorkingColorSpace(gr.copy(this),i),e.r=gr.r,e.g=gr.g,e.b=gr.b,e}getStyle(e=zr){qn.fromWorkingColorSpace(gr.copy(this),e);const i=gr.r,s=gr.g,l=gr.b;return e!==zr?`color(${e} ${i.toFixed(3)} ${s.toFixed(3)} ${l.toFixed(3)})`:`rgb(${Math.round(i*255)},${Math.round(s*255)},${Math.round(l*255)})`}offsetHSL(e,i,s){return this.getHSL(to),this.setHSL(to.h+e,to.s+i,to.l+s)}add(e){return this.r+=e.r,this.g+=e.g,this.b+=e.b,this}addColors(e,i){return this.r=e.r+i.r,this.g=e.g+i.g,this.b=e.b+i.b,this}addScalar(e){return this.r+=e,this.g+=e,this.b+=e,this}sub(e){return this.r=Math.max(0,this.r-e.r),this.g=Math.max(0,this.g-e.g),this.b=Math.max(0,this.b-e.b),this}multiply(e){return this.r*=e.r,this.g*=e.g,this.b*=e.b,this}multiplyScalar(e){return this.r*=e,this.g*=e,this.b*=e,this}lerp(e,i){return this.r+=(e.r-this.r)*i,this.g+=(e.g-this.g)*i,this.b+=(e.b-this.b)*i,this}lerpColors(e,i,s){return this.r=e.r+(i.r-e.r)*s,this.g=e.g+(i.g-e.g)*s,this.b=e.b+(i.b-e.b)*s,this}lerpHSL(e,i){this.getHSL(to),e.getHSL(Df);const s=Bh(to.h,Df.h,i),l=Bh(to.s,Df.s,i),h=Bh(to.l,Df.l,i);return this.setHSL(s,l,h),this}setFromVector3(e){return this.r=e.x,this.g=e.y,this.b=e.z,this}applyMatrix3(e){const i=this.r,s=this.g,l=this.b,h=e.elements;return this.r=h[0]*i+h[3]*s+h[6]*l,this.g=h[1]*i+h[4]*s+h[7]*l,this.b=h[2]*i+h[5]*s+h[8]*l,this}equals(e){return e.r===this.r&&e.g===this.g&&e.b===this.b}fromArray(e,i=0){return this.r=e[i],this.g=e[i+1],this.b=e[i+2],this}toArray(e=[],i=0){return e[i]=this.r,e[i+1]=this.g,e[i+2]=this.b,e}fromBufferAttribute(e,i){return this.r=e.getX(i),this.g=e.getY(i),this.b=e.getZ(i),this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b}}const gr=new It;It.NAMES=gv;let LA=0;class xr extends js{constructor(){super(),this.isMaterial=!0,Object.defineProperty(this,"id",{value:LA++}),this.uuid=ts(),this.name="",this.type="Material",this.blending=L,this.side=M,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.alphaHash=!1,this.blendSrc=de,this.blendDst=be,this.blendEquation=O,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.blendColor=new It(0,0,0),this.blendAlpha=0,this.depthFunc=lt,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=pm,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=Go,this.stencilZFail=Go,this.stencilZPass=Go,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.forceSinglePass=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(e){this._alphaTest>0!=e>0&&this.version++,this._alphaTest=e}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(e){if(e!==void 0)for(const i in e){const s=e[i];if(s===void 0){console.warn(`THREE.Material: parameter '${i}' has value of undefined.`);continue}const l=this[i];if(l===void 0){console.warn(`THREE.Material: '${i}' is not a property of THREE.${this.type}.`);continue}l&&l.isColor?l.set(s):l&&l.isVector3&&s&&s.isVector3?l.copy(s):this[i]=s}}toJSON(e){const i=e===void 0||typeof e=="string";i&&(e={textures:{},images:{}});const s={metadata:{version:4.6,type:"Material",generator:"Material.toJSON"}};s.uuid=this.uuid,s.type=this.type,this.name!==""&&(s.name=this.name),this.color&&this.color.isColor&&(s.color=this.color.getHex()),this.roughness!==void 0&&(s.roughness=this.roughness),this.metalness!==void 0&&(s.metalness=this.metalness),this.sheen!==void 0&&(s.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(s.sheenColor=this.sheenColor.getHex()),this.sheenRoughness!==void 0&&(s.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(s.emissive=this.emissive.getHex()),this.emissiveIntensity!==void 0&&this.emissiveIntensity!==1&&(s.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(s.specular=this.specular.getHex()),this.specularIntensity!==void 0&&(s.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(s.specularColor=this.specularColor.getHex()),this.shininess!==void 0&&(s.shininess=this.shininess),this.clearcoat!==void 0&&(s.clearcoat=this.clearcoat),this.clearcoatRoughness!==void 0&&(s.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(s.clearcoatMap=this.clearcoatMap.toJSON(e).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(s.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(e).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(s.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(e).uuid,s.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.dispersion!==void 0&&(s.dispersion=this.dispersion),this.iridescence!==void 0&&(s.iridescence=this.iridescence),this.iridescenceIOR!==void 0&&(s.iridescenceIOR=this.iridescenceIOR),this.iridescenceThicknessRange!==void 0&&(s.iridescenceThicknessRange=this.iridescenceThicknessRange),this.iridescenceMap&&this.iridescenceMap.isTexture&&(s.iridescenceMap=this.iridescenceMap.toJSON(e).uuid),this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture&&(s.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(e).uuid),this.anisotropy!==void 0&&(s.anisotropy=this.anisotropy),this.anisotropyRotation!==void 0&&(s.anisotropyRotation=this.anisotropyRotation),this.anisotropyMap&&this.anisotropyMap.isTexture&&(s.anisotropyMap=this.anisotropyMap.toJSON(e).uuid),this.map&&this.map.isTexture&&(s.map=this.map.toJSON(e).uuid),this.matcap&&this.matcap.isTexture&&(s.matcap=this.matcap.toJSON(e).uuid),this.alphaMap&&this.alphaMap.isTexture&&(s.alphaMap=this.alphaMap.toJSON(e).uuid),this.lightMap&&this.lightMap.isTexture&&(s.lightMap=this.lightMap.toJSON(e).uuid,s.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(s.aoMap=this.aoMap.toJSON(e).uuid,s.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(s.bumpMap=this.bumpMap.toJSON(e).uuid,s.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(s.normalMap=this.normalMap.toJSON(e).uuid,s.normalMapType=this.normalMapType,s.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(s.displacementMap=this.displacementMap.toJSON(e).uuid,s.displacementScale=this.displacementScale,s.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(s.roughnessMap=this.roughnessMap.toJSON(e).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(s.metalnessMap=this.metalnessMap.toJSON(e).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(s.emissiveMap=this.emissiveMap.toJSON(e).uuid),this.specularMap&&this.specularMap.isTexture&&(s.specularMap=this.specularMap.toJSON(e).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(s.specularIntensityMap=this.specularIntensityMap.toJSON(e).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(s.specularColorMap=this.specularColorMap.toJSON(e).uuid),this.envMap&&this.envMap.isTexture&&(s.envMap=this.envMap.toJSON(e).uuid,this.combine!==void 0&&(s.combine=this.combine)),this.envMapRotation!==void 0&&(s.envMapRotation=this.envMapRotation.toArray()),this.envMapIntensity!==void 0&&(s.envMapIntensity=this.envMapIntensity),this.reflectivity!==void 0&&(s.reflectivity=this.reflectivity),this.refractionRatio!==void 0&&(s.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(s.gradientMap=this.gradientMap.toJSON(e).uuid),this.transmission!==void 0&&(s.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(s.transmissionMap=this.transmissionMap.toJSON(e).uuid),this.thickness!==void 0&&(s.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(s.thicknessMap=this.thicknessMap.toJSON(e).uuid),this.attenuationDistance!==void 0&&this.attenuationDistance!==1/0&&(s.attenuationDistance=this.attenuationDistance),this.attenuationColor!==void 0&&(s.attenuationColor=this.attenuationColor.getHex()),this.size!==void 0&&(s.size=this.size),this.shadowSide!==null&&(s.shadowSide=this.shadowSide),this.sizeAttenuation!==void 0&&(s.sizeAttenuation=this.sizeAttenuation),this.blending!==L&&(s.blending=this.blending),this.side!==M&&(s.side=this.side),this.vertexColors===!0&&(s.vertexColors=!0),this.opacity<1&&(s.opacity=this.opacity),this.transparent===!0&&(s.transparent=!0),this.blendSrc!==de&&(s.blendSrc=this.blendSrc),this.blendDst!==be&&(s.blendDst=this.blendDst),this.blendEquation!==O&&(s.blendEquation=this.blendEquation),this.blendSrcAlpha!==null&&(s.blendSrcAlpha=this.blendSrcAlpha),this.blendDstAlpha!==null&&(s.blendDstAlpha=this.blendDstAlpha),this.blendEquationAlpha!==null&&(s.blendEquationAlpha=this.blendEquationAlpha),this.blendColor&&this.blendColor.isColor&&(s.blendColor=this.blendColor.getHex()),this.blendAlpha!==0&&(s.blendAlpha=this.blendAlpha),this.depthFunc!==lt&&(s.depthFunc=this.depthFunc),this.depthTest===!1&&(s.depthTest=this.depthTest),this.depthWrite===!1&&(s.depthWrite=this.depthWrite),this.colorWrite===!1&&(s.colorWrite=this.colorWrite),this.stencilWriteMask!==255&&(s.stencilWriteMask=this.stencilWriteMask),this.stencilFunc!==pm&&(s.stencilFunc=this.stencilFunc),this.stencilRef!==0&&(s.stencilRef=this.stencilRef),this.stencilFuncMask!==255&&(s.stencilFuncMask=this.stencilFuncMask),this.stencilFail!==Go&&(s.stencilFail=this.stencilFail),this.stencilZFail!==Go&&(s.stencilZFail=this.stencilZFail),this.stencilZPass!==Go&&(s.stencilZPass=this.stencilZPass),this.stencilWrite===!0&&(s.stencilWrite=this.stencilWrite),this.rotation!==void 0&&this.rotation!==0&&(s.rotation=this.rotation),this.polygonOffset===!0&&(s.polygonOffset=!0),this.polygonOffsetFactor!==0&&(s.polygonOffsetFactor=this.polygonOffsetFactor),this.polygonOffsetUnits!==0&&(s.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth!==void 0&&this.linewidth!==1&&(s.linewidth=this.linewidth),this.dashSize!==void 0&&(s.dashSize=this.dashSize),this.gapSize!==void 0&&(s.gapSize=this.gapSize),this.scale!==void 0&&(s.scale=this.scale),this.dithering===!0&&(s.dithering=!0),this.alphaTest>0&&(s.alphaTest=this.alphaTest),this.alphaHash===!0&&(s.alphaHash=!0),this.alphaToCoverage===!0&&(s.alphaToCoverage=!0),this.premultipliedAlpha===!0&&(s.premultipliedAlpha=!0),this.forceSinglePass===!0&&(s.forceSinglePass=!0),this.wireframe===!0&&(s.wireframe=!0),this.wireframeLinewidth>1&&(s.wireframeLinewidth=this.wireframeLinewidth),this.wireframeLinecap!=="round"&&(s.wireframeLinecap=this.wireframeLinecap),this.wireframeLinejoin!=="round"&&(s.wireframeLinejoin=this.wireframeLinejoin),this.flatShading===!0&&(s.flatShading=!0),this.visible===!1&&(s.visible=!1),this.toneMapped===!1&&(s.toneMapped=!1),this.fog===!1&&(s.fog=!1),Object.keys(this.userData).length>0&&(s.userData=this.userData);function l(h){const f=[];for(const m in h){const g=h[m];delete g.metadata,f.push(g)}return f}if(i){const h=l(e.textures),f=l(e.images);h.length>0&&(s.textures=h),f.length>0&&(s.images=f)}return s}clone(){return new this.constructor().copy(this)}copy(e){this.name=e.name,this.blending=e.blending,this.side=e.side,this.vertexColors=e.vertexColors,this.opacity=e.opacity,this.transparent=e.transparent,this.blendSrc=e.blendSrc,this.blendDst=e.blendDst,this.blendEquation=e.blendEquation,this.blendSrcAlpha=e.blendSrcAlpha,this.blendDstAlpha=e.blendDstAlpha,this.blendEquationAlpha=e.blendEquationAlpha,this.blendColor.copy(e.blendColor),this.blendAlpha=e.blendAlpha,this.depthFunc=e.depthFunc,this.depthTest=e.depthTest,this.depthWrite=e.depthWrite,this.stencilWriteMask=e.stencilWriteMask,this.stencilFunc=e.stencilFunc,this.stencilRef=e.stencilRef,this.stencilFuncMask=e.stencilFuncMask,this.stencilFail=e.stencilFail,this.stencilZFail=e.stencilZFail,this.stencilZPass=e.stencilZPass,this.stencilWrite=e.stencilWrite;const i=e.clippingPlanes;let s=null;if(i!==null){const l=i.length;s=new Array(l);for(let h=0;h!==l;++h)s[h]=i[h].clone()}return this.clippingPlanes=s,this.clipIntersection=e.clipIntersection,this.clipShadows=e.clipShadows,this.shadowSide=e.shadowSide,this.colorWrite=e.colorWrite,this.precision=e.precision,this.polygonOffset=e.polygonOffset,this.polygonOffsetFactor=e.polygonOffsetFactor,this.polygonOffsetUnits=e.polygonOffsetUnits,this.dithering=e.dithering,this.alphaTest=e.alphaTest,this.alphaHash=e.alphaHash,this.alphaToCoverage=e.alphaToCoverage,this.premultipliedAlpha=e.premultipliedAlpha,this.forceSinglePass=e.forceSinglePass,this.visible=e.visible,this.toneMapped=e.toneMapped,this.userData=JSON.parse(JSON.stringify(e.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(e){e===!0&&this.version++}onBuild(){console.warn("Material: onBuild() has been removed.")}}class no extends xr{constructor(e){super(),this.isMeshBasicMaterial=!0,this.type="MeshBasicMaterial",this.color=new It(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new is,this.combine=vn,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapRotation.copy(e.envMapRotation),this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.fog=e.fog,this}}const Ea=UA();function UA(){const u=new ArrayBuffer(4),e=new Float32Array(u),i=new Uint32Array(u),s=new Uint32Array(512),l=new Uint32Array(512);for(let g=0;g<256;++g){const y=g-127;y<-27?(s[g]=0,s[g|256]=32768,l[g]=24,l[g|256]=24):y<-14?(s[g]=1024>>-y-14,s[g|256]=1024>>-y-14|32768,l[g]=-y-1,l[g|256]=-y-1):y<=15?(s[g]=y+15<<10,s[g|256]=y+15<<10|32768,l[g]=13,l[g|256]=13):y<128?(s[g]=31744,s[g|256]=64512,l[g]=24,l[g|256]=24):(s[g]=31744,s[g|256]=64512,l[g]=13,l[g|256]=13)}const h=new Uint32Array(2048),f=new Uint32Array(64),m=new Uint32Array(64);for(let g=1;g<1024;++g){let y=g<<13,S=0;for(;(y&8388608)===0;)y<<=1,S-=8388608;y&=-8388609,S+=947912704,h[g]=y|S}for(let g=1024;g<2048;++g)h[g]=939524096+(g-1024<<13);for(let g=1;g<31;++g)f[g]=g<<23;f[31]=1199570944,f[32]=2147483648;for(let g=33;g<63;++g)f[g]=2147483648+(g-32<<23);f[63]=3347054592;for(let g=1;g<64;++g)g!==32&&(m[g]=1024);return{floatView:e,uint32View:i,baseTable:s,shiftTable:l,mantissaTable:h,exponentTable:f,offsetTable:m}}function Hr(u){Math.abs(u)>65504&&console.warn("THREE.DataUtils.toHalfFloat(): Value out of range."),u=bn(u,-65504,65504),Ea.floatView[0]=u;const e=Ea.uint32View[0],i=e>>23&511;return Ea.baseTable[i]+((e&8388607)>>Ea.shiftTable[i])}function Wh(u){const e=u>>10;return Ea.uint32View[0]=Ea.mantissaTable[Ea.offsetTable[e]+(u&1023)]+Ea.exponentTable[e],Ea.floatView[0]}const NA={toHalfFloat:Hr,fromHalfFloat:Wh},Gi=new re,Lf=new Ze;class di{constructor(e,i,s=!1){if(Array.isArray(e))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.isBufferAttribute=!0,this.name="",this.array=e,this.itemSize=i,this.count=e!==void 0?e.length/i:0,this.normalized=s,this.usage=Fh,this.updateRanges=[],this.gpuType=Si,this.version=0}onUploadCallback(){}set needsUpdate(e){e===!0&&this.version++}setUsage(e){return this.usage=e,this}addUpdateRange(e,i){this.updateRanges.push({start:e,count:i})}clearUpdateRanges(){this.updateRanges.length=0}copy(e){return this.name=e.name,this.array=new e.array.constructor(e.array),this.itemSize=e.itemSize,this.count=e.count,this.normalized=e.normalized,this.usage=e.usage,this.gpuType=e.gpuType,this}copyAt(e,i,s){e*=this.itemSize,s*=i.itemSize;for(let l=0,h=this.itemSize;l<h;l++)this.array[e+l]=i.array[s+l];return this}copyArray(e){return this.array.set(e),this}applyMatrix3(e){if(this.itemSize===2)for(let i=0,s=this.count;i<s;i++)Lf.fromBufferAttribute(this,i),Lf.applyMatrix3(e),this.setXY(i,Lf.x,Lf.y);else if(this.itemSize===3)for(let i=0,s=this.count;i<s;i++)Gi.fromBufferAttribute(this,i),Gi.applyMatrix3(e),this.setXYZ(i,Gi.x,Gi.y,Gi.z);return this}applyMatrix4(e){for(let i=0,s=this.count;i<s;i++)Gi.fromBufferAttribute(this,i),Gi.applyMatrix4(e),this.setXYZ(i,Gi.x,Gi.y,Gi.z);return this}applyNormalMatrix(e){for(let i=0,s=this.count;i<s;i++)Gi.fromBufferAttribute(this,i),Gi.applyNormalMatrix(e),this.setXYZ(i,Gi.x,Gi.y,Gi.z);return this}transformDirection(e){for(let i=0,s=this.count;i<s;i++)Gi.fromBufferAttribute(this,i),Gi.transformDirection(e),this.setXYZ(i,Gi.x,Gi.y,Gi.z);return this}set(e,i=0){return this.array.set(e,i),this}getComponent(e,i){let s=this.array[e*this.itemSize+i];return this.normalized&&(s=Cr(s,this.array)),s}setComponent(e,i,s){return this.normalized&&(s=Tn(s,this.array)),this.array[e*this.itemSize+i]=s,this}getX(e){let i=this.array[e*this.itemSize];return this.normalized&&(i=Cr(i,this.array)),i}setX(e,i){return this.normalized&&(i=Tn(i,this.array)),this.array[e*this.itemSize]=i,this}getY(e){let i=this.array[e*this.itemSize+1];return this.normalized&&(i=Cr(i,this.array)),i}setY(e,i){return this.normalized&&(i=Tn(i,this.array)),this.array[e*this.itemSize+1]=i,this}getZ(e){let i=this.array[e*this.itemSize+2];return this.normalized&&(i=Cr(i,this.array)),i}setZ(e,i){return this.normalized&&(i=Tn(i,this.array)),this.array[e*this.itemSize+2]=i,this}getW(e){let i=this.array[e*this.itemSize+3];return this.normalized&&(i=Cr(i,this.array)),i}setW(e,i){return this.normalized&&(i=Tn(i,this.array)),this.array[e*this.itemSize+3]=i,this}setXY(e,i,s){return e*=this.itemSize,this.normalized&&(i=Tn(i,this.array),s=Tn(s,this.array)),this.array[e+0]=i,this.array[e+1]=s,this}setXYZ(e,i,s,l){return e*=this.itemSize,this.normalized&&(i=Tn(i,this.array),s=Tn(s,this.array),l=Tn(l,this.array)),this.array[e+0]=i,this.array[e+1]=s,this.array[e+2]=l,this}setXYZW(e,i,s,l,h){return e*=this.itemSize,this.normalized&&(i=Tn(i,this.array),s=Tn(s,this.array),l=Tn(l,this.array),h=Tn(h,this.array)),this.array[e+0]=i,this.array[e+1]=s,this.array[e+2]=l,this.array[e+3]=h,this}onUpload(e){return this.onUploadCallback=e,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const e={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};return this.name!==""&&(e.name=this.name),this.usage!==Fh&&(e.usage=this.usage),e}}class FA extends di{constructor(e,i,s){super(new Int8Array(e),i,s)}}class OA extends di{constructor(e,i,s){super(new Uint8Array(e),i,s)}}class BA extends di{constructor(e,i,s){super(new Uint8ClampedArray(e),i,s)}}class zA extends di{constructor(e,i,s){super(new Int16Array(e),i,s)}}class Nm extends di{constructor(e,i,s){super(new Uint16Array(e),i,s)}}class kA extends di{constructor(e,i,s){super(new Int32Array(e),i,s)}}class Fm extends di{constructor(e,i,s){super(new Uint32Array(e),i,s)}}class VA extends di{constructor(e,i,s){super(new Uint16Array(e),i,s),this.isFloat16BufferAttribute=!0}getX(e){let i=Wh(this.array[e*this.itemSize]);return this.normalized&&(i=Cr(i,this.array)),i}setX(e,i){return this.normalized&&(i=Tn(i,this.array)),this.array[e*this.itemSize]=Hr(i),this}getY(e){let i=Wh(this.array[e*this.itemSize+1]);return this.normalized&&(i=Cr(i,this.array)),i}setY(e,i){return this.normalized&&(i=Tn(i,this.array)),this.array[e*this.itemSize+1]=Hr(i),this}getZ(e){let i=Wh(this.array[e*this.itemSize+2]);return this.normalized&&(i=Cr(i,this.array)),i}setZ(e,i){return this.normalized&&(i=Tn(i,this.array)),this.array[e*this.itemSize+2]=Hr(i),this}getW(e){let i=Wh(this.array[e*this.itemSize+3]);return this.normalized&&(i=Cr(i,this.array)),i}setW(e,i){return this.normalized&&(i=Tn(i,this.array)),this.array[e*this.itemSize+3]=Hr(i),this}setXY(e,i,s){return e*=this.itemSize,this.normalized&&(i=Tn(i,this.array),s=Tn(s,this.array)),this.array[e+0]=Hr(i),this.array[e+1]=Hr(s),this}setXYZ(e,i,s,l){return e*=this.itemSize,this.normalized&&(i=Tn(i,this.array),s=Tn(s,this.array),l=Tn(l,this.array)),this.array[e+0]=Hr(i),this.array[e+1]=Hr(s),this.array[e+2]=Hr(l),this}setXYZW(e,i,s,l,h){return e*=this.itemSize,this.normalized&&(i=Tn(i,this.array),s=Tn(s,this.array),l=Tn(l,this.array),h=Tn(h,this.array)),this.array[e+0]=Hr(i),this.array[e+1]=Hr(s),this.array[e+2]=Hr(l),this.array[e+3]=Hr(h),this}}class qt extends di{constructor(e,i,s){super(new Float32Array(e),i,s)}}let HA=0;const vs=new fn,Om=new $n,pc=new re,rs=new Pr,Xh=new Pr,rr=new re;class Rn extends js{constructor(){super(),this.isBufferGeometry=!0,Object.defineProperty(this,"id",{value:HA++}),this.uuid=ts(),this.name="",this.type="BufferGeometry",this.index=null,this.indirect=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(e){return Array.isArray(e)?this.index=new(nv(e)?Fm:Nm)(e,1):this.index=e,this}setIndirect(e){return this.indirect=e,this}getIndirect(){return this.indirect}getAttribute(e){return this.attributes[e]}setAttribute(e,i){return this.attributes[e]=i,this}deleteAttribute(e){return delete this.attributes[e],this}hasAttribute(e){return this.attributes[e]!==void 0}addGroup(e,i,s=0){this.groups.push({start:e,count:i,materialIndex:s})}clearGroups(){this.groups=[]}setDrawRange(e,i){this.drawRange.start=e,this.drawRange.count=i}applyMatrix4(e){const i=this.attributes.position;i!==void 0&&(i.applyMatrix4(e),i.needsUpdate=!0);const s=this.attributes.normal;if(s!==void 0){const h=new wn().getNormalMatrix(e);s.applyNormalMatrix(h),s.needsUpdate=!0}const l=this.attributes.tangent;return l!==void 0&&(l.transformDirection(e),l.needsUpdate=!0),this.boundingBox!==null&&this.computeBoundingBox(),this.boundingSphere!==null&&this.computeBoundingSphere(),this}applyQuaternion(e){return vs.makeRotationFromQuaternion(e),this.applyMatrix4(vs),this}rotateX(e){return vs.makeRotationX(e),this.applyMatrix4(vs),this}rotateY(e){return vs.makeRotationY(e),this.applyMatrix4(vs),this}rotateZ(e){return vs.makeRotationZ(e),this.applyMatrix4(vs),this}translate(e,i,s){return vs.makeTranslation(e,i,s),this.applyMatrix4(vs),this}scale(e,i,s){return vs.makeScale(e,i,s),this.applyMatrix4(vs),this}lookAt(e){return Om.lookAt(e),Om.updateMatrix(),this.applyMatrix4(Om.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(pc).negate(),this.translate(pc.x,pc.y,pc.z),this}setFromPoints(e){const i=this.getAttribute("position");if(i===void 0){const s=[];for(let l=0,h=e.length;l<h;l++){const f=e[l];s.push(f.x,f.y,f.z||0)}this.setAttribute("position",new qt(s,3))}else{const s=Math.min(e.length,i.count);for(let l=0;l<s;l++){const h=e[l];i.setXYZ(l,h.x,h.y,h.z||0)}e.length>i.count&&console.warn("THREE.BufferGeometry: Buffer size too small for points data. Use .dispose() and create a new geometry."),i.needsUpdate=!0}return this}computeBoundingBox(){this.boundingBox===null&&(this.boundingBox=new Pr);const e=this.attributes.position,i=this.morphAttributes.position;if(e&&e.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.",this),this.boundingBox.set(new re(-1/0,-1/0,-1/0),new re(1/0,1/0,1/0));return}if(e!==void 0){if(this.boundingBox.setFromBufferAttribute(e),i)for(let s=0,l=i.length;s<l;s++){const h=i[s];rs.setFromBufferAttribute(h),this.morphTargetsRelative?(rr.addVectors(this.boundingBox.min,rs.min),this.boundingBox.expandByPoint(rr),rr.addVectors(this.boundingBox.max,rs.max),this.boundingBox.expandByPoint(rr)):(this.boundingBox.expandByPoint(rs.min),this.boundingBox.expandByPoint(rs.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){this.boundingSphere===null&&(this.boundingSphere=new _r);const e=this.attributes.position,i=this.morphAttributes.position;if(e&&e.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.",this),this.boundingSphere.set(new re,1/0);return}if(e){const s=this.boundingSphere.center;if(rs.setFromBufferAttribute(e),i)for(let h=0,f=i.length;h<f;h++){const m=i[h];Xh.setFromBufferAttribute(m),this.morphTargetsRelative?(rr.addVectors(rs.min,Xh.min),rs.expandByPoint(rr),rr.addVectors(rs.max,Xh.max),rs.expandByPoint(rr)):(rs.expandByPoint(Xh.min),rs.expandByPoint(Xh.max))}rs.getCenter(s);let l=0;for(let h=0,f=e.count;h<f;h++)rr.fromBufferAttribute(e,h),l=Math.max(l,s.distanceToSquared(rr));if(i)for(let h=0,f=i.length;h<f;h++){const m=i[h],g=this.morphTargetsRelative;for(let y=0,S=m.count;y<S;y++)rr.fromBufferAttribute(m,y),g&&(pc.fromBufferAttribute(e,y),rr.add(pc)),l=Math.max(l,s.distanceToSquared(rr))}this.boundingSphere.radius=Math.sqrt(l),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const e=this.index,i=this.attributes;if(e===null||i.position===void 0||i.normal===void 0||i.uv===void 0){console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");return}const s=i.position,l=i.normal,h=i.uv;this.hasAttribute("tangent")===!1&&this.setAttribute("tangent",new di(new Float32Array(4*s.count),4));const f=this.getAttribute("tangent"),m=[],g=[];for(let ce=0;ce<s.count;ce++)m[ce]=new re,g[ce]=new re;const y=new re,S=new re,w=new re,T=new Ze,R=new Ze,I=new Ze,F=new re,D=new re;function C(ce,Q,Z){y.fromBufferAttribute(s,ce),S.fromBufferAttribute(s,Q),w.fromBufferAttribute(s,Z),T.fromBufferAttribute(h,ce),R.fromBufferAttribute(h,Q),I.fromBufferAttribute(h,Z),S.sub(y),w.sub(y),R.sub(T),I.sub(T);const he=1/(R.x*I.y-I.x*R.y);isFinite(he)&&(F.copy(S).multiplyScalar(I.y).addScaledVector(w,-R.y).multiplyScalar(he),D.copy(w).multiplyScalar(R.x).addScaledVector(S,-I.x).multiplyScalar(he),m[ce].add(F),m[Q].add(F),m[Z].add(F),g[ce].add(D),g[Q].add(D),g[Z].add(D))}let q=this.groups;q.length===0&&(q=[{start:0,count:e.count}]);for(let ce=0,Q=q.length;ce<Q;++ce){const Z=q[ce],he=Z.start,Ue=Z.count;for(let Pe=he,Ne=he+Ue;Pe<Ne;Pe+=3)C(e.getX(Pe+0),e.getX(Pe+1),e.getX(Pe+2))}const G=new re,H=new re,le=new re,ne=new re;function oe(ce){le.fromBufferAttribute(l,ce),ne.copy(le);const Q=m[ce];G.copy(Q),G.sub(le.multiplyScalar(le.dot(Q))).normalize(),H.crossVectors(ne,Q);const he=H.dot(g[ce])<0?-1:1;f.setXYZW(ce,G.x,G.y,G.z,he)}for(let ce=0,Q=q.length;ce<Q;++ce){const Z=q[ce],he=Z.start,Ue=Z.count;for(let Pe=he,Ne=he+Ue;Pe<Ne;Pe+=3)oe(e.getX(Pe+0)),oe(e.getX(Pe+1)),oe(e.getX(Pe+2))}}computeVertexNormals(){const e=this.index,i=this.getAttribute("position");if(i!==void 0){let s=this.getAttribute("normal");if(s===void 0)s=new di(new Float32Array(i.count*3),3),this.setAttribute("normal",s);else for(let T=0,R=s.count;T<R;T++)s.setXYZ(T,0,0,0);const l=new re,h=new re,f=new re,m=new re,g=new re,y=new re,S=new re,w=new re;if(e)for(let T=0,R=e.count;T<R;T+=3){const I=e.getX(T+0),F=e.getX(T+1),D=e.getX(T+2);l.fromBufferAttribute(i,I),h.fromBufferAttribute(i,F),f.fromBufferAttribute(i,D),S.subVectors(f,h),w.subVectors(l,h),S.cross(w),m.fromBufferAttribute(s,I),g.fromBufferAttribute(s,F),y.fromBufferAttribute(s,D),m.add(S),g.add(S),y.add(S),s.setXYZ(I,m.x,m.y,m.z),s.setXYZ(F,g.x,g.y,g.z),s.setXYZ(D,y.x,y.y,y.z)}else for(let T=0,R=i.count;T<R;T+=3)l.fromBufferAttribute(i,T+0),h.fromBufferAttribute(i,T+1),f.fromBufferAttribute(i,T+2),S.subVectors(f,h),w.subVectors(l,h),S.cross(w),s.setXYZ(T+0,S.x,S.y,S.z),s.setXYZ(T+1,S.x,S.y,S.z),s.setXYZ(T+2,S.x,S.y,S.z);this.normalizeNormals(),s.needsUpdate=!0}}normalizeNormals(){const e=this.attributes.normal;for(let i=0,s=e.count;i<s;i++)rr.fromBufferAttribute(e,i),rr.normalize(),e.setXYZ(i,rr.x,rr.y,rr.z)}toNonIndexed(){function e(m,g){const y=m.array,S=m.itemSize,w=m.normalized,T=new y.constructor(g.length*S);let R=0,I=0;for(let F=0,D=g.length;F<D;F++){m.isInterleavedBufferAttribute?R=g[F]*m.data.stride+m.offset:R=g[F]*S;for(let C=0;C<S;C++)T[I++]=y[R++]}return new di(T,S,w)}if(this.index===null)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const i=new Rn,s=this.index.array,l=this.attributes;for(const m in l){const g=l[m],y=e(g,s);i.setAttribute(m,y)}const h=this.morphAttributes;for(const m in h){const g=[],y=h[m];for(let S=0,w=y.length;S<w;S++){const T=y[S],R=e(T,s);g.push(R)}i.morphAttributes[m]=g}i.morphTargetsRelative=this.morphTargetsRelative;const f=this.groups;for(let m=0,g=f.length;m<g;m++){const y=f[m];i.addGroup(y.start,y.count,y.materialIndex)}return i}toJSON(){const e={metadata:{version:4.6,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(e.uuid=this.uuid,e.type=this.type,this.name!==""&&(e.name=this.name),Object.keys(this.userData).length>0&&(e.userData=this.userData),this.parameters!==void 0){const g=this.parameters;for(const y in g)g[y]!==void 0&&(e[y]=g[y]);return e}e.data={attributes:{}};const i=this.index;i!==null&&(e.data.index={type:i.array.constructor.name,array:Array.prototype.slice.call(i.array)});const s=this.attributes;for(const g in s){const y=s[g];e.data.attributes[g]=y.toJSON(e.data)}const l={};let h=!1;for(const g in this.morphAttributes){const y=this.morphAttributes[g],S=[];for(let w=0,T=y.length;w<T;w++){const R=y[w];S.push(R.toJSON(e.data))}S.length>0&&(l[g]=S,h=!0)}h&&(e.data.morphAttributes=l,e.data.morphTargetsRelative=this.morphTargetsRelative);const f=this.groups;f.length>0&&(e.data.groups=JSON.parse(JSON.stringify(f)));const m=this.boundingSphere;return m!==null&&(e.data.boundingSphere={center:m.center.toArray(),radius:m.radius}),e}clone(){return new this.constructor().copy(this)}copy(e){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const i={};this.name=e.name;const s=e.index;s!==null&&this.setIndex(s.clone(i));const l=e.attributes;for(const y in l){const S=l[y];this.setAttribute(y,S.clone(i))}const h=e.morphAttributes;for(const y in h){const S=[],w=h[y];for(let T=0,R=w.length;T<R;T++)S.push(w[T].clone(i));this.morphAttributes[y]=S}this.morphTargetsRelative=e.morphTargetsRelative;const f=e.groups;for(let y=0,S=f.length;y<S;y++){const w=f[y];this.addGroup(w.start,w.count,w.materialIndex)}const m=e.boundingBox;m!==null&&(this.boundingBox=m.clone());const g=e.boundingSphere;return g!==null&&(this.boundingSphere=g.clone()),this.drawRange.start=e.drawRange.start,this.drawRange.count=e.drawRange.count,this.userData=e.userData,this}dispose(){this.dispatchEvent({type:"dispose"})}}const xv=new fn,Zo=new lc,Uf=new _r,vv=new re,Nf=new re,Ff=new re,Of=new re,Bm=new re,Bf=new re,yv=new re,zf=new re;class Wi extends $n{constructor(e=new Rn,i=new no){super(),this.isMesh=!0,this.type="Mesh",this.geometry=e,this.material=i,this.updateMorphTargets()}copy(e,i){return super.copy(e,i),e.morphTargetInfluences!==void 0&&(this.morphTargetInfluences=e.morphTargetInfluences.slice()),e.morphTargetDictionary!==void 0&&(this.morphTargetDictionary=Object.assign({},e.morphTargetDictionary)),this.material=Array.isArray(e.material)?e.material.slice():e.material,this.geometry=e.geometry,this}updateMorphTargets(){const i=this.geometry.morphAttributes,s=Object.keys(i);if(s.length>0){const l=i[s[0]];if(l!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let h=0,f=l.length;h<f;h++){const m=l[h].name||String(h);this.morphTargetInfluences.push(0),this.morphTargetDictionary[m]=h}}}}getVertexPosition(e,i){const s=this.geometry,l=s.attributes.position,h=s.morphAttributes.position,f=s.morphTargetsRelative;i.fromBufferAttribute(l,e);const m=this.morphTargetInfluences;if(h&&m){Bf.set(0,0,0);for(let g=0,y=h.length;g<y;g++){const S=m[g],w=h[g];S!==0&&(Bm.fromBufferAttribute(w,e),f?Bf.addScaledVector(Bm,S):Bf.addScaledVector(Bm.sub(i),S))}i.add(Bf)}return i}raycast(e,i){const s=this.geometry,l=this.material,h=this.matrixWorld;l!==void 0&&(s.boundingSphere===null&&s.computeBoundingSphere(),Uf.copy(s.boundingSphere),Uf.applyMatrix4(h),Zo.copy(e.ray).recast(e.near),!(Uf.containsPoint(Zo.origin)===!1&&(Zo.intersectSphere(Uf,vv)===null||Zo.origin.distanceToSquared(vv)>(e.far-e.near)**2))&&(xv.copy(h).invert(),Zo.copy(e.ray).applyMatrix4(xv),!(s.boundingBox!==null&&Zo.intersectsBox(s.boundingBox)===!1)&&this._computeIntersections(e,i,Zo)))}_computeIntersections(e,i,s){let l;const h=this.geometry,f=this.material,m=h.index,g=h.attributes.position,y=h.attributes.uv,S=h.attributes.uv1,w=h.attributes.normal,T=h.groups,R=h.drawRange;if(m!==null)if(Array.isArray(f))for(let I=0,F=T.length;I<F;I++){const D=T[I],C=f[D.materialIndex],q=Math.max(D.start,R.start),G=Math.min(m.count,Math.min(D.start+D.count,R.start+R.count));for(let H=q,le=G;H<le;H+=3){const ne=m.getX(H),oe=m.getX(H+1),ce=m.getX(H+2);l=kf(this,C,e,s,y,S,w,ne,oe,ce),l&&(l.faceIndex=Math.floor(H/3),l.face.materialIndex=D.materialIndex,i.push(l))}}else{const I=Math.max(0,R.start),F=Math.min(m.count,R.start+R.count);for(let D=I,C=F;D<C;D+=3){const q=m.getX(D),G=m.getX(D+1),H=m.getX(D+2);l=kf(this,f,e,s,y,S,w,q,G,H),l&&(l.faceIndex=Math.floor(D/3),i.push(l))}}else if(g!==void 0)if(Array.isArray(f))for(let I=0,F=T.length;I<F;I++){const D=T[I],C=f[D.materialIndex],q=Math.max(D.start,R.start),G=Math.min(g.count,Math.min(D.start+D.count,R.start+R.count));for(let H=q,le=G;H<le;H+=3){const ne=H,oe=H+1,ce=H+2;l=kf(this,C,e,s,y,S,w,ne,oe,ce),l&&(l.faceIndex=Math.floor(H/3),l.face.materialIndex=D.materialIndex,i.push(l))}}else{const I=Math.max(0,R.start),F=Math.min(g.count,R.start+R.count);for(let D=I,C=F;D<C;D+=3){const q=D,G=D+1,H=D+2;l=kf(this,f,e,s,y,S,w,q,G,H),l&&(l.faceIndex=Math.floor(D/3),i.push(l))}}}}function GA(u,e,i,s,l,h,f,m){let g;if(e.side===b?g=s.intersectTriangle(f,h,l,!0,m):g=s.intersectTriangle(l,h,f,e.side===M,m),g===null)return null;zf.copy(m),zf.applyMatrix4(u.matrixWorld);const y=i.ray.origin.distanceTo(zf);return y<i.near||y>i.far?null:{distance:y,point:zf.clone(),object:u}}function kf(u,e,i,s,l,h,f,m,g,y){u.getVertexPosition(m,Nf),u.getVertexPosition(g,Ff),u.getVertexPosition(y,Of);const S=GA(u,e,i,s,Nf,Ff,Of,yv);if(S){const w=new re;Vr.getBarycoord(yv,Nf,Ff,Of,w),l&&(S.uv=Vr.getInterpolatedAttribute(l,m,g,y,w,new Ze)),h&&(S.uv1=Vr.getInterpolatedAttribute(h,m,g,y,w,new Ze)),f&&(S.normal=Vr.getInterpolatedAttribute(f,m,g,y,w,new re),S.normal.dot(s.direction)>0&&S.normal.multiplyScalar(-1));const T={a:m,b:g,c:y,normal:new re,materialIndex:0};Vr.getNormal(Nf,Ff,Of,T.normal),S.face=T,S.barycoord=w}return S}class $o extends Rn{constructor(e=1,i=1,s=1,l=1,h=1,f=1){super(),this.type="BoxGeometry",this.parameters={width:e,height:i,depth:s,widthSegments:l,heightSegments:h,depthSegments:f};const m=this;l=Math.floor(l),h=Math.floor(h),f=Math.floor(f);const g=[],y=[],S=[],w=[];let T=0,R=0;I("z","y","x",-1,-1,s,i,e,f,h,0),I("z","y","x",1,-1,s,i,-e,f,h,1),I("x","z","y",1,1,e,s,i,l,f,2),I("x","z","y",1,-1,e,s,-i,l,f,3),I("x","y","z",1,-1,e,i,s,l,h,4),I("x","y","z",-1,-1,e,i,-s,l,h,5),this.setIndex(g),this.setAttribute("position",new qt(y,3)),this.setAttribute("normal",new qt(S,3)),this.setAttribute("uv",new qt(w,2));function I(F,D,C,q,G,H,le,ne,oe,ce,Q){const Z=H/oe,he=le/ce,Ue=H/2,Pe=le/2,Ne=ne/2,$e=oe+1,Oe=ce+1;let ot=0,ze=0;const yt=new re;for(let Ut=0;Ut<Oe;Ut++){const Wt=Ut*he-Pe;for(let An=0;An<$e;An++){const ri=An*Z-Ue;yt[F]=ri*q,yt[D]=Wt*G,yt[C]=Ne,y.push(yt.x,yt.y,yt.z),yt[F]=0,yt[D]=0,yt[C]=ne>0?1:-1,S.push(yt.x,yt.y,yt.z),w.push(An/oe),w.push(1-Ut/ce),ot+=1}}for(let Ut=0;Ut<ce;Ut++)for(let Wt=0;Wt<oe;Wt++){const An=T+Wt+$e*Ut,ri=T+Wt+$e*(Ut+1),qe=T+(Wt+1)+$e*(Ut+1),dt=T+(Wt+1)+$e*Ut;g.push(An,ri,dt),g.push(ri,qe,dt),ze+=6}m.addGroup(R,ze,Q),R+=ze,T+=ot}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new $o(e.width,e.height,e.depth,e.widthSegments,e.heightSegments,e.depthSegments)}}function mc(u){const e={};for(const i in u){e[i]={};for(const s in u[i]){const l=u[i][s];l&&(l.isColor||l.isMatrix3||l.isMatrix4||l.isVector2||l.isVector3||l.isVector4||l.isTexture||l.isQuaternion)?l.isRenderTargetTexture?(console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."),e[i][s]=null):e[i][s]=l.clone():Array.isArray(l)?e[i][s]=l.slice():e[i][s]=l}}return e}function Ir(u){const e={};for(let i=0;i<u.length;i++){const s=mc(u[i]);for(const l in s)e[l]=s[l]}return e}function WA(u){const e=[];for(let i=0;i<u.length;i++)e.push(u[i].clone());return e}function Mv(u){const e=u.getRenderTarget();return e===null?u.outputColorSpace:e.isXRRenderTarget===!0?e.texture.colorSpace:qn.workingColorSpace}const Sv={clone:mc,merge:Ir};var XA=`void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`,qA=`void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}`;class Bs extends xr{constructor(e){super(),this.isShaderMaterial=!0,this.type="ShaderMaterial",this.defines={},this.uniforms={},this.uniformsGroups=[],this.vertexShader=XA,this.fragmentShader=qA,this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.forceSinglePass=!0,this.extensions={clipCullDistance:!1,multiDraw:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv1:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,e!==void 0&&this.setValues(e)}copy(e){return super.copy(e),this.fragmentShader=e.fragmentShader,this.vertexShader=e.vertexShader,this.uniforms=mc(e.uniforms),this.uniformsGroups=WA(e.uniformsGroups),this.defines=Object.assign({},e.defines),this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.fog=e.fog,this.lights=e.lights,this.clipping=e.clipping,this.extensions=Object.assign({},e.extensions),this.glslVersion=e.glslVersion,this}toJSON(e){const i=super.toJSON(e);i.glslVersion=this.glslVersion,i.uniforms={};for(const l in this.uniforms){const f=this.uniforms[l].value;f&&f.isTexture?i.uniforms[l]={type:"t",value:f.toJSON(e).uuid}:f&&f.isColor?i.uniforms[l]={type:"c",value:f.getHex()}:f&&f.isVector2?i.uniforms[l]={type:"v2",value:f.toArray()}:f&&f.isVector3?i.uniforms[l]={type:"v3",value:f.toArray()}:f&&f.isVector4?i.uniforms[l]={type:"v4",value:f.toArray()}:f&&f.isMatrix3?i.uniforms[l]={type:"m3",value:f.toArray()}:f&&f.isMatrix4?i.uniforms[l]={type:"m4",value:f.toArray()}:i.uniforms[l]={value:f}}Object.keys(this.defines).length>0&&(i.defines=this.defines),i.vertexShader=this.vertexShader,i.fragmentShader=this.fragmentShader,i.lights=this.lights,i.clipping=this.clipping;const s={};for(const l in this.extensions)this.extensions[l]===!0&&(s[l]=!0);return Object.keys(s).length>0&&(i.extensions=s),i}}class Vf extends $n{constructor(){super(),this.isCamera=!0,this.type="Camera",this.matrixWorldInverse=new fn,this.projectionMatrix=new fn,this.projectionMatrixInverse=new fn,this.coordinateSystem=Us}copy(e,i){return super.copy(e,i),this.matrixWorldInverse.copy(e.matrixWorldInverse),this.projectionMatrix.copy(e.projectionMatrix),this.projectionMatrixInverse.copy(e.projectionMatrixInverse),this.coordinateSystem=e.coordinateSystem,this}getWorldDirection(e){return super.getWorldDirection(e).negate()}updateMatrixWorld(e){super.updateMatrixWorld(e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(e,i){super.updateWorldMatrix(e,i),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return new this.constructor().copy(this)}}const io=new re,bv=new Ze,Ev=new Ze;class hr extends Vf{constructor(e=50,i=1,s=.1,l=2e3){super(),this.isPerspectiveCamera=!0,this.type="PerspectiveCamera",this.fov=e,this.zoom=1,this.near=s,this.far=l,this.focus=10,this.aspect=i,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(e,i){return super.copy(e,i),this.fov=e.fov,this.zoom=e.zoom,this.near=e.near,this.far=e.far,this.focus=e.focus,this.aspect=e.aspect,this.view=e.view===null?null:Object.assign({},e.view),this.filmGauge=e.filmGauge,this.filmOffset=e.filmOffset,this}setFocalLength(e){const i=.5*this.getFilmHeight()/e;this.fov=ec*2*Math.atan(i),this.updateProjectionMatrix()}getFocalLength(){const e=Math.tan(Wo*.5*this.fov);return .5*this.getFilmHeight()/e}getEffectiveFOV(){return ec*2*Math.atan(Math.tan(Wo*.5*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}getViewBounds(e,i,s){io.set(-1,-1,.5).applyMatrix4(this.projectionMatrixInverse),i.set(io.x,io.y).multiplyScalar(-e/io.z),io.set(1,1,.5).applyMatrix4(this.projectionMatrixInverse),s.set(io.x,io.y).multiplyScalar(-e/io.z)}getViewSize(e,i){return this.getViewBounds(e,bv,Ev),i.subVectors(Ev,bv)}setViewOffset(e,i,s,l,h,f){this.aspect=e/i,this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=i,this.view.offsetX=s,this.view.offsetY=l,this.view.width=h,this.view.height=f,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const e=this.near;let i=e*Math.tan(Wo*.5*this.fov)/this.zoom,s=2*i,l=this.aspect*s,h=-.5*l;const f=this.view;if(this.view!==null&&this.view.enabled){const g=f.fullWidth,y=f.fullHeight;h+=f.offsetX*l/g,i-=f.offsetY*s/y,l*=f.width/g,s*=f.height/y}const m=this.filmOffset;m!==0&&(h+=e*m/this.getFilmWidth()),this.projectionMatrix.makePerspective(h,h+l,i,i-s,e,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){const i=super.toJSON(e);return i.object.fov=this.fov,i.object.zoom=this.zoom,i.object.near=this.near,i.object.far=this.far,i.object.focus=this.focus,i.object.aspect=this.aspect,this.view!==null&&(i.object.view=Object.assign({},this.view)),i.object.filmGauge=this.filmGauge,i.object.filmOffset=this.filmOffset,i}}const _c=-90,gc=1;class wv extends $n{constructor(e,i,s){super(),this.type="CubeCamera",this.renderTarget=s,this.coordinateSystem=null,this.activeMipmapLevel=0;const l=new hr(_c,gc,e,i);l.layers=this.layers,this.add(l);const h=new hr(_c,gc,e,i);h.layers=this.layers,this.add(h);const f=new hr(_c,gc,e,i);f.layers=this.layers,this.add(f);const m=new hr(_c,gc,e,i);m.layers=this.layers,this.add(m);const g=new hr(_c,gc,e,i);g.layers=this.layers,this.add(g);const y=new hr(_c,gc,e,i);y.layers=this.layers,this.add(y)}updateCoordinateSystem(){const e=this.coordinateSystem,i=this.children.concat(),[s,l,h,f,m,g]=i;for(const y of i)this.remove(y);if(e===Us)s.up.set(0,1,0),s.lookAt(1,0,0),l.up.set(0,1,0),l.lookAt(-1,0,0),h.up.set(0,0,-1),h.lookAt(0,1,0),f.up.set(0,0,1),f.lookAt(0,-1,0),m.up.set(0,1,0),m.lookAt(0,0,1),g.up.set(0,1,0),g.lookAt(0,0,-1);else if(e===Oh)s.up.set(0,-1,0),s.lookAt(-1,0,0),l.up.set(0,-1,0),l.lookAt(1,0,0),h.up.set(0,0,1),h.lookAt(0,1,0),f.up.set(0,0,-1),f.lookAt(0,-1,0),m.up.set(0,-1,0),m.lookAt(0,0,1),g.up.set(0,-1,0),g.lookAt(0,0,-1);else throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: "+e);for(const y of i)this.add(y),y.updateMatrixWorld()}update(e,i){this.parent===null&&this.updateMatrixWorld();const{renderTarget:s,activeMipmapLevel:l}=this;this.coordinateSystem!==e.coordinateSystem&&(this.coordinateSystem=e.coordinateSystem,this.updateCoordinateSystem());const[h,f,m,g,y,S]=this.children,w=e.getRenderTarget(),T=e.getActiveCubeFace(),R=e.getActiveMipmapLevel(),I=e.xr.enabled;e.xr.enabled=!1;const F=s.texture.generateMipmaps;s.texture.generateMipmaps=!1,e.setRenderTarget(s,0,l),e.render(i,h),e.setRenderTarget(s,1,l),e.render(i,f),e.setRenderTarget(s,2,l),e.render(i,m),e.setRenderTarget(s,3,l),e.render(i,g),e.setRenderTarget(s,4,l),e.render(i,y),s.texture.generateMipmaps=F,e.setRenderTarget(s,5,l),e.render(i,S),e.setRenderTarget(w,T,R),e.xr.enabled=I,s.texture.needsPMREMUpdate=!0}}class qh extends Li{constructor(e,i,s,l,h,f,m,g,y,S){e=e!==void 0?e:[],i=i!==void 0?i:Ve,super(e,i,s,l,h,f,m,g,y,S),this.isCubeTexture=!0,this.flipY=!1}get images(){return this.image}set images(e){this.image=e}}class Tv extends Qs{constructor(e=1,i={}){super(e,e,i),this.isWebGLCubeRenderTarget=!0;const s={width:e,height:e,depth:1},l=[s,s,s,s,s,s];this.texture=new qh(l,i.mapping,i.wrapS,i.wrapT,i.magFilter,i.minFilter,i.format,i.type,i.anisotropy,i.colorSpace),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=i.generateMipmaps!==void 0?i.generateMipmaps:!1,this.texture.minFilter=i.minFilter!==void 0?i.minFilter:pe}fromEquirectangularTexture(e,i){this.texture.type=i.type,this.texture.colorSpace=i.colorSpace,this.texture.generateMipmaps=i.generateMipmaps,this.texture.minFilter=i.minFilter,this.texture.magFilter=i.magFilter;const s={uniforms:{tEquirect:{value:null}},vertexShader:`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,fragmentShader:`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`},l=new $o(5,5,5),h=new Bs({name:"CubemapFromEquirect",uniforms:mc(s.uniforms),vertexShader:s.vertexShader,fragmentShader:s.fragmentShader,side:b,blending:U});h.uniforms.tEquirect.value=i;const f=new Wi(l,h),m=i.minFilter;return i.minFilter===Ge&&(i.minFilter=pe),new wv(1,10,this).update(e,f),i.minFilter=m,f.geometry.dispose(),f.material.dispose(),this}clear(e,i,s,l){const h=e.getRenderTarget();for(let f=0;f<6;f++)e.setRenderTarget(this,f),e.clear(i,s,l);e.setRenderTarget(h)}}class Hf{constructor(e,i=25e-5){this.isFogExp2=!0,this.name="",this.color=new It(e),this.density=i}clone(){return new Hf(this.color,this.density)}toJSON(){return{type:"FogExp2",name:this.name,color:this.color.getHex(),density:this.density}}}class Gf{constructor(e,i=1,s=1e3){this.isFog=!0,this.name="",this.color=new It(e),this.near=i,this.far=s}clone(){return new Gf(this.color,this.near,this.far)}toJSON(){return{type:"Fog",name:this.name,color:this.color.getHex(),near:this.near,far:this.far}}}class Av extends $n{constructor(){super(),this.isScene=!0,this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.backgroundBlurriness=0,this.backgroundIntensity=1,this.backgroundRotation=new is,this.environmentIntensity=1,this.environmentRotation=new is,this.overrideMaterial=null,typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(e,i){return super.copy(e,i),e.background!==null&&(this.background=e.background.clone()),e.environment!==null&&(this.environment=e.environment.clone()),e.fog!==null&&(this.fog=e.fog.clone()),this.backgroundBlurriness=e.backgroundBlurriness,this.backgroundIntensity=e.backgroundIntensity,this.backgroundRotation.copy(e.backgroundRotation),this.environmentIntensity=e.environmentIntensity,this.environmentRotation.copy(e.environmentRotation),e.overrideMaterial!==null&&(this.overrideMaterial=e.overrideMaterial.clone()),this.matrixAutoUpdate=e.matrixAutoUpdate,this}toJSON(e){const i=super.toJSON(e);return this.fog!==null&&(i.object.fog=this.fog.toJSON()),this.backgroundBlurriness>0&&(i.object.backgroundBlurriness=this.backgroundBlurriness),this.backgroundIntensity!==1&&(i.object.backgroundIntensity=this.backgroundIntensity),i.object.backgroundRotation=this.backgroundRotation.toArray(),this.environmentIntensity!==1&&(i.object.environmentIntensity=this.environmentIntensity),i.object.environmentRotation=this.environmentRotation.toArray(),i}}class Wf{constructor(e,i){this.isInterleavedBuffer=!0,this.array=e,this.stride=i,this.count=e!==void 0?e.length/i:0,this.usage=Fh,this.updateRanges=[],this.version=0,this.uuid=ts()}onUploadCallback(){}set needsUpdate(e){e===!0&&this.version++}setUsage(e){return this.usage=e,this}addUpdateRange(e,i){this.updateRanges.push({start:e,count:i})}clearUpdateRanges(){this.updateRanges.length=0}copy(e){return this.array=new e.array.constructor(e.array),this.count=e.count,this.stride=e.stride,this.usage=e.usage,this}copyAt(e,i,s){e*=this.stride,s*=i.stride;for(let l=0,h=this.stride;l<h;l++)this.array[e+l]=i.array[s+l];return this}set(e,i=0){return this.array.set(e,i),this}clone(e){e.arrayBuffers===void 0&&(e.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=ts()),e.arrayBuffers[this.array.buffer._uuid]===void 0&&(e.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer);const i=new this.array.constructor(e.arrayBuffers[this.array.buffer._uuid]),s=new this.constructor(i,this.stride);return s.setUsage(this.usage),s}onUpload(e){return this.onUploadCallback=e,this}toJSON(e){return e.arrayBuffers===void 0&&(e.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=ts()),e.arrayBuffers[this.array.buffer._uuid]===void 0&&(e.arrayBuffers[this.array.buffer._uuid]=Array.from(new Uint32Array(this.array.buffer))),{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride}}}const Dr=new re;class Ko{constructor(e,i,s,l=!1){this.isInterleavedBufferAttribute=!0,this.name="",this.data=e,this.itemSize=i,this.offset=s,this.normalized=l}get count(){return this.data.count}get array(){return this.data.array}set needsUpdate(e){this.data.needsUpdate=e}applyMatrix4(e){for(let i=0,s=this.data.count;i<s;i++)Dr.fromBufferAttribute(this,i),Dr.applyMatrix4(e),this.setXYZ(i,Dr.x,Dr.y,Dr.z);return this}applyNormalMatrix(e){for(let i=0,s=this.count;i<s;i++)Dr.fromBufferAttribute(this,i),Dr.applyNormalMatrix(e),this.setXYZ(i,Dr.x,Dr.y,Dr.z);return this}transformDirection(e){for(let i=0,s=this.count;i<s;i++)Dr.fromBufferAttribute(this,i),Dr.transformDirection(e),this.setXYZ(i,Dr.x,Dr.y,Dr.z);return this}getComponent(e,i){let s=this.array[e*this.data.stride+this.offset+i];return this.normalized&&(s=Cr(s,this.array)),s}setComponent(e,i,s){return this.normalized&&(s=Tn(s,this.array)),this.data.array[e*this.data.stride+this.offset+i]=s,this}setX(e,i){return this.normalized&&(i=Tn(i,this.array)),this.data.array[e*this.data.stride+this.offset]=i,this}setY(e,i){return this.normalized&&(i=Tn(i,this.array)),this.data.array[e*this.data.stride+this.offset+1]=i,this}setZ(e,i){return this.normalized&&(i=Tn(i,this.array)),this.data.array[e*this.data.stride+this.offset+2]=i,this}setW(e,i){return this.normalized&&(i=Tn(i,this.array)),this.data.array[e*this.data.stride+this.offset+3]=i,this}getX(e){let i=this.data.array[e*this.data.stride+this.offset];return this.normalized&&(i=Cr(i,this.array)),i}getY(e){let i=this.data.array[e*this.data.stride+this.offset+1];return this.normalized&&(i=Cr(i,this.array)),i}getZ(e){let i=this.data.array[e*this.data.stride+this.offset+2];return this.normalized&&(i=Cr(i,this.array)),i}getW(e){let i=this.data.array[e*this.data.stride+this.offset+3];return this.normalized&&(i=Cr(i,this.array)),i}setXY(e,i,s){return e=e*this.data.stride+this.offset,this.normalized&&(i=Tn(i,this.array),s=Tn(s,this.array)),this.data.array[e+0]=i,this.data.array[e+1]=s,this}setXYZ(e,i,s,l){return e=e*this.data.stride+this.offset,this.normalized&&(i=Tn(i,this.array),s=Tn(s,this.array),l=Tn(l,this.array)),this.data.array[e+0]=i,this.data.array[e+1]=s,this.data.array[e+2]=l,this}setXYZW(e,i,s,l,h){return e=e*this.data.stride+this.offset,this.normalized&&(i=Tn(i,this.array),s=Tn(s,this.array),l=Tn(l,this.array),h=Tn(h,this.array)),this.data.array[e+0]=i,this.data.array[e+1]=s,this.data.array[e+2]=l,this.data.array[e+3]=h,this}clone(e){if(e===void 0){console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.");const i=[];for(let s=0;s<this.count;s++){const l=s*this.data.stride+this.offset;for(let h=0;h<this.itemSize;h++)i.push(this.data.array[l+h])}return new di(new this.array.constructor(i),this.itemSize,this.normalized)}else return e.interleavedBuffers===void 0&&(e.interleavedBuffers={}),e.interleavedBuffers[this.data.uuid]===void 0&&(e.interleavedBuffers[this.data.uuid]=this.data.clone(e)),new Ko(e.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized)}toJSON(e){if(e===void 0){console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.");const i=[];for(let s=0;s<this.count;s++){const l=s*this.data.stride+this.offset;for(let h=0;h<this.itemSize;h++)i.push(this.data.array[l+h])}return{itemSize:this.itemSize,type:this.array.constructor.name,array:i,normalized:this.normalized}}else return e.interleavedBuffers===void 0&&(e.interleavedBuffers={}),e.interleavedBuffers[this.data.uuid]===void 0&&(e.interleavedBuffers[this.data.uuid]=this.data.toJSON(e)),{isInterleavedBufferAttribute:!0,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized}}}class zm extends xr{constructor(e){super(),this.isSpriteMaterial=!0,this.type="SpriteMaterial",this.color=new It(16777215),this.map=null,this.alphaMap=null,this.rotation=0,this.sizeAttenuation=!0,this.transparent=!0,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.alphaMap=e.alphaMap,this.rotation=e.rotation,this.sizeAttenuation=e.sizeAttenuation,this.fog=e.fog,this}}let xc;const Yh=new re,vc=new re,yc=new re,Mc=new Ze,Zh=new Ze,Rv=new fn,Xf=new re,$h=new re,qf=new re,Cv=new Ze,km=new Ze,Pv=new Ze;class Iv extends $n{constructor(e=new zm){if(super(),this.isSprite=!0,this.type="Sprite",xc===void 0){xc=new Rn;const i=new Float32Array([-.5,-.5,0,0,0,.5,-.5,0,1,0,.5,.5,0,1,1,-.5,.5,0,0,1]),s=new Wf(i,5);xc.setIndex([0,1,2,0,2,3]),xc.setAttribute("position",new Ko(s,3,0,!1)),xc.setAttribute("uv",new Ko(s,2,3,!1))}this.geometry=xc,this.material=e,this.center=new Ze(.5,.5)}raycast(e,i){e.camera===null&&console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'),vc.setFromMatrixScale(this.matrixWorld),Rv.copy(e.camera.matrixWorld),this.modelViewMatrix.multiplyMatrices(e.camera.matrixWorldInverse,this.matrixWorld),yc.setFromMatrixPosition(this.modelViewMatrix),e.camera.isPerspectiveCamera&&this.material.sizeAttenuation===!1&&vc.multiplyScalar(-yc.z);const s=this.material.rotation;let l,h;s!==0&&(h=Math.cos(s),l=Math.sin(s));const f=this.center;Yf(Xf.set(-.5,-.5,0),yc,f,vc,l,h),Yf($h.set(.5,-.5,0),yc,f,vc,l,h),Yf(qf.set(.5,.5,0),yc,f,vc,l,h),Cv.set(0,0),km.set(1,0),Pv.set(1,1);let m=e.ray.intersectTriangle(Xf,$h,qf,!1,Yh);if(m===null&&(Yf($h.set(-.5,.5,0),yc,f,vc,l,h),km.set(0,1),m=e.ray.intersectTriangle(Xf,qf,$h,!1,Yh),m===null))return;const g=e.ray.origin.distanceTo(Yh);g<e.near||g>e.far||i.push({distance:g,point:Yh.clone(),uv:Vr.getInterpolation(Yh,Xf,$h,qf,Cv,km,Pv,new Ze),face:null,object:this})}copy(e,i){return super.copy(e,i),e.center!==void 0&&this.center.copy(e.center),this.material=e.material,this}}function Yf(u,e,i,s,l,h){Mc.subVectors(u,i).addScalar(.5).multiply(s),l!==void 0?(Zh.x=h*Mc.x-l*Mc.y,Zh.y=l*Mc.x+h*Mc.y):Zh.copy(Mc),u.copy(e),u.x+=Zh.x,u.y+=Zh.y,u.applyMatrix4(Rv)}const Zf=new re,Dv=new re;class Lv extends $n{constructor(){super(),this._currentLevel=0,this.type="LOD",Object.defineProperties(this,{levels:{enumerable:!0,value:[]},isLOD:{value:!0}}),this.autoUpdate=!0}copy(e){super.copy(e,!1);const i=e.levels;for(let s=0,l=i.length;s<l;s++){const h=i[s];this.addLevel(h.object.clone(),h.distance,h.hysteresis)}return this.autoUpdate=e.autoUpdate,this}addLevel(e,i=0,s=0){i=Math.abs(i);const l=this.levels;let h;for(h=0;h<l.length&&!(i<l[h].distance);h++);return l.splice(h,0,{distance:i,hysteresis:s,object:e}),this.add(e),this}removeLevel(e){const i=this.levels;for(let s=0;s<i.length;s++)if(i[s].distance===e){const l=i.splice(s,1);return this.remove(l[0].object),!0}return!1}getCurrentLevel(){return this._currentLevel}getObjectForDistance(e){const i=this.levels;if(i.length>0){let s,l;for(s=1,l=i.length;s<l;s++){let h=i[s].distance;if(i[s].object.visible&&(h-=h*i[s].hysteresis),e<h)break}return i[s-1].object}return null}raycast(e,i){if(this.levels.length>0){Zf.setFromMatrixPosition(this.matrixWorld);const l=e.ray.origin.distanceTo(Zf);this.getObjectForDistance(l).raycast(e,i)}}update(e){const i=this.levels;if(i.length>1){Zf.setFromMatrixPosition(e.matrixWorld),Dv.setFromMatrixPosition(this.matrixWorld);const s=Zf.distanceTo(Dv)/e.zoom;i[0].object.visible=!0;let l,h;for(l=1,h=i.length;l<h;l++){let f=i[l].distance;if(i[l].object.visible&&(f-=f*i[l].hysteresis),s>=f)i[l-1].object.visible=!1,i[l].object.visible=!0;else break}for(this._currentLevel=l-1;l<h;l++)i[l].object.visible=!1}}toJSON(e){const i=super.toJSON(e);this.autoUpdate===!1&&(i.object.autoUpdate=!1),i.object.levels=[];const s=this.levels;for(let l=0,h=s.length;l<h;l++){const f=s[l];i.object.levels.push({object:f.object.uuid,distance:f.distance,hysteresis:f.hysteresis})}return i}}const Uv=new re,Nv=new Zn,Fv=new Zn,YA=new re,Ov=new fn,$f=new re,Vm=new _r,Bv=new fn,Hm=new lc;class zv extends Wi{constructor(e,i){super(e,i),this.isSkinnedMesh=!0,this.type="SkinnedMesh",this.bindMode=we,this.bindMatrix=new fn,this.bindMatrixInverse=new fn,this.boundingBox=null,this.boundingSphere=null}computeBoundingBox(){const e=this.geometry;this.boundingBox===null&&(this.boundingBox=new Pr),this.boundingBox.makeEmpty();const i=e.getAttribute("position");for(let s=0;s<i.count;s++)this.getVertexPosition(s,$f),this.boundingBox.expandByPoint($f)}computeBoundingSphere(){const e=this.geometry;this.boundingSphere===null&&(this.boundingSphere=new _r),this.boundingSphere.makeEmpty();const i=e.getAttribute("position");for(let s=0;s<i.count;s++)this.getVertexPosition(s,$f),this.boundingSphere.expandByPoint($f)}copy(e,i){return super.copy(e,i),this.bindMode=e.bindMode,this.bindMatrix.copy(e.bindMatrix),this.bindMatrixInverse.copy(e.bindMatrixInverse),this.skeleton=e.skeleton,e.boundingBox!==null&&(this.boundingBox=e.boundingBox.clone()),e.boundingSphere!==null&&(this.boundingSphere=e.boundingSphere.clone()),this}raycast(e,i){const s=this.material,l=this.matrixWorld;s!==void 0&&(this.boundingSphere===null&&this.computeBoundingSphere(),Vm.copy(this.boundingSphere),Vm.applyMatrix4(l),e.ray.intersectsSphere(Vm)!==!1&&(Bv.copy(l).invert(),Hm.copy(e.ray).applyMatrix4(Bv),!(this.boundingBox!==null&&Hm.intersectsBox(this.boundingBox)===!1)&&this._computeIntersections(e,i,Hm)))}getVertexPosition(e,i){return super.getVertexPosition(e,i),this.applyBoneTransform(e,i),i}bind(e,i){this.skeleton=e,i===void 0&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),i=this.matrixWorld),this.bindMatrix.copy(i),this.bindMatrixInverse.copy(i).invert()}pose(){this.skeleton.pose()}normalizeSkinWeights(){const e=new Zn,i=this.geometry.attributes.skinWeight;for(let s=0,l=i.count;s<l;s++){e.fromBufferAttribute(i,s);const h=1/e.manhattanLength();h!==1/0?e.multiplyScalar(h):e.set(1,0,0,0),i.setXYZW(s,e.x,e.y,e.z,e.w)}}updateMatrixWorld(e){super.updateMatrixWorld(e),this.bindMode===we?this.bindMatrixInverse.copy(this.matrixWorld).invert():this.bindMode===Ye?this.bindMatrixInverse.copy(this.bindMatrix).invert():console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode)}applyBoneTransform(e,i){const s=this.skeleton,l=this.geometry;Nv.fromBufferAttribute(l.attributes.skinIndex,e),Fv.fromBufferAttribute(l.attributes.skinWeight,e),Uv.copy(i).applyMatrix4(this.bindMatrix),i.set(0,0,0);for(let h=0;h<4;h++){const f=Fv.getComponent(h);if(f!==0){const m=Nv.getComponent(h);Ov.multiplyMatrices(s.bones[m].matrixWorld,s.boneInverses[m]),i.addScaledVector(YA.copy(Uv).applyMatrix4(Ov),f)}}return i.applyMatrix4(this.bindMatrixInverse)}}class Gm extends $n{constructor(){super(),this.isBone=!0,this.type="Bone"}}class ea extends Li{constructor(e=null,i=1,s=1,l,h,f,m,g,y=kt,S=kt,w,T){super(null,f,m,g,y,S,l,h,w,T),this.isDataTexture=!0,this.image={data:e,width:i,height:s},this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}const kv=new fn,ZA=new fn;class Kf{constructor(e=[],i=[]){this.uuid=ts(),this.bones=e.slice(0),this.boneInverses=i,this.boneMatrices=null,this.boneTexture=null,this.init()}init(){const e=this.bones,i=this.boneInverses;if(this.boneMatrices=new Float32Array(e.length*16),i.length===0)this.calculateInverses();else if(e.length!==i.length){console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones."),this.boneInverses=[];for(let s=0,l=this.bones.length;s<l;s++)this.boneInverses.push(new fn)}}calculateInverses(){this.boneInverses.length=0;for(let e=0,i=this.bones.length;e<i;e++){const s=new fn;this.bones[e]&&s.copy(this.bones[e].matrixWorld).invert(),this.boneInverses.push(s)}}pose(){for(let e=0,i=this.bones.length;e<i;e++){const s=this.bones[e];s&&s.matrixWorld.copy(this.boneInverses[e]).invert()}for(let e=0,i=this.bones.length;e<i;e++){const s=this.bones[e];s&&(s.parent&&s.parent.isBone?(s.matrix.copy(s.parent.matrixWorld).invert(),s.matrix.multiply(s.matrixWorld)):s.matrix.copy(s.matrixWorld),s.matrix.decompose(s.position,s.quaternion,s.scale))}}update(){const e=this.bones,i=this.boneInverses,s=this.boneMatrices,l=this.boneTexture;for(let h=0,f=e.length;h<f;h++){const m=e[h]?e[h].matrixWorld:ZA;kv.multiplyMatrices(m,i[h]),kv.toArray(s,h*16)}l!==null&&(l.needsUpdate=!0)}clone(){return new Kf(this.bones,this.boneInverses)}computeBoneTexture(){let e=Math.sqrt(this.bones.length*4);e=Math.ceil(e/4)*4,e=Math.max(e,4);const i=new Float32Array(e*e*4);i.set(this.boneMatrices);const s=new ea(i,e,e,tr,Si);return s.needsUpdate=!0,this.boneMatrices=i,this.boneTexture=s,this}getBoneByName(e){for(let i=0,s=this.bones.length;i<s;i++){const l=this.bones[i];if(l.name===e)return l}}dispose(){this.boneTexture!==null&&(this.boneTexture.dispose(),this.boneTexture=null)}fromJSON(e,i){this.uuid=e.uuid;for(let s=0,l=e.bones.length;s<l;s++){const h=e.bones[s];let f=i[h];f===void 0&&(console.warn("THREE.Skeleton: No bone found with UUID:",h),f=new Gm),this.bones.push(f),this.boneInverses.push(new fn().fromArray(e.boneInverses[s]))}return this.init(),this}toJSON(){const e={metadata:{version:4.6,type:"Skeleton",generator:"Skeleton.toJSON"},bones:[],boneInverses:[]};e.uuid=this.uuid;const i=this.bones,s=this.boneInverses;for(let l=0,h=i.length;l<h;l++){const f=i[l];e.bones.push(f.uuid);const m=s[l];e.boneInverses.push(m.toArray())}return e}}class Sc extends di{constructor(e,i,s,l=1){super(e,i,s),this.isInstancedBufferAttribute=!0,this.meshPerAttribute=l}copy(e){return super.copy(e),this.meshPerAttribute=e.meshPerAttribute,this}toJSON(){const e=super.toJSON();return e.meshPerAttribute=this.meshPerAttribute,e.isInstancedBufferAttribute=!0,e}}const bc=new fn,Vv=new fn,Jf=[],Hv=new Pr,$A=new fn,Kh=new Wi,Jh=new _r;class Gv extends Wi{constructor(e,i,s){super(e,i),this.isInstancedMesh=!0,this.instanceMatrix=new Sc(new Float32Array(s*16),16),this.instanceColor=null,this.morphTexture=null,this.count=s,this.boundingBox=null,this.boundingSphere=null;for(let l=0;l<s;l++)this.setMatrixAt(l,$A)}computeBoundingBox(){const e=this.geometry,i=this.count;this.boundingBox===null&&(this.boundingBox=new Pr),e.boundingBox===null&&e.computeBoundingBox(),this.boundingBox.makeEmpty();for(let s=0;s<i;s++)this.getMatrixAt(s,bc),Hv.copy(e.boundingBox).applyMatrix4(bc),this.boundingBox.union(Hv)}computeBoundingSphere(){const e=this.geometry,i=this.count;this.boundingSphere===null&&(this.boundingSphere=new _r),e.boundingSphere===null&&e.computeBoundingSphere(),this.boundingSphere.makeEmpty();for(let s=0;s<i;s++)this.getMatrixAt(s,bc),Jh.copy(e.boundingSphere).applyMatrix4(bc),this.boundingSphere.union(Jh)}copy(e,i){return super.copy(e,i),this.instanceMatrix.copy(e.instanceMatrix),e.morphTexture!==null&&(this.morphTexture=e.morphTexture.clone()),e.instanceColor!==null&&(this.instanceColor=e.instanceColor.clone()),this.count=e.count,e.boundingBox!==null&&(this.boundingBox=e.boundingBox.clone()),e.boundingSphere!==null&&(this.boundingSphere=e.boundingSphere.clone()),this}getColorAt(e,i){i.fromArray(this.instanceColor.array,e*3)}getMatrixAt(e,i){i.fromArray(this.instanceMatrix.array,e*16)}getMorphAt(e,i){const s=i.morphTargetInfluences,l=this.morphTexture.source.data.data,h=s.length+1,f=e*h+1;for(let m=0;m<s.length;m++)s[m]=l[f+m]}raycast(e,i){const s=this.matrixWorld,l=this.count;if(Kh.geometry=this.geometry,Kh.material=this.material,Kh.material!==void 0&&(this.boundingSphere===null&&this.computeBoundingSphere(),Jh.copy(this.boundingSphere),Jh.applyMatrix4(s),e.ray.intersectsSphere(Jh)!==!1))for(let h=0;h<l;h++){this.getMatrixAt(h,bc),Vv.multiplyMatrices(s,bc),Kh.matrixWorld=Vv,Kh.raycast(e,Jf);for(let f=0,m=Jf.length;f<m;f++){const g=Jf[f];g.instanceId=h,g.object=this,i.push(g)}Jf.length=0}}setColorAt(e,i){this.instanceColor===null&&(this.instanceColor=new Sc(new Float32Array(this.instanceMatrix.count*3).fill(1),3)),i.toArray(this.instanceColor.array,e*3)}setMatrixAt(e,i){i.toArray(this.instanceMatrix.array,e*16)}setMorphAt(e,i){const s=i.morphTargetInfluences,l=s.length+1;this.morphTexture===null&&(this.morphTexture=new ea(new Float32Array(l*this.count),l,this.count,jl,Si));const h=this.morphTexture.source.data.data;let f=0;for(let y=0;y<s.length;y++)f+=s[y];const m=this.geometry.morphTargetsRelative?1:1-f,g=l*e;h[g]=m,h.set(s,g+1)}updateMorphTargets(){}dispose(){return this.dispatchEvent({type:"dispose"}),this.morphTexture!==null&&(this.morphTexture.dispose(),this.morphTexture=null),this}}const Wm=new re,KA=new re,JA=new wn;class ro{constructor(e=new re(1,0,0),i=0){this.isPlane=!0,this.normal=e,this.constant=i}set(e,i){return this.normal.copy(e),this.constant=i,this}setComponents(e,i,s,l){return this.normal.set(e,i,s),this.constant=l,this}setFromNormalAndCoplanarPoint(e,i){return this.normal.copy(e),this.constant=-i.dot(this.normal),this}setFromCoplanarPoints(e,i,s){const l=Wm.subVectors(s,i).cross(KA.subVectors(e,i)).normalize();return this.setFromNormalAndCoplanarPoint(l,e),this}copy(e){return this.normal.copy(e.normal),this.constant=e.constant,this}normalize(){const e=1/this.normal.length();return this.normal.multiplyScalar(e),this.constant*=e,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(e){return this.normal.dot(e)+this.constant}distanceToSphere(e){return this.distanceToPoint(e.center)-e.radius}projectPoint(e,i){return i.copy(e).addScaledVector(this.normal,-this.distanceToPoint(e))}intersectLine(e,i){const s=e.delta(Wm),l=this.normal.dot(s);if(l===0)return this.distanceToPoint(e.start)===0?i.copy(e.start):null;const h=-(e.start.dot(this.normal)+this.constant)/l;return h<0||h>1?null:i.copy(e.start).addScaledVector(s,h)}intersectsLine(e){const i=this.distanceToPoint(e.start),s=this.distanceToPoint(e.end);return i<0&&s>0||s<0&&i>0}intersectsBox(e){return e.intersectsPlane(this)}intersectsSphere(e){return e.intersectsPlane(this)}coplanarPoint(e){return e.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(e,i){const s=i||JA.getNormalMatrix(e),l=this.coplanarPoint(Wm).applyMatrix4(e),h=this.normal.applyMatrix3(s).normalize();return this.constant=-l.dot(h),this}translate(e){return this.constant-=e.dot(this.normal),this}equals(e){return e.normal.equals(this.normal)&&e.constant===this.constant}clone(){return new this.constructor().copy(this)}}const Jo=new _r,jf=new re;class jh{constructor(e=new ro,i=new ro,s=new ro,l=new ro,h=new ro,f=new ro){this.planes=[e,i,s,l,h,f]}set(e,i,s,l,h,f){const m=this.planes;return m[0].copy(e),m[1].copy(i),m[2].copy(s),m[3].copy(l),m[4].copy(h),m[5].copy(f),this}copy(e){const i=this.planes;for(let s=0;s<6;s++)i[s].copy(e.planes[s]);return this}setFromProjectionMatrix(e,i=Us){const s=this.planes,l=e.elements,h=l[0],f=l[1],m=l[2],g=l[3],y=l[4],S=l[5],w=l[6],T=l[7],R=l[8],I=l[9],F=l[10],D=l[11],C=l[12],q=l[13],G=l[14],H=l[15];if(s[0].setComponents(g-h,T-y,D-R,H-C).normalize(),s[1].setComponents(g+h,T+y,D+R,H+C).normalize(),s[2].setComponents(g+f,T+S,D+I,H+q).normalize(),s[3].setComponents(g-f,T-S,D-I,H-q).normalize(),s[4].setComponents(g-m,T-w,D-F,H-G).normalize(),i===Us)s[5].setComponents(g+m,T+w,D+F,H+G).normalize();else if(i===Oh)s[5].setComponents(m,w,F,G).normalize();else throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: "+i);return this}intersectsObject(e){if(e.boundingSphere!==void 0)e.boundingSphere===null&&e.computeBoundingSphere(),Jo.copy(e.boundingSphere).applyMatrix4(e.matrixWorld);else{const i=e.geometry;i.boundingSphere===null&&i.computeBoundingSphere(),Jo.copy(i.boundingSphere).applyMatrix4(e.matrixWorld)}return this.intersectsSphere(Jo)}intersectsSprite(e){return Jo.center.set(0,0,0),Jo.radius=.7071067811865476,Jo.applyMatrix4(e.matrixWorld),this.intersectsSphere(Jo)}intersectsSphere(e){const i=this.planes,s=e.center,l=-e.radius;for(let h=0;h<6;h++)if(i[h].distanceToPoint(s)<l)return!1;return!0}intersectsBox(e){const i=this.planes;for(let s=0;s<6;s++){const l=i[s];if(jf.x=l.normal.x>0?e.max.x:e.min.x,jf.y=l.normal.y>0?e.max.y:e.min.y,jf.z=l.normal.z>0?e.max.z:e.min.z,l.distanceToPoint(jf)<0)return!1}return!0}containsPoint(e){const i=this.planes;for(let s=0;s<6;s++)if(i[s].distanceToPoint(e)<0)return!1;return!0}clone(){return new this.constructor().copy(this)}}function Xm(u,e){return u-e}function jA(u,e){return u.z-e.z}function QA(u,e){return e.z-u.z}class e1{constructor(){this.index=0,this.pool=[],this.list=[]}push(e,i,s,l){const h=this.pool,f=this.list;this.index>=h.length&&h.push({start:-1,count:-1,z:-1,index:-1});const m=h[this.index];f.push(m),this.index++,m.start=e,m.count=i,m.z=s,m.index=l}reset(){this.list.length=0,this.index=0}}const Gr=new fn,t1=new It(1,1,1),qm=new jh,Qf=new Pr,jo=new _r,Qh=new re,Wv=new re,n1=new re,Ym=new e1,vr=new Wi,ed=[];function i1(u,e,i=0){const s=e.itemSize;if(u.isInterleavedBufferAttribute||u.array.constructor!==e.array.constructor){const l=u.count;for(let h=0;h<l;h++)for(let f=0;f<s;f++)e.setComponent(h+i,f,u.getComponent(h,f))}else e.array.set(u.array,i*s);e.needsUpdate=!0}function Qo(u,e){if(u.constructor!==e.constructor){const i=Math.min(u.length,e.length);for(let s=0;s<i;s++)e[s]=u[s]}else{const i=Math.min(u.length,e.length);e.set(new u.constructor(u.buffer,0,i))}}class Xv extends Wi{get maxInstanceCount(){return this._maxInstanceCount}get instanceCount(){return this._instanceInfo.length-this._availableInstanceIds.length}get unusedVertexCount(){return this._maxVertexCount-this._nextVertexStart}get unusedIndexCount(){return this._maxIndexCount-this._nextIndexStart}constructor(e,i,s=i*2,l){super(new Rn,l),this.isBatchedMesh=!0,this.perObjectFrustumCulled=!0,this.sortObjects=!0,this.boundingBox=null,this.boundingSphere=null,this.customSort=null,this._instanceInfo=[],this._geometryInfo=[],this._availableInstanceIds=[],this._availableGeometryIds=[],this._nextIndexStart=0,this._nextVertexStart=0,this._geometryCount=0,this._visibilityChanged=!0,this._geometryInitialized=!1,this._maxInstanceCount=e,this._maxVertexCount=i,this._maxIndexCount=s,this._multiDrawCounts=new Int32Array(e),this._multiDrawStarts=new Int32Array(e),this._multiDrawCount=0,this._multiDrawInstances=null,this._matricesTexture=null,this._indirectTexture=null,this._colorsTexture=null,this._initMatricesTexture(),this._initIndirectTexture()}_initMatricesTexture(){let e=Math.sqrt(this._maxInstanceCount*4);e=Math.ceil(e/4)*4,e=Math.max(e,4);const i=new Float32Array(e*e*4),s=new ea(i,e,e,tr,Si);this._matricesTexture=s}_initIndirectTexture(){let e=Math.sqrt(this._maxInstanceCount);e=Math.ceil(e);const i=new Uint32Array(e*e),s=new ea(i,e,e,Bo,Bi);this._indirectTexture=s}_initColorsTexture(){let e=Math.sqrt(this._maxInstanceCount);e=Math.ceil(e);const i=new Float32Array(e*e*4).fill(1),s=new ea(i,e,e,tr,Si);s.colorSpace=qn.workingColorSpace,this._colorsTexture=s}_initializeGeometry(e){const i=this.geometry,s=this._maxVertexCount,l=this._maxIndexCount;if(this._geometryInitialized===!1){for(const h in e.attributes){const f=e.getAttribute(h),{array:m,itemSize:g,normalized:y}=f,S=new m.constructor(s*g),w=new di(S,g,y);i.setAttribute(h,w)}if(e.getIndex()!==null){const h=s>65535?new Uint32Array(l):new Uint16Array(l);i.setIndex(new di(h,1))}this._geometryInitialized=!0}}_validateGeometry(e){const i=this.geometry;if(!!e.getIndex()!=!!i.getIndex())throw new Error('THREE.BatchedMesh: All geometries must consistently have "index".');for(const s in i.attributes){if(!e.hasAttribute(s))throw new Error(`THREE.BatchedMesh: Added geometry missing "${s}". All geometries must have consistent attributes.`);const l=e.getAttribute(s),h=i.getAttribute(s);if(l.itemSize!==h.itemSize||l.normalized!==h.normalized)throw new Error("THREE.BatchedMesh: All attributes must have a consistent itemSize and normalized value.")}}validateInstanceId(e){const i=this._instanceInfo;if(e<0||e>=i.length||i[e].active===!1)throw new Error(`THREE.BatchedMesh: Invalid instanceId ${e}. Instance is either out of range or has been deleted.`)}validateGeometryId(e){const i=this._geometryInfo;if(e<0||e>=i.length||i[e].active===!1)throw new Error(`THREE.BatchedMesh: Invalid geometryId ${e}. Geometry is either out of range or has been deleted.`)}setCustomSort(e){return this.customSort=e,this}computeBoundingBox(){this.boundingBox===null&&(this.boundingBox=new Pr);const e=this.boundingBox,i=this._instanceInfo;e.makeEmpty();for(let s=0,l=i.length;s<l;s++){if(i[s].active===!1)continue;const h=i[s].geometryIndex;this.getMatrixAt(s,Gr),this.getBoundingBoxAt(h,Qf).applyMatrix4(Gr),e.union(Qf)}}computeBoundingSphere(){this.boundingSphere===null&&(this.boundingSphere=new _r);const e=this.boundingSphere,i=this._instanceInfo;e.makeEmpty();for(let s=0,l=i.length;s<l;s++){if(i[s].active===!1)continue;const h=i[s].geometryIndex;this.getMatrixAt(s,Gr),this.getBoundingSphereAt(h,jo).applyMatrix4(Gr),e.union(jo)}}addInstance(e){if(this._instanceInfo.length>=this.maxInstanceCount&&this._availableInstanceIds.length===0)throw new Error("THREE.BatchedMesh: Maximum item count reached.");const s={visible:!0,active:!0,geometryIndex:e};let l=null;this._availableInstanceIds.length>0?(this._availableInstanceIds.sort(Xm),l=this._availableInstanceIds.shift(),this._instanceInfo[l]=s):(l=this._instanceInfo.length,this._instanceInfo.push(s));const h=this._matricesTexture;Gr.identity().toArray(h.image.data,l*16),h.needsUpdate=!0;const f=this._colorsTexture;return f&&(t1.toArray(f.image.data,l*4),f.needsUpdate=!0),this._visibilityChanged=!0,l}addGeometry(e,i=-1,s=-1){this._initializeGeometry(e),this._validateGeometry(e);const l={vertexStart:-1,vertexCount:-1,reservedVertexCount:-1,indexStart:-1,indexCount:-1,reservedIndexCount:-1,start:-1,count:-1,boundingBox:null,boundingSphere:null,active:!0},h=this._geometryInfo;l.vertexStart=this._nextVertexStart,l.reservedVertexCount=i===-1?e.getAttribute("position").count:i;const f=e.getIndex();if(f!==null&&(l.indexStart=this._nextIndexStart,l.reservedIndexCount=s===-1?f.count:s),l.indexStart!==-1&&l.indexStart+l.reservedIndexCount>this._maxIndexCount||l.vertexStart+l.reservedVertexCount>this._maxVertexCount)throw new Error("THREE.BatchedMesh: Reserved space request exceeds the maximum buffer size.");let g;return this._availableGeometryIds.length>0?(this._availableGeometryIds.sort(Xm),g=this._availableGeometryIds.shift(),h[g]=l):(g=this._geometryCount,this._geometryCount++,h.push(l)),this.setGeometryAt(g,e),this._nextIndexStart=l.indexStart+l.reservedIndexCount,this._nextVertexStart=l.vertexStart+l.reservedVertexCount,g}setGeometryAt(e,i){if(e>=this._geometryCount)throw new Error("THREE.BatchedMesh: Maximum geometry count reached.");this._validateGeometry(i);const s=this.geometry,l=s.getIndex()!==null,h=s.getIndex(),f=i.getIndex(),m=this._geometryInfo[e];if(l&&f.count>m.reservedIndexCount||i.attributes.position.count>m.reservedVertexCount)throw new Error("THREE.BatchedMesh: Reserved space not large enough for provided geometry.");const g=m.vertexStart,y=m.reservedVertexCount;m.vertexCount=i.getAttribute("position").count;for(const S in s.attributes){const w=i.getAttribute(S),T=s.getAttribute(S);i1(w,T,g);const R=w.itemSize;for(let I=w.count,F=y;I<F;I++){const D=g+I;for(let C=0;C<R;C++)T.setComponent(D,C,0)}T.needsUpdate=!0,T.addUpdateRange(g*R,y*R)}if(l){const S=m.indexStart,w=m.reservedIndexCount;m.indexCount=i.getIndex().count;for(let T=0;T<f.count;T++)h.setX(S+T,g+f.getX(T));for(let T=f.count,R=w;T<R;T++)h.setX(S+T,g);h.needsUpdate=!0,h.addUpdateRange(S,m.reservedIndexCount)}return m.start=l?m.indexStart:m.vertexStart,m.count=l?m.indexCount:m.vertexCount,m.boundingBox=null,i.boundingBox!==null&&(m.boundingBox=i.boundingBox.clone()),m.boundingSphere=null,i.boundingSphere!==null&&(m.boundingSphere=i.boundingSphere.clone()),this._visibilityChanged=!0,e}deleteGeometry(e){const i=this._geometryInfo;if(e>=i.length||i[e].active===!1)return this;const s=this._instanceInfo;for(let l=0,h=s.length;l<h;l++)s[l].geometryIndex===e&&this.deleteInstance(l);return i[e].active=!1,this._availableGeometryIds.push(e),this._visibilityChanged=!0,this}deleteInstance(e){return this.validateInstanceId(e),this._instanceInfo[e].active=!1,this._availableInstanceIds.push(e),this._visibilityChanged=!0,this}optimize(){let e=0,i=0;const s=this._geometryInfo,l=s.map((f,m)=>m).sort((f,m)=>s[f].vertexStart-s[m].vertexStart),h=this.geometry;for(let f=0,m=s.length;f<m;f++){const g=l[f],y=s[g];if(y.active!==!1){if(h.index!==null){if(y.indexStart!==i){const{indexStart:S,vertexStart:w,reservedIndexCount:T}=y,R=h.index,I=R.array,F=e-w;for(let D=S;D<S+T;D++)I[D]=I[D]+F;R.array.copyWithin(i,S,S+T),R.addUpdateRange(i,T),y.indexStart=i}i+=y.reservedIndexCount}if(y.vertexStart!==e){const{vertexStart:S,reservedVertexCount:w}=y,T=h.attributes;for(const R in T){const I=T[R],{array:F,itemSize:D}=I;F.copyWithin(e*D,S*D,(S+w)*D),I.addUpdateRange(e*D,w*D)}y.vertexStart=e}e+=y.reservedVertexCount,y.start=h.index?y.indexStart:y.vertexStart,this._nextIndexStart=h.index?y.indexStart+y.reservedIndexCount:0,this._nextVertexStart=y.vertexStart+y.reservedVertexCount}}return this}getBoundingBoxAt(e,i){if(e>=this._geometryCount)return null;const s=this.geometry,l=this._geometryInfo[e];if(l.boundingBox===null){const h=new Pr,f=s.index,m=s.attributes.position;for(let g=l.start,y=l.start+l.count;g<y;g++){let S=g;f&&(S=f.getX(S)),h.expandByPoint(Qh.fromBufferAttribute(m,S))}l.boundingBox=h}return i.copy(l.boundingBox),i}getBoundingSphereAt(e,i){if(e>=this._geometryCount)return null;const s=this.geometry,l=this._geometryInfo[e];if(l.boundingSphere===null){const h=new _r;this.getBoundingBoxAt(e,Qf),Qf.getCenter(h.center);const f=s.index,m=s.attributes.position;let g=0;for(let y=l.start,S=l.start+l.count;y<S;y++){let w=y;f&&(w=f.getX(w)),Qh.fromBufferAttribute(m,w),g=Math.max(g,h.center.distanceToSquared(Qh))}h.radius=Math.sqrt(g),l.boundingSphere=h}return i.copy(l.boundingSphere),i}setMatrixAt(e,i){this.validateInstanceId(e);const s=this._matricesTexture,l=this._matricesTexture.image.data;return i.toArray(l,e*16),s.needsUpdate=!0,this}getMatrixAt(e,i){return this.validateInstanceId(e),i.fromArray(this._matricesTexture.image.data,e*16)}setColorAt(e,i){return this.validateInstanceId(e),this._colorsTexture===null&&this._initColorsTexture(),i.toArray(this._colorsTexture.image.data,e*4),this._colorsTexture.needsUpdate=!0,this}getColorAt(e,i){return this.validateInstanceId(e),i.fromArray(this._colorsTexture.image.data,e*4)}setVisibleAt(e,i){return this.validateInstanceId(e),this._instanceInfo[e].visible===i?this:(this._instanceInfo[e].visible=i,this._visibilityChanged=!0,this)}getVisibleAt(e){return this.validateInstanceId(e),this._instanceInfo[e].visible}setGeometryIdAt(e,i){return this.validateInstanceId(e),this.validateGeometryId(i),this._instanceInfo[e].geometryIndex=i,this}getGeometryIdAt(e){return this.validateInstanceId(e),this._instanceInfo[e].geometryIndex}getGeometryRangeAt(e,i={}){this.validateGeometryId(e);const s=this._geometryInfo[e];return i.vertexStart=s.vertexStart,i.vertexCount=s.vertexCount,i.reservedVertexCount=s.reservedVertexCount,i.indexStart=s.indexStart,i.indexCount=s.indexCount,i.reservedIndexCount=s.reservedIndexCount,i.start=s.start,i.count=s.count,i}setInstanceCount(e){const i=this._availableInstanceIds,s=this._instanceInfo;for(i.sort(Xm);i[i.length-1]===s.length;)s.pop(),i.pop();if(e<s.length)throw new Error(`BatchedMesh: Instance ids outside the range ${e} are being used. Cannot shrink instance count.`);const l=new Int32Array(e),h=new Int32Array(e);Qo(this._multiDrawCounts,l),Qo(this._multiDrawStarts,h),this._multiDrawCounts=l,this._multiDrawStarts=h,this._maxInstanceCount=e;const f=this._indirectTexture,m=this._matricesTexture,g=this._colorsTexture;f.dispose(),this._initIndirectTexture(),Qo(f.image.data,this._indirectTexture.image.data),m.dispose(),this._initMatricesTexture(),Qo(m.image.data,this._matricesTexture.image.data),g&&(g.dispose(),this._initColorsTexture(),Qo(g.image.data,this._colorsTexture.image.data))}setGeometrySize(e,i){const s=[...this._geometryInfo].filter(m=>m.active);if(Math.max(...s.map(m=>m.vertexStart+m.reservedVertexCount))>e)throw new Error(`BatchedMesh: Geometry vertex values are being used outside the range ${i}. Cannot shrink further.`);if(this.geometry.index&&Math.max(...s.map(g=>g.indexStart+g.reservedIndexCount))>i)throw new Error(`BatchedMesh: Geometry index values are being used outside the range ${i}. Cannot shrink further.`);const h=this.geometry;h.dispose(),this._maxVertexCount=e,this._maxIndexCount=i,this._geometryInitialized&&(this._geometryInitialized=!1,this.geometry=new Rn,this._initializeGeometry(h));const f=this.geometry;h.index&&Qo(h.index.array,f.index.array);for(const m in h.attributes)Qo(h.attributes[m].array,f.attributes[m].array)}raycast(e,i){const s=this._instanceInfo,l=this._geometryInfo,h=this.matrixWorld,f=this.geometry;vr.material=this.material,vr.geometry.index=f.index,vr.geometry.attributes=f.attributes,vr.geometry.boundingBox===null&&(vr.geometry.boundingBox=new Pr),vr.geometry.boundingSphere===null&&(vr.geometry.boundingSphere=new _r);for(let m=0,g=s.length;m<g;m++){if(!s[m].visible||!s[m].active)continue;const y=s[m].geometryIndex,S=l[y];vr.geometry.setDrawRange(S.start,S.count),this.getMatrixAt(m,vr.matrixWorld).premultiply(h),this.getBoundingBoxAt(y,vr.geometry.boundingBox),this.getBoundingSphereAt(y,vr.geometry.boundingSphere),vr.raycast(e,ed);for(let w=0,T=ed.length;w<T;w++){const R=ed[w];R.object=this,R.batchId=m,i.push(R)}ed.length=0}vr.material=null,vr.geometry.index=null,vr.geometry.attributes={},vr.geometry.setDrawRange(0,1/0)}copy(e){return super.copy(e),this.geometry=e.geometry.clone(),this.perObjectFrustumCulled=e.perObjectFrustumCulled,this.sortObjects=e.sortObjects,this.boundingBox=e.boundingBox!==null?e.boundingBox.clone():null,this.boundingSphere=e.boundingSphere!==null?e.boundingSphere.clone():null,this._geometryInfo=e._geometryInfo.map(i=>({...i,boundingBox:i.boundingBox!==null?i.boundingBox.clone():null,boundingSphere:i.boundingSphere!==null?i.boundingSphere.clone():null})),this._instanceInfo=e._instanceInfo.map(i=>({...i})),this._maxInstanceCount=e._maxInstanceCount,this._maxVertexCount=e._maxVertexCount,this._maxIndexCount=e._maxIndexCount,this._geometryInitialized=e._geometryInitialized,this._geometryCount=e._geometryCount,this._multiDrawCounts=e._multiDrawCounts.slice(),this._multiDrawStarts=e._multiDrawStarts.slice(),this._matricesTexture=e._matricesTexture.clone(),this._matricesTexture.image.data=this._matricesTexture.image.data.slice(),this._colorsTexture!==null&&(this._colorsTexture=e._colorsTexture.clone(),this._colorsTexture.image.data=this._colorsTexture.image.data.slice()),this}dispose(){return this.geometry.dispose(),this._matricesTexture.dispose(),this._matricesTexture=null,this._indirectTexture.dispose(),this._indirectTexture=null,this._colorsTexture!==null&&(this._colorsTexture.dispose(),this._colorsTexture=null),this}onBeforeRender(e,i,s,l,h){if(!this._visibilityChanged&&!this.perObjectFrustumCulled&&!this.sortObjects)return;const f=l.getIndex(),m=f===null?1:f.array.BYTES_PER_ELEMENT,g=this._instanceInfo,y=this._multiDrawStarts,S=this._multiDrawCounts,w=this._geometryInfo,T=this.perObjectFrustumCulled,R=this._indirectTexture,I=R.image.data;T&&(Gr.multiplyMatrices(s.projectionMatrix,s.matrixWorldInverse).multiply(this.matrixWorld),qm.setFromProjectionMatrix(Gr,e.coordinateSystem));let F=0;if(this.sortObjects){Gr.copy(this.matrixWorld).invert(),Qh.setFromMatrixPosition(s.matrixWorld).applyMatrix4(Gr),Wv.set(0,0,-1).transformDirection(s.matrixWorld).transformDirection(Gr);for(let q=0,G=g.length;q<G;q++)if(g[q].visible&&g[q].active){const H=g[q].geometryIndex;this.getMatrixAt(q,Gr),this.getBoundingSphereAt(H,jo).applyMatrix4(Gr);let le=!1;if(T&&(le=!qm.intersectsSphere(jo)),!le){const ne=w[H],oe=n1.subVectors(jo.center,Qh).dot(Wv);Ym.push(ne.start,ne.count,oe,q)}}const D=Ym.list,C=this.customSort;C===null?D.sort(h.transparent?QA:jA):C.call(this,D,s);for(let q=0,G=D.length;q<G;q++){const H=D[q];y[F]=H.start*m,S[F]=H.count,I[F]=H.index,F++}Ym.reset()}else for(let D=0,C=g.length;D<C;D++)if(g[D].visible&&g[D].active){const q=g[D].geometryIndex;let G=!1;if(T&&(this.getMatrixAt(D,Gr),this.getBoundingSphereAt(q,jo).applyMatrix4(Gr),G=!qm.intersectsSphere(jo)),!G){const H=w[q];y[F]=H.start*m,S[F]=H.count,I[F]=D,F++}}R.needsUpdate=!0,this._multiDrawCount=F,this._visibilityChanged=!1}onBeforeShadow(e,i,s,l,h,f){this.onBeforeRender(e,null,l,h,f)}}class Lr extends xr{constructor(e){super(),this.isLineBasicMaterial=!0,this.type="LineBasicMaterial",this.color=new It(16777215),this.map=null,this.linewidth=1,this.linecap="round",this.linejoin="round",this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.linewidth=e.linewidth,this.linecap=e.linecap,this.linejoin=e.linejoin,this.fog=e.fog,this}}const td=new re,nd=new re,qv=new fn,eu=new lc,id=new _r,Zm=new re,Yv=new re;class so extends $n{constructor(e=new Rn,i=new Lr){super(),this.isLine=!0,this.type="Line",this.geometry=e,this.material=i,this.updateMorphTargets()}copy(e,i){return super.copy(e,i),this.material=Array.isArray(e.material)?e.material.slice():e.material,this.geometry=e.geometry,this}computeLineDistances(){const e=this.geometry;if(e.index===null){const i=e.attributes.position,s=[0];for(let l=1,h=i.count;l<h;l++)td.fromBufferAttribute(i,l-1),nd.fromBufferAttribute(i,l),s[l]=s[l-1],s[l]+=td.distanceTo(nd);e.setAttribute("lineDistance",new qt(s,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");return this}raycast(e,i){const s=this.geometry,l=this.matrixWorld,h=e.params.Line.threshold,f=s.drawRange;if(s.boundingSphere===null&&s.computeBoundingSphere(),id.copy(s.boundingSphere),id.applyMatrix4(l),id.radius+=h,e.ray.intersectsSphere(id)===!1)return;qv.copy(l).invert(),eu.copy(e.ray).applyMatrix4(qv);const m=h/((this.scale.x+this.scale.y+this.scale.z)/3),g=m*m,y=this.isLineSegments?2:1,S=s.index,T=s.attributes.position;if(S!==null){const R=Math.max(0,f.start),I=Math.min(S.count,f.start+f.count);for(let F=R,D=I-1;F<D;F+=y){const C=S.getX(F),q=S.getX(F+1),G=rd(this,e,eu,g,C,q);G&&i.push(G)}if(this.isLineLoop){const F=S.getX(I-1),D=S.getX(R),C=rd(this,e,eu,g,F,D);C&&i.push(C)}}else{const R=Math.max(0,f.start),I=Math.min(T.count,f.start+f.count);for(let F=R,D=I-1;F<D;F+=y){const C=rd(this,e,eu,g,F,F+1);C&&i.push(C)}if(this.isLineLoop){const F=rd(this,e,eu,g,I-1,R);F&&i.push(F)}}}updateMorphTargets(){const i=this.geometry.morphAttributes,s=Object.keys(i);if(s.length>0){const l=i[s[0]];if(l!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let h=0,f=l.length;h<f;h++){const m=l[h].name||String(h);this.morphTargetInfluences.push(0),this.morphTargetDictionary[m]=h}}}}}function rd(u,e,i,s,l,h){const f=u.geometry.attributes.position;if(td.fromBufferAttribute(f,l),nd.fromBufferAttribute(f,h),i.distanceSqToSegment(td,nd,Zm,Yv)>s)return;Zm.applyMatrix4(u.matrixWorld);const g=e.ray.origin.distanceTo(Zm);if(!(g<e.near||g>e.far))return{distance:g,point:Yv.clone().applyMatrix4(u.matrixWorld),index:l,face:null,faceIndex:null,barycoord:null,object:u}}const Zv=new re,$v=new re;class ta extends so{constructor(e,i){super(e,i),this.isLineSegments=!0,this.type="LineSegments"}computeLineDistances(){const e=this.geometry;if(e.index===null){const i=e.attributes.position,s=[];for(let l=0,h=i.count;l<h;l+=2)Zv.fromBufferAttribute(i,l),$v.fromBufferAttribute(i,l+1),s[l]=l===0?0:s[l-1],s[l+1]=s[l]+Zv.distanceTo($v);e.setAttribute("lineDistance",new qt(s,1))}else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");return this}}class Kv extends so{constructor(e,i){super(e,i),this.isLineLoop=!0,this.type="LineLoop"}}class $m extends xr{constructor(e){super(),this.isPointsMaterial=!0,this.type="PointsMaterial",this.color=new It(16777215),this.map=null,this.alphaMap=null,this.size=1,this.sizeAttenuation=!0,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.alphaMap=e.alphaMap,this.size=e.size,this.sizeAttenuation=e.sizeAttenuation,this.fog=e.fog,this}}const Jv=new fn,Km=new lc,sd=new _r,ad=new re;class jv extends $n{constructor(e=new Rn,i=new $m){super(),this.isPoints=!0,this.type="Points",this.geometry=e,this.material=i,this.updateMorphTargets()}copy(e,i){return super.copy(e,i),this.material=Array.isArray(e.material)?e.material.slice():e.material,this.geometry=e.geometry,this}raycast(e,i){const s=this.geometry,l=this.matrixWorld,h=e.params.Points.threshold,f=s.drawRange;if(s.boundingSphere===null&&s.computeBoundingSphere(),sd.copy(s.boundingSphere),sd.applyMatrix4(l),sd.radius+=h,e.ray.intersectsSphere(sd)===!1)return;Jv.copy(l).invert(),Km.copy(e.ray).applyMatrix4(Jv);const m=h/((this.scale.x+this.scale.y+this.scale.z)/3),g=m*m,y=s.index,w=s.attributes.position;if(y!==null){const T=Math.max(0,f.start),R=Math.min(y.count,f.start+f.count);for(let I=T,F=R;I<F;I++){const D=y.getX(I);ad.fromBufferAttribute(w,D),Qv(ad,D,g,l,e,i,this)}}else{const T=Math.max(0,f.start),R=Math.min(w.count,f.start+f.count);for(let I=T,F=R;I<F;I++)ad.fromBufferAttribute(w,I),Qv(ad,I,g,l,e,i,this)}}updateMorphTargets(){const i=this.geometry.morphAttributes,s=Object.keys(i);if(s.length>0){const l=i[s[0]];if(l!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let h=0,f=l.length;h<f;h++){const m=l[h].name||String(h);this.morphTargetInfluences.push(0),this.morphTargetDictionary[m]=h}}}}}function Qv(u,e,i,s,l,h,f){const m=Km.distanceSqToPoint(u);if(m<i){const g=new re;Km.closestPointToPoint(u,g),g.applyMatrix4(s);const y=l.ray.origin.distanceTo(g);if(y<l.near||y>l.far)return;h.push({distance:y,distanceToRay:Math.sqrt(m),point:g,index:e,face:null,faceIndex:null,barycoord:null,object:f})}}class Ec extends $n{constructor(){super(),this.isGroup=!0,this.type="Group"}}class r1 extends Li{constructor(e,i,s,l,h,f,m,g,y){super(e,i,s,l,h,f,m,g,y),this.isVideoTexture=!0,this.minFilter=f!==void 0?f:pe,this.magFilter=h!==void 0?h:pe,this.generateMipmaps=!1;const S=this;function w(){S.needsUpdate=!0,e.requestVideoFrameCallback(w)}"requestVideoFrameCallback"in e&&e.requestVideoFrameCallback(w)}clone(){return new this.constructor(this.image).copy(this)}update(){const e=this.image;"requestVideoFrameCallback"in e===!1&&e.readyState>=e.HAVE_CURRENT_DATA&&(this.needsUpdate=!0)}}class s1 extends Li{constructor(e,i){super({width:e,height:i}),this.isFramebufferTexture=!0,this.magFilter=kt,this.minFilter=kt,this.generateMipmaps=!1,this.needsUpdate=!0}}class od extends Li{constructor(e,i,s,l,h,f,m,g,y,S,w,T){super(null,f,m,g,y,S,l,h,w,T),this.isCompressedTexture=!0,this.image={width:i,height:s},this.mipmaps=e,this.flipY=!1,this.generateMipmaps=!1}}class a1 extends od{constructor(e,i,s,l,h,f){super(e,i,s,h,f),this.isCompressedArrayTexture=!0,this.image.depth=l,this.wrapR=xt,this.layerUpdates=new Set}addLayerUpdate(e){this.layerUpdates.add(e)}clearLayerUpdates(){this.layerUpdates.clear()}}class o1 extends od{constructor(e,i,s){super(void 0,e[0].width,e[0].height,i,s,Ve),this.isCompressedCubeTexture=!0,this.isCubeTexture=!0,this.image=e}}class l1 extends Li{constructor(e,i,s,l,h,f,m,g,y){super(e,i,s,l,h,f,m,g,y),this.isCanvasTexture=!0,this.needsUpdate=!0}}class Jm extends Li{constructor(e,i,s,l,h,f,m,g,y,S=Ks){if(S!==Ks&&S!==_a)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");s===void 0&&S===Ks&&(s=Bi),s===void 0&&S===_a&&(s=Ds),super(null,l,h,f,m,g,S,s,y),this.isDepthTexture=!0,this.image={width:e,height:i},this.magFilter=m!==void 0?m:kt,this.minFilter=g!==void 0?g:kt,this.flipY=!1,this.generateMipmaps=!1,this.compareFunction=null}copy(e){return super.copy(e),this.compareFunction=e.compareFunction,this}toJSON(e){const i=super.toJSON(e);return this.compareFunction!==null&&(i.compareFunction=this.compareFunction),i}}class zs{constructor(){this.type="Curve",this.arcLengthDivisions=200}getPoint(){return console.warn("THREE.Curve: .getPoint() not implemented."),null}getPointAt(e,i){const s=this.getUtoTmapping(e);return this.getPoint(s,i)}getPoints(e=5){const i=[];for(let s=0;s<=e;s++)i.push(this.getPoint(s/e));return i}getSpacedPoints(e=5){const i=[];for(let s=0;s<=e;s++)i.push(this.getPointAt(s/e));return i}getLength(){const e=this.getLengths();return e[e.length-1]}getLengths(e=this.arcLengthDivisions){if(this.cacheArcLengths&&this.cacheArcLengths.length===e+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;const i=[];let s,l=this.getPoint(0),h=0;i.push(0);for(let f=1;f<=e;f++)s=this.getPoint(f/e),h+=s.distanceTo(l),i.push(h),l=s;return this.cacheArcLengths=i,i}updateArcLengths(){this.needsUpdate=!0,this.getLengths()}getUtoTmapping(e,i){const s=this.getLengths();let l=0;const h=s.length;let f;i?f=i:f=e*s[h-1];let m=0,g=h-1,y;for(;m<=g;)if(l=Math.floor(m+(g-m)/2),y=s[l]-f,y<0)m=l+1;else if(y>0)g=l-1;else{g=l;break}if(l=g,s[l]===f)return l/(h-1);const S=s[l],T=s[l+1]-S,R=(f-S)/T;return(l+R)/(h-1)}getTangent(e,i){let l=e-1e-4,h=e+1e-4;l<0&&(l=0),h>1&&(h=1);const f=this.getPoint(l),m=this.getPoint(h),g=i||(f.isVector2?new Ze:new re);return g.copy(m).sub(f).normalize(),g}getTangentAt(e,i){const s=this.getUtoTmapping(e);return this.getTangent(s,i)}computeFrenetFrames(e,i){const s=new re,l=[],h=[],f=[],m=new re,g=new fn;for(let R=0;R<=e;R++){const I=R/e;l[R]=this.getTangentAt(I,new re)}h[0]=new re,f[0]=new re;let y=Number.MAX_VALUE;const S=Math.abs(l[0].x),w=Math.abs(l[0].y),T=Math.abs(l[0].z);S<=y&&(y=S,s.set(1,0,0)),w<=y&&(y=w,s.set(0,1,0)),T<=y&&s.set(0,0,1),m.crossVectors(l[0],s).normalize(),h[0].crossVectors(l[0],m),f[0].crossVectors(l[0],h[0]);for(let R=1;R<=e;R++){if(h[R]=h[R-1].clone(),f[R]=f[R-1].clone(),m.crossVectors(l[R-1],l[R]),m.length()>Number.EPSILON){m.normalize();const I=Math.acos(bn(l[R-1].dot(l[R]),-1,1));h[R].applyMatrix4(g.makeRotationAxis(m,I))}f[R].crossVectors(l[R],h[R])}if(i===!0){let R=Math.acos(bn(h[0].dot(h[e]),-1,1));R/=e,l[0].dot(m.crossVectors(h[0],h[e]))>0&&(R=-R);for(let I=1;I<=e;I++)h[I].applyMatrix4(g.makeRotationAxis(l[I],R*I)),f[I].crossVectors(l[I],h[I])}return{tangents:l,normals:h,binormals:f}}clone(){return new this.constructor().copy(this)}copy(e){return this.arcLengthDivisions=e.arcLengthDivisions,this}toJSON(){const e={metadata:{version:4.6,type:"Curve",generator:"Curve.toJSON"}};return e.arcLengthDivisions=this.arcLengthDivisions,e.type=this.type,e}fromJSON(e){return this.arcLengthDivisions=e.arcLengthDivisions,this}}class ld extends zs{constructor(e=0,i=0,s=1,l=1,h=0,f=Math.PI*2,m=!1,g=0){super(),this.isEllipseCurve=!0,this.type="EllipseCurve",this.aX=e,this.aY=i,this.xRadius=s,this.yRadius=l,this.aStartAngle=h,this.aEndAngle=f,this.aClockwise=m,this.aRotation=g}getPoint(e,i=new Ze){const s=i,l=Math.PI*2;let h=this.aEndAngle-this.aStartAngle;const f=Math.abs(h)<Number.EPSILON;for(;h<0;)h+=l;for(;h>l;)h-=l;h<Number.EPSILON&&(f?h=0:h=l),this.aClockwise===!0&&!f&&(h===l?h=-l:h=h-l);const m=this.aStartAngle+e*h;let g=this.aX+this.xRadius*Math.cos(m),y=this.aY+this.yRadius*Math.sin(m);if(this.aRotation!==0){const S=Math.cos(this.aRotation),w=Math.sin(this.aRotation),T=g-this.aX,R=y-this.aY;g=T*S-R*w+this.aX,y=T*w+R*S+this.aY}return s.set(g,y)}copy(e){return super.copy(e),this.aX=e.aX,this.aY=e.aY,this.xRadius=e.xRadius,this.yRadius=e.yRadius,this.aStartAngle=e.aStartAngle,this.aEndAngle=e.aEndAngle,this.aClockwise=e.aClockwise,this.aRotation=e.aRotation,this}toJSON(){const e=super.toJSON();return e.aX=this.aX,e.aY=this.aY,e.xRadius=this.xRadius,e.yRadius=this.yRadius,e.aStartAngle=this.aStartAngle,e.aEndAngle=this.aEndAngle,e.aClockwise=this.aClockwise,e.aRotation=this.aRotation,e}fromJSON(e){return super.fromJSON(e),this.aX=e.aX,this.aY=e.aY,this.xRadius=e.xRadius,this.yRadius=e.yRadius,this.aStartAngle=e.aStartAngle,this.aEndAngle=e.aEndAngle,this.aClockwise=e.aClockwise,this.aRotation=e.aRotation,this}}class ey extends ld{constructor(e,i,s,l,h,f){super(e,i,s,s,l,h,f),this.isArcCurve=!0,this.type="ArcCurve"}}function jm(){let u=0,e=0,i=0,s=0;function l(h,f,m,g){u=h,e=m,i=-3*h+3*f-2*m-g,s=2*h-2*f+m+g}return{initCatmullRom:function(h,f,m,g,y){l(f,m,y*(m-h),y*(g-f))},initNonuniformCatmullRom:function(h,f,m,g,y,S,w){let T=(f-h)/y-(m-h)/(y+S)+(m-f)/S,R=(m-f)/S-(g-f)/(S+w)+(g-m)/w;T*=S,R*=S,l(f,m,T,R)},calc:function(h){const f=h*h,m=f*h;return u+e*h+i*f+s*m}}}const cd=new re,Qm=new jm,e_=new jm,t_=new jm;class ty extends zs{constructor(e=[],i=!1,s="centripetal",l=.5){super(),this.isCatmullRomCurve3=!0,this.type="CatmullRomCurve3",this.points=e,this.closed=i,this.curveType=s,this.tension=l}getPoint(e,i=new re){const s=i,l=this.points,h=l.length,f=(h-(this.closed?0:1))*e;let m=Math.floor(f),g=f-m;this.closed?m+=m>0?0:(Math.floor(Math.abs(m)/h)+1)*h:g===0&&m===h-1&&(m=h-2,g=1);let y,S;this.closed||m>0?y=l[(m-1)%h]:(cd.subVectors(l[0],l[1]).add(l[0]),y=cd);const w=l[m%h],T=l[(m+1)%h];if(this.closed||m+2<h?S=l[(m+2)%h]:(cd.subVectors(l[h-1],l[h-2]).add(l[h-1]),S=cd),this.curveType==="centripetal"||this.curveType==="chordal"){const R=this.curveType==="chordal"?.5:.25;let I=Math.pow(y.distanceToSquared(w),R),F=Math.pow(w.distanceToSquared(T),R),D=Math.pow(T.distanceToSquared(S),R);F<1e-4&&(F=1),I<1e-4&&(I=F),D<1e-4&&(D=F),Qm.initNonuniformCatmullRom(y.x,w.x,T.x,S.x,I,F,D),e_.initNonuniformCatmullRom(y.y,w.y,T.y,S.y,I,F,D),t_.initNonuniformCatmullRom(y.z,w.z,T.z,S.z,I,F,D)}else this.curveType==="catmullrom"&&(Qm.initCatmullRom(y.x,w.x,T.x,S.x,this.tension),e_.initCatmullRom(y.y,w.y,T.y,S.y,this.tension),t_.initCatmullRom(y.z,w.z,T.z,S.z,this.tension));return s.set(Qm.calc(g),e_.calc(g),t_.calc(g)),s}copy(e){super.copy(e),this.points=[];for(let i=0,s=e.points.length;i<s;i++){const l=e.points[i];this.points.push(l.clone())}return this.closed=e.closed,this.curveType=e.curveType,this.tension=e.tension,this}toJSON(){const e=super.toJSON();e.points=[];for(let i=0,s=this.points.length;i<s;i++){const l=this.points[i];e.points.push(l.toArray())}return e.closed=this.closed,e.curveType=this.curveType,e.tension=this.tension,e}fromJSON(e){super.fromJSON(e),this.points=[];for(let i=0,s=e.points.length;i<s;i++){const l=e.points[i];this.points.push(new re().fromArray(l))}return this.closed=e.closed,this.curveType=e.curveType,this.tension=e.tension,this}}function ny(u,e,i,s,l){const h=(s-e)*.5,f=(l-i)*.5,m=u*u,g=u*m;return(2*i-2*s+h+f)*g+(-3*i+3*s-2*h-f)*m+h*u+i}function c1(u,e){const i=1-u;return i*i*e}function h1(u,e){return 2*(1-u)*u*e}function u1(u,e){return u*u*e}function tu(u,e,i,s){return c1(u,e)+h1(u,i)+u1(u,s)}function f1(u,e){const i=1-u;return i*i*i*e}function d1(u,e){const i=1-u;return 3*i*i*u*e}function p1(u,e){return 3*(1-u)*u*u*e}function m1(u,e){return u*u*u*e}function nu(u,e,i,s,l){return f1(u,e)+d1(u,i)+p1(u,s)+m1(u,l)}class n_ extends zs{constructor(e=new Ze,i=new Ze,s=new Ze,l=new Ze){super(),this.isCubicBezierCurve=!0,this.type="CubicBezierCurve",this.v0=e,this.v1=i,this.v2=s,this.v3=l}getPoint(e,i=new Ze){const s=i,l=this.v0,h=this.v1,f=this.v2,m=this.v3;return s.set(nu(e,l.x,h.x,f.x,m.x),nu(e,l.y,h.y,f.y,m.y)),s}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this.v3.copy(e.v3),this}toJSON(){const e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e.v3=this.v3.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this.v3.fromArray(e.v3),this}}class iy extends zs{constructor(e=new re,i=new re,s=new re,l=new re){super(),this.isCubicBezierCurve3=!0,this.type="CubicBezierCurve3",this.v0=e,this.v1=i,this.v2=s,this.v3=l}getPoint(e,i=new re){const s=i,l=this.v0,h=this.v1,f=this.v2,m=this.v3;return s.set(nu(e,l.x,h.x,f.x,m.x),nu(e,l.y,h.y,f.y,m.y),nu(e,l.z,h.z,f.z,m.z)),s}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this.v3.copy(e.v3),this}toJSON(){const e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e.v3=this.v3.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this.v3.fromArray(e.v3),this}}class i_ extends zs{constructor(e=new Ze,i=new Ze){super(),this.isLineCurve=!0,this.type="LineCurve",this.v1=e,this.v2=i}getPoint(e,i=new Ze){const s=i;return e===1?s.copy(this.v2):(s.copy(this.v2).sub(this.v1),s.multiplyScalar(e).add(this.v1)),s}getPointAt(e,i){return this.getPoint(e,i)}getTangent(e,i=new Ze){return i.subVectors(this.v2,this.v1).normalize()}getTangentAt(e,i){return this.getTangent(e,i)}copy(e){return super.copy(e),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}class ry extends zs{constructor(e=new re,i=new re){super(),this.isLineCurve3=!0,this.type="LineCurve3",this.v1=e,this.v2=i}getPoint(e,i=new re){const s=i;return e===1?s.copy(this.v2):(s.copy(this.v2).sub(this.v1),s.multiplyScalar(e).add(this.v1)),s}getPointAt(e,i){return this.getPoint(e,i)}getTangent(e,i=new re){return i.subVectors(this.v2,this.v1).normalize()}getTangentAt(e,i){return this.getTangent(e,i)}copy(e){return super.copy(e),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}class r_ extends zs{constructor(e=new Ze,i=new Ze,s=new Ze){super(),this.isQuadraticBezierCurve=!0,this.type="QuadraticBezierCurve",this.v0=e,this.v1=i,this.v2=s}getPoint(e,i=new Ze){const s=i,l=this.v0,h=this.v1,f=this.v2;return s.set(tu(e,l.x,h.x,f.x),tu(e,l.y,h.y,f.y)),s}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}class s_ extends zs{constructor(e=new re,i=new re,s=new re){super(),this.isQuadraticBezierCurve3=!0,this.type="QuadraticBezierCurve3",this.v0=e,this.v1=i,this.v2=s}getPoint(e,i=new re){const s=i,l=this.v0,h=this.v1,f=this.v2;return s.set(tu(e,l.x,h.x,f.x),tu(e,l.y,h.y,f.y),tu(e,l.z,h.z,f.z)),s}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}class a_ extends zs{constructor(e=[]){super(),this.isSplineCurve=!0,this.type="SplineCurve",this.points=e}getPoint(e,i=new Ze){const s=i,l=this.points,h=(l.length-1)*e,f=Math.floor(h),m=h-f,g=l[f===0?f:f-1],y=l[f],S=l[f>l.length-2?l.length-1:f+1],w=l[f>l.length-3?l.length-1:f+2];return s.set(ny(m,g.x,y.x,S.x,w.x),ny(m,g.y,y.y,S.y,w.y)),s}copy(e){super.copy(e),this.points=[];for(let i=0,s=e.points.length;i<s;i++){const l=e.points[i];this.points.push(l.clone())}return this}toJSON(){const e=super.toJSON();e.points=[];for(let i=0,s=this.points.length;i<s;i++){const l=this.points[i];e.points.push(l.toArray())}return e}fromJSON(e){super.fromJSON(e),this.points=[];for(let i=0,s=e.points.length;i<s;i++){const l=e.points[i];this.points.push(new Ze().fromArray(l))}return this}}var hd=Object.freeze({__proto__:null,ArcCurve:ey,CatmullRomCurve3:ty,CubicBezierCurve:n_,CubicBezierCurve3:iy,EllipseCurve:ld,LineCurve:i_,LineCurve3:ry,QuadraticBezierCurve:r_,QuadraticBezierCurve3:s_,SplineCurve:a_});class sy extends zs{constructor(){super(),this.type="CurvePath",this.curves=[],this.autoClose=!1}add(e){this.curves.push(e)}closePath(){const e=this.curves[0].getPoint(0),i=this.curves[this.curves.length-1].getPoint(1);if(!e.equals(i)){const s=e.isVector2===!0?"LineCurve":"LineCurve3";this.curves.push(new hd[s](i,e))}return this}getPoint(e,i){const s=e*this.getLength(),l=this.getCurveLengths();let h=0;for(;h<l.length;){if(l[h]>=s){const f=l[h]-s,m=this.curves[h],g=m.getLength(),y=g===0?0:1-f/g;return m.getPointAt(y,i)}h++}return null}getLength(){const e=this.getCurveLengths();return e[e.length-1]}updateArcLengths(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()}getCurveLengths(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;const e=[];let i=0;for(let s=0,l=this.curves.length;s<l;s++)i+=this.curves[s].getLength(),e.push(i);return this.cacheLengths=e,e}getSpacedPoints(e=40){const i=[];for(let s=0;s<=e;s++)i.push(this.getPoint(s/e));return this.autoClose&&i.push(i[0]),i}getPoints(e=12){const i=[];let s;for(let l=0,h=this.curves;l<h.length;l++){const f=h[l],m=f.isEllipseCurve?e*2:f.isLineCurve||f.isLineCurve3?1:f.isSplineCurve?e*f.points.length:e,g=f.getPoints(m);for(let y=0;y<g.length;y++){const S=g[y];s&&s.equals(S)||(i.push(S),s=S)}}return this.autoClose&&i.length>1&&!i[i.length-1].equals(i[0])&&i.push(i[0]),i}copy(e){super.copy(e),this.curves=[];for(let i=0,s=e.curves.length;i<s;i++){const l=e.curves[i];this.curves.push(l.clone())}return this.autoClose=e.autoClose,this}toJSON(){const e=super.toJSON();e.autoClose=this.autoClose,e.curves=[];for(let i=0,s=this.curves.length;i<s;i++){const l=this.curves[i];e.curves.push(l.toJSON())}return e}fromJSON(e){super.fromJSON(e),this.autoClose=e.autoClose,this.curves=[];for(let i=0,s=e.curves.length;i<s;i++){const l=e.curves[i];this.curves.push(new hd[l.type]().fromJSON(l))}return this}}class iu extends sy{constructor(e){super(),this.type="Path",this.currentPoint=new Ze,e&&this.setFromPoints(e)}setFromPoints(e){this.moveTo(e[0].x,e[0].y);for(let i=1,s=e.length;i<s;i++)this.lineTo(e[i].x,e[i].y);return this}moveTo(e,i){return this.currentPoint.set(e,i),this}lineTo(e,i){const s=new i_(this.currentPoint.clone(),new Ze(e,i));return this.curves.push(s),this.currentPoint.set(e,i),this}quadraticCurveTo(e,i,s,l){const h=new r_(this.currentPoint.clone(),new Ze(e,i),new Ze(s,l));return this.curves.push(h),this.currentPoint.set(s,l),this}bezierCurveTo(e,i,s,l,h,f){const m=new n_(this.currentPoint.clone(),new Ze(e,i),new Ze(s,l),new Ze(h,f));return this.curves.push(m),this.currentPoint.set(h,f),this}splineThru(e){const i=[this.currentPoint.clone()].concat(e),s=new a_(i);return this.curves.push(s),this.currentPoint.copy(e[e.length-1]),this}arc(e,i,s,l,h,f){const m=this.currentPoint.x,g=this.currentPoint.y;return this.absarc(e+m,i+g,s,l,h,f),this}absarc(e,i,s,l,h,f){return this.absellipse(e,i,s,s,l,h,f),this}ellipse(e,i,s,l,h,f,m,g){const y=this.currentPoint.x,S=this.currentPoint.y;return this.absellipse(e+y,i+S,s,l,h,f,m,g),this}absellipse(e,i,s,l,h,f,m,g){const y=new ld(e,i,s,l,h,f,m,g);if(this.curves.length>0){const w=y.getPoint(0);w.equals(this.currentPoint)||this.lineTo(w.x,w.y)}this.curves.push(y);const S=y.getPoint(1);return this.currentPoint.copy(S),this}copy(e){return super.copy(e),this.currentPoint.copy(e.currentPoint),this}toJSON(){const e=super.toJSON();return e.currentPoint=this.currentPoint.toArray(),e}fromJSON(e){return super.fromJSON(e),this.currentPoint.fromArray(e.currentPoint),this}}class ru extends Rn{constructor(e=[new Ze(0,-.5),new Ze(.5,0),new Ze(0,.5)],i=12,s=0,l=Math.PI*2){super(),this.type="LatheGeometry",this.parameters={points:e,segments:i,phiStart:s,phiLength:l},i=Math.floor(i),l=bn(l,0,Math.PI*2);const h=[],f=[],m=[],g=[],y=[],S=1/i,w=new re,T=new Ze,R=new re,I=new re,F=new re;let D=0,C=0;for(let q=0;q<=e.length-1;q++)switch(q){case 0:D=e[q+1].x-e[q].x,C=e[q+1].y-e[q].y,R.x=C*1,R.y=-D,R.z=C*0,F.copy(R),R.normalize(),g.push(R.x,R.y,R.z);break;case e.length-1:g.push(F.x,F.y,F.z);break;default:D=e[q+1].x-e[q].x,C=e[q+1].y-e[q].y,R.x=C*1,R.y=-D,R.z=C*0,I.copy(R),R.x+=F.x,R.y+=F.y,R.z+=F.z,R.normalize(),g.push(R.x,R.y,R.z),F.copy(I)}for(let q=0;q<=i;q++){const G=s+q*S*l,H=Math.sin(G),le=Math.cos(G);for(let ne=0;ne<=e.length-1;ne++){w.x=e[ne].x*H,w.y=e[ne].y,w.z=e[ne].x*le,f.push(w.x,w.y,w.z),T.x=q/i,T.y=ne/(e.length-1),m.push(T.x,T.y);const oe=g[3*ne+0]*H,ce=g[3*ne+1],Q=g[3*ne+0]*le;y.push(oe,ce,Q)}}for(let q=0;q<i;q++)for(let G=0;G<e.length-1;G++){const H=G+q*e.length,le=H,ne=H+e.length,oe=H+e.length+1,ce=H+1;h.push(le,ne,ce),h.push(oe,ce,ne)}this.setIndex(h),this.setAttribute("position",new qt(f,3)),this.setAttribute("uv",new qt(m,2)),this.setAttribute("normal",new qt(y,3))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new ru(e.points,e.segments,e.phiStart,e.phiLength)}}class ud extends ru{constructor(e=1,i=1,s=4,l=8){const h=new iu;h.absarc(0,-i/2,e,Math.PI*1.5,0),h.absarc(0,i/2,e,0,Math.PI*.5),super(h.getPoints(s),l),this.type="CapsuleGeometry",this.parameters={radius:e,length:i,capSegments:s,radialSegments:l}}static fromJSON(e){return new ud(e.radius,e.length,e.capSegments,e.radialSegments)}}class fd extends Rn{constructor(e=1,i=32,s=0,l=Math.PI*2){super(),this.type="CircleGeometry",this.parameters={radius:e,segments:i,thetaStart:s,thetaLength:l},i=Math.max(3,i);const h=[],f=[],m=[],g=[],y=new re,S=new Ze;f.push(0,0,0),m.push(0,0,1),g.push(.5,.5);for(let w=0,T=3;w<=i;w++,T+=3){const R=s+w/i*l;y.x=e*Math.cos(R),y.y=e*Math.sin(R),f.push(y.x,y.y,y.z),m.push(0,0,1),S.x=(f[T]/e+1)/2,S.y=(f[T+1]/e+1)/2,g.push(S.x,S.y)}for(let w=1;w<=i;w++)h.push(w,w+1,0);this.setIndex(h),this.setAttribute("position",new qt(f,3)),this.setAttribute("normal",new qt(m,3)),this.setAttribute("uv",new qt(g,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new fd(e.radius,e.segments,e.thetaStart,e.thetaLength)}}class wc extends Rn{constructor(e=1,i=1,s=1,l=32,h=1,f=!1,m=0,g=Math.PI*2){super(),this.type="CylinderGeometry",this.parameters={radiusTop:e,radiusBottom:i,height:s,radialSegments:l,heightSegments:h,openEnded:f,thetaStart:m,thetaLength:g};const y=this;l=Math.floor(l),h=Math.floor(h);const S=[],w=[],T=[],R=[];let I=0;const F=[],D=s/2;let C=0;q(),f===!1&&(e>0&&G(!0),i>0&&G(!1)),this.setIndex(S),this.setAttribute("position",new qt(w,3)),this.setAttribute("normal",new qt(T,3)),this.setAttribute("uv",new qt(R,2));function q(){const H=new re,le=new re;let ne=0;const oe=(i-e)/s;for(let ce=0;ce<=h;ce++){const Q=[],Z=ce/h,he=Z*(i-e)+e;for(let Ue=0;Ue<=l;Ue++){const Pe=Ue/l,Ne=Pe*g+m,$e=Math.sin(Ne),Oe=Math.cos(Ne);le.x=he*$e,le.y=-Z*s+D,le.z=he*Oe,w.push(le.x,le.y,le.z),H.set($e,oe,Oe).normalize(),T.push(H.x,H.y,H.z),R.push(Pe,1-Z),Q.push(I++)}F.push(Q)}for(let ce=0;ce<l;ce++)for(let Q=0;Q<h;Q++){const Z=F[Q][ce],he=F[Q+1][ce],Ue=F[Q+1][ce+1],Pe=F[Q][ce+1];(e>0||Q!==0)&&(S.push(Z,he,Pe),ne+=3),(i>0||Q!==h-1)&&(S.push(he,Ue,Pe),ne+=3)}y.addGroup(C,ne,0),C+=ne}function G(H){const le=I,ne=new Ze,oe=new re;let ce=0;const Q=H===!0?e:i,Z=H===!0?1:-1;for(let Ue=1;Ue<=l;Ue++)w.push(0,D*Z,0),T.push(0,Z,0),R.push(.5,.5),I++;const he=I;for(let Ue=0;Ue<=l;Ue++){const Ne=Ue/l*g+m,$e=Math.cos(Ne),Oe=Math.sin(Ne);oe.x=Q*Oe,oe.y=D*Z,oe.z=Q*$e,w.push(oe.x,oe.y,oe.z),T.push(0,Z,0),ne.x=$e*.5+.5,ne.y=Oe*.5*Z+.5,R.push(ne.x,ne.y),I++}for(let Ue=0;Ue<l;Ue++){const Pe=le+Ue,Ne=he+Ue;H===!0?S.push(Ne,Ne+1,Pe):S.push(Ne+1,Ne,Pe),ce+=3}y.addGroup(C,ce,H===!0?1:2),C+=ce}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new wc(e.radiusTop,e.radiusBottom,e.height,e.radialSegments,e.heightSegments,e.openEnded,e.thetaStart,e.thetaLength)}}class dd extends wc{constructor(e=1,i=1,s=32,l=1,h=!1,f=0,m=Math.PI*2){super(0,e,i,s,l,h,f,m),this.type="ConeGeometry",this.parameters={radius:e,height:i,radialSegments:s,heightSegments:l,openEnded:h,thetaStart:f,thetaLength:m}}static fromJSON(e){return new dd(e.radius,e.height,e.radialSegments,e.heightSegments,e.openEnded,e.thetaStart,e.thetaLength)}}class ao extends Rn{constructor(e=[],i=[],s=1,l=0){super(),this.type="PolyhedronGeometry",this.parameters={vertices:e,indices:i,radius:s,detail:l};const h=[],f=[];m(l),y(s),S(),this.setAttribute("position",new qt(h,3)),this.setAttribute("normal",new qt(h.slice(),3)),this.setAttribute("uv",new qt(f,2)),l===0?this.computeVertexNormals():this.normalizeNormals();function m(q){const G=new re,H=new re,le=new re;for(let ne=0;ne<i.length;ne+=3)R(i[ne+0],G),R(i[ne+1],H),R(i[ne+2],le),g(G,H,le,q)}function g(q,G,H,le){const ne=le+1,oe=[];for(let ce=0;ce<=ne;ce++){oe[ce]=[];const Q=q.clone().lerp(H,ce/ne),Z=G.clone().lerp(H,ce/ne),he=ne-ce;for(let Ue=0;Ue<=he;Ue++)Ue===0&&ce===ne?oe[ce][Ue]=Q:oe[ce][Ue]=Q.clone().lerp(Z,Ue/he)}for(let ce=0;ce<ne;ce++)for(let Q=0;Q<2*(ne-ce)-1;Q++){const Z=Math.floor(Q/2);Q%2===0?(T(oe[ce][Z+1]),T(oe[ce+1][Z]),T(oe[ce][Z])):(T(oe[ce][Z+1]),T(oe[ce+1][Z+1]),T(oe[ce+1][Z]))}}function y(q){const G=new re;for(let H=0;H<h.length;H+=3)G.x=h[H+0],G.y=h[H+1],G.z=h[H+2],G.normalize().multiplyScalar(q),h[H+0]=G.x,h[H+1]=G.y,h[H+2]=G.z}function S(){const q=new re;for(let G=0;G<h.length;G+=3){q.x=h[G+0],q.y=h[G+1],q.z=h[G+2];const H=D(q)/2/Math.PI+.5,le=C(q)/Math.PI+.5;f.push(H,1-le)}I(),w()}function w(){for(let q=0;q<f.length;q+=6){const G=f[q+0],H=f[q+2],le=f[q+4],ne=Math.max(G,H,le),oe=Math.min(G,H,le);ne>.9&&oe<.1&&(G<.2&&(f[q+0]+=1),H<.2&&(f[q+2]+=1),le<.2&&(f[q+4]+=1))}}function T(q){h.push(q.x,q.y,q.z)}function R(q,G){const H=q*3;G.x=e[H+0],G.y=e[H+1],G.z=e[H+2]}function I(){const q=new re,G=new re,H=new re,le=new re,ne=new Ze,oe=new Ze,ce=new Ze;for(let Q=0,Z=0;Q<h.length;Q+=9,Z+=6){q.set(h[Q+0],h[Q+1],h[Q+2]),G.set(h[Q+3],h[Q+4],h[Q+5]),H.set(h[Q+6],h[Q+7],h[Q+8]),ne.set(f[Z+0],f[Z+1]),oe.set(f[Z+2],f[Z+3]),ce.set(f[Z+4],f[Z+5]),le.copy(q).add(G).add(H).divideScalar(3);const he=D(le);F(ne,Z+0,q,he),F(oe,Z+2,G,he),F(ce,Z+4,H,he)}}function F(q,G,H,le){le<0&&q.x===1&&(f[G]=q.x-1),H.x===0&&H.z===0&&(f[G]=le/2/Math.PI+.5)}function D(q){return Math.atan2(q.z,-q.x)}function C(q){return Math.atan2(-q.y,Math.sqrt(q.x*q.x+q.z*q.z))}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new ao(e.vertices,e.indices,e.radius,e.details)}}class pd extends ao{constructor(e=1,i=0){const s=(1+Math.sqrt(5))/2,l=1/s,h=[-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-l,-s,0,-l,s,0,l,-s,0,l,s,-l,-s,0,-l,s,0,l,-s,0,l,s,0,-s,0,-l,s,0,-l,-s,0,l,s,0,l],f=[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9];super(h,f,e,i),this.type="DodecahedronGeometry",this.parameters={radius:e,detail:i}}static fromJSON(e){return new pd(e.radius,e.detail)}}const md=new re,_d=new re,o_=new re,gd=new Vr;class ay extends Rn{constructor(e=null,i=1){if(super(),this.type="EdgesGeometry",this.parameters={geometry:e,thresholdAngle:i},e!==null){const l=Math.pow(10,4),h=Math.cos(Wo*i),f=e.getIndex(),m=e.getAttribute("position"),g=f?f.count:m.count,y=[0,0,0],S=["a","b","c"],w=new Array(3),T={},R=[];for(let I=0;I<g;I+=3){f?(y[0]=f.getX(I),y[1]=f.getX(I+1),y[2]=f.getX(I+2)):(y[0]=I,y[1]=I+1,y[2]=I+2);const{a:F,b:D,c:C}=gd;if(F.fromBufferAttribute(m,y[0]),D.fromBufferAttribute(m,y[1]),C.fromBufferAttribute(m,y[2]),gd.getNormal(o_),w[0]=`${Math.round(F.x*l)},${Math.round(F.y*l)},${Math.round(F.z*l)}`,w[1]=`${Math.round(D.x*l)},${Math.round(D.y*l)},${Math.round(D.z*l)}`,w[2]=`${Math.round(C.x*l)},${Math.round(C.y*l)},${Math.round(C.z*l)}`,!(w[0]===w[1]||w[1]===w[2]||w[2]===w[0]))for(let q=0;q<3;q++){const G=(q+1)%3,H=w[q],le=w[G],ne=gd[S[q]],oe=gd[S[G]],ce=`${H}_${le}`,Q=`${le}_${H}`;Q in T&&T[Q]?(o_.dot(T[Q].normal)<=h&&(R.push(ne.x,ne.y,ne.z),R.push(oe.x,oe.y,oe.z)),T[Q]=null):ce in T||(T[ce]={index0:y[q],index1:y[G],normal:o_.clone()})}}for(const I in T)if(T[I]){const{index0:F,index1:D}=T[I];md.fromBufferAttribute(m,F),_d.fromBufferAttribute(m,D),R.push(md.x,md.y,md.z),R.push(_d.x,_d.y,_d.z)}this.setAttribute("position",new qt(R,3))}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}}class el extends iu{constructor(e){super(e),this.uuid=ts(),this.type="Shape",this.holes=[]}getPointsHoles(e){const i=[];for(let s=0,l=this.holes.length;s<l;s++)i[s]=this.holes[s].getPoints(e);return i}extractPoints(e){return{shape:this.getPoints(e),holes:this.getPointsHoles(e)}}copy(e){super.copy(e),this.holes=[];for(let i=0,s=e.holes.length;i<s;i++){const l=e.holes[i];this.holes.push(l.clone())}return this}toJSON(){const e=super.toJSON();e.uuid=this.uuid,e.holes=[];for(let i=0,s=this.holes.length;i<s;i++){const l=this.holes[i];e.holes.push(l.toJSON())}return e}fromJSON(e){super.fromJSON(e),this.uuid=e.uuid,this.holes=[];for(let i=0,s=e.holes.length;i<s;i++){const l=e.holes[i];this.holes.push(new iu().fromJSON(l))}return this}}const _1={triangulate:function(u,e,i=2){const s=e&&e.length,l=s?e[0]*i:u.length;let h=oy(u,0,l,i,!0);const f=[];if(!h||h.next===h.prev)return f;let m,g,y,S,w,T,R;if(s&&(h=M1(u,e,h,i)),u.length>80*i){m=y=u[0],g=S=u[1];for(let I=i;I<l;I+=i)w=u[I],T=u[I+1],w<m&&(m=w),T<g&&(g=T),w>y&&(y=w),T>S&&(S=T);R=Math.max(y-m,S-g),R=R!==0?32767/R:0}return su(h,f,i,m,g,R,0),f}};function oy(u,e,i,s,l){let h,f;if(l===D1(u,e,i,s)>0)for(h=e;h<i;h+=s)f=hy(h,u[h],u[h+1],f);else for(h=i-s;h>=e;h-=s)f=hy(h,u[h],u[h+1],f);return f&&xd(f,f.next)&&(ou(f),f=f.next),f}function tl(u,e){if(!u)return u;e||(e=u);let i=u,s;do if(s=!1,!i.steiner&&(xd(i,i.next)||Ri(i.prev,i,i.next)===0)){if(ou(i),i=e=i.prev,i===i.next)break;s=!0}else i=i.next;while(s||i!==e);return e}function su(u,e,i,s,l,h,f){if(!u)return;!f&&h&&T1(u,s,l,h);let m=u,g,y;for(;u.prev!==u.next;){if(g=u.prev,y=u.next,h?x1(u,s,l,h):g1(u)){e.push(g.i/i|0),e.push(u.i/i|0),e.push(y.i/i|0),ou(u),u=y.next,m=y.next;continue}if(u=y,u===m){f?f===1?(u=v1(tl(u),e,i),su(u,e,i,s,l,h,2)):f===2&&y1(u,e,i,s,l,h):su(tl(u),e,i,s,l,h,1);break}}}function g1(u){const e=u.prev,i=u,s=u.next;if(Ri(e,i,s)>=0)return!1;const l=e.x,h=i.x,f=s.x,m=e.y,g=i.y,y=s.y,S=l<h?l<f?l:f:h<f?h:f,w=m<g?m<y?m:y:g<y?g:y,T=l>h?l>f?l:f:h>f?h:f,R=m>g?m>y?m:y:g>y?g:y;let I=s.next;for(;I!==e;){if(I.x>=S&&I.x<=T&&I.y>=w&&I.y<=R&&Tc(l,m,h,g,f,y,I.x,I.y)&&Ri(I.prev,I,I.next)>=0)return!1;I=I.next}return!0}function x1(u,e,i,s){const l=u.prev,h=u,f=u.next;if(Ri(l,h,f)>=0)return!1;const m=l.x,g=h.x,y=f.x,S=l.y,w=h.y,T=f.y,R=m<g?m<y?m:y:g<y?g:y,I=S<w?S<T?S:T:w<T?w:T,F=m>g?m>y?m:y:g>y?g:y,D=S>w?S>T?S:T:w>T?w:T,C=l_(R,I,e,i,s),q=l_(F,D,e,i,s);let G=u.prevZ,H=u.nextZ;for(;G&&G.z>=C&&H&&H.z<=q;){if(G.x>=R&&G.x<=F&&G.y>=I&&G.y<=D&&G!==l&&G!==f&&Tc(m,S,g,w,y,T,G.x,G.y)&&Ri(G.prev,G,G.next)>=0||(G=G.prevZ,H.x>=R&&H.x<=F&&H.y>=I&&H.y<=D&&H!==l&&H!==f&&Tc(m,S,g,w,y,T,H.x,H.y)&&Ri(H.prev,H,H.next)>=0))return!1;H=H.nextZ}for(;G&&G.z>=C;){if(G.x>=R&&G.x<=F&&G.y>=I&&G.y<=D&&G!==l&&G!==f&&Tc(m,S,g,w,y,T,G.x,G.y)&&Ri(G.prev,G,G.next)>=0)return!1;G=G.prevZ}for(;H&&H.z<=q;){if(H.x>=R&&H.x<=F&&H.y>=I&&H.y<=D&&H!==l&&H!==f&&Tc(m,S,g,w,y,T,H.x,H.y)&&Ri(H.prev,H,H.next)>=0)return!1;H=H.nextZ}return!0}function v1(u,e,i){let s=u;do{const l=s.prev,h=s.next.next;!xd(l,h)&&ly(l,s,s.next,h)&&au(l,h)&&au(h,l)&&(e.push(l.i/i|0),e.push(s.i/i|0),e.push(h.i/i|0),ou(s),ou(s.next),s=u=h),s=s.next}while(s!==u);return tl(s)}function y1(u,e,i,s,l,h){let f=u;do{let m=f.next.next;for(;m!==f.prev;){if(f.i!==m.i&&C1(f,m)){let g=cy(f,m);f=tl(f,f.next),g=tl(g,g.next),su(f,e,i,s,l,h,0),su(g,e,i,s,l,h,0);return}m=m.next}f=f.next}while(f!==u)}function M1(u,e,i,s){const l=[];let h,f,m,g,y;for(h=0,f=e.length;h<f;h++)m=e[h]*s,g=h<f-1?e[h+1]*s:u.length,y=oy(u,m,g,s,!1),y===y.next&&(y.steiner=!0),l.push(R1(y));for(l.sort(S1),h=0;h<l.length;h++)i=b1(l[h],i);return i}function S1(u,e){return u.x-e.x}function b1(u,e){const i=E1(u,e);if(!i)return e;const s=cy(i,u);return tl(s,s.next),tl(i,i.next)}function E1(u,e){let i=e,s=-1/0,l;const h=u.x,f=u.y;do{if(f<=i.y&&f>=i.next.y&&i.next.y!==i.y){const T=i.x+(f-i.y)*(i.next.x-i.x)/(i.next.y-i.y);if(T<=h&&T>s&&(s=T,l=i.x<i.next.x?i:i.next,T===h))return l}i=i.next}while(i!==e);if(!l)return null;const m=l,g=l.x,y=l.y;let S=1/0,w;i=l;do h>=i.x&&i.x>=g&&h!==i.x&&Tc(f<y?h:s,f,g,y,f<y?s:h,f,i.x,i.y)&&(w=Math.abs(f-i.y)/(h-i.x),au(i,u)&&(w<S||w===S&&(i.x>l.x||i.x===l.x&&w1(l,i)))&&(l=i,S=w)),i=i.next;while(i!==m);return l}function w1(u,e){return Ri(u.prev,u,e.prev)<0&&Ri(e.next,u,u.next)<0}function T1(u,e,i,s){let l=u;do l.z===0&&(l.z=l_(l.x,l.y,e,i,s)),l.prevZ=l.prev,l.nextZ=l.next,l=l.next;while(l!==u);l.prevZ.nextZ=null,l.prevZ=null,A1(l)}function A1(u){let e,i,s,l,h,f,m,g,y=1;do{for(i=u,u=null,h=null,f=0;i;){for(f++,s=i,m=0,e=0;e<y&&(m++,s=s.nextZ,!!s);e++);for(g=y;m>0||g>0&&s;)m!==0&&(g===0||!s||i.z<=s.z)?(l=i,i=i.nextZ,m--):(l=s,s=s.nextZ,g--),h?h.nextZ=l:u=l,l.prevZ=h,h=l;i=s}h.nextZ=null,y*=2}while(f>1);return u}function l_(u,e,i,s,l){return u=(u-i)*l|0,e=(e-s)*l|0,u=(u|u<<8)&16711935,u=(u|u<<4)&252645135,u=(u|u<<2)&858993459,u=(u|u<<1)&1431655765,e=(e|e<<8)&16711935,e=(e|e<<4)&252645135,e=(e|e<<2)&858993459,e=(e|e<<1)&1431655765,u|e<<1}function R1(u){let e=u,i=u;do(e.x<i.x||e.x===i.x&&e.y<i.y)&&(i=e),e=e.next;while(e!==u);return i}function Tc(u,e,i,s,l,h,f,m){return(l-f)*(e-m)>=(u-f)*(h-m)&&(u-f)*(s-m)>=(i-f)*(e-m)&&(i-f)*(h-m)>=(l-f)*(s-m)}function C1(u,e){return u.next.i!==e.i&&u.prev.i!==e.i&&!P1(u,e)&&(au(u,e)&&au(e,u)&&I1(u,e)&&(Ri(u.prev,u,e.prev)||Ri(u,e.prev,e))||xd(u,e)&&Ri(u.prev,u,u.next)>0&&Ri(e.prev,e,e.next)>0)}function Ri(u,e,i){return(e.y-u.y)*(i.x-e.x)-(e.x-u.x)*(i.y-e.y)}function xd(u,e){return u.x===e.x&&u.y===e.y}function ly(u,e,i,s){const l=yd(Ri(u,e,i)),h=yd(Ri(u,e,s)),f=yd(Ri(i,s,u)),m=yd(Ri(i,s,e));return!!(l!==h&&f!==m||l===0&&vd(u,i,e)||h===0&&vd(u,s,e)||f===0&&vd(i,u,s)||m===0&&vd(i,e,s))}function vd(u,e,i){return e.x<=Math.max(u.x,i.x)&&e.x>=Math.min(u.x,i.x)&&e.y<=Math.max(u.y,i.y)&&e.y>=Math.min(u.y,i.y)}function yd(u){return u>0?1:u<0?-1:0}function P1(u,e){let i=u;do{if(i.i!==u.i&&i.next.i!==u.i&&i.i!==e.i&&i.next.i!==e.i&&ly(i,i.next,u,e))return!0;i=i.next}while(i!==u);return!1}function au(u,e){return Ri(u.prev,u,u.next)<0?Ri(u,e,u.next)>=0&&Ri(u,u.prev,e)>=0:Ri(u,e,u.prev)<0||Ri(u,u.next,e)<0}function I1(u,e){let i=u,s=!1;const l=(u.x+e.x)/2,h=(u.y+e.y)/2;do i.y>h!=i.next.y>h&&i.next.y!==i.y&&l<(i.next.x-i.x)*(h-i.y)/(i.next.y-i.y)+i.x&&(s=!s),i=i.next;while(i!==u);return s}function cy(u,e){const i=new c_(u.i,u.x,u.y),s=new c_(e.i,e.x,e.y),l=u.next,h=e.prev;return u.next=e,e.prev=u,i.next=l,l.prev=i,s.next=i,i.prev=s,h.next=s,s.prev=h,s}function hy(u,e,i,s){const l=new c_(u,e,i);return s?(l.next=s.next,l.prev=s,s.next.prev=l,s.next=l):(l.prev=l,l.next=l),l}function ou(u){u.next.prev=u.prev,u.prev.next=u.next,u.prevZ&&(u.prevZ.nextZ=u.nextZ),u.nextZ&&(u.nextZ.prevZ=u.prevZ)}function c_(u,e,i){this.i=u,this.x=e,this.y=i,this.prev=null,this.next=null,this.z=0,this.prevZ=null,this.nextZ=null,this.steiner=!1}function D1(u,e,i,s){let l=0;for(let h=e,f=i-s;h<i;h+=s)l+=(u[f]-u[h])*(u[h+1]+u[f+1]),f=h;return l}class na{static area(e){const i=e.length;let s=0;for(let l=i-1,h=0;h<i;l=h++)s+=e[l].x*e[h].y-e[h].x*e[l].y;return s*.5}static isClockWise(e){return na.area(e)<0}static triangulateShape(e,i){const s=[],l=[],h=[];uy(e),fy(s,e);let f=e.length;i.forEach(uy);for(let g=0;g<i.length;g++)l.push(f),f+=i[g].length,fy(s,i[g]);const m=_1.triangulate(s,l);for(let g=0;g<m.length;g+=3)h.push(m.slice(g,g+3));return h}}function uy(u){const e=u.length;e>2&&u[e-1].equals(u[0])&&u.pop()}function fy(u,e){for(let i=0;i<e.length;i++)u.push(e[i].x),u.push(e[i].y)}class Md extends Rn{constructor(e=new el([new Ze(.5,.5),new Ze(-.5,.5),new Ze(-.5,-.5),new Ze(.5,-.5)]),i={}){super(),this.type="ExtrudeGeometry",this.parameters={shapes:e,options:i},e=Array.isArray(e)?e:[e];const s=this,l=[],h=[];for(let m=0,g=e.length;m<g;m++){const y=e[m];f(y)}this.setAttribute("position",new qt(l,3)),this.setAttribute("uv",new qt(h,2)),this.computeVertexNormals();function f(m){const g=[],y=i.curveSegments!==void 0?i.curveSegments:12,S=i.steps!==void 0?i.steps:1,w=i.depth!==void 0?i.depth:1;let T=i.bevelEnabled!==void 0?i.bevelEnabled:!0,R=i.bevelThickness!==void 0?i.bevelThickness:.2,I=i.bevelSize!==void 0?i.bevelSize:R-.1,F=i.bevelOffset!==void 0?i.bevelOffset:0,D=i.bevelSegments!==void 0?i.bevelSegments:3;const C=i.extrudePath,q=i.UVGenerator!==void 0?i.UVGenerator:L1;let G,H=!1,le,ne,oe,ce;C&&(G=C.getSpacedPoints(S),H=!0,T=!1,le=C.computeFrenetFrames(S,!1),ne=new re,oe=new re,ce=new re),T||(D=0,R=0,I=0,F=0);const Q=m.extractPoints(y);let Z=Q.shape;const he=Q.holes;if(!na.isClockWise(Z)){Z=Z.reverse();for(let Je=0,ct=he.length;Je<ct;Je++){const se=he[Je];na.isClockWise(se)&&(he[Je]=se.reverse())}}const Pe=na.triangulateShape(Z,he),Ne=Z;for(let Je=0,ct=he.length;Je<ct;Je++){const se=he[Je];Z=Z.concat(se)}function $e(Je,ct,se){return ct||console.error("THREE.ExtrudeGeometry: vec does not exist"),Je.clone().addScaledVector(ct,se)}const Oe=Z.length,ot=Pe.length;function ze(Je,ct,se){let jt,rt,Bt;const ht=Je.x-ct.x,dn=Je.y-ct.y,Rt=se.x-Je.x,ie=se.y-Je.y,$=ht*ht+dn*dn,Te=ht*ie-dn*Rt;if(Math.abs(Te)>Number.EPSILON){const We=Math.sqrt($),Qe=Math.sqrt(Rt*Rt+ie*ie),Xe=ct.x-dn/We,Zt=ct.y+ht/We,St=se.x-ie/Qe,Ft=se.y+Rt/Qe,kn=((St-Xe)*ie-(Ft-Zt)*Rt)/(ht*ie-dn*Rt);jt=Xe+ht*kn-Je.x,rt=Zt+dn*kn-Je.y;const at=jt*jt+rt*rt;if(at<=2)return new Ze(jt,rt);Bt=Math.sqrt(at/2)}else{let We=!1;ht>Number.EPSILON?Rt>Number.EPSILON&&(We=!0):ht<-Number.EPSILON?Rt<-Number.EPSILON&&(We=!0):Math.sign(dn)===Math.sign(ie)&&(We=!0),We?(jt=-dn,rt=ht,Bt=Math.sqrt($)):(jt=ht,rt=dn,Bt=Math.sqrt($/2))}return new Ze(jt/Bt,rt/Bt)}const yt=[];for(let Je=0,ct=Ne.length,se=ct-1,jt=Je+1;Je<ct;Je++,se++,jt++)se===ct&&(se=0),jt===ct&&(jt=0),yt[Je]=ze(Ne[Je],Ne[se],Ne[jt]);const Ut=[];let Wt,An=yt.concat();for(let Je=0,ct=he.length;Je<ct;Je++){const se=he[Je];Wt=[];for(let jt=0,rt=se.length,Bt=rt-1,ht=jt+1;jt<rt;jt++,Bt++,ht++)Bt===rt&&(Bt=0),ht===rt&&(ht=0),Wt[jt]=ze(se[jt],se[Bt],se[ht]);Ut.push(Wt),An=An.concat(Wt)}for(let Je=0;Je<D;Je++){const ct=Je/D,se=R*Math.cos(ct*Math.PI/2),jt=I*Math.sin(ct*Math.PI/2)+F;for(let rt=0,Bt=Ne.length;rt<Bt;rt++){const ht=$e(Ne[rt],yt[rt],jt);pt(ht.x,ht.y,-se)}for(let rt=0,Bt=he.length;rt<Bt;rt++){const ht=he[rt];Wt=Ut[rt];for(let dn=0,Rt=ht.length;dn<Rt;dn++){const ie=$e(ht[dn],Wt[dn],jt);pt(ie.x,ie.y,-se)}}}const ri=I+F;for(let Je=0;Je<Oe;Je++){const ct=T?$e(Z[Je],An[Je],ri):Z[Je];H?(oe.copy(le.normals[0]).multiplyScalar(ct.x),ne.copy(le.binormals[0]).multiplyScalar(ct.y),ce.copy(G[0]).add(oe).add(ne),pt(ce.x,ce.y,ce.z)):pt(ct.x,ct.y,0)}for(let Je=1;Je<=S;Je++)for(let ct=0;ct<Oe;ct++){const se=T?$e(Z[ct],An[ct],ri):Z[ct];H?(oe.copy(le.normals[Je]).multiplyScalar(se.x),ne.copy(le.binormals[Je]).multiplyScalar(se.y),ce.copy(G[Je]).add(oe).add(ne),pt(ce.x,ce.y,ce.z)):pt(se.x,se.y,w/S*Je)}for(let Je=D-1;Je>=0;Je--){const ct=Je/D,se=R*Math.cos(ct*Math.PI/2),jt=I*Math.sin(ct*Math.PI/2)+F;for(let rt=0,Bt=Ne.length;rt<Bt;rt++){const ht=$e(Ne[rt],yt[rt],jt);pt(ht.x,ht.y,w+se)}for(let rt=0,Bt=he.length;rt<Bt;rt++){const ht=he[rt];Wt=Ut[rt];for(let dn=0,Rt=ht.length;dn<Rt;dn++){const ie=$e(ht[dn],Wt[dn],jt);H?pt(ie.x,ie.y+G[S-1].y,G[S-1].x+se):pt(ie.x,ie.y,w+se)}}}qe(),dt();function qe(){const Je=l.length/3;if(T){let ct=0,se=Oe*ct;for(let jt=0;jt<ot;jt++){const rt=Pe[jt];rn(rt[2]+se,rt[1]+se,rt[0]+se)}ct=S+D*2,se=Oe*ct;for(let jt=0;jt<ot;jt++){const rt=Pe[jt];rn(rt[0]+se,rt[1]+se,rt[2]+se)}}else{for(let ct=0;ct<ot;ct++){const se=Pe[ct];rn(se[2],se[1],se[0])}for(let ct=0;ct<ot;ct++){const se=Pe[ct];rn(se[0]+Oe*S,se[1]+Oe*S,se[2]+Oe*S)}}s.addGroup(Je,l.length/3-Je,0)}function dt(){const Je=l.length/3;let ct=0;Xt(Ne,ct),ct+=Ne.length;for(let se=0,jt=he.length;se<jt;se++){const rt=he[se];Xt(rt,ct),ct+=rt.length}s.addGroup(Je,l.length/3-Je,1)}function Xt(Je,ct){let se=Je.length;for(;--se>=0;){const jt=se;let rt=se-1;rt<0&&(rt=Je.length-1);for(let Bt=0,ht=S+D*2;Bt<ht;Bt++){const dn=Oe*Bt,Rt=Oe*(Bt+1),ie=ct+jt+dn,$=ct+rt+dn,Te=ct+rt+Rt,We=ct+jt+Rt;xn(ie,$,Te,We)}}}function pt(Je,ct,se){g.push(Je),g.push(ct),g.push(se)}function rn(Je,ct,se){_n(Je),_n(ct),_n(se);const jt=l.length/3,rt=q.generateTopUV(s,l,jt-3,jt-2,jt-1);Jn(rt[0]),Jn(rt[1]),Jn(rt[2])}function xn(Je,ct,se,jt){_n(Je),_n(ct),_n(jt),_n(ct),_n(se),_n(jt);const rt=l.length/3,Bt=q.generateSideWallUV(s,l,rt-6,rt-3,rt-2,rt-1);Jn(Bt[0]),Jn(Bt[1]),Jn(Bt[3]),Jn(Bt[1]),Jn(Bt[2]),Jn(Bt[3])}function _n(Je){l.push(g[Je*3+0]),l.push(g[Je*3+1]),l.push(g[Je*3+2])}function Jn(Je){h.push(Je.x),h.push(Je.y)}}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}toJSON(){const e=super.toJSON(),i=this.parameters.shapes,s=this.parameters.options;return U1(i,s,e)}static fromJSON(e,i){const s=[];for(let h=0,f=e.shapes.length;h<f;h++){const m=i[e.shapes[h]];s.push(m)}const l=e.options.extrudePath;return l!==void 0&&(e.options.extrudePath=new hd[l.type]().fromJSON(l)),new Md(s,e.options)}}const L1={generateTopUV:function(u,e,i,s,l){const h=e[i*3],f=e[i*3+1],m=e[s*3],g=e[s*3+1],y=e[l*3],S=e[l*3+1];return[new Ze(h,f),new Ze(m,g),new Ze(y,S)]},generateSideWallUV:function(u,e,i,s,l,h){const f=e[i*3],m=e[i*3+1],g=e[i*3+2],y=e[s*3],S=e[s*3+1],w=e[s*3+2],T=e[l*3],R=e[l*3+1],I=e[l*3+2],F=e[h*3],D=e[h*3+1],C=e[h*3+2];return Math.abs(m-S)<Math.abs(f-y)?[new Ze(f,1-g),new Ze(y,1-w),new Ze(T,1-I),new Ze(F,1-C)]:[new Ze(m,1-g),new Ze(S,1-w),new Ze(R,1-I),new Ze(D,1-C)]}};function U1(u,e,i){if(i.shapes=[],Array.isArray(u))for(let s=0,l=u.length;s<l;s++){const h=u[s];i.shapes.push(h.uuid)}else i.shapes.push(u.uuid);return i.options=Object.assign({},e),e.extrudePath!==void 0&&(i.options.extrudePath=e.extrudePath.toJSON()),i}class Sd extends ao{constructor(e=1,i=0){const s=(1+Math.sqrt(5))/2,l=[-1,s,0,1,s,0,-1,-s,0,1,-s,0,0,-1,s,0,1,s,0,-1,-s,0,1,-s,s,0,-1,s,0,1,-s,0,-1,-s,0,1],h=[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1];super(l,h,e,i),this.type="IcosahedronGeometry",this.parameters={radius:e,detail:i}}static fromJSON(e){return new Sd(e.radius,e.detail)}}class lu extends ao{constructor(e=1,i=0){const s=[1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],l=[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2];super(s,l,e,i),this.type="OctahedronGeometry",this.parameters={radius:e,detail:i}}static fromJSON(e){return new lu(e.radius,e.detail)}}class Ac extends Rn{constructor(e=1,i=1,s=1,l=1){super(),this.type="PlaneGeometry",this.parameters={width:e,height:i,widthSegments:s,heightSegments:l};const h=e/2,f=i/2,m=Math.floor(s),g=Math.floor(l),y=m+1,S=g+1,w=e/m,T=i/g,R=[],I=[],F=[],D=[];for(let C=0;C<S;C++){const q=C*T-f;for(let G=0;G<y;G++){const H=G*w-h;I.push(H,-q,0),F.push(0,0,1),D.push(G/m),D.push(1-C/g)}}for(let C=0;C<g;C++)for(let q=0;q<m;q++){const G=q+y*C,H=q+y*(C+1),le=q+1+y*(C+1),ne=q+1+y*C;R.push(G,H,ne),R.push(H,le,ne)}this.setIndex(R),this.setAttribute("position",new qt(I,3)),this.setAttribute("normal",new qt(F,3)),this.setAttribute("uv",new qt(D,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new Ac(e.width,e.height,e.widthSegments,e.heightSegments)}}class bd extends Rn{constructor(e=.5,i=1,s=32,l=1,h=0,f=Math.PI*2){super(),this.type="RingGeometry",this.parameters={innerRadius:e,outerRadius:i,thetaSegments:s,phiSegments:l,thetaStart:h,thetaLength:f},s=Math.max(3,s),l=Math.max(1,l);const m=[],g=[],y=[],S=[];let w=e;const T=(i-e)/l,R=new re,I=new Ze;for(let F=0;F<=l;F++){for(let D=0;D<=s;D++){const C=h+D/s*f;R.x=w*Math.cos(C),R.y=w*Math.sin(C),g.push(R.x,R.y,R.z),y.push(0,0,1),I.x=(R.x/i+1)/2,I.y=(R.y/i+1)/2,S.push(I.x,I.y)}w+=T}for(let F=0;F<l;F++){const D=F*(s+1);for(let C=0;C<s;C++){const q=C+D,G=q,H=q+s+1,le=q+s+2,ne=q+1;m.push(G,H,ne),m.push(H,le,ne)}}this.setIndex(m),this.setAttribute("position",new qt(g,3)),this.setAttribute("normal",new qt(y,3)),this.setAttribute("uv",new qt(S,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new bd(e.innerRadius,e.outerRadius,e.thetaSegments,e.phiSegments,e.thetaStart,e.thetaLength)}}class Ed extends Rn{constructor(e=new el([new Ze(0,.5),new Ze(-.5,-.5),new Ze(.5,-.5)]),i=12){super(),this.type="ShapeGeometry",this.parameters={shapes:e,curveSegments:i};const s=[],l=[],h=[],f=[];let m=0,g=0;if(Array.isArray(e)===!1)y(e);else for(let S=0;S<e.length;S++)y(e[S]),this.addGroup(m,g,S),m+=g,g=0;this.setIndex(s),this.setAttribute("position",new qt(l,3)),this.setAttribute("normal",new qt(h,3)),this.setAttribute("uv",new qt(f,2));function y(S){const w=l.length/3,T=S.extractPoints(i);let R=T.shape;const I=T.holes;na.isClockWise(R)===!1&&(R=R.reverse());for(let D=0,C=I.length;D<C;D++){const q=I[D];na.isClockWise(q)===!0&&(I[D]=q.reverse())}const F=na.triangulateShape(R,I);for(let D=0,C=I.length;D<C;D++){const q=I[D];R=R.concat(q)}for(let D=0,C=R.length;D<C;D++){const q=R[D];l.push(q.x,q.y,0),h.push(0,0,1),f.push(q.x,q.y)}for(let D=0,C=F.length;D<C;D++){const q=F[D],G=q[0]+w,H=q[1]+w,le=q[2]+w;s.push(G,H,le),g+=3}}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}toJSON(){const e=super.toJSON(),i=this.parameters.shapes;return N1(i,e)}static fromJSON(e,i){const s=[];for(let l=0,h=e.shapes.length;l<h;l++){const f=i[e.shapes[l]];s.push(f)}return new Ed(s,e.curveSegments)}}function N1(u,e){if(e.shapes=[],Array.isArray(u))for(let i=0,s=u.length;i<s;i++){const l=u[i];e.shapes.push(l.uuid)}else e.shapes.push(u.uuid);return e}class cu extends Rn{constructor(e=1,i=32,s=16,l=0,h=Math.PI*2,f=0,m=Math.PI){super(),this.type="SphereGeometry",this.parameters={radius:e,widthSegments:i,heightSegments:s,phiStart:l,phiLength:h,thetaStart:f,thetaLength:m},i=Math.max(3,Math.floor(i)),s=Math.max(2,Math.floor(s));const g=Math.min(f+m,Math.PI);let y=0;const S=[],w=new re,T=new re,R=[],I=[],F=[],D=[];for(let C=0;C<=s;C++){const q=[],G=C/s;let H=0;C===0&&f===0?H=.5/i:C===s&&g===Math.PI&&(H=-.5/i);for(let le=0;le<=i;le++){const ne=le/i;w.x=-e*Math.cos(l+ne*h)*Math.sin(f+G*m),w.y=e*Math.cos(f+G*m),w.z=e*Math.sin(l+ne*h)*Math.sin(f+G*m),I.push(w.x,w.y,w.z),T.copy(w).normalize(),F.push(T.x,T.y,T.z),D.push(ne+H,1-G),q.push(y++)}S.push(q)}for(let C=0;C<s;C++)for(let q=0;q<i;q++){const G=S[C][q+1],H=S[C][q],le=S[C+1][q],ne=S[C+1][q+1];(C!==0||f>0)&&R.push(G,H,ne),(C!==s-1||g<Math.PI)&&R.push(H,le,ne)}this.setIndex(R),this.setAttribute("position",new qt(I,3)),this.setAttribute("normal",new qt(F,3)),this.setAttribute("uv",new qt(D,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new cu(e.radius,e.widthSegments,e.heightSegments,e.phiStart,e.phiLength,e.thetaStart,e.thetaLength)}}class wd extends ao{constructor(e=1,i=0){const s=[1,1,1,-1,-1,1,-1,1,-1,1,-1,-1],l=[2,1,0,0,3,2,1,3,0,2,3,1];super(s,l,e,i),this.type="TetrahedronGeometry",this.parameters={radius:e,detail:i}}static fromJSON(e){return new wd(e.radius,e.detail)}}class Td extends Rn{constructor(e=1,i=.4,s=12,l=48,h=Math.PI*2){super(),this.type="TorusGeometry",this.parameters={radius:e,tube:i,radialSegments:s,tubularSegments:l,arc:h},s=Math.floor(s),l=Math.floor(l);const f=[],m=[],g=[],y=[],S=new re,w=new re,T=new re;for(let R=0;R<=s;R++)for(let I=0;I<=l;I++){const F=I/l*h,D=R/s*Math.PI*2;w.x=(e+i*Math.cos(D))*Math.cos(F),w.y=(e+i*Math.cos(D))*Math.sin(F),w.z=i*Math.sin(D),m.push(w.x,w.y,w.z),S.x=e*Math.cos(F),S.y=e*Math.sin(F),T.subVectors(w,S).normalize(),g.push(T.x,T.y,T.z),y.push(I/l),y.push(R/s)}for(let R=1;R<=s;R++)for(let I=1;I<=l;I++){const F=(l+1)*R+I-1,D=(l+1)*(R-1)+I-1,C=(l+1)*(R-1)+I,q=(l+1)*R+I;f.push(F,D,q),f.push(D,C,q)}this.setIndex(f),this.setAttribute("position",new qt(m,3)),this.setAttribute("normal",new qt(g,3)),this.setAttribute("uv",new qt(y,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new Td(e.radius,e.tube,e.radialSegments,e.tubularSegments,e.arc)}}class Ad extends Rn{constructor(e=1,i=.4,s=64,l=8,h=2,f=3){super(),this.type="TorusKnotGeometry",this.parameters={radius:e,tube:i,tubularSegments:s,radialSegments:l,p:h,q:f},s=Math.floor(s),l=Math.floor(l);const m=[],g=[],y=[],S=[],w=new re,T=new re,R=new re,I=new re,F=new re,D=new re,C=new re;for(let G=0;G<=s;++G){const H=G/s*h*Math.PI*2;q(H,h,f,e,R),q(H+.01,h,f,e,I),D.subVectors(I,R),C.addVectors(I,R),F.crossVectors(D,C),C.crossVectors(F,D),F.normalize(),C.normalize();for(let le=0;le<=l;++le){const ne=le/l*Math.PI*2,oe=-i*Math.cos(ne),ce=i*Math.sin(ne);w.x=R.x+(oe*C.x+ce*F.x),w.y=R.y+(oe*C.y+ce*F.y),w.z=R.z+(oe*C.z+ce*F.z),g.push(w.x,w.y,w.z),T.subVectors(w,R).normalize(),y.push(T.x,T.y,T.z),S.push(G/s),S.push(le/l)}}for(let G=1;G<=s;G++)for(let H=1;H<=l;H++){const le=(l+1)*(G-1)+(H-1),ne=(l+1)*G+(H-1),oe=(l+1)*G+H,ce=(l+1)*(G-1)+H;m.push(le,ne,ce),m.push(ne,oe,ce)}this.setIndex(m),this.setAttribute("position",new qt(g,3)),this.setAttribute("normal",new qt(y,3)),this.setAttribute("uv",new qt(S,2));function q(G,H,le,ne,oe){const ce=Math.cos(G),Q=Math.sin(G),Z=le/H*G,he=Math.cos(Z);oe.x=ne*(2+he)*.5*ce,oe.y=ne*(2+he)*Q*.5,oe.z=ne*Math.sin(Z)*.5}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new Ad(e.radius,e.tube,e.tubularSegments,e.radialSegments,e.p,e.q)}}class Rd extends Rn{constructor(e=new s_(new re(-1,-1,0),new re(-1,1,0),new re(1,1,0)),i=64,s=1,l=8,h=!1){super(),this.type="TubeGeometry",this.parameters={path:e,tubularSegments:i,radius:s,radialSegments:l,closed:h};const f=e.computeFrenetFrames(i,h);this.tangents=f.tangents,this.normals=f.normals,this.binormals=f.binormals;const m=new re,g=new re,y=new Ze;let S=new re;const w=[],T=[],R=[],I=[];F(),this.setIndex(I),this.setAttribute("position",new qt(w,3)),this.setAttribute("normal",new qt(T,3)),this.setAttribute("uv",new qt(R,2));function F(){for(let G=0;G<i;G++)D(G);D(h===!1?i:0),q(),C()}function D(G){S=e.getPointAt(G/i,S);const H=f.normals[G],le=f.binormals[G];for(let ne=0;ne<=l;ne++){const oe=ne/l*Math.PI*2,ce=Math.sin(oe),Q=-Math.cos(oe);g.x=Q*H.x+ce*le.x,g.y=Q*H.y+ce*le.y,g.z=Q*H.z+ce*le.z,g.normalize(),T.push(g.x,g.y,g.z),m.x=S.x+s*g.x,m.y=S.y+s*g.y,m.z=S.z+s*g.z,w.push(m.x,m.y,m.z)}}function C(){for(let G=1;G<=i;G++)for(let H=1;H<=l;H++){const le=(l+1)*(G-1)+(H-1),ne=(l+1)*G+(H-1),oe=(l+1)*G+H,ce=(l+1)*(G-1)+H;I.push(le,ne,ce),I.push(ne,oe,ce)}}function q(){for(let G=0;G<=i;G++)for(let H=0;H<=l;H++)y.x=G/i,y.y=H/l,R.push(y.x,y.y)}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}toJSON(){const e=super.toJSON();return e.path=this.parameters.path.toJSON(),e}static fromJSON(e){return new Rd(new hd[e.path.type]().fromJSON(e.path),e.tubularSegments,e.radius,e.radialSegments,e.closed)}}class dy extends Rn{constructor(e=null){if(super(),this.type="WireframeGeometry",this.parameters={geometry:e},e!==null){const i=[],s=new Set,l=new re,h=new re;if(e.index!==null){const f=e.attributes.position,m=e.index;let g=e.groups;g.length===0&&(g=[{start:0,count:m.count,materialIndex:0}]);for(let y=0,S=g.length;y<S;++y){const w=g[y],T=w.start,R=w.count;for(let I=T,F=T+R;I<F;I+=3)for(let D=0;D<3;D++){const C=m.getX(I+D),q=m.getX(I+(D+1)%3);l.fromBufferAttribute(f,C),h.fromBufferAttribute(f,q),py(l,h,s)===!0&&(i.push(l.x,l.y,l.z),i.push(h.x,h.y,h.z))}}}else{const f=e.attributes.position;for(let m=0,g=f.count/3;m<g;m++)for(let y=0;y<3;y++){const S=3*m+y,w=3*m+(y+1)%3;l.fromBufferAttribute(f,S),h.fromBufferAttribute(f,w),py(l,h,s)===!0&&(i.push(l.x,l.y,l.z),i.push(h.x,h.y,h.z))}}this.setAttribute("position",new qt(i,3))}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}}function py(u,e,i){const s=`${u.x},${u.y},${u.z}-${e.x},${e.y},${e.z}`,l=`${e.x},${e.y},${e.z}-${u.x},${u.y},${u.z}`;return i.has(s)===!0||i.has(l)===!0?!1:(i.add(s),i.add(l),!0)}var my=Object.freeze({__proto__:null,BoxGeometry:$o,CapsuleGeometry:ud,CircleGeometry:fd,ConeGeometry:dd,CylinderGeometry:wc,DodecahedronGeometry:pd,EdgesGeometry:ay,ExtrudeGeometry:Md,IcosahedronGeometry:Sd,LatheGeometry:ru,OctahedronGeometry:lu,PlaneGeometry:Ac,PolyhedronGeometry:ao,RingGeometry:bd,ShapeGeometry:Ed,SphereGeometry:cu,TetrahedronGeometry:wd,TorusGeometry:Td,TorusKnotGeometry:Ad,TubeGeometry:Rd,WireframeGeometry:dy});class _y extends xr{constructor(e){super(),this.isShadowMaterial=!0,this.type="ShadowMaterial",this.color=new It(0),this.transparent=!0,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.fog=e.fog,this}}class gy extends Bs{constructor(e){super(e),this.isRawShaderMaterial=!0,this.type="RawShaderMaterial"}}class h_ extends xr{constructor(e){super(),this.isMeshStandardMaterial=!0,this.type="MeshStandardMaterial",this.defines={STANDARD:""},this.color=new It(16777215),this.roughness=1,this.metalness=0,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new It(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Ka,this.normalScale=new Ze(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new is,this.envMapIntensity=1,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.defines={STANDARD:""},this.color.copy(e.color),this.roughness=e.roughness,this.metalness=e.metalness,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.roughnessMap=e.roughnessMap,this.metalnessMap=e.metalnessMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapRotation.copy(e.envMapRotation),this.envMapIntensity=e.envMapIntensity,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.flatShading=e.flatShading,this.fog=e.fog,this}}class xy extends h_{constructor(e){super(),this.isMeshPhysicalMaterial=!0,this.defines={STANDARD:"",PHYSICAL:""},this.type="MeshPhysicalMaterial",this.anisotropyRotation=0,this.anisotropyMap=null,this.clearcoatMap=null,this.clearcoatRoughness=0,this.clearcoatRoughnessMap=null,this.clearcoatNormalScale=new Ze(1,1),this.clearcoatNormalMap=null,this.ior=1.5,Object.defineProperty(this,"reflectivity",{get:function(){return bn(2.5*(this.ior-1)/(this.ior+1),0,1)},set:function(i){this.ior=(1+.4*i)/(1-.4*i)}}),this.iridescenceMap=null,this.iridescenceIOR=1.3,this.iridescenceThicknessRange=[100,400],this.iridescenceThicknessMap=null,this.sheenColor=new It(0),this.sheenColorMap=null,this.sheenRoughness=1,this.sheenRoughnessMap=null,this.transmissionMap=null,this.thickness=0,this.thicknessMap=null,this.attenuationDistance=1/0,this.attenuationColor=new It(1,1,1),this.specularIntensity=1,this.specularIntensityMap=null,this.specularColor=new It(1,1,1),this.specularColorMap=null,this._anisotropy=0,this._clearcoat=0,this._dispersion=0,this._iridescence=0,this._sheen=0,this._transmission=0,this.setValues(e)}get anisotropy(){return this._anisotropy}set anisotropy(e){this._anisotropy>0!=e>0&&this.version++,this._anisotropy=e}get clearcoat(){return this._clearcoat}set clearcoat(e){this._clearcoat>0!=e>0&&this.version++,this._clearcoat=e}get iridescence(){return this._iridescence}set iridescence(e){this._iridescence>0!=e>0&&this.version++,this._iridescence=e}get dispersion(){return this._dispersion}set dispersion(e){this._dispersion>0!=e>0&&this.version++,this._dispersion=e}get sheen(){return this._sheen}set sheen(e){this._sheen>0!=e>0&&this.version++,this._sheen=e}get transmission(){return this._transmission}set transmission(e){this._transmission>0!=e>0&&this.version++,this._transmission=e}copy(e){return super.copy(e),this.defines={STANDARD:"",PHYSICAL:""},this.anisotropy=e.anisotropy,this.anisotropyRotation=e.anisotropyRotation,this.anisotropyMap=e.anisotropyMap,this.clearcoat=e.clearcoat,this.clearcoatMap=e.clearcoatMap,this.clearcoatRoughness=e.clearcoatRoughness,this.clearcoatRoughnessMap=e.clearcoatRoughnessMap,this.clearcoatNormalMap=e.clearcoatNormalMap,this.clearcoatNormalScale.copy(e.clearcoatNormalScale),this.dispersion=e.dispersion,this.ior=e.ior,this.iridescence=e.iridescence,this.iridescenceMap=e.iridescenceMap,this.iridescenceIOR=e.iridescenceIOR,this.iridescenceThicknessRange=[...e.iridescenceThicknessRange],this.iridescenceThicknessMap=e.iridescenceThicknessMap,this.sheen=e.sheen,this.sheenColor.copy(e.sheenColor),this.sheenColorMap=e.sheenColorMap,this.sheenRoughness=e.sheenRoughness,this.sheenRoughnessMap=e.sheenRoughnessMap,this.transmission=e.transmission,this.transmissionMap=e.transmissionMap,this.thickness=e.thickness,this.thicknessMap=e.thicknessMap,this.attenuationDistance=e.attenuationDistance,this.attenuationColor.copy(e.attenuationColor),this.specularIntensity=e.specularIntensity,this.specularIntensityMap=e.specularIntensityMap,this.specularColor.copy(e.specularColor),this.specularColorMap=e.specularColorMap,this}}class vy extends xr{constructor(e){super(),this.isMeshPhongMaterial=!0,this.type="MeshPhongMaterial",this.color=new It(16777215),this.specular=new It(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new It(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Ka,this.normalScale=new Ze(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new is,this.combine=vn,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.specular.copy(e.specular),this.shininess=e.shininess,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapRotation.copy(e.envMapRotation),this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.flatShading=e.flatShading,this.fog=e.fog,this}}class yy extends xr{constructor(e){super(),this.isMeshToonMaterial=!0,this.defines={TOON:""},this.type="MeshToonMaterial",this.color=new It(16777215),this.map=null,this.gradientMap=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new It(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Ka,this.normalScale=new Ze(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.gradientMap=e.gradientMap,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.alphaMap=e.alphaMap,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.fog=e.fog,this}}class My extends xr{constructor(e){super(),this.isMeshNormalMaterial=!0,this.type="MeshNormalMaterial",this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Ka,this.normalScale=new Ze(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.flatShading=!1,this.setValues(e)}copy(e){return super.copy(e),this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.flatShading=e.flatShading,this}}class Sy extends xr{constructor(e){super(),this.isMeshLambertMaterial=!0,this.type="MeshLambertMaterial",this.color=new It(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new It(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Ka,this.normalScale=new Ze(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new is,this.combine=vn,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapRotation.copy(e.envMapRotation),this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.flatShading=e.flatShading,this.fog=e.fog,this}}class u_ extends xr{constructor(e){super(),this.isMeshDepthMaterial=!0,this.type="MeshDepthMaterial",this.depthPacking=Xx,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.setValues(e)}copy(e){return super.copy(e),this.depthPacking=e.depthPacking,this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this}}class f_ extends xr{constructor(e){super(),this.isMeshDistanceMaterial=!0,this.type="MeshDistanceMaterial",this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.setValues(e)}copy(e){return super.copy(e),this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this}}class by extends xr{constructor(e){super(),this.isMeshMatcapMaterial=!0,this.defines={MATCAP:""},this.type="MeshMatcapMaterial",this.color=new It(16777215),this.matcap=null,this.map=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Ka,this.normalScale=new Ze(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.flatShading=!1,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.defines={MATCAP:""},this.color.copy(e.color),this.matcap=e.matcap,this.map=e.map,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.alphaMap=e.alphaMap,this.flatShading=e.flatShading,this.fog=e.fog,this}}class Ey extends Lr{constructor(e){super(),this.isLineDashedMaterial=!0,this.type="LineDashedMaterial",this.scale=1,this.dashSize=3,this.gapSize=1,this.setValues(e)}copy(e){return super.copy(e),this.scale=e.scale,this.dashSize=e.dashSize,this.gapSize=e.gapSize,this}}function nl(u,e,i){return!u||!i&&u.constructor===e?u:typeof e.BYTES_PER_ELEMENT=="number"?new e(u):Array.prototype.slice.call(u)}function wy(u){return ArrayBuffer.isView(u)&&!(u instanceof DataView)}function Ty(u){function e(l,h){return u[l]-u[h]}const i=u.length,s=new Array(i);for(let l=0;l!==i;++l)s[l]=l;return s.sort(e),s}function d_(u,e,i){const s=u.length,l=new u.constructor(s);for(let h=0,f=0;f!==s;++h){const m=i[h]*e;for(let g=0;g!==e;++g)l[f++]=u[m+g]}return l}function p_(u,e,i,s){let l=1,h=u[0];for(;h!==void 0&&h[s]===void 0;)h=u[l++];if(h===void 0)return;let f=h[s];if(f!==void 0)if(Array.isArray(f))do f=h[s],f!==void 0&&(e.push(h.time),i.push.apply(i,f)),h=u[l++];while(h!==void 0);else if(f.toArray!==void 0)do f=h[s],f!==void 0&&(e.push(h.time),f.toArray(i,i.length)),h=u[l++];while(h!==void 0);else do f=h[s],f!==void 0&&(e.push(h.time),i.push(f)),h=u[l++];while(h!==void 0)}function F1(u,e,i,s,l=30){const h=u.clone();h.name=e;const f=[];for(let g=0;g<h.tracks.length;++g){const y=h.tracks[g],S=y.getValueSize(),w=[],T=[];for(let R=0;R<y.times.length;++R){const I=y.times[R]*l;if(!(I<i||I>=s)){w.push(y.times[R]);for(let F=0;F<S;++F)T.push(y.values[R*S+F])}}w.length!==0&&(y.times=nl(w,y.times.constructor),y.values=nl(T,y.values.constructor),f.push(y))}h.tracks=f;let m=1/0;for(let g=0;g<h.tracks.length;++g)m>h.tracks[g].times[0]&&(m=h.tracks[g].times[0]);for(let g=0;g<h.tracks.length;++g)h.tracks[g].shift(-1*m);return h.resetDuration(),h}function O1(u,e=0,i=u,s=30){s<=0&&(s=30);const l=i.tracks.length,h=e/s;for(let f=0;f<l;++f){const m=i.tracks[f],g=m.ValueTypeName;if(g==="bool"||g==="string")continue;const y=u.tracks.find(function(C){return C.name===m.name&&C.ValueTypeName===g});if(y===void 0)continue;let S=0;const w=m.getValueSize();m.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(S=w/3);let T=0;const R=y.getValueSize();y.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(T=R/3);const I=m.times.length-1;let F;if(h<=m.times[0]){const C=S,q=w-S;F=m.values.slice(C,q)}else if(h>=m.times[I]){const C=I*w+S,q=C+w-S;F=m.values.slice(C,q)}else{const C=m.createInterpolant(),q=S,G=w-S;C.evaluate(h),F=C.resultBuffer.slice(q,G)}g==="quaternion"&&new kr().fromArray(F).normalize().conjugate().toArray(F);const D=y.times.length;for(let C=0;C<D;++C){const q=C*R+T;if(g==="quaternion")kr.multiplyQuaternionsFlat(y.values,q,F,0,y.values,q);else{const G=R-T*2;for(let H=0;H<G;++H)y.values[q+H]-=F[H]}}}return u.blendMode=dm,u}const B1={convertArray:nl,isTypedArray:wy,getKeyframeOrder:Ty,sortedArray:d_,flattenJSON:p_,subclip:F1,makeClipAdditive:O1};class hu{constructor(e,i,s,l){this.parameterPositions=e,this._cachedIndex=0,this.resultBuffer=l!==void 0?l:new i.constructor(s),this.sampleValues=i,this.valueSize=s,this.settings=null,this.DefaultSettings_={}}evaluate(e){const i=this.parameterPositions;let s=this._cachedIndex,l=i[s],h=i[s-1];e:{t:{let f;n:{i:if(!(e<l)){for(let m=s+2;;){if(l===void 0){if(e<h)break i;return s=i.length,this._cachedIndex=s,this.copySampleValue_(s-1)}if(s===m)break;if(h=l,l=i[++s],e<l)break t}f=i.length;break n}if(!(e>=h)){const m=i[1];e<m&&(s=2,h=m);for(let g=s-2;;){if(h===void 0)return this._cachedIndex=0,this.copySampleValue_(0);if(s===g)break;if(l=h,h=i[--s-1],e>=h)break t}f=s,s=0;break n}break e}for(;s<f;){const m=s+f>>>1;e<i[m]?f=m:s=m+1}if(l=i[s],h=i[s-1],h===void 0)return this._cachedIndex=0,this.copySampleValue_(0);if(l===void 0)return s=i.length,this._cachedIndex=s,this.copySampleValue_(s-1)}this._cachedIndex=s,this.intervalChanged_(s,h,l)}return this.interpolate_(s,h,e,l)}getSettings_(){return this.settings||this.DefaultSettings_}copySampleValue_(e){const i=this.resultBuffer,s=this.sampleValues,l=this.valueSize,h=e*l;for(let f=0;f!==l;++f)i[f]=s[h+f];return i}interpolate_(){throw new Error("call to abstract method")}intervalChanged_(){}}class Ay extends hu{constructor(e,i,s,l){super(e,i,s,l),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0,this.DefaultSettings_={endingStart:ko,endingEnd:ko}}intervalChanged_(e,i,s){const l=this.parameterPositions;let h=e-2,f=e+1,m=l[h],g=l[f];if(m===void 0)switch(this.getSettings_().endingStart){case Vo:h=e,m=2*i-s;break;case Uh:h=l.length-2,m=i+l[h]-l[h+1];break;default:h=e,m=s}if(g===void 0)switch(this.getSettings_().endingEnd){case Vo:f=e,g=2*s-i;break;case Uh:f=1,g=s+l[1]-l[0];break;default:f=e-1,g=i}const y=(s-i)*.5,S=this.valueSize;this._weightPrev=y/(i-m),this._weightNext=y/(g-s),this._offsetPrev=h*S,this._offsetNext=f*S}interpolate_(e,i,s,l){const h=this.resultBuffer,f=this.sampleValues,m=this.valueSize,g=e*m,y=g-m,S=this._offsetPrev,w=this._offsetNext,T=this._weightPrev,R=this._weightNext,I=(s-i)/(l-i),F=I*I,D=F*I,C=-T*D+2*T*F-T*I,q=(1+T)*D+(-1.5-2*T)*F+(-.5+T)*I+1,G=(-1-R)*D+(1.5+R)*F+.5*I,H=R*D-R*F;for(let le=0;le!==m;++le)h[le]=C*f[S+le]+q*f[y+le]+G*f[g+le]+H*f[w+le];return h}}class m_ extends hu{constructor(e,i,s,l){super(e,i,s,l)}interpolate_(e,i,s,l){const h=this.resultBuffer,f=this.sampleValues,m=this.valueSize,g=e*m,y=g-m,S=(s-i)/(l-i),w=1-S;for(let T=0;T!==m;++T)h[T]=f[y+T]*w+f[g+T]*S;return h}}class Ry extends hu{constructor(e,i,s,l){super(e,i,s,l)}interpolate_(e){return this.copySampleValue_(e-1)}}class ks{constructor(e,i,s,l){if(e===void 0)throw new Error("THREE.KeyframeTrack: track name is undefined");if(i===void 0||i.length===0)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+e);this.name=e,this.times=nl(i,this.TimeBufferType),this.values=nl(s,this.ValueBufferType),this.setInterpolation(l||this.DefaultInterpolation)}static toJSON(e){const i=e.constructor;let s;if(i.toJSON!==this.toJSON)s=i.toJSON(e);else{s={name:e.name,times:nl(e.times,Array),values:nl(e.values,Array)};const l=e.getInterpolation();l!==e.DefaultInterpolation&&(s.interpolation=l)}return s.type=e.ValueTypeName,s}InterpolantFactoryMethodDiscrete(e){return new Ry(this.times,this.values,this.getValueSize(),e)}InterpolantFactoryMethodLinear(e){return new m_(this.times,this.values,this.getValueSize(),e)}InterpolantFactoryMethodSmooth(e){return new Ay(this.times,this.values,this.getValueSize(),e)}setInterpolation(e){let i;switch(e){case Lh:i=this.InterpolantFactoryMethodDiscrete;break;case vf:i=this.InterpolantFactoryMethodLinear;break;case yf:i=this.InterpolantFactoryMethodSmooth;break}if(i===void 0){const s="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(this.createInterpolant===void 0)if(e!==this.DefaultInterpolation)this.setInterpolation(this.DefaultInterpolation);else throw new Error(s);return console.warn("THREE.KeyframeTrack:",s),this}return this.createInterpolant=i,this}getInterpolation(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return Lh;case this.InterpolantFactoryMethodLinear:return vf;case this.InterpolantFactoryMethodSmooth:return yf}}getValueSize(){return this.values.length/this.times.length}shift(e){if(e!==0){const i=this.times;for(let s=0,l=i.length;s!==l;++s)i[s]+=e}return this}scale(e){if(e!==1){const i=this.times;for(let s=0,l=i.length;s!==l;++s)i[s]*=e}return this}trim(e,i){const s=this.times,l=s.length;let h=0,f=l-1;for(;h!==l&&s[h]<e;)++h;for(;f!==-1&&s[f]>i;)--f;if(++f,h!==0||f!==l){h>=f&&(f=Math.max(f,1),h=f-1);const m=this.getValueSize();this.times=s.slice(h,f),this.values=this.values.slice(h*m,f*m)}return this}validate(){let e=!0;const i=this.getValueSize();i-Math.floor(i)!==0&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),e=!1);const s=this.times,l=this.values,h=s.length;h===0&&(console.error("THREE.KeyframeTrack: Track is empty.",this),e=!1);let f=null;for(let m=0;m!==h;m++){const g=s[m];if(typeof g=="number"&&isNaN(g)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,m,g),e=!1;break}if(f!==null&&f>g){console.error("THREE.KeyframeTrack: Out of order keys.",this,m,g,f),e=!1;break}f=g}if(l!==void 0&&wy(l))for(let m=0,g=l.length;m!==g;++m){const y=l[m];if(isNaN(y)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,m,y),e=!1;break}}return e}optimize(){const e=this.times.slice(),i=this.values.slice(),s=this.getValueSize(),l=this.getInterpolation()===yf,h=e.length-1;let f=1;for(let m=1;m<h;++m){let g=!1;const y=e[m],S=e[m+1];if(y!==S&&(m!==1||y!==e[0]))if(l)g=!0;else{const w=m*s,T=w-s,R=w+s;for(let I=0;I!==s;++I){const F=i[w+I];if(F!==i[T+I]||F!==i[R+I]){g=!0;break}}}if(g){if(m!==f){e[f]=e[m];const w=m*s,T=f*s;for(let R=0;R!==s;++R)i[T+R]=i[w+R]}++f}}if(h>0){e[f]=e[h];for(let m=h*s,g=f*s,y=0;y!==s;++y)i[g+y]=i[m+y];++f}return f!==e.length?(this.times=e.slice(0,f),this.values=i.slice(0,f*s)):(this.times=e,this.values=i),this}clone(){const e=this.times.slice(),i=this.values.slice(),s=this.constructor,l=new s(this.name,e,i);return l.createInterpolant=this.createInterpolant,l}}ks.prototype.TimeBufferType=Float32Array,ks.prototype.ValueBufferType=Float32Array,ks.prototype.DefaultInterpolation=vf;class il extends ks{constructor(e,i,s){super(e,i,s)}}il.prototype.ValueTypeName="bool",il.prototype.ValueBufferType=Array,il.prototype.DefaultInterpolation=Lh,il.prototype.InterpolantFactoryMethodLinear=void 0,il.prototype.InterpolantFactoryMethodSmooth=void 0;class __ extends ks{}__.prototype.ValueTypeName="color";class uu extends ks{}uu.prototype.ValueTypeName="number";class Cy extends hu{constructor(e,i,s,l){super(e,i,s,l)}interpolate_(e,i,s,l){const h=this.resultBuffer,f=this.sampleValues,m=this.valueSize,g=(s-i)/(l-i);let y=e*m;for(let S=y+m;y!==S;y+=4)kr.slerpFlat(h,0,f,y-m,f,y,g);return h}}class fu extends ks{InterpolantFactoryMethodLinear(e){return new Cy(this.times,this.values,this.getValueSize(),e)}}fu.prototype.ValueTypeName="quaternion",fu.prototype.InterpolantFactoryMethodSmooth=void 0;class rl extends ks{constructor(e,i,s){super(e,i,s)}}rl.prototype.ValueTypeName="string",rl.prototype.ValueBufferType=Array,rl.prototype.DefaultInterpolation=Lh,rl.prototype.InterpolantFactoryMethodLinear=void 0,rl.prototype.InterpolantFactoryMethodSmooth=void 0;class du extends ks{}du.prototype.ValueTypeName="vector";class pu{constructor(e="",i=-1,s=[],l=Mf){this.name=e,this.tracks=s,this.duration=i,this.blendMode=l,this.uuid=ts(),this.duration<0&&this.resetDuration()}static parse(e){const i=[],s=e.tracks,l=1/(e.fps||1);for(let f=0,m=s.length;f!==m;++f)i.push(k1(s[f]).scale(l));const h=new this(e.name,e.duration,i,e.blendMode);return h.uuid=e.uuid,h}static toJSON(e){const i=[],s=e.tracks,l={name:e.name,duration:e.duration,tracks:i,uuid:e.uuid,blendMode:e.blendMode};for(let h=0,f=s.length;h!==f;++h)i.push(ks.toJSON(s[h]));return l}static CreateFromMorphTargetSequence(e,i,s,l){const h=i.length,f=[];for(let m=0;m<h;m++){let g=[],y=[];g.push((m+h-1)%h,m,(m+1)%h),y.push(0,1,0);const S=Ty(g);g=d_(g,1,S),y=d_(y,1,S),!l&&g[0]===0&&(g.push(h),y.push(y[0])),f.push(new uu(".morphTargetInfluences["+i[m].name+"]",g,y).scale(1/s))}return new this(e,-1,f)}static findByName(e,i){let s=e;if(!Array.isArray(e)){const l=e;s=l.geometry&&l.geometry.animations||l.animations}for(let l=0;l<s.length;l++)if(s[l].name===i)return s[l];return null}static CreateClipsFromMorphTargetSequences(e,i,s){const l={},h=/^([\w-]*?)([\d]+)$/;for(let m=0,g=e.length;m<g;m++){const y=e[m],S=y.name.match(h);if(S&&S.length>1){const w=S[1];let T=l[w];T||(l[w]=T=[]),T.push(y)}}const f=[];for(const m in l)f.push(this.CreateFromMorphTargetSequence(m,l[m],i,s));return f}static parseAnimation(e,i){if(!e)return console.error("THREE.AnimationClip: No animation in JSONLoader data."),null;const s=function(w,T,R,I,F){if(R.length!==0){const D=[],C=[];p_(R,D,C,I),D.length!==0&&F.push(new w(T,D,C))}},l=[],h=e.name||"default",f=e.fps||30,m=e.blendMode;let g=e.length||-1;const y=e.hierarchy||[];for(let w=0;w<y.length;w++){const T=y[w].keys;if(!(!T||T.length===0))if(T[0].morphTargets){const R={};let I;for(I=0;I<T.length;I++)if(T[I].morphTargets)for(let F=0;F<T[I].morphTargets.length;F++)R[T[I].morphTargets[F]]=-1;for(const F in R){const D=[],C=[];for(let q=0;q!==T[I].morphTargets.length;++q){const G=T[I];D.push(G.time),C.push(G.morphTarget===F?1:0)}l.push(new uu(".morphTargetInfluence["+F+"]",D,C))}g=R.length*f}else{const R=".bones["+i[w].name+"]";s(du,R+".position",T,"pos",l),s(fu,R+".quaternion",T,"rot",l),s(du,R+".scale",T,"scl",l)}}return l.length===0?null:new this(h,g,l,m)}resetDuration(){const e=this.tracks;let i=0;for(let s=0,l=e.length;s!==l;++s){const h=this.tracks[s];i=Math.max(i,h.times[h.times.length-1])}return this.duration=i,this}trim(){for(let e=0;e<this.tracks.length;e++)this.tracks[e].trim(0,this.duration);return this}validate(){let e=!0;for(let i=0;i<this.tracks.length;i++)e=e&&this.tracks[i].validate();return e}optimize(){for(let e=0;e<this.tracks.length;e++)this.tracks[e].optimize();return this}clone(){const e=[];for(let i=0;i<this.tracks.length;i++)e.push(this.tracks[i].clone());return new this.constructor(this.name,this.duration,e,this.blendMode)}toJSON(){return this.constructor.toJSON(this)}}function z1(u){switch(u.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return uu;case"vector":case"vector2":case"vector3":case"vector4":return du;case"color":return __;case"quaternion":return fu;case"bool":case"boolean":return il;case"string":return rl}throw new Error("THREE.KeyframeTrack: Unsupported typeName: "+u)}function k1(u){if(u.type===void 0)throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");const e=z1(u.type);if(u.times===void 0){const i=[],s=[];p_(u.keys,i,s,"value"),u.times=i,u.values=s}return e.parse!==void 0?e.parse(u):new e(u.name,u.times,u.values,u.interpolation)}const wa={enabled:!1,files:{},add:function(u,e){this.enabled!==!1&&(this.files[u]=e)},get:function(u){if(this.enabled!==!1)return this.files[u]},remove:function(u){delete this.files[u]},clear:function(){this.files={}}};class g_{constructor(e,i,s){const l=this;let h=!1,f=0,m=0,g;const y=[];this.onStart=void 0,this.onLoad=e,this.onProgress=i,this.onError=s,this.itemStart=function(S){m++,h===!1&&l.onStart!==void 0&&l.onStart(S,f,m),h=!0},this.itemEnd=function(S){f++,l.onProgress!==void 0&&l.onProgress(S,f,m),f===m&&(h=!1,l.onLoad!==void 0&&l.onLoad())},this.itemError=function(S){l.onError!==void 0&&l.onError(S)},this.resolveURL=function(S){return g?g(S):S},this.setURLModifier=function(S){return g=S,this},this.addHandler=function(S,w){return y.push(S,w),this},this.removeHandler=function(S){const w=y.indexOf(S);return w!==-1&&y.splice(w,2),this},this.getHandler=function(S){for(let w=0,T=y.length;w<T;w+=2){const R=y[w],I=y[w+1];if(R.global&&(R.lastIndex=0),R.test(S))return I}return null}}}const Py=new g_;class Wr{constructor(e){this.manager=e!==void 0?e:Py,this.crossOrigin="anonymous",this.withCredentials=!1,this.path="",this.resourcePath="",this.requestHeader={}}load(){}loadAsync(e,i){const s=this;return new Promise(function(l,h){s.load(e,l,i,h)})}parse(){}setCrossOrigin(e){return this.crossOrigin=e,this}setWithCredentials(e){return this.withCredentials=e,this}setPath(e){return this.path=e,this}setResourcePath(e){return this.resourcePath=e,this}setRequestHeader(e){return this.requestHeader=e,this}}Wr.DEFAULT_MATERIAL_NAME="__DEFAULT";const Ta={};class V1 extends Error{constructor(e,i){super(e),this.response=i}}class Aa extends Wr{constructor(e){super(e)}load(e,i,s,l){e===void 0&&(e=""),this.path!==void 0&&(e=this.path+e),e=this.manager.resolveURL(e);const h=wa.get(e);if(h!==void 0)return this.manager.itemStart(e),setTimeout(()=>{i&&i(h),this.manager.itemEnd(e)},0),h;if(Ta[e]!==void 0){Ta[e].push({onLoad:i,onProgress:s,onError:l});return}Ta[e]=[],Ta[e].push({onLoad:i,onProgress:s,onError:l});const f=new Request(e,{headers:new Headers(this.requestHeader),credentials:this.withCredentials?"include":"same-origin"}),m=this.mimeType,g=this.responseType;fetch(f).then(y=>{if(y.status===200||y.status===0){if(y.status===0&&console.warn("THREE.FileLoader: HTTP Status 0 received."),typeof ReadableStream>"u"||y.body===void 0||y.body.getReader===void 0)return y;const S=Ta[e],w=y.body.getReader(),T=y.headers.get("X-File-Size")||y.headers.get("Content-Length"),R=T?parseInt(T):0,I=R!==0;let F=0;const D=new ReadableStream({start(C){q();function q(){w.read().then(({done:G,value:H})=>{if(G)C.close();else{F+=H.byteLength;const le=new ProgressEvent("progress",{lengthComputable:I,loaded:F,total:R});for(let ne=0,oe=S.length;ne<oe;ne++){const ce=S[ne];ce.onProgress&&ce.onProgress(le)}C.enqueue(H),q()}},G=>{C.error(G)})}}});return new Response(D)}else throw new V1(`fetch for "${y.url}" responded with ${y.status}: ${y.statusText}`,y)}).then(y=>{switch(g){case"arraybuffer":return y.arrayBuffer();case"blob":return y.blob();case"document":return y.text().then(S=>new DOMParser().parseFromString(S,m));case"json":return y.json();default:if(m===void 0)return y.text();{const w=/charset="?([^;"\s]*)"?/i.exec(m),T=w&&w[1]?w[1].toLowerCase():void 0,R=new TextDecoder(T);return y.arrayBuffer().then(I=>R.decode(I))}}}).then(y=>{wa.add(e,y);const S=Ta[e];delete Ta[e];for(let w=0,T=S.length;w<T;w++){const R=S[w];R.onLoad&&R.onLoad(y)}}).catch(y=>{const S=Ta[e];if(S===void 0)throw this.manager.itemError(e),y;delete Ta[e];for(let w=0,T=S.length;w<T;w++){const R=S[w];R.onError&&R.onError(y)}this.manager.itemError(e)}).finally(()=>{this.manager.itemEnd(e)}),this.manager.itemStart(e)}setResponseType(e){return this.responseType=e,this}setMimeType(e){return this.mimeType=e,this}}class H1 extends Wr{constructor(e){super(e)}load(e,i,s,l){const h=this,f=new Aa(this.manager);f.setPath(this.path),f.setRequestHeader(this.requestHeader),f.setWithCredentials(this.withCredentials),f.load(e,function(m){try{i(h.parse(JSON.parse(m)))}catch(g){l?l(g):console.error(g),h.manager.itemError(e)}},s,l)}parse(e){const i=[];for(let s=0;s<e.length;s++){const l=pu.parse(e[s]);i.push(l)}return i}}class G1 extends Wr{constructor(e){super(e)}load(e,i,s,l){const h=this,f=[],m=new od,g=new Aa(this.manager);g.setPath(this.path),g.setResponseType("arraybuffer"),g.setRequestHeader(this.requestHeader),g.setWithCredentials(h.withCredentials);let y=0;function S(w){g.load(e[w],function(T){const R=h.parse(T,!0);f[w]={width:R.width,height:R.height,format:R.format,mipmaps:R.mipmaps},y+=1,y===6&&(R.mipmapCount===1&&(m.minFilter=pe),m.image=f,m.format=R.format,m.needsUpdate=!0,i&&i(m))},s,l)}if(Array.isArray(e))for(let w=0,T=e.length;w<T;++w)S(w);else g.load(e,function(w){const T=h.parse(w,!0);if(T.isCubemap){const R=T.mipmaps.length/T.mipmapCount;for(let I=0;I<R;I++){f[I]={mipmaps:[]};for(let F=0;F<T.mipmapCount;F++)f[I].mipmaps.push(T.mipmaps[I*T.mipmapCount+F]),f[I].format=T.format,f[I].width=T.width,f[I].height=T.height}m.image=f}else m.image.width=T.width,m.image.height=T.height,m.mipmaps=T.mipmaps;T.mipmapCount===1&&(m.minFilter=pe),m.format=T.format,m.needsUpdate=!0,i&&i(m)},s,l);return m}}class mu extends Wr{constructor(e){super(e)}load(e,i,s,l){this.path!==void 0&&(e=this.path+e),e=this.manager.resolveURL(e);const h=this,f=wa.get(e);if(f!==void 0)return h.manager.itemStart(e),setTimeout(function(){i&&i(f),h.manager.itemEnd(e)},0),f;const m=zh("img");function g(){S(),wa.add(e,this),i&&i(this),h.manager.itemEnd(e)}function y(w){S(),l&&l(w),h.manager.itemError(e),h.manager.itemEnd(e)}function S(){m.removeEventListener("load",g,!1),m.removeEventListener("error",y,!1)}return m.addEventListener("load",g,!1),m.addEventListener("error",y,!1),e.slice(0,5)!=="data:"&&this.crossOrigin!==void 0&&(m.crossOrigin=this.crossOrigin),h.manager.itemStart(e),m.src=e,m}}class W1 extends Wr{constructor(e){super(e)}load(e,i,s,l){const h=new qh;h.colorSpace=zr;const f=new mu(this.manager);f.setCrossOrigin(this.crossOrigin),f.setPath(this.path);let m=0;function g(y){f.load(e[y],function(S){h.images[y]=S,m++,m===6&&(h.needsUpdate=!0,i&&i(h))},void 0,l)}for(let y=0;y<e.length;++y)g(y);return h}}class X1 extends Wr{constructor(e){super(e)}load(e,i,s,l){const h=this,f=new ea,m=new Aa(this.manager);return m.setResponseType("arraybuffer"),m.setRequestHeader(this.requestHeader),m.setPath(this.path),m.setWithCredentials(h.withCredentials),m.load(e,function(g){let y;try{y=h.parse(g)}catch(S){if(l!==void 0)l(S);else{console.error(S);return}}y.image!==void 0?f.image=y.image:y.data!==void 0&&(f.image.width=y.width,f.image.height=y.height,f.image.data=y.data),f.wrapS=y.wrapS!==void 0?y.wrapS:xt,f.wrapT=y.wrapT!==void 0?y.wrapT:xt,f.magFilter=y.magFilter!==void 0?y.magFilter:pe,f.minFilter=y.minFilter!==void 0?y.minFilter:pe,f.anisotropy=y.anisotropy!==void 0?y.anisotropy:1,y.colorSpace!==void 0&&(f.colorSpace=y.colorSpace),y.flipY!==void 0&&(f.flipY=y.flipY),y.format!==void 0&&(f.format=y.format),y.type!==void 0&&(f.type=y.type),y.mipmaps!==void 0&&(f.mipmaps=y.mipmaps,f.minFilter=Ge),y.mipmapCount===1&&(f.minFilter=pe),y.generateMipmaps!==void 0&&(f.generateMipmaps=y.generateMipmaps),f.needsUpdate=!0,i&&i(f,y)},s,l),f}}class q1 extends Wr{constructor(e){super(e)}load(e,i,s,l){const h=new Li,f=new mu(this.manager);return f.setCrossOrigin(this.crossOrigin),f.setPath(this.path),f.load(e,function(m){h.image=m,h.needsUpdate=!0,i!==void 0&&i(h)},s,l),h}}class oo extends $n{constructor(e,i=1){super(),this.isLight=!0,this.type="Light",this.color=new It(e),this.intensity=i}dispose(){}copy(e,i){return super.copy(e,i),this.color.copy(e.color),this.intensity=e.intensity,this}toJSON(e){const i=super.toJSON(e);return i.object.color=this.color.getHex(),i.object.intensity=this.intensity,this.groundColor!==void 0&&(i.object.groundColor=this.groundColor.getHex()),this.distance!==void 0&&(i.object.distance=this.distance),this.angle!==void 0&&(i.object.angle=this.angle),this.decay!==void 0&&(i.object.decay=this.decay),this.penumbra!==void 0&&(i.object.penumbra=this.penumbra),this.shadow!==void 0&&(i.object.shadow=this.shadow.toJSON()),this.target!==void 0&&(i.object.target=this.target.uuid),i}}class Iy extends oo{constructor(e,i,s){super(e,s),this.isHemisphereLight=!0,this.type="HemisphereLight",this.position.copy($n.DEFAULT_UP),this.updateMatrix(),this.groundColor=new It(i)}copy(e,i){return super.copy(e,i),this.groundColor.copy(e.groundColor),this}}const x_=new fn,Dy=new re,Ly=new re;class v_{constructor(e){this.camera=e,this.intensity=1,this.bias=0,this.normalBias=0,this.radius=1,this.blurSamples=8,this.mapSize=new Ze(512,512),this.map=null,this.mapPass=null,this.matrix=new fn,this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new jh,this._frameExtents=new Ze(1,1),this._viewportCount=1,this._viewports=[new Zn(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(e){const i=this.camera,s=this.matrix;Dy.setFromMatrixPosition(e.matrixWorld),i.position.copy(Dy),Ly.setFromMatrixPosition(e.target.matrixWorld),i.lookAt(Ly),i.updateMatrixWorld(),x_.multiplyMatrices(i.projectionMatrix,i.matrixWorldInverse),this._frustum.setFromProjectionMatrix(x_),s.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),s.multiply(x_)}getViewport(e){return this._viewports[e]}getFrameExtents(){return this._frameExtents}dispose(){this.map&&this.map.dispose(),this.mapPass&&this.mapPass.dispose()}copy(e){return this.camera=e.camera.clone(),this.intensity=e.intensity,this.bias=e.bias,this.radius=e.radius,this.mapSize.copy(e.mapSize),this}clone(){return new this.constructor().copy(this)}toJSON(){const e={};return this.intensity!==1&&(e.intensity=this.intensity),this.bias!==0&&(e.bias=this.bias),this.normalBias!==0&&(e.normalBias=this.normalBias),this.radius!==1&&(e.radius=this.radius),(this.mapSize.x!==512||this.mapSize.y!==512)&&(e.mapSize=this.mapSize.toArray()),e.camera=this.camera.toJSON(!1).object,delete e.camera.matrix,e}}class Y1 extends v_{constructor(){super(new hr(50,1,.5,500)),this.isSpotLightShadow=!0,this.focus=1}updateMatrices(e){const i=this.camera,s=ec*2*e.angle*this.focus,l=this.mapSize.width/this.mapSize.height,h=e.distance||i.far;(s!==i.fov||l!==i.aspect||h!==i.far)&&(i.fov=s,i.aspect=l,i.far=h,i.updateProjectionMatrix()),super.updateMatrices(e)}copy(e){return super.copy(e),this.focus=e.focus,this}}class Uy extends oo{constructor(e,i,s=0,l=Math.PI/3,h=0,f=2){super(e,i),this.isSpotLight=!0,this.type="SpotLight",this.position.copy($n.DEFAULT_UP),this.updateMatrix(),this.target=new $n,this.distance=s,this.angle=l,this.penumbra=h,this.decay=f,this.map=null,this.shadow=new Y1}get power(){return this.intensity*Math.PI}set power(e){this.intensity=e/Math.PI}dispose(){this.shadow.dispose()}copy(e,i){return super.copy(e,i),this.distance=e.distance,this.angle=e.angle,this.penumbra=e.penumbra,this.decay=e.decay,this.target=e.target.clone(),this.shadow=e.shadow.clone(),this}}const Ny=new fn,_u=new re,y_=new re;class Z1 extends v_{constructor(){super(new hr(90,1,.5,500)),this.isPointLightShadow=!0,this._frameExtents=new Ze(4,2),this._viewportCount=6,this._viewports=[new Zn(2,1,1,1),new Zn(0,1,1,1),new Zn(3,1,1,1),new Zn(1,1,1,1),new Zn(3,0,1,1),new Zn(1,0,1,1)],this._cubeDirections=[new re(1,0,0),new re(-1,0,0),new re(0,0,1),new re(0,0,-1),new re(0,1,0),new re(0,-1,0)],this._cubeUps=[new re(0,1,0),new re(0,1,0),new re(0,1,0),new re(0,1,0),new re(0,0,1),new re(0,0,-1)]}updateMatrices(e,i=0){const s=this.camera,l=this.matrix,h=e.distance||s.far;h!==s.far&&(s.far=h,s.updateProjectionMatrix()),_u.setFromMatrixPosition(e.matrixWorld),s.position.copy(_u),y_.copy(s.position),y_.add(this._cubeDirections[i]),s.up.copy(this._cubeUps[i]),s.lookAt(y_),s.updateMatrixWorld(),l.makeTranslation(-_u.x,-_u.y,-_u.z),Ny.multiplyMatrices(s.projectionMatrix,s.matrixWorldInverse),this._frustum.setFromProjectionMatrix(Ny)}}class Fy extends oo{constructor(e,i,s=0,l=2){super(e,i),this.isPointLight=!0,this.type="PointLight",this.distance=s,this.decay=l,this.shadow=new Z1}get power(){return this.intensity*4*Math.PI}set power(e){this.intensity=e/(4*Math.PI)}dispose(){this.shadow.dispose()}copy(e,i){return super.copy(e,i),this.distance=e.distance,this.decay=e.decay,this.shadow=e.shadow.clone(),this}}class Cd extends Vf{constructor(e=-1,i=1,s=1,l=-1,h=.1,f=2e3){super(),this.isOrthographicCamera=!0,this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=e,this.right=i,this.top=s,this.bottom=l,this.near=h,this.far=f,this.updateProjectionMatrix()}copy(e,i){return super.copy(e,i),this.left=e.left,this.right=e.right,this.top=e.top,this.bottom=e.bottom,this.near=e.near,this.far=e.far,this.zoom=e.zoom,this.view=e.view===null?null:Object.assign({},e.view),this}setViewOffset(e,i,s,l,h,f){this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=i,this.view.offsetX=s,this.view.offsetY=l,this.view.width=h,this.view.height=f,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const e=(this.right-this.left)/(2*this.zoom),i=(this.top-this.bottom)/(2*this.zoom),s=(this.right+this.left)/2,l=(this.top+this.bottom)/2;let h=s-e,f=s+e,m=l+i,g=l-i;if(this.view!==null&&this.view.enabled){const y=(this.right-this.left)/this.view.fullWidth/this.zoom,S=(this.top-this.bottom)/this.view.fullHeight/this.zoom;h+=y*this.view.offsetX,f=h+y*this.view.width,m-=S*this.view.offsetY,g=m-S*this.view.height}this.projectionMatrix.makeOrthographic(h,f,m,g,this.near,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){const i=super.toJSON(e);return i.object.zoom=this.zoom,i.object.left=this.left,i.object.right=this.right,i.object.top=this.top,i.object.bottom=this.bottom,i.object.near=this.near,i.object.far=this.far,this.view!==null&&(i.object.view=Object.assign({},this.view)),i}}class $1 extends v_{constructor(){super(new Cd(-5,5,5,-5,.5,500)),this.isDirectionalLightShadow=!0}}class Oy extends oo{constructor(e,i){super(e,i),this.isDirectionalLight=!0,this.type="DirectionalLight",this.position.copy($n.DEFAULT_UP),this.updateMatrix(),this.target=new $n,this.shadow=new $1}dispose(){this.shadow.dispose()}copy(e){return super.copy(e),this.target=e.target.clone(),this.shadow=e.shadow.clone(),this}}class By extends oo{constructor(e,i){super(e,i),this.isAmbientLight=!0,this.type="AmbientLight"}}class zy extends oo{constructor(e,i,s=10,l=10){super(e,i),this.isRectAreaLight=!0,this.type="RectAreaLight",this.width=s,this.height=l}get power(){return this.intensity*this.width*this.height*Math.PI}set power(e){this.intensity=e/(this.width*this.height*Math.PI)}copy(e){return super.copy(e),this.width=e.width,this.height=e.height,this}toJSON(e){const i=super.toJSON(e);return i.object.width=this.width,i.object.height=this.height,i}}class ky{constructor(){this.isSphericalHarmonics3=!0,this.coefficients=[];for(let e=0;e<9;e++)this.coefficients.push(new re)}set(e){for(let i=0;i<9;i++)this.coefficients[i].copy(e[i]);return this}zero(){for(let e=0;e<9;e++)this.coefficients[e].set(0,0,0);return this}getAt(e,i){const s=e.x,l=e.y,h=e.z,f=this.coefficients;return i.copy(f[0]).multiplyScalar(.282095),i.addScaledVector(f[1],.488603*l),i.addScaledVector(f[2],.488603*h),i.addScaledVector(f[3],.488603*s),i.addScaledVector(f[4],1.092548*(s*l)),i.addScaledVector(f[5],1.092548*(l*h)),i.addScaledVector(f[6],.315392*(3*h*h-1)),i.addScaledVector(f[7],1.092548*(s*h)),i.addScaledVector(f[8],.546274*(s*s-l*l)),i}getIrradianceAt(e,i){const s=e.x,l=e.y,h=e.z,f=this.coefficients;return i.copy(f[0]).multiplyScalar(.886227),i.addScaledVector(f[1],2*.511664*l),i.addScaledVector(f[2],2*.511664*h),i.addScaledVector(f[3],2*.511664*s),i.addScaledVector(f[4],2*.429043*s*l),i.addScaledVector(f[5],2*.429043*l*h),i.addScaledVector(f[6],.743125*h*h-.247708),i.addScaledVector(f[7],2*.429043*s*h),i.addScaledVector(f[8],.429043*(s*s-l*l)),i}add(e){for(let i=0;i<9;i++)this.coefficients[i].add(e.coefficients[i]);return this}addScaledSH(e,i){for(let s=0;s<9;s++)this.coefficients[s].addScaledVector(e.coefficients[s],i);return this}scale(e){for(let i=0;i<9;i++)this.coefficients[i].multiplyScalar(e);return this}lerp(e,i){for(let s=0;s<9;s++)this.coefficients[s].lerp(e.coefficients[s],i);return this}equals(e){for(let i=0;i<9;i++)if(!this.coefficients[i].equals(e.coefficients[i]))return!1;return!0}copy(e){return this.set(e.coefficients)}clone(){return new this.constructor().copy(this)}fromArray(e,i=0){const s=this.coefficients;for(let l=0;l<9;l++)s[l].fromArray(e,i+l*3);return this}toArray(e=[],i=0){const s=this.coefficients;for(let l=0;l<9;l++)s[l].toArray(e,i+l*3);return e}static getBasisAt(e,i){const s=e.x,l=e.y,h=e.z;i[0]=.282095,i[1]=.488603*l,i[2]=.488603*h,i[3]=.488603*s,i[4]=1.092548*s*l,i[5]=1.092548*l*h,i[6]=.315392*(3*h*h-1),i[7]=1.092548*s*h,i[8]=.546274*(s*s-l*l)}}class Vy extends oo{constructor(e=new ky,i=1){super(void 0,i),this.isLightProbe=!0,this.sh=e}copy(e){return super.copy(e),this.sh.copy(e.sh),this}fromJSON(e){return this.intensity=e.intensity,this.sh.fromArray(e.sh),this}toJSON(e){const i=super.toJSON(e);return i.object.sh=this.sh.toArray(),i}}class Pd extends Wr{constructor(e){super(e),this.textures={}}load(e,i,s,l){const h=this,f=new Aa(h.manager);f.setPath(h.path),f.setRequestHeader(h.requestHeader),f.setWithCredentials(h.withCredentials),f.load(e,function(m){try{i(h.parse(JSON.parse(m)))}catch(g){l?l(g):console.error(g),h.manager.itemError(e)}},s,l)}parse(e){const i=this.textures;function s(h){return i[h]===void 0&&console.warn("THREE.MaterialLoader: Undefined texture",h),i[h]}const l=this.createMaterialFromType(e.type);if(e.uuid!==void 0&&(l.uuid=e.uuid),e.name!==void 0&&(l.name=e.name),e.color!==void 0&&l.color!==void 0&&l.color.setHex(e.color),e.roughness!==void 0&&(l.roughness=e.roughness),e.metalness!==void 0&&(l.metalness=e.metalness),e.sheen!==void 0&&(l.sheen=e.sheen),e.sheenColor!==void 0&&(l.sheenColor=new It().setHex(e.sheenColor)),e.sheenRoughness!==void 0&&(l.sheenRoughness=e.sheenRoughness),e.emissive!==void 0&&l.emissive!==void 0&&l.emissive.setHex(e.emissive),e.specular!==void 0&&l.specular!==void 0&&l.specular.setHex(e.specular),e.specularIntensity!==void 0&&(l.specularIntensity=e.specularIntensity),e.specularColor!==void 0&&l.specularColor!==void 0&&l.specularColor.setHex(e.specularColor),e.shininess!==void 0&&(l.shininess=e.shininess),e.clearcoat!==void 0&&(l.clearcoat=e.clearcoat),e.clearcoatRoughness!==void 0&&(l.clearcoatRoughness=e.clearcoatRoughness),e.dispersion!==void 0&&(l.dispersion=e.dispersion),e.iridescence!==void 0&&(l.iridescence=e.iridescence),e.iridescenceIOR!==void 0&&(l.iridescenceIOR=e.iridescenceIOR),e.iridescenceThicknessRange!==void 0&&(l.iridescenceThicknessRange=e.iridescenceThicknessRange),e.transmission!==void 0&&(l.transmission=e.transmission),e.thickness!==void 0&&(l.thickness=e.thickness),e.attenuationDistance!==void 0&&(l.attenuationDistance=e.attenuationDistance),e.attenuationColor!==void 0&&l.attenuationColor!==void 0&&l.attenuationColor.setHex(e.attenuationColor),e.anisotropy!==void 0&&(l.anisotropy=e.anisotropy),e.anisotropyRotation!==void 0&&(l.anisotropyRotation=e.anisotropyRotation),e.fog!==void 0&&(l.fog=e.fog),e.flatShading!==void 0&&(l.flatShading=e.flatShading),e.blending!==void 0&&(l.blending=e.blending),e.combine!==void 0&&(l.combine=e.combine),e.side!==void 0&&(l.side=e.side),e.shadowSide!==void 0&&(l.shadowSide=e.shadowSide),e.opacity!==void 0&&(l.opacity=e.opacity),e.transparent!==void 0&&(l.transparent=e.transparent),e.alphaTest!==void 0&&(l.alphaTest=e.alphaTest),e.alphaHash!==void 0&&(l.alphaHash=e.alphaHash),e.depthFunc!==void 0&&(l.depthFunc=e.depthFunc),e.depthTest!==void 0&&(l.depthTest=e.depthTest),e.depthWrite!==void 0&&(l.depthWrite=e.depthWrite),e.colorWrite!==void 0&&(l.colorWrite=e.colorWrite),e.blendSrc!==void 0&&(l.blendSrc=e.blendSrc),e.blendDst!==void 0&&(l.blendDst=e.blendDst),e.blendEquation!==void 0&&(l.blendEquation=e.blendEquation),e.blendSrcAlpha!==void 0&&(l.blendSrcAlpha=e.blendSrcAlpha),e.blendDstAlpha!==void 0&&(l.blendDstAlpha=e.blendDstAlpha),e.blendEquationAlpha!==void 0&&(l.blendEquationAlpha=e.blendEquationAlpha),e.blendColor!==void 0&&l.blendColor!==void 0&&l.blendColor.setHex(e.blendColor),e.blendAlpha!==void 0&&(l.blendAlpha=e.blendAlpha),e.stencilWriteMask!==void 0&&(l.stencilWriteMask=e.stencilWriteMask),e.stencilFunc!==void 0&&(l.stencilFunc=e.stencilFunc),e.stencilRef!==void 0&&(l.stencilRef=e.stencilRef),e.stencilFuncMask!==void 0&&(l.stencilFuncMask=e.stencilFuncMask),e.stencilFail!==void 0&&(l.stencilFail=e.stencilFail),e.stencilZFail!==void 0&&(l.stencilZFail=e.stencilZFail),e.stencilZPass!==void 0&&(l.stencilZPass=e.stencilZPass),e.stencilWrite!==void 0&&(l.stencilWrite=e.stencilWrite),e.wireframe!==void 0&&(l.wireframe=e.wireframe),e.wireframeLinewidth!==void 0&&(l.wireframeLinewidth=e.wireframeLinewidth),e.wireframeLinecap!==void 0&&(l.wireframeLinecap=e.wireframeLinecap),e.wireframeLinejoin!==void 0&&(l.wireframeLinejoin=e.wireframeLinejoin),e.rotation!==void 0&&(l.rotation=e.rotation),e.linewidth!==void 0&&(l.linewidth=e.linewidth),e.dashSize!==void 0&&(l.dashSize=e.dashSize),e.gapSize!==void 0&&(l.gapSize=e.gapSize),e.scale!==void 0&&(l.scale=e.scale),e.polygonOffset!==void 0&&(l.polygonOffset=e.polygonOffset),e.polygonOffsetFactor!==void 0&&(l.polygonOffsetFactor=e.polygonOffsetFactor),e.polygonOffsetUnits!==void 0&&(l.polygonOffsetUnits=e.polygonOffsetUnits),e.dithering!==void 0&&(l.dithering=e.dithering),e.alphaToCoverage!==void 0&&(l.alphaToCoverage=e.alphaToCoverage),e.premultipliedAlpha!==void 0&&(l.premultipliedAlpha=e.premultipliedAlpha),e.forceSinglePass!==void 0&&(l.forceSinglePass=e.forceSinglePass),e.visible!==void 0&&(l.visible=e.visible),e.toneMapped!==void 0&&(l.toneMapped=e.toneMapped),e.userData!==void 0&&(l.userData=e.userData),e.vertexColors!==void 0&&(typeof e.vertexColors=="number"?l.vertexColors=e.vertexColors>0:l.vertexColors=e.vertexColors),e.uniforms!==void 0)for(const h in e.uniforms){const f=e.uniforms[h];switch(l.uniforms[h]={},f.type){case"t":l.uniforms[h].value=s(f.value);break;case"c":l.uniforms[h].value=new It().setHex(f.value);break;case"v2":l.uniforms[h].value=new Ze().fromArray(f.value);break;case"v3":l.uniforms[h].value=new re().fromArray(f.value);break;case"v4":l.uniforms[h].value=new Zn().fromArray(f.value);break;case"m3":l.uniforms[h].value=new wn().fromArray(f.value);break;case"m4":l.uniforms[h].value=new fn().fromArray(f.value);break;default:l.uniforms[h].value=f.value}}if(e.defines!==void 0&&(l.defines=e.defines),e.vertexShader!==void 0&&(l.vertexShader=e.vertexShader),e.fragmentShader!==void 0&&(l.fragmentShader=e.fragmentShader),e.glslVersion!==void 0&&(l.glslVersion=e.glslVersion),e.extensions!==void 0)for(const h in e.extensions)l.extensions[h]=e.extensions[h];if(e.lights!==void 0&&(l.lights=e.lights),e.clipping!==void 0&&(l.clipping=e.clipping),e.size!==void 0&&(l.size=e.size),e.sizeAttenuation!==void 0&&(l.sizeAttenuation=e.sizeAttenuation),e.map!==void 0&&(l.map=s(e.map)),e.matcap!==void 0&&(l.matcap=s(e.matcap)),e.alphaMap!==void 0&&(l.alphaMap=s(e.alphaMap)),e.bumpMap!==void 0&&(l.bumpMap=s(e.bumpMap)),e.bumpScale!==void 0&&(l.bumpScale=e.bumpScale),e.normalMap!==void 0&&(l.normalMap=s(e.normalMap)),e.normalMapType!==void 0&&(l.normalMapType=e.normalMapType),e.normalScale!==void 0){let h=e.normalScale;Array.isArray(h)===!1&&(h=[h,h]),l.normalScale=new Ze().fromArray(h)}return e.displacementMap!==void 0&&(l.displacementMap=s(e.displacementMap)),e.displacementScale!==void 0&&(l.displacementScale=e.displacementScale),e.displacementBias!==void 0&&(l.displacementBias=e.displacementBias),e.roughnessMap!==void 0&&(l.roughnessMap=s(e.roughnessMap)),e.metalnessMap!==void 0&&(l.metalnessMap=s(e.metalnessMap)),e.emissiveMap!==void 0&&(l.emissiveMap=s(e.emissiveMap)),e.emissiveIntensity!==void 0&&(l.emissiveIntensity=e.emissiveIntensity),e.specularMap!==void 0&&(l.specularMap=s(e.specularMap)),e.specularIntensityMap!==void 0&&(l.specularIntensityMap=s(e.specularIntensityMap)),e.specularColorMap!==void 0&&(l.specularColorMap=s(e.specularColorMap)),e.envMap!==void 0&&(l.envMap=s(e.envMap)),e.envMapRotation!==void 0&&l.envMapRotation.fromArray(e.envMapRotation),e.envMapIntensity!==void 0&&(l.envMapIntensity=e.envMapIntensity),e.reflectivity!==void 0&&(l.reflectivity=e.reflectivity),e.refractionRatio!==void 0&&(l.refractionRatio=e.refractionRatio),e.lightMap!==void 0&&(l.lightMap=s(e.lightMap)),e.lightMapIntensity!==void 0&&(l.lightMapIntensity=e.lightMapIntensity),e.aoMap!==void 0&&(l.aoMap=s(e.aoMap)),e.aoMapIntensity!==void 0&&(l.aoMapIntensity=e.aoMapIntensity),e.gradientMap!==void 0&&(l.gradientMap=s(e.gradientMap)),e.clearcoatMap!==void 0&&(l.clearcoatMap=s(e.clearcoatMap)),e.clearcoatRoughnessMap!==void 0&&(l.clearcoatRoughnessMap=s(e.clearcoatRoughnessMap)),e.clearcoatNormalMap!==void 0&&(l.clearcoatNormalMap=s(e.clearcoatNormalMap)),e.clearcoatNormalScale!==void 0&&(l.clearcoatNormalScale=new Ze().fromArray(e.clearcoatNormalScale)),e.iridescenceMap!==void 0&&(l.iridescenceMap=s(e.iridescenceMap)),e.iridescenceThicknessMap!==void 0&&(l.iridescenceThicknessMap=s(e.iridescenceThicknessMap)),e.transmissionMap!==void 0&&(l.transmissionMap=s(e.transmissionMap)),e.thicknessMap!==void 0&&(l.thicknessMap=s(e.thicknessMap)),e.anisotropyMap!==void 0&&(l.anisotropyMap=s(e.anisotropyMap)),e.sheenColorMap!==void 0&&(l.sheenColorMap=s(e.sheenColorMap)),e.sheenRoughnessMap!==void 0&&(l.sheenRoughnessMap=s(e.sheenRoughnessMap)),l}setTextures(e){return this.textures=e,this}createMaterialFromType(e){return Pd.createMaterialFromType(e)}static createMaterialFromType(e){const i={ShadowMaterial:_y,SpriteMaterial:zm,RawShaderMaterial:gy,ShaderMaterial:Bs,PointsMaterial:$m,MeshPhysicalMaterial:xy,MeshStandardMaterial:h_,MeshPhongMaterial:vy,MeshToonMaterial:yy,MeshNormalMaterial:My,MeshLambertMaterial:Sy,MeshDepthMaterial:u_,MeshDistanceMaterial:f_,MeshBasicMaterial:no,MeshMatcapMaterial:by,LineDashedMaterial:Ey,LineBasicMaterial:Lr,Material:xr};return new i[e]}}class M_{static decodeText(e){if(console.warn("THREE.LoaderUtils: decodeText() has been deprecated with r165 and will be removed with r175. Use TextDecoder instead."),typeof TextDecoder<"u")return new TextDecoder().decode(e);let i="";for(let s=0,l=e.length;s<l;s++)i+=String.fromCharCode(e[s]);try{return decodeURIComponent(escape(i))}catch{return i}}static extractUrlBase(e){const i=e.lastIndexOf("/");return i===-1?"./":e.slice(0,i+1)}static resolveURL(e,i){return typeof e!="string"||e===""?"":(/^https?:\/\//i.test(i)&&/^\//.test(e)&&(i=i.replace(/(^https?:\/\/[^\/]+).*/i,"$1")),/^(https?:)?\/\//i.test(e)||/^data:.*,.*$/i.test(e)||/^blob:.*$/i.test(e)?e:i+e)}}class Hy extends Rn{constructor(){super(),this.isInstancedBufferGeometry=!0,this.type="InstancedBufferGeometry",this.instanceCount=1/0}copy(e){return super.copy(e),this.instanceCount=e.instanceCount,this}toJSON(){const e=super.toJSON();return e.instanceCount=this.instanceCount,e.isInstancedBufferGeometry=!0,e}}class Gy extends Wr{constructor(e){super(e)}load(e,i,s,l){const h=this,f=new Aa(h.manager);f.setPath(h.path),f.setRequestHeader(h.requestHeader),f.setWithCredentials(h.withCredentials),f.load(e,function(m){try{i(h.parse(JSON.parse(m)))}catch(g){l?l(g):console.error(g),h.manager.itemError(e)}},s,l)}parse(e){const i={},s={};function l(R,I){if(i[I]!==void 0)return i[I];const D=R.interleavedBuffers[I],C=h(R,D.buffer),q=tc(D.type,C),G=new Wf(q,D.stride);return G.uuid=D.uuid,i[I]=G,G}function h(R,I){if(s[I]!==void 0)return s[I];const D=R.arrayBuffers[I],C=new Uint32Array(D).buffer;return s[I]=C,C}const f=e.isInstancedBufferGeometry?new Hy:new Rn,m=e.data.index;if(m!==void 0){const R=tc(m.type,m.array);f.setIndex(new di(R,1))}const g=e.data.attributes;for(const R in g){const I=g[R];let F;if(I.isInterleavedBufferAttribute){const D=l(e.data,I.data);F=new Ko(D,I.itemSize,I.offset,I.normalized)}else{const D=tc(I.type,I.array),C=I.isInstancedBufferAttribute?Sc:di;F=new C(D,I.itemSize,I.normalized)}I.name!==void 0&&(F.name=I.name),I.usage!==void 0&&F.setUsage(I.usage),f.setAttribute(R,F)}const y=e.data.morphAttributes;if(y)for(const R in y){const I=y[R],F=[];for(let D=0,C=I.length;D<C;D++){const q=I[D];let G;if(q.isInterleavedBufferAttribute){const H=l(e.data,q.data);G=new Ko(H,q.itemSize,q.offset,q.normalized)}else{const H=tc(q.type,q.array);G=new di(H,q.itemSize,q.normalized)}q.name!==void 0&&(G.name=q.name),F.push(G)}f.morphAttributes[R]=F}e.data.morphTargetsRelative&&(f.morphTargetsRelative=!0);const w=e.data.groups||e.data.drawcalls||e.data.offsets;if(w!==void 0)for(let R=0,I=w.length;R!==I;++R){const F=w[R];f.addGroup(F.start,F.count,F.materialIndex)}const T=e.data.boundingSphere;if(T!==void 0){const R=new re;T.center!==void 0&&R.fromArray(T.center),f.boundingSphere=new _r(R,T.radius)}return e.name&&(f.name=e.name),e.userData&&(f.userData=e.userData),f}}class K1 extends Wr{constructor(e){super(e)}load(e,i,s,l){const h=this,f=this.path===""?M_.extractUrlBase(e):this.path;this.resourcePath=this.resourcePath||f;const m=new Aa(this.manager);m.setPath(this.path),m.setRequestHeader(this.requestHeader),m.setWithCredentials(this.withCredentials),m.load(e,function(g){let y=null;try{y=JSON.parse(g)}catch(w){l!==void 0&&l(w),console.error("THREE:ObjectLoader: Can't parse "+e+".",w.message);return}const S=y.metadata;if(S===void 0||S.type===void 0||S.type.toLowerCase()==="geometry"){l!==void 0&&l(new Error("THREE.ObjectLoader: Can't load "+e)),console.error("THREE.ObjectLoader: Can't load "+e);return}h.parse(y,i)},s,l)}async loadAsync(e,i){const s=this,l=this.path===""?M_.extractUrlBase(e):this.path;this.resourcePath=this.resourcePath||l;const h=new Aa(this.manager);h.setPath(this.path),h.setRequestHeader(this.requestHeader),h.setWithCredentials(this.withCredentials);const f=await h.loadAsync(e,i),m=JSON.parse(f),g=m.metadata;if(g===void 0||g.type===void 0||g.type.toLowerCase()==="geometry")throw new Error("THREE.ObjectLoader: Can't load "+e);return await s.parseAsync(m)}parse(e,i){const s=this.parseAnimations(e.animations),l=this.parseShapes(e.shapes),h=this.parseGeometries(e.geometries,l),f=this.parseImages(e.images,function(){i!==void 0&&i(y)}),m=this.parseTextures(e.textures,f),g=this.parseMaterials(e.materials,m),y=this.parseObject(e.object,h,g,m,s),S=this.parseSkeletons(e.skeletons,y);if(this.bindSkeletons(y,S),this.bindLightTargets(y),i!==void 0){let w=!1;for(const T in f)if(f[T].data instanceof HTMLImageElement){w=!0;break}w===!1&&i(y)}return y}async parseAsync(e){const i=this.parseAnimations(e.animations),s=this.parseShapes(e.shapes),l=this.parseGeometries(e.geometries,s),h=await this.parseImagesAsync(e.images),f=this.parseTextures(e.textures,h),m=this.parseMaterials(e.materials,f),g=this.parseObject(e.object,l,m,f,i),y=this.parseSkeletons(e.skeletons,g);return this.bindSkeletons(g,y),this.bindLightTargets(g),g}parseShapes(e){const i={};if(e!==void 0)for(let s=0,l=e.length;s<l;s++){const h=new el().fromJSON(e[s]);i[h.uuid]=h}return i}parseSkeletons(e,i){const s={},l={};if(i.traverse(function(h){h.isBone&&(l[h.uuid]=h)}),e!==void 0)for(let h=0,f=e.length;h<f;h++){const m=new Kf().fromJSON(e[h],l);s[m.uuid]=m}return s}parseGeometries(e,i){const s={};if(e!==void 0){const l=new Gy;for(let h=0,f=e.length;h<f;h++){let m;const g=e[h];switch(g.type){case"BufferGeometry":case"InstancedBufferGeometry":m=l.parse(g);break;default:g.type in my?m=my[g.type].fromJSON(g,i):console.warn(`THREE.ObjectLoader: Unsupported geometry type "${g.type}"`)}m.uuid=g.uuid,g.name!==void 0&&(m.name=g.name),g.userData!==void 0&&(m.userData=g.userData),s[g.uuid]=m}}return s}parseMaterials(e,i){const s={},l={};if(e!==void 0){const h=new Pd;h.setTextures(i);for(let f=0,m=e.length;f<m;f++){const g=e[f];s[g.uuid]===void 0&&(s[g.uuid]=h.parse(g)),l[g.uuid]=s[g.uuid]}}return l}parseAnimations(e){const i={};if(e!==void 0)for(let s=0;s<e.length;s++){const l=e[s],h=pu.parse(l);i[h.uuid]=h}return i}parseImages(e,i){const s=this,l={};let h;function f(g){return s.manager.itemStart(g),h.load(g,function(){s.manager.itemEnd(g)},void 0,function(){s.manager.itemError(g),s.manager.itemEnd(g)})}function m(g){if(typeof g=="string"){const y=g,S=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(y)?y:s.resourcePath+y;return f(S)}else return g.data?{data:tc(g.type,g.data),width:g.width,height:g.height}:null}if(e!==void 0&&e.length>0){const g=new g_(i);h=new mu(g),h.setCrossOrigin(this.crossOrigin);for(let y=0,S=e.length;y<S;y++){const w=e[y],T=w.url;if(Array.isArray(T)){const R=[];for(let I=0,F=T.length;I<F;I++){const D=T[I],C=m(D);C!==null&&(C instanceof HTMLImageElement?R.push(C):R.push(new ea(C.data,C.width,C.height)))}l[w.uuid]=new Xo(R)}else{const R=m(w.url);l[w.uuid]=new Xo(R)}}}return l}async parseImagesAsync(e){const i=this,s={};let l;async function h(f){if(typeof f=="string"){const m=f,g=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(m)?m:i.resourcePath+m;return await l.loadAsync(g)}else return f.data?{data:tc(f.type,f.data),width:f.width,height:f.height}:null}if(e!==void 0&&e.length>0){l=new mu(this.manager),l.setCrossOrigin(this.crossOrigin);for(let f=0,m=e.length;f<m;f++){const g=e[f],y=g.url;if(Array.isArray(y)){const S=[];for(let w=0,T=y.length;w<T;w++){const R=y[w],I=await h(R);I!==null&&(I instanceof HTMLImageElement?S.push(I):S.push(new ea(I.data,I.width,I.height)))}s[g.uuid]=new Xo(S)}else{const S=await h(g.url);s[g.uuid]=new Xo(S)}}}return s}parseTextures(e,i){function s(h,f){return typeof h=="number"?h:(console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.",h),f[h])}const l={};if(e!==void 0)for(let h=0,f=e.length;h<f;h++){const m=e[h];m.image===void 0&&console.warn('THREE.ObjectLoader: No "image" specified for',m.uuid),i[m.image]===void 0&&console.warn("THREE.ObjectLoader: Undefined image",m.image);const g=i[m.image],y=g.data;let S;Array.isArray(y)?(S=new qh,y.length===6&&(S.needsUpdate=!0)):(y&&y.data?S=new ea:S=new Li,y&&(S.needsUpdate=!0)),S.source=g,S.uuid=m.uuid,m.name!==void 0&&(S.name=m.name),m.mapping!==void 0&&(S.mapping=s(m.mapping,J1)),m.channel!==void 0&&(S.channel=m.channel),m.offset!==void 0&&S.offset.fromArray(m.offset),m.repeat!==void 0&&S.repeat.fromArray(m.repeat),m.center!==void 0&&S.center.fromArray(m.center),m.rotation!==void 0&&(S.rotation=m.rotation),m.wrap!==void 0&&(S.wrapS=s(m.wrap[0],Wy),S.wrapT=s(m.wrap[1],Wy)),m.format!==void 0&&(S.format=m.format),m.internalFormat!==void 0&&(S.internalFormat=m.internalFormat),m.type!==void 0&&(S.type=m.type),m.colorSpace!==void 0&&(S.colorSpace=m.colorSpace),m.minFilter!==void 0&&(S.minFilter=s(m.minFilter,Xy)),m.magFilter!==void 0&&(S.magFilter=s(m.magFilter,Xy)),m.anisotropy!==void 0&&(S.anisotropy=m.anisotropy),m.flipY!==void 0&&(S.flipY=m.flipY),m.generateMipmaps!==void 0&&(S.generateMipmaps=m.generateMipmaps),m.premultiplyAlpha!==void 0&&(S.premultiplyAlpha=m.premultiplyAlpha),m.unpackAlignment!==void 0&&(S.unpackAlignment=m.unpackAlignment),m.compareFunction!==void 0&&(S.compareFunction=m.compareFunction),m.userData!==void 0&&(S.userData=m.userData),l[m.uuid]=S}return l}parseObject(e,i,s,l,h){let f;function m(T){return i[T]===void 0&&console.warn("THREE.ObjectLoader: Undefined geometry",T),i[T]}function g(T){if(T!==void 0){if(Array.isArray(T)){const R=[];for(let I=0,F=T.length;I<F;I++){const D=T[I];s[D]===void 0&&console.warn("THREE.ObjectLoader: Undefined material",D),R.push(s[D])}return R}return s[T]===void 0&&console.warn("THREE.ObjectLoader: Undefined material",T),s[T]}}function y(T){return l[T]===void 0&&console.warn("THREE.ObjectLoader: Undefined texture",T),l[T]}let S,w;switch(e.type){case"Scene":f=new Av,e.background!==void 0&&(Number.isInteger(e.background)?f.background=new It(e.background):f.background=y(e.background)),e.environment!==void 0&&(f.environment=y(e.environment)),e.fog!==void 0&&(e.fog.type==="Fog"?f.fog=new Gf(e.fog.color,e.fog.near,e.fog.far):e.fog.type==="FogExp2"&&(f.fog=new Hf(e.fog.color,e.fog.density)),e.fog.name!==""&&(f.fog.name=e.fog.name)),e.backgroundBlurriness!==void 0&&(f.backgroundBlurriness=e.backgroundBlurriness),e.backgroundIntensity!==void 0&&(f.backgroundIntensity=e.backgroundIntensity),e.backgroundRotation!==void 0&&f.backgroundRotation.fromArray(e.backgroundRotation),e.environmentIntensity!==void 0&&(f.environmentIntensity=e.environmentIntensity),e.environmentRotation!==void 0&&f.environmentRotation.fromArray(e.environmentRotation);break;case"PerspectiveCamera":f=new hr(e.fov,e.aspect,e.near,e.far),e.focus!==void 0&&(f.focus=e.focus),e.zoom!==void 0&&(f.zoom=e.zoom),e.filmGauge!==void 0&&(f.filmGauge=e.filmGauge),e.filmOffset!==void 0&&(f.filmOffset=e.filmOffset),e.view!==void 0&&(f.view=Object.assign({},e.view));break;case"OrthographicCamera":f=new Cd(e.left,e.right,e.top,e.bottom,e.near,e.far),e.zoom!==void 0&&(f.zoom=e.zoom),e.view!==void 0&&(f.view=Object.assign({},e.view));break;case"AmbientLight":f=new By(e.color,e.intensity);break;case"DirectionalLight":f=new Oy(e.color,e.intensity),f.target=e.target||"";break;case"PointLight":f=new Fy(e.color,e.intensity,e.distance,e.decay);break;case"RectAreaLight":f=new zy(e.color,e.intensity,e.width,e.height);break;case"SpotLight":f=new Uy(e.color,e.intensity,e.distance,e.angle,e.penumbra,e.decay),f.target=e.target||"";break;case"HemisphereLight":f=new Iy(e.color,e.groundColor,e.intensity);break;case"LightProbe":f=new Vy().fromJSON(e);break;case"SkinnedMesh":S=m(e.geometry),w=g(e.material),f=new zv(S,w),e.bindMode!==void 0&&(f.bindMode=e.bindMode),e.bindMatrix!==void 0&&f.bindMatrix.fromArray(e.bindMatrix),e.skeleton!==void 0&&(f.skeleton=e.skeleton);break;case"Mesh":S=m(e.geometry),w=g(e.material),f=new Wi(S,w);break;case"InstancedMesh":S=m(e.geometry),w=g(e.material);const T=e.count,R=e.instanceMatrix,I=e.instanceColor;f=new Gv(S,w,T),f.instanceMatrix=new Sc(new Float32Array(R.array),16),I!==void 0&&(f.instanceColor=new Sc(new Float32Array(I.array),I.itemSize));break;case"BatchedMesh":S=m(e.geometry),w=g(e.material),f=new Xv(e.maxInstanceCount,e.maxVertexCount,e.maxIndexCount,w),f.geometry=S,f.perObjectFrustumCulled=e.perObjectFrustumCulled,f.sortObjects=e.sortObjects,f._drawRanges=e.drawRanges,f._reservedRanges=e.reservedRanges,f._visibility=e.visibility,f._active=e.active,f._bounds=e.bounds.map(F=>{const D=new Pr;D.min.fromArray(F.boxMin),D.max.fromArray(F.boxMax);const C=new _r;return C.radius=F.sphereRadius,C.center.fromArray(F.sphereCenter),{boxInitialized:F.boxInitialized,box:D,sphereInitialized:F.sphereInitialized,sphere:C}}),f._maxInstanceCount=e.maxInstanceCount,f._maxVertexCount=e.maxVertexCount,f._maxIndexCount=e.maxIndexCount,f._geometryInitialized=e.geometryInitialized,f._geometryCount=e.geometryCount,f._matricesTexture=y(e.matricesTexture.uuid),e.colorsTexture!==void 0&&(f._colorsTexture=y(e.colorsTexture.uuid));break;case"LOD":f=new Lv;break;case"Line":f=new so(m(e.geometry),g(e.material));break;case"LineLoop":f=new Kv(m(e.geometry),g(e.material));break;case"LineSegments":f=new ta(m(e.geometry),g(e.material));break;case"PointCloud":case"Points":f=new jv(m(e.geometry),g(e.material));break;case"Sprite":f=new Iv(g(e.material));break;case"Group":f=new Ec;break;case"Bone":f=new Gm;break;default:f=new $n}if(f.uuid=e.uuid,e.name!==void 0&&(f.name=e.name),e.matrix!==void 0?(f.matrix.fromArray(e.matrix),e.matrixAutoUpdate!==void 0&&(f.matrixAutoUpdate=e.matrixAutoUpdate),f.matrixAutoUpdate&&f.matrix.decompose(f.position,f.quaternion,f.scale)):(e.position!==void 0&&f.position.fromArray(e.position),e.rotation!==void 0&&f.rotation.fromArray(e.rotation),e.quaternion!==void 0&&f.quaternion.fromArray(e.quaternion),e.scale!==void 0&&f.scale.fromArray(e.scale)),e.up!==void 0&&f.up.fromArray(e.up),e.castShadow!==void 0&&(f.castShadow=e.castShadow),e.receiveShadow!==void 0&&(f.receiveShadow=e.receiveShadow),e.shadow&&(e.shadow.intensity!==void 0&&(f.shadow.intensity=e.shadow.intensity),e.shadow.bias!==void 0&&(f.shadow.bias=e.shadow.bias),e.shadow.normalBias!==void 0&&(f.shadow.normalBias=e.shadow.normalBias),e.shadow.radius!==void 0&&(f.shadow.radius=e.shadow.radius),e.shadow.mapSize!==void 0&&f.shadow.mapSize.fromArray(e.shadow.mapSize),e.shadow.camera!==void 0&&(f.shadow.camera=this.parseObject(e.shadow.camera))),e.visible!==void 0&&(f.visible=e.visible),e.frustumCulled!==void 0&&(f.frustumCulled=e.frustumCulled),e.renderOrder!==void 0&&(f.renderOrder=e.renderOrder),e.userData!==void 0&&(f.userData=e.userData),e.layers!==void 0&&(f.layers.mask=e.layers),e.children!==void 0){const T=e.children;for(let R=0;R<T.length;R++)f.add(this.parseObject(T[R],i,s,l,h))}if(e.animations!==void 0){const T=e.animations;for(let R=0;R<T.length;R++){const I=T[R];f.animations.push(h[I])}}if(e.type==="LOD"){e.autoUpdate!==void 0&&(f.autoUpdate=e.autoUpdate);const T=e.levels;for(let R=0;R<T.length;R++){const I=T[R],F=f.getObjectByProperty("uuid",I.object);F!==void 0&&f.addLevel(F,I.distance,I.hysteresis)}}return f}bindSkeletons(e,i){Object.keys(i).length!==0&&e.traverse(function(s){if(s.isSkinnedMesh===!0&&s.skeleton!==void 0){const l=i[s.skeleton];l===void 0?console.warn("THREE.ObjectLoader: No skeleton found with UUID:",s.skeleton):s.bind(l,s.bindMatrix)}})}bindLightTargets(e){e.traverse(function(i){if(i.isDirectionalLight||i.isSpotLight){const s=i.target,l=e.getObjectByProperty("uuid",s);l!==void 0?i.target=l:i.target=new $n}})}}const J1={UVMapping:je,CubeReflectionMapping:Ve,CubeRefractionMapping:Ot,EquirectangularReflectionMapping:_t,EquirectangularRefractionMapping:Tt,CubeUVReflectionMapping:In},Wy={RepeatWrapping:it,ClampToEdgeWrapping:xt,MirroredRepeatWrapping:tn},Xy={NearestFilter:kt,NearestMipmapNearestFilter:Nt,NearestMipmapLinearFilter:mn,LinearFilter:pe,LinearMipmapNearestFilter:mt,LinearMipmapLinearFilter:Ge};class j1 extends Wr{constructor(e){super(e),this.isImageBitmapLoader=!0,typeof createImageBitmap>"u"&&console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."),typeof fetch>"u"&&console.warn("THREE.ImageBitmapLoader: fetch() not supported."),this.options={premultiplyAlpha:"none"}}setOptions(e){return this.options=e,this}load(e,i,s,l){e===void 0&&(e=""),this.path!==void 0&&(e=this.path+e),e=this.manager.resolveURL(e);const h=this,f=wa.get(e);if(f!==void 0){if(h.manager.itemStart(e),f.then){f.then(y=>{i&&i(y),h.manager.itemEnd(e)}).catch(y=>{l&&l(y)});return}return setTimeout(function(){i&&i(f),h.manager.itemEnd(e)},0),f}const m={};m.credentials=this.crossOrigin==="anonymous"?"same-origin":"include",m.headers=this.requestHeader;const g=fetch(e,m).then(function(y){return y.blob()}).then(function(y){return createImageBitmap(y,Object.assign(h.options,{colorSpaceConversion:"none"}))}).then(function(y){return wa.add(e,y),i&&i(y),h.manager.itemEnd(e),y}).catch(function(y){l&&l(y),wa.remove(e),h.manager.itemError(e),h.manager.itemEnd(e)});wa.add(e,g),h.manager.itemStart(e)}}let Id;class S_{static getContext(){return Id===void 0&&(Id=new(window.AudioContext||window.webkitAudioContext)),Id}static setContext(e){Id=e}}class Q1 extends Wr{constructor(e){super(e)}load(e,i,s,l){const h=this,f=new Aa(this.manager);f.setResponseType("arraybuffer"),f.setPath(this.path),f.setRequestHeader(this.requestHeader),f.setWithCredentials(this.withCredentials),f.load(e,function(g){try{const y=g.slice(0);S_.getContext().decodeAudioData(y,function(w){i(w)}).catch(m)}catch(y){m(y)}},s,l);function m(g){l?l(g):console.error(g),h.manager.itemError(e)}}}const qy=new fn,Yy=new fn,sl=new fn;class eR{constructor(){this.type="StereoCamera",this.aspect=1,this.eyeSep=.064,this.cameraL=new hr,this.cameraL.layers.enable(1),this.cameraL.matrixAutoUpdate=!1,this.cameraR=new hr,this.cameraR.layers.enable(2),this.cameraR.matrixAutoUpdate=!1,this._cache={focus:null,fov:null,aspect:null,near:null,far:null,zoom:null,eyeSep:null}}update(e){const i=this._cache;if(i.focus!==e.focus||i.fov!==e.fov||i.aspect!==e.aspect*this.aspect||i.near!==e.near||i.far!==e.far||i.zoom!==e.zoom||i.eyeSep!==this.eyeSep){i.focus=e.focus,i.fov=e.fov,i.aspect=e.aspect*this.aspect,i.near=e.near,i.far=e.far,i.zoom=e.zoom,i.eyeSep=this.eyeSep,sl.copy(e.projectionMatrix);const l=i.eyeSep/2,h=l*i.near/i.focus,f=i.near*Math.tan(Wo*i.fov*.5)/i.zoom;let m,g;Yy.elements[12]=-l,qy.elements[12]=l,m=-f*i.aspect+h,g=f*i.aspect+h,sl.elements[0]=2*i.near/(g-m),sl.elements[8]=(g+m)/(g-m),this.cameraL.projectionMatrix.copy(sl),m=-f*i.aspect-h,g=f*i.aspect-h,sl.elements[0]=2*i.near/(g-m),sl.elements[8]=(g+m)/(g-m),this.cameraR.projectionMatrix.copy(sl)}this.cameraL.matrixWorld.copy(e.matrixWorld).multiply(Yy),this.cameraR.matrixWorld.copy(e.matrixWorld).multiply(qy)}}class Zy extends hr{constructor(e=[]){super(),this.isArrayCamera=!0,this.cameras=e}}class $y{constructor(e=!0){this.autoStart=e,this.startTime=0,this.oldTime=0,this.elapsedTime=0,this.running=!1}start(){this.startTime=Ky(),this.oldTime=this.startTime,this.elapsedTime=0,this.running=!0}stop(){this.getElapsedTime(),this.running=!1,this.autoStart=!1}getElapsedTime(){return this.getDelta(),this.elapsedTime}getDelta(){let e=0;if(this.autoStart&&!this.running)return this.start(),0;if(this.running){const i=Ky();e=(i-this.oldTime)/1e3,this.oldTime=i,this.elapsedTime+=e}return e}}function Ky(){return performance.now()}const al=new re,Jy=new kr,tR=new re,ol=new re;class nR extends $n{constructor(){super(),this.type="AudioListener",this.context=S_.getContext(),this.gain=this.context.createGain(),this.gain.connect(this.context.destination),this.filter=null,this.timeDelta=0,this._clock=new $y}getInput(){return this.gain}removeFilter(){return this.filter!==null&&(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination),this.gain.connect(this.context.destination),this.filter=null),this}getFilter(){return this.filter}setFilter(e){return this.filter!==null?(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination)):this.gain.disconnect(this.context.destination),this.filter=e,this.gain.connect(this.filter),this.filter.connect(this.context.destination),this}getMasterVolume(){return this.gain.gain.value}setMasterVolume(e){return this.gain.gain.setTargetAtTime(e,this.context.currentTime,.01),this}updateMatrixWorld(e){super.updateMatrixWorld(e);const i=this.context.listener,s=this.up;if(this.timeDelta=this._clock.getDelta(),this.matrixWorld.decompose(al,Jy,tR),ol.set(0,0,-1).applyQuaternion(Jy),i.positionX){const l=this.context.currentTime+this.timeDelta;i.positionX.linearRampToValueAtTime(al.x,l),i.positionY.linearRampToValueAtTime(al.y,l),i.positionZ.linearRampToValueAtTime(al.z,l),i.forwardX.linearRampToValueAtTime(ol.x,l),i.forwardY.linearRampToValueAtTime(ol.y,l),i.forwardZ.linearRampToValueAtTime(ol.z,l),i.upX.linearRampToValueAtTime(s.x,l),i.upY.linearRampToValueAtTime(s.y,l),i.upZ.linearRampToValueAtTime(s.z,l)}else i.setPosition(al.x,al.y,al.z),i.setOrientation(ol.x,ol.y,ol.z,s.x,s.y,s.z)}}class jy extends $n{constructor(e){super(),this.type="Audio",this.listener=e,this.context=e.context,this.gain=this.context.createGain(),this.gain.connect(e.getInput()),this.autoplay=!1,this.buffer=null,this.detune=0,this.loop=!1,this.loopStart=0,this.loopEnd=0,this.offset=0,this.duration=void 0,this.playbackRate=1,this.isPlaying=!1,this.hasPlaybackControl=!0,this.source=null,this.sourceType="empty",this._startedAt=0,this._progress=0,this._connected=!1,this.filters=[]}getOutput(){return this.gain}setNodeSource(e){return this.hasPlaybackControl=!1,this.sourceType="audioNode",this.source=e,this.connect(),this}setMediaElementSource(e){return this.hasPlaybackControl=!1,this.sourceType="mediaNode",this.source=this.context.createMediaElementSource(e),this.connect(),this}setMediaStreamSource(e){return this.hasPlaybackControl=!1,this.sourceType="mediaStreamNode",this.source=this.context.createMediaStreamSource(e),this.connect(),this}setBuffer(e){return this.buffer=e,this.sourceType="buffer",this.autoplay&&this.play(),this}play(e=0){if(this.isPlaying===!0){console.warn("THREE.Audio: Audio is already playing.");return}if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}this._startedAt=this.context.currentTime+e;const i=this.context.createBufferSource();return i.buffer=this.buffer,i.loop=this.loop,i.loopStart=this.loopStart,i.loopEnd=this.loopEnd,i.onended=this.onEnded.bind(this),i.start(this._startedAt,this._progress+this.offset,this.duration),this.isPlaying=!0,this.source=i,this.setDetune(this.detune),this.setPlaybackRate(this.playbackRate),this.connect()}pause(){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this.isPlaying===!0&&(this._progress+=Math.max(this.context.currentTime-this._startedAt,0)*this.playbackRate,this.loop===!0&&(this._progress=this._progress%(this.duration||this.buffer.duration)),this.source.stop(),this.source.onended=null,this.isPlaying=!1),this}stop(e=0){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this._progress=0,this.source!==null&&(this.source.stop(this.context.currentTime+e),this.source.onended=null),this.isPlaying=!1,this}connect(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(let e=1,i=this.filters.length;e<i;e++)this.filters[e-1].connect(this.filters[e]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this._connected=!0,this}disconnect(){if(this._connected!==!1){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(let e=1,i=this.filters.length;e<i;e++)this.filters[e-1].disconnect(this.filters[e]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this._connected=!1,this}}getFilters(){return this.filters}setFilters(e){return e||(e=[]),this._connected===!0?(this.disconnect(),this.filters=e.slice(),this.connect()):this.filters=e.slice(),this}setDetune(e){return this.detune=e,this.isPlaying===!0&&this.source.detune!==void 0&&this.source.detune.setTargetAtTime(this.detune,this.context.currentTime,.01),this}getDetune(){return this.detune}getFilter(){return this.getFilters()[0]}setFilter(e){return this.setFilters(e?[e]:[])}setPlaybackRate(e){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this.playbackRate=e,this.isPlaying===!0&&this.source.playbackRate.setTargetAtTime(this.playbackRate,this.context.currentTime,.01),this}getPlaybackRate(){return this.playbackRate}onEnded(){this.isPlaying=!1,this._progress=0}getLoop(){return this.hasPlaybackControl===!1?(console.warn("THREE.Audio: this Audio has no playback control."),!1):this.loop}setLoop(e){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this.loop=e,this.isPlaying===!0&&(this.source.loop=this.loop),this}setLoopStart(e){return this.loopStart=e,this}setLoopEnd(e){return this.loopEnd=e,this}getVolume(){return this.gain.gain.value}setVolume(e){return this.gain.gain.setTargetAtTime(e,this.context.currentTime,.01),this}copy(e,i){return super.copy(e,i),e.sourceType!=="buffer"?(console.warn("THREE.Audio: Audio source type cannot be copied."),this):(this.autoplay=e.autoplay,this.buffer=e.buffer,this.detune=e.detune,this.loop=e.loop,this.loopStart=e.loopStart,this.loopEnd=e.loopEnd,this.offset=e.offset,this.duration=e.duration,this.playbackRate=e.playbackRate,this.hasPlaybackControl=e.hasPlaybackControl,this.sourceType=e.sourceType,this.filters=e.filters.slice(),this)}clone(e){return new this.constructor(this.listener).copy(this,e)}}const ll=new re,Qy=new kr,iR=new re,cl=new re;class rR extends jy{constructor(e){super(e),this.panner=this.context.createPanner(),this.panner.panningModel="HRTF",this.panner.connect(this.gain)}connect(){super.connect(),this.panner.connect(this.gain)}disconnect(){super.disconnect(),this.panner.disconnect(this.gain)}getOutput(){return this.panner}getRefDistance(){return this.panner.refDistance}setRefDistance(e){return this.panner.refDistance=e,this}getRolloffFactor(){return this.panner.rolloffFactor}setRolloffFactor(e){return this.panner.rolloffFactor=e,this}getDistanceModel(){return this.panner.distanceModel}setDistanceModel(e){return this.panner.distanceModel=e,this}getMaxDistance(){return this.panner.maxDistance}setMaxDistance(e){return this.panner.maxDistance=e,this}setDirectionalCone(e,i,s){return this.panner.coneInnerAngle=e,this.panner.coneOuterAngle=i,this.panner.coneOuterGain=s,this}updateMatrixWorld(e){if(super.updateMatrixWorld(e),this.hasPlaybackControl===!0&&this.isPlaying===!1)return;this.matrixWorld.decompose(ll,Qy,iR),cl.set(0,0,1).applyQuaternion(Qy);const i=this.panner;if(i.positionX){const s=this.context.currentTime+this.listener.timeDelta;i.positionX.linearRampToValueAtTime(ll.x,s),i.positionY.linearRampToValueAtTime(ll.y,s),i.positionZ.linearRampToValueAtTime(ll.z,s),i.orientationX.linearRampToValueAtTime(cl.x,s),i.orientationY.linearRampToValueAtTime(cl.y,s),i.orientationZ.linearRampToValueAtTime(cl.z,s)}else i.setPosition(ll.x,ll.y,ll.z),i.setOrientation(cl.x,cl.y,cl.z)}}class sR{constructor(e,i=2048){this.analyser=e.context.createAnalyser(),this.analyser.fftSize=i,this.data=new Uint8Array(this.analyser.frequencyBinCount),e.getOutput().connect(this.analyser)}getFrequencyData(){return this.analyser.getByteFrequencyData(this.data),this.data}getAverageFrequency(){let e=0;const i=this.getFrequencyData();for(let s=0;s<i.length;s++)e+=i[s];return e/i.length}}class eM{constructor(e,i,s){this.binding=e,this.valueSize=s;let l,h,f;switch(i){case"quaternion":l=this._slerp,h=this._slerpAdditive,f=this._setAdditiveIdentityQuaternion,this.buffer=new Float64Array(s*6),this._workIndex=5;break;case"string":case"bool":l=this._select,h=this._select,f=this._setAdditiveIdentityOther,this.buffer=new Array(s*5);break;default:l=this._lerp,h=this._lerpAdditive,f=this._setAdditiveIdentityNumeric,this.buffer=new Float64Array(s*5)}this._mixBufferRegion=l,this._mixBufferRegionAdditive=h,this._setIdentity=f,this._origIndex=3,this._addIndex=4,this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,this.useCount=0,this.referenceCount=0}accumulate(e,i){const s=this.buffer,l=this.valueSize,h=e*l+l;let f=this.cumulativeWeight;if(f===0){for(let m=0;m!==l;++m)s[h+m]=s[m];f=i}else{f+=i;const m=i/f;this._mixBufferRegion(s,h,0,m,l)}this.cumulativeWeight=f}accumulateAdditive(e){const i=this.buffer,s=this.valueSize,l=s*this._addIndex;this.cumulativeWeightAdditive===0&&this._setIdentity(),this._mixBufferRegionAdditive(i,l,0,e,s),this.cumulativeWeightAdditive+=e}apply(e){const i=this.valueSize,s=this.buffer,l=e*i+i,h=this.cumulativeWeight,f=this.cumulativeWeightAdditive,m=this.binding;if(this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,h<1){const g=i*this._origIndex;this._mixBufferRegion(s,l,g,1-h,i)}f>0&&this._mixBufferRegionAdditive(s,l,this._addIndex*i,1,i);for(let g=i,y=i+i;g!==y;++g)if(s[g]!==s[g+i]){m.setValue(s,l);break}}saveOriginalState(){const e=this.binding,i=this.buffer,s=this.valueSize,l=s*this._origIndex;e.getValue(i,l);for(let h=s,f=l;h!==f;++h)i[h]=i[l+h%s];this._setIdentity(),this.cumulativeWeight=0,this.cumulativeWeightAdditive=0}restoreOriginalState(){const e=this.valueSize*3;this.binding.setValue(this.buffer,e)}_setAdditiveIdentityNumeric(){const e=this._addIndex*this.valueSize,i=e+this.valueSize;for(let s=e;s<i;s++)this.buffer[s]=0}_setAdditiveIdentityQuaternion(){this._setAdditiveIdentityNumeric(),this.buffer[this._addIndex*this.valueSize+3]=1}_setAdditiveIdentityOther(){const e=this._origIndex*this.valueSize,i=this._addIndex*this.valueSize;for(let s=0;s<this.valueSize;s++)this.buffer[i+s]=this.buffer[e+s]}_select(e,i,s,l,h){if(l>=.5)for(let f=0;f!==h;++f)e[i+f]=e[s+f]}_slerp(e,i,s,l){kr.slerpFlat(e,i,e,i,e,s,l)}_slerpAdditive(e,i,s,l,h){const f=this._workIndex*h;kr.multiplyQuaternionsFlat(e,f,e,i,e,s),kr.slerpFlat(e,i,e,i,e,f,l)}_lerp(e,i,s,l,h){const f=1-l;for(let m=0;m!==h;++m){const g=i+m;e[g]=e[g]*f+e[s+m]*l}}_lerpAdditive(e,i,s,l,h){for(let f=0;f!==h;++f){const m=i+f;e[m]=e[m]+e[s+f]*l}}}const b_="\\[\\]\\.:\\/",aR=new RegExp("["+b_+"]","g"),E_="[^"+b_+"]",oR="[^"+b_.replace("\\.","")+"]",lR=/((?:WC+[\/:])*)/.source.replace("WC",E_),cR=/(WCOD+)?/.source.replace("WCOD",oR),hR=/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC",E_),uR=/\.(WC+)(?:\[(.+)\])?/.source.replace("WC",E_),fR=new RegExp("^"+lR+cR+hR+uR+"$"),dR=["material","materials","bones","map"];class pR{constructor(e,i,s){const l=s||Kn.parseTrackName(i);this._targetGroup=e,this._bindings=e.subscribe_(i,l)}getValue(e,i){this.bind();const s=this._targetGroup.nCachedObjects_,l=this._bindings[s];l!==void 0&&l.getValue(e,i)}setValue(e,i){const s=this._bindings;for(let l=this._targetGroup.nCachedObjects_,h=s.length;l!==h;++l)s[l].setValue(e,i)}bind(){const e=this._bindings;for(let i=this._targetGroup.nCachedObjects_,s=e.length;i!==s;++i)e[i].bind()}unbind(){const e=this._bindings;for(let i=this._targetGroup.nCachedObjects_,s=e.length;i!==s;++i)e[i].unbind()}}class Kn{constructor(e,i,s){this.path=i,this.parsedPath=s||Kn.parseTrackName(i),this.node=Kn.findNode(e,this.parsedPath.nodeName),this.rootNode=e,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}static create(e,i,s){return e&&e.isAnimationObjectGroup?new Kn.Composite(e,i,s):new Kn(e,i,s)}static sanitizeNodeName(e){return e.replace(/\s/g,"_").replace(aR,"")}static parseTrackName(e){const i=fR.exec(e);if(i===null)throw new Error("PropertyBinding: Cannot parse trackName: "+e);const s={nodeName:i[2],objectName:i[3],objectIndex:i[4],propertyName:i[5],propertyIndex:i[6]},l=s.nodeName&&s.nodeName.lastIndexOf(".");if(l!==void 0&&l!==-1){const h=s.nodeName.substring(l+1);dR.indexOf(h)!==-1&&(s.nodeName=s.nodeName.substring(0,l),s.objectName=h)}if(s.propertyName===null||s.propertyName.length===0)throw new Error("PropertyBinding: can not parse propertyName from trackName: "+e);return s}static findNode(e,i){if(i===void 0||i===""||i==="."||i===-1||i===e.name||i===e.uuid)return e;if(e.skeleton){const s=e.skeleton.getBoneByName(i);if(s!==void 0)return s}if(e.children){const s=function(h){for(let f=0;f<h.length;f++){const m=h[f];if(m.name===i||m.uuid===i)return m;const g=s(m.children);if(g)return g}return null},l=s(e.children);if(l)return l}return null}_getValue_unavailable(){}_setValue_unavailable(){}_getValue_direct(e,i){e[i]=this.targetObject[this.propertyName]}_getValue_array(e,i){const s=this.resolvedProperty;for(let l=0,h=s.length;l!==h;++l)e[i++]=s[l]}_getValue_arrayElement(e,i){e[i]=this.resolvedProperty[this.propertyIndex]}_getValue_toArray(e,i){this.resolvedProperty.toArray(e,i)}_setValue_direct(e,i){this.targetObject[this.propertyName]=e[i]}_setValue_direct_setNeedsUpdate(e,i){this.targetObject[this.propertyName]=e[i],this.targetObject.needsUpdate=!0}_setValue_direct_setMatrixWorldNeedsUpdate(e,i){this.targetObject[this.propertyName]=e[i],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_array(e,i){const s=this.resolvedProperty;for(let l=0,h=s.length;l!==h;++l)s[l]=e[i++]}_setValue_array_setNeedsUpdate(e,i){const s=this.resolvedProperty;for(let l=0,h=s.length;l!==h;++l)s[l]=e[i++];this.targetObject.needsUpdate=!0}_setValue_array_setMatrixWorldNeedsUpdate(e,i){const s=this.resolvedProperty;for(let l=0,h=s.length;l!==h;++l)s[l]=e[i++];this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_arrayElement(e,i){this.resolvedProperty[this.propertyIndex]=e[i]}_setValue_arrayElement_setNeedsUpdate(e,i){this.resolvedProperty[this.propertyIndex]=e[i],this.targetObject.needsUpdate=!0}_setValue_arrayElement_setMatrixWorldNeedsUpdate(e,i){this.resolvedProperty[this.propertyIndex]=e[i],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_fromArray(e,i){this.resolvedProperty.fromArray(e,i)}_setValue_fromArray_setNeedsUpdate(e,i){this.resolvedProperty.fromArray(e,i),this.targetObject.needsUpdate=!0}_setValue_fromArray_setMatrixWorldNeedsUpdate(e,i){this.resolvedProperty.fromArray(e,i),this.targetObject.matrixWorldNeedsUpdate=!0}_getValue_unbound(e,i){this.bind(),this.getValue(e,i)}_setValue_unbound(e,i){this.bind(),this.setValue(e,i)}bind(){let e=this.node;const i=this.parsedPath,s=i.objectName,l=i.propertyName;let h=i.propertyIndex;if(e||(e=Kn.findNode(this.rootNode,i.nodeName),this.node=e),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,!e){console.warn("THREE.PropertyBinding: No target node found for track: "+this.path+".");return}if(s){let y=i.objectIndex;switch(s){case"materials":if(!e.material){console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);return}if(!e.material.materials){console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);return}e=e.material.materials;break;case"bones":if(!e.skeleton){console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);return}e=e.skeleton.bones;for(let S=0;S<e.length;S++)if(e[S].name===y){y=S;break}break;case"map":if("map"in e){e=e.map;break}if(!e.material){console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);return}if(!e.material.map){console.error("THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.",this);return}e=e.material.map;break;default:if(e[s]===void 0){console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);return}e=e[s]}if(y!==void 0){if(e[y]===void 0){console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,e);return}e=e[y]}}const f=e[l];if(f===void 0){const y=i.nodeName;console.error("THREE.PropertyBinding: Trying to update property for track: "+y+"."+l+" but it wasn't found.",e);return}let m=this.Versioning.None;this.targetObject=e,e.isMaterial===!0?m=this.Versioning.NeedsUpdate:e.isObject3D===!0&&(m=this.Versioning.MatrixWorldNeedsUpdate);let g=this.BindingType.Direct;if(h!==void 0){if(l==="morphTargetInfluences"){if(!e.geometry){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);return}if(!e.geometry.morphAttributes){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);return}e.morphTargetDictionary[h]!==void 0&&(h=e.morphTargetDictionary[h])}g=this.BindingType.ArrayElement,this.resolvedProperty=f,this.propertyIndex=h}else f.fromArray!==void 0&&f.toArray!==void 0?(g=this.BindingType.HasFromToArray,this.resolvedProperty=f):Array.isArray(f)?(g=this.BindingType.EntireArray,this.resolvedProperty=f):this.propertyName=l;this.getValue=this.GetterByBindingType[g],this.setValue=this.SetterByBindingTypeAndVersioning[g][m]}unbind(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}}Kn.Composite=pR,Kn.prototype.BindingType={Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},Kn.prototype.Versioning={None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},Kn.prototype.GetterByBindingType=[Kn.prototype._getValue_direct,Kn.prototype._getValue_array,Kn.prototype._getValue_arrayElement,Kn.prototype._getValue_toArray],Kn.prototype.SetterByBindingTypeAndVersioning=[[Kn.prototype._setValue_direct,Kn.prototype._setValue_direct_setNeedsUpdate,Kn.prototype._setValue_direct_setMatrixWorldNeedsUpdate],[Kn.prototype._setValue_array,Kn.prototype._setValue_array_setNeedsUpdate,Kn.prototype._setValue_array_setMatrixWorldNeedsUpdate],[Kn.prototype._setValue_arrayElement,Kn.prototype._setValue_arrayElement_setNeedsUpdate,Kn.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate],[Kn.prototype._setValue_fromArray,Kn.prototype._setValue_fromArray_setNeedsUpdate,Kn.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];class mR{constructor(){this.isAnimationObjectGroup=!0,this.uuid=ts(),this._objects=Array.prototype.slice.call(arguments),this.nCachedObjects_=0;const e={};this._indicesByUUID=e;for(let s=0,l=arguments.length;s!==l;++s)e[arguments[s].uuid]=s;this._paths=[],this._parsedPaths=[],this._bindings=[],this._bindingsIndicesByPath={};const i=this;this.stats={objects:{get total(){return i._objects.length},get inUse(){return this.total-i.nCachedObjects_}},get bindingsPerObject(){return i._bindings.length}}}add(){const e=this._objects,i=this._indicesByUUID,s=this._paths,l=this._parsedPaths,h=this._bindings,f=h.length;let m,g=e.length,y=this.nCachedObjects_;for(let S=0,w=arguments.length;S!==w;++S){const T=arguments[S],R=T.uuid;let I=i[R];if(I===void 0){I=g++,i[R]=I,e.push(T);for(let F=0,D=f;F!==D;++F)h[F].push(new Kn(T,s[F],l[F]))}else if(I<y){m=e[I];const F=--y,D=e[F];i[D.uuid]=I,e[I]=D,i[R]=F,e[F]=T;for(let C=0,q=f;C!==q;++C){const G=h[C],H=G[F];let le=G[I];G[I]=H,le===void 0&&(le=new Kn(T,s[C],l[C])),G[F]=le}}else e[I]!==m&&console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.")}this.nCachedObjects_=y}remove(){const e=this._objects,i=this._indicesByUUID,s=this._bindings,l=s.length;let h=this.nCachedObjects_;for(let f=0,m=arguments.length;f!==m;++f){const g=arguments[f],y=g.uuid,S=i[y];if(S!==void 0&&S>=h){const w=h++,T=e[w];i[T.uuid]=S,e[S]=T,i[y]=w,e[w]=g;for(let R=0,I=l;R!==I;++R){const F=s[R],D=F[w],C=F[S];F[S]=D,F[w]=C}}}this.nCachedObjects_=h}uncache(){const e=this._objects,i=this._indicesByUUID,s=this._bindings,l=s.length;let h=this.nCachedObjects_,f=e.length;for(let m=0,g=arguments.length;m!==g;++m){const y=arguments[m],S=y.uuid,w=i[S];if(w!==void 0)if(delete i[S],w<h){const T=--h,R=e[T],I=--f,F=e[I];i[R.uuid]=w,e[w]=R,i[F.uuid]=T,e[T]=F,e.pop();for(let D=0,C=l;D!==C;++D){const q=s[D],G=q[T],H=q[I];q[w]=G,q[T]=H,q.pop()}}else{const T=--f,R=e[T];T>0&&(i[R.uuid]=w),e[w]=R,e.pop();for(let I=0,F=l;I!==F;++I){const D=s[I];D[w]=D[T],D.pop()}}}this.nCachedObjects_=h}subscribe_(e,i){const s=this._bindingsIndicesByPath;let l=s[e];const h=this._bindings;if(l!==void 0)return h[l];const f=this._paths,m=this._parsedPaths,g=this._objects,y=g.length,S=this.nCachedObjects_,w=new Array(y);l=h.length,s[e]=l,f.push(e),m.push(i),h.push(w);for(let T=S,R=g.length;T!==R;++T){const I=g[T];w[T]=new Kn(I,e,i)}return w}unsubscribe_(e){const i=this._bindingsIndicesByPath,s=i[e];if(s!==void 0){const l=this._paths,h=this._parsedPaths,f=this._bindings,m=f.length-1,g=f[m],y=e[m];i[y]=s,f[s]=g,f.pop(),h[s]=h[m],h.pop(),l[s]=l[m],l.pop()}}}class tM{constructor(e,i,s=null,l=i.blendMode){this._mixer=e,this._clip=i,this._localRoot=s,this.blendMode=l;const h=i.tracks,f=h.length,m=new Array(f),g={endingStart:ko,endingEnd:ko};for(let y=0;y!==f;++y){const S=h[y].createInterpolant(null);m[y]=S,S.settings=g}this._interpolantSettings=g,this._interpolants=m,this._propertyBindings=new Array(f),this._cacheIndex=null,this._byClipCacheIndex=null,this._timeScaleInterpolant=null,this._weightInterpolant=null,this.loop=Gx,this._loopCount=-1,this._startTime=null,this.time=0,this.timeScale=1,this._effectiveTimeScale=1,this.weight=1,this._effectiveWeight=1,this.repetitions=1/0,this.paused=!1,this.enabled=!0,this.clampWhenFinished=!1,this.zeroSlopeAtStart=!0,this.zeroSlopeAtEnd=!0}play(){return this._mixer._activateAction(this),this}stop(){return this._mixer._deactivateAction(this),this.reset()}reset(){return this.paused=!1,this.enabled=!0,this.time=0,this._loopCount=-1,this._startTime=null,this.stopFading().stopWarping()}isRunning(){return this.enabled&&!this.paused&&this.timeScale!==0&&this._startTime===null&&this._mixer._isActiveAction(this)}isScheduled(){return this._mixer._isActiveAction(this)}startAt(e){return this._startTime=e,this}setLoop(e,i){return this.loop=e,this.repetitions=i,this}setEffectiveWeight(e){return this.weight=e,this._effectiveWeight=this.enabled?e:0,this.stopFading()}getEffectiveWeight(){return this._effectiveWeight}fadeIn(e){return this._scheduleFading(e,0,1)}fadeOut(e){return this._scheduleFading(e,1,0)}crossFadeFrom(e,i,s){if(e.fadeOut(i),this.fadeIn(i),s){const l=this._clip.duration,h=e._clip.duration,f=h/l,m=l/h;e.warp(1,f,i),this.warp(m,1,i)}return this}crossFadeTo(e,i,s){return e.crossFadeFrom(this,i,s)}stopFading(){const e=this._weightInterpolant;return e!==null&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(e)),this}setEffectiveTimeScale(e){return this.timeScale=e,this._effectiveTimeScale=this.paused?0:e,this.stopWarping()}getEffectiveTimeScale(){return this._effectiveTimeScale}setDuration(e){return this.timeScale=this._clip.duration/e,this.stopWarping()}syncWith(e){return this.time=e.time,this.timeScale=e.timeScale,this.stopWarping()}halt(e){return this.warp(this._effectiveTimeScale,0,e)}warp(e,i,s){const l=this._mixer,h=l.time,f=this.timeScale;let m=this._timeScaleInterpolant;m===null&&(m=l._lendControlInterpolant(),this._timeScaleInterpolant=m);const g=m.parameterPositions,y=m.sampleValues;return g[0]=h,g[1]=h+s,y[0]=e/f,y[1]=i/f,this}stopWarping(){const e=this._timeScaleInterpolant;return e!==null&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(e)),this}getMixer(){return this._mixer}getClip(){return this._clip}getRoot(){return this._localRoot||this._mixer._root}_update(e,i,s,l){if(!this.enabled){this._updateWeight(e);return}const h=this._startTime;if(h!==null){const g=(e-h)*s;g<0||s===0?i=0:(this._startTime=null,i=s*g)}i*=this._updateTimeScale(e);const f=this._updateTime(i),m=this._updateWeight(e);if(m>0){const g=this._interpolants,y=this._propertyBindings;switch(this.blendMode){case dm:for(let S=0,w=g.length;S!==w;++S)g[S].evaluate(f),y[S].accumulateAdditive(m);break;case Mf:default:for(let S=0,w=g.length;S!==w;++S)g[S].evaluate(f),y[S].accumulate(l,m)}}}_updateWeight(e){let i=0;if(this.enabled){i=this.weight;const s=this._weightInterpolant;if(s!==null){const l=s.evaluate(e)[0];i*=l,e>s.parameterPositions[1]&&(this.stopFading(),l===0&&(this.enabled=!1))}}return this._effectiveWeight=i,i}_updateTimeScale(e){let i=0;if(!this.paused){i=this.timeScale;const s=this._timeScaleInterpolant;if(s!==null){const l=s.evaluate(e)[0];i*=l,e>s.parameterPositions[1]&&(this.stopWarping(),i===0?this.paused=!0:this.timeScale=i)}}return this._effectiveTimeScale=i,i}_updateTime(e){const i=this._clip.duration,s=this.loop;let l=this.time+e,h=this._loopCount;const f=s===Wx;if(e===0)return h===-1?l:f&&(h&1)===1?i-l:l;if(s===Hx){h===-1&&(this._loopCount=0,this._setEndings(!0,!0,!1));e:{if(l>=i)l=i;else if(l<0)l=0;else{this.time=l;break e}this.clampWhenFinished?this.paused=!0:this.enabled=!1,this.time=l,this._mixer.dispatchEvent({type:"finished",action:this,direction:e<0?-1:1})}}else{if(h===-1&&(e>=0?(h=0,this._setEndings(!0,this.repetitions===0,f)):this._setEndings(this.repetitions===0,!0,f)),l>=i||l<0){const m=Math.floor(l/i);l-=i*m,h+=Math.abs(m);const g=this.repetitions-h;if(g<=0)this.clampWhenFinished?this.paused=!0:this.enabled=!1,l=e>0?i:0,this.time=l,this._mixer.dispatchEvent({type:"finished",action:this,direction:e>0?1:-1});else{if(g===1){const y=e<0;this._setEndings(y,!y,f)}else this._setEndings(!1,!1,f);this._loopCount=h,this.time=l,this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:m})}}else this.time=l;if(f&&(h&1)===1)return i-l}return l}_setEndings(e,i,s){const l=this._interpolantSettings;s?(l.endingStart=Vo,l.endingEnd=Vo):(e?l.endingStart=this.zeroSlopeAtStart?Vo:ko:l.endingStart=Uh,i?l.endingEnd=this.zeroSlopeAtEnd?Vo:ko:l.endingEnd=Uh)}_scheduleFading(e,i,s){const l=this._mixer,h=l.time;let f=this._weightInterpolant;f===null&&(f=l._lendControlInterpolant(),this._weightInterpolant=f);const m=f.parameterPositions,g=f.sampleValues;return m[0]=h,g[0]=i,m[1]=h+e,g[1]=s,this}}const _R=new Float32Array(1);class gR extends js{constructor(e){super(),this._root=e,this._initMemoryManager(),this._accuIndex=0,this.time=0,this.timeScale=1}_bindAction(e,i){const s=e._localRoot||this._root,l=e._clip.tracks,h=l.length,f=e._propertyBindings,m=e._interpolants,g=s.uuid,y=this._bindingsByRootAndName;let S=y[g];S===void 0&&(S={},y[g]=S);for(let w=0;w!==h;++w){const T=l[w],R=T.name;let I=S[R];if(I!==void 0)++I.referenceCount,f[w]=I;else{if(I=f[w],I!==void 0){I._cacheIndex===null&&(++I.referenceCount,this._addInactiveBinding(I,g,R));continue}const F=i&&i._propertyBindings[w].binding.parsedPath;I=new eM(Kn.create(s,R,F),T.ValueTypeName,T.getValueSize()),++I.referenceCount,this._addInactiveBinding(I,g,R),f[w]=I}m[w].resultBuffer=I.buffer}}_activateAction(e){if(!this._isActiveAction(e)){if(e._cacheIndex===null){const s=(e._localRoot||this._root).uuid,l=e._clip.uuid,h=this._actionsByClip[l];this._bindAction(e,h&&h.knownActions[0]),this._addInactiveAction(e,l,s)}const i=e._propertyBindings;for(let s=0,l=i.length;s!==l;++s){const h=i[s];h.useCount++===0&&(this._lendBinding(h),h.saveOriginalState())}this._lendAction(e)}}_deactivateAction(e){if(this._isActiveAction(e)){const i=e._propertyBindings;for(let s=0,l=i.length;s!==l;++s){const h=i[s];--h.useCount===0&&(h.restoreOriginalState(),this._takeBackBinding(h))}this._takeBackAction(e)}}_initMemoryManager(){this._actions=[],this._nActiveActions=0,this._actionsByClip={},this._bindings=[],this._nActiveBindings=0,this._bindingsByRootAndName={},this._controlInterpolants=[],this._nActiveControlInterpolants=0;const e=this;this.stats={actions:{get total(){return e._actions.length},get inUse(){return e._nActiveActions}},bindings:{get total(){return e._bindings.length},get inUse(){return e._nActiveBindings}},controlInterpolants:{get total(){return e._controlInterpolants.length},get inUse(){return e._nActiveControlInterpolants}}}}_isActiveAction(e){const i=e._cacheIndex;return i!==null&&i<this._nActiveActions}_addInactiveAction(e,i,s){const l=this._actions,h=this._actionsByClip;let f=h[i];if(f===void 0)f={knownActions:[e],actionByRoot:{}},e._byClipCacheIndex=0,h[i]=f;else{const m=f.knownActions;e._byClipCacheIndex=m.length,m.push(e)}e._cacheIndex=l.length,l.push(e),f.actionByRoot[s]=e}_removeInactiveAction(e){const i=this._actions,s=i[i.length-1],l=e._cacheIndex;s._cacheIndex=l,i[l]=s,i.pop(),e._cacheIndex=null;const h=e._clip.uuid,f=this._actionsByClip,m=f[h],g=m.knownActions,y=g[g.length-1],S=e._byClipCacheIndex;y._byClipCacheIndex=S,g[S]=y,g.pop(),e._byClipCacheIndex=null;const w=m.actionByRoot,T=(e._localRoot||this._root).uuid;delete w[T],g.length===0&&delete f[h],this._removeInactiveBindingsForAction(e)}_removeInactiveBindingsForAction(e){const i=e._propertyBindings;for(let s=0,l=i.length;s!==l;++s){const h=i[s];--h.referenceCount===0&&this._removeInactiveBinding(h)}}_lendAction(e){const i=this._actions,s=e._cacheIndex,l=this._nActiveActions++,h=i[l];e._cacheIndex=l,i[l]=e,h._cacheIndex=s,i[s]=h}_takeBackAction(e){const i=this._actions,s=e._cacheIndex,l=--this._nActiveActions,h=i[l];e._cacheIndex=l,i[l]=e,h._cacheIndex=s,i[s]=h}_addInactiveBinding(e,i,s){const l=this._bindingsByRootAndName,h=this._bindings;let f=l[i];f===void 0&&(f={},l[i]=f),f[s]=e,e._cacheIndex=h.length,h.push(e)}_removeInactiveBinding(e){const i=this._bindings,s=e.binding,l=s.rootNode.uuid,h=s.path,f=this._bindingsByRootAndName,m=f[l],g=i[i.length-1],y=e._cacheIndex;g._cacheIndex=y,i[y]=g,i.pop(),delete m[h],Object.keys(m).length===0&&delete f[l]}_lendBinding(e){const i=this._bindings,s=e._cacheIndex,l=this._nActiveBindings++,h=i[l];e._cacheIndex=l,i[l]=e,h._cacheIndex=s,i[s]=h}_takeBackBinding(e){const i=this._bindings,s=e._cacheIndex,l=--this._nActiveBindings,h=i[l];e._cacheIndex=l,i[l]=e,h._cacheIndex=s,i[s]=h}_lendControlInterpolant(){const e=this._controlInterpolants,i=this._nActiveControlInterpolants++;let s=e[i];return s===void 0&&(s=new m_(new Float32Array(2),new Float32Array(2),1,_R),s.__cacheIndex=i,e[i]=s),s}_takeBackControlInterpolant(e){const i=this._controlInterpolants,s=e.__cacheIndex,l=--this._nActiveControlInterpolants,h=i[l];e.__cacheIndex=l,i[l]=e,h.__cacheIndex=s,i[s]=h}clipAction(e,i,s){const l=i||this._root,h=l.uuid;let f=typeof e=="string"?pu.findByName(l,e):e;const m=f!==null?f.uuid:e,g=this._actionsByClip[m];let y=null;if(s===void 0&&(f!==null?s=f.blendMode:s=Mf),g!==void 0){const w=g.actionByRoot[h];if(w!==void 0&&w.blendMode===s)return w;y=g.knownActions[0],f===null&&(f=y._clip)}if(f===null)return null;const S=new tM(this,f,i,s);return this._bindAction(S,y),this._addInactiveAction(S,m,h),S}existingAction(e,i){const s=i||this._root,l=s.uuid,h=typeof e=="string"?pu.findByName(s,e):e,f=h?h.uuid:e,m=this._actionsByClip[f];return m!==void 0&&m.actionByRoot[l]||null}stopAllAction(){const e=this._actions,i=this._nActiveActions;for(let s=i-1;s>=0;--s)e[s].stop();return this}update(e){e*=this.timeScale;const i=this._actions,s=this._nActiveActions,l=this.time+=e,h=Math.sign(e),f=this._accuIndex^=1;for(let y=0;y!==s;++y)i[y]._update(l,e,h,f);const m=this._bindings,g=this._nActiveBindings;for(let y=0;y!==g;++y)m[y].apply(f);return this}setTime(e){this.time=0;for(let i=0;i<this._actions.length;i++)this._actions[i].time=0;return this.update(e)}getRoot(){return this._root}uncacheClip(e){const i=this._actions,s=e.uuid,l=this._actionsByClip,h=l[s];if(h!==void 0){const f=h.knownActions;for(let m=0,g=f.length;m!==g;++m){const y=f[m];this._deactivateAction(y);const S=y._cacheIndex,w=i[i.length-1];y._cacheIndex=null,y._byClipCacheIndex=null,w._cacheIndex=S,i[S]=w,i.pop(),this._removeInactiveBindingsForAction(y)}delete l[s]}}uncacheRoot(e){const i=e.uuid,s=this._actionsByClip;for(const f in s){const m=s[f].actionByRoot,g=m[i];g!==void 0&&(this._deactivateAction(g),this._removeInactiveAction(g))}const l=this._bindingsByRootAndName,h=l[i];if(h!==void 0)for(const f in h){const m=h[f];m.restoreOriginalState(),this._removeInactiveBinding(m)}}uncacheAction(e,i){const s=this.existingAction(e,i);s!==null&&(this._deactivateAction(s),this._removeInactiveAction(s))}}class xR extends Sf{constructor(e=1,i=1,s=1,l={}){super(e,i,l),this.isRenderTarget3D=!0,this.depth=s,this.texture=new bf(null,e,i,s),this.texture.isRenderTargetTexture=!0}}class vR extends Sf{constructor(e=1,i=1,s=1,l={}){super(e,i,l),this.isRenderTargetArray=!0,this.depth=s,this.texture=new kh(null,e,i,s),this.texture.isRenderTargetTexture=!0}}class w_{constructor(e){this.value=e}clone(){return new w_(this.value.clone===void 0?this.value:this.value.clone())}}let yR=0;class MR extends js{constructor(){super(),this.isUniformsGroup=!0,Object.defineProperty(this,"id",{value:yR++}),this.name="",this.usage=Fh,this.uniforms=[]}add(e){return this.uniforms.push(e),this}remove(e){const i=this.uniforms.indexOf(e);return i!==-1&&this.uniforms.splice(i,1),this}setName(e){return this.name=e,this}setUsage(e){return this.usage=e,this}dispose(){return this.dispatchEvent({type:"dispose"}),this}copy(e){this.name=e.name,this.usage=e.usage;const i=e.uniforms;this.uniforms.length=0;for(let s=0,l=i.length;s<l;s++){const h=Array.isArray(i[s])?i[s]:[i[s]];for(let f=0;f<h.length;f++)this.uniforms.push(h[f].clone())}return this}clone(){return new this.constructor().copy(this)}}class SR extends Wf{constructor(e,i,s=1){super(e,i),this.isInstancedInterleavedBuffer=!0,this.meshPerAttribute=s}copy(e){return super.copy(e),this.meshPerAttribute=e.meshPerAttribute,this}clone(e){const i=super.clone(e);return i.meshPerAttribute=this.meshPerAttribute,i}toJSON(e){const i=super.toJSON(e);return i.isInstancedInterleavedBuffer=!0,i.meshPerAttribute=this.meshPerAttribute,i}}class bR{constructor(e,i,s,l,h){this.isGLBufferAttribute=!0,this.name="",this.buffer=e,this.type=i,this.itemSize=s,this.elementSize=l,this.count=h,this.version=0}set needsUpdate(e){e===!0&&this.version++}setBuffer(e){return this.buffer=e,this}setType(e,i){return this.type=e,this.elementSize=i,this}setItemSize(e){return this.itemSize=e,this}setCount(e){return this.count=e,this}}const nM=new fn;class ER{constructor(e,i,s=0,l=1/0){this.ray=new lc(e,i),this.near=s,this.far=l,this.camera=null,this.layers=new Pf,this.params={Mesh:{},Line:{threshold:1},LOD:{},Points:{threshold:1},Sprite:{}}}set(e,i){this.ray.set(e,i)}setFromCamera(e,i){i.isPerspectiveCamera?(this.ray.origin.setFromMatrixPosition(i.matrixWorld),this.ray.direction.set(e.x,e.y,.5).unproject(i).sub(this.ray.origin).normalize(),this.camera=i):i.isOrthographicCamera?(this.ray.origin.set(e.x,e.y,(i.near+i.far)/(i.near-i.far)).unproject(i),this.ray.direction.set(0,0,-1).transformDirection(i.matrixWorld),this.camera=i):console.error("THREE.Raycaster: Unsupported camera type: "+i.type)}setFromXRController(e){return nM.identity().extractRotation(e.matrixWorld),this.ray.origin.setFromMatrixPosition(e.matrixWorld),this.ray.direction.set(0,0,-1).applyMatrix4(nM),this}intersectObject(e,i=!0,s=[]){return T_(e,this,s,i),s.sort(iM),s}intersectObjects(e,i=!0,s=[]){for(let l=0,h=e.length;l<h;l++)T_(e[l],this,s,i);return s.sort(iM),s}}function iM(u,e){return u.distance-e.distance}function T_(u,e,i,s){let l=!0;if(u.layers.test(e.layers)&&u.raycast(e,i)===!1&&(l=!1),l===!0&&s===!0){const h=u.children;for(let f=0,m=h.length;f<m;f++)T_(h[f],e,i,!0)}}class wR{constructor(e=1,i=0,s=0){return this.radius=e,this.phi=i,this.theta=s,this}set(e,i,s){return this.radius=e,this.phi=i,this.theta=s,this}copy(e){return this.radius=e.radius,this.phi=e.phi,this.theta=e.theta,this}makeSafe(){return this.phi=bn(this.phi,1e-6,Math.PI-1e-6),this}setFromVector3(e){return this.setFromCartesianCoords(e.x,e.y,e.z)}setFromCartesianCoords(e,i,s){return this.radius=Math.sqrt(e*e+i*i+s*s),this.radius===0?(this.theta=0,this.phi=0):(this.theta=Math.atan2(e,s),this.phi=Math.acos(bn(i/this.radius,-1,1))),this}clone(){return new this.constructor().copy(this)}}class TR{constructor(e=1,i=0,s=0){return this.radius=e,this.theta=i,this.y=s,this}set(e,i,s){return this.radius=e,this.theta=i,this.y=s,this}copy(e){return this.radius=e.radius,this.theta=e.theta,this.y=e.y,this}setFromVector3(e){return this.setFromCartesianCoords(e.x,e.y,e.z)}setFromCartesianCoords(e,i,s){return this.radius=Math.sqrt(e*e+s*s),this.theta=Math.atan2(e,s),this.y=i,this}clone(){return new this.constructor().copy(this)}}class A_{constructor(e,i,s,l){A_.prototype.isMatrix2=!0,this.elements=[1,0,0,1],e!==void 0&&this.set(e,i,s,l)}identity(){return this.set(1,0,0,1),this}fromArray(e,i=0){for(let s=0;s<4;s++)this.elements[s]=e[s+i];return this}set(e,i,s,l){const h=this.elements;return h[0]=e,h[2]=i,h[1]=s,h[3]=l,this}}const rM=new Ze;class AR{constructor(e=new Ze(1/0,1/0),i=new Ze(-1/0,-1/0)){this.isBox2=!0,this.min=e,this.max=i}set(e,i){return this.min.copy(e),this.max.copy(i),this}setFromPoints(e){this.makeEmpty();for(let i=0,s=e.length;i<s;i++)this.expandByPoint(e[i]);return this}setFromCenterAndSize(e,i){const s=rM.copy(i).multiplyScalar(.5);return this.min.copy(e).sub(s),this.max.copy(e).add(s),this}clone(){return new this.constructor().copy(this)}copy(e){return this.min.copy(e.min),this.max.copy(e.max),this}makeEmpty(){return this.min.x=this.min.y=1/0,this.max.x=this.max.y=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y}getCenter(e){return this.isEmpty()?e.set(0,0):e.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(e){return this.isEmpty()?e.set(0,0):e.subVectors(this.max,this.min)}expandByPoint(e){return this.min.min(e),this.max.max(e),this}expandByVector(e){return this.min.sub(e),this.max.add(e),this}expandByScalar(e){return this.min.addScalar(-e),this.max.addScalar(e),this}containsPoint(e){return e.x>=this.min.x&&e.x<=this.max.x&&e.y>=this.min.y&&e.y<=this.max.y}containsBox(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y}getParameter(e,i){return i.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y))}intersectsBox(e){return e.max.x>=this.min.x&&e.min.x<=this.max.x&&e.max.y>=this.min.y&&e.min.y<=this.max.y}clampPoint(e,i){return i.copy(e).clamp(this.min,this.max)}distanceToPoint(e){return this.clampPoint(e,rM).distanceTo(e)}intersect(e){return this.min.max(e.min),this.max.min(e.max),this.isEmpty()&&this.makeEmpty(),this}union(e){return this.min.min(e.min),this.max.max(e.max),this}translate(e){return this.min.add(e),this.max.add(e),this}equals(e){return e.min.equals(this.min)&&e.max.equals(this.max)}}const sM=new re,Dd=new re;class RR{constructor(e=new re,i=new re){this.start=e,this.end=i}set(e,i){return this.start.copy(e),this.end.copy(i),this}copy(e){return this.start.copy(e.start),this.end.copy(e.end),this}getCenter(e){return e.addVectors(this.start,this.end).multiplyScalar(.5)}delta(e){return e.subVectors(this.end,this.start)}distanceSq(){return this.start.distanceToSquared(this.end)}distance(){return this.start.distanceTo(this.end)}at(e,i){return this.delta(i).multiplyScalar(e).add(this.start)}closestPointToPointParameter(e,i){sM.subVectors(e,this.start),Dd.subVectors(this.end,this.start);const s=Dd.dot(Dd);let h=Dd.dot(sM)/s;return i&&(h=bn(h,0,1)),h}closestPointToPoint(e,i,s){const l=this.closestPointToPointParameter(e,i);return this.delta(s).multiplyScalar(l).add(this.start)}applyMatrix4(e){return this.start.applyMatrix4(e),this.end.applyMatrix4(e),this}equals(e){return e.start.equals(this.start)&&e.end.equals(this.end)}clone(){return new this.constructor().copy(this)}}const aM=new re;class CR extends $n{constructor(e,i){super(),this.light=e,this.matrixAutoUpdate=!1,this.color=i,this.type="SpotLightHelper";const s=new Rn,l=[0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,-1,0,1,0,0,0,0,1,1,0,0,0,0,-1,1];for(let f=0,m=1,g=32;f<g;f++,m++){const y=f/g*Math.PI*2,S=m/g*Math.PI*2;l.push(Math.cos(y),Math.sin(y),1,Math.cos(S),Math.sin(S),1)}s.setAttribute("position",new qt(l,3));const h=new Lr({fog:!1,toneMapped:!1});this.cone=new ta(s,h),this.add(this.cone),this.update()}dispose(){this.cone.geometry.dispose(),this.cone.material.dispose()}update(){this.light.updateWorldMatrix(!0,!1),this.light.target.updateWorldMatrix(!0,!1),this.parent?(this.parent.updateWorldMatrix(!0),this.matrix.copy(this.parent.matrixWorld).invert().multiply(this.light.matrixWorld)):this.matrix.copy(this.light.matrixWorld),this.matrixWorld.copy(this.light.matrixWorld);const e=this.light.distance?this.light.distance:1e3,i=e*Math.tan(this.light.angle);this.cone.scale.set(i,i,e),aM.setFromMatrixPosition(this.light.target.matrixWorld),this.cone.lookAt(aM),this.color!==void 0?this.cone.material.color.set(this.color):this.cone.material.color.copy(this.light.color)}}const lo=new re,Ld=new fn,R_=new fn;class PR extends ta{constructor(e){const i=oM(e),s=new Rn,l=[],h=[],f=new It(0,0,1),m=new It(0,1,0);for(let y=0;y<i.length;y++){const S=i[y];S.parent&&S.parent.isBone&&(l.push(0,0,0),l.push(0,0,0),h.push(f.r,f.g,f.b),h.push(m.r,m.g,m.b))}s.setAttribute("position",new qt(l,3)),s.setAttribute("color",new qt(h,3));const g=new Lr({vertexColors:!0,depthTest:!1,depthWrite:!1,toneMapped:!1,transparent:!0});super(s,g),this.isSkeletonHelper=!0,this.type="SkeletonHelper",this.root=e,this.bones=i,this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1}updateMatrixWorld(e){const i=this.bones,s=this.geometry,l=s.getAttribute("position");R_.copy(this.root.matrixWorld).invert();for(let h=0,f=0;h<i.length;h++){const m=i[h];m.parent&&m.parent.isBone&&(Ld.multiplyMatrices(R_,m.matrixWorld),lo.setFromMatrixPosition(Ld),l.setXYZ(f,lo.x,lo.y,lo.z),Ld.multiplyMatrices(R_,m.parent.matrixWorld),lo.setFromMatrixPosition(Ld),l.setXYZ(f+1,lo.x,lo.y,lo.z),f+=2)}s.getAttribute("position").needsUpdate=!0,super.updateMatrixWorld(e)}dispose(){this.geometry.dispose(),this.material.dispose()}}function oM(u){const e=[];u.isBone===!0&&e.push(u);for(let i=0;i<u.children.length;i++)e.push.apply(e,oM(u.children[i]));return e}class IR extends Wi{constructor(e,i,s){const l=new cu(i,4,2),h=new no({wireframe:!0,fog:!1,toneMapped:!1});super(l,h),this.light=e,this.color=s,this.type="PointLightHelper",this.matrix=this.light.matrixWorld,this.matrixAutoUpdate=!1,this.update()}dispose(){this.geometry.dispose(),this.material.dispose()}update(){this.light.updateWorldMatrix(!0,!1),this.color!==void 0?this.material.color.set(this.color):this.material.color.copy(this.light.color)}}const DR=new re,lM=new It,cM=new It;class LR extends $n{constructor(e,i,s){super(),this.light=e,this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.color=s,this.type="HemisphereLightHelper";const l=new lu(i);l.rotateY(Math.PI*.5),this.material=new no({wireframe:!0,fog:!1,toneMapped:!1}),this.color===void 0&&(this.material.vertexColors=!0);const h=l.getAttribute("position"),f=new Float32Array(h.count*3);l.setAttribute("color",new di(f,3)),this.add(new Wi(l,this.material)),this.update()}dispose(){this.children[0].geometry.dispose(),this.children[0].material.dispose()}update(){const e=this.children[0];if(this.color!==void 0)this.material.color.set(this.color);else{const i=e.geometry.getAttribute("color");lM.copy(this.light.color),cM.copy(this.light.groundColor);for(let s=0,l=i.count;s<l;s++){const h=s<l/2?lM:cM;i.setXYZ(s,h.r,h.g,h.b)}i.needsUpdate=!0}this.light.updateWorldMatrix(!0,!1),e.lookAt(DR.setFromMatrixPosition(this.light.matrixWorld).negate())}}class UR extends ta{constructor(e=10,i=10,s=4473924,l=8947848){s=new It(s),l=new It(l);const h=i/2,f=e/i,m=e/2,g=[],y=[];for(let T=0,R=0,I=-m;T<=i;T++,I+=f){g.push(-m,0,I,m,0,I),g.push(I,0,-m,I,0,m);const F=T===h?s:l;F.toArray(y,R),R+=3,F.toArray(y,R),R+=3,F.toArray(y,R),R+=3,F.toArray(y,R),R+=3}const S=new Rn;S.setAttribute("position",new qt(g,3)),S.setAttribute("color",new qt(y,3));const w=new Lr({vertexColors:!0,toneMapped:!1});super(S,w),this.type="GridHelper"}dispose(){this.geometry.dispose(),this.material.dispose()}}class NR extends ta{constructor(e=10,i=16,s=8,l=64,h=4473924,f=8947848){h=new It(h),f=new It(f);const m=[],g=[];if(i>1)for(let w=0;w<i;w++){const T=w/i*(Math.PI*2),R=Math.sin(T)*e,I=Math.cos(T)*e;m.push(0,0,0),m.push(R,0,I);const F=w&1?h:f;g.push(F.r,F.g,F.b),g.push(F.r,F.g,F.b)}for(let w=0;w<s;w++){const T=w&1?h:f,R=e-e/s*w;for(let I=0;I<l;I++){let F=I/l*(Math.PI*2),D=Math.sin(F)*R,C=Math.cos(F)*R;m.push(D,0,C),g.push(T.r,T.g,T.b),F=(I+1)/l*(Math.PI*2),D=Math.sin(F)*R,C=Math.cos(F)*R,m.push(D,0,C),g.push(T.r,T.g,T.b)}}const y=new Rn;y.setAttribute("position",new qt(m,3)),y.setAttribute("color",new qt(g,3));const S=new Lr({vertexColors:!0,toneMapped:!1});super(y,S),this.type="PolarGridHelper"}dispose(){this.geometry.dispose(),this.material.dispose()}}const hM=new re,Ud=new re,uM=new re;class FR extends $n{constructor(e,i,s){super(),this.light=e,this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.color=s,this.type="DirectionalLightHelper",i===void 0&&(i=1);let l=new Rn;l.setAttribute("position",new qt([-i,i,0,i,i,0,i,-i,0,-i,-i,0,-i,i,0],3));const h=new Lr({fog:!1,toneMapped:!1});this.lightPlane=new so(l,h),this.add(this.lightPlane),l=new Rn,l.setAttribute("position",new qt([0,0,0,0,0,1],3)),this.targetLine=new so(l,h),this.add(this.targetLine),this.update()}dispose(){this.lightPlane.geometry.dispose(),this.lightPlane.material.dispose(),this.targetLine.geometry.dispose(),this.targetLine.material.dispose()}update(){this.light.updateWorldMatrix(!0,!1),this.light.target.updateWorldMatrix(!0,!1),hM.setFromMatrixPosition(this.light.matrixWorld),Ud.setFromMatrixPosition(this.light.target.matrixWorld),uM.subVectors(Ud,hM),this.lightPlane.lookAt(Ud),this.color!==void 0?(this.lightPlane.material.color.set(this.color),this.targetLine.material.color.set(this.color)):(this.lightPlane.material.color.copy(this.light.color),this.targetLine.material.color.copy(this.light.color)),this.targetLine.lookAt(Ud),this.targetLine.scale.z=uM.length()}}const Nd=new re,Ui=new Vf;class OR extends ta{constructor(e){const i=new Rn,s=new Lr({color:16777215,vertexColors:!0,toneMapped:!1}),l=[],h=[],f={};m("n1","n2"),m("n2","n4"),m("n4","n3"),m("n3","n1"),m("f1","f2"),m("f2","f4"),m("f4","f3"),m("f3","f1"),m("n1","f1"),m("n2","f2"),m("n3","f3"),m("n4","f4"),m("p","n1"),m("p","n2"),m("p","n3"),m("p","n4"),m("u1","u2"),m("u2","u3"),m("u3","u1"),m("c","t"),m("p","c"),m("cn1","cn2"),m("cn3","cn4"),m("cf1","cf2"),m("cf3","cf4");function m(I,F){g(I),g(F)}function g(I){l.push(0,0,0),h.push(0,0,0),f[I]===void 0&&(f[I]=[]),f[I].push(l.length/3-1)}i.setAttribute("position",new qt(l,3)),i.setAttribute("color",new qt(h,3)),super(i,s),this.type="CameraHelper",this.camera=e,this.camera.updateProjectionMatrix&&this.camera.updateProjectionMatrix(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.pointMap=f,this.update();const y=new It(16755200),S=new It(16711680),w=new It(43775),T=new It(16777215),R=new It(3355443);this.setColors(y,S,w,T,R)}setColors(e,i,s,l,h){const m=this.geometry.getAttribute("color");m.setXYZ(0,e.r,e.g,e.b),m.setXYZ(1,e.r,e.g,e.b),m.setXYZ(2,e.r,e.g,e.b),m.setXYZ(3,e.r,e.g,e.b),m.setXYZ(4,e.r,e.g,e.b),m.setXYZ(5,e.r,e.g,e.b),m.setXYZ(6,e.r,e.g,e.b),m.setXYZ(7,e.r,e.g,e.b),m.setXYZ(8,e.r,e.g,e.b),m.setXYZ(9,e.r,e.g,e.b),m.setXYZ(10,e.r,e.g,e.b),m.setXYZ(11,e.r,e.g,e.b),m.setXYZ(12,e.r,e.g,e.b),m.setXYZ(13,e.r,e.g,e.b),m.setXYZ(14,e.r,e.g,e.b),m.setXYZ(15,e.r,e.g,e.b),m.setXYZ(16,e.r,e.g,e.b),m.setXYZ(17,e.r,e.g,e.b),m.setXYZ(18,e.r,e.g,e.b),m.setXYZ(19,e.r,e.g,e.b),m.setXYZ(20,e.r,e.g,e.b),m.setXYZ(21,e.r,e.g,e.b),m.setXYZ(22,e.r,e.g,e.b),m.setXYZ(23,e.r,e.g,e.b),m.setXYZ(24,i.r,i.g,i.b),m.setXYZ(25,i.r,i.g,i.b),m.setXYZ(26,i.r,i.g,i.b),m.setXYZ(27,i.r,i.g,i.b),m.setXYZ(28,i.r,i.g,i.b),m.setXYZ(29,i.r,i.g,i.b),m.setXYZ(30,i.r,i.g,i.b),m.setXYZ(31,i.r,i.g,i.b),m.setXYZ(32,s.r,s.g,s.b),m.setXYZ(33,s.r,s.g,s.b),m.setXYZ(34,s.r,s.g,s.b),m.setXYZ(35,s.r,s.g,s.b),m.setXYZ(36,s.r,s.g,s.b),m.setXYZ(37,s.r,s.g,s.b),m.setXYZ(38,l.r,l.g,l.b),m.setXYZ(39,l.r,l.g,l.b),m.setXYZ(40,h.r,h.g,h.b),m.setXYZ(41,h.r,h.g,h.b),m.setXYZ(42,h.r,h.g,h.b),m.setXYZ(43,h.r,h.g,h.b),m.setXYZ(44,h.r,h.g,h.b),m.setXYZ(45,h.r,h.g,h.b),m.setXYZ(46,h.r,h.g,h.b),m.setXYZ(47,h.r,h.g,h.b),m.setXYZ(48,h.r,h.g,h.b),m.setXYZ(49,h.r,h.g,h.b),m.needsUpdate=!0}update(){const e=this.geometry,i=this.pointMap,s=1,l=1;Ui.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse);const h=this.camera.coordinateSystem===Us?-1:0;zi("c",i,e,Ui,0,0,h),zi("t",i,e,Ui,0,0,1),zi("n1",i,e,Ui,-1,-1,h),zi("n2",i,e,Ui,s,-1,h),zi("n3",i,e,Ui,-1,l,h),zi("n4",i,e,Ui,s,l,h),zi("f1",i,e,Ui,-1,-1,1),zi("f2",i,e,Ui,s,-1,1),zi("f3",i,e,Ui,-1,l,1),zi("f4",i,e,Ui,s,l,1),zi("u1",i,e,Ui,s*.7,l*1.1,h),zi("u2",i,e,Ui,-1*.7,l*1.1,h),zi("u3",i,e,Ui,0,l*2,h),zi("cf1",i,e,Ui,-1,0,1),zi("cf2",i,e,Ui,s,0,1),zi("cf3",i,e,Ui,0,-1,1),zi("cf4",i,e,Ui,0,l,1),zi("cn1",i,e,Ui,-1,0,h),zi("cn2",i,e,Ui,s,0,h),zi("cn3",i,e,Ui,0,-1,h),zi("cn4",i,e,Ui,0,l,h),e.getAttribute("position").needsUpdate=!0}dispose(){this.geometry.dispose(),this.material.dispose()}}function zi(u,e,i,s,l,h,f){Nd.set(l,h,f).unproject(s);const m=e[u];if(m!==void 0){const g=i.getAttribute("position");for(let y=0,S=m.length;y<S;y++)g.setXYZ(m[y],Nd.x,Nd.y,Nd.z)}}const Fd=new Pr;class BR extends ta{constructor(e,i=16776960){const s=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),l=new Float32Array(8*3),h=new Rn;h.setIndex(new di(s,1)),h.setAttribute("position",new di(l,3)),super(h,new Lr({color:i,toneMapped:!1})),this.object=e,this.type="BoxHelper",this.matrixAutoUpdate=!1,this.update()}update(e){if(e!==void 0&&console.warn("THREE.BoxHelper: .update() has no longer arguments."),this.object!==void 0&&Fd.setFromObject(this.object),Fd.isEmpty())return;const i=Fd.min,s=Fd.max,l=this.geometry.attributes.position,h=l.array;h[0]=s.x,h[1]=s.y,h[2]=s.z,h[3]=i.x,h[4]=s.y,h[5]=s.z,h[6]=i.x,h[7]=i.y,h[8]=s.z,h[9]=s.x,h[10]=i.y,h[11]=s.z,h[12]=s.x,h[13]=s.y,h[14]=i.z,h[15]=i.x,h[16]=s.y,h[17]=i.z,h[18]=i.x,h[19]=i.y,h[20]=i.z,h[21]=s.x,h[22]=i.y,h[23]=i.z,l.needsUpdate=!0,this.geometry.computeBoundingSphere()}setFromObject(e){return this.object=e,this.update(),this}copy(e,i){return super.copy(e,i),this.object=e.object,this}dispose(){this.geometry.dispose(),this.material.dispose()}}class zR extends ta{constructor(e,i=16776960){const s=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),l=[1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1],h=new Rn;h.setIndex(new di(s,1)),h.setAttribute("position",new qt(l,3)),super(h,new Lr({color:i,toneMapped:!1})),this.box=e,this.type="Box3Helper",this.geometry.computeBoundingSphere()}updateMatrixWorld(e){const i=this.box;i.isEmpty()||(i.getCenter(this.position),i.getSize(this.scale),this.scale.multiplyScalar(.5),super.updateMatrixWorld(e))}dispose(){this.geometry.dispose(),this.material.dispose()}}class kR extends so{constructor(e,i=1,s=16776960){const l=s,h=[1,-1,0,-1,1,0,-1,-1,0,1,1,0,-1,1,0,-1,-1,0,1,-1,0,1,1,0],f=new Rn;f.setAttribute("position",new qt(h,3)),f.computeBoundingSphere(),super(f,new Lr({color:l,toneMapped:!1})),this.type="PlaneHelper",this.plane=e,this.size=i;const m=[1,1,0,-1,1,0,-1,-1,0,1,1,0,-1,-1,0,1,-1,0],g=new Rn;g.setAttribute("position",new qt(m,3)),g.computeBoundingSphere(),this.add(new Wi(g,new no({color:l,opacity:.2,transparent:!0,depthWrite:!1,toneMapped:!1})))}updateMatrixWorld(e){this.position.set(0,0,0),this.scale.set(.5*this.size,.5*this.size,1),this.lookAt(this.plane.normal),this.translateZ(-this.plane.constant),super.updateMatrixWorld(e)}dispose(){this.geometry.dispose(),this.material.dispose(),this.children[0].geometry.dispose(),this.children[0].material.dispose()}}const fM=new re;let Od,C_;class VR extends $n{constructor(e=new re(0,0,1),i=new re(0,0,0),s=1,l=16776960,h=s*.2,f=h*.2){super(),this.type="ArrowHelper",Od===void 0&&(Od=new Rn,Od.setAttribute("position",new qt([0,0,0,0,1,0],3)),C_=new wc(0,.5,1,5,1),C_.translate(0,-.5,0)),this.position.copy(i),this.line=new so(Od,new Lr({color:l,toneMapped:!1})),this.line.matrixAutoUpdate=!1,this.add(this.line),this.cone=new Wi(C_,new no({color:l,toneMapped:!1})),this.cone.matrixAutoUpdate=!1,this.add(this.cone),this.setDirection(e),this.setLength(s,h,f)}setDirection(e){if(e.y>.99999)this.quaternion.set(0,0,0,1);else if(e.y<-.99999)this.quaternion.set(1,0,0,0);else{fM.set(e.z,0,-e.x).normalize();const i=Math.acos(e.y);this.quaternion.setFromAxisAngle(fM,i)}}setLength(e,i=e*.2,s=i*.2){this.line.scale.set(1,Math.max(1e-4,e-i),1),this.line.updateMatrix(),this.cone.scale.set(s,i,s),this.cone.position.y=e,this.cone.updateMatrix()}setColor(e){this.line.material.color.set(e),this.cone.material.color.set(e)}copy(e){return super.copy(e,!1),this.line.copy(e.line),this.cone.copy(e.cone),this}dispose(){this.line.geometry.dispose(),this.line.material.dispose(),this.cone.geometry.dispose(),this.cone.material.dispose()}}class HR extends ta{constructor(e=1){const i=[0,0,0,e,0,0,0,0,0,0,e,0,0,0,0,0,0,e],s=[1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1],l=new Rn;l.setAttribute("position",new qt(i,3)),l.setAttribute("color",new qt(s,3));const h=new Lr({vertexColors:!0,toneMapped:!1});super(l,h),this.type="AxesHelper"}setColors(e,i,s){const l=new It,h=this.geometry.attributes.color.array;return l.set(e),l.toArray(h,0),l.toArray(h,3),l.set(i),l.toArray(h,6),l.toArray(h,9),l.set(s),l.toArray(h,12),l.toArray(h,15),this.geometry.attributes.color.needsUpdate=!0,this}dispose(){this.geometry.dispose(),this.material.dispose()}}class GR{constructor(){this.type="ShapePath",this.color=new It,this.subPaths=[],this.currentPath=null}moveTo(e,i){return this.currentPath=new iu,this.subPaths.push(this.currentPath),this.currentPath.moveTo(e,i),this}lineTo(e,i){return this.currentPath.lineTo(e,i),this}quadraticCurveTo(e,i,s,l){return this.currentPath.quadraticCurveTo(e,i,s,l),this}bezierCurveTo(e,i,s,l,h,f){return this.currentPath.bezierCurveTo(e,i,s,l,h,f),this}splineThru(e){return this.currentPath.splineThru(e),this}toShapes(e){function i(C){const q=[];for(let G=0,H=C.length;G<H;G++){const le=C[G],ne=new el;ne.curves=le.curves,q.push(ne)}return q}function s(C,q){const G=q.length;let H=!1;for(let le=G-1,ne=0;ne<G;le=ne++){let oe=q[le],ce=q[ne],Q=ce.x-oe.x,Z=ce.y-oe.y;if(Math.abs(Z)>Number.EPSILON){if(Z<0&&(oe=q[ne],Q=-Q,ce=q[le],Z=-Z),C.y<oe.y||C.y>ce.y)continue;if(C.y===oe.y){if(C.x===oe.x)return!0}else{const he=Z*(C.x-oe.x)-Q*(C.y-oe.y);if(he===0)return!0;if(he<0)continue;H=!H}}else{if(C.y!==oe.y)continue;if(ce.x<=C.x&&C.x<=oe.x||oe.x<=C.x&&C.x<=ce.x)return!0}}return H}const l=na.isClockWise,h=this.subPaths;if(h.length===0)return[];let f,m,g;const y=[];if(h.length===1)return m=h[0],g=new el,g.curves=m.curves,y.push(g),y;let S=!l(h[0].getPoints());S=e?!S:S;const w=[],T=[];let R=[],I=0,F;T[I]=void 0,R[I]=[];for(let C=0,q=h.length;C<q;C++)m=h[C],F=m.getPoints(),f=l(F),f=e?!f:f,f?(!S&&T[I]&&I++,T[I]={s:new el,p:F},T[I].s.curves=m.curves,S&&I++,R[I]=[]):R[I].push({h:m,p:F[0]});if(!T[0])return i(h);if(T.length>1){let C=!1,q=0;for(let G=0,H=T.length;G<H;G++)w[G]=[];for(let G=0,H=T.length;G<H;G++){const le=R[G];for(let ne=0;ne<le.length;ne++){const oe=le[ne];let ce=!0;for(let Q=0;Q<T.length;Q++)s(oe.p,T[Q].p)&&(G!==Q&&q++,ce?(ce=!1,w[Q].push(oe)):C=!0);ce&&w[G].push(oe)}}q>0&&C===!1&&(R=w)}let D;for(let C=0,q=T.length;C<q;C++){g=T[C].s,y.push(g),D=R[C];for(let G=0,H=D.length;G<H;G++)g.holes.push(D[G].h)}return y}}class WR extends js{constructor(e,i=null){super(),this.object=e,this.domElement=i,this.enabled=!0,this.state=-1,this.keys={},this.mouseButtons={LEFT:null,MIDDLE:null,RIGHT:null},this.touches={ONE:null,TWO:null}}connect(){}disconnect(){}dispose(){}update(){}}function XR(u,e){const i=u.image&&u.image.width?u.image.width/u.image.height:1;return i>e?(u.repeat.x=1,u.repeat.y=i/e,u.offset.x=0,u.offset.y=(1-u.repeat.y)/2):(u.repeat.x=e/i,u.repeat.y=1,u.offset.x=(1-u.repeat.x)/2,u.offset.y=0),u}function qR(u,e){const i=u.image&&u.image.width?u.image.width/u.image.height:1;return i>e?(u.repeat.x=e/i,u.repeat.y=1,u.offset.x=(1-u.repeat.x)/2,u.offset.y=0):(u.repeat.x=1,u.repeat.y=i/e,u.offset.x=0,u.offset.y=(1-u.repeat.y)/2),u}function YR(u){return u.repeat.x=1,u.repeat.y=1,u.offset.x=0,u.offset.y=0,u}function P_(u,e,i,s){const l=ZR(s);switch(i){case Kl:return u*e;case $a:return u*e;case Jl:return u*e*2;case jl:return u*e/l.components*l.byteLength;case Bo:return u*e/l.components*l.byteLength;case Dh:return u*e*2/l.components*l.byteLength;case Ql:return u*e*2/l.components*l.byteLength;case Za:return u*e*3/l.components*l.byteLength;case tr:return u*e*4/l.components*l.byteLength;case J:return u*e*4/l.components*l.byteLength;case ge:case Re:return Math.floor((u+3)/4)*Math.floor((e+3)/4)*8;case Ce:case ve:return Math.floor((u+3)/4)*Math.floor((e+3)/4)*16;case gt:case Lt:return Math.max(u,16)*Math.max(e,8)/4;case tt:case At:return Math.max(u,8)*Math.max(e,8)/2;case cn:case hn:return Math.floor((u+3)/4)*Math.floor((e+3)/4)*8;case Jt:return Math.floor((u+3)/4)*Math.floor((e+3)/4)*16;case Un:return Math.floor((u+3)/4)*Math.floor((e+3)/4)*16;case Vn:return Math.floor((u+4)/5)*Math.floor((e+3)/4)*16;case Mi:return Math.floor((u+4)/5)*Math.floor((e+4)/5)*16;case gi:return Math.floor((u+5)/6)*Math.floor((e+4)/5)*16;case On:return Math.floor((u+5)/6)*Math.floor((e+5)/6)*16;case en:return Math.floor((u+7)/8)*Math.floor((e+4)/5)*16;case Di:return Math.floor((u+7)/8)*Math.floor((e+5)/6)*16;case Hn:return Math.floor((u+7)/8)*Math.floor((e+7)/8)*16;case pr:return Math.floor((u+9)/10)*Math.floor((e+4)/5)*16;case Ls:return Math.floor((u+9)/10)*Math.floor((e+5)/6)*16;case nr:return Math.floor((u+9)/10)*Math.floor((e+7)/8)*16;case Js:return Math.floor((u+9)/10)*Math.floor((e+9)/10)*16;case oi:return Math.floor((u+11)/12)*Math.floor((e+9)/10)*16;case cr:return Math.floor((u+11)/12)*Math.floor((e+11)/12)*16;case ir:case Hi:case $i:return Math.ceil(u/4)*Math.ceil(e/4)*16;case zo:case xs:return Math.ceil(u/4)*Math.ceil(e/4)*8;case gf:case xf:return Math.ceil(u/4)*Math.ceil(e/4)*16}throw new Error(`Unable to determine texture byte length for ${i} format.`)}function ZR(u){switch(u){case ft:case yn:return{byteLength:1,components:1};case Ai:case vi:case ma:return{byteLength:2,components:1};case Oo:case gs:return{byteLength:2,components:4};case Bi:case Xn:case Si:return{byteLength:4,components:1};case $l:return{byteLength:4,components:3}}throw new Error(`Unknown texture type ${u}.`)}const $R={contain:XR,cover:qR,fill:YR,getByteLength:P_};typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:a}})),typeof window<"u"&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=a);function dM(){let u=null,e=!1,i=null,s=null;function l(h,f){i(h,f),s=u.requestAnimationFrame(l)}return{start:function(){e!==!0&&i!==null&&(s=u.requestAnimationFrame(l),e=!0)},stop:function(){u.cancelAnimationFrame(s),e=!1},setAnimationLoop:function(h){i=h},setContext:function(h){u=h}}}function KR(u){const e=new WeakMap;function i(m,g){const y=m.array,S=m.usage,w=y.byteLength,T=u.createBuffer();u.bindBuffer(g,T),u.bufferData(g,y,S),m.onUploadCallback();let R;if(y instanceof Float32Array)R=u.FLOAT;else if(y instanceof Uint16Array)m.isFloat16BufferAttribute?R=u.HALF_FLOAT:R=u.UNSIGNED_SHORT;else if(y instanceof Int16Array)R=u.SHORT;else if(y instanceof Uint32Array)R=u.UNSIGNED_INT;else if(y instanceof Int32Array)R=u.INT;else if(y instanceof Int8Array)R=u.BYTE;else if(y instanceof Uint8Array)R=u.UNSIGNED_BYTE;else if(y instanceof Uint8ClampedArray)R=u.UNSIGNED_BYTE;else throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: "+y);return{buffer:T,type:R,bytesPerElement:y.BYTES_PER_ELEMENT,version:m.version,size:w}}function s(m,g,y){const S=g.array,w=g.updateRanges;if(u.bindBuffer(y,m),w.length===0)u.bufferSubData(y,0,S);else{w.sort((R,I)=>R.start-I.start);let T=0;for(let R=1;R<w.length;R++){const I=w[T],F=w[R];F.start<=I.start+I.count+1?I.count=Math.max(I.count,F.start+F.count-I.start):(++T,w[T]=F)}w.length=T+1;for(let R=0,I=w.length;R<I;R++){const F=w[R];u.bufferSubData(y,F.start*S.BYTES_PER_ELEMENT,S,F.start,F.count)}g.clearUpdateRanges()}g.onUploadCallback()}function l(m){return m.isInterleavedBufferAttribute&&(m=m.data),e.get(m)}function h(m){m.isInterleavedBufferAttribute&&(m=m.data);const g=e.get(m);g&&(u.deleteBuffer(g.buffer),e.delete(m))}function f(m,g){if(m.isInterleavedBufferAttribute&&(m=m.data),m.isGLBufferAttribute){const S=e.get(m);(!S||S.version<m.version)&&e.set(m,{buffer:m.buffer,type:m.type,bytesPerElement:m.elementSize,version:m.version});return}const y=e.get(m);if(y===void 0)e.set(m,i(m,g));else if(y.version<m.version){if(y.size!==m.array.byteLength)throw new Error("THREE.WebGLAttributes: The size of the buffer attribute's array buffer does not match the original size. Resizing buffer attributes is not supported.");s(y.buffer,m,g),y.version=m.version}}return{get:l,remove:h,update:f}}var JR=`#ifdef USE_ALPHAHASH
	if ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;
#endif`,jR=`#ifdef USE_ALPHAHASH
	const float ALPHA_HASH_SCALE = 0.05;
	float hash2D( vec2 value ) {
		return fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );
	}
	float hash3D( vec3 value ) {
		return hash2D( vec2( hash2D( value.xy ), value.z ) );
	}
	float getAlphaHashThreshold( vec3 position ) {
		float maxDeriv = max(
			length( dFdx( position.xyz ) ),
			length( dFdy( position.xyz ) )
		);
		float pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );
		vec2 pixScales = vec2(
			exp2( floor( log2( pixScale ) ) ),
			exp2( ceil( log2( pixScale ) ) )
		);
		vec2 alpha = vec2(
			hash3D( floor( pixScales.x * position.xyz ) ),
			hash3D( floor( pixScales.y * position.xyz ) )
		);
		float lerpFactor = fract( log2( pixScale ) );
		float x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;
		float a = min( lerpFactor, 1.0 - lerpFactor );
		vec3 cases = vec3(
			x * x / ( 2.0 * a * ( 1.0 - a ) ),
			( x - 0.5 * a ) / ( 1.0 - a ),
			1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )
		);
		float threshold = ( x < ( 1.0 - a ) )
			? ( ( x < a ) ? cases.x : cases.y )
			: cases.z;
		return clamp( threshold , 1.0e-6, 1.0 );
	}
#endif`,QR=`#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;
#endif`,eC=`#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,tC=`#ifdef USE_ALPHATEST
	#ifdef ALPHA_TO_COVERAGE
	diffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );
	if ( diffuseColor.a == 0.0 ) discard;
	#else
	if ( diffuseColor.a < alphaTest ) discard;
	#endif
#endif`,nC=`#ifdef USE_ALPHATEST
	uniform float alphaTest;
#endif`,iC=`#ifdef USE_AOMAP
	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;
	reflectedLight.indirectDiffuse *= ambientOcclusion;
	#if defined( USE_CLEARCOAT ) 
		clearcoatSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_SHEEN ) 
		sheenSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD )
		float dotNV = saturate( dot( geometryNormal, geometryViewDir ) );
		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );
	#endif
#endif`,rC=`#ifdef USE_AOMAP
	uniform sampler2D aoMap;
	uniform float aoMapIntensity;
#endif`,sC=`#ifdef USE_BATCHING
	#if ! defined( GL_ANGLE_multi_draw )
	#define gl_DrawID _gl_DrawID
	uniform int _gl_DrawID;
	#endif
	uniform highp sampler2D batchingTexture;
	uniform highp usampler2D batchingIdTexture;
	mat4 getBatchingMatrix( const in float i ) {
		int size = textureSize( batchingTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
	float getIndirectIndex( const in int i ) {
		int size = textureSize( batchingIdTexture, 0 ).x;
		int x = i % size;
		int y = i / size;
		return float( texelFetch( batchingIdTexture, ivec2( x, y ), 0 ).r );
	}
#endif
#ifdef USE_BATCHING_COLOR
	uniform sampler2D batchingColorTexture;
	vec3 getBatchingColor( const in float i ) {
		int size = textureSize( batchingColorTexture, 0 ).x;
		int j = int( i );
		int x = j % size;
		int y = j / size;
		return texelFetch( batchingColorTexture, ivec2( x, y ), 0 ).rgb;
	}
#endif`,aC=`#ifdef USE_BATCHING
	mat4 batchingMatrix = getBatchingMatrix( getIndirectIndex( gl_DrawID ) );
#endif`,oC=`vec3 transformed = vec3( position );
#ifdef USE_ALPHAHASH
	vPosition = vec3( position );
#endif`,lC=`vec3 objectNormal = vec3( normal );
#ifdef USE_TANGENT
	vec3 objectTangent = vec3( tangent.xyz );
#endif`,cC=`float G_BlinnPhong_Implicit( ) {
	return 0.25;
}
float D_BlinnPhong( const in float shininess, const in float dotNH ) {
	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );
}
vec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( specularColor, 1.0, dotVH );
	float G = G_BlinnPhong_Implicit( );
	float D = D_BlinnPhong( shininess, dotNH );
	return F * ( G * D );
} // validated`,hC=`#ifdef USE_IRIDESCENCE
	const mat3 XYZ_TO_REC709 = mat3(
		 3.2404542, -0.9692660,  0.0556434,
		-1.5371385,  1.8760108, -0.2040259,
		-0.4985314,  0.0415560,  1.0572252
	);
	vec3 Fresnel0ToIor( vec3 fresnel0 ) {
		vec3 sqrtF0 = sqrt( fresnel0 );
		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );
	}
	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );
	}
	float IorToFresnel0( float transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));
	}
	vec3 evalSensitivity( float OPD, vec3 shift ) {
		float phase = 2.0 * PI * OPD * 1.0e-9;
		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );
		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );
		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );
		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );
		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );
		xyz /= 1.0685e-7;
		vec3 rgb = XYZ_TO_REC709 * xyz;
		return rgb;
	}
	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {
		vec3 I;
		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );
		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );
		float cosTheta2Sq = 1.0 - sinTheta2Sq;
		if ( cosTheta2Sq < 0.0 ) {
			return vec3( 1.0 );
		}
		float cosTheta2 = sqrt( cosTheta2Sq );
		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );
		float R12 = F_Schlick( R0, 1.0, cosTheta1 );
		float T121 = 1.0 - R12;
		float phi12 = 0.0;
		if ( iridescenceIOR < outsideIOR ) phi12 = PI;
		float phi21 = PI - phi12;
		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );
		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );
		vec3 phi23 = vec3( 0.0 );
		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;
		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;
		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;
		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;
		vec3 phi = vec3( phi21 ) + phi23;
		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );
		vec3 r123 = sqrt( R123 );
		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );
		vec3 C0 = R12 + Rs;
		I = C0;
		vec3 Cm = Rs - T121;
		for ( int m = 1; m <= 2; ++ m ) {
			Cm *= r123;
			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );
			I += Cm * Sm;
		}
		return max( I, vec3( 0.0 ) );
	}
#endif`,uC=`#ifdef USE_BUMPMAP
	uniform sampler2D bumpMap;
	uniform float bumpScale;
	vec2 dHdxy_fwd() {
		vec2 dSTdx = dFdx( vBumpMapUv );
		vec2 dSTdy = dFdy( vBumpMapUv );
		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;
		return vec2( dBx, dBy );
	}
	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {
		vec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );
		vec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );
		vec3 vN = surf_norm;
		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );
		float fDet = dot( vSigmaX, R1 ) * faceDirection;
		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );
	}
#endif`,fC=`#if NUM_CLIPPING_PLANES > 0
	vec4 plane;
	#ifdef ALPHA_TO_COVERAGE
		float distanceToPlane, distanceGradient;
		float clipOpacity = 1.0;
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
			distanceGradient = fwidth( distanceToPlane ) / 2.0;
			clipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			if ( clipOpacity == 0.0 ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			float unionClipOpacity = 1.0;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
				distanceGradient = fwidth( distanceToPlane ) / 2.0;
				unionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			}
			#pragma unroll_loop_end
			clipOpacity *= 1.0 - unionClipOpacity;
		#endif
		diffuseColor.a *= clipOpacity;
		if ( diffuseColor.a == 0.0 ) discard;
	#else
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			bool clipped = true;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;
			}
			#pragma unroll_loop_end
			if ( clipped ) discard;
		#endif
	#endif
#endif`,dC=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];
#endif`,pC=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
#endif`,mC=`#if NUM_CLIPPING_PLANES > 0
	vClipPosition = - mvPosition.xyz;
#endif`,_C=`#if defined( USE_COLOR_ALPHA )
	diffuseColor *= vColor;
#elif defined( USE_COLOR )
	diffuseColor.rgb *= vColor;
#endif`,gC=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR )
	varying vec3 vColor;
#endif`,xC=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )
	varying vec3 vColor;
#endif`,vC=`#if defined( USE_COLOR_ALPHA )
	vColor = vec4( 1.0 );
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )
	vColor = vec3( 1.0 );
#endif
#ifdef USE_COLOR
	vColor *= color;
#endif
#ifdef USE_INSTANCING_COLOR
	vColor.xyz *= instanceColor.xyz;
#endif
#ifdef USE_BATCHING_COLOR
	vec3 batchingColor = getBatchingColor( getIndirectIndex( gl_DrawID ) );
	vColor.xyz *= batchingColor.xyz;
#endif`,yC=`#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement( a ) ( 1.0 - saturate( a ) )
float pow2( const in float x ) { return x*x; }
vec3 pow2( const in vec3 x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }
float average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }
highp float rand( const in vec2 uv ) {
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
	return fract( sin( sn ) * c );
}
#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif
struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};
struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};
#ifdef USE_ALPHAHASH
	varying vec3 vPosition;
#endif
vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
}
vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
}
mat3 transposeMat3( const in mat3 m ) {
	mat3 tmp;
	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
	return tmp;
}
bool isPerspectiveMatrix( mat4 m ) {
	return m[ 2 ][ 3 ] == - 1.0;
}
vec2 equirectUv( in vec3 dir ) {
	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;
	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;
	return vec2( u, v );
}
vec3 BRDF_Lambert( const in vec3 diffuseColor ) {
	return RECIPROCAL_PI * diffuseColor;
}
vec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
float F_Schlick( const in float f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
} // validated`,MC=`#ifdef ENVMAP_TYPE_CUBE_UV
	#define cubeUV_minMipLevel 4.0
	#define cubeUV_minTileSize 16.0
	float getFace( vec3 direction ) {
		vec3 absDirection = abs( direction );
		float face = - 1.0;
		if ( absDirection.x > absDirection.z ) {
			if ( absDirection.x > absDirection.y )
				face = direction.x > 0.0 ? 0.0 : 3.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		} else {
			if ( absDirection.z > absDirection.y )
				face = direction.z > 0.0 ? 2.0 : 5.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		}
		return face;
	}
	vec2 getUV( vec3 direction, float face ) {
		vec2 uv;
		if ( face == 0.0 ) {
			uv = vec2( direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 1.0 ) {
			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );
		} else if ( face == 2.0 ) {
			uv = vec2( - direction.x, direction.y ) / abs( direction.z );
		} else if ( face == 3.0 ) {
			uv = vec2( - direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 4.0 ) {
			uv = vec2( - direction.x, direction.z ) / abs( direction.y );
		} else {
			uv = vec2( direction.x, direction.y ) / abs( direction.z );
		}
		return 0.5 * ( uv + 1.0 );
	}
	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {
		float face = getFace( direction );
		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );
		mipInt = max( mipInt, cubeUV_minMipLevel );
		float faceSize = exp2( mipInt );
		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;
		if ( face > 2.0 ) {
			uv.y += faceSize;
			face -= 3.0;
		}
		uv.x += face * faceSize;
		uv.x += filterInt * 3.0 * cubeUV_minTileSize;
		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );
		uv.x *= CUBEUV_TEXEL_WIDTH;
		uv.y *= CUBEUV_TEXEL_HEIGHT;
		#ifdef texture2DGradEXT
			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;
		#else
			return texture2D( envMap, uv ).rgb;
		#endif
	}
	#define cubeUV_r0 1.0
	#define cubeUV_m0 - 2.0
	#define cubeUV_r1 0.8
	#define cubeUV_m1 - 1.0
	#define cubeUV_r4 0.4
	#define cubeUV_m4 2.0
	#define cubeUV_r5 0.305
	#define cubeUV_m5 3.0
	#define cubeUV_r6 0.21
	#define cubeUV_m6 4.0
	float roughnessToMip( float roughness ) {
		float mip = 0.0;
		if ( roughness >= cubeUV_r1 ) {
			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;
		} else if ( roughness >= cubeUV_r4 ) {
			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;
		} else if ( roughness >= cubeUV_r5 ) {
			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;
		} else if ( roughness >= cubeUV_r6 ) {
			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;
		} else {
			mip = - 2.0 * log2( 1.16 * roughness );		}
		return mip;
	}
	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {
		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );
		float mipF = fract( mip );
		float mipInt = floor( mip );
		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );
		if ( mipF == 0.0 ) {
			return vec4( color0, 1.0 );
		} else {
			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );
			return vec4( mix( color0, color1, mipF ), 1.0 );
		}
	}
#endif`,SC=`vec3 transformedNormal = objectNormal;
#ifdef USE_TANGENT
	vec3 transformedTangent = objectTangent;
#endif
#ifdef USE_BATCHING
	mat3 bm = mat3( batchingMatrix );
	transformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );
	transformedNormal = bm * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = bm * transformedTangent;
	#endif
#endif
#ifdef USE_INSTANCING
	mat3 im = mat3( instanceMatrix );
	transformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );
	transformedNormal = im * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = im * transformedTangent;
	#endif
#endif
transformedNormal = normalMatrix * transformedNormal;
#ifdef FLIP_SIDED
	transformedNormal = - transformedNormal;
#endif
#ifdef USE_TANGENT
	transformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;
	#ifdef FLIP_SIDED
		transformedTangent = - transformedTangent;
	#endif
#endif`,bC=`#ifdef USE_DISPLACEMENTMAP
	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;
#endif`,EC=`#ifdef USE_DISPLACEMENTMAP
	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );
#endif`,wC=`#ifdef USE_EMISSIVEMAP
	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );
	#ifdef DECODE_VIDEO_TEXTURE_EMISSIVE
		emissiveColor = sRGBTransferEOTF( emissiveColor );
	#endif
	totalEmissiveRadiance *= emissiveColor.rgb;
#endif`,TC=`#ifdef USE_EMISSIVEMAP
	uniform sampler2D emissiveMap;
#endif`,AC="gl_FragColor = linearToOutputTexel( gl_FragColor );",RC=`vec4 LinearTransferOETF( in vec4 value ) {
	return value;
}
vec4 sRGBTransferEOTF( in vec4 value ) {
	return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );
}
vec4 sRGBTransferOETF( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}`,CC=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vec3 cameraToFrag;
		if ( isOrthographic ) {
			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToFrag = normalize( vWorldPosition - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( cameraToFrag, worldNormal );
		#else
			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );
		#endif
	#else
		vec3 reflectVec = vReflect;
	#endif
	#ifdef ENVMAP_TYPE_CUBE
		vec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );
	#else
		vec4 envColor = vec4( 0.0 );
	#endif
	#ifdef ENVMAP_BLENDING_MULTIPLY
		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_MIX )
		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_ADD )
		outgoingLight += envColor.xyz * specularStrength * reflectivity;
	#endif
#endif`,PC=`#ifdef USE_ENVMAP
	uniform float envMapIntensity;
	uniform float flipEnvMap;
	uniform mat3 envMapRotation;
	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif`,IC=`#ifdef USE_ENVMAP
	uniform float reflectivity;
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif
#endif`,DC=`#ifdef USE_ENVMAP
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;
	#else
		varying vec3 vReflect;
		uniform float refractionRatio;
	#endif
#endif`,LC=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vWorldPosition = worldPosition.xyz;
	#else
		vec3 cameraToVertex;
		if ( isOrthographic ) {
			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vReflect = reflect( cameraToVertex, worldNormal );
		#else
			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );
		#endif
	#endif
#endif`,UC=`#ifdef USE_FOG
	vFogDepth = - mvPosition.z;
#endif`,NC=`#ifdef USE_FOG
	varying float vFogDepth;
#endif`,FC=`#ifdef USE_FOG
	#ifdef FOG_EXP2
		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );
	#else
		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );
	#endif
	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );
#endif`,OC=`#ifdef USE_FOG
	uniform vec3 fogColor;
	varying float vFogDepth;
	#ifdef FOG_EXP2
		uniform float fogDensity;
	#else
		uniform float fogNear;
		uniform float fogFar;
	#endif
#endif`,BC=`#ifdef USE_GRADIENTMAP
	uniform sampler2D gradientMap;
#endif
vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );
	#ifdef USE_GRADIENTMAP
		return vec3( texture2D( gradientMap, coord ).r );
	#else
		vec2 fw = fwidth( coord ) * 0.5;
		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );
	#endif
}`,zC=`#ifdef USE_LIGHTMAP
	uniform sampler2D lightMap;
	uniform float lightMapIntensity;
#endif`,kC=`LambertMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularStrength = specularStrength;`,VC=`varying vec3 vViewPosition;
struct LambertMaterial {
	vec3 diffuseColor;
	float specularStrength;
};
void RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Lambert
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert`,HC=`uniform bool receiveShadow;
uniform vec3 ambientLightColor;
#if defined( USE_LIGHT_PROBES )
	uniform vec3 lightProbe[ 9 ];
#endif
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {
	float x = normal.x, y = normal.y, z = normal.z;
	vec3 result = shCoefficients[ 0 ] * 0.886227;
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
	return result;
}
vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {
	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );
	return irradiance;
}
vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {
	vec3 irradiance = ambientLightColor;
	return irradiance;
}
float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {
	float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );
	if ( cutoffDistance > 0.0 ) {
		distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );
	}
	return distanceFalloff;
}
float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {
	return smoothstep( coneCosine, penumbraCosine, angleCosine );
}
#if NUM_DIR_LIGHTS > 0
	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};
	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];
	void getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {
		light.color = directionalLight.color;
		light.direction = directionalLight.direction;
		light.visible = true;
	}
#endif
#if NUM_POINT_LIGHTS > 0
	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};
	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];
	void getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = pointLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float lightDistance = length( lVector );
		light.color = pointLight.color;
		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );
		light.visible = ( light.color != vec3( 0.0 ) );
	}
#endif
#if NUM_SPOT_LIGHTS > 0
	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};
	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];
	void getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = spotLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float angleCos = dot( light.direction, spotLight.direction );
		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );
		if ( spotAttenuation > 0.0 ) {
			float lightDistance = length( lVector );
			light.color = spotLight.color * spotAttenuation;
			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );
			light.visible = ( light.color != vec3( 0.0 ) );
		} else {
			light.color = vec3( 0.0 );
			light.visible = false;
		}
	}
#endif
#if NUM_RECT_AREA_LIGHTS > 0
	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};
	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;
	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];
#endif
#if NUM_HEMI_LIGHTS > 0
	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};
	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];
	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {
		float dotNL = dot( normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;
		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );
		return irradiance;
	}
#endif`,GC=`#ifdef USE_ENVMAP
	vec3 getIBLIrradiance( const in vec3 normal ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );
			return PI * envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 reflectVec = reflect( - viewDir, normal );
			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );
			return envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	#ifdef USE_ANISOTROPY
		vec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {
			#ifdef ENVMAP_TYPE_CUBE_UV
				vec3 bentNormal = cross( bitangent, viewDir );
				bentNormal = normalize( cross( bentNormal, bitangent ) );
				bentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );
				return getIBLRadiance( viewDir, bentNormal, roughness );
			#else
				return vec3( 0.0 );
			#endif
		}
	#endif
#endif`,WC=`ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;`,XC=`varying vec3 vViewPosition;
struct ToonMaterial {
	vec3 diffuseColor;
};
void RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	vec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon`,qC=`BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;`,YC=`varying vec3 vViewPosition;
struct BlinnPhongMaterial {
	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;
};
void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;
}
void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong`,ZC=`PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
vec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );
material.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;
material.roughness = min( material.roughness, 1.0 );
#ifdef IOR
	material.ior = ior;
	#ifdef USE_SPECULAR
		float specularIntensityFactor = specularIntensity;
		vec3 specularColorFactor = specularColor;
		#ifdef USE_SPECULAR_COLORMAP
			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;
		#endif
		#ifdef USE_SPECULAR_INTENSITYMAP
			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;
		#endif
		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );
	#else
		float specularIntensityFactor = 1.0;
		vec3 specularColorFactor = vec3( 1.0 );
		material.specularF90 = 1.0;
	#endif
	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );
#else
	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );
	material.specularF90 = 1.0;
#endif
#ifdef USE_CLEARCOAT
	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	material.clearcoatF0 = vec3( 0.04 );
	material.clearcoatF90 = 1.0;
	#ifdef USE_CLEARCOATMAP
		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;
	#endif
	#ifdef USE_CLEARCOAT_ROUGHNESSMAP
		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;
	#endif
	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
#endif
#ifdef USE_DISPERSION
	material.dispersion = dispersion;
#endif
#ifdef USE_IRIDESCENCE
	material.iridescence = iridescence;
	material.iridescenceIOR = iridescenceIOR;
	#ifdef USE_IRIDESCENCEMAP
		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;
	#endif
	#ifdef USE_IRIDESCENCE_THICKNESSMAP
		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;
	#else
		material.iridescenceThickness = iridescenceThicknessMaximum;
	#endif
#endif
#ifdef USE_SHEEN
	material.sheenColor = sheenColor;
	#ifdef USE_SHEEN_COLORMAP
		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;
	#endif
	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );
	#ifdef USE_SHEEN_ROUGHNESSMAP
		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;
	#endif
#endif
#ifdef USE_ANISOTROPY
	#ifdef USE_ANISOTROPYMAP
		mat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );
		vec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;
		vec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;
	#else
		vec2 anisotropyV = anisotropyVector;
	#endif
	material.anisotropy = length( anisotropyV );
	if( material.anisotropy == 0.0 ) {
		anisotropyV = vec2( 1.0, 0.0 );
	} else {
		anisotropyV /= material.anisotropy;
		material.anisotropy = saturate( material.anisotropy );
	}
	material.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );
	material.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;
	material.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;
#endif`,$C=`struct PhysicalMaterial {
	vec3 diffuseColor;
	float roughness;
	vec3 specularColor;
	float specularF90;
	float dispersion;
	#ifdef USE_CLEARCOAT
		float clearcoat;
		float clearcoatRoughness;
		vec3 clearcoatF0;
		float clearcoatF90;
	#endif
	#ifdef USE_IRIDESCENCE
		float iridescence;
		float iridescenceIOR;
		float iridescenceThickness;
		vec3 iridescenceFresnel;
		vec3 iridescenceF0;
	#endif
	#ifdef USE_SHEEN
		vec3 sheenColor;
		float sheenRoughness;
	#endif
	#ifdef IOR
		float ior;
	#endif
	#ifdef USE_TRANSMISSION
		float transmission;
		float transmissionAlpha;
		float thickness;
		float attenuationDistance;
		vec3 attenuationColor;
	#endif
	#ifdef USE_ANISOTROPY
		float anisotropy;
		float alphaT;
		vec3 anisotropyT;
		vec3 anisotropyB;
	#endif
};
vec3 clearcoatSpecularDirect = vec3( 0.0 );
vec3 clearcoatSpecularIndirect = vec3( 0.0 );
vec3 sheenSpecularDirect = vec3( 0.0 );
vec3 sheenSpecularIndirect = vec3(0.0 );
vec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {
    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );
    float x2 = x * x;
    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );
    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );
}
float V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	return 0.5 / max( gv + gl, EPSILON );
}
float D_GGX( const in float alpha, const in float dotNH ) {
	float a2 = pow2( alpha );
	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;
	return RECIPROCAL_PI * a2 / pow2( denom );
}
#ifdef USE_ANISOTROPY
	float V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {
		float gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );
		float gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );
		float v = 0.5 / ( gv + gl );
		return saturate(v);
	}
	float D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {
		float a2 = alphaT * alphaB;
		highp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );
		highp float v2 = dot( v, v );
		float w2 = a2 / v2;
		return RECIPROCAL_PI * a2 * pow2 ( w2 );
	}
#endif
#ifdef USE_CLEARCOAT
	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {
		vec3 f0 = material.clearcoatF0;
		float f90 = material.clearcoatF90;
		float roughness = material.clearcoatRoughness;
		float alpha = pow2( roughness );
		vec3 halfDir = normalize( lightDir + viewDir );
		float dotNL = saturate( dot( normal, lightDir ) );
		float dotNV = saturate( dot( normal, viewDir ) );
		float dotNH = saturate( dot( normal, halfDir ) );
		float dotVH = saturate( dot( viewDir, halfDir ) );
		vec3 F = F_Schlick( f0, f90, dotVH );
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
		return F * ( V * D );
	}
#endif
vec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {
	vec3 f0 = material.specularColor;
	float f90 = material.specularF90;
	float roughness = material.roughness;
	float alpha = pow2( roughness );
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( f0, f90, dotVH );
	#ifdef USE_IRIDESCENCE
		F = mix( F, material.iridescenceFresnel, material.iridescence );
	#endif
	#ifdef USE_ANISOTROPY
		float dotTL = dot( material.anisotropyT, lightDir );
		float dotTV = dot( material.anisotropyT, viewDir );
		float dotTH = dot( material.anisotropyT, halfDir );
		float dotBL = dot( material.anisotropyB, lightDir );
		float dotBV = dot( material.anisotropyB, viewDir );
		float dotBH = dot( material.anisotropyB, halfDir );
		float V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );
		float D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );
	#else
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
	#endif
	return F * ( V * D );
}
vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	float dotNV = saturate( dot( N, V ) );
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
	uv = uv * LUT_SCALE + LUT_BIAS;
	return uv;
}
float LTC_ClippedSphereFormFactor( const in vec3 f ) {
	float l = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
	float x = dot( v1, v2 );
	float y = abs( x );
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;
	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
	return cross( v1, v2 ) * theta_sintheta;
}
vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );
	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 );
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return vec3( result );
}
#if defined( USE_SHEEN )
float D_Charlie( float roughness, float dotNH ) {
	float alpha = pow2( roughness );
	float invAlpha = 1.0 / alpha;
	float cos2h = dotNH * dotNH;
	float sin2h = max( 1.0 - cos2h, 0.0078125 );
	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
}
float V_Neubelt( float dotNV, float dotNL ) {
	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );
}
vec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float D = D_Charlie( sheenRoughness, dotNH );
	float V = V_Neubelt( dotNV, dotNL );
	return sheenColor * ( D * V );
}
#endif
float IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	float r2 = roughness * roughness;
	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;
	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;
	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );
	return saturate( DG * RECIPROCAL_PI );
}
vec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;
	return fab;
}
vec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	return specularColor * fab.x + specularF90 * fab.y;
}
#ifdef USE_IRIDESCENCE
void computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#else
void computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#endif
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	#ifdef USE_IRIDESCENCE
		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );
	#else
		vec3 Fr = specularColor;
	#endif
	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;
	float Ess = fab.x + fab.y;
	float Ems = 1.0 - Ess;
	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );
	singleScatter += FssEss;
	multiScatter += Fms * Ems;
}
#if NUM_RECT_AREA_LIGHTS > 0
	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
		vec3 normal = geometryNormal;
		vec3 viewDir = geometryViewDir;
		vec3 position = geometryPosition;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.roughness;
		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;
		vec2 uv = LTC_Uv( normal, viewDir, roughness );
		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );
		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(    0, 1,    0 ),
			vec3( t1.z, 0, t1.w )
		);
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );
		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );
		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );
	}
#endif
void RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifdef USE_CLEARCOAT
		float dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );
		vec3 ccIrradiance = dotNLcc * directLight.color;
		clearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );
	#endif
	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {
	#ifdef USE_CLEARCOAT
		clearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );
	#endif
	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;
	#ifdef USE_IRIDESCENCE
		computeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );
	#else
		computeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );
	#endif
	vec3 totalScattering = singleScattering + multiScattering;
	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );
	reflectedLight.indirectSpecular += radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;
	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {
	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
}`,KC=`
vec3 geometryPosition = - vViewPosition;
vec3 geometryNormal = normal;
vec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );
vec3 geometryClearcoatNormal = vec3( 0.0 );
#ifdef USE_CLEARCOAT
	geometryClearcoatNormal = clearcoatNormal;
#endif
#ifdef USE_IRIDESCENCE
	float dotNVi = saturate( dot( normal, geometryViewDir ) );
	if ( material.iridescenceThickness == 0.0 ) {
		material.iridescence = 0.0;
	} else {
		material.iridescence = saturate( material.iridescence );
	}
	if ( material.iridescence > 0.0 ) {
		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );
		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );
	}
#endif
IncidentLight directLight;
#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )
	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		pointLight = pointLights[ i ];
		getPointLightInfo( pointLight, geometryPosition, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowIntensity, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )
	SpotLight spotLight;
	vec4 spotColor;
	vec3 spotLightCoord;
	bool inSpotLightMap;
	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		spotLight = spotLights[ i ];
		getSpotLightInfo( spotLight, geometryPosition, directLight );
		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX
		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS
		#else
		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#endif
		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )
			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;
			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );
			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );
			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;
		#endif
		#undef SPOT_LIGHT_MAP_INDEX
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowIntensity, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )
	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		directionalLight = directionalLights[ i ];
		getDirectionalLightInfo( directionalLight, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowIntensity, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )
	RectAreaLight rectAreaLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {
		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if defined( RE_IndirectDiffuse )
	vec3 iblIrradiance = vec3( 0.0 );
	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );
	#if defined( USE_LIGHT_PROBES )
		irradiance += getLightProbeIrradiance( lightProbe, geometryNormal );
	#endif
	#if ( NUM_HEMI_LIGHTS > 0 )
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );
		}
		#pragma unroll_loop_end
	#endif
#endif
#if defined( RE_IndirectSpecular )
	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );
#endif`,JC=`#if defined( RE_IndirectDiffuse )
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
		irradiance += lightMapIrradiance;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )
		iblIrradiance += getIBLIrradiance( geometryNormal );
	#endif
#endif
#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )
	#ifdef USE_ANISOTROPY
		radiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );
	#else
		radiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );
	#endif
	#ifdef USE_CLEARCOAT
		clearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );
	#endif
#endif`,jC=`#if defined( RE_IndirectDiffuse )
	RE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif
#if defined( RE_IndirectSpecular )
	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif`,QC=`#if defined( USE_LOGDEPTHBUF )
	gl_FragDepth = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;
#endif`,eP=`#if defined( USE_LOGDEPTHBUF )
	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,tP=`#ifdef USE_LOGDEPTHBUF
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,nP=`#ifdef USE_LOGDEPTHBUF
	vFragDepth = 1.0 + gl_Position.w;
	vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );
#endif`,iP=`#ifdef USE_MAP
	vec4 sampledDiffuseColor = texture2D( map, vMapUv );
	#ifdef DECODE_VIDEO_TEXTURE
		sampledDiffuseColor = sRGBTransferEOTF( sampledDiffuseColor );
	#endif
	diffuseColor *= sampledDiffuseColor;
#endif`,rP=`#ifdef USE_MAP
	uniform sampler2D map;
#endif`,sP=`#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	#if defined( USE_POINTS_UV )
		vec2 uv = vUv;
	#else
		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;
	#endif
#endif
#ifdef USE_MAP
	diffuseColor *= texture2D( map, uv );
#endif
#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, uv ).g;
#endif`,aP=`#if defined( USE_POINTS_UV )
	varying vec2 vUv;
#else
	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
		uniform mat3 uvTransform;
	#endif
#endif
#ifdef USE_MAP
	uniform sampler2D map;
#endif
#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,oP=`float metalnessFactor = metalness;
#ifdef USE_METALNESSMAP
	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );
	metalnessFactor *= texelMetalness.b;
#endif`,lP=`#ifdef USE_METALNESSMAP
	uniform sampler2D metalnessMap;
#endif`,cP=`#ifdef USE_INSTANCING_MORPH
	float morphTargetInfluences[ MORPHTARGETS_COUNT ];
	float morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		morphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;
	}
#endif`,hP=`#if defined( USE_MORPHCOLORS )
	vColor *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		#if defined( USE_COLOR_ALPHA )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];
		#elif defined( USE_COLOR )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];
		#endif
	}
#endif`,uP=`#ifdef USE_MORPHNORMALS
	objectNormal *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];
	}
#endif`,fP=`#ifdef USE_MORPHTARGETS
	#ifndef USE_INSTANCING_MORPH
		uniform float morphTargetBaseInfluence;
		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];
	#endif
	uniform sampler2DArray morphTargetsTexture;
	uniform ivec2 morphTargetsTextureSize;
	vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {
		int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;
		int y = texelIndex / morphTargetsTextureSize.x;
		int x = texelIndex - y * morphTargetsTextureSize.x;
		ivec3 morphUV = ivec3( x, y, morphTargetIndex );
		return texelFetch( morphTargetsTexture, morphUV, 0 );
	}
#endif`,dP=`#ifdef USE_MORPHTARGETS
	transformed *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];
	}
#endif`,pP=`float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;
#ifdef FLAT_SHADED
	vec3 fdx = dFdx( vViewPosition );
	vec3 fdy = dFdy( vViewPosition );
	vec3 normal = normalize( cross( fdx, fdy ) );
#else
	vec3 normal = normalize( vNormal );
	#ifdef DOUBLE_SIDED
		normal *= faceDirection;
	#endif
#endif
#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )
	#ifdef USE_TANGENT
		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn = getTangentFrame( - vViewPosition, normal,
		#if defined( USE_NORMALMAP )
			vNormalMapUv
		#elif defined( USE_CLEARCOAT_NORMALMAP )
			vClearcoatNormalMapUv
		#else
			vUv
		#endif
		);
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn[0] *= faceDirection;
		tbn[1] *= faceDirection;
	#endif
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	#ifdef USE_TANGENT
		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn2[0] *= faceDirection;
		tbn2[1] *= faceDirection;
	#endif
#endif
vec3 nonPerturbedNormal = normal;`,mP=`#ifdef USE_NORMALMAP_OBJECTSPACE
	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	#ifdef FLIP_SIDED
		normal = - normal;
	#endif
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	normal = normalize( normalMatrix * normal );
#elif defined( USE_NORMALMAP_TANGENTSPACE )
	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;
	normal = normalize( tbn * mapN );
#elif defined( USE_BUMPMAP )
	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );
#endif`,_P=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,gP=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,xP=`#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif`,vP=`#ifdef USE_NORMALMAP
	uniform sampler2D normalMap;
	uniform vec2 normalScale;
#endif
#ifdef USE_NORMALMAP_OBJECTSPACE
	uniform mat3 normalMatrix;
#endif
#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )
	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {
		vec3 q0 = dFdx( eye_pos.xyz );
		vec3 q1 = dFdy( eye_pos.xyz );
		vec2 st0 = dFdx( uv.st );
		vec2 st1 = dFdy( uv.st );
		vec3 N = surf_norm;
		vec3 q1perp = cross( q1, N );
		vec3 q0perp = cross( N, q0 );
		vec3 T = q1perp * st0.x + q0perp * st1.x;
		vec3 B = q1perp * st0.y + q0perp * st1.y;
		float det = max( dot( T, T ), dot( B, B ) );
		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );
		return mat3( T * scale, B * scale, N );
	}
#endif`,yP=`#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal = nonPerturbedNormal;
#endif`,MP=`#ifdef USE_CLEARCOAT_NORMALMAP
	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;
	clearcoatNormal = normalize( tbn2 * clearcoatMapN );
#endif`,SP=`#ifdef USE_CLEARCOATMAP
	uniform sampler2D clearcoatMap;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform sampler2D clearcoatRoughnessMap;
#endif`,bP=`#ifdef USE_IRIDESCENCEMAP
	uniform sampler2D iridescenceMap;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform sampler2D iridescenceThicknessMap;
#endif`,EP=`#ifdef OPAQUE
diffuseColor.a = 1.0;
#endif
#ifdef USE_TRANSMISSION
diffuseColor.a *= material.transmissionAlpha;
#endif
gl_FragColor = vec4( outgoingLight, diffuseColor.a );`,wP=`vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}
vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}
const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;const float ShiftRight8 = 1. / 256.;
const float Inv255 = 1. / 255.;
const vec4 PackFactors = vec4( 1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0 );
const vec2 UnpackFactors2 = vec2( UnpackDownscale, 1.0 / PackFactors.g );
const vec3 UnpackFactors3 = vec3( UnpackDownscale / PackFactors.rg, 1.0 / PackFactors.b );
const vec4 UnpackFactors4 = vec4( UnpackDownscale / PackFactors.rgb, 1.0 / PackFactors.a );
vec4 packDepthToRGBA( const in float v ) {
	if( v <= 0.0 )
		return vec4( 0., 0., 0., 0. );
	if( v >= 1.0 )
		return vec4( 1., 1., 1., 1. );
	float vuf;
	float af = modf( v * PackFactors.a, vuf );
	float bf = modf( vuf * ShiftRight8, vuf );
	float gf = modf( vuf * ShiftRight8, vuf );
	return vec4( vuf * Inv255, gf * PackUpscale, bf * PackUpscale, af );
}
vec3 packDepthToRGB( const in float v ) {
	if( v <= 0.0 )
		return vec3( 0., 0., 0. );
	if( v >= 1.0 )
		return vec3( 1., 1., 1. );
	float vuf;
	float bf = modf( v * PackFactors.b, vuf );
	float gf = modf( vuf * ShiftRight8, vuf );
	return vec3( vuf * Inv255, gf * PackUpscale, bf );
}
vec2 packDepthToRG( const in float v ) {
	if( v <= 0.0 )
		return vec2( 0., 0. );
	if( v >= 1.0 )
		return vec2( 1., 1. );
	float vuf;
	float gf = modf( v * 256., vuf );
	return vec2( vuf * Inv255, gf );
}
float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors4 );
}
float unpackRGBToDepth( const in vec3 v ) {
	return dot( v, UnpackFactors3 );
}
float unpackRGToDepth( const in vec2 v ) {
	return v.r * UnpackFactors2.r + v.g * UnpackFactors2.g;
}
vec4 pack2HalfToRGBA( const in vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );
}
vec2 unpackRGBATo2Half( const in vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}
float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	return ( viewZ + near ) / ( near - far );
}
float orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return depth * ( near - far ) - near;
}
float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );
}
float perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return ( near * far ) / ( ( far - near ) * depth - far );
}`,TP=`#ifdef PREMULTIPLIED_ALPHA
	gl_FragColor.rgb *= gl_FragColor.a;
#endif`,AP=`vec4 mvPosition = vec4( transformed, 1.0 );
#ifdef USE_BATCHING
	mvPosition = batchingMatrix * mvPosition;
#endif
#ifdef USE_INSTANCING
	mvPosition = instanceMatrix * mvPosition;
#endif
mvPosition = modelViewMatrix * mvPosition;
gl_Position = projectionMatrix * mvPosition;`,RP=`#ifdef DITHERING
	gl_FragColor.rgb = dithering( gl_FragColor.rgb );
#endif`,CP=`#ifdef DITHERING
	vec3 dithering( vec3 color ) {
		float grid_position = rand( gl_FragCoord.xy );
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
		return color + dither_shift_RGB;
	}
#endif`,PP=`float roughnessFactor = roughness;
#ifdef USE_ROUGHNESSMAP
	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );
	roughnessFactor *= texelRoughness.g;
#endif`,IP=`#ifdef USE_ROUGHNESSMAP
	uniform sampler2D roughnessMap;
#endif`,DP=`#if NUM_SPOT_LIGHT_COORDS > 0
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#if NUM_SPOT_LIGHT_MAPS > 0
	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {
		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );
	}
	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {
		return unpackRGBATo2Half( texture2D( shadow, uv ) );
	}
	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){
		float occlusion = 1.0;
		vec2 distribution = texture2DDistribution( shadow, uv );
		float hard_shadow = step( compare , distribution.x );
		if (hard_shadow != 1.0 ) {
			float distance = compare - distribution.x ;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );
		}
		return occlusion;
	}
	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord ) {
		float shadow = 1.0;
		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;
		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;
		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;
		if ( frustumTest ) {
		#if defined( SHADOWMAP_TYPE_PCF )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;
			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );
		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;
			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;
			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );
		#elif defined( SHADOWMAP_TYPE_VSM )
			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );
		#else
			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );
		#endif
		}
		return mix( 1.0, shadow, shadowIntensity );
	}
	vec2 cubeToUV( vec3 v, float texelSizeY ) {
		vec3 absV = abs( v );
		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );
		vec2 planar = v.xy;
		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;
		if ( absV.z >= almostOne ) {
			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;
		} else if ( absV.x >= almostOne ) {
			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;
		} else if ( absV.y >= almostOne ) {
			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;
		}
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );
	}
	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {
		float shadow = 1.0;
		vec3 lightToPosition = shadowCoord.xyz;
		
		float lightToPositionLength = length( lightToPosition );
		if ( lightToPositionLength - shadowCameraFar <= 0.0 && lightToPositionLength - shadowCameraNear >= 0.0 ) {
			float dp = ( lightToPositionLength - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );			dp += shadowBias;
			vec3 bd3D = normalize( lightToPosition );
			vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );
			#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )
				vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;
				shadow = (
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
				) * ( 1.0 / 9.0 );
			#else
				shadow = texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );
			#endif
		}
		return mix( 1.0, shadow, shadowIntensity );
	}
#endif`,LP=`#if NUM_SPOT_LIGHT_COORDS > 0
	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
#endif`,UP=`#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )
	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
	vec4 shadowWorldPosition;
#endif
#if defined( USE_SHADOWMAP )
	#if NUM_DIR_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
#endif
#if NUM_SPOT_LIGHT_COORDS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {
		shadowWorldPosition = worldPosition;
		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;
		#endif
		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
#endif`,NP=`float getShadowMask() {
	float shadow = 1.0;
	#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowIntensity, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowIntensity, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowIntensity, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#endif
	return shadow;
}`,FP=`#ifdef USE_SKINNING
	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );
#endif`,OP=`#ifdef USE_SKINNING
	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;
	uniform highp sampler2D boneTexture;
	mat4 getBoneMatrix( const in float i ) {
		int size = textureSize( boneTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
#endif`,BP=`#ifdef USE_SKINNING
	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;
	transformed = ( bindMatrixInverse * skinned ).xyz;
#endif`,zP=`#ifdef USE_SKINNING
	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;
	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;
	#ifdef USE_TANGENT
		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#endif
#endif`,kP=`float specularStrength;
#ifdef USE_SPECULARMAP
	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );
	specularStrength = texelSpecular.r;
#else
	specularStrength = 1.0;
#endif`,VP=`#ifdef USE_SPECULARMAP
	uniform sampler2D specularMap;
#endif`,HP=`#if defined( TONE_MAPPING )
	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );
#endif`,GP=`#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
uniform float toneMappingExposure;
vec3 LinearToneMapping( vec3 color ) {
	return saturate( toneMappingExposure * color );
}
vec3 ReinhardToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );
}
vec3 CineonToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );
}
vec3 RRTAndODTFit( vec3 v ) {
	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;
}
vec3 ACESFilmicToneMapping( vec3 color ) {
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);
	const mat3 ACESOutputMat = mat3(
		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,  1.07602 )
	);
	color *= toneMappingExposure / 0.6;
	color = ACESInputMat * color;
	color = RRTAndODTFit( color );
	color = ACESOutputMat * color;
	return saturate( color );
}
const mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(
	vec3( 1.6605, - 0.1246, - 0.0182 ),
	vec3( - 0.5876, 1.1329, - 0.1006 ),
	vec3( - 0.0728, - 0.0083, 1.1187 )
);
const mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(
	vec3( 0.6274, 0.0691, 0.0164 ),
	vec3( 0.3293, 0.9195, 0.0880 ),
	vec3( 0.0433, 0.0113, 0.8956 )
);
vec3 agxDefaultContrastApprox( vec3 x ) {
	vec3 x2 = x * x;
	vec3 x4 = x2 * x2;
	return + 15.5 * x4 * x2
		- 40.14 * x4 * x
		+ 31.96 * x4
		- 6.868 * x2 * x
		+ 0.4298 * x2
		+ 0.1191 * x
		- 0.00232;
}
vec3 AgXToneMapping( vec3 color ) {
	const mat3 AgXInsetMatrix = mat3(
		vec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),
		vec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),
		vec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )
	);
	const mat3 AgXOutsetMatrix = mat3(
		vec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),
		vec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),
		vec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )
	);
	const float AgxMinEv = - 12.47393;	const float AgxMaxEv = 4.026069;
	color *= toneMappingExposure;
	color = LINEAR_SRGB_TO_LINEAR_REC2020 * color;
	color = AgXInsetMatrix * color;
	color = max( color, 1e-10 );	color = log2( color );
	color = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );
	color = clamp( color, 0.0, 1.0 );
	color = agxDefaultContrastApprox( color );
	color = AgXOutsetMatrix * color;
	color = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );
	color = LINEAR_REC2020_TO_LINEAR_SRGB * color;
	color = clamp( color, 0.0, 1.0 );
	return color;
}
vec3 NeutralToneMapping( vec3 color ) {
	const float StartCompression = 0.8 - 0.04;
	const float Desaturation = 0.15;
	color *= toneMappingExposure;
	float x = min( color.r, min( color.g, color.b ) );
	float offset = x < 0.08 ? x - 6.25 * x * x : 0.04;
	color -= offset;
	float peak = max( color.r, max( color.g, color.b ) );
	if ( peak < StartCompression ) return color;
	float d = 1. - StartCompression;
	float newPeak = 1. - d * d / ( peak + d - StartCompression );
	color *= newPeak / peak;
	float g = 1. - 1. / ( Desaturation * ( peak - newPeak ) + 1. );
	return mix( color, vec3( newPeak ), g );
}
vec3 CustomToneMapping( vec3 color ) { return color; }`,WP=`#ifdef USE_TRANSMISSION
	material.transmission = transmission;
	material.transmissionAlpha = 1.0;
	material.thickness = thickness;
	material.attenuationDistance = attenuationDistance;
	material.attenuationColor = attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;
	#endif
	#ifdef USE_THICKNESSMAP
		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;
	#endif
	vec3 pos = vWorldPosition;
	vec3 v = normalize( cameraPosition - pos );
	vec3 n = inverseTransformDirection( normal, viewMatrix );
	vec4 transmitted = getIBLVolumeRefraction(
		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,
		pos, modelMatrix, viewMatrix, projectionMatrix, material.dispersion, material.ior, material.thickness,
		material.attenuationColor, material.attenuationDistance );
	material.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );
	totalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );
#endif`,XP=`#ifdef USE_TRANSMISSION
	uniform float transmission;
	uniform float thickness;
	uniform float attenuationDistance;
	uniform vec3 attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		uniform sampler2D transmissionMap;
	#endif
	#ifdef USE_THICKNESSMAP
		uniform sampler2D thicknessMap;
	#endif
	uniform vec2 transmissionSamplerSize;
	uniform sampler2D transmissionSamplerMap;
	uniform mat4 modelMatrix;
	uniform mat4 projectionMatrix;
	varying vec3 vWorldPosition;
	float w0( float a ) {
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );
	}
	float w1( float a ) {
		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );
	}
	float w2( float a ){
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );
	}
	float w3( float a ) {
		return ( 1.0 / 6.0 ) * ( a * a * a );
	}
	float g0( float a ) {
		return w0( a ) + w1( a );
	}
	float g1( float a ) {
		return w2( a ) + w3( a );
	}
	float h0( float a ) {
		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );
	}
	float h1( float a ) {
		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );
	}
	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {
		uv = uv * texelSize.zw + 0.5;
		vec2 iuv = floor( uv );
		vec2 fuv = fract( uv );
		float g0x = g0( fuv.x );
		float g1x = g1( fuv.x );
		float h0x = h0( fuv.x );
		float h1x = h1( fuv.x );
		float h0y = h0( fuv.y );
		float h1y = h1( fuv.y );
		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +
			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );
	}
	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {
		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );
		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );
		vec2 fLodSizeInv = 1.0 / fLodSize;
		vec2 cLodSizeInv = 1.0 / cLodSize;
		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );
		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );
		return mix( fSample, cSample, fract( lod ) );
	}
	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {
		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );
		vec3 modelScale;
		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );
		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );
		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );
		return normalize( refractionVector ) * thickness * modelScale;
	}
	float applyIorToRoughness( const in float roughness, const in float ior ) {
		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );
	}
	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {
		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );
	}
	vec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {
		if ( isinf( attenuationDistance ) ) {
			return vec3( 1.0 );
		} else {
			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;
			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance;
		}
	}
	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,
		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,
		const in mat4 viewMatrix, const in mat4 projMatrix, const in float dispersion, const in float ior, const in float thickness,
		const in vec3 attenuationColor, const in float attenuationDistance ) {
		vec4 transmittedLight;
		vec3 transmittance;
		#ifdef USE_DISPERSION
			float halfSpread = ( ior - 1.0 ) * 0.025 * dispersion;
			vec3 iors = vec3( ior - halfSpread, ior, ior + halfSpread );
			for ( int i = 0; i < 3; i ++ ) {
				vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, iors[ i ], modelMatrix );
				vec3 refractedRayExit = position + transmissionRay;
				vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
				vec2 refractionCoords = ndcPos.xy / ndcPos.w;
				refractionCoords += 1.0;
				refractionCoords /= 2.0;
				vec4 transmissionSample = getTransmissionSample( refractionCoords, roughness, iors[ i ] );
				transmittedLight[ i ] = transmissionSample[ i ];
				transmittedLight.a += transmissionSample.a;
				transmittance[ i ] = diffuseColor[ i ] * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance )[ i ];
			}
			transmittedLight.a /= 3.0;
		#else
			vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
			vec3 refractedRayExit = position + transmissionRay;
			vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
			vec2 refractionCoords = ndcPos.xy / ndcPos.w;
			refractionCoords += 1.0;
			refractionCoords /= 2.0;
			transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );
			transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );
		#endif
		vec3 attenuatedColor = transmittance * transmittedLight.rgb;
		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );
		float transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;
		return vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );
	}
#endif`,qP=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_SPECULARMAP
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`,YP=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	uniform mat3 mapTransform;
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	uniform mat3 alphaMapTransform;
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	uniform mat3 lightMapTransform;
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	uniform mat3 aoMapTransform;
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	uniform mat3 bumpMapTransform;
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	uniform mat3 normalMapTransform;
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_DISPLACEMENTMAP
	uniform mat3 displacementMapTransform;
	varying vec2 vDisplacementMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	uniform mat3 emissiveMapTransform;
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	uniform mat3 metalnessMapTransform;
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	uniform mat3 roughnessMapTransform;
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	uniform mat3 anisotropyMapTransform;
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	uniform mat3 clearcoatMapTransform;
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform mat3 clearcoatNormalMapTransform;
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform mat3 clearcoatRoughnessMapTransform;
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	uniform mat3 sheenColorMapTransform;
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	uniform mat3 sheenRoughnessMapTransform;
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	uniform mat3 iridescenceMapTransform;
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform mat3 iridescenceThicknessMapTransform;
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SPECULARMAP
	uniform mat3 specularMapTransform;
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	uniform mat3 specularColorMapTransform;
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	uniform mat3 specularIntensityMapTransform;
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`,ZP=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	vUv = vec3( uv, 1 ).xy;
#endif
#ifdef USE_MAP
	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ALPHAMAP
	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_LIGHTMAP
	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_AOMAP
	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_BUMPMAP
	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_NORMALMAP
	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_DISPLACEMENTMAP
	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_EMISSIVEMAP
	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_METALNESSMAP
	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ROUGHNESSMAP
	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ANISOTROPYMAP
	vAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOATMAP
	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCEMAP
	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_COLORMAP
	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULARMAP
	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_COLORMAP
	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_TRANSMISSIONMAP
	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_THICKNESSMAP
	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;
#endif`,$P=`#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0
	vec4 worldPosition = vec4( transformed, 1.0 );
	#ifdef USE_BATCHING
		worldPosition = batchingMatrix * worldPosition;
	#endif
	#ifdef USE_INSTANCING
		worldPosition = instanceMatrix * worldPosition;
	#endif
	worldPosition = modelMatrix * worldPosition;
#endif`;const Cn={alphahash_fragment:JR,alphahash_pars_fragment:jR,alphamap_fragment:QR,alphamap_pars_fragment:eC,alphatest_fragment:tC,alphatest_pars_fragment:nC,aomap_fragment:iC,aomap_pars_fragment:rC,batching_pars_vertex:sC,batching_vertex:aC,begin_vertex:oC,beginnormal_vertex:lC,bsdfs:cC,iridescence_fragment:hC,bumpmap_pars_fragment:uC,clipping_planes_fragment:fC,clipping_planes_pars_fragment:dC,clipping_planes_pars_vertex:pC,clipping_planes_vertex:mC,color_fragment:_C,color_pars_fragment:gC,color_pars_vertex:xC,color_vertex:vC,common:yC,cube_uv_reflection_fragment:MC,defaultnormal_vertex:SC,displacementmap_pars_vertex:bC,displacementmap_vertex:EC,emissivemap_fragment:wC,emissivemap_pars_fragment:TC,colorspace_fragment:AC,colorspace_pars_fragment:RC,envmap_fragment:CC,envmap_common_pars_fragment:PC,envmap_pars_fragment:IC,envmap_pars_vertex:DC,envmap_physical_pars_fragment:GC,envmap_vertex:LC,fog_vertex:UC,fog_pars_vertex:NC,fog_fragment:FC,fog_pars_fragment:OC,gradientmap_pars_fragment:BC,lightmap_pars_fragment:zC,lights_lambert_fragment:kC,lights_lambert_pars_fragment:VC,lights_pars_begin:HC,lights_toon_fragment:WC,lights_toon_pars_fragment:XC,lights_phong_fragment:qC,lights_phong_pars_fragment:YC,lights_physical_fragment:ZC,lights_physical_pars_fragment:$C,lights_fragment_begin:KC,lights_fragment_maps:JC,lights_fragment_end:jC,logdepthbuf_fragment:QC,logdepthbuf_pars_fragment:eP,logdepthbuf_pars_vertex:tP,logdepthbuf_vertex:nP,map_fragment:iP,map_pars_fragment:rP,map_particle_fragment:sP,map_particle_pars_fragment:aP,metalnessmap_fragment:oP,metalnessmap_pars_fragment:lP,morphinstance_vertex:cP,morphcolor_vertex:hP,morphnormal_vertex:uP,morphtarget_pars_vertex:fP,morphtarget_vertex:dP,normal_fragment_begin:pP,normal_fragment_maps:mP,normal_pars_fragment:_P,normal_pars_vertex:gP,normal_vertex:xP,normalmap_pars_fragment:vP,clearcoat_normal_fragment_begin:yP,clearcoat_normal_fragment_maps:MP,clearcoat_pars_fragment:SP,iridescence_pars_fragment:bP,opaque_fragment:EP,packing:wP,premultiplied_alpha_fragment:TP,project_vertex:AP,dithering_fragment:RP,dithering_pars_fragment:CP,roughnessmap_fragment:PP,roughnessmap_pars_fragment:IP,shadowmap_pars_fragment:DP,shadowmap_pars_vertex:LP,shadowmap_vertex:UP,shadowmask_pars_fragment:NP,skinbase_vertex:FP,skinning_pars_vertex:OP,skinning_vertex:BP,skinnormal_vertex:zP,specularmap_fragment:kP,specularmap_pars_fragment:VP,tonemapping_fragment:HP,tonemapping_pars_fragment:GP,transmission_fragment:WP,transmission_pars_fragment:XP,uv_pars_fragment:qP,uv_pars_vertex:YP,uv_vertex:ZP,worldpos_vertex:$P,background_vert:`varying vec2 vUv;
uniform mat3 uvTransform;
void main() {
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	gl_Position = vec4( position.xy, 1.0, 1.0 );
}`,background_frag:`uniform sampler2D t2D;
uniform float backgroundIntensity;
varying vec2 vUv;
void main() {
	vec4 texColor = texture2D( t2D, vUv );
	#ifdef DECODE_VIDEO_TEXTURE
		texColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,backgroundCube_vert:`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,backgroundCube_frag:`#ifdef ENVMAP_TYPE_CUBE
	uniform samplerCube envMap;
#elif defined( ENVMAP_TYPE_CUBE_UV )
	uniform sampler2D envMap;
#endif
uniform float flipEnvMap;
uniform float backgroundBlurriness;
uniform float backgroundIntensity;
uniform mat3 backgroundRotation;
varying vec3 vWorldDirection;
#include <cube_uv_reflection_fragment>
void main() {
	#ifdef ENVMAP_TYPE_CUBE
		vec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );
	#elif defined( ENVMAP_TYPE_CUBE_UV )
		vec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );
	#else
		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,cube_vert:`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,cube_frag:`uniform samplerCube tCube;
uniform float tFlip;
uniform float opacity;
varying vec3 vWorldDirection;
void main() {
	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );
	gl_FragColor = texColor;
	gl_FragColor.a *= opacity;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,depth_vert:`#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
varying vec2 vHighPrecisionZW;
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vHighPrecisionZW = gl_Position.zw;
}`,depth_frag:`#if DEPTH_PACKING == 3200
	uniform float opacity;
#endif
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
varying vec2 vHighPrecisionZW;
void main() {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#if DEPTH_PACKING == 3200
		diffuseColor.a = opacity;
	#endif
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <logdepthbuf_fragment>
	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;
	#if DEPTH_PACKING == 3200
		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );
	#elif DEPTH_PACKING == 3201
		gl_FragColor = packDepthToRGBA( fragCoordZ );
	#elif DEPTH_PACKING == 3202
		gl_FragColor = vec4( packDepthToRGB( fragCoordZ ), 1.0 );
	#elif DEPTH_PACKING == 3203
		gl_FragColor = vec4( packDepthToRG( fragCoordZ ), 0.0, 1.0 );
	#endif
}`,distanceRGBA_vert:`#define DISTANCE
varying vec3 vWorldPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	vWorldPosition = worldPosition.xyz;
}`,distanceRGBA_frag:`#define DISTANCE
uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <clipping_planes_pars_fragment>
void main () {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist );
	gl_FragColor = packDepthToRGBA( dist );
}`,equirect_vert:`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
}`,equirect_frag:`uniform sampler2D tEquirect;
varying vec3 vWorldDirection;
#include <common>
void main() {
	vec3 direction = normalize( vWorldDirection );
	vec2 sampleUV = equirectUv( direction );
	gl_FragColor = texture2D( tEquirect, sampleUV );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,linedashed_vert:`uniform float scale;
attribute float lineDistance;
varying float vLineDistance;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	vLineDistance = scale * lineDistance;
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,linedashed_frag:`uniform vec3 diffuse;
uniform float opacity;
uniform float dashSize;
uniform float totalSize;
varying float vLineDistance;
#include <common>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	if ( mod( vLineDistance, totalSize ) > dashSize ) {
		discard;
	}
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,meshbasic_vert:`#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinbase_vertex>
		#include <skinnormal_vertex>
		#include <defaultnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>
}`,meshbasic_frag:`uniform vec3 diffuse;
uniform float opacity;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;
	#else
		reflectedLight.indirectDiffuse += vec3( 1.0 );
	#endif
	#include <aomap_fragment>
	reflectedLight.indirectDiffuse *= diffuseColor.rgb;
	vec3 outgoingLight = reflectedLight.indirectDiffuse;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,meshlambert_vert:`#define LAMBERT
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,meshlambert_frag:`#define LAMBERT
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_lambert_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_lambert_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,meshmatcap_vert:`#define MATCAP
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
	vViewPosition = - mvPosition.xyz;
}`,meshmatcap_frag:`#define MATCAP
uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;
varying vec3 vViewPosition;
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;
	#ifdef USE_MATCAP
		vec4 matcapColor = texture2D( matcap, uv );
	#else
		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );
	#endif
	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,meshnormal_vert:`#define NORMAL
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	vViewPosition = - mvPosition.xyz;
#endif
}`,meshnormal_frag:`#define NORMAL
uniform float opacity;
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <packing>
#include <uv_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	gl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );
	#ifdef OPAQUE
		gl_FragColor.a = 1.0;
	#endif
}`,meshphong_vert:`#define PHONG
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,meshphong_frag:`#define PHONG
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,meshphysical_vert:`#define STANDARD
varying vec3 vViewPosition;
#ifdef USE_TRANSMISSION
	varying vec3 vWorldPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
#ifdef USE_TRANSMISSION
	vWorldPosition = worldPosition.xyz;
#endif
}`,meshphysical_frag:`#define STANDARD
#ifdef PHYSICAL
	#define IOR
	#define USE_SPECULAR
#endif
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;
#ifdef IOR
	uniform float ior;
#endif
#ifdef USE_SPECULAR
	uniform float specularIntensity;
	uniform vec3 specularColor;
	#ifdef USE_SPECULAR_COLORMAP
		uniform sampler2D specularColorMap;
	#endif
	#ifdef USE_SPECULAR_INTENSITYMAP
		uniform sampler2D specularIntensityMap;
	#endif
#endif
#ifdef USE_CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif
#ifdef USE_DISPERSION
	uniform float dispersion;
#endif
#ifdef USE_IRIDESCENCE
	uniform float iridescence;
	uniform float iridescenceIOR;
	uniform float iridescenceThicknessMinimum;
	uniform float iridescenceThicknessMaximum;
#endif
#ifdef USE_SHEEN
	uniform vec3 sheenColor;
	uniform float sheenRoughness;
	#ifdef USE_SHEEN_COLORMAP
		uniform sampler2D sheenColorMap;
	#endif
	#ifdef USE_SHEEN_ROUGHNESSMAP
		uniform sampler2D sheenRoughnessMap;
	#endif
#endif
#ifdef USE_ANISOTROPY
	uniform vec2 anisotropyVector;
	#ifdef USE_ANISOTROPYMAP
		uniform sampler2D anisotropyMap;
	#endif
#endif
varying vec3 vViewPosition;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <iridescence_fragment>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_physical_pars_fragment>
#include <transmission_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <iridescence_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;
	#include <transmission_fragment>
	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;
	#ifdef USE_SHEEN
		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );
		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;
	#endif
	#ifdef USE_CLEARCOAT
		float dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );
		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );
		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;
	#endif
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,meshtoon_vert:`#define TOON
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,meshtoon_frag:`#define TOON
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,points_vert:`uniform float size;
uniform float scale;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
#ifdef USE_POINTS_UV
	varying vec2 vUv;
	uniform mat3 uvTransform;
#endif
void main() {
	#ifdef USE_POINTS_UV
		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	#endif
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	gl_PointSize = size;
	#ifdef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );
	#endif
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>
}`,points_frag:`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,shadow_vert:`#include <common>
#include <batching_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <shadowmap_pars_vertex>
void main() {
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,shadow_frag:`uniform vec3 color;
uniform float opacity;
#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <logdepthbuf_pars_fragment>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
void main() {
	#include <logdepthbuf_fragment>
	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`,sprite_vert:`uniform float rotation;
uniform vec2 center;
#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	vec4 mvPosition = modelViewMatrix[ 3 ];
	vec2 scale = vec2( length( modelMatrix[ 0 ].xyz ), length( modelMatrix[ 1 ].xyz ) );
	#ifndef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) scale *= - mvPosition.z;
	#endif
	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;
	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
	mvPosition.xy += rotatedPosition;
	gl_Position = projectionMatrix * mvPosition;
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,sprite_frag:`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`},vt={common:{diffuse:{value:new It(16777215)},opacity:{value:1},map:{value:null},mapTransform:{value:new wn},alphaMap:{value:null},alphaMapTransform:{value:new wn},alphaTest:{value:0}},specularmap:{specularMap:{value:null},specularMapTransform:{value:new wn}},envmap:{envMap:{value:null},envMapRotation:{value:new wn},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1},aoMapTransform:{value:new wn}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1},lightMapTransform:{value:new wn}},bumpmap:{bumpMap:{value:null},bumpMapTransform:{value:new wn},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalMapTransform:{value:new wn},normalScale:{value:new Ze(1,1)}},displacementmap:{displacementMap:{value:null},displacementMapTransform:{value:new wn},displacementScale:{value:1},displacementBias:{value:0}},emissivemap:{emissiveMap:{value:null},emissiveMapTransform:{value:new wn}},metalnessmap:{metalnessMap:{value:null},metalnessMapTransform:{value:new wn}},roughnessmap:{roughnessMap:{value:null},roughnessMapTransform:{value:new wn}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new It(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotLightMap:{value:[]},spotShadowMap:{value:[]},spotLightMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new It(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaMapTransform:{value:new wn},alphaTest:{value:0},uvTransform:{value:new wn}},sprite:{diffuse:{value:new It(16777215)},opacity:{value:1},center:{value:new Ze(.5,.5)},rotation:{value:0},map:{value:null},mapTransform:{value:new wn},alphaMap:{value:null},alphaMapTransform:{value:new wn},alphaTest:{value:0}}},Vs={basic:{uniforms:Ir([vt.common,vt.specularmap,vt.envmap,vt.aomap,vt.lightmap,vt.fog]),vertexShader:Cn.meshbasic_vert,fragmentShader:Cn.meshbasic_frag},lambert:{uniforms:Ir([vt.common,vt.specularmap,vt.envmap,vt.aomap,vt.lightmap,vt.emissivemap,vt.bumpmap,vt.normalmap,vt.displacementmap,vt.fog,vt.lights,{emissive:{value:new It(0)}}]),vertexShader:Cn.meshlambert_vert,fragmentShader:Cn.meshlambert_frag},phong:{uniforms:Ir([vt.common,vt.specularmap,vt.envmap,vt.aomap,vt.lightmap,vt.emissivemap,vt.bumpmap,vt.normalmap,vt.displacementmap,vt.fog,vt.lights,{emissive:{value:new It(0)},specular:{value:new It(1118481)},shininess:{value:30}}]),vertexShader:Cn.meshphong_vert,fragmentShader:Cn.meshphong_frag},standard:{uniforms:Ir([vt.common,vt.envmap,vt.aomap,vt.lightmap,vt.emissivemap,vt.bumpmap,vt.normalmap,vt.displacementmap,vt.roughnessmap,vt.metalnessmap,vt.fog,vt.lights,{emissive:{value:new It(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:Cn.meshphysical_vert,fragmentShader:Cn.meshphysical_frag},toon:{uniforms:Ir([vt.common,vt.aomap,vt.lightmap,vt.emissivemap,vt.bumpmap,vt.normalmap,vt.displacementmap,vt.gradientmap,vt.fog,vt.lights,{emissive:{value:new It(0)}}]),vertexShader:Cn.meshtoon_vert,fragmentShader:Cn.meshtoon_frag},matcap:{uniforms:Ir([vt.common,vt.bumpmap,vt.normalmap,vt.displacementmap,vt.fog,{matcap:{value:null}}]),vertexShader:Cn.meshmatcap_vert,fragmentShader:Cn.meshmatcap_frag},points:{uniforms:Ir([vt.points,vt.fog]),vertexShader:Cn.points_vert,fragmentShader:Cn.points_frag},dashed:{uniforms:Ir([vt.common,vt.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:Cn.linedashed_vert,fragmentShader:Cn.linedashed_frag},depth:{uniforms:Ir([vt.common,vt.displacementmap]),vertexShader:Cn.depth_vert,fragmentShader:Cn.depth_frag},normal:{uniforms:Ir([vt.common,vt.bumpmap,vt.normalmap,vt.displacementmap,{opacity:{value:1}}]),vertexShader:Cn.meshnormal_vert,fragmentShader:Cn.meshnormal_frag},sprite:{uniforms:Ir([vt.sprite,vt.fog]),vertexShader:Cn.sprite_vert,fragmentShader:Cn.sprite_frag},background:{uniforms:{uvTransform:{value:new wn},t2D:{value:null},backgroundIntensity:{value:1}},vertexShader:Cn.background_vert,fragmentShader:Cn.background_frag},backgroundCube:{uniforms:{envMap:{value:null},flipEnvMap:{value:-1},backgroundBlurriness:{value:0},backgroundIntensity:{value:1},backgroundRotation:{value:new wn}},vertexShader:Cn.backgroundCube_vert,fragmentShader:Cn.backgroundCube_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:Cn.cube_vert,fragmentShader:Cn.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:Cn.equirect_vert,fragmentShader:Cn.equirect_frag},distanceRGBA:{uniforms:Ir([vt.common,vt.displacementmap,{referencePosition:{value:new re},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:Cn.distanceRGBA_vert,fragmentShader:Cn.distanceRGBA_frag},shadow:{uniforms:Ir([vt.lights,vt.fog,{color:{value:new It(0)},opacity:{value:1}}]),vertexShader:Cn.shadow_vert,fragmentShader:Cn.shadow_frag}};Vs.physical={uniforms:Ir([Vs.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatMapTransform:{value:new wn},clearcoatNormalMap:{value:null},clearcoatNormalMapTransform:{value:new wn},clearcoatNormalScale:{value:new Ze(1,1)},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatRoughnessMapTransform:{value:new wn},dispersion:{value:0},iridescence:{value:0},iridescenceMap:{value:null},iridescenceMapTransform:{value:new wn},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},iridescenceThicknessMapTransform:{value:new wn},sheen:{value:0},sheenColor:{value:new It(0)},sheenColorMap:{value:null},sheenColorMapTransform:{value:new wn},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},sheenRoughnessMapTransform:{value:new wn},transmission:{value:0},transmissionMap:{value:null},transmissionMapTransform:{value:new wn},transmissionSamplerSize:{value:new Ze},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},thicknessMapTransform:{value:new wn},attenuationDistance:{value:0},attenuationColor:{value:new It(0)},specularColor:{value:new It(1,1,1)},specularColorMap:{value:null},specularColorMapTransform:{value:new wn},specularIntensity:{value:1},specularIntensityMap:{value:null},specularIntensityMapTransform:{value:new wn},anisotropyVector:{value:new Ze},anisotropyMap:{value:null},anisotropyMapTransform:{value:new wn}}]),vertexShader:Cn.meshphysical_vert,fragmentShader:Cn.meshphysical_frag};const Bd={r:0,b:0,g:0},hl=new is,KP=new fn;function JP(u,e,i,s,l,h,f){const m=new It(0);let g=h===!0?0:1,y,S,w=null,T=0,R=null;function I(G){let H=G.isScene===!0?G.background:null;return H&&H.isTexture&&(H=(G.backgroundBlurriness>0?i:e).get(H)),H}function F(G){let H=!1;const le=I(G);le===null?C(m,g):le&&le.isColor&&(C(le,1),H=!0);const ne=u.xr.getEnvironmentBlendMode();ne==="additive"?s.buffers.color.setClear(0,0,0,1,f):ne==="alpha-blend"&&s.buffers.color.setClear(0,0,0,0,f),(u.autoClear||H)&&(s.buffers.depth.setTest(!0),s.buffers.depth.setMask(!0),s.buffers.color.setMask(!0),u.clear(u.autoClearColor,u.autoClearDepth,u.autoClearStencil))}function D(G,H){const le=I(H);le&&(le.isCubeTexture||le.mapping===In)?(S===void 0&&(S=new Wi(new $o(1,1,1),new Bs({name:"BackgroundCubeMaterial",uniforms:mc(Vs.backgroundCube.uniforms),vertexShader:Vs.backgroundCube.vertexShader,fragmentShader:Vs.backgroundCube.fragmentShader,side:b,depthTest:!1,depthWrite:!1,fog:!1})),S.geometry.deleteAttribute("normal"),S.geometry.deleteAttribute("uv"),S.onBeforeRender=function(ne,oe,ce){this.matrixWorld.copyPosition(ce.matrixWorld)},Object.defineProperty(S.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),l.update(S)),hl.copy(H.backgroundRotation),hl.x*=-1,hl.y*=-1,hl.z*=-1,le.isCubeTexture&&le.isRenderTargetTexture===!1&&(hl.y*=-1,hl.z*=-1),S.material.uniforms.envMap.value=le,S.material.uniforms.flipEnvMap.value=le.isCubeTexture&&le.isRenderTargetTexture===!1?-1:1,S.material.uniforms.backgroundBlurriness.value=H.backgroundBlurriness,S.material.uniforms.backgroundIntensity.value=H.backgroundIntensity,S.material.uniforms.backgroundRotation.value.setFromMatrix4(KP.makeRotationFromEuler(hl)),S.material.toneMapped=qn.getTransfer(le.colorSpace)!==li,(w!==le||T!==le.version||R!==u.toneMapping)&&(S.material.needsUpdate=!0,w=le,T=le.version,R=u.toneMapping),S.layers.enableAll(),G.unshift(S,S.geometry,S.material,0,0,null)):le&&le.isTexture&&(y===void 0&&(y=new Wi(new Ac(2,2),new Bs({name:"BackgroundMaterial",uniforms:mc(Vs.background.uniforms),vertexShader:Vs.background.vertexShader,fragmentShader:Vs.background.fragmentShader,side:M,depthTest:!1,depthWrite:!1,fog:!1})),y.geometry.deleteAttribute("normal"),Object.defineProperty(y.material,"map",{get:function(){return this.uniforms.t2D.value}}),l.update(y)),y.material.uniforms.t2D.value=le,y.material.uniforms.backgroundIntensity.value=H.backgroundIntensity,y.material.toneMapped=qn.getTransfer(le.colorSpace)!==li,le.matrixAutoUpdate===!0&&le.updateMatrix(),y.material.uniforms.uvTransform.value.copy(le.matrix),(w!==le||T!==le.version||R!==u.toneMapping)&&(y.material.needsUpdate=!0,w=le,T=le.version,R=u.toneMapping),y.layers.enableAll(),G.unshift(y,y.geometry,y.material,0,0,null))}function C(G,H){G.getRGB(Bd,Mv(u)),s.buffers.color.setClear(Bd.r,Bd.g,Bd.b,H,f)}function q(){S!==void 0&&(S.geometry.dispose(),S.material.dispose()),y!==void 0&&(y.geometry.dispose(),y.material.dispose())}return{getClearColor:function(){return m},setClearColor:function(G,H=1){m.set(G),g=H,C(m,g)},getClearAlpha:function(){return g},setClearAlpha:function(G){g=G,C(m,g)},render:F,addToRenderList:D,dispose:q}}function jP(u,e){const i=u.getParameter(u.MAX_VERTEX_ATTRIBS),s={},l=T(null);let h=l,f=!1;function m(Z,he,Ue,Pe,Ne){let $e=!1;const Oe=w(Pe,Ue,he);h!==Oe&&(h=Oe,y(h.object)),$e=R(Z,Pe,Ue,Ne),$e&&I(Z,Pe,Ue,Ne),Ne!==null&&e.update(Ne,u.ELEMENT_ARRAY_BUFFER),($e||f)&&(f=!1,H(Z,he,Ue,Pe),Ne!==null&&u.bindBuffer(u.ELEMENT_ARRAY_BUFFER,e.get(Ne).buffer))}function g(){return u.createVertexArray()}function y(Z){return u.bindVertexArray(Z)}function S(Z){return u.deleteVertexArray(Z)}function w(Z,he,Ue){const Pe=Ue.wireframe===!0;let Ne=s[Z.id];Ne===void 0&&(Ne={},s[Z.id]=Ne);let $e=Ne[he.id];$e===void 0&&($e={},Ne[he.id]=$e);let Oe=$e[Pe];return Oe===void 0&&(Oe=T(g()),$e[Pe]=Oe),Oe}function T(Z){const he=[],Ue=[],Pe=[];for(let Ne=0;Ne<i;Ne++)he[Ne]=0,Ue[Ne]=0,Pe[Ne]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:he,enabledAttributes:Ue,attributeDivisors:Pe,object:Z,attributes:{},index:null}}function R(Z,he,Ue,Pe){const Ne=h.attributes,$e=he.attributes;let Oe=0;const ot=Ue.getAttributes();for(const ze in ot)if(ot[ze].location>=0){const Ut=Ne[ze];let Wt=$e[ze];if(Wt===void 0&&(ze==="instanceMatrix"&&Z.instanceMatrix&&(Wt=Z.instanceMatrix),ze==="instanceColor"&&Z.instanceColor&&(Wt=Z.instanceColor)),Ut===void 0||Ut.attribute!==Wt||Wt&&Ut.data!==Wt.data)return!0;Oe++}return h.attributesNum!==Oe||h.index!==Pe}function I(Z,he,Ue,Pe){const Ne={},$e=he.attributes;let Oe=0;const ot=Ue.getAttributes();for(const ze in ot)if(ot[ze].location>=0){let Ut=$e[ze];Ut===void 0&&(ze==="instanceMatrix"&&Z.instanceMatrix&&(Ut=Z.instanceMatrix),ze==="instanceColor"&&Z.instanceColor&&(Ut=Z.instanceColor));const Wt={};Wt.attribute=Ut,Ut&&Ut.data&&(Wt.data=Ut.data),Ne[ze]=Wt,Oe++}h.attributes=Ne,h.attributesNum=Oe,h.index=Pe}function F(){const Z=h.newAttributes;for(let he=0,Ue=Z.length;he<Ue;he++)Z[he]=0}function D(Z){C(Z,0)}function C(Z,he){const Ue=h.newAttributes,Pe=h.enabledAttributes,Ne=h.attributeDivisors;Ue[Z]=1,Pe[Z]===0&&(u.enableVertexAttribArray(Z),Pe[Z]=1),Ne[Z]!==he&&(u.vertexAttribDivisor(Z,he),Ne[Z]=he)}function q(){const Z=h.newAttributes,he=h.enabledAttributes;for(let Ue=0,Pe=he.length;Ue<Pe;Ue++)he[Ue]!==Z[Ue]&&(u.disableVertexAttribArray(Ue),he[Ue]=0)}function G(Z,he,Ue,Pe,Ne,$e,Oe){Oe===!0?u.vertexAttribIPointer(Z,he,Ue,Ne,$e):u.vertexAttribPointer(Z,he,Ue,Pe,Ne,$e)}function H(Z,he,Ue,Pe){F();const Ne=Pe.attributes,$e=Ue.getAttributes(),Oe=he.defaultAttributeValues;for(const ot in $e){const ze=$e[ot];if(ze.location>=0){let yt=Ne[ot];if(yt===void 0&&(ot==="instanceMatrix"&&Z.instanceMatrix&&(yt=Z.instanceMatrix),ot==="instanceColor"&&Z.instanceColor&&(yt=Z.instanceColor)),yt!==void 0){const Ut=yt.normalized,Wt=yt.itemSize,An=e.get(yt);if(An===void 0)continue;const ri=An.buffer,qe=An.type,dt=An.bytesPerElement,Xt=qe===u.INT||qe===u.UNSIGNED_INT||yt.gpuType===Xn;if(yt.isInterleavedBufferAttribute){const pt=yt.data,rn=pt.stride,xn=yt.offset;if(pt.isInstancedInterleavedBuffer){for(let _n=0;_n<ze.locationSize;_n++)C(ze.location+_n,pt.meshPerAttribute);Z.isInstancedMesh!==!0&&Pe._maxInstanceCount===void 0&&(Pe._maxInstanceCount=pt.meshPerAttribute*pt.count)}else for(let _n=0;_n<ze.locationSize;_n++)D(ze.location+_n);u.bindBuffer(u.ARRAY_BUFFER,ri);for(let _n=0;_n<ze.locationSize;_n++)G(ze.location+_n,Wt/ze.locationSize,qe,Ut,rn*dt,(xn+Wt/ze.locationSize*_n)*dt,Xt)}else{if(yt.isInstancedBufferAttribute){for(let pt=0;pt<ze.locationSize;pt++)C(ze.location+pt,yt.meshPerAttribute);Z.isInstancedMesh!==!0&&Pe._maxInstanceCount===void 0&&(Pe._maxInstanceCount=yt.meshPerAttribute*yt.count)}else for(let pt=0;pt<ze.locationSize;pt++)D(ze.location+pt);u.bindBuffer(u.ARRAY_BUFFER,ri);for(let pt=0;pt<ze.locationSize;pt++)G(ze.location+pt,Wt/ze.locationSize,qe,Ut,Wt*dt,Wt/ze.locationSize*pt*dt,Xt)}}else if(Oe!==void 0){const Ut=Oe[ot];if(Ut!==void 0)switch(Ut.length){case 2:u.vertexAttrib2fv(ze.location,Ut);break;case 3:u.vertexAttrib3fv(ze.location,Ut);break;case 4:u.vertexAttrib4fv(ze.location,Ut);break;default:u.vertexAttrib1fv(ze.location,Ut)}}}}q()}function le(){ce();for(const Z in s){const he=s[Z];for(const Ue in he){const Pe=he[Ue];for(const Ne in Pe)S(Pe[Ne].object),delete Pe[Ne];delete he[Ue]}delete s[Z]}}function ne(Z){if(s[Z.id]===void 0)return;const he=s[Z.id];for(const Ue in he){const Pe=he[Ue];for(const Ne in Pe)S(Pe[Ne].object),delete Pe[Ne];delete he[Ue]}delete s[Z.id]}function oe(Z){for(const he in s){const Ue=s[he];if(Ue[Z.id]===void 0)continue;const Pe=Ue[Z.id];for(const Ne in Pe)S(Pe[Ne].object),delete Pe[Ne];delete Ue[Z.id]}}function ce(){Q(),f=!0,h!==l&&(h=l,y(h.object))}function Q(){l.geometry=null,l.program=null,l.wireframe=!1}return{setup:m,reset:ce,resetDefaultState:Q,dispose:le,releaseStatesOfGeometry:ne,releaseStatesOfProgram:oe,initAttributes:F,enableAttribute:D,disableUnusedAttributes:q}}function QP(u,e,i){let s;function l(y){s=y}function h(y,S){u.drawArrays(s,y,S),i.update(S,s,1)}function f(y,S,w){w!==0&&(u.drawArraysInstanced(s,y,S,w),i.update(S,s,w))}function m(y,S,w){if(w===0)return;e.get("WEBGL_multi_draw").multiDrawArraysWEBGL(s,y,0,S,0,w);let R=0;for(let I=0;I<w;I++)R+=S[I];i.update(R,s,1)}function g(y,S,w,T){if(w===0)return;const R=e.get("WEBGL_multi_draw");if(R===null)for(let I=0;I<y.length;I++)f(y[I],S[I],T[I]);else{R.multiDrawArraysInstancedWEBGL(s,y,0,S,0,T,0,w);let I=0;for(let F=0;F<w;F++)I+=S[F]*T[F];i.update(I,s,1)}}this.setMode=l,this.render=h,this.renderInstances=f,this.renderMultiDraw=m,this.renderMultiDrawInstances=g}function eI(u,e,i,s){let l;function h(){if(l!==void 0)return l;if(e.has("EXT_texture_filter_anisotropic")===!0){const oe=e.get("EXT_texture_filter_anisotropic");l=u.getParameter(oe.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else l=0;return l}function f(oe){return!(oe!==tr&&s.convert(oe)!==u.getParameter(u.IMPLEMENTATION_COLOR_READ_FORMAT))}function m(oe){const ce=oe===ma&&(e.has("EXT_color_buffer_half_float")||e.has("EXT_color_buffer_float"));return!(oe!==ft&&s.convert(oe)!==u.getParameter(u.IMPLEMENTATION_COLOR_READ_TYPE)&&oe!==Si&&!ce)}function g(oe){if(oe==="highp"){if(u.getShaderPrecisionFormat(u.VERTEX_SHADER,u.HIGH_FLOAT).precision>0&&u.getShaderPrecisionFormat(u.FRAGMENT_SHADER,u.HIGH_FLOAT).precision>0)return"highp";oe="mediump"}return oe==="mediump"&&u.getShaderPrecisionFormat(u.VERTEX_SHADER,u.MEDIUM_FLOAT).precision>0&&u.getShaderPrecisionFormat(u.FRAGMENT_SHADER,u.MEDIUM_FLOAT).precision>0?"mediump":"lowp"}let y=i.precision!==void 0?i.precision:"highp";const S=g(y);S!==y&&(console.warn("THREE.WebGLRenderer:",y,"not supported, using",S,"instead."),y=S);const w=i.logarithmicDepthBuffer===!0,T=i.reverseDepthBuffer===!0&&e.has("EXT_clip_control"),R=u.getParameter(u.MAX_TEXTURE_IMAGE_UNITS),I=u.getParameter(u.MAX_VERTEX_TEXTURE_IMAGE_UNITS),F=u.getParameter(u.MAX_TEXTURE_SIZE),D=u.getParameter(u.MAX_CUBE_MAP_TEXTURE_SIZE),C=u.getParameter(u.MAX_VERTEX_ATTRIBS),q=u.getParameter(u.MAX_VERTEX_UNIFORM_VECTORS),G=u.getParameter(u.MAX_VARYING_VECTORS),H=u.getParameter(u.MAX_FRAGMENT_UNIFORM_VECTORS),le=I>0,ne=u.getParameter(u.MAX_SAMPLES);return{isWebGL2:!0,getMaxAnisotropy:h,getMaxPrecision:g,textureFormatReadable:f,textureTypeReadable:m,precision:y,logarithmicDepthBuffer:w,reverseDepthBuffer:T,maxTextures:R,maxVertexTextures:I,maxTextureSize:F,maxCubemapSize:D,maxAttributes:C,maxVertexUniforms:q,maxVaryings:G,maxFragmentUniforms:H,vertexTextures:le,maxSamples:ne}}function tI(u){const e=this;let i=null,s=0,l=!1,h=!1;const f=new ro,m=new wn,g={value:null,needsUpdate:!1};this.uniform=g,this.numPlanes=0,this.numIntersection=0,this.init=function(w,T){const R=w.length!==0||T||s!==0||l;return l=T,s=w.length,R},this.beginShadows=function(){h=!0,S(null)},this.endShadows=function(){h=!1},this.setGlobalState=function(w,T){i=S(w,T,0)},this.setState=function(w,T,R){const I=w.clippingPlanes,F=w.clipIntersection,D=w.clipShadows,C=u.get(w);if(!l||I===null||I.length===0||h&&!D)h?S(null):y();else{const q=h?0:s,G=q*4;let H=C.clippingState||null;g.value=H,H=S(I,T,G,R);for(let le=0;le!==G;++le)H[le]=i[le];C.clippingState=H,this.numIntersection=F?this.numPlanes:0,this.numPlanes+=q}};function y(){g.value!==i&&(g.value=i,g.needsUpdate=s>0),e.numPlanes=s,e.numIntersection=0}function S(w,T,R,I){const F=w!==null?w.length:0;let D=null;if(F!==0){if(D=g.value,I!==!0||D===null){const C=R+F*4,q=T.matrixWorldInverse;m.getNormalMatrix(q),(D===null||D.length<C)&&(D=new Float32Array(C));for(let G=0,H=R;G!==F;++G,H+=4)f.copy(w[G]).applyMatrix4(q,m),f.normal.toArray(D,H),D[H+3]=f.constant}g.value=D,g.needsUpdate=!0}return e.numPlanes=F,e.numIntersection=0,D}}function nI(u){let e=new WeakMap;function i(f,m){return m===_t?f.mapping=Ve:m===Tt&&(f.mapping=Ot),f}function s(f){if(f&&f.isTexture){const m=f.mapping;if(m===_t||m===Tt)if(e.has(f)){const g=e.get(f).texture;return i(g,f.mapping)}else{const g=f.image;if(g&&g.height>0){const y=new Tv(g.height);return y.fromEquirectangularTexture(u,f),e.set(f,y),f.addEventListener("dispose",l),i(y.texture,f.mapping)}else return null}}return f}function l(f){const m=f.target;m.removeEventListener("dispose",l);const g=e.get(m);g!==void 0&&(e.delete(m),g.dispose())}function h(){e=new WeakMap}return{get:s,dispose:h}}const Rc=4,pM=[.125,.215,.35,.446,.526,.582],ul=20,I_=new Cd,mM=new It;let D_=null,L_=0,U_=0,N_=!1;const fl=(1+Math.sqrt(5))/2,Cc=1/fl,_M=[new re(-fl,Cc,0),new re(fl,Cc,0),new re(-Cc,0,fl),new re(Cc,0,fl),new re(0,fl,-Cc),new re(0,fl,Cc),new re(-1,1,-1),new re(1,1,-1),new re(-1,1,1),new re(1,1,1)];class F_{constructor(e){this._renderer=e,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._compileMaterial(this._blurMaterial)}fromScene(e,i=0,s=.1,l=100){D_=this._renderer.getRenderTarget(),L_=this._renderer.getActiveCubeFace(),U_=this._renderer.getActiveMipmapLevel(),N_=this._renderer.xr.enabled,this._renderer.xr.enabled=!1,this._setSize(256);const h=this._allocateTargets();return h.depthBuffer=!0,this._sceneToCubeUV(e,s,l,h),i>0&&this._blur(h,0,0,i),this._applyPMREM(h),this._cleanup(h),h}fromEquirectangular(e,i=null){return this._fromTexture(e,i)}fromCubemap(e,i=null){return this._fromTexture(e,i)}compileCubemapShader(){this._cubemapMaterial===null&&(this._cubemapMaterial=vM(),this._compileMaterial(this._cubemapMaterial))}compileEquirectangularShader(){this._equirectMaterial===null&&(this._equirectMaterial=xM(),this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),this._cubemapMaterial!==null&&this._cubemapMaterial.dispose(),this._equirectMaterial!==null&&this._equirectMaterial.dispose()}_setSize(e){this._lodMax=Math.floor(Math.log2(e)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){this._blurMaterial!==null&&this._blurMaterial.dispose(),this._pingPongRenderTarget!==null&&this._pingPongRenderTarget.dispose();for(let e=0;e<this._lodPlanes.length;e++)this._lodPlanes[e].dispose()}_cleanup(e){this._renderer.setRenderTarget(D_,L_,U_),this._renderer.xr.enabled=N_,e.scissorTest=!1,zd(e,0,0,e.width,e.height)}_fromTexture(e,i){e.mapping===Ve||e.mapping===Ot?this._setSize(e.image.length===0?16:e.image[0].width||e.image[0].image.width):this._setSize(e.image.width/4),D_=this._renderer.getRenderTarget(),L_=this._renderer.getActiveCubeFace(),U_=this._renderer.getActiveMipmapLevel(),N_=this._renderer.xr.enabled,this._renderer.xr.enabled=!1;const s=i||this._allocateTargets();return this._textureToCubeUV(e,s),this._applyPMREM(s),this._cleanup(s),s}_allocateTargets(){const e=3*Math.max(this._cubeSize,112),i=4*this._cubeSize,s={magFilter:pe,minFilter:pe,generateMipmaps:!1,type:ma,format:tr,colorSpace:Ho,depthBuffer:!1},l=gM(e,i,s);if(this._pingPongRenderTarget===null||this._pingPongRenderTarget.width!==e||this._pingPongRenderTarget.height!==i){this._pingPongRenderTarget!==null&&this._dispose(),this._pingPongRenderTarget=gM(e,i,s);const{_lodMax:h}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=iI(h)),this._blurMaterial=rI(h,e,i)}return l}_compileMaterial(e){const i=new Wi(this._lodPlanes[0],e);this._renderer.compile(i,I_)}_sceneToCubeUV(e,i,s,l){const m=new hr(90,1,i,s),g=[1,-1,1,1,1,1],y=[1,1,1,-1,-1,-1],S=this._renderer,w=S.autoClear,T=S.toneMapping;S.getClearColor(mM),S.toneMapping=Ii,S.autoClear=!1;const R=new no({name:"PMREM.Background",side:b,depthWrite:!1,depthTest:!1}),I=new Wi(new $o,R);let F=!1;const D=e.background;D?D.isColor&&(R.color.copy(D),e.background=null,F=!0):(R.color.copy(mM),F=!0);for(let C=0;C<6;C++){const q=C%3;q===0?(m.up.set(0,g[C],0),m.lookAt(y[C],0,0)):q===1?(m.up.set(0,0,g[C]),m.lookAt(0,y[C],0)):(m.up.set(0,g[C],0),m.lookAt(0,0,y[C]));const G=this._cubeSize;zd(l,q*G,C>2?G:0,G,G),S.setRenderTarget(l),F&&S.render(I,m),S.render(e,m)}I.geometry.dispose(),I.material.dispose(),S.toneMapping=T,S.autoClear=w,e.background=D}_textureToCubeUV(e,i){const s=this._renderer,l=e.mapping===Ve||e.mapping===Ot;l?(this._cubemapMaterial===null&&(this._cubemapMaterial=vM()),this._cubemapMaterial.uniforms.flipEnvMap.value=e.isRenderTargetTexture===!1?-1:1):this._equirectMaterial===null&&(this._equirectMaterial=xM());const h=l?this._cubemapMaterial:this._equirectMaterial,f=new Wi(this._lodPlanes[0],h),m=h.uniforms;m.envMap.value=e;const g=this._cubeSize;zd(i,0,0,3*g,2*g),s.setRenderTarget(i),s.render(f,I_)}_applyPMREM(e){const i=this._renderer,s=i.autoClear;i.autoClear=!1;const l=this._lodPlanes.length;for(let h=1;h<l;h++){const f=Math.sqrt(this._sigmas[h]*this._sigmas[h]-this._sigmas[h-1]*this._sigmas[h-1]),m=_M[(l-h-1)%_M.length];this._blur(e,h-1,h,f,m)}i.autoClear=s}_blur(e,i,s,l,h){const f=this._pingPongRenderTarget;this._halfBlur(e,f,i,s,l,"latitudinal",h),this._halfBlur(f,e,s,s,l,"longitudinal",h)}_halfBlur(e,i,s,l,h,f,m){const g=this._renderer,y=this._blurMaterial;f!=="latitudinal"&&f!=="longitudinal"&&console.error("blur direction must be either latitudinal or longitudinal!");const S=3,w=new Wi(this._lodPlanes[l],y),T=y.uniforms,R=this._sizeLods[s]-1,I=isFinite(h)?Math.PI/(2*R):2*Math.PI/(2*ul-1),F=h/I,D=isFinite(h)?1+Math.floor(S*F):ul;D>ul&&console.warn(`sigmaRadians, ${h}, is too large and will clip, as it requested ${D} samples when the maximum is set to ${ul}`);const C=[];let q=0;for(let oe=0;oe<ul;++oe){const ce=oe/F,Q=Math.exp(-ce*ce/2);C.push(Q),oe===0?q+=Q:oe<D&&(q+=2*Q)}for(let oe=0;oe<C.length;oe++)C[oe]=C[oe]/q;T.envMap.value=e.texture,T.samples.value=D,T.weights.value=C,T.latitudinal.value=f==="latitudinal",m&&(T.poleAxis.value=m);const{_lodMax:G}=this;T.dTheta.value=I,T.mipInt.value=G-s;const H=this._sizeLods[l],le=3*H*(l>G-Rc?l-G+Rc:0),ne=4*(this._cubeSize-H);zd(i,le,ne,3*H,2*H),g.setRenderTarget(i),g.render(w,I_)}}function iI(u){const e=[],i=[],s=[];let l=u;const h=u-Rc+1+pM.length;for(let f=0;f<h;f++){const m=Math.pow(2,l);i.push(m);let g=1/m;f>u-Rc?g=pM[f-u+Rc-1]:f===0&&(g=0),s.push(g);const y=1/(m-2),S=-y,w=1+y,T=[S,S,w,S,w,w,S,S,w,w,S,w],R=6,I=6,F=3,D=2,C=1,q=new Float32Array(F*I*R),G=new Float32Array(D*I*R),H=new Float32Array(C*I*R);for(let ne=0;ne<R;ne++){const oe=ne%3*2/3-1,ce=ne>2?0:-1,Q=[oe,ce,0,oe+2/3,ce,0,oe+2/3,ce+1,0,oe,ce,0,oe+2/3,ce+1,0,oe,ce+1,0];q.set(Q,F*I*ne),G.set(T,D*I*ne);const Z=[ne,ne,ne,ne,ne,ne];H.set(Z,C*I*ne)}const le=new Rn;le.setAttribute("position",new di(q,F)),le.setAttribute("uv",new di(G,D)),le.setAttribute("faceIndex",new di(H,C)),e.push(le),l>Rc&&l--}return{lodPlanes:e,sizeLods:i,sigmas:s}}function gM(u,e,i){const s=new Qs(u,e,i);return s.texture.mapping=In,s.texture.name="PMREM.cubeUv",s.scissorTest=!0,s}function zd(u,e,i,s,l){u.viewport.set(e,i,s,l),u.scissor.set(e,i,s,l)}function rI(u,e,i){const s=new Float32Array(ul),l=new re(0,1,0);return new Bs({name:"SphericalGaussianBlur",defines:{n:ul,CUBEUV_TEXEL_WIDTH:1/e,CUBEUV_TEXEL_HEIGHT:1/i,CUBEUV_MAX_MIP:`${u}.0`},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:s},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:l}},vertexShader:O_(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,blending:U,depthTest:!1,depthWrite:!1})}function xM(){return new Bs({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null}},vertexShader:O_(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`,blending:U,depthTest:!1,depthWrite:!1})}function vM(){return new Bs({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:O_(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`,blending:U,depthTest:!1,depthWrite:!1})}function O_(){return`

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`}function sI(u){let e=new WeakMap,i=null;function s(m){if(m&&m.isTexture){const g=m.mapping,y=g===_t||g===Tt,S=g===Ve||g===Ot;if(y||S){let w=e.get(m);const T=w!==void 0?w.texture.pmremVersion:0;if(m.isRenderTargetTexture&&m.pmremVersion!==T)return i===null&&(i=new F_(u)),w=y?i.fromEquirectangular(m,w):i.fromCubemap(m,w),w.texture.pmremVersion=m.pmremVersion,e.set(m,w),w.texture;if(w!==void 0)return w.texture;{const R=m.image;return y&&R&&R.height>0||S&&R&&l(R)?(i===null&&(i=new F_(u)),w=y?i.fromEquirectangular(m):i.fromCubemap(m),w.texture.pmremVersion=m.pmremVersion,e.set(m,w),m.addEventListener("dispose",h),w.texture):null}}}return m}function l(m){let g=0;const y=6;for(let S=0;S<y;S++)m[S]!==void 0&&g++;return g===y}function h(m){const g=m.target;g.removeEventListener("dispose",h);const y=e.get(g);y!==void 0&&(e.delete(g),y.dispose())}function f(){e=new WeakMap,i!==null&&(i.dispose(),i=null)}return{get:s,dispose:f}}function aI(u){const e={};function i(s){if(e[s]!==void 0)return e[s];let l;switch(s){case"WEBGL_depth_texture":l=u.getExtension("WEBGL_depth_texture")||u.getExtension("MOZ_WEBGL_depth_texture")||u.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":l=u.getExtension("EXT_texture_filter_anisotropic")||u.getExtension("MOZ_EXT_texture_filter_anisotropic")||u.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":l=u.getExtension("WEBGL_compressed_texture_s3tc")||u.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||u.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":l=u.getExtension("WEBGL_compressed_texture_pvrtc")||u.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:l=u.getExtension(s)}return e[s]=l,l}return{has:function(s){return i(s)!==null},init:function(){i("EXT_color_buffer_float"),i("WEBGL_clip_cull_distance"),i("OES_texture_float_linear"),i("EXT_color_buffer_half_float"),i("WEBGL_multisampled_render_to_texture"),i("WEBGL_render_shared_exponent")},get:function(s){const l=i(s);return l===null&&nc("THREE.WebGLRenderer: "+s+" extension not supported."),l}}}function oI(u,e,i,s){const l={},h=new WeakMap;function f(w){const T=w.target;T.index!==null&&e.remove(T.index);for(const I in T.attributes)e.remove(T.attributes[I]);T.removeEventListener("dispose",f),delete l[T.id];const R=h.get(T);R&&(e.remove(R),h.delete(T)),s.releaseStatesOfGeometry(T),T.isInstancedBufferGeometry===!0&&delete T._maxInstanceCount,i.memory.geometries--}function m(w,T){return l[T.id]===!0||(T.addEventListener("dispose",f),l[T.id]=!0,i.memory.geometries++),T}function g(w){const T=w.attributes;for(const R in T)e.update(T[R],u.ARRAY_BUFFER)}function y(w){const T=[],R=w.index,I=w.attributes.position;let F=0;if(R!==null){const q=R.array;F=R.version;for(let G=0,H=q.length;G<H;G+=3){const le=q[G+0],ne=q[G+1],oe=q[G+2];T.push(le,ne,ne,oe,oe,le)}}else if(I!==void 0){const q=I.array;F=I.version;for(let G=0,H=q.length/3-1;G<H;G+=3){const le=G+0,ne=G+1,oe=G+2;T.push(le,ne,ne,oe,oe,le)}}else return;const D=new(nv(T)?Fm:Nm)(T,1);D.version=F;const C=h.get(w);C&&e.remove(C),h.set(w,D)}function S(w){const T=h.get(w);if(T){const R=w.index;R!==null&&T.version<R.version&&y(w)}else y(w);return h.get(w)}return{get:m,update:g,getWireframeAttribute:S}}function lI(u,e,i){let s;function l(T){s=T}let h,f;function m(T){h=T.type,f=T.bytesPerElement}function g(T,R){u.drawElements(s,R,h,T*f),i.update(R,s,1)}function y(T,R,I){I!==0&&(u.drawElementsInstanced(s,R,h,T*f,I),i.update(R,s,I))}function S(T,R,I){if(I===0)return;e.get("WEBGL_multi_draw").multiDrawElementsWEBGL(s,R,0,h,T,0,I);let D=0;for(let C=0;C<I;C++)D+=R[C];i.update(D,s,1)}function w(T,R,I,F){if(I===0)return;const D=e.get("WEBGL_multi_draw");if(D===null)for(let C=0;C<T.length;C++)y(T[C]/f,R[C],F[C]);else{D.multiDrawElementsInstancedWEBGL(s,R,0,h,T,0,F,0,I);let C=0;for(let q=0;q<I;q++)C+=R[q]*F[q];i.update(C,s,1)}}this.setMode=l,this.setIndex=m,this.render=g,this.renderInstances=y,this.renderMultiDraw=S,this.renderMultiDrawInstances=w}function cI(u){const e={geometries:0,textures:0},i={frame:0,calls:0,triangles:0,points:0,lines:0};function s(h,f,m){switch(i.calls++,f){case u.TRIANGLES:i.triangles+=m*(h/3);break;case u.LINES:i.lines+=m*(h/2);break;case u.LINE_STRIP:i.lines+=m*(h-1);break;case u.LINE_LOOP:i.lines+=m*h;break;case u.POINTS:i.points+=m*h;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",f);break}}function l(){i.calls=0,i.triangles=0,i.points=0,i.lines=0}return{memory:e,render:i,programs:null,autoReset:!0,reset:l,update:s}}function hI(u,e,i){const s=new WeakMap,l=new Zn;function h(f,m,g){const y=f.morphTargetInfluences,S=m.morphAttributes.position||m.morphAttributes.normal||m.morphAttributes.color,w=S!==void 0?S.length:0;let T=s.get(m);if(T===void 0||T.count!==w){let Q=function(){oe.dispose(),s.delete(m),m.removeEventListener("dispose",Q)};T!==void 0&&T.texture.dispose();const R=m.morphAttributes.position!==void 0,I=m.morphAttributes.normal!==void 0,F=m.morphAttributes.color!==void 0,D=m.morphAttributes.position||[],C=m.morphAttributes.normal||[],q=m.morphAttributes.color||[];let G=0;R===!0&&(G=1),I===!0&&(G=2),F===!0&&(G=3);let H=m.attributes.position.count*G,le=1;H>e.maxTextureSize&&(le=Math.ceil(H/e.maxTextureSize),H=e.maxTextureSize);const ne=new Float32Array(H*le*4*w),oe=new kh(ne,H,le,w);oe.type=Si,oe.needsUpdate=!0;const ce=G*4;for(let Z=0;Z<w;Z++){const he=D[Z],Ue=C[Z],Pe=q[Z],Ne=H*le*4*Z;for(let $e=0;$e<he.count;$e++){const Oe=$e*ce;R===!0&&(l.fromBufferAttribute(he,$e),ne[Ne+Oe+0]=l.x,ne[Ne+Oe+1]=l.y,ne[Ne+Oe+2]=l.z,ne[Ne+Oe+3]=0),I===!0&&(l.fromBufferAttribute(Ue,$e),ne[Ne+Oe+4]=l.x,ne[Ne+Oe+5]=l.y,ne[Ne+Oe+6]=l.z,ne[Ne+Oe+7]=0),F===!0&&(l.fromBufferAttribute(Pe,$e),ne[Ne+Oe+8]=l.x,ne[Ne+Oe+9]=l.y,ne[Ne+Oe+10]=l.z,ne[Ne+Oe+11]=Pe.itemSize===4?l.w:1)}}T={count:w,texture:oe,size:new Ze(H,le)},s.set(m,T),m.addEventListener("dispose",Q)}if(f.isInstancedMesh===!0&&f.morphTexture!==null)g.getUniforms().setValue(u,"morphTexture",f.morphTexture,i);else{let R=0;for(let F=0;F<y.length;F++)R+=y[F];const I=m.morphTargetsRelative?1:1-R;g.getUniforms().setValue(u,"morphTargetBaseInfluence",I),g.getUniforms().setValue(u,"morphTargetInfluences",y)}g.getUniforms().setValue(u,"morphTargetsTexture",T.texture,i),g.getUniforms().setValue(u,"morphTargetsTextureSize",T.size)}return{update:h}}function uI(u,e,i,s){let l=new WeakMap;function h(g){const y=s.render.frame,S=g.geometry,w=e.get(g,S);if(l.get(w)!==y&&(e.update(w),l.set(w,y)),g.isInstancedMesh&&(g.hasEventListener("dispose",m)===!1&&g.addEventListener("dispose",m),l.get(g)!==y&&(i.update(g.instanceMatrix,u.ARRAY_BUFFER),g.instanceColor!==null&&i.update(g.instanceColor,u.ARRAY_BUFFER),l.set(g,y))),g.isSkinnedMesh){const T=g.skeleton;l.get(T)!==y&&(T.update(),l.set(T,y))}return w}function f(){l=new WeakMap}function m(g){const y=g.target;y.removeEventListener("dispose",m),i.remove(y.instanceMatrix),y.instanceColor!==null&&i.remove(y.instanceColor)}return{update:h,dispose:f}}const yM=new Li,MM=new Jm(1,1),SM=new kh,bM=new bf,EM=new qh,wM=[],TM=[],AM=new Float32Array(16),RM=new Float32Array(9),CM=new Float32Array(4);function Pc(u,e,i){const s=u[0];if(s<=0||s>0)return u;const l=e*i;let h=wM[l];if(h===void 0&&(h=new Float32Array(l),wM[l]=h),e!==0){s.toArray(h,0);for(let f=1,m=0;f!==e;++f)m+=i,u[f].toArray(h,m)}return h}function Ki(u,e){if(u.length!==e.length)return!1;for(let i=0,s=u.length;i<s;i++)if(u[i]!==e[i])return!1;return!0}function Ji(u,e){for(let i=0,s=e.length;i<s;i++)u[i]=e[i]}function kd(u,e){let i=TM[e];i===void 0&&(i=new Int32Array(e),TM[e]=i);for(let s=0;s!==e;++s)i[s]=u.allocateTextureUnit();return i}function fI(u,e){const i=this.cache;i[0]!==e&&(u.uniform1f(this.addr,e),i[0]=e)}function dI(u,e){const i=this.cache;if(e.x!==void 0)(i[0]!==e.x||i[1]!==e.y)&&(u.uniform2f(this.addr,e.x,e.y),i[0]=e.x,i[1]=e.y);else{if(Ki(i,e))return;u.uniform2fv(this.addr,e),Ji(i,e)}}function pI(u,e){const i=this.cache;if(e.x!==void 0)(i[0]!==e.x||i[1]!==e.y||i[2]!==e.z)&&(u.uniform3f(this.addr,e.x,e.y,e.z),i[0]=e.x,i[1]=e.y,i[2]=e.z);else if(e.r!==void 0)(i[0]!==e.r||i[1]!==e.g||i[2]!==e.b)&&(u.uniform3f(this.addr,e.r,e.g,e.b),i[0]=e.r,i[1]=e.g,i[2]=e.b);else{if(Ki(i,e))return;u.uniform3fv(this.addr,e),Ji(i,e)}}function mI(u,e){const i=this.cache;if(e.x!==void 0)(i[0]!==e.x||i[1]!==e.y||i[2]!==e.z||i[3]!==e.w)&&(u.uniform4f(this.addr,e.x,e.y,e.z,e.w),i[0]=e.x,i[1]=e.y,i[2]=e.z,i[3]=e.w);else{if(Ki(i,e))return;u.uniform4fv(this.addr,e),Ji(i,e)}}function _I(u,e){const i=this.cache,s=e.elements;if(s===void 0){if(Ki(i,e))return;u.uniformMatrix2fv(this.addr,!1,e),Ji(i,e)}else{if(Ki(i,s))return;CM.set(s),u.uniformMatrix2fv(this.addr,!1,CM),Ji(i,s)}}function gI(u,e){const i=this.cache,s=e.elements;if(s===void 0){if(Ki(i,e))return;u.uniformMatrix3fv(this.addr,!1,e),Ji(i,e)}else{if(Ki(i,s))return;RM.set(s),u.uniformMatrix3fv(this.addr,!1,RM),Ji(i,s)}}function xI(u,e){const i=this.cache,s=e.elements;if(s===void 0){if(Ki(i,e))return;u.uniformMatrix4fv(this.addr,!1,e),Ji(i,e)}else{if(Ki(i,s))return;AM.set(s),u.uniformMatrix4fv(this.addr,!1,AM),Ji(i,s)}}function vI(u,e){const i=this.cache;i[0]!==e&&(u.uniform1i(this.addr,e),i[0]=e)}function yI(u,e){const i=this.cache;if(e.x!==void 0)(i[0]!==e.x||i[1]!==e.y)&&(u.uniform2i(this.addr,e.x,e.y),i[0]=e.x,i[1]=e.y);else{if(Ki(i,e))return;u.uniform2iv(this.addr,e),Ji(i,e)}}function MI(u,e){const i=this.cache;if(e.x!==void 0)(i[0]!==e.x||i[1]!==e.y||i[2]!==e.z)&&(u.uniform3i(this.addr,e.x,e.y,e.z),i[0]=e.x,i[1]=e.y,i[2]=e.z);else{if(Ki(i,e))return;u.uniform3iv(this.addr,e),Ji(i,e)}}function SI(u,e){const i=this.cache;if(e.x!==void 0)(i[0]!==e.x||i[1]!==e.y||i[2]!==e.z||i[3]!==e.w)&&(u.uniform4i(this.addr,e.x,e.y,e.z,e.w),i[0]=e.x,i[1]=e.y,i[2]=e.z,i[3]=e.w);else{if(Ki(i,e))return;u.uniform4iv(this.addr,e),Ji(i,e)}}function bI(u,e){const i=this.cache;i[0]!==e&&(u.uniform1ui(this.addr,e),i[0]=e)}function EI(u,e){const i=this.cache;if(e.x!==void 0)(i[0]!==e.x||i[1]!==e.y)&&(u.uniform2ui(this.addr,e.x,e.y),i[0]=e.x,i[1]=e.y);else{if(Ki(i,e))return;u.uniform2uiv(this.addr,e),Ji(i,e)}}function wI(u,e){const i=this.cache;if(e.x!==void 0)(i[0]!==e.x||i[1]!==e.y||i[2]!==e.z)&&(u.uniform3ui(this.addr,e.x,e.y,e.z),i[0]=e.x,i[1]=e.y,i[2]=e.z);else{if(Ki(i,e))return;u.uniform3uiv(this.addr,e),Ji(i,e)}}function TI(u,e){const i=this.cache;if(e.x!==void 0)(i[0]!==e.x||i[1]!==e.y||i[2]!==e.z||i[3]!==e.w)&&(u.uniform4ui(this.addr,e.x,e.y,e.z,e.w),i[0]=e.x,i[1]=e.y,i[2]=e.z,i[3]=e.w);else{if(Ki(i,e))return;u.uniform4uiv(this.addr,e),Ji(i,e)}}function AI(u,e,i){const s=this.cache,l=i.allocateTextureUnit();s[0]!==l&&(u.uniform1i(this.addr,l),s[0]=l);let h;this.type===u.SAMPLER_2D_SHADOW?(MM.compareFunction=mm,h=MM):h=yM,i.setTexture2D(e||h,l)}function RI(u,e,i){const s=this.cache,l=i.allocateTextureUnit();s[0]!==l&&(u.uniform1i(this.addr,l),s[0]=l),i.setTexture3D(e||bM,l)}function CI(u,e,i){const s=this.cache,l=i.allocateTextureUnit();s[0]!==l&&(u.uniform1i(this.addr,l),s[0]=l),i.setTextureCube(e||EM,l)}function PI(u,e,i){const s=this.cache,l=i.allocateTextureUnit();s[0]!==l&&(u.uniform1i(this.addr,l),s[0]=l),i.setTexture2DArray(e||SM,l)}function II(u){switch(u){case 5126:return fI;case 35664:return dI;case 35665:return pI;case 35666:return mI;case 35674:return _I;case 35675:return gI;case 35676:return xI;case 5124:case 35670:return vI;case 35667:case 35671:return yI;case 35668:case 35672:return MI;case 35669:case 35673:return SI;case 5125:return bI;case 36294:return EI;case 36295:return wI;case 36296:return TI;case 35678:case 36198:case 36298:case 36306:case 35682:return AI;case 35679:case 36299:case 36307:return RI;case 35680:case 36300:case 36308:case 36293:return CI;case 36289:case 36303:case 36311:case 36292:return PI}}function DI(u,e){u.uniform1fv(this.addr,e)}function LI(u,e){const i=Pc(e,this.size,2);u.uniform2fv(this.addr,i)}function UI(u,e){const i=Pc(e,this.size,3);u.uniform3fv(this.addr,i)}function NI(u,e){const i=Pc(e,this.size,4);u.uniform4fv(this.addr,i)}function FI(u,e){const i=Pc(e,this.size,4);u.uniformMatrix2fv(this.addr,!1,i)}function OI(u,e){const i=Pc(e,this.size,9);u.uniformMatrix3fv(this.addr,!1,i)}function BI(u,e){const i=Pc(e,this.size,16);u.uniformMatrix4fv(this.addr,!1,i)}function zI(u,e){u.uniform1iv(this.addr,e)}function kI(u,e){u.uniform2iv(this.addr,e)}function VI(u,e){u.uniform3iv(this.addr,e)}function HI(u,e){u.uniform4iv(this.addr,e)}function GI(u,e){u.uniform1uiv(this.addr,e)}function WI(u,e){u.uniform2uiv(this.addr,e)}function XI(u,e){u.uniform3uiv(this.addr,e)}function qI(u,e){u.uniform4uiv(this.addr,e)}function YI(u,e,i){const s=this.cache,l=e.length,h=kd(i,l);Ki(s,h)||(u.uniform1iv(this.addr,h),Ji(s,h));for(let f=0;f!==l;++f)i.setTexture2D(e[f]||yM,h[f])}function ZI(u,e,i){const s=this.cache,l=e.length,h=kd(i,l);Ki(s,h)||(u.uniform1iv(this.addr,h),Ji(s,h));for(let f=0;f!==l;++f)i.setTexture3D(e[f]||bM,h[f])}function $I(u,e,i){const s=this.cache,l=e.length,h=kd(i,l);Ki(s,h)||(u.uniform1iv(this.addr,h),Ji(s,h));for(let f=0;f!==l;++f)i.setTextureCube(e[f]||EM,h[f])}function KI(u,e,i){const s=this.cache,l=e.length,h=kd(i,l);Ki(s,h)||(u.uniform1iv(this.addr,h),Ji(s,h));for(let f=0;f!==l;++f)i.setTexture2DArray(e[f]||SM,h[f])}function JI(u){switch(u){case 5126:return DI;case 35664:return LI;case 35665:return UI;case 35666:return NI;case 35674:return FI;case 35675:return OI;case 35676:return BI;case 5124:case 35670:return zI;case 35667:case 35671:return kI;case 35668:case 35672:return VI;case 35669:case 35673:return HI;case 5125:return GI;case 36294:return WI;case 36295:return XI;case 36296:return qI;case 35678:case 36198:case 36298:case 36306:case 35682:return YI;case 35679:case 36299:case 36307:return ZI;case 35680:case 36300:case 36308:case 36293:return $I;case 36289:case 36303:case 36311:case 36292:return KI}}class jI{constructor(e,i,s){this.id=e,this.addr=s,this.cache=[],this.type=i.type,this.setValue=II(i.type)}}class QI{constructor(e,i,s){this.id=e,this.addr=s,this.cache=[],this.type=i.type,this.size=i.size,this.setValue=JI(i.type)}}class e2{constructor(e){this.id=e,this.seq=[],this.map={}}setValue(e,i,s){const l=this.seq;for(let h=0,f=l.length;h!==f;++h){const m=l[h];m.setValue(e,i[m.id],s)}}}const B_=/(\w+)(\])?(\[|\.)?/g;function PM(u,e){u.seq.push(e),u.map[e.id]=e}function t2(u,e,i){const s=u.name,l=s.length;for(B_.lastIndex=0;;){const h=B_.exec(s),f=B_.lastIndex;let m=h[1];const g=h[2]==="]",y=h[3];if(g&&(m=m|0),y===void 0||y==="["&&f+2===l){PM(i,y===void 0?new jI(m,u,e):new QI(m,u,e));break}else{let w=i.map[m];w===void 0&&(w=new e2(m),PM(i,w)),i=w}}}class Vd{constructor(e,i){this.seq=[],this.map={};const s=e.getProgramParameter(i,e.ACTIVE_UNIFORMS);for(let l=0;l<s;++l){const h=e.getActiveUniform(i,l),f=e.getUniformLocation(i,h.name);t2(h,f,this)}}setValue(e,i,s,l){const h=this.map[i];h!==void 0&&h.setValue(e,s,l)}setOptional(e,i,s){const l=i[s];l!==void 0&&this.setValue(e,s,l)}static upload(e,i,s,l){for(let h=0,f=i.length;h!==f;++h){const m=i[h],g=s[m.id];g.needsUpdate!==!1&&m.setValue(e,g.value,l)}}static seqWithValue(e,i){const s=[];for(let l=0,h=e.length;l!==h;++l){const f=e[l];f.id in i&&s.push(f)}return s}}function IM(u,e,i){const s=u.createShader(e);return u.shaderSource(s,i),u.compileShader(s),s}const n2=37297;let i2=0;function r2(u,e){const i=u.split(`
`),s=[],l=Math.max(e-6,0),h=Math.min(e+6,i.length);for(let f=l;f<h;f++){const m=f+1;s.push(`${m===e?">":" "} ${m}: ${i[f]}`)}return s.join(`
`)}const DM=new wn;function s2(u){qn._getMatrix(DM,qn.workingColorSpace,u);const e=`mat3( ${DM.elements.map(i=>i.toFixed(4))} )`;switch(qn.getTransfer(u)){case Nh:return[e,"LinearTransferOETF"];case li:return[e,"sRGBTransferOETF"];default:return console.warn("THREE.WebGLProgram: Unsupported color space: ",u),[e,"LinearTransferOETF"]}}function LM(u,e,i){const s=u.getShaderParameter(e,u.COMPILE_STATUS),l=u.getShaderInfoLog(e).trim();if(s&&l==="")return"";const h=/ERROR: 0:(\d+)/.exec(l);if(h){const f=parseInt(h[1]);return i.toUpperCase()+`

`+l+`

`+r2(u.getShaderSource(e),f)}else return l}function a2(u,e){const i=s2(e);return[`vec4 ${u}( vec4 value ) {`,`	return ${i[1]}( vec4( value.rgb * ${i[0]}, value.a ) );`,"}"].join(`
`)}function o2(u,e){let i;switch(e){case Nn:i="Linear";break;case Fn:i="Reinhard";break;case Qt:i="Cineon";break;case ui:i="ACESFilmic";break;case ae:i="AgX";break;case K:i="Neutral";break;case Kt:i="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",e),i="Linear"}return"vec3 "+u+"( vec3 color ) { return "+i+"ToneMapping( color ); }"}const Hd=new re;function l2(){qn.getLuminanceCoefficients(Hd);const u=Hd.x.toFixed(4),e=Hd.y.toFixed(4),i=Hd.z.toFixed(4);return["float luminance( const in vec3 rgb ) {",`	const vec3 weights = vec3( ${u}, ${e}, ${i} );`,"	return dot( weights, rgb );","}"].join(`
`)}function c2(u){return[u.extensionClipCullDistance?"#extension GL_ANGLE_clip_cull_distance : require":"",u.extensionMultiDraw?"#extension GL_ANGLE_multi_draw : require":""].filter(gu).join(`
`)}function h2(u){const e=[];for(const i in u){const s=u[i];s!==!1&&e.push("#define "+i+" "+s)}return e.join(`
`)}function u2(u,e){const i={},s=u.getProgramParameter(e,u.ACTIVE_ATTRIBUTES);for(let l=0;l<s;l++){const h=u.getActiveAttrib(e,l),f=h.name;let m=1;h.type===u.FLOAT_MAT2&&(m=2),h.type===u.FLOAT_MAT3&&(m=3),h.type===u.FLOAT_MAT4&&(m=4),i[f]={type:h.type,location:u.getAttribLocation(e,f),locationSize:m}}return i}function gu(u){return u!==""}function UM(u,e){const i=e.numSpotLightShadows+e.numSpotLightMaps-e.numSpotLightShadowsWithMaps;return u.replace(/NUM_DIR_LIGHTS/g,e.numDirLights).replace(/NUM_SPOT_LIGHTS/g,e.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g,e.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g,i).replace(/NUM_RECT_AREA_LIGHTS/g,e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,e.numPointLights).replace(/NUM_HEMI_LIGHTS/g,e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g,e.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g,e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,e.numPointLightShadows)}function NM(u,e){return u.replace(/NUM_CLIPPING_PLANES/g,e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,e.numClippingPlanes-e.numClipIntersection)}const f2=/^[ \t]*#include +<([\w\d./]+)>/gm;function z_(u){return u.replace(f2,p2)}const d2=new Map;function p2(u,e){let i=Cn[e];if(i===void 0){const s=d2.get(e);if(s!==void 0)i=Cn[s],console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.',e,s);else throw new Error("Can not resolve #include <"+e+">")}return z_(i)}const m2=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function FM(u){return u.replace(m2,_2)}function _2(u,e,i,s){let l="";for(let h=parseInt(e);h<parseInt(i);h++)l+=s.replace(/\[\s*i\s*\]/g,"[ "+h+" ]").replace(/UNROLLED_LOOP_INDEX/g,h);return l}function OM(u){let e=`precision ${u.precision} float;
	precision ${u.precision} int;
	precision ${u.precision} sampler2D;
	precision ${u.precision} samplerCube;
	precision ${u.precision} sampler3D;
	precision ${u.precision} sampler2DArray;
	precision ${u.precision} sampler2DShadow;
	precision ${u.precision} samplerCubeShadow;
	precision ${u.precision} sampler2DArrayShadow;
	precision ${u.precision} isampler2D;
	precision ${u.precision} isampler3D;
	precision ${u.precision} isamplerCube;
	precision ${u.precision} isampler2DArray;
	precision ${u.precision} usampler2D;
	precision ${u.precision} usampler3D;
	precision ${u.precision} usamplerCube;
	precision ${u.precision} usampler2DArray;
	`;return u.precision==="highp"?e+=`
#define HIGH_PRECISION`:u.precision==="mediump"?e+=`
#define MEDIUM_PRECISION`:u.precision==="lowp"&&(e+=`
#define LOW_PRECISION`),e}function g2(u){let e="SHADOWMAP_TYPE_BASIC";return u.shadowMapType===v?e="SHADOWMAP_TYPE_PCF":u.shadowMapType===_?e="SHADOWMAP_TYPE_PCF_SOFT":u.shadowMapType===x&&(e="SHADOWMAP_TYPE_VSM"),e}function x2(u){let e="ENVMAP_TYPE_CUBE";if(u.envMap)switch(u.envMapMode){case Ve:case Ot:e="ENVMAP_TYPE_CUBE";break;case In:e="ENVMAP_TYPE_CUBE_UV";break}return e}function v2(u){let e="ENVMAP_MODE_REFLECTION";if(u.envMap)switch(u.envMapMode){case Ot:e="ENVMAP_MODE_REFRACTION";break}return e}function y2(u){let e="ENVMAP_BLENDING_NONE";if(u.envMap)switch(u.combine){case vn:e="ENVMAP_BLENDING_MULTIPLY";break;case pn:e="ENVMAP_BLENDING_MIX";break;case fe:e="ENVMAP_BLENDING_ADD";break}return e}function M2(u){const e=u.envMapCubeUVHeight;if(e===null)return null;const i=Math.log2(e)-2,s=1/e;return{texelWidth:1/(3*Math.max(Math.pow(2,i),7*16)),texelHeight:s,maxMip:i}}function S2(u,e,i,s){const l=u.getContext(),h=i.defines;let f=i.vertexShader,m=i.fragmentShader;const g=g2(i),y=x2(i),S=v2(i),w=y2(i),T=M2(i),R=c2(i),I=h2(h),F=l.createProgram();let D,C,q=i.glslVersion?"#version "+i.glslVersion+`
`:"";i.isRawShaderMaterial?(D=["#define SHADER_TYPE "+i.shaderType,"#define SHADER_NAME "+i.shaderName,I].filter(gu).join(`
`),D.length>0&&(D+=`
`),C=["#define SHADER_TYPE "+i.shaderType,"#define SHADER_NAME "+i.shaderName,I].filter(gu).join(`
`),C.length>0&&(C+=`
`)):(D=[OM(i),"#define SHADER_TYPE "+i.shaderType,"#define SHADER_NAME "+i.shaderName,I,i.extensionClipCullDistance?"#define USE_CLIP_DISTANCE":"",i.batching?"#define USE_BATCHING":"",i.batchingColor?"#define USE_BATCHING_COLOR":"",i.instancing?"#define USE_INSTANCING":"",i.instancingColor?"#define USE_INSTANCING_COLOR":"",i.instancingMorph?"#define USE_INSTANCING_MORPH":"",i.useFog&&i.fog?"#define USE_FOG":"",i.useFog&&i.fogExp2?"#define FOG_EXP2":"",i.map?"#define USE_MAP":"",i.envMap?"#define USE_ENVMAP":"",i.envMap?"#define "+S:"",i.lightMap?"#define USE_LIGHTMAP":"",i.aoMap?"#define USE_AOMAP":"",i.bumpMap?"#define USE_BUMPMAP":"",i.normalMap?"#define USE_NORMALMAP":"",i.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",i.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",i.displacementMap?"#define USE_DISPLACEMENTMAP":"",i.emissiveMap?"#define USE_EMISSIVEMAP":"",i.anisotropy?"#define USE_ANISOTROPY":"",i.anisotropyMap?"#define USE_ANISOTROPYMAP":"",i.clearcoatMap?"#define USE_CLEARCOATMAP":"",i.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",i.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",i.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",i.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",i.specularMap?"#define USE_SPECULARMAP":"",i.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",i.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",i.roughnessMap?"#define USE_ROUGHNESSMAP":"",i.metalnessMap?"#define USE_METALNESSMAP":"",i.alphaMap?"#define USE_ALPHAMAP":"",i.alphaHash?"#define USE_ALPHAHASH":"",i.transmission?"#define USE_TRANSMISSION":"",i.transmissionMap?"#define USE_TRANSMISSIONMAP":"",i.thicknessMap?"#define USE_THICKNESSMAP":"",i.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",i.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",i.mapUv?"#define MAP_UV "+i.mapUv:"",i.alphaMapUv?"#define ALPHAMAP_UV "+i.alphaMapUv:"",i.lightMapUv?"#define LIGHTMAP_UV "+i.lightMapUv:"",i.aoMapUv?"#define AOMAP_UV "+i.aoMapUv:"",i.emissiveMapUv?"#define EMISSIVEMAP_UV "+i.emissiveMapUv:"",i.bumpMapUv?"#define BUMPMAP_UV "+i.bumpMapUv:"",i.normalMapUv?"#define NORMALMAP_UV "+i.normalMapUv:"",i.displacementMapUv?"#define DISPLACEMENTMAP_UV "+i.displacementMapUv:"",i.metalnessMapUv?"#define METALNESSMAP_UV "+i.metalnessMapUv:"",i.roughnessMapUv?"#define ROUGHNESSMAP_UV "+i.roughnessMapUv:"",i.anisotropyMapUv?"#define ANISOTROPYMAP_UV "+i.anisotropyMapUv:"",i.clearcoatMapUv?"#define CLEARCOATMAP_UV "+i.clearcoatMapUv:"",i.clearcoatNormalMapUv?"#define CLEARCOAT_NORMALMAP_UV "+i.clearcoatNormalMapUv:"",i.clearcoatRoughnessMapUv?"#define CLEARCOAT_ROUGHNESSMAP_UV "+i.clearcoatRoughnessMapUv:"",i.iridescenceMapUv?"#define IRIDESCENCEMAP_UV "+i.iridescenceMapUv:"",i.iridescenceThicknessMapUv?"#define IRIDESCENCE_THICKNESSMAP_UV "+i.iridescenceThicknessMapUv:"",i.sheenColorMapUv?"#define SHEEN_COLORMAP_UV "+i.sheenColorMapUv:"",i.sheenRoughnessMapUv?"#define SHEEN_ROUGHNESSMAP_UV "+i.sheenRoughnessMapUv:"",i.specularMapUv?"#define SPECULARMAP_UV "+i.specularMapUv:"",i.specularColorMapUv?"#define SPECULAR_COLORMAP_UV "+i.specularColorMapUv:"",i.specularIntensityMapUv?"#define SPECULAR_INTENSITYMAP_UV "+i.specularIntensityMapUv:"",i.transmissionMapUv?"#define TRANSMISSIONMAP_UV "+i.transmissionMapUv:"",i.thicknessMapUv?"#define THICKNESSMAP_UV "+i.thicknessMapUv:"",i.vertexTangents&&i.flatShading===!1?"#define USE_TANGENT":"",i.vertexColors?"#define USE_COLOR":"",i.vertexAlphas?"#define USE_COLOR_ALPHA":"",i.vertexUv1s?"#define USE_UV1":"",i.vertexUv2s?"#define USE_UV2":"",i.vertexUv3s?"#define USE_UV3":"",i.pointsUvs?"#define USE_POINTS_UV":"",i.flatShading?"#define FLAT_SHADED":"",i.skinning?"#define USE_SKINNING":"",i.morphTargets?"#define USE_MORPHTARGETS":"",i.morphNormals&&i.flatShading===!1?"#define USE_MORPHNORMALS":"",i.morphColors?"#define USE_MORPHCOLORS":"",i.morphTargetsCount>0?"#define MORPHTARGETS_TEXTURE_STRIDE "+i.morphTextureStride:"",i.morphTargetsCount>0?"#define MORPHTARGETS_COUNT "+i.morphTargetsCount:"",i.doubleSided?"#define DOUBLE_SIDED":"",i.flipSided?"#define FLIP_SIDED":"",i.shadowMapEnabled?"#define USE_SHADOWMAP":"",i.shadowMapEnabled?"#define "+g:"",i.sizeAttenuation?"#define USE_SIZEATTENUATION":"",i.numLightProbes>0?"#define USE_LIGHT_PROBES":"",i.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",i.reverseDepthBuffer?"#define USE_REVERSEDEPTHBUF":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","	attribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","	attribute vec3 instanceColor;","#endif","#ifdef USE_INSTANCING_MORPH","	uniform sampler2D morphTexture;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_UV1","	attribute vec2 uv1;","#endif","#ifdef USE_UV2","	attribute vec2 uv2;","#endif","#ifdef USE_UV3","	attribute vec2 uv3;","#endif","#ifdef USE_TANGENT","	attribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","	attribute vec4 color;","#elif defined( USE_COLOR )","	attribute vec3 color;","#endif","#ifdef USE_SKINNING","	attribute vec4 skinIndex;","	attribute vec4 skinWeight;","#endif",`
`].filter(gu).join(`
`),C=[OM(i),"#define SHADER_TYPE "+i.shaderType,"#define SHADER_NAME "+i.shaderName,I,i.useFog&&i.fog?"#define USE_FOG":"",i.useFog&&i.fogExp2?"#define FOG_EXP2":"",i.alphaToCoverage?"#define ALPHA_TO_COVERAGE":"",i.map?"#define USE_MAP":"",i.matcap?"#define USE_MATCAP":"",i.envMap?"#define USE_ENVMAP":"",i.envMap?"#define "+y:"",i.envMap?"#define "+S:"",i.envMap?"#define "+w:"",T?"#define CUBEUV_TEXEL_WIDTH "+T.texelWidth:"",T?"#define CUBEUV_TEXEL_HEIGHT "+T.texelHeight:"",T?"#define CUBEUV_MAX_MIP "+T.maxMip+".0":"",i.lightMap?"#define USE_LIGHTMAP":"",i.aoMap?"#define USE_AOMAP":"",i.bumpMap?"#define USE_BUMPMAP":"",i.normalMap?"#define USE_NORMALMAP":"",i.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",i.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",i.emissiveMap?"#define USE_EMISSIVEMAP":"",i.anisotropy?"#define USE_ANISOTROPY":"",i.anisotropyMap?"#define USE_ANISOTROPYMAP":"",i.clearcoat?"#define USE_CLEARCOAT":"",i.clearcoatMap?"#define USE_CLEARCOATMAP":"",i.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",i.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",i.dispersion?"#define USE_DISPERSION":"",i.iridescence?"#define USE_IRIDESCENCE":"",i.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",i.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",i.specularMap?"#define USE_SPECULARMAP":"",i.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",i.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",i.roughnessMap?"#define USE_ROUGHNESSMAP":"",i.metalnessMap?"#define USE_METALNESSMAP":"",i.alphaMap?"#define USE_ALPHAMAP":"",i.alphaTest?"#define USE_ALPHATEST":"",i.alphaHash?"#define USE_ALPHAHASH":"",i.sheen?"#define USE_SHEEN":"",i.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",i.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",i.transmission?"#define USE_TRANSMISSION":"",i.transmissionMap?"#define USE_TRANSMISSIONMAP":"",i.thicknessMap?"#define USE_THICKNESSMAP":"",i.vertexTangents&&i.flatShading===!1?"#define USE_TANGENT":"",i.vertexColors||i.instancingColor||i.batchingColor?"#define USE_COLOR":"",i.vertexAlphas?"#define USE_COLOR_ALPHA":"",i.vertexUv1s?"#define USE_UV1":"",i.vertexUv2s?"#define USE_UV2":"",i.vertexUv3s?"#define USE_UV3":"",i.pointsUvs?"#define USE_POINTS_UV":"",i.gradientMap?"#define USE_GRADIENTMAP":"",i.flatShading?"#define FLAT_SHADED":"",i.doubleSided?"#define DOUBLE_SIDED":"",i.flipSided?"#define FLIP_SIDED":"",i.shadowMapEnabled?"#define USE_SHADOWMAP":"",i.shadowMapEnabled?"#define "+g:"",i.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",i.numLightProbes>0?"#define USE_LIGHT_PROBES":"",i.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",i.decodeVideoTextureEmissive?"#define DECODE_VIDEO_TEXTURE_EMISSIVE":"",i.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",i.reverseDepthBuffer?"#define USE_REVERSEDEPTHBUF":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",i.toneMapping!==Ii?"#define TONE_MAPPING":"",i.toneMapping!==Ii?Cn.tonemapping_pars_fragment:"",i.toneMapping!==Ii?o2("toneMapping",i.toneMapping):"",i.dithering?"#define DITHERING":"",i.opaque?"#define OPAQUE":"",Cn.colorspace_pars_fragment,a2("linearToOutputTexel",i.outputColorSpace),l2(),i.useDepthPacking?"#define DEPTH_PACKING "+i.depthPacking:"",`
`].filter(gu).join(`
`)),f=z_(f),f=UM(f,i),f=NM(f,i),m=z_(m),m=UM(m,i),m=NM(m,i),f=FM(f),m=FM(m),i.isRawShaderMaterial!==!0&&(q=`#version 300 es
`,D=[R,"#define attribute in","#define varying out","#define texture2D texture"].join(`
`)+`
`+D,C=["#define varying in",i.glslVersion===_m?"":"layout(location = 0) out highp vec4 pc_fragColor;",i.glslVersion===_m?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join(`
`)+`
`+C);const G=q+D+f,H=q+C+m,le=IM(l,l.VERTEX_SHADER,G),ne=IM(l,l.FRAGMENT_SHADER,H);l.attachShader(F,le),l.attachShader(F,ne),i.index0AttributeName!==void 0?l.bindAttribLocation(F,0,i.index0AttributeName):i.morphTargets===!0&&l.bindAttribLocation(F,0,"position"),l.linkProgram(F);function oe(he){if(u.debug.checkShaderErrors){const Ue=l.getProgramInfoLog(F).trim(),Pe=l.getShaderInfoLog(le).trim(),Ne=l.getShaderInfoLog(ne).trim();let $e=!0,Oe=!0;if(l.getProgramParameter(F,l.LINK_STATUS)===!1)if($e=!1,typeof u.debug.onShaderError=="function")u.debug.onShaderError(l,F,le,ne);else{const ot=LM(l,le,"vertex"),ze=LM(l,ne,"fragment");console.error("THREE.WebGLProgram: Shader Error "+l.getError()+" - VALIDATE_STATUS "+l.getProgramParameter(F,l.VALIDATE_STATUS)+`

Material Name: `+he.name+`
Material Type: `+he.type+`

Program Info Log: `+Ue+`
`+ot+`
`+ze)}else Ue!==""?console.warn("THREE.WebGLProgram: Program Info Log:",Ue):(Pe===""||Ne==="")&&(Oe=!1);Oe&&(he.diagnostics={runnable:$e,programLog:Ue,vertexShader:{log:Pe,prefix:D},fragmentShader:{log:Ne,prefix:C}})}l.deleteShader(le),l.deleteShader(ne),ce=new Vd(l,F),Q=u2(l,F)}let ce;this.getUniforms=function(){return ce===void 0&&oe(this),ce};let Q;this.getAttributes=function(){return Q===void 0&&oe(this),Q};let Z=i.rendererExtensionParallelShaderCompile===!1;return this.isReady=function(){return Z===!1&&(Z=l.getProgramParameter(F,n2)),Z},this.destroy=function(){s.releaseStatesOfProgram(this),l.deleteProgram(F),this.program=void 0},this.type=i.shaderType,this.name=i.shaderName,this.id=i2++,this.cacheKey=e,this.usedTimes=1,this.program=F,this.vertexShader=le,this.fragmentShader=ne,this}let b2=0;class E2{constructor(){this.shaderCache=new Map,this.materialCache=new Map}update(e){const i=e.vertexShader,s=e.fragmentShader,l=this._getShaderStage(i),h=this._getShaderStage(s),f=this._getShaderCacheForMaterial(e);return f.has(l)===!1&&(f.add(l),l.usedTimes++),f.has(h)===!1&&(f.add(h),h.usedTimes++),this}remove(e){const i=this.materialCache.get(e);for(const s of i)s.usedTimes--,s.usedTimes===0&&this.shaderCache.delete(s.code);return this.materialCache.delete(e),this}getVertexShaderID(e){return this._getShaderStage(e.vertexShader).id}getFragmentShaderID(e){return this._getShaderStage(e.fragmentShader).id}dispose(){this.shaderCache.clear(),this.materialCache.clear()}_getShaderCacheForMaterial(e){const i=this.materialCache;let s=i.get(e);return s===void 0&&(s=new Set,i.set(e,s)),s}_getShaderStage(e){const i=this.shaderCache;let s=i.get(e);return s===void 0&&(s=new w2(e),i.set(e,s)),s}}class w2{constructor(e){this.id=b2++,this.code=e,this.usedTimes=0}}function T2(u,e,i,s,l,h,f){const m=new Pf,g=new E2,y=new Set,S=[],w=l.logarithmicDepthBuffer,T=l.vertexTextures;let R=l.precision;const I={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};function F(Q){return y.add(Q),Q===0?"uv":`uv${Q}`}function D(Q,Z,he,Ue,Pe){const Ne=Ue.fog,$e=Pe.geometry,Oe=Q.isMeshStandardMaterial?Ue.environment:null,ot=(Q.isMeshStandardMaterial?i:e).get(Q.envMap||Oe),ze=ot&&ot.mapping===In?ot.image.height:null,yt=I[Q.type];Q.precision!==null&&(R=l.getMaxPrecision(Q.precision),R!==Q.precision&&console.warn("THREE.WebGLProgram.getParameters:",Q.precision,"not supported, using",R,"instead."));const Ut=$e.morphAttributes.position||$e.morphAttributes.normal||$e.morphAttributes.color,Wt=Ut!==void 0?Ut.length:0;let An=0;$e.morphAttributes.position!==void 0&&(An=1),$e.morphAttributes.normal!==void 0&&(An=2),$e.morphAttributes.color!==void 0&&(An=3);let ri,qe,dt,Xt;if(yt){const ci=Vs[yt];ri=ci.vertexShader,qe=ci.fragmentShader}else ri=Q.vertexShader,qe=Q.fragmentShader,g.update(Q),dt=g.getVertexShaderID(Q),Xt=g.getFragmentShaderID(Q);const pt=u.getRenderTarget(),rn=u.state.buffers.depth.getReversed(),xn=Pe.isInstancedMesh===!0,_n=Pe.isBatchedMesh===!0,Jn=!!Q.map,Je=!!Q.matcap,ct=!!ot,se=!!Q.aoMap,jt=!!Q.lightMap,rt=!!Q.bumpMap,Bt=!!Q.normalMap,ht=!!Q.displacementMap,dn=!!Q.emissiveMap,Rt=!!Q.metalnessMap,ie=!!Q.roughnessMap,$=Q.anisotropy>0,Te=Q.clearcoat>0,We=Q.dispersion>0,Qe=Q.iridescence>0,Xe=Q.sheen>0,Zt=Q.transmission>0,St=$&&!!Q.anisotropyMap,Ft=Te&&!!Q.clearcoatMap,kn=Te&&!!Q.clearcoatNormalMap,at=Te&&!!Q.clearcoatRoughnessMap,Vt=Qe&&!!Q.iridescenceMap,un=Qe&&!!Q.iridescenceThicknessMap,Mn=Xe&&!!Q.sheenColorMap,Ht=Xe&&!!Q.sheenRoughnessMap,Yn=!!Q.specularMap,Dn=!!Q.specularColorMap,yi=!!Q.specularIntensityMap,xe=Zt&&!!Q.transmissionMap,bt=Zt&&!!Q.thicknessMap,ke=!!Q.gradientMap,Ke=!!Q.alphaMap,Dt=Q.alphaTest>0,Ct=!!Q.alphaHash,Pn=!!Q.extensions;let Ni=Ii;Q.toneMapped&&(pt===null||pt.isXRRenderTarget===!0)&&(Ni=u.toneMapping);const yr={shaderID:yt,shaderType:Q.type,shaderName:Q.name,vertexShader:ri,fragmentShader:qe,defines:Q.defines,customVertexShaderID:dt,customFragmentShaderID:Xt,isRawShaderMaterial:Q.isRawShaderMaterial===!0,glslVersion:Q.glslVersion,precision:R,batching:_n,batchingColor:_n&&Pe._colorsTexture!==null,instancing:xn,instancingColor:xn&&Pe.instanceColor!==null,instancingMorph:xn&&Pe.morphTexture!==null,supportsVertexTextures:T,outputColorSpace:pt===null?u.outputColorSpace:pt.isXRRenderTarget===!0?pt.texture.colorSpace:Ho,alphaToCoverage:!!Q.alphaToCoverage,map:Jn,matcap:Je,envMap:ct,envMapMode:ct&&ot.mapping,envMapCubeUVHeight:ze,aoMap:se,lightMap:jt,bumpMap:rt,normalMap:Bt,displacementMap:T&&ht,emissiveMap:dn,normalMapObjectSpace:Bt&&Q.normalMapType===Yx,normalMapTangentSpace:Bt&&Q.normalMapType===Ka,metalnessMap:Rt,roughnessMap:ie,anisotropy:$,anisotropyMap:St,clearcoat:Te,clearcoatMap:Ft,clearcoatNormalMap:kn,clearcoatRoughnessMap:at,dispersion:We,iridescence:Qe,iridescenceMap:Vt,iridescenceThicknessMap:un,sheen:Xe,sheenColorMap:Mn,sheenRoughnessMap:Ht,specularMap:Yn,specularColorMap:Dn,specularIntensityMap:yi,transmission:Zt,transmissionMap:xe,thicknessMap:bt,gradientMap:ke,opaque:Q.transparent===!1&&Q.blending===L&&Q.alphaToCoverage===!1,alphaMap:Ke,alphaTest:Dt,alphaHash:Ct,combine:Q.combine,mapUv:Jn&&F(Q.map.channel),aoMapUv:se&&F(Q.aoMap.channel),lightMapUv:jt&&F(Q.lightMap.channel),bumpMapUv:rt&&F(Q.bumpMap.channel),normalMapUv:Bt&&F(Q.normalMap.channel),displacementMapUv:ht&&F(Q.displacementMap.channel),emissiveMapUv:dn&&F(Q.emissiveMap.channel),metalnessMapUv:Rt&&F(Q.metalnessMap.channel),roughnessMapUv:ie&&F(Q.roughnessMap.channel),anisotropyMapUv:St&&F(Q.anisotropyMap.channel),clearcoatMapUv:Ft&&F(Q.clearcoatMap.channel),clearcoatNormalMapUv:kn&&F(Q.clearcoatNormalMap.channel),clearcoatRoughnessMapUv:at&&F(Q.clearcoatRoughnessMap.channel),iridescenceMapUv:Vt&&F(Q.iridescenceMap.channel),iridescenceThicknessMapUv:un&&F(Q.iridescenceThicknessMap.channel),sheenColorMapUv:Mn&&F(Q.sheenColorMap.channel),sheenRoughnessMapUv:Ht&&F(Q.sheenRoughnessMap.channel),specularMapUv:Yn&&F(Q.specularMap.channel),specularColorMapUv:Dn&&F(Q.specularColorMap.channel),specularIntensityMapUv:yi&&F(Q.specularIntensityMap.channel),transmissionMapUv:xe&&F(Q.transmissionMap.channel),thicknessMapUv:bt&&F(Q.thicknessMap.channel),alphaMapUv:Ke&&F(Q.alphaMap.channel),vertexTangents:!!$e.attributes.tangent&&(Bt||$),vertexColors:Q.vertexColors,vertexAlphas:Q.vertexColors===!0&&!!$e.attributes.color&&$e.attributes.color.itemSize===4,pointsUvs:Pe.isPoints===!0&&!!$e.attributes.uv&&(Jn||Ke),fog:!!Ne,useFog:Q.fog===!0,fogExp2:!!Ne&&Ne.isFogExp2,flatShading:Q.flatShading===!0,sizeAttenuation:Q.sizeAttenuation===!0,logarithmicDepthBuffer:w,reverseDepthBuffer:rn,skinning:Pe.isSkinnedMesh===!0,morphTargets:$e.morphAttributes.position!==void 0,morphNormals:$e.morphAttributes.normal!==void 0,morphColors:$e.morphAttributes.color!==void 0,morphTargetsCount:Wt,morphTextureStride:An,numDirLights:Z.directional.length,numPointLights:Z.point.length,numSpotLights:Z.spot.length,numSpotLightMaps:Z.spotLightMap.length,numRectAreaLights:Z.rectArea.length,numHemiLights:Z.hemi.length,numDirLightShadows:Z.directionalShadowMap.length,numPointLightShadows:Z.pointShadowMap.length,numSpotLightShadows:Z.spotShadowMap.length,numSpotLightShadowsWithMaps:Z.numSpotLightShadowsWithMaps,numLightProbes:Z.numLightProbes,numClippingPlanes:f.numPlanes,numClipIntersection:f.numIntersection,dithering:Q.dithering,shadowMapEnabled:u.shadowMap.enabled&&he.length>0,shadowMapType:u.shadowMap.type,toneMapping:Ni,decodeVideoTexture:Jn&&Q.map.isVideoTexture===!0&&qn.getTransfer(Q.map.colorSpace)===li,decodeVideoTextureEmissive:dn&&Q.emissiveMap.isVideoTexture===!0&&qn.getTransfer(Q.emissiveMap.colorSpace)===li,premultipliedAlpha:Q.premultipliedAlpha,doubleSided:Q.side===E,flipSided:Q.side===b,useDepthPacking:Q.depthPacking>=0,depthPacking:Q.depthPacking||0,index0AttributeName:Q.index0AttributeName,extensionClipCullDistance:Pn&&Q.extensions.clipCullDistance===!0&&s.has("WEBGL_clip_cull_distance"),extensionMultiDraw:(Pn&&Q.extensions.multiDraw===!0||_n)&&s.has("WEBGL_multi_draw"),rendererExtensionParallelShaderCompile:s.has("KHR_parallel_shader_compile"),customProgramCacheKey:Q.customProgramCacheKey()};return yr.vertexUv1s=y.has(1),yr.vertexUv2s=y.has(2),yr.vertexUv3s=y.has(3),y.clear(),yr}function C(Q){const Z=[];if(Q.shaderID?Z.push(Q.shaderID):(Z.push(Q.customVertexShaderID),Z.push(Q.customFragmentShaderID)),Q.defines!==void 0)for(const he in Q.defines)Z.push(he),Z.push(Q.defines[he]);return Q.isRawShaderMaterial===!1&&(q(Z,Q),G(Z,Q),Z.push(u.outputColorSpace)),Z.push(Q.customProgramCacheKey),Z.join()}function q(Q,Z){Q.push(Z.precision),Q.push(Z.outputColorSpace),Q.push(Z.envMapMode),Q.push(Z.envMapCubeUVHeight),Q.push(Z.mapUv),Q.push(Z.alphaMapUv),Q.push(Z.lightMapUv),Q.push(Z.aoMapUv),Q.push(Z.bumpMapUv),Q.push(Z.normalMapUv),Q.push(Z.displacementMapUv),Q.push(Z.emissiveMapUv),Q.push(Z.metalnessMapUv),Q.push(Z.roughnessMapUv),Q.push(Z.anisotropyMapUv),Q.push(Z.clearcoatMapUv),Q.push(Z.clearcoatNormalMapUv),Q.push(Z.clearcoatRoughnessMapUv),Q.push(Z.iridescenceMapUv),Q.push(Z.iridescenceThicknessMapUv),Q.push(Z.sheenColorMapUv),Q.push(Z.sheenRoughnessMapUv),Q.push(Z.specularMapUv),Q.push(Z.specularColorMapUv),Q.push(Z.specularIntensityMapUv),Q.push(Z.transmissionMapUv),Q.push(Z.thicknessMapUv),Q.push(Z.combine),Q.push(Z.fogExp2),Q.push(Z.sizeAttenuation),Q.push(Z.morphTargetsCount),Q.push(Z.morphAttributeCount),Q.push(Z.numDirLights),Q.push(Z.numPointLights),Q.push(Z.numSpotLights),Q.push(Z.numSpotLightMaps),Q.push(Z.numHemiLights),Q.push(Z.numRectAreaLights),Q.push(Z.numDirLightShadows),Q.push(Z.numPointLightShadows),Q.push(Z.numSpotLightShadows),Q.push(Z.numSpotLightShadowsWithMaps),Q.push(Z.numLightProbes),Q.push(Z.shadowMapType),Q.push(Z.toneMapping),Q.push(Z.numClippingPlanes),Q.push(Z.numClipIntersection),Q.push(Z.depthPacking)}function G(Q,Z){m.disableAll(),Z.supportsVertexTextures&&m.enable(0),Z.instancing&&m.enable(1),Z.instancingColor&&m.enable(2),Z.instancingMorph&&m.enable(3),Z.matcap&&m.enable(4),Z.envMap&&m.enable(5),Z.normalMapObjectSpace&&m.enable(6),Z.normalMapTangentSpace&&m.enable(7),Z.clearcoat&&m.enable(8),Z.iridescence&&m.enable(9),Z.alphaTest&&m.enable(10),Z.vertexColors&&m.enable(11),Z.vertexAlphas&&m.enable(12),Z.vertexUv1s&&m.enable(13),Z.vertexUv2s&&m.enable(14),Z.vertexUv3s&&m.enable(15),Z.vertexTangents&&m.enable(16),Z.anisotropy&&m.enable(17),Z.alphaHash&&m.enable(18),Z.batching&&m.enable(19),Z.dispersion&&m.enable(20),Z.batchingColor&&m.enable(21),Q.push(m.mask),m.disableAll(),Z.fog&&m.enable(0),Z.useFog&&m.enable(1),Z.flatShading&&m.enable(2),Z.logarithmicDepthBuffer&&m.enable(3),Z.reverseDepthBuffer&&m.enable(4),Z.skinning&&m.enable(5),Z.morphTargets&&m.enable(6),Z.morphNormals&&m.enable(7),Z.morphColors&&m.enable(8),Z.premultipliedAlpha&&m.enable(9),Z.shadowMapEnabled&&m.enable(10),Z.doubleSided&&m.enable(11),Z.flipSided&&m.enable(12),Z.useDepthPacking&&m.enable(13),Z.dithering&&m.enable(14),Z.transmission&&m.enable(15),Z.sheen&&m.enable(16),Z.opaque&&m.enable(17),Z.pointsUvs&&m.enable(18),Z.decodeVideoTexture&&m.enable(19),Z.decodeVideoTextureEmissive&&m.enable(20),Z.alphaToCoverage&&m.enable(21),Q.push(m.mask)}function H(Q){const Z=I[Q.type];let he;if(Z){const Ue=Vs[Z];he=Sv.clone(Ue.uniforms)}else he=Q.uniforms;return he}function le(Q,Z){let he;for(let Ue=0,Pe=S.length;Ue<Pe;Ue++){const Ne=S[Ue];if(Ne.cacheKey===Z){he=Ne,++he.usedTimes;break}}return he===void 0&&(he=new S2(u,Z,Q,h),S.push(he)),he}function ne(Q){if(--Q.usedTimes===0){const Z=S.indexOf(Q);S[Z]=S[S.length-1],S.pop(),Q.destroy()}}function oe(Q){g.remove(Q)}function ce(){g.dispose()}return{getParameters:D,getProgramCacheKey:C,getUniforms:H,acquireProgram:le,releaseProgram:ne,releaseShaderCache:oe,programs:S,dispose:ce}}function A2(){let u=new WeakMap;function e(f){return u.has(f)}function i(f){let m=u.get(f);return m===void 0&&(m={},u.set(f,m)),m}function s(f){u.delete(f)}function l(f,m,g){u.get(f)[m]=g}function h(){u=new WeakMap}return{has:e,get:i,remove:s,update:l,dispose:h}}function R2(u,e){return u.groupOrder!==e.groupOrder?u.groupOrder-e.groupOrder:u.renderOrder!==e.renderOrder?u.renderOrder-e.renderOrder:u.material.id!==e.material.id?u.material.id-e.material.id:u.z!==e.z?u.z-e.z:u.id-e.id}function BM(u,e){return u.groupOrder!==e.groupOrder?u.groupOrder-e.groupOrder:u.renderOrder!==e.renderOrder?u.renderOrder-e.renderOrder:u.z!==e.z?e.z-u.z:u.id-e.id}function zM(){const u=[];let e=0;const i=[],s=[],l=[];function h(){e=0,i.length=0,s.length=0,l.length=0}function f(w,T,R,I,F,D){let C=u[e];return C===void 0?(C={id:w.id,object:w,geometry:T,material:R,groupOrder:I,renderOrder:w.renderOrder,z:F,group:D},u[e]=C):(C.id=w.id,C.object=w,C.geometry=T,C.material=R,C.groupOrder=I,C.renderOrder=w.renderOrder,C.z=F,C.group=D),e++,C}function m(w,T,R,I,F,D){const C=f(w,T,R,I,F,D);R.transmission>0?s.push(C):R.transparent===!0?l.push(C):i.push(C)}function g(w,T,R,I,F,D){const C=f(w,T,R,I,F,D);R.transmission>0?s.unshift(C):R.transparent===!0?l.unshift(C):i.unshift(C)}function y(w,T){i.length>1&&i.sort(w||R2),s.length>1&&s.sort(T||BM),l.length>1&&l.sort(T||BM)}function S(){for(let w=e,T=u.length;w<T;w++){const R=u[w];if(R.id===null)break;R.id=null,R.object=null,R.geometry=null,R.material=null,R.group=null}}return{opaque:i,transmissive:s,transparent:l,init:h,push:m,unshift:g,finish:S,sort:y}}function C2(){let u=new WeakMap;function e(s,l){const h=u.get(s);let f;return h===void 0?(f=new zM,u.set(s,[f])):l>=h.length?(f=new zM,h.push(f)):f=h[l],f}function i(){u=new WeakMap}return{get:e,dispose:i}}function P2(){const u={};return{get:function(e){if(u[e.id]!==void 0)return u[e.id];let i;switch(e.type){case"DirectionalLight":i={direction:new re,color:new It};break;case"SpotLight":i={position:new re,direction:new re,color:new It,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":i={position:new re,color:new It,distance:0,decay:0};break;case"HemisphereLight":i={direction:new re,skyColor:new It,groundColor:new It};break;case"RectAreaLight":i={color:new It,position:new re,halfWidth:new re,halfHeight:new re};break}return u[e.id]=i,i}}}function I2(){const u={};return{get:function(e){if(u[e.id]!==void 0)return u[e.id];let i;switch(e.type){case"DirectionalLight":i={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Ze};break;case"SpotLight":i={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Ze};break;case"PointLight":i={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Ze,shadowCameraNear:1,shadowCameraFar:1e3};break}return u[e.id]=i,i}}}let D2=0;function L2(u,e){return(e.castShadow?2:0)-(u.castShadow?2:0)+(e.map?1:0)-(u.map?1:0)}function U2(u){const e=new P2,i=I2(),s={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1,numSpotMaps:-1,numLightProbes:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotLightMap:[],spotShadow:[],spotShadowMap:[],spotLightMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],numSpotLightShadowsWithMaps:0,numLightProbes:0};for(let y=0;y<9;y++)s.probe.push(new re);const l=new re,h=new fn,f=new fn;function m(y){let S=0,w=0,T=0;for(let Q=0;Q<9;Q++)s.probe[Q].set(0,0,0);let R=0,I=0,F=0,D=0,C=0,q=0,G=0,H=0,le=0,ne=0,oe=0;y.sort(L2);for(let Q=0,Z=y.length;Q<Z;Q++){const he=y[Q],Ue=he.color,Pe=he.intensity,Ne=he.distance,$e=he.shadow&&he.shadow.map?he.shadow.map.texture:null;if(he.isAmbientLight)S+=Ue.r*Pe,w+=Ue.g*Pe,T+=Ue.b*Pe;else if(he.isLightProbe){for(let Oe=0;Oe<9;Oe++)s.probe[Oe].addScaledVector(he.sh.coefficients[Oe],Pe);oe++}else if(he.isDirectionalLight){const Oe=e.get(he);if(Oe.color.copy(he.color).multiplyScalar(he.intensity),he.castShadow){const ot=he.shadow,ze=i.get(he);ze.shadowIntensity=ot.intensity,ze.shadowBias=ot.bias,ze.shadowNormalBias=ot.normalBias,ze.shadowRadius=ot.radius,ze.shadowMapSize=ot.mapSize,s.directionalShadow[R]=ze,s.directionalShadowMap[R]=$e,s.directionalShadowMatrix[R]=he.shadow.matrix,q++}s.directional[R]=Oe,R++}else if(he.isSpotLight){const Oe=e.get(he);Oe.position.setFromMatrixPosition(he.matrixWorld),Oe.color.copy(Ue).multiplyScalar(Pe),Oe.distance=Ne,Oe.coneCos=Math.cos(he.angle),Oe.penumbraCos=Math.cos(he.angle*(1-he.penumbra)),Oe.decay=he.decay,s.spot[F]=Oe;const ot=he.shadow;if(he.map&&(s.spotLightMap[le]=he.map,le++,ot.updateMatrices(he),he.castShadow&&ne++),s.spotLightMatrix[F]=ot.matrix,he.castShadow){const ze=i.get(he);ze.shadowIntensity=ot.intensity,ze.shadowBias=ot.bias,ze.shadowNormalBias=ot.normalBias,ze.shadowRadius=ot.radius,ze.shadowMapSize=ot.mapSize,s.spotShadow[F]=ze,s.spotShadowMap[F]=$e,H++}F++}else if(he.isRectAreaLight){const Oe=e.get(he);Oe.color.copy(Ue).multiplyScalar(Pe),Oe.halfWidth.set(he.width*.5,0,0),Oe.halfHeight.set(0,he.height*.5,0),s.rectArea[D]=Oe,D++}else if(he.isPointLight){const Oe=e.get(he);if(Oe.color.copy(he.color).multiplyScalar(he.intensity),Oe.distance=he.distance,Oe.decay=he.decay,he.castShadow){const ot=he.shadow,ze=i.get(he);ze.shadowIntensity=ot.intensity,ze.shadowBias=ot.bias,ze.shadowNormalBias=ot.normalBias,ze.shadowRadius=ot.radius,ze.shadowMapSize=ot.mapSize,ze.shadowCameraNear=ot.camera.near,ze.shadowCameraFar=ot.camera.far,s.pointShadow[I]=ze,s.pointShadowMap[I]=$e,s.pointShadowMatrix[I]=he.shadow.matrix,G++}s.point[I]=Oe,I++}else if(he.isHemisphereLight){const Oe=e.get(he);Oe.skyColor.copy(he.color).multiplyScalar(Pe),Oe.groundColor.copy(he.groundColor).multiplyScalar(Pe),s.hemi[C]=Oe,C++}}D>0&&(u.has("OES_texture_float_linear")===!0?(s.rectAreaLTC1=vt.LTC_FLOAT_1,s.rectAreaLTC2=vt.LTC_FLOAT_2):(s.rectAreaLTC1=vt.LTC_HALF_1,s.rectAreaLTC2=vt.LTC_HALF_2)),s.ambient[0]=S,s.ambient[1]=w,s.ambient[2]=T;const ce=s.hash;(ce.directionalLength!==R||ce.pointLength!==I||ce.spotLength!==F||ce.rectAreaLength!==D||ce.hemiLength!==C||ce.numDirectionalShadows!==q||ce.numPointShadows!==G||ce.numSpotShadows!==H||ce.numSpotMaps!==le||ce.numLightProbes!==oe)&&(s.directional.length=R,s.spot.length=F,s.rectArea.length=D,s.point.length=I,s.hemi.length=C,s.directionalShadow.length=q,s.directionalShadowMap.length=q,s.pointShadow.length=G,s.pointShadowMap.length=G,s.spotShadow.length=H,s.spotShadowMap.length=H,s.directionalShadowMatrix.length=q,s.pointShadowMatrix.length=G,s.spotLightMatrix.length=H+le-ne,s.spotLightMap.length=le,s.numSpotLightShadowsWithMaps=ne,s.numLightProbes=oe,ce.directionalLength=R,ce.pointLength=I,ce.spotLength=F,ce.rectAreaLength=D,ce.hemiLength=C,ce.numDirectionalShadows=q,ce.numPointShadows=G,ce.numSpotShadows=H,ce.numSpotMaps=le,ce.numLightProbes=oe,s.version=D2++)}function g(y,S){let w=0,T=0,R=0,I=0,F=0;const D=S.matrixWorldInverse;for(let C=0,q=y.length;C<q;C++){const G=y[C];if(G.isDirectionalLight){const H=s.directional[w];H.direction.setFromMatrixPosition(G.matrixWorld),l.setFromMatrixPosition(G.target.matrixWorld),H.direction.sub(l),H.direction.transformDirection(D),w++}else if(G.isSpotLight){const H=s.spot[R];H.position.setFromMatrixPosition(G.matrixWorld),H.position.applyMatrix4(D),H.direction.setFromMatrixPosition(G.matrixWorld),l.setFromMatrixPosition(G.target.matrixWorld),H.direction.sub(l),H.direction.transformDirection(D),R++}else if(G.isRectAreaLight){const H=s.rectArea[I];H.position.setFromMatrixPosition(G.matrixWorld),H.position.applyMatrix4(D),f.identity(),h.copy(G.matrixWorld),h.premultiply(D),f.extractRotation(h),H.halfWidth.set(G.width*.5,0,0),H.halfHeight.set(0,G.height*.5,0),H.halfWidth.applyMatrix4(f),H.halfHeight.applyMatrix4(f),I++}else if(G.isPointLight){const H=s.point[T];H.position.setFromMatrixPosition(G.matrixWorld),H.position.applyMatrix4(D),T++}else if(G.isHemisphereLight){const H=s.hemi[F];H.direction.setFromMatrixPosition(G.matrixWorld),H.direction.transformDirection(D),F++}}}return{setup:m,setupView:g,state:s}}function kM(u){const e=new U2(u),i=[],s=[];function l(S){y.camera=S,i.length=0,s.length=0}function h(S){i.push(S)}function f(S){s.push(S)}function m(){e.setup(i)}function g(S){e.setupView(i,S)}const y={lightsArray:i,shadowsArray:s,camera:null,lights:e,transmissionRenderTarget:{}};return{init:l,state:y,setupLights:m,setupLightsView:g,pushLight:h,pushShadow:f}}function N2(u){let e=new WeakMap;function i(l,h=0){const f=e.get(l);let m;return f===void 0?(m=new kM(u),e.set(l,[m])):h>=f.length?(m=new kM(u),f.push(m)):m=f[h],m}function s(){e=new WeakMap}return{get:i,dispose:s}}const F2=`void main() {
	gl_Position = vec4( position, 1.0 );
}`,O2=`uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;
#include <packing>
void main() {
	const float samples = float( VSM_SAMPLES );
	float mean = 0.0;
	float squared_mean = 0.0;
	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );
	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;
	for ( float i = 0.0; i < samples; i ++ ) {
		float uvOffset = uvStart + i * uvStride;
		#ifdef HORIZONTAL_PASS
			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );
			mean += distribution.x;
			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;
		#else
			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );
			mean += depth;
			squared_mean += depth * depth;
		#endif
	}
	mean = mean / samples;
	squared_mean = squared_mean / samples;
	float std_dev = sqrt( squared_mean - mean * mean );
	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );
}`;function B2(u,e,i){let s=new jh;const l=new Ze,h=new Ze,f=new Zn,m=new u_({depthPacking:qx}),g=new f_,y={},S=i.maxTextureSize,w={[M]:b,[b]:M,[E]:E},T=new Bs({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new Ze},radius:{value:4}},vertexShader:F2,fragmentShader:O2}),R=T.clone();R.defines.HORIZONTAL_PASS=1;const I=new Rn;I.setAttribute("position",new di(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const F=new Wi(I,T),D=this;this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=v;let C=this.type;this.render=function(ne,oe,ce){if(D.enabled===!1||D.autoUpdate===!1&&D.needsUpdate===!1||ne.length===0)return;const Q=u.getRenderTarget(),Z=u.getActiveCubeFace(),he=u.getActiveMipmapLevel(),Ue=u.state;Ue.setBlending(U),Ue.buffers.color.setClear(1,1,1,1),Ue.buffers.depth.setTest(!0),Ue.setScissorTest(!1);const Pe=C!==x&&this.type===x,Ne=C===x&&this.type!==x;for(let $e=0,Oe=ne.length;$e<Oe;$e++){const ot=ne[$e],ze=ot.shadow;if(ze===void 0){console.warn("THREE.WebGLShadowMap:",ot,"has no shadow.");continue}if(ze.autoUpdate===!1&&ze.needsUpdate===!1)continue;l.copy(ze.mapSize);const yt=ze.getFrameExtents();if(l.multiply(yt),h.copy(ze.mapSize),(l.x>S||l.y>S)&&(l.x>S&&(h.x=Math.floor(S/yt.x),l.x=h.x*yt.x,ze.mapSize.x=h.x),l.y>S&&(h.y=Math.floor(S/yt.y),l.y=h.y*yt.y,ze.mapSize.y=h.y)),ze.map===null||Pe===!0||Ne===!0){const Wt=this.type!==x?{minFilter:kt,magFilter:kt}:{};ze.map!==null&&ze.map.dispose(),ze.map=new Qs(l.x,l.y,Wt),ze.map.texture.name=ot.name+".shadowMap",ze.camera.updateProjectionMatrix()}u.setRenderTarget(ze.map),u.clear();const Ut=ze.getViewportCount();for(let Wt=0;Wt<Ut;Wt++){const An=ze.getViewport(Wt);f.set(h.x*An.x,h.y*An.y,h.x*An.z,h.y*An.w),Ue.viewport(f),ze.updateMatrices(ot,Wt),s=ze.getFrustum(),H(oe,ce,ze.camera,ot,this.type)}ze.isPointLightShadow!==!0&&this.type===x&&q(ze,ce),ze.needsUpdate=!1}C=this.type,D.needsUpdate=!1,u.setRenderTarget(Q,Z,he)};function q(ne,oe){const ce=e.update(F);T.defines.VSM_SAMPLES!==ne.blurSamples&&(T.defines.VSM_SAMPLES=ne.blurSamples,R.defines.VSM_SAMPLES=ne.blurSamples,T.needsUpdate=!0,R.needsUpdate=!0),ne.mapPass===null&&(ne.mapPass=new Qs(l.x,l.y)),T.uniforms.shadow_pass.value=ne.map.texture,T.uniforms.resolution.value=ne.mapSize,T.uniforms.radius.value=ne.radius,u.setRenderTarget(ne.mapPass),u.clear(),u.renderBufferDirect(oe,null,ce,T,F,null),R.uniforms.shadow_pass.value=ne.mapPass.texture,R.uniforms.resolution.value=ne.mapSize,R.uniforms.radius.value=ne.radius,u.setRenderTarget(ne.map),u.clear(),u.renderBufferDirect(oe,null,ce,R,F,null)}function G(ne,oe,ce,Q){let Z=null;const he=ce.isPointLight===!0?ne.customDistanceMaterial:ne.customDepthMaterial;if(he!==void 0)Z=he;else if(Z=ce.isPointLight===!0?g:m,u.localClippingEnabled&&oe.clipShadows===!0&&Array.isArray(oe.clippingPlanes)&&oe.clippingPlanes.length!==0||oe.displacementMap&&oe.displacementScale!==0||oe.alphaMap&&oe.alphaTest>0||oe.map&&oe.alphaTest>0){const Ue=Z.uuid,Pe=oe.uuid;let Ne=y[Ue];Ne===void 0&&(Ne={},y[Ue]=Ne);let $e=Ne[Pe];$e===void 0&&($e=Z.clone(),Ne[Pe]=$e,oe.addEventListener("dispose",le)),Z=$e}if(Z.visible=oe.visible,Z.wireframe=oe.wireframe,Q===x?Z.side=oe.shadowSide!==null?oe.shadowSide:oe.side:Z.side=oe.shadowSide!==null?oe.shadowSide:w[oe.side],Z.alphaMap=oe.alphaMap,Z.alphaTest=oe.alphaTest,Z.map=oe.map,Z.clipShadows=oe.clipShadows,Z.clippingPlanes=oe.clippingPlanes,Z.clipIntersection=oe.clipIntersection,Z.displacementMap=oe.displacementMap,Z.displacementScale=oe.displacementScale,Z.displacementBias=oe.displacementBias,Z.wireframeLinewidth=oe.wireframeLinewidth,Z.linewidth=oe.linewidth,ce.isPointLight===!0&&Z.isMeshDistanceMaterial===!0){const Ue=u.properties.get(Z);Ue.light=ce}return Z}function H(ne,oe,ce,Q,Z){if(ne.visible===!1)return;if(ne.layers.test(oe.layers)&&(ne.isMesh||ne.isLine||ne.isPoints)&&(ne.castShadow||ne.receiveShadow&&Z===x)&&(!ne.frustumCulled||s.intersectsObject(ne))){ne.modelViewMatrix.multiplyMatrices(ce.matrixWorldInverse,ne.matrixWorld);const Pe=e.update(ne),Ne=ne.material;if(Array.isArray(Ne)){const $e=Pe.groups;for(let Oe=0,ot=$e.length;Oe<ot;Oe++){const ze=$e[Oe],yt=Ne[ze.materialIndex];if(yt&&yt.visible){const Ut=G(ne,yt,Q,Z);ne.onBeforeShadow(u,ne,oe,ce,Pe,Ut,ze),u.renderBufferDirect(ce,null,Pe,Ut,ne,ze),ne.onAfterShadow(u,ne,oe,ce,Pe,Ut,ze)}}}else if(Ne.visible){const $e=G(ne,Ne,Q,Z);ne.onBeforeShadow(u,ne,oe,ce,Pe,$e,null),u.renderBufferDirect(ce,null,Pe,$e,ne,null),ne.onAfterShadow(u,ne,oe,ce,Pe,$e,null)}}const Ue=ne.children;for(let Pe=0,Ne=Ue.length;Pe<Ne;Pe++)H(Ue[Pe],oe,ce,Q,Z)}function le(ne){ne.target.removeEventListener("dispose",le);for(const ce in y){const Q=y[ce],Z=ne.target.uuid;Z in Q&&(Q[Z].dispose(),delete Q[Z])}}}const z2={[Le]:et,[Pt]:gn,[$t]:ei,[lt]:sn,[et]:Le,[gn]:Pt,[ei]:$t,[sn]:lt};function k2(u,e){function i(){let xe=!1;const bt=new Zn;let ke=null;const Ke=new Zn(0,0,0,0);return{setMask:function(Dt){ke!==Dt&&!xe&&(u.colorMask(Dt,Dt,Dt,Dt),ke=Dt)},setLocked:function(Dt){xe=Dt},setClear:function(Dt,Ct,Pn,Ni,yr){yr===!0&&(Dt*=Ni,Ct*=Ni,Pn*=Ni),bt.set(Dt,Ct,Pn,Ni),Ke.equals(bt)===!1&&(u.clearColor(Dt,Ct,Pn,Ni),Ke.copy(bt))},reset:function(){xe=!1,ke=null,Ke.set(-1,0,0,0)}}}function s(){let xe=!1,bt=!1,ke=null,Ke=null,Dt=null;return{setReversed:function(Ct){if(bt!==Ct){const Pn=e.get("EXT_clip_control");bt?Pn.clipControlEXT(Pn.LOWER_LEFT_EXT,Pn.ZERO_TO_ONE_EXT):Pn.clipControlEXT(Pn.LOWER_LEFT_EXT,Pn.NEGATIVE_ONE_TO_ONE_EXT);const Ni=Dt;Dt=null,this.setClear(Ni)}bt=Ct},getReversed:function(){return bt},setTest:function(Ct){Ct?pt(u.DEPTH_TEST):rn(u.DEPTH_TEST)},setMask:function(Ct){ke!==Ct&&!xe&&(u.depthMask(Ct),ke=Ct)},setFunc:function(Ct){if(bt&&(Ct=z2[Ct]),Ke!==Ct){switch(Ct){case Le:u.depthFunc(u.NEVER);break;case et:u.depthFunc(u.ALWAYS);break;case Pt:u.depthFunc(u.LESS);break;case lt:u.depthFunc(u.LEQUAL);break;case $t:u.depthFunc(u.EQUAL);break;case sn:u.depthFunc(u.GEQUAL);break;case gn:u.depthFunc(u.GREATER);break;case ei:u.depthFunc(u.NOTEQUAL);break;default:u.depthFunc(u.LEQUAL)}Ke=Ct}},setLocked:function(Ct){xe=Ct},setClear:function(Ct){Dt!==Ct&&(bt&&(Ct=1-Ct),u.clearDepth(Ct),Dt=Ct)},reset:function(){xe=!1,ke=null,Ke=null,Dt=null,bt=!1}}}function l(){let xe=!1,bt=null,ke=null,Ke=null,Dt=null,Ct=null,Pn=null,Ni=null,yr=null;return{setTest:function(ci){xe||(ci?pt(u.STENCIL_TEST):rn(u.STENCIL_TEST))},setMask:function(ci){bt!==ci&&!xe&&(u.stencilMask(ci),bt=ci)},setFunc:function(ci,Hs,Ra){(ke!==ci||Ke!==Hs||Dt!==Ra)&&(u.stencilFunc(ci,Hs,Ra),ke=ci,Ke=Hs,Dt=Ra)},setOp:function(ci,Hs,Ra){(Ct!==ci||Pn!==Hs||Ni!==Ra)&&(u.stencilOp(ci,Hs,Ra),Ct=ci,Pn=Hs,Ni=Ra)},setLocked:function(ci){xe=ci},setClear:function(ci){yr!==ci&&(u.clearStencil(ci),yr=ci)},reset:function(){xe=!1,bt=null,ke=null,Ke=null,Dt=null,Ct=null,Pn=null,Ni=null,yr=null}}}const h=new i,f=new s,m=new l,g=new WeakMap,y=new WeakMap;let S={},w={},T=new WeakMap,R=[],I=null,F=!1,D=null,C=null,q=null,G=null,H=null,le=null,ne=null,oe=new It(0,0,0),ce=0,Q=!1,Z=null,he=null,Ue=null,Pe=null,Ne=null;const $e=u.getParameter(u.MAX_COMBINED_TEXTURE_IMAGE_UNITS);let Oe=!1,ot=0;const ze=u.getParameter(u.VERSION);ze.indexOf("WebGL")!==-1?(ot=parseFloat(/^WebGL (\d)/.exec(ze)[1]),Oe=ot>=1):ze.indexOf("OpenGL ES")!==-1&&(ot=parseFloat(/^OpenGL ES (\d)/.exec(ze)[1]),Oe=ot>=2);let yt=null,Ut={};const Wt=u.getParameter(u.SCISSOR_BOX),An=u.getParameter(u.VIEWPORT),ri=new Zn().fromArray(Wt),qe=new Zn().fromArray(An);function dt(xe,bt,ke,Ke){const Dt=new Uint8Array(4),Ct=u.createTexture();u.bindTexture(xe,Ct),u.texParameteri(xe,u.TEXTURE_MIN_FILTER,u.NEAREST),u.texParameteri(xe,u.TEXTURE_MAG_FILTER,u.NEAREST);for(let Pn=0;Pn<ke;Pn++)xe===u.TEXTURE_3D||xe===u.TEXTURE_2D_ARRAY?u.texImage3D(bt,0,u.RGBA,1,1,Ke,0,u.RGBA,u.UNSIGNED_BYTE,Dt):u.texImage2D(bt+Pn,0,u.RGBA,1,1,0,u.RGBA,u.UNSIGNED_BYTE,Dt);return Ct}const Xt={};Xt[u.TEXTURE_2D]=dt(u.TEXTURE_2D,u.TEXTURE_2D,1),Xt[u.TEXTURE_CUBE_MAP]=dt(u.TEXTURE_CUBE_MAP,u.TEXTURE_CUBE_MAP_POSITIVE_X,6),Xt[u.TEXTURE_2D_ARRAY]=dt(u.TEXTURE_2D_ARRAY,u.TEXTURE_2D_ARRAY,1,1),Xt[u.TEXTURE_3D]=dt(u.TEXTURE_3D,u.TEXTURE_3D,1,1),h.setClear(0,0,0,1),f.setClear(1),m.setClear(0),pt(u.DEPTH_TEST),f.setFunc(lt),rt(!1),Bt(o),pt(u.CULL_FACE),se(U);function pt(xe){S[xe]!==!0&&(u.enable(xe),S[xe]=!0)}function rn(xe){S[xe]!==!1&&(u.disable(xe),S[xe]=!1)}function xn(xe,bt){return w[xe]!==bt?(u.bindFramebuffer(xe,bt),w[xe]=bt,xe===u.DRAW_FRAMEBUFFER&&(w[u.FRAMEBUFFER]=bt),xe===u.FRAMEBUFFER&&(w[u.DRAW_FRAMEBUFFER]=bt),!0):!1}function _n(xe,bt){let ke=R,Ke=!1;if(xe){ke=T.get(bt),ke===void 0&&(ke=[],T.set(bt,ke));const Dt=xe.textures;if(ke.length!==Dt.length||ke[0]!==u.COLOR_ATTACHMENT0){for(let Ct=0,Pn=Dt.length;Ct<Pn;Ct++)ke[Ct]=u.COLOR_ATTACHMENT0+Ct;ke.length=Dt.length,Ke=!0}}else ke[0]!==u.BACK&&(ke[0]=u.BACK,Ke=!0);Ke&&u.drawBuffers(ke)}function Jn(xe){return I!==xe?(u.useProgram(xe),I=xe,!0):!1}const Je={[O]:u.FUNC_ADD,[z]:u.FUNC_SUBTRACT,[Y]:u.FUNC_REVERSE_SUBTRACT};Je[W]=u.MIN,Je[te]=u.MAX;const ct={[N]:u.ZERO,[B]:u.ONE,[ee]:u.SRC_COLOR,[de]:u.SRC_ALPHA,[Fe]:u.SRC_ALPHA_SATURATE,[me]:u.DST_COLOR,[Ae]:u.DST_ALPHA,[Ee]:u.ONE_MINUS_SRC_COLOR,[be]:u.ONE_MINUS_SRC_ALPHA,[_e]:u.ONE_MINUS_DST_COLOR,[Me]:u.ONE_MINUS_DST_ALPHA,[He]:u.CONSTANT_COLOR,[nt]:u.ONE_MINUS_CONSTANT_COLOR,[ut]:u.CONSTANT_ALPHA,[Yt]:u.ONE_MINUS_CONSTANT_ALPHA};function se(xe,bt,ke,Ke,Dt,Ct,Pn,Ni,yr,ci){if(xe===U){F===!0&&(rn(u.BLEND),F=!1);return}if(F===!1&&(pt(u.BLEND),F=!0),xe!==k){if(xe!==D||ci!==Q){if((C!==O||H!==O)&&(u.blendEquation(u.FUNC_ADD),C=O,H=O),ci)switch(xe){case L:u.blendFuncSeparate(u.ONE,u.ONE_MINUS_SRC_ALPHA,u.ONE,u.ONE_MINUS_SRC_ALPHA);break;case P:u.blendFunc(u.ONE,u.ONE);break;case A:u.blendFuncSeparate(u.ZERO,u.ONE_MINUS_SRC_COLOR,u.ZERO,u.ONE);break;case X:u.blendFuncSeparate(u.ZERO,u.SRC_COLOR,u.ZERO,u.SRC_ALPHA);break;default:console.error("THREE.WebGLState: Invalid blending: ",xe);break}else switch(xe){case L:u.blendFuncSeparate(u.SRC_ALPHA,u.ONE_MINUS_SRC_ALPHA,u.ONE,u.ONE_MINUS_SRC_ALPHA);break;case P:u.blendFunc(u.SRC_ALPHA,u.ONE);break;case A:u.blendFuncSeparate(u.ZERO,u.ONE_MINUS_SRC_COLOR,u.ZERO,u.ONE);break;case X:u.blendFunc(u.ZERO,u.SRC_COLOR);break;default:console.error("THREE.WebGLState: Invalid blending: ",xe);break}q=null,G=null,le=null,ne=null,oe.set(0,0,0),ce=0,D=xe,Q=ci}return}Dt=Dt||bt,Ct=Ct||ke,Pn=Pn||Ke,(bt!==C||Dt!==H)&&(u.blendEquationSeparate(Je[bt],Je[Dt]),C=bt,H=Dt),(ke!==q||Ke!==G||Ct!==le||Pn!==ne)&&(u.blendFuncSeparate(ct[ke],ct[Ke],ct[Ct],ct[Pn]),q=ke,G=Ke,le=Ct,ne=Pn),(Ni.equals(oe)===!1||yr!==ce)&&(u.blendColor(Ni.r,Ni.g,Ni.b,yr),oe.copy(Ni),ce=yr),D=xe,Q=!1}function jt(xe,bt){xe.side===E?rn(u.CULL_FACE):pt(u.CULL_FACE);let ke=xe.side===b;bt&&(ke=!ke),rt(ke),xe.blending===L&&xe.transparent===!1?se(U):se(xe.blending,xe.blendEquation,xe.blendSrc,xe.blendDst,xe.blendEquationAlpha,xe.blendSrcAlpha,xe.blendDstAlpha,xe.blendColor,xe.blendAlpha,xe.premultipliedAlpha),f.setFunc(xe.depthFunc),f.setTest(xe.depthTest),f.setMask(xe.depthWrite),h.setMask(xe.colorWrite);const Ke=xe.stencilWrite;m.setTest(Ke),Ke&&(m.setMask(xe.stencilWriteMask),m.setFunc(xe.stencilFunc,xe.stencilRef,xe.stencilFuncMask),m.setOp(xe.stencilFail,xe.stencilZFail,xe.stencilZPass)),dn(xe.polygonOffset,xe.polygonOffsetFactor,xe.polygonOffsetUnits),xe.alphaToCoverage===!0?pt(u.SAMPLE_ALPHA_TO_COVERAGE):rn(u.SAMPLE_ALPHA_TO_COVERAGE)}function rt(xe){Z!==xe&&(xe?u.frontFace(u.CW):u.frontFace(u.CCW),Z=xe)}function Bt(xe){xe!==r?(pt(u.CULL_FACE),xe!==he&&(xe===o?u.cullFace(u.BACK):xe===c?u.cullFace(u.FRONT):u.cullFace(u.FRONT_AND_BACK))):rn(u.CULL_FACE),he=xe}function ht(xe){xe!==Ue&&(Oe&&u.lineWidth(xe),Ue=xe)}function dn(xe,bt,ke){xe?(pt(u.POLYGON_OFFSET_FILL),(Pe!==bt||Ne!==ke)&&(u.polygonOffset(bt,ke),Pe=bt,Ne=ke)):rn(u.POLYGON_OFFSET_FILL)}function Rt(xe){xe?pt(u.SCISSOR_TEST):rn(u.SCISSOR_TEST)}function ie(xe){xe===void 0&&(xe=u.TEXTURE0+$e-1),yt!==xe&&(u.activeTexture(xe),yt=xe)}function $(xe,bt,ke){ke===void 0&&(yt===null?ke=u.TEXTURE0+$e-1:ke=yt);let Ke=Ut[ke];Ke===void 0&&(Ke={type:void 0,texture:void 0},Ut[ke]=Ke),(Ke.type!==xe||Ke.texture!==bt)&&(yt!==ke&&(u.activeTexture(ke),yt=ke),u.bindTexture(xe,bt||Xt[xe]),Ke.type=xe,Ke.texture=bt)}function Te(){const xe=Ut[yt];xe!==void 0&&xe.type!==void 0&&(u.bindTexture(xe.type,null),xe.type=void 0,xe.texture=void 0)}function We(){try{u.compressedTexImage2D.apply(u,arguments)}catch(xe){console.error("THREE.WebGLState:",xe)}}function Qe(){try{u.compressedTexImage3D.apply(u,arguments)}catch(xe){console.error("THREE.WebGLState:",xe)}}function Xe(){try{u.texSubImage2D.apply(u,arguments)}catch(xe){console.error("THREE.WebGLState:",xe)}}function Zt(){try{u.texSubImage3D.apply(u,arguments)}catch(xe){console.error("THREE.WebGLState:",xe)}}function St(){try{u.compressedTexSubImage2D.apply(u,arguments)}catch(xe){console.error("THREE.WebGLState:",xe)}}function Ft(){try{u.compressedTexSubImage3D.apply(u,arguments)}catch(xe){console.error("THREE.WebGLState:",xe)}}function kn(){try{u.texStorage2D.apply(u,arguments)}catch(xe){console.error("THREE.WebGLState:",xe)}}function at(){try{u.texStorage3D.apply(u,arguments)}catch(xe){console.error("THREE.WebGLState:",xe)}}function Vt(){try{u.texImage2D.apply(u,arguments)}catch(xe){console.error("THREE.WebGLState:",xe)}}function un(){try{u.texImage3D.apply(u,arguments)}catch(xe){console.error("THREE.WebGLState:",xe)}}function Mn(xe){ri.equals(xe)===!1&&(u.scissor(xe.x,xe.y,xe.z,xe.w),ri.copy(xe))}function Ht(xe){qe.equals(xe)===!1&&(u.viewport(xe.x,xe.y,xe.z,xe.w),qe.copy(xe))}function Yn(xe,bt){let ke=y.get(bt);ke===void 0&&(ke=new WeakMap,y.set(bt,ke));let Ke=ke.get(xe);Ke===void 0&&(Ke=u.getUniformBlockIndex(bt,xe.name),ke.set(xe,Ke))}function Dn(xe,bt){const Ke=y.get(bt).get(xe);g.get(bt)!==Ke&&(u.uniformBlockBinding(bt,Ke,xe.__bindingPointIndex),g.set(bt,Ke))}function yi(){u.disable(u.BLEND),u.disable(u.CULL_FACE),u.disable(u.DEPTH_TEST),u.disable(u.POLYGON_OFFSET_FILL),u.disable(u.SCISSOR_TEST),u.disable(u.STENCIL_TEST),u.disable(u.SAMPLE_ALPHA_TO_COVERAGE),u.blendEquation(u.FUNC_ADD),u.blendFunc(u.ONE,u.ZERO),u.blendFuncSeparate(u.ONE,u.ZERO,u.ONE,u.ZERO),u.blendColor(0,0,0,0),u.colorMask(!0,!0,!0,!0),u.clearColor(0,0,0,0),u.depthMask(!0),u.depthFunc(u.LESS),f.setReversed(!1),u.clearDepth(1),u.stencilMask(4294967295),u.stencilFunc(u.ALWAYS,0,4294967295),u.stencilOp(u.KEEP,u.KEEP,u.KEEP),u.clearStencil(0),u.cullFace(u.BACK),u.frontFace(u.CCW),u.polygonOffset(0,0),u.activeTexture(u.TEXTURE0),u.bindFramebuffer(u.FRAMEBUFFER,null),u.bindFramebuffer(u.DRAW_FRAMEBUFFER,null),u.bindFramebuffer(u.READ_FRAMEBUFFER,null),u.useProgram(null),u.lineWidth(1),u.scissor(0,0,u.canvas.width,u.canvas.height),u.viewport(0,0,u.canvas.width,u.canvas.height),S={},yt=null,Ut={},w={},T=new WeakMap,R=[],I=null,F=!1,D=null,C=null,q=null,G=null,H=null,le=null,ne=null,oe=new It(0,0,0),ce=0,Q=!1,Z=null,he=null,Ue=null,Pe=null,Ne=null,ri.set(0,0,u.canvas.width,u.canvas.height),qe.set(0,0,u.canvas.width,u.canvas.height),h.reset(),f.reset(),m.reset()}return{buffers:{color:h,depth:f,stencil:m},enable:pt,disable:rn,bindFramebuffer:xn,drawBuffers:_n,useProgram:Jn,setBlending:se,setMaterial:jt,setFlipSided:rt,setCullFace:Bt,setLineWidth:ht,setPolygonOffset:dn,setScissorTest:Rt,activeTexture:ie,bindTexture:$,unbindTexture:Te,compressedTexImage2D:We,compressedTexImage3D:Qe,texImage2D:Vt,texImage3D:un,updateUBOMapping:Yn,uniformBlockBinding:Dn,texStorage2D:kn,texStorage3D:at,texSubImage2D:Xe,texSubImage3D:Zt,compressedTexSubImage2D:St,compressedTexSubImage3D:Ft,scissor:Mn,viewport:Ht,reset:yi}}function V2(u,e,i,s,l,h,f){const m=e.has("WEBGL_multisampled_render_to_texture")?e.get("WEBGL_multisampled_render_to_texture"):null,g=typeof navigator>"u"?!1:/OculusBrowser/g.test(navigator.userAgent),y=new Ze,S=new WeakMap;let w;const T=new WeakMap;let R=!1;try{R=typeof OffscreenCanvas<"u"&&new OffscreenCanvas(1,1).getContext("2d")!==null}catch{}function I(ie,$){return R?new OffscreenCanvas(ie,$):zh("canvas")}function F(ie,$,Te){let We=1;const Qe=Rt(ie);if((Qe.width>Te||Qe.height>Te)&&(We=Te/Math.max(Qe.width,Qe.height)),We<1)if(typeof HTMLImageElement<"u"&&ie instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&ie instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&ie instanceof ImageBitmap||typeof VideoFrame<"u"&&ie instanceof VideoFrame){const Xe=Math.floor(We*Qe.width),Zt=Math.floor(We*Qe.height);w===void 0&&(w=I(Xe,Zt));const St=$?I(Xe,Zt):w;return St.width=Xe,St.height=Zt,St.getContext("2d").drawImage(ie,0,0,Xe,Zt),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+Qe.width+"x"+Qe.height+") to ("+Xe+"x"+Zt+")."),St}else return"data"in ie&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+Qe.width+"x"+Qe.height+")."),ie;return ie}function D(ie){return ie.generateMipmaps}function C(ie){u.generateMipmap(ie)}function q(ie){return ie.isWebGLCubeRenderTarget?u.TEXTURE_CUBE_MAP:ie.isWebGL3DRenderTarget?u.TEXTURE_3D:ie.isWebGLArrayRenderTarget||ie.isCompressedArrayTexture?u.TEXTURE_2D_ARRAY:u.TEXTURE_2D}function G(ie,$,Te,We,Qe=!1){if(ie!==null){if(u[ie]!==void 0)return u[ie];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+ie+"'")}let Xe=$;if($===u.RED&&(Te===u.FLOAT&&(Xe=u.R32F),Te===u.HALF_FLOAT&&(Xe=u.R16F),Te===u.UNSIGNED_BYTE&&(Xe=u.R8)),$===u.RED_INTEGER&&(Te===u.UNSIGNED_BYTE&&(Xe=u.R8UI),Te===u.UNSIGNED_SHORT&&(Xe=u.R16UI),Te===u.UNSIGNED_INT&&(Xe=u.R32UI),Te===u.BYTE&&(Xe=u.R8I),Te===u.SHORT&&(Xe=u.R16I),Te===u.INT&&(Xe=u.R32I)),$===u.RG&&(Te===u.FLOAT&&(Xe=u.RG32F),Te===u.HALF_FLOAT&&(Xe=u.RG16F),Te===u.UNSIGNED_BYTE&&(Xe=u.RG8)),$===u.RG_INTEGER&&(Te===u.UNSIGNED_BYTE&&(Xe=u.RG8UI),Te===u.UNSIGNED_SHORT&&(Xe=u.RG16UI),Te===u.UNSIGNED_INT&&(Xe=u.RG32UI),Te===u.BYTE&&(Xe=u.RG8I),Te===u.SHORT&&(Xe=u.RG16I),Te===u.INT&&(Xe=u.RG32I)),$===u.RGB_INTEGER&&(Te===u.UNSIGNED_BYTE&&(Xe=u.RGB8UI),Te===u.UNSIGNED_SHORT&&(Xe=u.RGB16UI),Te===u.UNSIGNED_INT&&(Xe=u.RGB32UI),Te===u.BYTE&&(Xe=u.RGB8I),Te===u.SHORT&&(Xe=u.RGB16I),Te===u.INT&&(Xe=u.RGB32I)),$===u.RGBA_INTEGER&&(Te===u.UNSIGNED_BYTE&&(Xe=u.RGBA8UI),Te===u.UNSIGNED_SHORT&&(Xe=u.RGBA16UI),Te===u.UNSIGNED_INT&&(Xe=u.RGBA32UI),Te===u.BYTE&&(Xe=u.RGBA8I),Te===u.SHORT&&(Xe=u.RGBA16I),Te===u.INT&&(Xe=u.RGBA32I)),$===u.RGB&&Te===u.UNSIGNED_INT_5_9_9_9_REV&&(Xe=u.RGB9_E5),$===u.RGBA){const Zt=Qe?Nh:qn.getTransfer(We);Te===u.FLOAT&&(Xe=u.RGBA32F),Te===u.HALF_FLOAT&&(Xe=u.RGBA16F),Te===u.UNSIGNED_BYTE&&(Xe=Zt===li?u.SRGB8_ALPHA8:u.RGBA8),Te===u.UNSIGNED_SHORT_4_4_4_4&&(Xe=u.RGBA4),Te===u.UNSIGNED_SHORT_5_5_5_1&&(Xe=u.RGB5_A1)}return(Xe===u.R16F||Xe===u.R32F||Xe===u.RG16F||Xe===u.RG32F||Xe===u.RGBA16F||Xe===u.RGBA32F)&&e.get("EXT_color_buffer_float"),Xe}function H(ie,$){let Te;return ie?$===null||$===Bi||$===Ds?Te=u.DEPTH24_STENCIL8:$===Si?Te=u.DEPTH32F_STENCIL8:$===Ai&&(Te=u.DEPTH24_STENCIL8,console.warn("DepthTexture: 16 bit depth attachment is not supported with stencil. Using 24-bit attachment.")):$===null||$===Bi||$===Ds?Te=u.DEPTH_COMPONENT24:$===Si?Te=u.DEPTH_COMPONENT32F:$===Ai&&(Te=u.DEPTH_COMPONENT16),Te}function le(ie,$){return D(ie)===!0||ie.isFramebufferTexture&&ie.minFilter!==kt&&ie.minFilter!==pe?Math.log2(Math.max($.width,$.height))+1:ie.mipmaps!==void 0&&ie.mipmaps.length>0?ie.mipmaps.length:ie.isCompressedTexture&&Array.isArray(ie.image)?$.mipmaps.length:1}function ne(ie){const $=ie.target;$.removeEventListener("dispose",ne),ce($),$.isVideoTexture&&S.delete($)}function oe(ie){const $=ie.target;$.removeEventListener("dispose",oe),Z($)}function ce(ie){const $=s.get(ie);if($.__webglInit===void 0)return;const Te=ie.source,We=T.get(Te);if(We){const Qe=We[$.__cacheKey];Qe.usedTimes--,Qe.usedTimes===0&&Q(ie),Object.keys(We).length===0&&T.delete(Te)}s.remove(ie)}function Q(ie){const $=s.get(ie);u.deleteTexture($.__webglTexture);const Te=ie.source,We=T.get(Te);delete We[$.__cacheKey],f.memory.textures--}function Z(ie){const $=s.get(ie);if(ie.depthTexture&&(ie.depthTexture.dispose(),s.remove(ie.depthTexture)),ie.isWebGLCubeRenderTarget)for(let We=0;We<6;We++){if(Array.isArray($.__webglFramebuffer[We]))for(let Qe=0;Qe<$.__webglFramebuffer[We].length;Qe++)u.deleteFramebuffer($.__webglFramebuffer[We][Qe]);else u.deleteFramebuffer($.__webglFramebuffer[We]);$.__webglDepthbuffer&&u.deleteRenderbuffer($.__webglDepthbuffer[We])}else{if(Array.isArray($.__webglFramebuffer))for(let We=0;We<$.__webglFramebuffer.length;We++)u.deleteFramebuffer($.__webglFramebuffer[We]);else u.deleteFramebuffer($.__webglFramebuffer);if($.__webglDepthbuffer&&u.deleteRenderbuffer($.__webglDepthbuffer),$.__webglMultisampledFramebuffer&&u.deleteFramebuffer($.__webglMultisampledFramebuffer),$.__webglColorRenderbuffer)for(let We=0;We<$.__webglColorRenderbuffer.length;We++)$.__webglColorRenderbuffer[We]&&u.deleteRenderbuffer($.__webglColorRenderbuffer[We]);$.__webglDepthRenderbuffer&&u.deleteRenderbuffer($.__webglDepthRenderbuffer)}const Te=ie.textures;for(let We=0,Qe=Te.length;We<Qe;We++){const Xe=s.get(Te[We]);Xe.__webglTexture&&(u.deleteTexture(Xe.__webglTexture),f.memory.textures--),s.remove(Te[We])}s.remove(ie)}let he=0;function Ue(){he=0}function Pe(){const ie=he;return ie>=l.maxTextures&&console.warn("THREE.WebGLTextures: Trying to use "+ie+" texture units while this GPU supports only "+l.maxTextures),he+=1,ie}function Ne(ie){const $=[];return $.push(ie.wrapS),$.push(ie.wrapT),$.push(ie.wrapR||0),$.push(ie.magFilter),$.push(ie.minFilter),$.push(ie.anisotropy),$.push(ie.internalFormat),$.push(ie.format),$.push(ie.type),$.push(ie.generateMipmaps),$.push(ie.premultiplyAlpha),$.push(ie.flipY),$.push(ie.unpackAlignment),$.push(ie.colorSpace),$.join()}function $e(ie,$){const Te=s.get(ie);if(ie.isVideoTexture&&ht(ie),ie.isRenderTargetTexture===!1&&ie.version>0&&Te.__version!==ie.version){const We=ie.image;if(We===null)console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");else if(We.complete===!1)console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");else{qe(Te,ie,$);return}}i.bindTexture(u.TEXTURE_2D,Te.__webglTexture,u.TEXTURE0+$)}function Oe(ie,$){const Te=s.get(ie);if(ie.version>0&&Te.__version!==ie.version){qe(Te,ie,$);return}i.bindTexture(u.TEXTURE_2D_ARRAY,Te.__webglTexture,u.TEXTURE0+$)}function ot(ie,$){const Te=s.get(ie);if(ie.version>0&&Te.__version!==ie.version){qe(Te,ie,$);return}i.bindTexture(u.TEXTURE_3D,Te.__webglTexture,u.TEXTURE0+$)}function ze(ie,$){const Te=s.get(ie);if(ie.version>0&&Te.__version!==ie.version){dt(Te,ie,$);return}i.bindTexture(u.TEXTURE_CUBE_MAP,Te.__webglTexture,u.TEXTURE0+$)}const yt={[it]:u.REPEAT,[xt]:u.CLAMP_TO_EDGE,[tn]:u.MIRRORED_REPEAT},Ut={[kt]:u.NEAREST,[Nt]:u.NEAREST_MIPMAP_NEAREST,[mn]:u.NEAREST_MIPMAP_LINEAR,[pe]:u.LINEAR,[mt]:u.LINEAR_MIPMAP_NEAREST,[Ge]:u.LINEAR_MIPMAP_LINEAR},Wt={[Zx]:u.NEVER,[ev]:u.ALWAYS,[$x]:u.LESS,[mm]:u.LEQUAL,[Kx]:u.EQUAL,[Qx]:u.GEQUAL,[Jx]:u.GREATER,[jx]:u.NOTEQUAL};function An(ie,$){if($.type===Si&&e.has("OES_texture_float_linear")===!1&&($.magFilter===pe||$.magFilter===mt||$.magFilter===mn||$.magFilter===Ge||$.minFilter===pe||$.minFilter===mt||$.minFilter===mn||$.minFilter===Ge)&&console.warn("THREE.WebGLRenderer: Unable to use linear filtering with floating point textures. OES_texture_float_linear not supported on this device."),u.texParameteri(ie,u.TEXTURE_WRAP_S,yt[$.wrapS]),u.texParameteri(ie,u.TEXTURE_WRAP_T,yt[$.wrapT]),(ie===u.TEXTURE_3D||ie===u.TEXTURE_2D_ARRAY)&&u.texParameteri(ie,u.TEXTURE_WRAP_R,yt[$.wrapR]),u.texParameteri(ie,u.TEXTURE_MAG_FILTER,Ut[$.magFilter]),u.texParameteri(ie,u.TEXTURE_MIN_FILTER,Ut[$.minFilter]),$.compareFunction&&(u.texParameteri(ie,u.TEXTURE_COMPARE_MODE,u.COMPARE_REF_TO_TEXTURE),u.texParameteri(ie,u.TEXTURE_COMPARE_FUNC,Wt[$.compareFunction])),e.has("EXT_texture_filter_anisotropic")===!0){if($.magFilter===kt||$.minFilter!==mn&&$.minFilter!==Ge||$.type===Si&&e.has("OES_texture_float_linear")===!1)return;if($.anisotropy>1||s.get($).__currentAnisotropy){const Te=e.get("EXT_texture_filter_anisotropic");u.texParameterf(ie,Te.TEXTURE_MAX_ANISOTROPY_EXT,Math.min($.anisotropy,l.getMaxAnisotropy())),s.get($).__currentAnisotropy=$.anisotropy}}}function ri(ie,$){let Te=!1;ie.__webglInit===void 0&&(ie.__webglInit=!0,$.addEventListener("dispose",ne));const We=$.source;let Qe=T.get(We);Qe===void 0&&(Qe={},T.set(We,Qe));const Xe=Ne($);if(Xe!==ie.__cacheKey){Qe[Xe]===void 0&&(Qe[Xe]={texture:u.createTexture(),usedTimes:0},f.memory.textures++,Te=!0),Qe[Xe].usedTimes++;const Zt=Qe[ie.__cacheKey];Zt!==void 0&&(Qe[ie.__cacheKey].usedTimes--,Zt.usedTimes===0&&Q($)),ie.__cacheKey=Xe,ie.__webglTexture=Qe[Xe].texture}return Te}function qe(ie,$,Te){let We=u.TEXTURE_2D;($.isDataArrayTexture||$.isCompressedArrayTexture)&&(We=u.TEXTURE_2D_ARRAY),$.isData3DTexture&&(We=u.TEXTURE_3D);const Qe=ri(ie,$),Xe=$.source;i.bindTexture(We,ie.__webglTexture,u.TEXTURE0+Te);const Zt=s.get(Xe);if(Xe.version!==Zt.__version||Qe===!0){i.activeTexture(u.TEXTURE0+Te);const St=qn.getPrimaries(qn.workingColorSpace),Ft=$.colorSpace===ga?null:qn.getPrimaries($.colorSpace),kn=$.colorSpace===ga||St===Ft?u.NONE:u.BROWSER_DEFAULT_WEBGL;u.pixelStorei(u.UNPACK_FLIP_Y_WEBGL,$.flipY),u.pixelStorei(u.UNPACK_PREMULTIPLY_ALPHA_WEBGL,$.premultiplyAlpha),u.pixelStorei(u.UNPACK_ALIGNMENT,$.unpackAlignment),u.pixelStorei(u.UNPACK_COLORSPACE_CONVERSION_WEBGL,kn);let at=F($.image,!1,l.maxTextureSize);at=dn($,at);const Vt=h.convert($.format,$.colorSpace),un=h.convert($.type);let Mn=G($.internalFormat,Vt,un,$.colorSpace,$.isVideoTexture);An(We,$);let Ht;const Yn=$.mipmaps,Dn=$.isVideoTexture!==!0,yi=Zt.__version===void 0||Qe===!0,xe=Xe.dataReady,bt=le($,at);if($.isDepthTexture)Mn=H($.format===_a,$.type),yi&&(Dn?i.texStorage2D(u.TEXTURE_2D,1,Mn,at.width,at.height):i.texImage2D(u.TEXTURE_2D,0,Mn,at.width,at.height,0,Vt,un,null));else if($.isDataTexture)if(Yn.length>0){Dn&&yi&&i.texStorage2D(u.TEXTURE_2D,bt,Mn,Yn[0].width,Yn[0].height);for(let ke=0,Ke=Yn.length;ke<Ke;ke++)Ht=Yn[ke],Dn?xe&&i.texSubImage2D(u.TEXTURE_2D,ke,0,0,Ht.width,Ht.height,Vt,un,Ht.data):i.texImage2D(u.TEXTURE_2D,ke,Mn,Ht.width,Ht.height,0,Vt,un,Ht.data);$.generateMipmaps=!1}else Dn?(yi&&i.texStorage2D(u.TEXTURE_2D,bt,Mn,at.width,at.height),xe&&i.texSubImage2D(u.TEXTURE_2D,0,0,0,at.width,at.height,Vt,un,at.data)):i.texImage2D(u.TEXTURE_2D,0,Mn,at.width,at.height,0,Vt,un,at.data);else if($.isCompressedTexture)if($.isCompressedArrayTexture){Dn&&yi&&i.texStorage3D(u.TEXTURE_2D_ARRAY,bt,Mn,Yn[0].width,Yn[0].height,at.depth);for(let ke=0,Ke=Yn.length;ke<Ke;ke++)if(Ht=Yn[ke],$.format!==tr)if(Vt!==null)if(Dn){if(xe)if($.layerUpdates.size>0){const Dt=P_(Ht.width,Ht.height,$.format,$.type);for(const Ct of $.layerUpdates){const Pn=Ht.data.subarray(Ct*Dt/Ht.data.BYTES_PER_ELEMENT,(Ct+1)*Dt/Ht.data.BYTES_PER_ELEMENT);i.compressedTexSubImage3D(u.TEXTURE_2D_ARRAY,ke,0,0,Ct,Ht.width,Ht.height,1,Vt,Pn)}$.clearLayerUpdates()}else i.compressedTexSubImage3D(u.TEXTURE_2D_ARRAY,ke,0,0,0,Ht.width,Ht.height,at.depth,Vt,Ht.data)}else i.compressedTexImage3D(u.TEXTURE_2D_ARRAY,ke,Mn,Ht.width,Ht.height,at.depth,0,Ht.data,0,0);else console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");else Dn?xe&&i.texSubImage3D(u.TEXTURE_2D_ARRAY,ke,0,0,0,Ht.width,Ht.height,at.depth,Vt,un,Ht.data):i.texImage3D(u.TEXTURE_2D_ARRAY,ke,Mn,Ht.width,Ht.height,at.depth,0,Vt,un,Ht.data)}else{Dn&&yi&&i.texStorage2D(u.TEXTURE_2D,bt,Mn,Yn[0].width,Yn[0].height);for(let ke=0,Ke=Yn.length;ke<Ke;ke++)Ht=Yn[ke],$.format!==tr?Vt!==null?Dn?xe&&i.compressedTexSubImage2D(u.TEXTURE_2D,ke,0,0,Ht.width,Ht.height,Vt,Ht.data):i.compressedTexImage2D(u.TEXTURE_2D,ke,Mn,Ht.width,Ht.height,0,Ht.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):Dn?xe&&i.texSubImage2D(u.TEXTURE_2D,ke,0,0,Ht.width,Ht.height,Vt,un,Ht.data):i.texImage2D(u.TEXTURE_2D,ke,Mn,Ht.width,Ht.height,0,Vt,un,Ht.data)}else if($.isDataArrayTexture)if(Dn){if(yi&&i.texStorage3D(u.TEXTURE_2D_ARRAY,bt,Mn,at.width,at.height,at.depth),xe)if($.layerUpdates.size>0){const ke=P_(at.width,at.height,$.format,$.type);for(const Ke of $.layerUpdates){const Dt=at.data.subarray(Ke*ke/at.data.BYTES_PER_ELEMENT,(Ke+1)*ke/at.data.BYTES_PER_ELEMENT);i.texSubImage3D(u.TEXTURE_2D_ARRAY,0,0,0,Ke,at.width,at.height,1,Vt,un,Dt)}$.clearLayerUpdates()}else i.texSubImage3D(u.TEXTURE_2D_ARRAY,0,0,0,0,at.width,at.height,at.depth,Vt,un,at.data)}else i.texImage3D(u.TEXTURE_2D_ARRAY,0,Mn,at.width,at.height,at.depth,0,Vt,un,at.data);else if($.isData3DTexture)Dn?(yi&&i.texStorage3D(u.TEXTURE_3D,bt,Mn,at.width,at.height,at.depth),xe&&i.texSubImage3D(u.TEXTURE_3D,0,0,0,0,at.width,at.height,at.depth,Vt,un,at.data)):i.texImage3D(u.TEXTURE_3D,0,Mn,at.width,at.height,at.depth,0,Vt,un,at.data);else if($.isFramebufferTexture){if(yi)if(Dn)i.texStorage2D(u.TEXTURE_2D,bt,Mn,at.width,at.height);else{let ke=at.width,Ke=at.height;for(let Dt=0;Dt<bt;Dt++)i.texImage2D(u.TEXTURE_2D,Dt,Mn,ke,Ke,0,Vt,un,null),ke>>=1,Ke>>=1}}else if(Yn.length>0){if(Dn&&yi){const ke=Rt(Yn[0]);i.texStorage2D(u.TEXTURE_2D,bt,Mn,ke.width,ke.height)}for(let ke=0,Ke=Yn.length;ke<Ke;ke++)Ht=Yn[ke],Dn?xe&&i.texSubImage2D(u.TEXTURE_2D,ke,0,0,Vt,un,Ht):i.texImage2D(u.TEXTURE_2D,ke,Mn,Vt,un,Ht);$.generateMipmaps=!1}else if(Dn){if(yi){const ke=Rt(at);i.texStorage2D(u.TEXTURE_2D,bt,Mn,ke.width,ke.height)}xe&&i.texSubImage2D(u.TEXTURE_2D,0,0,0,Vt,un,at)}else i.texImage2D(u.TEXTURE_2D,0,Mn,Vt,un,at);D($)&&C(We),Zt.__version=Xe.version,$.onUpdate&&$.onUpdate($)}ie.__version=$.version}function dt(ie,$,Te){if($.image.length!==6)return;const We=ri(ie,$),Qe=$.source;i.bindTexture(u.TEXTURE_CUBE_MAP,ie.__webglTexture,u.TEXTURE0+Te);const Xe=s.get(Qe);if(Qe.version!==Xe.__version||We===!0){i.activeTexture(u.TEXTURE0+Te);const Zt=qn.getPrimaries(qn.workingColorSpace),St=$.colorSpace===ga?null:qn.getPrimaries($.colorSpace),Ft=$.colorSpace===ga||Zt===St?u.NONE:u.BROWSER_DEFAULT_WEBGL;u.pixelStorei(u.UNPACK_FLIP_Y_WEBGL,$.flipY),u.pixelStorei(u.UNPACK_PREMULTIPLY_ALPHA_WEBGL,$.premultiplyAlpha),u.pixelStorei(u.UNPACK_ALIGNMENT,$.unpackAlignment),u.pixelStorei(u.UNPACK_COLORSPACE_CONVERSION_WEBGL,Ft);const kn=$.isCompressedTexture||$.image[0].isCompressedTexture,at=$.image[0]&&$.image[0].isDataTexture,Vt=[];for(let Ke=0;Ke<6;Ke++)!kn&&!at?Vt[Ke]=F($.image[Ke],!0,l.maxCubemapSize):Vt[Ke]=at?$.image[Ke].image:$.image[Ke],Vt[Ke]=dn($,Vt[Ke]);const un=Vt[0],Mn=h.convert($.format,$.colorSpace),Ht=h.convert($.type),Yn=G($.internalFormat,Mn,Ht,$.colorSpace),Dn=$.isVideoTexture!==!0,yi=Xe.__version===void 0||We===!0,xe=Qe.dataReady;let bt=le($,un);An(u.TEXTURE_CUBE_MAP,$);let ke;if(kn){Dn&&yi&&i.texStorage2D(u.TEXTURE_CUBE_MAP,bt,Yn,un.width,un.height);for(let Ke=0;Ke<6;Ke++){ke=Vt[Ke].mipmaps;for(let Dt=0;Dt<ke.length;Dt++){const Ct=ke[Dt];$.format!==tr?Mn!==null?Dn?xe&&i.compressedTexSubImage2D(u.TEXTURE_CUBE_MAP_POSITIVE_X+Ke,Dt,0,0,Ct.width,Ct.height,Mn,Ct.data):i.compressedTexImage2D(u.TEXTURE_CUBE_MAP_POSITIVE_X+Ke,Dt,Yn,Ct.width,Ct.height,0,Ct.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):Dn?xe&&i.texSubImage2D(u.TEXTURE_CUBE_MAP_POSITIVE_X+Ke,Dt,0,0,Ct.width,Ct.height,Mn,Ht,Ct.data):i.texImage2D(u.TEXTURE_CUBE_MAP_POSITIVE_X+Ke,Dt,Yn,Ct.width,Ct.height,0,Mn,Ht,Ct.data)}}}else{if(ke=$.mipmaps,Dn&&yi){ke.length>0&&bt++;const Ke=Rt(Vt[0]);i.texStorage2D(u.TEXTURE_CUBE_MAP,bt,Yn,Ke.width,Ke.height)}for(let Ke=0;Ke<6;Ke++)if(at){Dn?xe&&i.texSubImage2D(u.TEXTURE_CUBE_MAP_POSITIVE_X+Ke,0,0,0,Vt[Ke].width,Vt[Ke].height,Mn,Ht,Vt[Ke].data):i.texImage2D(u.TEXTURE_CUBE_MAP_POSITIVE_X+Ke,0,Yn,Vt[Ke].width,Vt[Ke].height,0,Mn,Ht,Vt[Ke].data);for(let Dt=0;Dt<ke.length;Dt++){const Pn=ke[Dt].image[Ke].image;Dn?xe&&i.texSubImage2D(u.TEXTURE_CUBE_MAP_POSITIVE_X+Ke,Dt+1,0,0,Pn.width,Pn.height,Mn,Ht,Pn.data):i.texImage2D(u.TEXTURE_CUBE_MAP_POSITIVE_X+Ke,Dt+1,Yn,Pn.width,Pn.height,0,Mn,Ht,Pn.data)}}else{Dn?xe&&i.texSubImage2D(u.TEXTURE_CUBE_MAP_POSITIVE_X+Ke,0,0,0,Mn,Ht,Vt[Ke]):i.texImage2D(u.TEXTURE_CUBE_MAP_POSITIVE_X+Ke,0,Yn,Mn,Ht,Vt[Ke]);for(let Dt=0;Dt<ke.length;Dt++){const Ct=ke[Dt];Dn?xe&&i.texSubImage2D(u.TEXTURE_CUBE_MAP_POSITIVE_X+Ke,Dt+1,0,0,Mn,Ht,Ct.image[Ke]):i.texImage2D(u.TEXTURE_CUBE_MAP_POSITIVE_X+Ke,Dt+1,Yn,Mn,Ht,Ct.image[Ke])}}}D($)&&C(u.TEXTURE_CUBE_MAP),Xe.__version=Qe.version,$.onUpdate&&$.onUpdate($)}ie.__version=$.version}function Xt(ie,$,Te,We,Qe,Xe){const Zt=h.convert(Te.format,Te.colorSpace),St=h.convert(Te.type),Ft=G(Te.internalFormat,Zt,St,Te.colorSpace),kn=s.get($),at=s.get(Te);if(at.__renderTarget=$,!kn.__hasExternalTextures){const Vt=Math.max(1,$.width>>Xe),un=Math.max(1,$.height>>Xe);Qe===u.TEXTURE_3D||Qe===u.TEXTURE_2D_ARRAY?i.texImage3D(Qe,Xe,Ft,Vt,un,$.depth,0,Zt,St,null):i.texImage2D(Qe,Xe,Ft,Vt,un,0,Zt,St,null)}i.bindFramebuffer(u.FRAMEBUFFER,ie),Bt($)?m.framebufferTexture2DMultisampleEXT(u.FRAMEBUFFER,We,Qe,at.__webglTexture,0,rt($)):(Qe===u.TEXTURE_2D||Qe>=u.TEXTURE_CUBE_MAP_POSITIVE_X&&Qe<=u.TEXTURE_CUBE_MAP_NEGATIVE_Z)&&u.framebufferTexture2D(u.FRAMEBUFFER,We,Qe,at.__webglTexture,Xe),i.bindFramebuffer(u.FRAMEBUFFER,null)}function pt(ie,$,Te){if(u.bindRenderbuffer(u.RENDERBUFFER,ie),$.depthBuffer){const We=$.depthTexture,Qe=We&&We.isDepthTexture?We.type:null,Xe=H($.stencilBuffer,Qe),Zt=$.stencilBuffer?u.DEPTH_STENCIL_ATTACHMENT:u.DEPTH_ATTACHMENT,St=rt($);Bt($)?m.renderbufferStorageMultisampleEXT(u.RENDERBUFFER,St,Xe,$.width,$.height):Te?u.renderbufferStorageMultisample(u.RENDERBUFFER,St,Xe,$.width,$.height):u.renderbufferStorage(u.RENDERBUFFER,Xe,$.width,$.height),u.framebufferRenderbuffer(u.FRAMEBUFFER,Zt,u.RENDERBUFFER,ie)}else{const We=$.textures;for(let Qe=0;Qe<We.length;Qe++){const Xe=We[Qe],Zt=h.convert(Xe.format,Xe.colorSpace),St=h.convert(Xe.type),Ft=G(Xe.internalFormat,Zt,St,Xe.colorSpace),kn=rt($);Te&&Bt($)===!1?u.renderbufferStorageMultisample(u.RENDERBUFFER,kn,Ft,$.width,$.height):Bt($)?m.renderbufferStorageMultisampleEXT(u.RENDERBUFFER,kn,Ft,$.width,$.height):u.renderbufferStorage(u.RENDERBUFFER,Ft,$.width,$.height)}}u.bindRenderbuffer(u.RENDERBUFFER,null)}function rn(ie,$){if($&&$.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(i.bindFramebuffer(u.FRAMEBUFFER,ie),!($.depthTexture&&$.depthTexture.isDepthTexture))throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");const We=s.get($.depthTexture);We.__renderTarget=$,(!We.__webglTexture||$.depthTexture.image.width!==$.width||$.depthTexture.image.height!==$.height)&&($.depthTexture.image.width=$.width,$.depthTexture.image.height=$.height,$.depthTexture.needsUpdate=!0),$e($.depthTexture,0);const Qe=We.__webglTexture,Xe=rt($);if($.depthTexture.format===Ks)Bt($)?m.framebufferTexture2DMultisampleEXT(u.FRAMEBUFFER,u.DEPTH_ATTACHMENT,u.TEXTURE_2D,Qe,0,Xe):u.framebufferTexture2D(u.FRAMEBUFFER,u.DEPTH_ATTACHMENT,u.TEXTURE_2D,Qe,0);else if($.depthTexture.format===_a)Bt($)?m.framebufferTexture2DMultisampleEXT(u.FRAMEBUFFER,u.DEPTH_STENCIL_ATTACHMENT,u.TEXTURE_2D,Qe,0,Xe):u.framebufferTexture2D(u.FRAMEBUFFER,u.DEPTH_STENCIL_ATTACHMENT,u.TEXTURE_2D,Qe,0);else throw new Error("Unknown depthTexture format")}function xn(ie){const $=s.get(ie),Te=ie.isWebGLCubeRenderTarget===!0;if($.__boundDepthTexture!==ie.depthTexture){const We=ie.depthTexture;if($.__depthDisposeCallback&&$.__depthDisposeCallback(),We){const Qe=()=>{delete $.__boundDepthTexture,delete $.__depthDisposeCallback,We.removeEventListener("dispose",Qe)};We.addEventListener("dispose",Qe),$.__depthDisposeCallback=Qe}$.__boundDepthTexture=We}if(ie.depthTexture&&!$.__autoAllocateDepthBuffer){if(Te)throw new Error("target.depthTexture not supported in Cube render targets");rn($.__webglFramebuffer,ie)}else if(Te){$.__webglDepthbuffer=[];for(let We=0;We<6;We++)if(i.bindFramebuffer(u.FRAMEBUFFER,$.__webglFramebuffer[We]),$.__webglDepthbuffer[We]===void 0)$.__webglDepthbuffer[We]=u.createRenderbuffer(),pt($.__webglDepthbuffer[We],ie,!1);else{const Qe=ie.stencilBuffer?u.DEPTH_STENCIL_ATTACHMENT:u.DEPTH_ATTACHMENT,Xe=$.__webglDepthbuffer[We];u.bindRenderbuffer(u.RENDERBUFFER,Xe),u.framebufferRenderbuffer(u.FRAMEBUFFER,Qe,u.RENDERBUFFER,Xe)}}else if(i.bindFramebuffer(u.FRAMEBUFFER,$.__webglFramebuffer),$.__webglDepthbuffer===void 0)$.__webglDepthbuffer=u.createRenderbuffer(),pt($.__webglDepthbuffer,ie,!1);else{const We=ie.stencilBuffer?u.DEPTH_STENCIL_ATTACHMENT:u.DEPTH_ATTACHMENT,Qe=$.__webglDepthbuffer;u.bindRenderbuffer(u.RENDERBUFFER,Qe),u.framebufferRenderbuffer(u.FRAMEBUFFER,We,u.RENDERBUFFER,Qe)}i.bindFramebuffer(u.FRAMEBUFFER,null)}function _n(ie,$,Te){const We=s.get(ie);$!==void 0&&Xt(We.__webglFramebuffer,ie,ie.texture,u.COLOR_ATTACHMENT0,u.TEXTURE_2D,0),Te!==void 0&&xn(ie)}function Jn(ie){const $=ie.texture,Te=s.get(ie),We=s.get($);ie.addEventListener("dispose",oe);const Qe=ie.textures,Xe=ie.isWebGLCubeRenderTarget===!0,Zt=Qe.length>1;if(Zt||(We.__webglTexture===void 0&&(We.__webglTexture=u.createTexture()),We.__version=$.version,f.memory.textures++),Xe){Te.__webglFramebuffer=[];for(let St=0;St<6;St++)if($.mipmaps&&$.mipmaps.length>0){Te.__webglFramebuffer[St]=[];for(let Ft=0;Ft<$.mipmaps.length;Ft++)Te.__webglFramebuffer[St][Ft]=u.createFramebuffer()}else Te.__webglFramebuffer[St]=u.createFramebuffer()}else{if($.mipmaps&&$.mipmaps.length>0){Te.__webglFramebuffer=[];for(let St=0;St<$.mipmaps.length;St++)Te.__webglFramebuffer[St]=u.createFramebuffer()}else Te.__webglFramebuffer=u.createFramebuffer();if(Zt)for(let St=0,Ft=Qe.length;St<Ft;St++){const kn=s.get(Qe[St]);kn.__webglTexture===void 0&&(kn.__webglTexture=u.createTexture(),f.memory.textures++)}if(ie.samples>0&&Bt(ie)===!1){Te.__webglMultisampledFramebuffer=u.createFramebuffer(),Te.__webglColorRenderbuffer=[],i.bindFramebuffer(u.FRAMEBUFFER,Te.__webglMultisampledFramebuffer);for(let St=0;St<Qe.length;St++){const Ft=Qe[St];Te.__webglColorRenderbuffer[St]=u.createRenderbuffer(),u.bindRenderbuffer(u.RENDERBUFFER,Te.__webglColorRenderbuffer[St]);const kn=h.convert(Ft.format,Ft.colorSpace),at=h.convert(Ft.type),Vt=G(Ft.internalFormat,kn,at,Ft.colorSpace,ie.isXRRenderTarget===!0),un=rt(ie);u.renderbufferStorageMultisample(u.RENDERBUFFER,un,Vt,ie.width,ie.height),u.framebufferRenderbuffer(u.FRAMEBUFFER,u.COLOR_ATTACHMENT0+St,u.RENDERBUFFER,Te.__webglColorRenderbuffer[St])}u.bindRenderbuffer(u.RENDERBUFFER,null),ie.depthBuffer&&(Te.__webglDepthRenderbuffer=u.createRenderbuffer(),pt(Te.__webglDepthRenderbuffer,ie,!0)),i.bindFramebuffer(u.FRAMEBUFFER,null)}}if(Xe){i.bindTexture(u.TEXTURE_CUBE_MAP,We.__webglTexture),An(u.TEXTURE_CUBE_MAP,$);for(let St=0;St<6;St++)if($.mipmaps&&$.mipmaps.length>0)for(let Ft=0;Ft<$.mipmaps.length;Ft++)Xt(Te.__webglFramebuffer[St][Ft],ie,$,u.COLOR_ATTACHMENT0,u.TEXTURE_CUBE_MAP_POSITIVE_X+St,Ft);else Xt(Te.__webglFramebuffer[St],ie,$,u.COLOR_ATTACHMENT0,u.TEXTURE_CUBE_MAP_POSITIVE_X+St,0);D($)&&C(u.TEXTURE_CUBE_MAP),i.unbindTexture()}else if(Zt){for(let St=0,Ft=Qe.length;St<Ft;St++){const kn=Qe[St],at=s.get(kn);i.bindTexture(u.TEXTURE_2D,at.__webglTexture),An(u.TEXTURE_2D,kn),Xt(Te.__webglFramebuffer,ie,kn,u.COLOR_ATTACHMENT0+St,u.TEXTURE_2D,0),D(kn)&&C(u.TEXTURE_2D)}i.unbindTexture()}else{let St=u.TEXTURE_2D;if((ie.isWebGL3DRenderTarget||ie.isWebGLArrayRenderTarget)&&(St=ie.isWebGL3DRenderTarget?u.TEXTURE_3D:u.TEXTURE_2D_ARRAY),i.bindTexture(St,We.__webglTexture),An(St,$),$.mipmaps&&$.mipmaps.length>0)for(let Ft=0;Ft<$.mipmaps.length;Ft++)Xt(Te.__webglFramebuffer[Ft],ie,$,u.COLOR_ATTACHMENT0,St,Ft);else Xt(Te.__webglFramebuffer,ie,$,u.COLOR_ATTACHMENT0,St,0);D($)&&C(St),i.unbindTexture()}ie.depthBuffer&&xn(ie)}function Je(ie){const $=ie.textures;for(let Te=0,We=$.length;Te<We;Te++){const Qe=$[Te];if(D(Qe)){const Xe=q(ie),Zt=s.get(Qe).__webglTexture;i.bindTexture(Xe,Zt),C(Xe),i.unbindTexture()}}}const ct=[],se=[];function jt(ie){if(ie.samples>0){if(Bt(ie)===!1){const $=ie.textures,Te=ie.width,We=ie.height;let Qe=u.COLOR_BUFFER_BIT;const Xe=ie.stencilBuffer?u.DEPTH_STENCIL_ATTACHMENT:u.DEPTH_ATTACHMENT,Zt=s.get(ie),St=$.length>1;if(St)for(let Ft=0;Ft<$.length;Ft++)i.bindFramebuffer(u.FRAMEBUFFER,Zt.__webglMultisampledFramebuffer),u.framebufferRenderbuffer(u.FRAMEBUFFER,u.COLOR_ATTACHMENT0+Ft,u.RENDERBUFFER,null),i.bindFramebuffer(u.FRAMEBUFFER,Zt.__webglFramebuffer),u.framebufferTexture2D(u.DRAW_FRAMEBUFFER,u.COLOR_ATTACHMENT0+Ft,u.TEXTURE_2D,null,0);i.bindFramebuffer(u.READ_FRAMEBUFFER,Zt.__webglMultisampledFramebuffer),i.bindFramebuffer(u.DRAW_FRAMEBUFFER,Zt.__webglFramebuffer);for(let Ft=0;Ft<$.length;Ft++){if(ie.resolveDepthBuffer&&(ie.depthBuffer&&(Qe|=u.DEPTH_BUFFER_BIT),ie.stencilBuffer&&ie.resolveStencilBuffer&&(Qe|=u.STENCIL_BUFFER_BIT)),St){u.framebufferRenderbuffer(u.READ_FRAMEBUFFER,u.COLOR_ATTACHMENT0,u.RENDERBUFFER,Zt.__webglColorRenderbuffer[Ft]);const kn=s.get($[Ft]).__webglTexture;u.framebufferTexture2D(u.DRAW_FRAMEBUFFER,u.COLOR_ATTACHMENT0,u.TEXTURE_2D,kn,0)}u.blitFramebuffer(0,0,Te,We,0,0,Te,We,Qe,u.NEAREST),g===!0&&(ct.length=0,se.length=0,ct.push(u.COLOR_ATTACHMENT0+Ft),ie.depthBuffer&&ie.resolveDepthBuffer===!1&&(ct.push(Xe),se.push(Xe),u.invalidateFramebuffer(u.DRAW_FRAMEBUFFER,se)),u.invalidateFramebuffer(u.READ_FRAMEBUFFER,ct))}if(i.bindFramebuffer(u.READ_FRAMEBUFFER,null),i.bindFramebuffer(u.DRAW_FRAMEBUFFER,null),St)for(let Ft=0;Ft<$.length;Ft++){i.bindFramebuffer(u.FRAMEBUFFER,Zt.__webglMultisampledFramebuffer),u.framebufferRenderbuffer(u.FRAMEBUFFER,u.COLOR_ATTACHMENT0+Ft,u.RENDERBUFFER,Zt.__webglColorRenderbuffer[Ft]);const kn=s.get($[Ft]).__webglTexture;i.bindFramebuffer(u.FRAMEBUFFER,Zt.__webglFramebuffer),u.framebufferTexture2D(u.DRAW_FRAMEBUFFER,u.COLOR_ATTACHMENT0+Ft,u.TEXTURE_2D,kn,0)}i.bindFramebuffer(u.DRAW_FRAMEBUFFER,Zt.__webglMultisampledFramebuffer)}else if(ie.depthBuffer&&ie.resolveDepthBuffer===!1&&g){const $=ie.stencilBuffer?u.DEPTH_STENCIL_ATTACHMENT:u.DEPTH_ATTACHMENT;u.invalidateFramebuffer(u.DRAW_FRAMEBUFFER,[$])}}}function rt(ie){return Math.min(l.maxSamples,ie.samples)}function Bt(ie){const $=s.get(ie);return ie.samples>0&&e.has("WEBGL_multisampled_render_to_texture")===!0&&$.__useRenderToTexture!==!1}function ht(ie){const $=f.render.frame;S.get(ie)!==$&&(S.set(ie,$),ie.update())}function dn(ie,$){const Te=ie.colorSpace,We=ie.format,Qe=ie.type;return ie.isCompressedTexture===!0||ie.isVideoTexture===!0||Te!==Ho&&Te!==ga&&(qn.getTransfer(Te)===li?(We!==tr||Qe!==ft)&&console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType."):console.error("THREE.WebGLTextures: Unsupported texture color space:",Te)),$}function Rt(ie){return typeof HTMLImageElement<"u"&&ie instanceof HTMLImageElement?(y.width=ie.naturalWidth||ie.width,y.height=ie.naturalHeight||ie.height):typeof VideoFrame<"u"&&ie instanceof VideoFrame?(y.width=ie.displayWidth,y.height=ie.displayHeight):(y.width=ie.width,y.height=ie.height),y}this.allocateTextureUnit=Pe,this.resetTextureUnits=Ue,this.setTexture2D=$e,this.setTexture2DArray=Oe,this.setTexture3D=ot,this.setTextureCube=ze,this.rebindTextures=_n,this.setupRenderTarget=Jn,this.updateRenderTargetMipmap=Je,this.updateMultisampleRenderTarget=jt,this.setupDepthRenderbuffer=xn,this.setupFrameBufferTexture=Xt,this.useMultisampledRTT=Bt}function VM(u,e){function i(s,l=ga){let h;const f=qn.getTransfer(l);if(s===ft)return u.UNSIGNED_BYTE;if(s===Oo)return u.UNSIGNED_SHORT_4_4_4_4;if(s===gs)return u.UNSIGNED_SHORT_5_5_5_1;if(s===$l)return u.UNSIGNED_INT_5_9_9_9_REV;if(s===yn)return u.BYTE;if(s===vi)return u.SHORT;if(s===Ai)return u.UNSIGNED_SHORT;if(s===Xn)return u.INT;if(s===Bi)return u.UNSIGNED_INT;if(s===Si)return u.FLOAT;if(s===ma)return u.HALF_FLOAT;if(s===Kl)return u.ALPHA;if(s===Za)return u.RGB;if(s===tr)return u.RGBA;if(s===$a)return u.LUMINANCE;if(s===Jl)return u.LUMINANCE_ALPHA;if(s===Ks)return u.DEPTH_COMPONENT;if(s===_a)return u.DEPTH_STENCIL;if(s===jl)return u.RED;if(s===Bo)return u.RED_INTEGER;if(s===Dh)return u.RG;if(s===Ql)return u.RG_INTEGER;if(s===J)return u.RGBA_INTEGER;if(s===ge||s===Re||s===Ce||s===ve)if(f===li)if(h=e.get("WEBGL_compressed_texture_s3tc_srgb"),h!==null){if(s===ge)return h.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(s===Re)return h.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(s===Ce)return h.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(s===ve)return h.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else return null;else if(h=e.get("WEBGL_compressed_texture_s3tc"),h!==null){if(s===ge)return h.COMPRESSED_RGB_S3TC_DXT1_EXT;if(s===Re)return h.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(s===Ce)return h.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(s===ve)return h.COMPRESSED_RGBA_S3TC_DXT5_EXT}else return null;if(s===tt||s===gt||s===At||s===Lt)if(h=e.get("WEBGL_compressed_texture_pvrtc"),h!==null){if(s===tt)return h.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(s===gt)return h.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(s===At)return h.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(s===Lt)return h.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}else return null;if(s===cn||s===hn||s===Jt)if(h=e.get("WEBGL_compressed_texture_etc"),h!==null){if(s===cn||s===hn)return f===li?h.COMPRESSED_SRGB8_ETC2:h.COMPRESSED_RGB8_ETC2;if(s===Jt)return f===li?h.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:h.COMPRESSED_RGBA8_ETC2_EAC}else return null;if(s===Un||s===Vn||s===Mi||s===gi||s===On||s===en||s===Di||s===Hn||s===pr||s===Ls||s===nr||s===Js||s===oi||s===cr)if(h=e.get("WEBGL_compressed_texture_astc"),h!==null){if(s===Un)return f===li?h.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:h.COMPRESSED_RGBA_ASTC_4x4_KHR;if(s===Vn)return f===li?h.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:h.COMPRESSED_RGBA_ASTC_5x4_KHR;if(s===Mi)return f===li?h.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:h.COMPRESSED_RGBA_ASTC_5x5_KHR;if(s===gi)return f===li?h.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:h.COMPRESSED_RGBA_ASTC_6x5_KHR;if(s===On)return f===li?h.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:h.COMPRESSED_RGBA_ASTC_6x6_KHR;if(s===en)return f===li?h.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:h.COMPRESSED_RGBA_ASTC_8x5_KHR;if(s===Di)return f===li?h.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:h.COMPRESSED_RGBA_ASTC_8x6_KHR;if(s===Hn)return f===li?h.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:h.COMPRESSED_RGBA_ASTC_8x8_KHR;if(s===pr)return f===li?h.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:h.COMPRESSED_RGBA_ASTC_10x5_KHR;if(s===Ls)return f===li?h.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:h.COMPRESSED_RGBA_ASTC_10x6_KHR;if(s===nr)return f===li?h.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:h.COMPRESSED_RGBA_ASTC_10x8_KHR;if(s===Js)return f===li?h.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:h.COMPRESSED_RGBA_ASTC_10x10_KHR;if(s===oi)return f===li?h.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:h.COMPRESSED_RGBA_ASTC_12x10_KHR;if(s===cr)return f===li?h.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:h.COMPRESSED_RGBA_ASTC_12x12_KHR}else return null;if(s===ir||s===Hi||s===$i)if(h=e.get("EXT_texture_compression_bptc"),h!==null){if(s===ir)return f===li?h.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:h.COMPRESSED_RGBA_BPTC_UNORM_EXT;if(s===Hi)return h.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;if(s===$i)return h.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT}else return null;if(s===zo||s===xs||s===gf||s===xf)if(h=e.get("EXT_texture_compression_rgtc"),h!==null){if(s===ir)return h.COMPRESSED_RED_RGTC1_EXT;if(s===xs)return h.COMPRESSED_SIGNED_RED_RGTC1_EXT;if(s===gf)return h.COMPRESSED_RED_GREEN_RGTC2_EXT;if(s===xf)return h.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}else return null;return s===Ds?u.UNSIGNED_INT_24_8:u[s]!==void 0?u[s]:null}return{convert:i}}const H2={type:"move"};class k_{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return this._hand===null&&(this._hand=new Ec,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return this._targetRay===null&&(this._targetRay=new Ec,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new re,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new re),this._targetRay}getGripSpace(){return this._grip===null&&(this._grip=new Ec,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new re,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new re),this._grip}dispatchEvent(e){return this._targetRay!==null&&this._targetRay.dispatchEvent(e),this._grip!==null&&this._grip.dispatchEvent(e),this._hand!==null&&this._hand.dispatchEvent(e),this}connect(e){if(e&&e.hand){const i=this._hand;if(i)for(const s of e.hand.values())this._getHandJoint(i,s)}return this.dispatchEvent({type:"connected",data:e}),this}disconnect(e){return this.dispatchEvent({type:"disconnected",data:e}),this._targetRay!==null&&(this._targetRay.visible=!1),this._grip!==null&&(this._grip.visible=!1),this._hand!==null&&(this._hand.visible=!1),this}update(e,i,s){let l=null,h=null,f=null;const m=this._targetRay,g=this._grip,y=this._hand;if(e&&i.session.visibilityState!=="visible-blurred"){if(y&&e.hand){f=!0;for(const F of e.hand.values()){const D=i.getJointPose(F,s),C=this._getHandJoint(y,F);D!==null&&(C.matrix.fromArray(D.transform.matrix),C.matrix.decompose(C.position,C.rotation,C.scale),C.matrixWorldNeedsUpdate=!0,C.jointRadius=D.radius),C.visible=D!==null}const S=y.joints["index-finger-tip"],w=y.joints["thumb-tip"],T=S.position.distanceTo(w.position),R=.02,I=.005;y.inputState.pinching&&T>R+I?(y.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:e.handedness,target:this})):!y.inputState.pinching&&T<=R-I&&(y.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:e.handedness,target:this}))}else g!==null&&e.gripSpace&&(h=i.getPose(e.gripSpace,s),h!==null&&(g.matrix.fromArray(h.transform.matrix),g.matrix.decompose(g.position,g.rotation,g.scale),g.matrixWorldNeedsUpdate=!0,h.linearVelocity?(g.hasLinearVelocity=!0,g.linearVelocity.copy(h.linearVelocity)):g.hasLinearVelocity=!1,h.angularVelocity?(g.hasAngularVelocity=!0,g.angularVelocity.copy(h.angularVelocity)):g.hasAngularVelocity=!1));m!==null&&(l=i.getPose(e.targetRaySpace,s),l===null&&h!==null&&(l=h),l!==null&&(m.matrix.fromArray(l.transform.matrix),m.matrix.decompose(m.position,m.rotation,m.scale),m.matrixWorldNeedsUpdate=!0,l.linearVelocity?(m.hasLinearVelocity=!0,m.linearVelocity.copy(l.linearVelocity)):m.hasLinearVelocity=!1,l.angularVelocity?(m.hasAngularVelocity=!0,m.angularVelocity.copy(l.angularVelocity)):m.hasAngularVelocity=!1,this.dispatchEvent(H2)))}return m!==null&&(m.visible=l!==null),g!==null&&(g.visible=h!==null),y!==null&&(y.visible=f!==null),this}_getHandJoint(e,i){if(e.joints[i.jointName]===void 0){const s=new Ec;s.matrixAutoUpdate=!1,s.visible=!1,e.joints[i.jointName]=s,e.add(s)}return e.joints[i.jointName]}}const G2=`
void main() {

	gl_Position = vec4( position, 1.0 );

}`,W2=`
uniform sampler2DArray depthColor;
uniform float depthWidth;
uniform float depthHeight;

void main() {

	vec2 coord = vec2( gl_FragCoord.x / depthWidth, gl_FragCoord.y / depthHeight );

	if ( coord.x >= 1.0 ) {

		gl_FragDepth = texture( depthColor, vec3( coord.x - 1.0, coord.y, 1 ) ).r;

	} else {

		gl_FragDepth = texture( depthColor, vec3( coord.x, coord.y, 0 ) ).r;

	}

}`;class X2{constructor(){this.texture=null,this.mesh=null,this.depthNear=0,this.depthFar=0}init(e,i,s){if(this.texture===null){const l=new Li,h=e.properties.get(l);h.__webglTexture=i.texture,(i.depthNear!==s.depthNear||i.depthFar!==s.depthFar)&&(this.depthNear=i.depthNear,this.depthFar=i.depthFar),this.texture=l}}getMesh(e){if(this.texture!==null&&this.mesh===null){const i=e.cameras[0].viewport,s=new Bs({vertexShader:G2,fragmentShader:W2,uniforms:{depthColor:{value:this.texture},depthWidth:{value:i.z},depthHeight:{value:i.w}}});this.mesh=new Wi(new Ac(20,20),s)}return this.mesh}reset(){this.texture=null,this.mesh=null}getDepthTexture(){return this.texture}}class q2 extends js{constructor(e,i){super();const s=this;let l=null,h=1,f=null,m="local-floor",g=1,y=null,S=null,w=null,T=null,R=null,I=null;const F=new X2,D=i.getContextAttributes();let C=null,q=null;const G=[],H=[],le=new Ze;let ne=null;const oe=new hr;oe.viewport=new Zn;const ce=new hr;ce.viewport=new Zn;const Q=[oe,ce],Z=new Zy;let he=null,Ue=null;this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(qe){let dt=G[qe];return dt===void 0&&(dt=new k_,G[qe]=dt),dt.getTargetRaySpace()},this.getControllerGrip=function(qe){let dt=G[qe];return dt===void 0&&(dt=new k_,G[qe]=dt),dt.getGripSpace()},this.getHand=function(qe){let dt=G[qe];return dt===void 0&&(dt=new k_,G[qe]=dt),dt.getHandSpace()};function Pe(qe){const dt=H.indexOf(qe.inputSource);if(dt===-1)return;const Xt=G[dt];Xt!==void 0&&(Xt.update(qe.inputSource,qe.frame,y||f),Xt.dispatchEvent({type:qe.type,data:qe.inputSource}))}function Ne(){l.removeEventListener("select",Pe),l.removeEventListener("selectstart",Pe),l.removeEventListener("selectend",Pe),l.removeEventListener("squeeze",Pe),l.removeEventListener("squeezestart",Pe),l.removeEventListener("squeezeend",Pe),l.removeEventListener("end",Ne),l.removeEventListener("inputsourceschange",$e);for(let qe=0;qe<G.length;qe++){const dt=H[qe];dt!==null&&(H[qe]=null,G[qe].disconnect(dt))}he=null,Ue=null,F.reset(),e.setRenderTarget(C),R=null,T=null,w=null,l=null,q=null,ri.stop(),s.isPresenting=!1,e.setPixelRatio(ne),e.setSize(le.width,le.height,!1),s.dispatchEvent({type:"sessionend"})}this.setFramebufferScaleFactor=function(qe){h=qe,s.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(qe){m=qe,s.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return y||f},this.setReferenceSpace=function(qe){y=qe},this.getBaseLayer=function(){return T!==null?T:R},this.getBinding=function(){return w},this.getFrame=function(){return I},this.getSession=function(){return l},this.setSession=async function(qe){if(l=qe,l!==null){if(C=e.getRenderTarget(),l.addEventListener("select",Pe),l.addEventListener("selectstart",Pe),l.addEventListener("selectend",Pe),l.addEventListener("squeeze",Pe),l.addEventListener("squeezestart",Pe),l.addEventListener("squeezeend",Pe),l.addEventListener("end",Ne),l.addEventListener("inputsourceschange",$e),D.xrCompatible!==!0&&await i.makeXRCompatible(),ne=e.getPixelRatio(),e.getSize(le),l.enabledFeatures!==void 0&&l.enabledFeatures.includes("layers")){let Xt=null,pt=null,rn=null;D.depth&&(rn=D.stencil?i.DEPTH24_STENCIL8:i.DEPTH_COMPONENT24,Xt=D.stencil?_a:Ks,pt=D.stencil?Ds:Bi);const xn={colorFormat:i.RGBA8,depthFormat:rn,scaleFactor:h};w=new XRWebGLBinding(l,i),T=w.createProjectionLayer(xn),l.updateRenderState({layers:[T]}),e.setPixelRatio(1),e.setSize(T.textureWidth,T.textureHeight,!1),q=new Qs(T.textureWidth,T.textureHeight,{format:tr,type:ft,depthTexture:new Jm(T.textureWidth,T.textureHeight,pt,void 0,void 0,void 0,void 0,void 0,void 0,Xt),stencilBuffer:D.stencil,colorSpace:e.outputColorSpace,samples:D.antialias?4:0,resolveDepthBuffer:T.ignoreDepthValues===!1})}else{const Xt={antialias:D.antialias,alpha:!0,depth:D.depth,stencil:D.stencil,framebufferScaleFactor:h};R=new XRWebGLLayer(l,i,Xt),l.updateRenderState({baseLayer:R}),e.setPixelRatio(1),e.setSize(R.framebufferWidth,R.framebufferHeight,!1),q=new Qs(R.framebufferWidth,R.framebufferHeight,{format:tr,type:ft,colorSpace:e.outputColorSpace,stencilBuffer:D.stencil})}q.isXRRenderTarget=!0,this.setFoveation(g),y=null,f=await l.requestReferenceSpace(m),ri.setContext(l),ri.start(),s.isPresenting=!0,s.dispatchEvent({type:"sessionstart"})}},this.getEnvironmentBlendMode=function(){if(l!==null)return l.environmentBlendMode},this.getDepthTexture=function(){return F.getDepthTexture()};function $e(qe){for(let dt=0;dt<qe.removed.length;dt++){const Xt=qe.removed[dt],pt=H.indexOf(Xt);pt>=0&&(H[pt]=null,G[pt].disconnect(Xt))}for(let dt=0;dt<qe.added.length;dt++){const Xt=qe.added[dt];let pt=H.indexOf(Xt);if(pt===-1){for(let xn=0;xn<G.length;xn++)if(xn>=H.length){H.push(Xt),pt=xn;break}else if(H[xn]===null){H[xn]=Xt,pt=xn;break}if(pt===-1)break}const rn=G[pt];rn&&rn.connect(Xt)}}const Oe=new re,ot=new re;function ze(qe,dt,Xt){Oe.setFromMatrixPosition(dt.matrixWorld),ot.setFromMatrixPosition(Xt.matrixWorld);const pt=Oe.distanceTo(ot),rn=dt.projectionMatrix.elements,xn=Xt.projectionMatrix.elements,_n=rn[14]/(rn[10]-1),Jn=rn[14]/(rn[10]+1),Je=(rn[9]+1)/rn[5],ct=(rn[9]-1)/rn[5],se=(rn[8]-1)/rn[0],jt=(xn[8]+1)/xn[0],rt=_n*se,Bt=_n*jt,ht=pt/(-se+jt),dn=ht*-se;if(dt.matrixWorld.decompose(qe.position,qe.quaternion,qe.scale),qe.translateX(dn),qe.translateZ(ht),qe.matrixWorld.compose(qe.position,qe.quaternion,qe.scale),qe.matrixWorldInverse.copy(qe.matrixWorld).invert(),rn[10]===-1)qe.projectionMatrix.copy(dt.projectionMatrix),qe.projectionMatrixInverse.copy(dt.projectionMatrixInverse);else{const Rt=_n+ht,ie=Jn+ht,$=rt-dn,Te=Bt+(pt-dn),We=Je*Jn/ie*Rt,Qe=ct*Jn/ie*Rt;qe.projectionMatrix.makePerspective($,Te,We,Qe,Rt,ie),qe.projectionMatrixInverse.copy(qe.projectionMatrix).invert()}}function yt(qe,dt){dt===null?qe.matrixWorld.copy(qe.matrix):qe.matrixWorld.multiplyMatrices(dt.matrixWorld,qe.matrix),qe.matrixWorldInverse.copy(qe.matrixWorld).invert()}this.updateCamera=function(qe){if(l===null)return;let dt=qe.near,Xt=qe.far;F.texture!==null&&(F.depthNear>0&&(dt=F.depthNear),F.depthFar>0&&(Xt=F.depthFar)),Z.near=ce.near=oe.near=dt,Z.far=ce.far=oe.far=Xt,(he!==Z.near||Ue!==Z.far)&&(l.updateRenderState({depthNear:Z.near,depthFar:Z.far}),he=Z.near,Ue=Z.far),oe.layers.mask=qe.layers.mask|2,ce.layers.mask=qe.layers.mask|4,Z.layers.mask=oe.layers.mask|ce.layers.mask;const pt=qe.parent,rn=Z.cameras;yt(Z,pt);for(let xn=0;xn<rn.length;xn++)yt(rn[xn],pt);rn.length===2?ze(Z,oe,ce):Z.projectionMatrix.copy(oe.projectionMatrix),Ut(qe,Z,pt)};function Ut(qe,dt,Xt){Xt===null?qe.matrix.copy(dt.matrixWorld):(qe.matrix.copy(Xt.matrixWorld),qe.matrix.invert(),qe.matrix.multiply(dt.matrixWorld)),qe.matrix.decompose(qe.position,qe.quaternion,qe.scale),qe.updateMatrixWorld(!0),qe.projectionMatrix.copy(dt.projectionMatrix),qe.projectionMatrixInverse.copy(dt.projectionMatrixInverse),qe.isPerspectiveCamera&&(qe.fov=ec*2*Math.atan(1/qe.projectionMatrix.elements[5]),qe.zoom=1)}this.getCamera=function(){return Z},this.getFoveation=function(){if(!(T===null&&R===null))return g},this.setFoveation=function(qe){g=qe,T!==null&&(T.fixedFoveation=qe),R!==null&&R.fixedFoveation!==void 0&&(R.fixedFoveation=qe)},this.hasDepthSensing=function(){return F.texture!==null},this.getDepthSensingMesh=function(){return F.getMesh(Z)};let Wt=null;function An(qe,dt){if(S=dt.getViewerPose(y||f),I=dt,S!==null){const Xt=S.views;R!==null&&(e.setRenderTargetFramebuffer(q,R.framebuffer),e.setRenderTarget(q));let pt=!1;Xt.length!==Z.cameras.length&&(Z.cameras.length=0,pt=!0);for(let xn=0;xn<Xt.length;xn++){const _n=Xt[xn];let Jn=null;if(R!==null)Jn=R.getViewport(_n);else{const ct=w.getViewSubImage(T,_n);Jn=ct.viewport,xn===0&&(e.setRenderTargetTextures(q,ct.colorTexture,T.ignoreDepthValues?void 0:ct.depthStencilTexture),e.setRenderTarget(q))}let Je=Q[xn];Je===void 0&&(Je=new hr,Je.layers.enable(xn),Je.viewport=new Zn,Q[xn]=Je),Je.matrix.fromArray(_n.transform.matrix),Je.matrix.decompose(Je.position,Je.quaternion,Je.scale),Je.projectionMatrix.fromArray(_n.projectionMatrix),Je.projectionMatrixInverse.copy(Je.projectionMatrix).invert(),Je.viewport.set(Jn.x,Jn.y,Jn.width,Jn.height),xn===0&&(Z.matrix.copy(Je.matrix),Z.matrix.decompose(Z.position,Z.quaternion,Z.scale)),pt===!0&&Z.cameras.push(Je)}const rn=l.enabledFeatures;if(rn&&rn.includes("depth-sensing")){const xn=w.getDepthInformation(Xt[0]);xn&&xn.isValid&&xn.texture&&F.init(e,xn,l.renderState)}}for(let Xt=0;Xt<G.length;Xt++){const pt=H[Xt],rn=G[Xt];pt!==null&&rn!==void 0&&rn.update(pt,dt,y||f)}Wt&&Wt(qe,dt),dt.detectedPlanes&&s.dispatchEvent({type:"planesdetected",data:dt}),I=null}const ri=new dM;ri.setAnimationLoop(An),this.setAnimationLoop=function(qe){Wt=qe},this.dispose=function(){}}}const dl=new is,Y2=new fn;function Z2(u,e){function i(D,C){D.matrixAutoUpdate===!0&&D.updateMatrix(),C.value.copy(D.matrix)}function s(D,C){C.color.getRGB(D.fogColor.value,Mv(u)),C.isFog?(D.fogNear.value=C.near,D.fogFar.value=C.far):C.isFogExp2&&(D.fogDensity.value=C.density)}function l(D,C,q,G,H){C.isMeshBasicMaterial||C.isMeshLambertMaterial?h(D,C):C.isMeshToonMaterial?(h(D,C),w(D,C)):C.isMeshPhongMaterial?(h(D,C),S(D,C)):C.isMeshStandardMaterial?(h(D,C),T(D,C),C.isMeshPhysicalMaterial&&R(D,C,H)):C.isMeshMatcapMaterial?(h(D,C),I(D,C)):C.isMeshDepthMaterial?h(D,C):C.isMeshDistanceMaterial?(h(D,C),F(D,C)):C.isMeshNormalMaterial?h(D,C):C.isLineBasicMaterial?(f(D,C),C.isLineDashedMaterial&&m(D,C)):C.isPointsMaterial?g(D,C,q,G):C.isSpriteMaterial?y(D,C):C.isShadowMaterial?(D.color.value.copy(C.color),D.opacity.value=C.opacity):C.isShaderMaterial&&(C.uniformsNeedUpdate=!1)}function h(D,C){D.opacity.value=C.opacity,C.color&&D.diffuse.value.copy(C.color),C.emissive&&D.emissive.value.copy(C.emissive).multiplyScalar(C.emissiveIntensity),C.map&&(D.map.value=C.map,i(C.map,D.mapTransform)),C.alphaMap&&(D.alphaMap.value=C.alphaMap,i(C.alphaMap,D.alphaMapTransform)),C.bumpMap&&(D.bumpMap.value=C.bumpMap,i(C.bumpMap,D.bumpMapTransform),D.bumpScale.value=C.bumpScale,C.side===b&&(D.bumpScale.value*=-1)),C.normalMap&&(D.normalMap.value=C.normalMap,i(C.normalMap,D.normalMapTransform),D.normalScale.value.copy(C.normalScale),C.side===b&&D.normalScale.value.negate()),C.displacementMap&&(D.displacementMap.value=C.displacementMap,i(C.displacementMap,D.displacementMapTransform),D.displacementScale.value=C.displacementScale,D.displacementBias.value=C.displacementBias),C.emissiveMap&&(D.emissiveMap.value=C.emissiveMap,i(C.emissiveMap,D.emissiveMapTransform)),C.specularMap&&(D.specularMap.value=C.specularMap,i(C.specularMap,D.specularMapTransform)),C.alphaTest>0&&(D.alphaTest.value=C.alphaTest);const q=e.get(C),G=q.envMap,H=q.envMapRotation;G&&(D.envMap.value=G,dl.copy(H),dl.x*=-1,dl.y*=-1,dl.z*=-1,G.isCubeTexture&&G.isRenderTargetTexture===!1&&(dl.y*=-1,dl.z*=-1),D.envMapRotation.value.setFromMatrix4(Y2.makeRotationFromEuler(dl)),D.flipEnvMap.value=G.isCubeTexture&&G.isRenderTargetTexture===!1?-1:1,D.reflectivity.value=C.reflectivity,D.ior.value=C.ior,D.refractionRatio.value=C.refractionRatio),C.lightMap&&(D.lightMap.value=C.lightMap,D.lightMapIntensity.value=C.lightMapIntensity,i(C.lightMap,D.lightMapTransform)),C.aoMap&&(D.aoMap.value=C.aoMap,D.aoMapIntensity.value=C.aoMapIntensity,i(C.aoMap,D.aoMapTransform))}function f(D,C){D.diffuse.value.copy(C.color),D.opacity.value=C.opacity,C.map&&(D.map.value=C.map,i(C.map,D.mapTransform))}function m(D,C){D.dashSize.value=C.dashSize,D.totalSize.value=C.dashSize+C.gapSize,D.scale.value=C.scale}function g(D,C,q,G){D.diffuse.value.copy(C.color),D.opacity.value=C.opacity,D.size.value=C.size*q,D.scale.value=G*.5,C.map&&(D.map.value=C.map,i(C.map,D.uvTransform)),C.alphaMap&&(D.alphaMap.value=C.alphaMap,i(C.alphaMap,D.alphaMapTransform)),C.alphaTest>0&&(D.alphaTest.value=C.alphaTest)}function y(D,C){D.diffuse.value.copy(C.color),D.opacity.value=C.opacity,D.rotation.value=C.rotation,C.map&&(D.map.value=C.map,i(C.map,D.mapTransform)),C.alphaMap&&(D.alphaMap.value=C.alphaMap,i(C.alphaMap,D.alphaMapTransform)),C.alphaTest>0&&(D.alphaTest.value=C.alphaTest)}function S(D,C){D.specular.value.copy(C.specular),D.shininess.value=Math.max(C.shininess,1e-4)}function w(D,C){C.gradientMap&&(D.gradientMap.value=C.gradientMap)}function T(D,C){D.metalness.value=C.metalness,C.metalnessMap&&(D.metalnessMap.value=C.metalnessMap,i(C.metalnessMap,D.metalnessMapTransform)),D.roughness.value=C.roughness,C.roughnessMap&&(D.roughnessMap.value=C.roughnessMap,i(C.roughnessMap,D.roughnessMapTransform)),C.envMap&&(D.envMapIntensity.value=C.envMapIntensity)}function R(D,C,q){D.ior.value=C.ior,C.sheen>0&&(D.sheenColor.value.copy(C.sheenColor).multiplyScalar(C.sheen),D.sheenRoughness.value=C.sheenRoughness,C.sheenColorMap&&(D.sheenColorMap.value=C.sheenColorMap,i(C.sheenColorMap,D.sheenColorMapTransform)),C.sheenRoughnessMap&&(D.sheenRoughnessMap.value=C.sheenRoughnessMap,i(C.sheenRoughnessMap,D.sheenRoughnessMapTransform))),C.clearcoat>0&&(D.clearcoat.value=C.clearcoat,D.clearcoatRoughness.value=C.clearcoatRoughness,C.clearcoatMap&&(D.clearcoatMap.value=C.clearcoatMap,i(C.clearcoatMap,D.clearcoatMapTransform)),C.clearcoatRoughnessMap&&(D.clearcoatRoughnessMap.value=C.clearcoatRoughnessMap,i(C.clearcoatRoughnessMap,D.clearcoatRoughnessMapTransform)),C.clearcoatNormalMap&&(D.clearcoatNormalMap.value=C.clearcoatNormalMap,i(C.clearcoatNormalMap,D.clearcoatNormalMapTransform),D.clearcoatNormalScale.value.copy(C.clearcoatNormalScale),C.side===b&&D.clearcoatNormalScale.value.negate())),C.dispersion>0&&(D.dispersion.value=C.dispersion),C.iridescence>0&&(D.iridescence.value=C.iridescence,D.iridescenceIOR.value=C.iridescenceIOR,D.iridescenceThicknessMinimum.value=C.iridescenceThicknessRange[0],D.iridescenceThicknessMaximum.value=C.iridescenceThicknessRange[1],C.iridescenceMap&&(D.iridescenceMap.value=C.iridescenceMap,i(C.iridescenceMap,D.iridescenceMapTransform)),C.iridescenceThicknessMap&&(D.iridescenceThicknessMap.value=C.iridescenceThicknessMap,i(C.iridescenceThicknessMap,D.iridescenceThicknessMapTransform))),C.transmission>0&&(D.transmission.value=C.transmission,D.transmissionSamplerMap.value=q.texture,D.transmissionSamplerSize.value.set(q.width,q.height),C.transmissionMap&&(D.transmissionMap.value=C.transmissionMap,i(C.transmissionMap,D.transmissionMapTransform)),D.thickness.value=C.thickness,C.thicknessMap&&(D.thicknessMap.value=C.thicknessMap,i(C.thicknessMap,D.thicknessMapTransform)),D.attenuationDistance.value=C.attenuationDistance,D.attenuationColor.value.copy(C.attenuationColor)),C.anisotropy>0&&(D.anisotropyVector.value.set(C.anisotropy*Math.cos(C.anisotropyRotation),C.anisotropy*Math.sin(C.anisotropyRotation)),C.anisotropyMap&&(D.anisotropyMap.value=C.anisotropyMap,i(C.anisotropyMap,D.anisotropyMapTransform))),D.specularIntensity.value=C.specularIntensity,D.specularColor.value.copy(C.specularColor),C.specularColorMap&&(D.specularColorMap.value=C.specularColorMap,i(C.specularColorMap,D.specularColorMapTransform)),C.specularIntensityMap&&(D.specularIntensityMap.value=C.specularIntensityMap,i(C.specularIntensityMap,D.specularIntensityMapTransform))}function I(D,C){C.matcap&&(D.matcap.value=C.matcap)}function F(D,C){const q=e.get(C).light;D.referencePosition.value.setFromMatrixPosition(q.matrixWorld),D.nearDistance.value=q.shadow.camera.near,D.farDistance.value=q.shadow.camera.far}return{refreshFogUniforms:s,refreshMaterialUniforms:l}}function $2(u,e,i,s){let l={},h={},f=[];const m=u.getParameter(u.MAX_UNIFORM_BUFFER_BINDINGS);function g(q,G){const H=G.program;s.uniformBlockBinding(q,H)}function y(q,G){let H=l[q.id];H===void 0&&(I(q),H=S(q),l[q.id]=H,q.addEventListener("dispose",D));const le=G.program;s.updateUBOMapping(q,le);const ne=e.render.frame;h[q.id]!==ne&&(T(q),h[q.id]=ne)}function S(q){const G=w();q.__bindingPointIndex=G;const H=u.createBuffer(),le=q.__size,ne=q.usage;return u.bindBuffer(u.UNIFORM_BUFFER,H),u.bufferData(u.UNIFORM_BUFFER,le,ne),u.bindBuffer(u.UNIFORM_BUFFER,null),u.bindBufferBase(u.UNIFORM_BUFFER,G,H),H}function w(){for(let q=0;q<m;q++)if(f.indexOf(q)===-1)return f.push(q),q;return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."),0}function T(q){const G=l[q.id],H=q.uniforms,le=q.__cache;u.bindBuffer(u.UNIFORM_BUFFER,G);for(let ne=0,oe=H.length;ne<oe;ne++){const ce=Array.isArray(H[ne])?H[ne]:[H[ne]];for(let Q=0,Z=ce.length;Q<Z;Q++){const he=ce[Q];if(R(he,ne,Q,le)===!0){const Ue=he.__offset,Pe=Array.isArray(he.value)?he.value:[he.value];let Ne=0;for(let $e=0;$e<Pe.length;$e++){const Oe=Pe[$e],ot=F(Oe);typeof Oe=="number"||typeof Oe=="boolean"?(he.__data[0]=Oe,u.bufferSubData(u.UNIFORM_BUFFER,Ue+Ne,he.__data)):Oe.isMatrix3?(he.__data[0]=Oe.elements[0],he.__data[1]=Oe.elements[1],he.__data[2]=Oe.elements[2],he.__data[3]=0,he.__data[4]=Oe.elements[3],he.__data[5]=Oe.elements[4],he.__data[6]=Oe.elements[5],he.__data[7]=0,he.__data[8]=Oe.elements[6],he.__data[9]=Oe.elements[7],he.__data[10]=Oe.elements[8],he.__data[11]=0):(Oe.toArray(he.__data,Ne),Ne+=ot.storage/Float32Array.BYTES_PER_ELEMENT)}u.bufferSubData(u.UNIFORM_BUFFER,Ue,he.__data)}}}u.bindBuffer(u.UNIFORM_BUFFER,null)}function R(q,G,H,le){const ne=q.value,oe=G+"_"+H;if(le[oe]===void 0)return typeof ne=="number"||typeof ne=="boolean"?le[oe]=ne:le[oe]=ne.clone(),!0;{const ce=le[oe];if(typeof ne=="number"||typeof ne=="boolean"){if(ce!==ne)return le[oe]=ne,!0}else if(ce.equals(ne)===!1)return ce.copy(ne),!0}return!1}function I(q){const G=q.uniforms;let H=0;const le=16;for(let oe=0,ce=G.length;oe<ce;oe++){const Q=Array.isArray(G[oe])?G[oe]:[G[oe]];for(let Z=0,he=Q.length;Z<he;Z++){const Ue=Q[Z],Pe=Array.isArray(Ue.value)?Ue.value:[Ue.value];for(let Ne=0,$e=Pe.length;Ne<$e;Ne++){const Oe=Pe[Ne],ot=F(Oe),ze=H%le,yt=ze%ot.boundary,Ut=ze+yt;H+=yt,Ut!==0&&le-Ut<ot.storage&&(H+=le-Ut),Ue.__data=new Float32Array(ot.storage/Float32Array.BYTES_PER_ELEMENT),Ue.__offset=H,H+=ot.storage}}}const ne=H%le;return ne>0&&(H+=le-ne),q.__size=H,q.__cache={},this}function F(q){const G={boundary:0,storage:0};return typeof q=="number"||typeof q=="boolean"?(G.boundary=4,G.storage=4):q.isVector2?(G.boundary=8,G.storage=8):q.isVector3||q.isColor?(G.boundary=16,G.storage=12):q.isVector4?(G.boundary=16,G.storage=16):q.isMatrix3?(G.boundary=48,G.storage=48):q.isMatrix4?(G.boundary=64,G.storage=64):q.isTexture?console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group."):console.warn("THREE.WebGLRenderer: Unsupported uniform value type.",q),G}function D(q){const G=q.target;G.removeEventListener("dispose",D);const H=f.indexOf(G.__bindingPointIndex);f.splice(H,1),u.deleteBuffer(l[G.id]),delete l[G.id],delete h[G.id]}function C(){for(const q in l)u.deleteBuffer(l[q]);f=[],l={},h={}}return{bind:g,update:y,dispose:C}}class K2{constructor(e={}){const{canvas:i=iv(),context:s=null,depth:l=!0,stencil:h=!1,alpha:f=!1,antialias:m=!1,premultipliedAlpha:g=!0,preserveDrawingBuffer:y=!1,powerPreference:S="default",failIfMajorPerformanceCaveat:w=!1,reverseDepthBuffer:T=!1}=e;this.isWebGLRenderer=!0;let R;if(s!==null){if(typeof WebGLRenderingContext<"u"&&s instanceof WebGLRenderingContext)throw new Error("THREE.WebGLRenderer: WebGL 1 is not supported since r163.");R=s.getContextAttributes().alpha}else R=f;const I=new Uint32Array(4),F=new Int32Array(4);let D=null,C=null;const q=[],G=[];this.domElement=i,this.debug={checkShaderErrors:!0,onShaderError:null},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this._outputColorSpace=zr,this.toneMapping=Ii,this.toneMappingExposure=1;const H=this;let le=!1,ne=0,oe=0,ce=null,Q=-1,Z=null;const he=new Zn,Ue=new Zn;let Pe=null;const Ne=new It(0);let $e=0,Oe=i.width,ot=i.height,ze=1,yt=null,Ut=null;const Wt=new Zn(0,0,Oe,ot),An=new Zn(0,0,Oe,ot);let ri=!1;const qe=new jh;let dt=!1,Xt=!1;this.transmissionResolutionScale=1;const pt=new fn,rn=new fn,xn=new re,_n=new Zn,Jn={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};let Je=!1;function ct(){return ce===null?ze:1}let se=s;function jt(j,ye){return i.getContext(j,ye)}try{const j={alpha:!0,depth:l,stencil:h,antialias:m,premultipliedAlpha:g,preserveDrawingBuffer:y,powerPreference:S,failIfMajorPerformanceCaveat:w};if("setAttribute"in i&&i.setAttribute("data-engine",`three.js r${a}`),i.addEventListener("webglcontextlost",Ke,!1),i.addEventListener("webglcontextrestored",Dt,!1),i.addEventListener("webglcontextcreationerror",Ct,!1),se===null){const ye="webgl2";if(se=jt(ye,j),se===null)throw jt(ye)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}}catch(j){throw console.error("THREE.WebGLRenderer: "+j.message),j}let rt,Bt,ht,dn,Rt,ie,$,Te,We,Qe,Xe,Zt,St,Ft,kn,at,Vt,un,Mn,Ht,Yn,Dn,yi,xe;function bt(){rt=new aI(se),rt.init(),Dn=new VM(se,rt),Bt=new eI(se,rt,e,Dn),ht=new k2(se,rt),Bt.reverseDepthBuffer&&T&&ht.buffers.depth.setReversed(!0),dn=new cI(se),Rt=new A2,ie=new V2(se,rt,ht,Rt,Bt,Dn,dn),$=new nI(H),Te=new sI(H),We=new KR(se),yi=new jP(se,We),Qe=new oI(se,We,dn,yi),Xe=new uI(se,Qe,We,dn),Mn=new hI(se,Bt,ie),at=new tI(Rt),Zt=new T2(H,$,Te,rt,Bt,yi,at),St=new Z2(H,Rt),Ft=new C2,kn=new N2(rt),un=new JP(H,$,Te,ht,Xe,R,g),Vt=new B2(H,Xe,Bt),xe=new $2(se,dn,Bt,ht),Ht=new QP(se,rt,dn),Yn=new lI(se,rt,dn),dn.programs=Zt.programs,H.capabilities=Bt,H.extensions=rt,H.properties=Rt,H.renderLists=Ft,H.shadowMap=Vt,H.state=ht,H.info=dn}bt();const ke=new q2(H,se);this.xr=ke,this.getContext=function(){return se},this.getContextAttributes=function(){return se.getContextAttributes()},this.forceContextLoss=function(){const j=rt.get("WEBGL_lose_context");j&&j.loseContext()},this.forceContextRestore=function(){const j=rt.get("WEBGL_lose_context");j&&j.restoreContext()},this.getPixelRatio=function(){return ze},this.setPixelRatio=function(j){j!==void 0&&(ze=j,this.setSize(Oe,ot,!1))},this.getSize=function(j){return j.set(Oe,ot)},this.setSize=function(j,ye,Ie=!0){if(ke.isPresenting){console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");return}Oe=j,ot=ye,i.width=Math.floor(j*ze),i.height=Math.floor(ye*ze),Ie===!0&&(i.style.width=j+"px",i.style.height=ye+"px"),this.setViewport(0,0,j,ye)},this.getDrawingBufferSize=function(j){return j.set(Oe*ze,ot*ze).floor()},this.setDrawingBufferSize=function(j,ye,Ie){Oe=j,ot=ye,ze=Ie,i.width=Math.floor(j*Ie),i.height=Math.floor(ye*Ie),this.setViewport(0,0,j,ye)},this.getCurrentViewport=function(j){return j.copy(he)},this.getViewport=function(j){return j.copy(Wt)},this.setViewport=function(j,ye,Ie,De){j.isVector4?Wt.set(j.x,j.y,j.z,j.w):Wt.set(j,ye,Ie,De),ht.viewport(he.copy(Wt).multiplyScalar(ze).round())},this.getScissor=function(j){return j.copy(An)},this.setScissor=function(j,ye,Ie,De){j.isVector4?An.set(j.x,j.y,j.z,j.w):An.set(j,ye,Ie,De),ht.scissor(Ue.copy(An).multiplyScalar(ze).round())},this.getScissorTest=function(){return ri},this.setScissorTest=function(j){ht.setScissorTest(ri=j)},this.setOpaqueSort=function(j){yt=j},this.setTransparentSort=function(j){Ut=j},this.getClearColor=function(j){return j.copy(un.getClearColor())},this.setClearColor=function(){un.setClearColor.apply(un,arguments)},this.getClearAlpha=function(){return un.getClearAlpha()},this.setClearAlpha=function(){un.setClearAlpha.apply(un,arguments)},this.clear=function(j=!0,ye=!0,Ie=!0){let De=0;if(j){let Se=!1;if(ce!==null){const st=ce.texture.format;Se=st===J||st===Ql||st===Bo}if(Se){const st=ce.texture.type,Et=st===ft||st===Bi||st===Ai||st===Ds||st===Oo||st===gs,zt=un.getClearColor(),Gt=un.getClearAlpha(),Sn=zt.r,En=zt.g,an=zt.b;Et?(I[0]=Sn,I[1]=En,I[2]=an,I[3]=Gt,se.clearBufferuiv(se.COLOR,0,I)):(F[0]=Sn,F[1]=En,F[2]=an,F[3]=Gt,se.clearBufferiv(se.COLOR,0,F))}else De|=se.COLOR_BUFFER_BIT}ye&&(De|=se.DEPTH_BUFFER_BIT),Ie&&(De|=se.STENCIL_BUFFER_BIT,this.state.buffers.stencil.setMask(4294967295)),se.clear(De)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){i.removeEventListener("webglcontextlost",Ke,!1),i.removeEventListener("webglcontextrestored",Dt,!1),i.removeEventListener("webglcontextcreationerror",Ct,!1),un.dispose(),Ft.dispose(),kn.dispose(),Rt.dispose(),$.dispose(),Te.dispose(),Xe.dispose(),yi.dispose(),xe.dispose(),Zt.dispose(),ke.dispose(),ke.removeEventListener("sessionstart",HM),ke.removeEventListener("sessionend",GM),pl.stop()};function Ke(j){j.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),le=!0}function Dt(){console.log("THREE.WebGLRenderer: Context Restored."),le=!1;const j=dn.autoReset,ye=Vt.enabled,Ie=Vt.autoUpdate,De=Vt.needsUpdate,Se=Vt.type;bt(),dn.autoReset=j,Vt.enabled=ye,Vt.autoUpdate=Ie,Vt.needsUpdate=De,Vt.type=Se}function Ct(j){console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ",j.statusMessage)}function Pn(j){const ye=j.target;ye.removeEventListener("dispose",Pn),Ni(ye)}function Ni(j){yr(j),Rt.remove(j)}function yr(j){const ye=Rt.get(j).programs;ye!==void 0&&(ye.forEach(function(Ie){Zt.releaseProgram(Ie)}),j.isShaderMaterial&&Zt.releaseShaderCache(j))}this.renderBufferDirect=function(j,ye,Ie,De,Se,st){ye===null&&(ye=Jn);const Et=Se.isMesh&&Se.matrixWorld.determinant()<0,zt=J2(j,ye,Ie,De,Se);ht.setMaterial(De,Et);let Gt=Ie.index,Sn=1;if(De.wireframe===!0){if(Gt=Qe.getWireframeAttribute(Ie),Gt===void 0)return;Sn=2}const En=Ie.drawRange,an=Ie.attributes.position;let jn=En.start*Sn,si=(En.start+En.count)*Sn;st!==null&&(jn=Math.max(jn,st.start*Sn),si=Math.min(si,(st.start+st.count)*Sn)),Gt!==null?(jn=Math.max(jn,0),si=Math.min(si,Gt.count)):an!=null&&(jn=Math.max(jn,0),si=Math.min(si,an.count));const Xi=si-jn;if(Xi<0||Xi===1/0)return;yi.setup(Se,De,zt,Ie,Gt);let Fi,ti=Ht;if(Gt!==null&&(Fi=We.get(Gt),ti=Yn,ti.setIndex(Fi)),Se.isMesh)De.wireframe===!0?(ht.setLineWidth(De.wireframeLinewidth*ct()),ti.setMode(se.LINES)):ti.setMode(se.TRIANGLES);else if(Se.isLine){let on=De.linewidth;on===void 0&&(on=1),ht.setLineWidth(on*ct()),Se.isLineSegments?ti.setMode(se.LINES):Se.isLineLoop?ti.setMode(se.LINE_LOOP):ti.setMode(se.LINE_STRIP)}else Se.isPoints?ti.setMode(se.POINTS):Se.isSprite&&ti.setMode(se.TRIANGLES);if(Se.isBatchedMesh)if(Se._multiDrawInstances!==null)ti.renderMultiDrawInstances(Se._multiDrawStarts,Se._multiDrawCounts,Se._multiDrawCount,Se._multiDrawInstances);else if(rt.get("WEBGL_multi_draw"))ti.renderMultiDraw(Se._multiDrawStarts,Se._multiDrawCounts,Se._multiDrawCount);else{const on=Se._multiDrawStarts,ur=Se._multiDrawCounts,ai=Se._multiDrawCount,Gs=Gt?We.get(Gt).bytesPerElement:1,Ic=Rt.get(De).currentProgram.getUniforms();for(let ss=0;ss<ai;ss++)Ic.setValue(se,"_gl_DrawID",ss),ti.render(on[ss]/Gs,ur[ss])}else if(Se.isInstancedMesh)ti.renderInstances(jn,Xi,Se.count);else if(Ie.isInstancedBufferGeometry){const on=Ie._maxInstanceCount!==void 0?Ie._maxInstanceCount:1/0,ur=Math.min(Ie.instanceCount,on);ti.renderInstances(jn,Xi,ur)}else ti.render(jn,Xi)};function ci(j,ye,Ie){j.transparent===!0&&j.side===E&&j.forceSinglePass===!1?(j.side=b,j.needsUpdate=!0,Wd(j,ye,Ie),j.side=M,j.needsUpdate=!0,Wd(j,ye,Ie),j.side=E):Wd(j,ye,Ie)}this.compile=function(j,ye,Ie=null){Ie===null&&(Ie=j),C=kn.get(Ie),C.init(ye),G.push(C),Ie.traverseVisible(function(Se){Se.isLight&&Se.layers.test(ye.layers)&&(C.pushLight(Se),Se.castShadow&&C.pushShadow(Se))}),j!==Ie&&j.traverseVisible(function(Se){Se.isLight&&Se.layers.test(ye.layers)&&(C.pushLight(Se),Se.castShadow&&C.pushShadow(Se))}),C.setupLights();const De=new Set;return j.traverse(function(Se){if(!(Se.isMesh||Se.isPoints||Se.isLine||Se.isSprite))return;const st=Se.material;if(st)if(Array.isArray(st))for(let Et=0;Et<st.length;Et++){const zt=st[Et];ci(zt,Ie,Se),De.add(zt)}else ci(st,Ie,Se),De.add(st)}),G.pop(),C=null,De},this.compileAsync=function(j,ye,Ie=null){const De=this.compile(j,ye,Ie);return new Promise(Se=>{function st(){if(De.forEach(function(Et){Rt.get(Et).currentProgram.isReady()&&De.delete(Et)}),De.size===0){Se(j);return}setTimeout(st,10)}rt.get("KHR_parallel_shader_compile")!==null?st():setTimeout(st,10)})};let Hs=null;function Ra(j){Hs&&Hs(j)}function HM(){pl.stop()}function GM(){pl.start()}const pl=new dM;pl.setAnimationLoop(Ra),typeof self<"u"&&pl.setContext(self),this.setAnimationLoop=function(j){Hs=j,ke.setAnimationLoop(j),j===null?pl.stop():pl.start()},ke.addEventListener("sessionstart",HM),ke.addEventListener("sessionend",GM),this.render=function(j,ye){if(ye!==void 0&&ye.isCamera!==!0){console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");return}if(le===!0)return;if(j.matrixWorldAutoUpdate===!0&&j.updateMatrixWorld(),ye.parent===null&&ye.matrixWorldAutoUpdate===!0&&ye.updateMatrixWorld(),ke.enabled===!0&&ke.isPresenting===!0&&(ke.cameraAutoUpdate===!0&&ke.updateCamera(ye),ye=ke.getCamera()),j.isScene===!0&&j.onBeforeRender(H,j,ye,ce),C=kn.get(j,G.length),C.init(ye),G.push(C),rn.multiplyMatrices(ye.projectionMatrix,ye.matrixWorldInverse),qe.setFromProjectionMatrix(rn),Xt=this.localClippingEnabled,dt=at.init(this.clippingPlanes,Xt),D=Ft.get(j,q.length),D.init(),q.push(D),ke.enabled===!0&&ke.isPresenting===!0){const st=H.xr.getDepthSensingMesh();st!==null&&V_(st,ye,-1/0,H.sortObjects)}V_(j,ye,0,H.sortObjects),D.finish(),H.sortObjects===!0&&D.sort(yt,Ut),Je=ke.enabled===!1||ke.isPresenting===!1||ke.hasDepthSensing()===!1,Je&&un.addToRenderList(D,j),this.info.render.frame++,dt===!0&&at.beginShadows();const Ie=C.state.shadowsArray;Vt.render(Ie,j,ye),dt===!0&&at.endShadows(),this.info.autoReset===!0&&this.info.reset();const De=D.opaque,Se=D.transmissive;if(C.setupLights(),ye.isArrayCamera){const st=ye.cameras;if(Se.length>0)for(let Et=0,zt=st.length;Et<zt;Et++){const Gt=st[Et];XM(De,Se,j,Gt)}Je&&un.render(j);for(let Et=0,zt=st.length;Et<zt;Et++){const Gt=st[Et];WM(D,j,Gt,Gt.viewport)}}else Se.length>0&&XM(De,Se,j,ye),Je&&un.render(j),WM(D,j,ye);ce!==null&&oe===0&&(ie.updateMultisampleRenderTarget(ce),ie.updateRenderTargetMipmap(ce)),j.isScene===!0&&j.onAfterRender(H,j,ye),yi.resetDefaultState(),Q=-1,Z=null,G.pop(),G.length>0?(C=G[G.length-1],dt===!0&&at.setGlobalState(H.clippingPlanes,C.state.camera)):C=null,q.pop(),q.length>0?D=q[q.length-1]:D=null};function V_(j,ye,Ie,De){if(j.visible===!1)return;if(j.layers.test(ye.layers)){if(j.isGroup)Ie=j.renderOrder;else if(j.isLOD)j.autoUpdate===!0&&j.update(ye);else if(j.isLight)C.pushLight(j),j.castShadow&&C.pushShadow(j);else if(j.isSprite){if(!j.frustumCulled||qe.intersectsSprite(j)){De&&_n.setFromMatrixPosition(j.matrixWorld).applyMatrix4(rn);const Et=Xe.update(j),zt=j.material;zt.visible&&D.push(j,Et,zt,Ie,_n.z,null)}}else if((j.isMesh||j.isLine||j.isPoints)&&(!j.frustumCulled||qe.intersectsObject(j))){const Et=Xe.update(j),zt=j.material;if(De&&(j.boundingSphere!==void 0?(j.boundingSphere===null&&j.computeBoundingSphere(),_n.copy(j.boundingSphere.center)):(Et.boundingSphere===null&&Et.computeBoundingSphere(),_n.copy(Et.boundingSphere.center)),_n.applyMatrix4(j.matrixWorld).applyMatrix4(rn)),Array.isArray(zt)){const Gt=Et.groups;for(let Sn=0,En=Gt.length;Sn<En;Sn++){const an=Gt[Sn],jn=zt[an.materialIndex];jn&&jn.visible&&D.push(j,Et,jn,Ie,_n.z,an)}}else zt.visible&&D.push(j,Et,zt,Ie,_n.z,null)}}const st=j.children;for(let Et=0,zt=st.length;Et<zt;Et++)V_(st[Et],ye,Ie,De)}function WM(j,ye,Ie,De){const Se=j.opaque,st=j.transmissive,Et=j.transparent;C.setupLightsView(Ie),dt===!0&&at.setGlobalState(H.clippingPlanes,Ie),De&&ht.viewport(he.copy(De)),Se.length>0&&Gd(Se,ye,Ie),st.length>0&&Gd(st,ye,Ie),Et.length>0&&Gd(Et,ye,Ie),ht.buffers.depth.setTest(!0),ht.buffers.depth.setMask(!0),ht.buffers.color.setMask(!0),ht.setPolygonOffset(!1)}function XM(j,ye,Ie,De){if((Ie.isScene===!0?Ie.overrideMaterial:null)!==null)return;C.state.transmissionRenderTarget[De.id]===void 0&&(C.state.transmissionRenderTarget[De.id]=new Qs(1,1,{generateMipmaps:!0,type:rt.has("EXT_color_buffer_half_float")||rt.has("EXT_color_buffer_float")?ma:ft,minFilter:Ge,samples:4,stencilBuffer:h,resolveDepthBuffer:!1,resolveStencilBuffer:!1,colorSpace:qn.workingColorSpace}));const st=C.state.transmissionRenderTarget[De.id],Et=De.viewport||he;st.setSize(Et.z*H.transmissionResolutionScale,Et.w*H.transmissionResolutionScale);const zt=H.getRenderTarget();H.setRenderTarget(st),H.getClearColor(Ne),$e=H.getClearAlpha(),$e<1&&H.setClearColor(16777215,.5),H.clear(),Je&&un.render(Ie);const Gt=H.toneMapping;H.toneMapping=Ii;const Sn=De.viewport;if(De.viewport!==void 0&&(De.viewport=void 0),C.setupLightsView(De),dt===!0&&at.setGlobalState(H.clippingPlanes,De),Gd(j,Ie,De),ie.updateMultisampleRenderTarget(st),ie.updateRenderTargetMipmap(st),rt.has("WEBGL_multisampled_render_to_texture")===!1){let En=!1;for(let an=0,jn=ye.length;an<jn;an++){const si=ye[an],Xi=si.object,Fi=si.geometry,ti=si.material,on=si.group;if(ti.side===E&&Xi.layers.test(De.layers)){const ur=ti.side;ti.side=b,ti.needsUpdate=!0,qM(Xi,Ie,De,Fi,ti,on),ti.side=ur,ti.needsUpdate=!0,En=!0}}En===!0&&(ie.updateMultisampleRenderTarget(st),ie.updateRenderTargetMipmap(st))}H.setRenderTarget(zt),H.setClearColor(Ne,$e),Sn!==void 0&&(De.viewport=Sn),H.toneMapping=Gt}function Gd(j,ye,Ie){const De=ye.isScene===!0?ye.overrideMaterial:null;for(let Se=0,st=j.length;Se<st;Se++){const Et=j[Se],zt=Et.object,Gt=Et.geometry,Sn=De===null?Et.material:De,En=Et.group;zt.layers.test(Ie.layers)&&qM(zt,ye,Ie,Gt,Sn,En)}}function qM(j,ye,Ie,De,Se,st){j.onBeforeRender(H,ye,Ie,De,Se,st),j.modelViewMatrix.multiplyMatrices(Ie.matrixWorldInverse,j.matrixWorld),j.normalMatrix.getNormalMatrix(j.modelViewMatrix),Se.onBeforeRender(H,ye,Ie,De,j,st),Se.transparent===!0&&Se.side===E&&Se.forceSinglePass===!1?(Se.side=b,Se.needsUpdate=!0,H.renderBufferDirect(Ie,ye,De,Se,j,st),Se.side=M,Se.needsUpdate=!0,H.renderBufferDirect(Ie,ye,De,Se,j,st),Se.side=E):H.renderBufferDirect(Ie,ye,De,Se,j,st),j.onAfterRender(H,ye,Ie,De,Se,st)}function Wd(j,ye,Ie){ye.isScene!==!0&&(ye=Jn);const De=Rt.get(j),Se=C.state.lights,st=C.state.shadowsArray,Et=Se.state.version,zt=Zt.getParameters(j,Se.state,st,ye,Ie),Gt=Zt.getProgramCacheKey(zt);let Sn=De.programs;De.environment=j.isMeshStandardMaterial?ye.environment:null,De.fog=ye.fog,De.envMap=(j.isMeshStandardMaterial?Te:$).get(j.envMap||De.environment),De.envMapRotation=De.environment!==null&&j.envMap===null?ye.environmentRotation:j.envMapRotation,Sn===void 0&&(j.addEventListener("dispose",Pn),Sn=new Map,De.programs=Sn);let En=Sn.get(Gt);if(En!==void 0){if(De.currentProgram===En&&De.lightsStateVersion===Et)return ZM(j,zt),En}else zt.uniforms=Zt.getUniforms(j),j.onBeforeCompile(zt,H),En=Zt.acquireProgram(zt,Gt),Sn.set(Gt,En),De.uniforms=zt.uniforms;const an=De.uniforms;return(!j.isShaderMaterial&&!j.isRawShaderMaterial||j.clipping===!0)&&(an.clippingPlanes=at.uniform),ZM(j,zt),De.needsLights=Q2(j),De.lightsStateVersion=Et,De.needsLights&&(an.ambientLightColor.value=Se.state.ambient,an.lightProbe.value=Se.state.probe,an.directionalLights.value=Se.state.directional,an.directionalLightShadows.value=Se.state.directionalShadow,an.spotLights.value=Se.state.spot,an.spotLightShadows.value=Se.state.spotShadow,an.rectAreaLights.value=Se.state.rectArea,an.ltc_1.value=Se.state.rectAreaLTC1,an.ltc_2.value=Se.state.rectAreaLTC2,an.pointLights.value=Se.state.point,an.pointLightShadows.value=Se.state.pointShadow,an.hemisphereLights.value=Se.state.hemi,an.directionalShadowMap.value=Se.state.directionalShadowMap,an.directionalShadowMatrix.value=Se.state.directionalShadowMatrix,an.spotShadowMap.value=Se.state.spotShadowMap,an.spotLightMatrix.value=Se.state.spotLightMatrix,an.spotLightMap.value=Se.state.spotLightMap,an.pointShadowMap.value=Se.state.pointShadowMap,an.pointShadowMatrix.value=Se.state.pointShadowMatrix),De.currentProgram=En,De.uniformsList=null,En}function YM(j){if(j.uniformsList===null){const ye=j.currentProgram.getUniforms();j.uniformsList=Vd.seqWithValue(ye.seq,j.uniforms)}return j.uniformsList}function ZM(j,ye){const Ie=Rt.get(j);Ie.outputColorSpace=ye.outputColorSpace,Ie.batching=ye.batching,Ie.batchingColor=ye.batchingColor,Ie.instancing=ye.instancing,Ie.instancingColor=ye.instancingColor,Ie.instancingMorph=ye.instancingMorph,Ie.skinning=ye.skinning,Ie.morphTargets=ye.morphTargets,Ie.morphNormals=ye.morphNormals,Ie.morphColors=ye.morphColors,Ie.morphTargetsCount=ye.morphTargetsCount,Ie.numClippingPlanes=ye.numClippingPlanes,Ie.numIntersection=ye.numClipIntersection,Ie.vertexAlphas=ye.vertexAlphas,Ie.vertexTangents=ye.vertexTangents,Ie.toneMapping=ye.toneMapping}function J2(j,ye,Ie,De,Se){ye.isScene!==!0&&(ye=Jn),ie.resetTextureUnits();const st=ye.fog,Et=De.isMeshStandardMaterial?ye.environment:null,zt=ce===null?H.outputColorSpace:ce.isXRRenderTarget===!0?ce.texture.colorSpace:Ho,Gt=(De.isMeshStandardMaterial?Te:$).get(De.envMap||Et),Sn=De.vertexColors===!0&&!!Ie.attributes.color&&Ie.attributes.color.itemSize===4,En=!!Ie.attributes.tangent&&(!!De.normalMap||De.anisotropy>0),an=!!Ie.morphAttributes.position,jn=!!Ie.morphAttributes.normal,si=!!Ie.morphAttributes.color;let Xi=Ii;De.toneMapped&&(ce===null||ce.isXRRenderTarget===!0)&&(Xi=H.toneMapping);const Fi=Ie.morphAttributes.position||Ie.morphAttributes.normal||Ie.morphAttributes.color,ti=Fi!==void 0?Fi.length:0,on=Rt.get(De),ur=C.state.lights;if(dt===!0&&(Xt===!0||j!==Z)){const Ur=j===Z&&De.id===Q;at.setState(De,j,Ur)}let ai=!1;De.version===on.__version?(on.needsLights&&on.lightsStateVersion!==ur.state.version||on.outputColorSpace!==zt||Se.isBatchedMesh&&on.batching===!1||!Se.isBatchedMesh&&on.batching===!0||Se.isBatchedMesh&&on.batchingColor===!0&&Se.colorTexture===null||Se.isBatchedMesh&&on.batchingColor===!1&&Se.colorTexture!==null||Se.isInstancedMesh&&on.instancing===!1||!Se.isInstancedMesh&&on.instancing===!0||Se.isSkinnedMesh&&on.skinning===!1||!Se.isSkinnedMesh&&on.skinning===!0||Se.isInstancedMesh&&on.instancingColor===!0&&Se.instanceColor===null||Se.isInstancedMesh&&on.instancingColor===!1&&Se.instanceColor!==null||Se.isInstancedMesh&&on.instancingMorph===!0&&Se.morphTexture===null||Se.isInstancedMesh&&on.instancingMorph===!1&&Se.morphTexture!==null||on.envMap!==Gt||De.fog===!0&&on.fog!==st||on.numClippingPlanes!==void 0&&(on.numClippingPlanes!==at.numPlanes||on.numIntersection!==at.numIntersection)||on.vertexAlphas!==Sn||on.vertexTangents!==En||on.morphTargets!==an||on.morphNormals!==jn||on.morphColors!==si||on.toneMapping!==Xi||on.morphTargetsCount!==ti)&&(ai=!0):(ai=!0,on.__version=De.version);let Gs=on.currentProgram;ai===!0&&(Gs=Wd(De,ye,Se));let Ic=!1,ss=!1,xu=!1;const bi=Gs.getUniforms(),ys=on.uniforms;if(ht.useProgram(Gs.program)&&(Ic=!0,ss=!0,xu=!0),De.id!==Q&&(Q=De.id,ss=!0),Ic||Z!==j){ht.buffers.depth.getReversed()?(pt.copy(j.projectionMatrix),vA(pt),yA(pt),bi.setValue(se,"projectionMatrix",pt)):bi.setValue(se,"projectionMatrix",j.projectionMatrix),bi.setValue(se,"viewMatrix",j.matrixWorldInverse);const Xr=bi.map.cameraPosition;Xr!==void 0&&Xr.setValue(se,xn.setFromMatrixPosition(j.matrixWorld)),Bt.logarithmicDepthBuffer&&bi.setValue(se,"logDepthBufFC",2/(Math.log(j.far+1)/Math.LN2)),(De.isMeshPhongMaterial||De.isMeshToonMaterial||De.isMeshLambertMaterial||De.isMeshBasicMaterial||De.isMeshStandardMaterial||De.isShaderMaterial)&&bi.setValue(se,"isOrthographic",j.isOrthographicCamera===!0),Z!==j&&(Z=j,ss=!0,xu=!0)}if(Se.isSkinnedMesh){bi.setOptional(se,Se,"bindMatrix"),bi.setOptional(se,Se,"bindMatrixInverse");const Ur=Se.skeleton;Ur&&(Ur.boneTexture===null&&Ur.computeBoneTexture(),bi.setValue(se,"boneTexture",Ur.boneTexture,ie))}Se.isBatchedMesh&&(bi.setOptional(se,Se,"batchingTexture"),bi.setValue(se,"batchingTexture",Se._matricesTexture,ie),bi.setOptional(se,Se,"batchingIdTexture"),bi.setValue(se,"batchingIdTexture",Se._indirectTexture,ie),bi.setOptional(se,Se,"batchingColorTexture"),Se._colorsTexture!==null&&bi.setValue(se,"batchingColorTexture",Se._colorsTexture,ie));const Ms=Ie.morphAttributes;if((Ms.position!==void 0||Ms.normal!==void 0||Ms.color!==void 0)&&Mn.update(Se,Ie,Gs),(ss||on.receiveShadow!==Se.receiveShadow)&&(on.receiveShadow=Se.receiveShadow,bi.setValue(se,"receiveShadow",Se.receiveShadow)),De.isMeshGouraudMaterial&&De.envMap!==null&&(ys.envMap.value=Gt,ys.flipEnvMap.value=Gt.isCubeTexture&&Gt.isRenderTargetTexture===!1?-1:1),De.isMeshStandardMaterial&&De.envMap===null&&ye.environment!==null&&(ys.envMapIntensity.value=ye.environmentIntensity),ss&&(bi.setValue(se,"toneMappingExposure",H.toneMappingExposure),on.needsLights&&j2(ys,xu),st&&De.fog===!0&&St.refreshFogUniforms(ys,st),St.refreshMaterialUniforms(ys,De,ze,ot,C.state.transmissionRenderTarget[j.id]),Vd.upload(se,YM(on),ys,ie)),De.isShaderMaterial&&De.uniformsNeedUpdate===!0&&(Vd.upload(se,YM(on),ys,ie),De.uniformsNeedUpdate=!1),De.isSpriteMaterial&&bi.setValue(se,"center",Se.center),bi.setValue(se,"modelViewMatrix",Se.modelViewMatrix),bi.setValue(se,"normalMatrix",Se.normalMatrix),bi.setValue(se,"modelMatrix",Se.matrixWorld),De.isShaderMaterial||De.isRawShaderMaterial){const Ur=De.uniformsGroups;for(let Xr=0,H_=Ur.length;Xr<H_;Xr++){const ml=Ur[Xr];xe.update(ml,Gs),xe.bind(ml,Gs)}}return Gs}function j2(j,ye){j.ambientLightColor.needsUpdate=ye,j.lightProbe.needsUpdate=ye,j.directionalLights.needsUpdate=ye,j.directionalLightShadows.needsUpdate=ye,j.pointLights.needsUpdate=ye,j.pointLightShadows.needsUpdate=ye,j.spotLights.needsUpdate=ye,j.spotLightShadows.needsUpdate=ye,j.rectAreaLights.needsUpdate=ye,j.hemisphereLights.needsUpdate=ye}function Q2(j){return j.isMeshLambertMaterial||j.isMeshToonMaterial||j.isMeshPhongMaterial||j.isMeshStandardMaterial||j.isShadowMaterial||j.isShaderMaterial&&j.lights===!0}this.getActiveCubeFace=function(){return ne},this.getActiveMipmapLevel=function(){return oe},this.getRenderTarget=function(){return ce},this.setRenderTargetTextures=function(j,ye,Ie){Rt.get(j.texture).__webglTexture=ye,Rt.get(j.depthTexture).__webglTexture=Ie;const De=Rt.get(j);De.__hasExternalTextures=!0,De.__autoAllocateDepthBuffer=Ie===void 0,De.__autoAllocateDepthBuffer||rt.has("WEBGL_multisampled_render_to_texture")===!0&&(console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided"),De.__useRenderToTexture=!1)},this.setRenderTargetFramebuffer=function(j,ye){const Ie=Rt.get(j);Ie.__webglFramebuffer=ye,Ie.__useDefaultFramebuffer=ye===void 0};const eD=se.createFramebuffer();this.setRenderTarget=function(j,ye=0,Ie=0){ce=j,ne=ye,oe=Ie;let De=!0,Se=null,st=!1,Et=!1;if(j){const Gt=Rt.get(j);if(Gt.__useDefaultFramebuffer!==void 0)ht.bindFramebuffer(se.FRAMEBUFFER,null),De=!1;else if(Gt.__webglFramebuffer===void 0)ie.setupRenderTarget(j);else if(Gt.__hasExternalTextures)ie.rebindTextures(j,Rt.get(j.texture).__webglTexture,Rt.get(j.depthTexture).__webglTexture);else if(j.depthBuffer){const an=j.depthTexture;if(Gt.__boundDepthTexture!==an){if(an!==null&&Rt.has(an)&&(j.width!==an.image.width||j.height!==an.image.height))throw new Error("WebGLRenderTarget: Attached DepthTexture is initialized to the incorrect size.");ie.setupDepthRenderbuffer(j)}}const Sn=j.texture;(Sn.isData3DTexture||Sn.isDataArrayTexture||Sn.isCompressedArrayTexture)&&(Et=!0);const En=Rt.get(j).__webglFramebuffer;j.isWebGLCubeRenderTarget?(Array.isArray(En[ye])?Se=En[ye][Ie]:Se=En[ye],st=!0):j.samples>0&&ie.useMultisampledRTT(j)===!1?Se=Rt.get(j).__webglMultisampledFramebuffer:Array.isArray(En)?Se=En[Ie]:Se=En,he.copy(j.viewport),Ue.copy(j.scissor),Pe=j.scissorTest}else he.copy(Wt).multiplyScalar(ze).floor(),Ue.copy(An).multiplyScalar(ze).floor(),Pe=ri;if(Ie!==0&&(Se=eD),ht.bindFramebuffer(se.FRAMEBUFFER,Se)&&De&&ht.drawBuffers(j,Se),ht.viewport(he),ht.scissor(Ue),ht.setScissorTest(Pe),st){const Gt=Rt.get(j.texture);se.framebufferTexture2D(se.FRAMEBUFFER,se.COLOR_ATTACHMENT0,se.TEXTURE_CUBE_MAP_POSITIVE_X+ye,Gt.__webglTexture,Ie)}else if(Et){const Gt=Rt.get(j.texture),Sn=ye;se.framebufferTextureLayer(se.FRAMEBUFFER,se.COLOR_ATTACHMENT0,Gt.__webglTexture,Ie,Sn)}else if(j!==null&&Ie!==0){const Gt=Rt.get(j.texture);se.framebufferTexture2D(se.FRAMEBUFFER,se.COLOR_ATTACHMENT0,se.TEXTURE_2D,Gt.__webglTexture,Ie)}Q=-1},this.readRenderTargetPixels=function(j,ye,Ie,De,Se,st,Et){if(!(j&&j.isWebGLRenderTarget)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");return}let zt=Rt.get(j).__webglFramebuffer;if(j.isWebGLCubeRenderTarget&&Et!==void 0&&(zt=zt[Et]),zt){ht.bindFramebuffer(se.FRAMEBUFFER,zt);try{const Gt=j.texture,Sn=Gt.format,En=Gt.type;if(!Bt.textureFormatReadable(Sn)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");return}if(!Bt.textureTypeReadable(En)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");return}ye>=0&&ye<=j.width-De&&Ie>=0&&Ie<=j.height-Se&&se.readPixels(ye,Ie,De,Se,Dn.convert(Sn),Dn.convert(En),st)}finally{const Gt=ce!==null?Rt.get(ce).__webglFramebuffer:null;ht.bindFramebuffer(se.FRAMEBUFFER,Gt)}}},this.readRenderTargetPixelsAsync=async function(j,ye,Ie,De,Se,st,Et){if(!(j&&j.isWebGLRenderTarget))throw new Error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");let zt=Rt.get(j).__webglFramebuffer;if(j.isWebGLCubeRenderTarget&&Et!==void 0&&(zt=zt[Et]),zt){const Gt=j.texture,Sn=Gt.format,En=Gt.type;if(!Bt.textureFormatReadable(Sn))throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in RGBA or implementation defined format.");if(!Bt.textureTypeReadable(En))throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in UnsignedByteType or implementation defined type.");if(ye>=0&&ye<=j.width-De&&Ie>=0&&Ie<=j.height-Se){ht.bindFramebuffer(se.FRAMEBUFFER,zt);const an=se.createBuffer();se.bindBuffer(se.PIXEL_PACK_BUFFER,an),se.bufferData(se.PIXEL_PACK_BUFFER,st.byteLength,se.STREAM_READ),se.readPixels(ye,Ie,De,Se,Dn.convert(Sn),Dn.convert(En),0);const jn=ce!==null?Rt.get(ce).__webglFramebuffer:null;ht.bindFramebuffer(se.FRAMEBUFFER,jn);const si=se.fenceSync(se.SYNC_GPU_COMMANDS_COMPLETE,0);return se.flush(),await xA(se,si,4),se.bindBuffer(se.PIXEL_PACK_BUFFER,an),se.getBufferSubData(se.PIXEL_PACK_BUFFER,0,st),se.deleteBuffer(an),se.deleteSync(si),st}else throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: requested read bounds are out of range.")}},this.copyFramebufferToTexture=function(j,ye=null,Ie=0){j.isTexture!==!0&&(nc("WebGLRenderer: copyFramebufferToTexture function signature has changed."),ye=arguments[0]||null,j=arguments[1]);const De=Math.pow(2,-Ie),Se=Math.floor(j.image.width*De),st=Math.floor(j.image.height*De),Et=ye!==null?ye.x:0,zt=ye!==null?ye.y:0;ie.setTexture2D(j,0),se.copyTexSubImage2D(se.TEXTURE_2D,Ie,0,0,Et,zt,Se,st),ht.unbindTexture()};const tD=se.createFramebuffer(),nD=se.createFramebuffer();this.copyTextureToTexture=function(j,ye,Ie=null,De=null,Se=0,st=null){j.isTexture!==!0&&(nc("WebGLRenderer: copyTextureToTexture function signature has changed."),De=arguments[0]||null,j=arguments[1],ye=arguments[2],st=arguments[3]||0,Ie=null),st===null&&(Se!==0?(nc("WebGLRenderer: copyTextureToTexture function signature has changed to support src and dst mipmap levels."),st=Se,Se=0):st=0);let Et,zt,Gt,Sn,En,an,jn,si,Xi;const Fi=j.isCompressedTexture?j.mipmaps[st]:j.image;if(Ie!==null)Et=Ie.max.x-Ie.min.x,zt=Ie.max.y-Ie.min.y,Gt=Ie.isBox3?Ie.max.z-Ie.min.z:1,Sn=Ie.min.x,En=Ie.min.y,an=Ie.isBox3?Ie.min.z:0;else{const Ms=Math.pow(2,-Se);Et=Math.floor(Fi.width*Ms),zt=Math.floor(Fi.height*Ms),j.isDataArrayTexture?Gt=Fi.depth:j.isData3DTexture?Gt=Math.floor(Fi.depth*Ms):Gt=1,Sn=0,En=0,an=0}De!==null?(jn=De.x,si=De.y,Xi=De.z):(jn=0,si=0,Xi=0);const ti=Dn.convert(ye.format),on=Dn.convert(ye.type);let ur;ye.isData3DTexture?(ie.setTexture3D(ye,0),ur=se.TEXTURE_3D):ye.isDataArrayTexture||ye.isCompressedArrayTexture?(ie.setTexture2DArray(ye,0),ur=se.TEXTURE_2D_ARRAY):(ie.setTexture2D(ye,0),ur=se.TEXTURE_2D),se.pixelStorei(se.UNPACK_FLIP_Y_WEBGL,ye.flipY),se.pixelStorei(se.UNPACK_PREMULTIPLY_ALPHA_WEBGL,ye.premultiplyAlpha),se.pixelStorei(se.UNPACK_ALIGNMENT,ye.unpackAlignment);const ai=se.getParameter(se.UNPACK_ROW_LENGTH),Gs=se.getParameter(se.UNPACK_IMAGE_HEIGHT),Ic=se.getParameter(se.UNPACK_SKIP_PIXELS),ss=se.getParameter(se.UNPACK_SKIP_ROWS),xu=se.getParameter(se.UNPACK_SKIP_IMAGES);se.pixelStorei(se.UNPACK_ROW_LENGTH,Fi.width),se.pixelStorei(se.UNPACK_IMAGE_HEIGHT,Fi.height),se.pixelStorei(se.UNPACK_SKIP_PIXELS,Sn),se.pixelStorei(se.UNPACK_SKIP_ROWS,En),se.pixelStorei(se.UNPACK_SKIP_IMAGES,an);const bi=j.isDataArrayTexture||j.isData3DTexture,ys=ye.isDataArrayTexture||ye.isData3DTexture;if(j.isDepthTexture){const Ms=Rt.get(j),Ur=Rt.get(ye),Xr=Rt.get(Ms.__renderTarget),H_=Rt.get(Ur.__renderTarget);ht.bindFramebuffer(se.READ_FRAMEBUFFER,Xr.__webglFramebuffer),ht.bindFramebuffer(se.DRAW_FRAMEBUFFER,H_.__webglFramebuffer);for(let ml=0;ml<Gt;ml++)bi&&(se.framebufferTextureLayer(se.READ_FRAMEBUFFER,se.COLOR_ATTACHMENT0,Rt.get(j).__webglTexture,Se,an+ml),se.framebufferTextureLayer(se.DRAW_FRAMEBUFFER,se.COLOR_ATTACHMENT0,Rt.get(ye).__webglTexture,st,Xi+ml)),se.blitFramebuffer(Sn,En,Et,zt,jn,si,Et,zt,se.DEPTH_BUFFER_BIT,se.NEAREST);ht.bindFramebuffer(se.READ_FRAMEBUFFER,null),ht.bindFramebuffer(se.DRAW_FRAMEBUFFER,null)}else if(Se!==0||j.isRenderTargetTexture||Rt.has(j)){const Ms=Rt.get(j),Ur=Rt.get(ye);ht.bindFramebuffer(se.READ_FRAMEBUFFER,tD),ht.bindFramebuffer(se.DRAW_FRAMEBUFFER,nD);for(let Xr=0;Xr<Gt;Xr++)bi?se.framebufferTextureLayer(se.READ_FRAMEBUFFER,se.COLOR_ATTACHMENT0,Ms.__webglTexture,Se,an+Xr):se.framebufferTexture2D(se.READ_FRAMEBUFFER,se.COLOR_ATTACHMENT0,se.TEXTURE_2D,Ms.__webglTexture,Se),ys?se.framebufferTextureLayer(se.DRAW_FRAMEBUFFER,se.COLOR_ATTACHMENT0,Ur.__webglTexture,st,Xi+Xr):se.framebufferTexture2D(se.DRAW_FRAMEBUFFER,se.COLOR_ATTACHMENT0,se.TEXTURE_2D,Ur.__webglTexture,st),Se!==0?se.blitFramebuffer(Sn,En,Et,zt,jn,si,Et,zt,se.COLOR_BUFFER_BIT,se.NEAREST):ys?se.copyTexSubImage3D(ur,st,jn,si,Xi+Xr,Sn,En,Et,zt):se.copyTexSubImage2D(ur,st,jn,si,Sn,En,Et,zt);ht.bindFramebuffer(se.READ_FRAMEBUFFER,null),ht.bindFramebuffer(se.DRAW_FRAMEBUFFER,null)}else ys?j.isDataTexture||j.isData3DTexture?se.texSubImage3D(ur,st,jn,si,Xi,Et,zt,Gt,ti,on,Fi.data):ye.isCompressedArrayTexture?se.compressedTexSubImage3D(ur,st,jn,si,Xi,Et,zt,Gt,ti,Fi.data):se.texSubImage3D(ur,st,jn,si,Xi,Et,zt,Gt,ti,on,Fi):j.isDataTexture?se.texSubImage2D(se.TEXTURE_2D,st,jn,si,Et,zt,ti,on,Fi.data):j.isCompressedTexture?se.compressedTexSubImage2D(se.TEXTURE_2D,st,jn,si,Fi.width,Fi.height,ti,Fi.data):se.texSubImage2D(se.TEXTURE_2D,st,jn,si,Et,zt,ti,on,Fi);se.pixelStorei(se.UNPACK_ROW_LENGTH,ai),se.pixelStorei(se.UNPACK_IMAGE_HEIGHT,Gs),se.pixelStorei(se.UNPACK_SKIP_PIXELS,Ic),se.pixelStorei(se.UNPACK_SKIP_ROWS,ss),se.pixelStorei(se.UNPACK_SKIP_IMAGES,xu),st===0&&ye.generateMipmaps&&se.generateMipmap(ur),ht.unbindTexture()},this.copyTextureToTexture3D=function(j,ye,Ie=null,De=null,Se=0){return j.isTexture!==!0&&(nc("WebGLRenderer: copyTextureToTexture3D function signature has changed."),Ie=arguments[0]||null,De=arguments[1]||null,j=arguments[2],ye=arguments[3],Se=arguments[4]||0),nc('WebGLRenderer: copyTextureToTexture3D function has been deprecated. Use "copyTextureToTexture" instead.'),this.copyTextureToTexture(j,ye,Ie,De,Se)},this.initRenderTarget=function(j){Rt.get(j).__webglFramebuffer===void 0&&ie.setupRenderTarget(j)},this.initTexture=function(j){j.isCubeTexture?ie.setTextureCube(j,0):j.isData3DTexture?ie.setTexture3D(j,0):j.isDataArrayTexture||j.isCompressedArrayTexture?ie.setTexture2DArray(j,0):ie.setTexture2D(j,0),ht.unbindTexture()},this.resetState=function(){ne=0,oe=0,ce=null,ht.reset(),yi.reset()},typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}get coordinateSystem(){return Us}get outputColorSpace(){return this._outputColorSpace}set outputColorSpace(e){this._outputColorSpace=e;const i=this.getContext();i.drawingBufferColorspace=qn._getDrawingBufferColorSpace(e),i.unpackColorSpace=qn._getUnpackColorSpace()}}return V.ACESFilmicToneMapping=ui,V.AddEquation=O,V.AddOperation=fe,V.AdditiveAnimationBlendMode=dm,V.AdditiveBlending=P,V.AgXToneMapping=ae,V.AlphaFormat=Kl,V.AlwaysCompare=ev,V.AlwaysDepth=et,V.AlwaysStencilFunc=pm,V.AmbientLight=By,V.AnimationAction=tM,V.AnimationClip=pu,V.AnimationLoader=H1,V.AnimationMixer=gR,V.AnimationObjectGroup=mR,V.AnimationUtils=B1,V.ArcCurve=ey,V.ArrayCamera=Zy,V.ArrowHelper=VR,V.AttachedBindMode=we,V.Audio=jy,V.AudioAnalyser=sR,V.AudioContext=S_,V.AudioListener=nR,V.AudioLoader=Q1,V.AxesHelper=HR,V.BackSide=b,V.BasicDepthPacking=Xx,V.BasicShadowMap=p,V.BatchedMesh=Xv,V.Bone=Gm,V.BooleanKeyframeTrack=il,V.Box2=AR,V.Box3=Pr,V.Box3Helper=zR,V.BoxGeometry=$o,V.BoxHelper=BR,V.BufferAttribute=di,V.BufferGeometry=Rn,V.BufferGeometryLoader=Gy,V.ByteType=yn,V.Cache=wa,V.Camera=Vf,V.CameraHelper=OR,V.CanvasTexture=l1,V.CapsuleGeometry=ud,V.CatmullRomCurve3=ty,V.CineonToneMapping=Qt,V.CircleGeometry=fd,V.ClampToEdgeWrapping=xt,V.Clock=$y,V.Color=It,V.ColorKeyframeTrack=__,V.ColorManagement=qn,V.CompressedArrayTexture=a1,V.CompressedCubeTexture=o1,V.CompressedTexture=od,V.CompressedTextureLoader=G1,V.ConeGeometry=dd,V.ConstantAlphaFactor=ut,V.ConstantColorFactor=He,V.Controls=WR,V.CubeCamera=wv,V.CubeReflectionMapping=Ve,V.CubeRefractionMapping=Ot,V.CubeTexture=qh,V.CubeTextureLoader=W1,V.CubeUVReflectionMapping=In,V.CubicBezierCurve=n_,V.CubicBezierCurve3=iy,V.CubicInterpolant=Ay,V.CullFaceBack=o,V.CullFaceFront=c,V.CullFaceFrontBack=d,V.CullFaceNone=r,V.Curve=zs,V.CurvePath=sy,V.CustomBlending=k,V.CustomToneMapping=Kt,V.CylinderGeometry=wc,V.Cylindrical=TR,V.Data3DTexture=bf,V.DataArrayTexture=kh,V.DataTexture=ea,V.DataTextureLoader=X1,V.DataUtils=NA,V.DecrementStencilOp=UT,V.DecrementWrapStencilOp=FT,V.DefaultLoadingManager=Py,V.DepthFormat=Ks,V.DepthStencilFormat=_a,V.DepthTexture=Jm,V.DetachedBindMode=Ye,V.DirectionalLight=Oy,V.DirectionalLightHelper=FR,V.DiscreteInterpolant=Ry,V.DodecahedronGeometry=pd,V.DoubleSide=E,V.DstAlphaFactor=Ae,V.DstColorFactor=me,V.DynamicCopyUsage=JT,V.DynamicDrawUsage=XT,V.DynamicReadUsage=ZT,V.EdgesGeometry=ay,V.EllipseCurve=ld,V.EqualCompare=Kx,V.EqualDepth=$t,V.EqualStencilFunc=kT,V.EquirectangularReflectionMapping=_t,V.EquirectangularRefractionMapping=Tt,V.Euler=is,V.EventDispatcher=js,V.ExtrudeGeometry=Md,V.FileLoader=Aa,V.Float16BufferAttribute=VA,V.Float32BufferAttribute=qt,V.FloatType=Si,V.Fog=Gf,V.FogExp2=Hf,V.FramebufferTexture=s1,V.FrontSide=M,V.Frustum=jh,V.GLBufferAttribute=bR,V.GLSL1=QT,V.GLSL3=_m,V.GreaterCompare=Jx,V.GreaterDepth=gn,V.GreaterEqualCompare=Qx,V.GreaterEqualDepth=sn,V.GreaterEqualStencilFunc=WT,V.GreaterStencilFunc=HT,V.GridHelper=UR,V.Group=Ec,V.HalfFloatType=ma,V.HemisphereLight=Iy,V.HemisphereLightHelper=LR,V.IcosahedronGeometry=Sd,V.ImageBitmapLoader=j1,V.ImageLoader=mu,V.ImageUtils=ov,V.IncrementStencilOp=LT,V.IncrementWrapStencilOp=NT,V.InstancedBufferAttribute=Sc,V.InstancedBufferGeometry=Hy,V.InstancedInterleavedBuffer=SR,V.InstancedMesh=Gv,V.Int16BufferAttribute=zA,V.Int32BufferAttribute=kA,V.Int8BufferAttribute=FA,V.IntType=Xn,V.InterleavedBuffer=Wf,V.InterleavedBufferAttribute=Ko,V.Interpolant=hu,V.InterpolateDiscrete=Lh,V.InterpolateLinear=vf,V.InterpolateSmooth=yf,V.InvertStencilOp=OT,V.KeepStencilOp=Go,V.KeyframeTrack=ks,V.LOD=Lv,V.LatheGeometry=ru,V.Layers=Pf,V.LessCompare=$x,V.LessDepth=Pt,V.LessEqualCompare=mm,V.LessEqualDepth=lt,V.LessEqualStencilFunc=VT,V.LessStencilFunc=zT,V.Light=oo,V.LightProbe=Vy,V.Line=so,V.Line3=RR,V.LineBasicMaterial=Lr,V.LineCurve=i_,V.LineCurve3=ry,V.LineDashedMaterial=Ey,V.LineLoop=Kv,V.LineSegments=ta,V.LinearFilter=pe,V.LinearInterpolant=m_,V.LinearMipMapLinearFilter=wt,V.LinearMipMapNearestFilter=Be,V.LinearMipmapLinearFilter=Ge,V.LinearMipmapNearestFilter=mt,V.LinearSRGBColorSpace=Ho,V.LinearToneMapping=Nn,V.LinearTransfer=Nh,V.Loader=Wr,V.LoaderUtils=M_,V.LoadingManager=g_,V.LoopOnce=Hx,V.LoopPingPong=Wx,V.LoopRepeat=Gx,V.LuminanceAlphaFormat=Jl,V.LuminanceFormat=$a,V.MOUSE=t,V.Material=xr,V.MaterialLoader=Pd,V.MathUtils=_A,V.Matrix2=A_,V.Matrix3=wn,V.Matrix4=fn,V.MaxEquation=te,V.Mesh=Wi,V.MeshBasicMaterial=no,V.MeshDepthMaterial=u_,V.MeshDistanceMaterial=f_,V.MeshLambertMaterial=Sy,V.MeshMatcapMaterial=by,V.MeshNormalMaterial=My,V.MeshPhongMaterial=vy,V.MeshPhysicalMaterial=xy,V.MeshStandardMaterial=h_,V.MeshToonMaterial=yy,V.MinEquation=W,V.MirroredRepeatWrapping=tn,V.MixOperation=pn,V.MultiplyBlending=X,V.MultiplyOperation=vn,V.NearestFilter=kt,V.NearestMipMapLinearFilter=fi,V.NearestMipMapNearestFilter=zn,V.NearestMipmapLinearFilter=mn,V.NearestMipmapNearestFilter=Nt,V.NeutralToneMapping=K,V.NeverCompare=Zx,V.NeverDepth=Le,V.NeverStencilFunc=BT,V.NoBlending=U,V.NoColorSpace=ga,V.NoToneMapping=Ii,V.NormalAnimationBlendMode=Mf,V.NormalBlending=L,V.NotEqualCompare=jx,V.NotEqualDepth=ei,V.NotEqualStencilFunc=GT,V.NumberKeyframeTrack=uu,V.Object3D=$n,V.ObjectLoader=K1,V.ObjectSpaceNormalMap=Yx,V.OctahedronGeometry=lu,V.OneFactor=B,V.OneMinusConstantAlphaFactor=Yt,V.OneMinusConstantColorFactor=nt,V.OneMinusDstAlphaFactor=Me,V.OneMinusDstColorFactor=_e,V.OneMinusSrcAlphaFactor=be,V.OneMinusSrcColorFactor=Ee,V.OrthographicCamera=Cd,V.PCFShadowMap=v,V.PCFSoftShadowMap=_,V.PMREMGenerator=F_,V.Path=iu,V.PerspectiveCamera=hr,V.Plane=ro,V.PlaneGeometry=Ac,V.PlaneHelper=kR,V.PointLight=Fy,V.PointLightHelper=IR,V.Points=jv,V.PointsMaterial=$m,V.PolarGridHelper=NR,V.PolyhedronGeometry=ao,V.PositionalAudio=rR,V.PropertyBinding=Kn,V.PropertyMixer=eM,V.QuadraticBezierCurve=r_,V.QuadraticBezierCurve3=s_,V.Quaternion=kr,V.QuaternionKeyframeTrack=fu,V.QuaternionLinearInterpolant=Cy,V.RED_GREEN_RGTC2_Format=gf,V.RED_RGTC1_Format=zo,V.REVISION=a,V.RGBADepthPacking=qx,V.RGBAFormat=tr,V.RGBAIntegerFormat=J,V.RGBA_ASTC_10x10_Format=Js,V.RGBA_ASTC_10x5_Format=pr,V.RGBA_ASTC_10x6_Format=Ls,V.RGBA_ASTC_10x8_Format=nr,V.RGBA_ASTC_12x10_Format=oi,V.RGBA_ASTC_12x12_Format=cr,V.RGBA_ASTC_4x4_Format=Un,V.RGBA_ASTC_5x4_Format=Vn,V.RGBA_ASTC_5x5_Format=Mi,V.RGBA_ASTC_6x5_Format=gi,V.RGBA_ASTC_6x6_Format=On,V.RGBA_ASTC_8x5_Format=en,V.RGBA_ASTC_8x6_Format=Di,V.RGBA_ASTC_8x8_Format=Hn,V.RGBA_BPTC_Format=ir,V.RGBA_ETC2_EAC_Format=Jt,V.RGBA_PVRTC_2BPPV1_Format=Lt,V.RGBA_PVRTC_4BPPV1_Format=At,V.RGBA_S3TC_DXT1_Format=Re,V.RGBA_S3TC_DXT3_Format=Ce,V.RGBA_S3TC_DXT5_Format=ve,V.RGBDepthPacking=CT,V.RGBFormat=Za,V.RGBIntegerFormat=fm,V.RGB_BPTC_SIGNED_Format=Hi,V.RGB_BPTC_UNSIGNED_Format=$i,V.RGB_ETC1_Format=cn,V.RGB_ETC2_Format=hn,V.RGB_PVRTC_2BPPV1_Format=gt,V.RGB_PVRTC_4BPPV1_Format=tt,V.RGB_S3TC_DXT1_Format=ge,V.RGDepthPacking=PT,V.RGFormat=Dh,V.RGIntegerFormat=Ql,V.RawShaderMaterial=gy,V.Ray=lc,V.Raycaster=ER,V.RectAreaLight=zy,V.RedFormat=jl,V.RedIntegerFormat=Bo,V.ReinhardToneMapping=Fn,V.RenderTarget=Sf,V.RenderTarget3D=xR,V.RenderTargetArray=vR,V.RepeatWrapping=it,V.ReplaceStencilOp=DT,V.ReverseSubtractEquation=Y,V.RingGeometry=bd,V.SIGNED_RED_GREEN_RGTC2_Format=xf,V.SIGNED_RED_RGTC1_Format=xs,V.SRGBColorSpace=zr,V.SRGBTransfer=li,V.Scene=Av,V.ShaderChunk=Cn,V.ShaderLib=Vs,V.ShaderMaterial=Bs,V.ShadowMaterial=_y,V.Shape=el,V.ShapeGeometry=Ed,V.ShapePath=GR,V.ShapeUtils=na,V.ShortType=vi,V.Skeleton=Kf,V.SkeletonHelper=PR,V.SkinnedMesh=zv,V.Source=Xo,V.Sphere=_r,V.SphereGeometry=cu,V.Spherical=wR,V.SphericalHarmonics3=ky,V.SplineCurve=a_,V.SpotLight=Uy,V.SpotLightHelper=CR,V.Sprite=Iv,V.SpriteMaterial=zm,V.SrcAlphaFactor=de,V.SrcAlphaSaturateFactor=Fe,V.SrcColorFactor=ee,V.StaticCopyUsage=KT,V.StaticDrawUsage=Fh,V.StaticReadUsage=YT,V.StereoCamera=eR,V.StreamCopyUsage=jT,V.StreamDrawUsage=qT,V.StreamReadUsage=$T,V.StringKeyframeTrack=rl,V.SubtractEquation=z,V.SubtractiveBlending=A,V.TOUCH=n,V.TangentSpaceNormalMap=Ka,V.TetrahedronGeometry=wd,V.Texture=Li,V.TextureLoader=q1,V.TextureUtils=$R,V.TorusGeometry=Td,V.TorusKnotGeometry=Ad,V.Triangle=Vr,V.TriangleFanDrawMode=RT,V.TriangleStripDrawMode=AT,V.TrianglesDrawMode=TT,V.TubeGeometry=Rd,V.UVMapping=je,V.Uint16BufferAttribute=Nm,V.Uint32BufferAttribute=Fm,V.Uint8BufferAttribute=OA,V.Uint8ClampedBufferAttribute=BA,V.Uniform=w_,V.UniformsGroup=MR,V.UniformsLib=vt,V.UniformsUtils=Sv,V.UnsignedByteType=ft,V.UnsignedInt248Type=Ds,V.UnsignedInt5999Type=$l,V.UnsignedIntType=Bi,V.UnsignedShort4444Type=Oo,V.UnsignedShort5551Type=gs,V.UnsignedShortType=Ai,V.VSMShadowMap=x,V.Vector2=Ze,V.Vector3=re,V.Vector4=Zn,V.VectorKeyframeTrack=du,V.VideoTexture=r1,V.WebGL3DRenderTarget=wA,V.WebGLArrayRenderTarget=EA,V.WebGLCoordinateSystem=Us,V.WebGLCubeRenderTarget=Tv,V.WebGLRenderTarget=Qs,V.WebGLRenderer=K2,V.WebGLUtils=VM,V.WebGPUCoordinateSystem=Oh,V.WireframeGeometry=dy,V.WrapAroundEnding=Uh,V.ZeroCurvatureEnding=ko,V.ZeroFactor=N,V.ZeroSlopeEnding=Vo,V.ZeroStencilOp=IT,V.createCanvasElement=iv,V}var JB=Du.exports,vb;function jB(){return vb||(vb=1,function(a,t){(function(){var n=this,r=typeof $B<"u",o=n.THREE||r&&KB();if(!o)throw new Error("MeshLine requires three.js");class c extends o.BufferGeometry{constructor(){super(),this.isMeshLine=!0,this.type="MeshLine",this.positions=[],this.previous=[],this.next=[],this.side=[],this.width=[],this.indices_array=[],this.uvs=[],this.counters=[],this._points=[],this._geom=null,this.widthCallback=null,this.matrixWorld=new o.Matrix4,Object.defineProperties(this,{geometry:{enumerable:!0,get:function(){return this}},geom:{enumerable:!0,get:function(){return this._geom},set:function(x){this.setGeometry(x,this.widthCallback)}},points:{enumerable:!0,get:function(){return this._points},set:function(x){this.setPoints(x,this.widthCallback)}}})}}c.prototype.setMatrixWorld=function(_){this.matrixWorld=_},c.prototype.setGeometry=function(_,x){this._geometry=_,this.setPoints(_.getAttribute("position").array,x)},c.prototype.setPoints=function(_,x){if(!(_ instanceof Float32Array)&&!(_ instanceof Array)){console.error("ERROR: The BufferArray of points is not instancied correctly.");return}if(this._points=_,this.widthCallback=x,this.positions=[],this.counters=[],_.length&&_[0]instanceof o.Vector3)for(var M=0;M<_.length;M++){var b=_[M],E=M/_.length;this.positions.push(b.x,b.y,b.z),this.positions.push(b.x,b.y,b.z),this.counters.push(E),this.counters.push(E)}else for(var M=0;M<_.length;M+=3){var E=M/_.length;this.positions.push(_[M],_[M+1],_[M+2]),this.positions.push(_[M],_[M+1],_[M+2]),this.counters.push(E),this.counters.push(E)}this.process()};function d(_,x){var M=new o.Matrix4,b=new o.Ray,E=new o.Sphere,U=new o.Vector3,L=this.geometry;if(L.boundingSphere||L.computeBoundingSphere(),E.copy(L.boundingSphere),E.applyMatrix4(this.matrixWorld),_.ray.intersectSphere(E,U)!==!1){M.copy(this.matrixWorld).invert(),b.copy(_.ray).applyMatrix4(M);var P=new o.Vector3,A=new o.Vector3,X=new o.Vector3,k=this instanceof o.LineSegments?2:1,O=L.index,z=L.attributes;if(O!==null)for(var Y=O.array,W=z.position.array,te=z.width.array,N=0,B=Y.length-1;N<B;N+=k){var ee=Y[N],Ee=Y[N+1];P.fromArray(W,ee*3),A.fromArray(W,Ee*3);var de=te[Math.floor(N/3)]!==void 0?te[Math.floor(N/3)]:1,be=_.params.Line.threshold+this.material.lineWidth*de/2,Ae=be*be,Me=b.distanceSqToSegment(P,A,U,X);if(!(Me>Ae)){U.applyMatrix4(this.matrixWorld);var me=_.ray.origin.distanceTo(U);me<_.near||me>_.far||(x.push({distance:me,point:X.clone().applyMatrix4(this.matrixWorld),index:N,face:null,faceIndex:null,object:this}),N=B)}}}}c.prototype.raycast=d,c.prototype.compareV3=function(_,x){var M=_*6,b=x*6;return this.positions[M]===this.positions[b]&&this.positions[M+1]===this.positions[b+1]&&this.positions[M+2]===this.positions[b+2]},c.prototype.copyV3=function(_){var x=_*6;return[this.positions[x],this.positions[x+1],this.positions[x+2]]},c.prototype.process=function(){var _=this.positions.length/6;this.previous=[],this.next=[],this.side=[],this.width=[],this.indices_array=[],this.uvs=[];var x,M;this.compareV3(0,_-1)?M=this.copyV3(_-2):M=this.copyV3(0),this.previous.push(M[0],M[1],M[2]),this.previous.push(M[0],M[1],M[2]);for(var b=0;b<_;b++){if(this.side.push(1),this.side.push(-1),this.widthCallback?x=this.widthCallback(b/(_-1)):x=1,this.width.push(x),this.width.push(x),this.uvs.push(b/(_-1),0),this.uvs.push(b/(_-1),1),b<_-1){M=this.copyV3(b),this.previous.push(M[0],M[1],M[2]),this.previous.push(M[0],M[1],M[2]);var E=b*2;this.indices_array.push(E,E+1,E+2),this.indices_array.push(E+2,E+1,E+3)}b>0&&(M=this.copyV3(b),this.next.push(M[0],M[1],M[2]),this.next.push(M[0],M[1],M[2]))}this.compareV3(_-1,0)?M=this.copyV3(1):M=this.copyV3(_-1),this.next.push(M[0],M[1],M[2]),this.next.push(M[0],M[1],M[2]),!this._attributes||this._attributes.position.count!==this.positions.length?this._attributes={position:new o.BufferAttribute(new Float32Array(this.positions),3),previous:new o.BufferAttribute(new Float32Array(this.previous),3),next:new o.BufferAttribute(new Float32Array(this.next),3),side:new o.BufferAttribute(new Float32Array(this.side),1),width:new o.BufferAttribute(new Float32Array(this.width),1),uv:new o.BufferAttribute(new Float32Array(this.uvs),2),index:new o.BufferAttribute(new Uint16Array(this.indices_array),1),counters:new o.BufferAttribute(new Float32Array(this.counters),1)}:(this._attributes.position.copyArray(new Float32Array(this.positions)),this._attributes.position.needsUpdate=!0,this._attributes.previous.copyArray(new Float32Array(this.previous)),this._attributes.previous.needsUpdate=!0,this._attributes.next.copyArray(new Float32Array(this.next)),this._attributes.next.needsUpdate=!0,this._attributes.side.copyArray(new Float32Array(this.side)),this._attributes.side.needsUpdate=!0,this._attributes.width.copyArray(new Float32Array(this.width)),this._attributes.width.needsUpdate=!0,this._attributes.uv.copyArray(new Float32Array(this.uvs)),this._attributes.uv.needsUpdate=!0,this._attributes.index.copyArray(new Uint16Array(this.indices_array)),this._attributes.index.needsUpdate=!0),this.setAttribute("position",this._attributes.position),this.setAttribute("previous",this._attributes.previous),this.setAttribute("next",this._attributes.next),this.setAttribute("side",this._attributes.side),this.setAttribute("width",this._attributes.width),this.setAttribute("uv",this._attributes.uv),this.setAttribute("counters",this._attributes.counters),this.setIndex(this._attributes.index),this.computeBoundingSphere(),this.computeBoundingBox()};function p(_,x,M,b,E){var U;if(_=_.subarray||_.slice?_:_.buffer,M=M.subarray||M.slice?M:M.buffer,_=x?_.subarray?_.subarray(x,E&&x+E):_.slice(x,E&&x+E):_,M.set)M.set(_,b);else for(U=0;U<_.length;U++)M[U+b]=_[U];return M}c.prototype.advance=function(_){var x=this._attributes.position.array,M=this._attributes.previous.array,b=this._attributes.next.array,E=x.length;p(x,0,M,0,E),p(x,6,x,0,E-6),x[E-6]=_.x,x[E-5]=_.y,x[E-4]=_.z,x[E-3]=_.x,x[E-2]=_.y,x[E-1]=_.z,p(x,6,b,0,E-6),b[E-6]=_.x,b[E-5]=_.y,b[E-4]=_.z,b[E-3]=_.x,b[E-2]=_.y,b[E-1]=_.z,this._attributes.position.needsUpdate=!0,this._attributes.previous.needsUpdate=!0,this._attributes.next.needsUpdate=!0},o.ShaderChunk.meshline_vert=["",o.ShaderChunk.logdepthbuf_pars_vertex,o.ShaderChunk.fog_pars_vertex,"","attribute vec3 previous;","attribute vec3 next;","attribute float side;","attribute float width;","attribute float counters;","","uniform vec2 resolution;","uniform float lineWidth;","uniform vec3 color;","uniform float opacity;","uniform float sizeAttenuation;","","varying vec2 vUV;","varying vec4 vColor;","varying float vCounters;","","vec2 fix( vec4 i, float aspect ) {","","    vec2 res = i.xy / i.w;","    res.x *= aspect;","	 vCounters = counters;","    return res;","","}","","void main() {","","    float aspect = resolution.x / resolution.y;","","    vColor = vec4( color, opacity );","    vUV = uv;","","    mat4 m = projectionMatrix * modelViewMatrix;","    vec4 finalPosition = m * vec4( position, 1.0 );","    vec4 prevPos = m * vec4( previous, 1.0 );","    vec4 nextPos = m * vec4( next, 1.0 );","","    vec2 currentP = fix( finalPosition, aspect );","    vec2 prevP = fix( prevPos, aspect );","    vec2 nextP = fix( nextPos, aspect );","","    float w = lineWidth * width;","","    vec2 dir;","    if( nextP == currentP ) dir = normalize( currentP - prevP );","    else if( prevP == currentP ) dir = normalize( nextP - currentP );","    else {","        vec2 dir1 = normalize( currentP - prevP );","        vec2 dir2 = normalize( nextP - currentP );","        dir = normalize( dir1 + dir2 );","","        vec2 perp = vec2( -dir1.y, dir1.x );","        vec2 miter = vec2( -dir.y, dir.x );","        //w = clamp( w / dot( miter, perp ), 0., 4. * lineWidth * width );","","    }","","    //vec2 normal = ( cross( vec3( dir, 0. ), vec3( 0., 0., 1. ) ) ).xy;","    vec4 normal = vec4( -dir.y, dir.x, 0., 1. );","    normal.xy *= .5 * w;","    normal *= projectionMatrix;","    if( sizeAttenuation == 0. ) {","        normal.xy *= finalPosition.w;","        normal.xy /= ( vec4( resolution, 0., 1. ) * projectionMatrix ).xy;","    }","","    finalPosition.xy += normal.xy * side;","","    gl_Position = finalPosition;","",o.ShaderChunk.logdepthbuf_vertex,o.ShaderChunk.fog_vertex&&"    vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );",o.ShaderChunk.fog_vertex,"}"].join(`
`),o.ShaderChunk.meshline_frag=["",o.ShaderChunk.fog_pars_fragment,o.ShaderChunk.logdepthbuf_pars_fragment,"","uniform sampler2D map;","uniform sampler2D alphaMap;","uniform float useMap;","uniform float useAlphaMap;","uniform float useDash;","uniform float dashArray;","uniform float dashOffset;","uniform float dashRatio;","uniform float visibility;","uniform float alphaTest;","uniform vec2 repeat;","","varying vec2 vUV;","varying vec4 vColor;","varying float vCounters;","","void main() {","",o.ShaderChunk.logdepthbuf_fragment,"","    vec4 c = vColor;","    if( useMap == 1. ) c *= texture2D( map, vUV * repeat );","    if( useAlphaMap == 1. ) c.a *= texture2D( alphaMap, vUV * repeat ).a;","    if( c.a < alphaTest ) discard;","    if( useDash == 1. ){","        c.a *= ceil(mod(vCounters + dashOffset, dashArray) - (dashArray * dashRatio));","    }","    gl_FragColor = c;","    gl_FragColor.a *= step(vCounters, visibility);","",o.ShaderChunk.fog_fragment,"}"].join(`
`);class v extends o.ShaderMaterial{constructor(x){super({uniforms:Object.assign({},o.UniformsLib.fog,{lineWidth:{value:1},map:{value:null},useMap:{value:0},alphaMap:{value:null},useAlphaMap:{value:0},color:{value:new o.Color(16777215)},opacity:{value:1},resolution:{value:new o.Vector2(1,1)},sizeAttenuation:{value:1},dashArray:{value:0},dashOffset:{value:0},dashRatio:{value:.5},useDash:{value:0},visibility:{value:1},alphaTest:{value:0},repeat:{value:new o.Vector2(1,1)}}),vertexShader:o.ShaderChunk.meshline_vert,fragmentShader:o.ShaderChunk.meshline_frag}),this.isMeshLineMaterial=!0,this.type="MeshLineMaterial",Object.defineProperties(this,{lineWidth:{enumerable:!0,get:function(){return this.uniforms.lineWidth.value},set:function(M){this.uniforms.lineWidth.value=M}},map:{enumerable:!0,get:function(){return this.uniforms.map.value},set:function(M){this.uniforms.map.value=M}},useMap:{enumerable:!0,get:function(){return this.uniforms.useMap.value},set:function(M){this.uniforms.useMap.value=M}},alphaMap:{enumerable:!0,get:function(){return this.uniforms.alphaMap.value},set:function(M){this.uniforms.alphaMap.value=M}},useAlphaMap:{enumerable:!0,get:function(){return this.uniforms.useAlphaMap.value},set:function(M){this.uniforms.useAlphaMap.value=M}},color:{enumerable:!0,get:function(){return this.uniforms.color.value},set:function(M){this.uniforms.color.value=M}},opacity:{enumerable:!0,get:function(){return this.uniforms.opacity.value},set:function(M){this.uniforms.opacity.value=M}},resolution:{enumerable:!0,get:function(){return this.uniforms.resolution.value},set:function(M){this.uniforms.resolution.value.copy(M)}},sizeAttenuation:{enumerable:!0,get:function(){return this.uniforms.sizeAttenuation.value},set:function(M){this.uniforms.sizeAttenuation.value=M}},dashArray:{enumerable:!0,get:function(){return this.uniforms.dashArray.value},set:function(M){this.uniforms.dashArray.value=M,this.useDash=M!==0?1:0}},dashOffset:{enumerable:!0,get:function(){return this.uniforms.dashOffset.value},set:function(M){this.uniforms.dashOffset.value=M}},dashRatio:{enumerable:!0,get:function(){return this.uniforms.dashRatio.value},set:function(M){this.uniforms.dashRatio.value=M}},useDash:{enumerable:!0,get:function(){return this.uniforms.useDash.value},set:function(M){this.uniforms.useDash.value=M}},visibility:{enumerable:!0,get:function(){return this.uniforms.visibility.value},set:function(M){this.uniforms.visibility.value=M}},alphaTest:{enumerable:!0,get:function(){return this.uniforms.alphaTest.value},set:function(M){this.uniforms.alphaTest.value=M}},repeat:{enumerable:!0,get:function(){return this.uniforms.repeat.value},set:function(M){this.uniforms.repeat.value.copy(M)}}}),this.setValues(x)}}v.prototype.copy=function(_){return o.ShaderMaterial.prototype.copy.call(this,_),this.lineWidth=_.lineWidth,this.map=_.map,this.useMap=_.useMap,this.alphaMap=_.alphaMap,this.useAlphaMap=_.useAlphaMap,this.color.copy(_.color),this.opacity=_.opacity,this.resolution.copy(_.resolution),this.sizeAttenuation=_.sizeAttenuation,this.dashArray.copy(_.dashArray),this.dashOffset.copy(_.dashOffset),this.dashRatio.copy(_.dashRatio),this.useDash=_.useDash,this.visibility=_.visibility,this.alphaTest=_.alphaTest,this.repeat.copy(_.repeat),this},a.exports&&(t=a.exports={MeshLine:c,MeshLineMaterial:v,MeshLineRaycast:d}),t.MeshLine=c,t.MeshLineMaterial=v,t.MeshLineRaycast=d}).call(JB)}(Du,Du.exports)),Du.exports}var yb=jB();class hi{constructor(t){this.collection=t}[Symbol.iterator](){const t=Object.entries(this.collection);let n=0;return{next:()=>{if(n<t.length){const r=t[n];return n++,{value:r,done:!1}}else return{done:!0}}}}keys(){return Object.keys(this.collection)}empty(){return Object.keys(this.collection).length===0}hide(t=null){if(t&&t in this.collection)this.collection[t].hide();else{let n=Object.keys(this.collection);for(let r of n)this.collection[r].hide()}}show(t=null){if(t&&t in this.collection)this.collection[t].show();else{let n=Object.keys(this.collection);for(let r of n)this.collection[r].show()}}showVisibleIDs(t){let n=Object.keys(t);for(let r of n)r in this.collection&&(t[r]?this.collection[r].show():this.collection[r].hide())}destroy(t=null){if(t&&t in this.collection)this.collection[t].destroy();else{let n=Object.keys(this.collection);for(let r of n)this.collection[r].destroy()}this.collection={}}resize(t,n=null){if(n&&n in this.collection)this.collection[n].resize(t);else{let r=Object.keys(this.collection);for(let o of r)this.collection[o].resize(t)}}}class ar{constructor(t,n,r,o,c,d){this.positions=t,this.color=n,this.sprite=o,this.rLPScaleFactor=d;const p=this.createPoints(t,n,r,o);window.scene.add(p),this.points=p,c||this.hide()}createPoints(t,n,r,o){const c=new Er;c.setAttribute("position",new Ps(t,3));const d=new OE({size:r,map:o,alphaTest:.5,transparent:!0,color:n});return new TL(c,d)}hide(){this.points.visible=!1}show(){this.points.visible=!0}isVisible(){return this.points.visible}destroy(){window.scene.remove(this.points),this.points.geometry.dispose(),this.points.material.dispose()}resize(t){const n=this.points.visible;this.destroy();const r=this.createPoints(this.positions,this.color,t,this.sprite);window.scene.add(r),this.points=r,this.size=t,n||this.hide()}}class Mb{constructor(t,n,r,o){this.vectors=t,this.color=n,this.lineWidth=r,this.fontSize=o,this.meshes=this.createMeshes(t,n,r,o)}createMeshes(t,n,r,o){const c=t[0].clone(),d=t[1].clone(),p=t[2].clone(),v=new ue(0,0,0),_=`#${n.toString(16).padStart(6,"0")}`,x=this.getRLVLabel("a*",v.clone().add(c).multiplyScalar(.5),_,o),M=this.getRLVLabel("b*",v.clone().add(d).multiplyScalar(.5),_,o),b=this.getRLVLabel("c*",v.clone().add(p).multiplyScalar(.5),_,o),E=[v,c,c.clone().add(d),d,v,p,p.clone().add(c),c,c.clone().add(d),c.clone().add(d).add(p),c.clone().add(p),p,d.clone().add(p),c.clone().add(d).add(p),d.clone().add(p),d,v],U=new yb.MeshLine;U.setPoints(E);const L=new yb.MeshLineMaterial({lineWidth:r,color:n,depthWrite:!1,sizeAttenuation:!0}),P=new As(U,L);return window.scene.add(P),window.scene.add(x),window.scene.add(M),window.scene.add(b),window.viewer.requestRender(),[P,x,M,b]}getRLVLabel(t,n,r,o){var c=document.createElement("canvas");c.width=256,c.height=128;var d=c.getContext("2d");d.font="Bold "+o.toString()+"px Tahoma",d.fillStyle=r,d.textAlign="center",d.textBaseline="middle",d.fillText(t,c.width/2,c.height/2);var p=new AL(c),v=new UE({map:p,transparent:!0,alphaTest:.5,depthWrite:!1,depthTest:!1,sizeAttenuation:!0}),_=new bL(v);return _.scale.set(100,50,1),_.position.copy(n),_}destroy(){for(let t=0;t<this.meshes.length;t++)window.scene.remove(this.meshes[t]),this.meshes[t].geometry.dispose(),this.meshes[t].material.dispose();this.meshes=[]}hide(){for(let t=0;t<this.meshes.length;t++)this.meshes[t].visible=!1}show(){for(let t=0;t<this.meshes.length;t++)this.meshes[t].visible=!0}resize(t){}}class Yr{constructor(t,n,r,o,c=null){co(this,"addExperiment",async t=>{this.clearExperiment(),this.clearReflectionTable(),await this.expt.parseExperiment(t),console.assert(this.hasExperiment()),this.addBeam(),this.addSample(),this.addReciprocalCells(),this.setCameraToDefaultPositionWithExperiment(),this.showSidebar(),this.isStandalone&&this.showCloseExptButton(),this.setSelectionDropdownToOrientations(),this.requestRender()});co(this,"addExperimentFromJSONString",async(t,n=!1)=>{n||this.saveUserState(),this.clearExperiment(),await this.expt.parseExperimentJSON(t),console.assert(this.hasExperiment()),this.addBeam(),this.addSample(),this.addReciprocalCells(),n&&(this.setCameraToDefaultPositionWithExperiment(),this.showSidebar()),this.isStandalone&&this.showCloseExptButton(),this.crystalView?this.setSelectionDropdownToCrystals():this.setSelectionDropdownToOrientations(),n||(this.applySavedUserState(),this.clearSavedUserState()),this.requestRender()});co(this,"addReflectionTable",async t=>{this.clearReflectionTable(),await this.refl.parseReflectionTable(t),this.addReflections(),this.hasReflectionTable()&&this.isStandalone&&this.showCloseReflButton(),this.requestRender()});this.isStandalone=o,this.serverWS=null,this.colors=null,c!=null?this.colors=c:this.colors=Yr.defaultColors(),this.expt=t,this.refl=n,this.calculatedIntegratedRefl=r,this.headerText=window.document.getElementById("headerText"),this.sidebar=window.document.getElementById("sidebar"),this.closeExptButton=document.getElementById("closeExpt"),this.closeReflButton=document.getElementById("closeRefl"),this.indexedReflectionsCheckbox=document.getElementById("indexedReflectionsCheckbox"),this.unindexedReflectionsCheckbox=document.getElementById("unindexedReflectionsCheckbox"),this.calculatedReflectionsCheckbox=document.getElementById("calculatedReflectionsCheckbox"),this.integratedReflectionsCheckbox=document.getElementById("integratedReflectionsCheckbox"),this.reciprocalCellCheckbox=document.getElementById("reciprocalCellCheckbox"),this.crystalFrameCheckbox=document.getElementById("crystalFrameCheckbox"),this.reflectionSize=document.getElementById("reflectionSizeSlider"),this.currentMesh=null,this.meshData=null,this.meshShape=null,this.rLPMin=null,this.rLPMax=null,this.rLPStep=null,this.beamMeshes=[],this.sampleMesh=null,this.reciprocalMeshVisible=!1,this.resolutionCircleMeshes=[],this.unindexedReflections=new hi({}),this.indexedReflections=new hi({}),this.calculatedReflections=new hi({}),this.integratedReflections=new hi({}),this.crystalIndexedReflections=new hi({}),this.crystalCalculatedReflections=new hi({}),this.crystalIntegratedReflections=new hi({}),this.orientationReciprocalCells=new hi({}),this.crystalReciprocalCells=new hi({}),this.visibleExptIDs={},this.visibleCrystalIDs={},this.beamMeshes=[],this.sampleMesh=null,this.crystalView=!1,this.crystalFrame=!1,this.integratedReflectionsFromCalculated=!1,this.preventMouseClick=!1,this.savedUserState=null,this.rLPScaleFactor=1e3,this.reflSprite=new UL().load("disc.png"),this.displayingTextFromHTMLEvent=!1,this.updateReflectionCheckboxStatus(),this.setDefaultReflectionsDisplay(),this.initDefaultSideBarText(),this.updateMeshVisibility(!1)}static defaultColors(){return{background:2236962,sample:16643811,reflectionUnindexed:[9894267,7715837,12548086,1305289,16756860,16765407,13696766,16777092,16777215,16749576,129478,11468140,16646146,10030923,7918006,16775447,16713609,13959167,6936655,5680727],reflectionCrystalIndexed:[9894267,7715837,12548086,1305289,16756860,16765407,13696766,16777092,16777215,16749576,129478,11468140,16646146,10030923,7918006,16775447,16713609,13959167,6936655,5680727],reflectionIndexed:15158332,reflectionCrystalUnindexed:6977160,reciprocalMesh:6977160,reflectionCalculated:16755370,reflectionIntegrated:16761436,highlight:16777215,resolutionCircle:6977160,beam:16777215,reciprocalCell:16777215}}static sizes(){return{minRLVLineWidth:1,maxRLVLineWidth:8,minRLVLabelSize:12,beamLength:800,sample:1,RLVLineWidthScaleFactor:15,RLVLabelScaleFactor:30,meshScaleFactor:1e3}}static cameraPositions(){return{default:new ue(0,0,-1e3),defaultWithExperiment:new ue(-1e3,0,0),centre:new ue(0,0,0)}}static text(){return{default:"To view an experiment, drag .expt and .refl files into the browser",defaultWithExpt:null}}initDefaultSideBarText(){this.updateMaxResolutionValue(!1),this.updateMeshThresholdValue(),this.updateMeshGridSizeValue()}saveUserState(){this.savedUserState={unindexedReflectionsCheckbox:this.unindexedReflectionsCheckbox.checked,indexedReflectionsCheckbox:this.indexedReflectionsCheckbox.checked,calculatedReflectionsCheckbox:this.calculatedReflectionsCheckbox.checked,integratedReflectionsCheckbox:this.integratedReflectionsCheckbox.checked,crystalFrameCheckbox:this.crystalFrameCheckbox.checked,reciprocalCellCheckbox:this.reciprocalCellCheckbox.checked,visibleExptIDs:this.visibleExptIDs,visibleCrystalIDs:this.visibleCrystalIDs}}applySavedUserState(){if(this.savedUserState===null)return;const t=this.savedUserState;this.unindexedReflectionsCheckbox.checked=t.unindexedReflectionsCheckbox,this.indexedReflectionsCheckbox.checked=t.indexedReflectionsCheckbox,this.calculatedReflectionsCheckbox.checked=t.calculatedReflectionsCheckbox,this.integratedReflectionsCheckbox.checked=t.integratedReflectionsCheckbox,this.crystalFrameCheckbox.checked=t.crystalFrameCheckbox,this.reciprocalCellCheckbox.checked=t.reciprocalCellCheckbox,this.visibleExptIDs=t.visibleExptIDs,this.visibleCrystalIDs=t.visibleCrystalIDs,this.updateReciprocalCellsVisibility(),this.updateExptIDVisibility(),this.updateCrystalIDVisibility(),this.updateReflectionsVisibility()}clearSavedUserState(){this.savedUserState=null}toggleSidebar(){this.sidebar.style.display=this.sidebar.style.display==="block"?"none":"block"}showSidebar(){this.sidebar.style.display="block"}updateCrystalFrame(){this.saveUserState(),this.expt.hasCrystal(0)&&(this.crystalFrame=this.crystalFrameCheckbox.checked,this.addReciprocalCells(),this.refl.hasReflTable()&&(this.addReflectionsFromJSONMsgpack(this.refl.rawReflData,this.integratedReflectionsFromCalculated),this.integratedReflectionsFromCalculated&&this.addCalculatedIntegratedReflectionsFromJSONMsgpack(this.calculatedIntegratedRefl.rawReflData),this.applySavedUserState(),this.clearSavedUserState()))}updateReflectionsVisibility(){this.updateUnindexedReflectionsVisibility(),this.updateIndexedReflectionsVisibility(),this.updateCalculatedReflectionsVisibility(),this.updateIntegratedReflectionsVisibility()}updateIndexedReflectionsVisibility(){this.indexedReflectionsCheckbox.checked?this.crystalView?(this.crystalIndexedReflections.showVisibleIDs(this.visibleCrystalIDs),this.indexedReflections.hide()):(this.indexedReflections.showVisibleIDs(this.visibleExptIDs),this.crystalIndexedReflections.hide()):(this.crystalIndexedReflections.hide(),this.indexedReflections.hide(),this.unindexedReflectionsCheckbox.checked&&this.crystalView&&this.crystalIndexedReflections.show("-1")),this.requestRender()}updateUnindexedReflectionsVisibility(){this.unindexedReflectionsCheckbox.checked?this.crystalView?(this.crystalIndexedReflections.show("-1"),this.unindexedReflections.hide()):(this.unindexedReflections.showVisibleIDs(this.visibleExptIDs),this.crystalIndexedReflections.hide("-1")):(this.unindexedReflections.hide(),this.crystalIndexedReflections.hide("-1")),this.requestRender()}updateCalculatedReflectionsVisibility(){this.calculatedReflectionsCheckbox.checked?this.crystalView?(this.crystalCalculatedReflections.showVisibleIDs(this.visibleCrystalIDs),this.calculatedReflections.hide()):(this.calculatedReflections.showVisibleIDs(this.visibleExptIDs),this.crystalCalculatedReflections.hide()):(this.calculatedReflections.hide(),this.crystalCalculatedReflections.hide()),this.requestRender()}updateIntegratedReflectionsVisibility(){this.integratedReflectionsCheckbox.checked?this.crystalView?(this.crystalIntegratedReflections.showVisibleIDs(this.visibleCrystalIDs),this.integratedReflections.hide()):(this.integratedReflections.showVisibleIDs(this.visibleExptIDs),this.crystalIntegratedReflections.hide()):(this.integratedReflections.hide(),this.crystalIntegratedReflections.hide()),this.requestRender()}updateReciprocalCellsVisibility(){if(!this.reciprocalCellCheckbox.checked){this.orientationReciprocalCells.hide(),this.crystalReciprocalCells.hide(),this.requestRender();return}this.crystalView?(this.crystalReciprocalCells.showVisibleIDs(this.visibleCrystalIDs),this.orientationReciprocalCells.hide()):(this.orientationReciprocalCells.show(),this.crystalReciprocalCells.hide()),this.requestRender()}switchToCrystalView(){this.crystalView=!0;const t=document.getElementById("selectionDropdownButton");t.innerHTML='<b>Crystals</b> <i class="fa fa-chevron-right" id="dropdownIcon"></i>',this.setSelectionDropdownToCrystals(),this.updateReflectionsVisibility(),this.updateReciprocalCellsVisibility()}switchToOrientationView(){this.crystalView=!1;const t=document.getElementById("selectionDropdownButton");t.innerHTML='<b>Orientations</b> <i class="fa fa-chevron-right" id="dropdownIcon"></i>',this.setSelectionDropdownToOrientations(),this.updateReflectionsVisibility(),this.updateReciprocalCellsVisibility()}updateReflectionSize(){if(!this.hasReflectionTable())return;const t=this.reflectionSize.value;this.unindexedReflections.resize(t),this.indexedReflections.resize(t),this.calculatedReflections.resize(t),this.integratedReflections.resize(t),this.crystalIndexedReflections.resize(t),this.crystalCalculatedReflections.resize(t),this.crystalIntegratedReflections.resize(t),this.requestRender()}getS1(t,n,r,o=[1,1]){const c=new ue(t[0]*o[0],t[1]*o[1],1);return c.applyMatrix3(n),c.normalize().multiplyScalar(1/r),c}hasExperiment(){return this.expt.hasExptJSON()}clearExperiment(){for(var t=0;t<this.beamMeshes.length;t++)window.scene.remove(this.beamMeshes[t]),this.beamMeshes[t].geometry.dispose(),this.beamMeshes[t].material.dispose();this.beamMeshes=[],this.sampleMesh&&(window.scene.remove(this.sampleMesh),this.sampleMesh.geometry.dispose(),this.sampleMesh.material.dispose(),this.sampleMesh=null),this.expt.clearExperiment(),this.hideCloseExptButton(),this.clearReflectionTable(),this.clearReciprocalCells(),this.clearSelectionDropdown(),this.clearMesh(),this.requestRender()}showCloseExptButton(){this.closeExptButton.style.display="inline",this.closeExptButton.innerHTML="<b>"+this.expt.filename+' <i class="fa fa-trash"></i>'}hideCloseExptButton(){this.closeExptButton.style.display="none"}hasReflectionTable(){return this.refl.hasReflTable()}clearReflectionTable(){this.unindexedReflections.destroy(),this.indexedReflections.destroy(),this.calculatedReflections.destroy(),this.integratedReflections.destroy(),this.crystalIndexedReflections.destroy(),this.crystalCalculatedReflections.destroy(),this.crystalIntegratedReflections.destroy(),this.refl.clearReflectionTable(),this.updateReflectionCheckboxStatus(),this.setDefaultReflectionsDisplay(),this.isStandalone&&this.hideCloseReflButton(),this.requestRender()}showCloseReflButton(){this.closeReflButton.style.display="inline",this.closeReflButton.innerHTML="<b>"+this.refl.filename+' <i class="fa fa-trash"></i>'}hideCloseReflButton(){this.closeReflButton.style.display="none"}addReflectionsFromData(t,n=!1){function r(de,be,Ae,Me,me,_e,Fe,He){const nt=de.clone().normalize().sub(Ae.clone().normalize()).multiplyScalar(1/be);if(!He)return nt.multiplyScalar(Me.rLPScaleFactor);if(_e==null)return console.warn("Rotation angles not in reflection table. Cannot generate rlps correctly if rotation experiment."),nt.multiplyScalar(Me.rLPScaleFactor);var ut=me.fixedRotation;const Yt=me.settingRotation,Le=me.rotationAxis;return window.viewer.crystalFrame&&Fe!==null&&(ut=ut.clone().multiply(Fe)),nt.applyMatrix3(Yt.clone().invert()),nt.applyAxisAngle(Le,-_e),nt.applyMatrix3(ut.clone().invert().transpose()),nt.multiplyScalar(Me.rLPScaleFactor)}if(this.clearReflectionTable(),n||(this.refl.calculatedIntegratedPanelReflData={},this.integratedReflectionsFromCalculated=!1),!this.hasExperiment()){console.warn("Tried to add reflections but no experiment has been loaded");return}this.refl.panelReflData=t,this.refl.reflTable="reflData";const o=Object.keys(t),c={},d={},p={},v={},_={},x={},M={};var b=this.expt.scan;const E=O!==null&&b!==null;for(var U=0;U<o.length;U++){const de=parseInt(o[U]);var L=t[o[U]];if(L===void 0)continue;const be=this.expt.getDetectorPanelDataByIdx(0,de);E&&(L=this.expt.addAnglesToReflections(L));const Ae=[be.pxSize.x,be.pxSize.y],Me=be.dMatrix;for(var P=0;P<L.length;P++){const me=L[P],_e=me.exptID;var A=this.expt.getBeamData(_e).wavelength,X=this.expt.getBeamData(_e).wavelength,k=this.expt.getBeamDirection(_e).multiplyScalar(-1).normalize(),O=this.expt.experiments[_e].goniometer;if("xyzObs"in me){const Fe=me.xyzObs;if("wavelength"in me&&(A=me.wavelength),!A)continue;const He=this.getS1(Fe,Me,A,Ae),nt=me.angleObs;var z=null;"crystalID"in me&&me.crystalID!=="-1"&&(z=this.expt.getCrystalU(parseInt(me.crystalID)));const ut=r(He,A,k,this,O,nt,z,E);if("millerIdx"in me&&me.indexed?(d[_e]||(d[_e]=[]),d[_e].push(ut.x),d[_e].push(ut.y),d[_e].push(ut.z)):(c[_e]||(c[_e]=[]),c[_e].push(ut.x),c[_e].push(ut.y),c[_e].push(ut.z)),"crystalID"in me){const Yt=me.crystalID;Yt in _||(_[Yt]=[]),_[Yt].push(ut.x),_[Yt].push(ut.y),_[Yt].push(ut.z)}}if("xyzCal"in me){const Fe=me.xyzCal;if("wavelengthCal"in me&&(X=me.wavelengthCal),!X)continue;const He=this.getS1(Fe,Me,X,Ae),nt=me.angleCal,ut=r(He,X,k,this,O,nt,z,E);if(p[_e]||(p[_e]=[]),p[_e].push(ut.x),p[_e].push(ut.y),p[_e].push(ut.z),"crystalID"in me){const Yt=me.crystalID;Yt in x||(x[Yt]=[]),x[Yt].push(ut.x),x[Yt].push(ut.y),x[Yt].push(ut.z)}if("summedIntensity"in me&&(Object.keys(this.refl.calculatedIntegratedPanelReflData).length!==0&&!n&&(this.refl.calculatedIntegratedPanelReflData={}),v[_e]||(v[_e]=[]),v[_e].push(ut.x),v[_e].push(ut.y),v[_e].push(ut.z),"crystalID"in me)){const Yt=me.crystalID;Yt in M||(M[Yt]=[]),M[Yt].push(ut.x),M[Yt].push(ut.y),M[Yt].push(ut.z)}}}}const Y={};for(const[de,be]of Object.entries(c)){const Ae=this.colors.reflectionUnindexed[parseInt(de)%this.colors.reflectionUnindexed.length],Me=this.unindexedReflectionsCheckbox.checked&&this.visibleExptIDs[de],me=new ar(be,Ae,this.reflectionSize.value,this.reflSprite,Me);Y[de]=me}this.unindexedReflections=new hi(Y);const W={};for(const[de,be]of Object.entries(d)){const Ae=this.colors.reflectionIndexed,Me=this.indexedReflectionsCheckbox.checked&&this.visibleExptIDs[de],me=new ar(be,Ae,this.reflectionSize.value,this.reflSprite,Me);W[de]=me}this.indexedReflections=new hi(W);const te={};for(const[de,be]of Object.entries(p)){const Ae=this.colors.reflectionCalculated,Me=this.calculatedReflectionsCheckbox.checked&&this.visibleExptIDs[de],me=new ar(be,Ae,this.reflectionSize.value,this.reflSprite,Me);te[de]=me}this.calculatedReflections=new hi(te);const N={};for(const[de,be]of Object.entries(v)){const Ae=this.colors.reflectionIntegrated,Me=this.integratedReflectionsCheckbox.checked&&this.visibleExptIDs[de],me=new ar(be,Ae,this.reflectionSize.value,this.reflSprite,Me);N[de]=me}this.integratedReflections=new hi(N);const B={};for(const[de,be]of Object.entries(_)){let Ae;de==="-1"?Ae=this.colors.reflectionCrystalUnindexed:Ae=this.colors.reflectionCrystalIndexed[parseInt(de)%this.colors.reflectionCrystalIndexed.length];const Me=this.unindexedReflectionsCheckbox.checked&&this.visibleCrystalIDs[de],me=new ar(be,Ae,this.reflectionSize.value,this.reflSprite,Me);B[de]=me}this.crystalIndexedReflections=new hi(B);const ee={};for(const[de,be]of Object.entries(x)){const Ae=this.colors.reflectionCalculated,Me=this.calculatedReflectionsCheckbox.checked&&this.visibleCrystalIDs[de],me=new ar(be,Ae,this.reflectionSize.value,this.reflSprite,Me);ee[de]=me}this.crystalCalculatedReflections=new hi(ee);const Ee={};for(const[de,be]of Object.entries(M)){const Ae=this.colors.reflectionIntegrated,Me=this.integratedReflectionsCheckbox.checked&&this.visibleCrystalIDs[de],me=new ar(be,Ae,this.reflectionSize.value,this.reflSprite,Me);Ee[de]=me}this.crystalIntegratedReflections=new hi(Ee),this.updateReflectionCheckboxStatus(),this.setDefaultReflectionsDisplay(),this.updateReflectionsVisibility(),this.crystalView?this.switchToCrystalView():this.switchToOrientationView(),this.requestRender()}addReflectionsFromJSONMsgpack(t,n=!1){function r(me,_e,Fe,He,nt,ut,Yt){const Le=me.clone().normalize().sub(Fe.clone().normalize()).multiplyScalar(1/_e);if(ut==null||nt==null)return Le.multiplyScalar(He.rLPScaleFactor);var et=nt.fixedRotation;const Pt=nt.settingRotation,lt=nt.rotationAxis;return window.viewer.crystalFrame&&Yt!==null&&(et=et.clone().multiply(Yt)),Le.applyMatrix3(Pt.clone().invert()),Le.applyAxisAngle(lt,-ut),Le.applyMatrix3(et.clone().invert().transpose()),Le.multiplyScalar(He.rLPScaleFactor)}if(this.clearReflectionTable(),this.refl.parseReflectionTableFromJSONMsgpack(t),n||(this.refl.calculatedIntegratedPanelReflData={},this.integratedReflectionsFromCalculated=!1),!this.hasExperiment()){console.warn("Tried to add reflections but no experiment has been loaded");return}this.refl.parseReflectionTableFromJSONMsgpack(t);const o=this.refl.getPanelNumbers();o===null&&console.warn("Tried to add reflections but no data was parsed in refl file");const c=this.refl.getXYZObs(),d=this.refl.getXYZObsMm(),p=this.refl.getXYZCal(),v=this.refl.getXYZCalMm(),_=this.refl.getMillerIndices(),x=this.refl.getExperimentIDs();let M=this.refl.getImagesetIDs();M===null&&(M=x);const b=this.refl.getWavelengths(),E=this.refl.getCalculatedWavelengths(),U=this.refl.getFlags(),L={},P={},A={},X={},k={},O={},z={},Y=this.expt.getCrystalIDsMap(),W=new Set(o);let te={};for(const me of W)te[me]=this.expt.getDetectorPanelDataByIdx(0,me);for(let me=0;me<o.length;me++){let _e;x!==null?_e=x[me]:_e=0;let Fe;M!==null?Fe=M[me]:Fe=0;let He=Y[_e];He==null&&(He="-1");const nt=this.expt.experiments[Fe].scan,ut=this.expt.experiments[Fe].goniometer,Yt=ut!==null&&nt!==null,Le=parseInt(o[me]),et=[te[Le].pxSize.x,te[Le].pxSize.y],Pt=te[Le].dMatrix;let lt=this.expt.getBeamData(Fe).wavelength,$t=this.expt.getBeamData(Fe).wavelength;const sn=this.expt.getBeamDirection(Fe).multiplyScalar(-1).normalize();if(c!==null){const gn=c[me];if(b!==null&&(lt=b[me]),!lt)continue;const ei=this.getS1(gn,Pt,lt,et);let vn=0;d!==null&&Yt&&(vn=d[me][2]);var N=null;He!=="-1"&&(N=this.expt.getCrystalU(He));const pn=r(ei,lt,sn,this,ut,vn,N);_!==null&&this.refl.isValidMillerIndex(_[me])?(P[Fe]||(P[Fe]=[]),P[Fe].push(pn.x),P[Fe].push(pn.y),P[Fe].push(pn.z)):(L[Fe]||(L[Fe]=[]),L[Fe].push(pn.x),L[Fe].push(pn.y),L[Fe].push(pn.z)),He in k||(k[He]=[]),k[He].push(pn.x),k[He].push(pn.y),k[He].push(pn.z)}if(p!==null&&v!==null){const gn=p[me];if(E!==null&&($t=E[me]),!$t)continue;const ei=this.getS1(gn,Pt,$t,et);let vn=0;v!==null&&Yt&&(vn=v[me][2]);const pn=r(ei,$t,sn,this,ut,vn,N);A[Fe]||(A[Fe]=[]),A[Fe].push(pn.x),A[Fe].push(pn.y),A[Fe].push(pn.z),He!=="-1"&&(He in O||(O[He]=[]),O[He].push(pn.x),O[He].push(pn.y),O[He].push(pn.z)),this.refl.isSummationIntegrated(U[me])&&(Object.keys(this.refl.calculatedIntegratedPanelReflData).length!==0&&!n&&(this.refl.calculatedIntegratedPanelReflData={}),X[Fe]||(X[Fe]=[]),X[Fe].push(pn.x),X[Fe].push(pn.y),X[Fe].push(pn.z),He!=="-1"&&(He in z||(z[He]=[]),z[He].push(pn.x),z[He].push(pn.y),z[He].push(pn.z)))}}const B={};for(const[me,_e]of Object.entries(L)){const Fe=this.colors.reflectionUnindexed[parseInt(me)%this.colors.reflectionUnindexed.length],He=this.unindexedReflectionsCheckbox.checked&&this.visibleExptIDs[me],nt=new ar(_e,Fe,this.reflectionSize.value,this.reflSprite,He);B[me]=nt}this.unindexedReflections=new hi(B);const ee={};for(const[me,_e]of Object.entries(P)){const Fe=this.colors.reflectionIndexed,He=this.indexedReflectionsCheckbox.checked&&this.visibleExptIDs[me],nt=new ar(_e,Fe,this.reflectionSize.value,this.reflSprite,He);ee[me]=nt}this.indexedReflections=new hi(ee);const Ee={};for(const[me,_e]of Object.entries(A)){const Fe=this.colors.reflectionCalculated,He=this.calculatedReflectionsCheckbox.checked&&this.visibleExptIDs[me],nt=new ar(_e,Fe,this.reflectionSize.value,this.reflSprite,He);Ee[me]=nt}this.calculatedReflections=new hi(Ee);const de={};for(const[me,_e]of Object.entries(X)){const Fe=this.colors.reflectionIntegrated,He=this.integratedReflectionsCheckbox.checked&&this.visibleExptIDs[me],nt=new ar(_e,Fe,this.reflectionSize.value,this.reflSprite,He);de[me]=nt}this.integratedReflections=new hi(de);const be={};for(const[me,_e]of Object.entries(k)){let Fe;me==="-1"?Fe=this.colors.reflectionCrystalUnindexed:Fe=this.colors.reflectionCrystalIndexed[parseInt(me)%this.colors.reflectionCrystalIndexed.length];const He=this.unindexedReflectionsCheckbox.checked&&this.visibleCrystalIDs[me],nt=new ar(_e,Fe,this.reflectionSize.value,this.reflSprite,He);be[me]=nt}this.crystalIndexedReflections=new hi(be);const Ae={};for(const[me,_e]of Object.entries(O)){const Fe=this.colors.reflectionCalculated,He=this.calculatedReflectionsCheckbox.checked&&this.visibleCrystalIDs[me],nt=new ar(_e,Fe,this.reflectionSize.value,this.reflSprite,He);Ae[me]=nt}this.crystalCalculatedReflections=new hi(Ae);const Me={};for(const[me,_e]of Object.entries(z)){const Fe=this.colors.reflectionIntegrated,He=this.integratedReflectionsCheckbox.checked&&this.visibleCrystalIDs[me],nt=new ar(_e,Fe,this.reflectionSize.value,this.reflSprite,He);Me[me]=nt}this.crystalIntegratedReflections=new hi(Me),this.updateReflectionCheckboxStatus(),this.setDefaultReflectionsDisplay(),this.updateReflectionsVisibility(),this.crystalView?this.switchToCrystalView():this.switchToOrientationView(),this.requestRender()}addCalculatedIntegratedReflectionsFromJSONMsgpack(t){function n(A,X,k,O,z,Y,W){const te=A.clone().normalize().sub(k.clone().normalize()).multiplyScalar(1/X);if(Y==null||z==null)return te.multiplyScalar(O.rLPScaleFactor);var N=z.fixedRotation;const B=z.settingRotation,ee=z.rotationAxis;return window.viewer.crystalFrame&&W!==null&&(N=N.clone().multiply(W)),te.applyMatrix3(B.clone().invert()),te.applyAxisAngle(ee,-Y),te.applyMatrix3(N.clone().invert().transpose()),te.multiplyScalar(O.rLPScaleFactor)}if(this.integratedReflections.destroy(),this.crystalIntegratedReflections.destroy(),!this.hasExperiment()){console.warn("Tried to add reflections but no experiment has been loaded");return}this.calculatedIntegratedRefl.parseReflectionTableFromJSONMsgpack(t);const r=this.calculatedIntegratedRefl.getPanelNumbers();r===null&&console.warn("Tried to add reflections but no data was parsed in refl file");const o=this.calculatedIntegratedRefl.getXYZCal(),c=this.calculatedIntegratedRefl.getXYZCalMm(),d=this.calculatedIntegratedRefl.getExperimentIDs(),p=this.calculatedIntegratedRefl.getImagesetIDs(),v=this.calculatedIntegratedRefl.getCalculatedWavelengths(),_=this.expt.getCrystalIDsMap(),x={},M={},b=new Set(r);let E={};for(const A of b)E[A]=this.expt.getDetectorPanelDataByIdx(0,A);for(let A=0;A<r.length;A++){let X;d!==null?X=d[A]:X=0;let k;p!==null?k=p[A]:k=0;const O=_[X],z=this.expt.experiments[k].scan,Y=this.expt.experiments[k].goniometer,W=Y!==null&&z!==null,te=parseInt(r[A]),N=[E[te].pxSize.x,E[te].pxSize.y],B=E[te].dMatrix;let ee=this.expt.getBeamData(k).wavelength;const Ee=this.expt.getBeamDirection(k).multiplyScalar(-1).normalize();if(o!==null&&c!==null){const de=o[A];if(v!==null&&(ee=v[A]),!ee)continue;const be=this.getS1(de,B,ee,N);let Ae=0;c!==null&&W&&(Ae=c[A][2]);var U=null;O!=="-1"&&(U=this.expt.getCrystalU(O));const Me=n(be,ee,Ee,this,Y,Ae,U);x[k]||(x[k]=[]),x[k].push(Me.x),x[k].push(Me.y),x[k].push(Me.z),O!=="-1"&&(O in M||(M[O]=[]),M[O].push(Me.x),M[O].push(Me.y),M[O].push(Me.z))}}const L={};for(const[A,X]of Object.entries(x)){const k=this.colors.reflectionIntegrated,O=this.integratedReflectionsCheckbox.checked&&this.visibleExptIDs[A],z=new ar(X,k,this.reflectionSize.value,this.reflSprite,O);L[A]=z}this.integratedReflections=new hi(L);const P={};for(const[A,X]of Object.entries(M)){const k=this.colors.reflectionIntegrated,O=this.integratedReflectionsCheckbox.checked&&this.visibleCrystalIDs[A],z=new ar(X,k,this.reflectionSize.value,this.reflSprite,O);P[A]=z}this.crystalIntegratedReflections=new hi(P),this.updateReflectionCheckboxStatus(),this.updateReflectionsVisibility(),this.crystalView?this.switchToCrystalView():this.switchToOrientationView(),this.integratedReflectionsFromCalculated=!0,this.requestRender()}addCalculatedIntegratedReflectionsFromData(t){function n(A,X,k,O,z,Y,W,te){const N=A.clone().normalize().sub(k.clone().normalize()).multiplyScalar(1/X);if(!te)return N.multiplyScalar(O.rLPScaleFactor);if(Y==null)return console.warn("Rotation angles not in reflection table. Cannot generate rlps correctly if rotation experiment."),N.multiplyScalar(O.rLPScaleFactor);var B=z.fixedRotation;const ee=z.settingRotation,Ee=z.rotationAxis;return window.viewer.crystalFrame&&W!==null&&(B=B.clone().multiply(W)),N.applyMatrix3(ee.clone().invert()),N.applyAxisAngle(Ee,-Y),N.applyMatrix3(B.clone().invert().transpose()),N.multiplyScalar(O.rLPScaleFactor)}if(Object.keys(t).length==0)return;if(this.integratedReflections.destroy(),this.crystalIntegratedReflections.destroy(),this.refl.calculatedIntegratedPanelReflData=t,this.integratedReflectionsFromCalculated=!0,!this.hasExperiment()){console.warn("Tried to add reflections but no experiment has been loaded");return}const r=Object.keys(t),o={},c={};var d=this.expt.scan;const p=E!==null&&d!==null;for(var v=0;v<r.length;v++){const A=parseInt(r[v]);var _=t[r[v]];if(_===void 0)continue;const X=this.expt.getDetectorPanelDataByIdx(0,A);p&&(_=this.expt.addAnglesToReflections(_));const k=[X.pxSize.x,X.pxSize.y],O=X.dMatrix;for(var x=0;x<_.length;x++){const z=_[x],Y=z.exptID;this.expt.getBeamData(Y).wavelength;var M=this.expt.getBeamData(Y).wavelength,b=this.expt.getBeamDirection(Y).multiplyScalar(-1).normalize(),E=this.expt.experiments[Y].goniometer;if("xyzCal"in z){const W=z.xyzCal;if("wavelengthCal"in z&&(M=z.wavelengthCal),!M)continue;const te=this.getS1(W,O,M,k),N=z.angleCal;var U=null;"crystalID"in z&&z.crystalID!=="-1"&&(U=this.expt.getCrystalU(parseInt(z.crystalID)));const B=n(te,M,b,this,E,N,U,p);if(o[Y]||(o[Y]=[]),o[Y].push(B.x),o[Y].push(B.y),o[Y].push(B.z),"crystalID"in z){const ee=z.crystalID;ee in c||(c[ee]=[]),c[ee].push(B.x),c[ee].push(B.y),c[ee].push(B.z)}}}}const L={};for(const[A,X]of Object.entries(o)){const k=this.colors.reflectionIntegrated,O=this.integratedReflectionsCheckbox.checked&&this.visibleExptIDs[A],z=new ar(X,k,this.reflectionSize.value,this.reflSprite,O);L[A]=z}this.integratedReflections=new hi(L);const P={};for(const[A,X]of Object.entries(c)){const k=this.colors.reflectionIntegrated,O=this.integratedReflectionsCheckbox.checked&&this.visibleCrystalIDs[A],z=new ar(X,k,this.reflectionSize.value,this.reflSprite,O);P[A]=z}this.crystalIntegratedReflections=new hi(P),this.updateReflectionCheckboxStatus(),this.updateReflectionsVisibility(),this.crystalView?this.switchToCrystalView():this.switchToOrientationView(),this.requestRender()}addReflections(){this.addReflectionsFromData(this.refl.reflData)}clearMesh(){this.currentMesh!==null&&(window.scene.remove(this.currentMesh),this.currentMesh.geometry.dispose(),this.currentMesh.material.dispose(),this.currentMesh.isInstancedMesh&&(this.currentMesh.count=0,this.currentMesh.instanceMatrix.setUsage(kp),this.currentMesh.instanceMatrix.needsUpdate=!0),this.currentMesh=null,this.clearResolutionCirlces()),this.meshData=null,this.meshShape=null,this.rLPMin=null,this.rLPMax=null,this.rLPStep=null,this.requestRender()}createSignedDistanceFunction(t,n,r){return function(o,c,d){let p=Math.floor(o),v=Math.floor(c),_=Math.floor(d);return p<0||v<0||_<0||p>=n[0]||v>=n[1]||_>=n[2]?-1:t[_][v][p]-r}}recalculateMesh(){this.clearMesh();const t=document.getElementById("maxResolutionSlider").value,n=document.getElementById("meshGridSizeSlider").value,r=JSON.stringify({channel:"server",command:"update_rs_mapper_mesh",max_resolution:t,grid_size:n});this.serverWS.send(r)}clearResolutionCirlces(){if(this.resolutionCircleMeshes.length!==0){for(let t=0;t<this.resolutionCircleMeshes.length;t++)window.scene.remove(this.resolutionCircleMeshes[t]),this.resolutionCircleMeshes[t].geometry.dispose(),this.resolutionCircleMeshes[t].material.dispose();this.resolutionCircleMeshes=[]}}drawResolutionCircles(t){this.clearResolutionCirlces();const n=64,r=1/t*this.rLPScaleFactor,o=new PL({color:this.colors.resolutionCircle,dashSize:20,gapSize:8}),c=(_,x)=>{const M=new Er,b=[];for(let U=0;U<=n;U++){const L=U/n*Math.PI*2,P=_*Math.cos(L),A=_*Math.sin(L);x==="XY"?b.push(new ue(P,A,0)):x==="YZ"?b.push(new ue(0,P,A)):x==="XZ"&&b.push(new ue(P,0,A))}M.setFromPoints(b);const E=new dg(M,o);return E.computeLineDistances(),E},d=c(r,"XY"),p=c(r,"YZ"),v=c(r,"XZ");window.scene.add(d),window.scene.add(p),window.scene.add(v),this.resolutionCircleMeshes=[d,p,v],this.requestRender()}updateMeshVisibility(t){this.currentMesh!==null&&(this.currentMesh.visible=t,this.requestRender());const n=document.getElementById("meshThresholdContainer"),r=document.getElementById("maxResolutionContainer"),o=document.getElementById("meshGridSizeContainer"),c=t?"block":"none";n&&(n.style.display=c),r&&(r.style.display=c),o&&(o.style.display=c),this.reciprocalMeshVisible=t;for(let d=0;d<this.resolutionCircleMeshes.length;d++)this.resolutionCircleMeshes[d].visible=t}updateMaxResolutionValue(t=!0){var n=document.getElementById("maxResolutionSlider"),r=document.getElementById("maxResolutionValue");r.innerHTML=n.value+" Å",t&&this.drawResolutionCircles(n.value),this.requestRender()}updateMeshGridSizeValue(){var t=document.getElementById("meshGridSizeSlider"),n=document.getElementById("meshGridSizeValue");n.innerHTML=t.value,this.requestRender()}updateMeshThresholdValue(){var t=document.getElementById("meshThresholdSlider"),n=document.getElementById("meshThresholdValue");n.innerHTML=t.value,this.requestRender()}updateMesh(){if(this.meshData===null||this.meshShape===null||this.rLPMin===null||this.rLPMax===null||this.rLPStep===null)return;const t=this.meshData,n=this.meshShape,r=this.rLPMin,o=this.rLPMax,c=this.rLPStep;this.clearMesh(),this.addContourMeshFromData(t,n,r,o,c)}async addContourMeshFromData(t,n,r,o,c){this.meshData=t,this.meshShape=n,this.rLPMin=r,this.rLPMax=o,this.rLPStep=c;const d=document.getElementById("meshThresholdSlider").value;this.loading=!0;const p=128,v=[[0,0,0],[n[0],n[1],n[2]]],_=await new Promise((A,X)=>{const k=new Worker(new URL(""+new URL("MeshWorker-nNGhaxGs.js",import.meta.url).href,import.meta.url),{type:"module"});k.onmessage=O=>{O.data.type==="marchingResult"&&(A(O.data.result),k.terminate())},k.onerror=O=>{console.error("Worker error:",O),X(O),k.terminate()},k.postMessage({data:t,meshShape:n,isovalue:d,resolution:p,scanBounds:v})}),x=_.positions,M=this.rLPScaleFactor;for(let A=0;A<x.length;A++){const X=x[A][0],k=x[A][1],O=x[A][2];x[A][0]=(O-n[2]/2)*c*M,x[A][1]=(k-n[1]/2)*c*M,x[A][2]=(X-n[0]/2)*c*M}const b=new Float32Array(x.flat()),E=new Er,U=new Uint32Array(_.cells.flat());E.setAttribute("position",new ds(b,3)),E.setIndex(new ds(U,1)),E.computeVertexNormals(),E.computeBoundingBox();const L=new Hp({color:this.colors.reciprocalMesh,wireframe:!0}),P=new As(E,L);window.scene.add(P),this.currentMesh=P,this.loading=!1,this.requestRender()}setDefaultReflectionsDisplay(){this.indexedReflectionsCheckbox.checked=!1,this.unindexedReflectionsCheckbox.checked=!1,this.calculatedReflectionsCheckbox.checked=!1,this.integratedReflectionsCheckbox.checked=!1,this.crystalFrameCheckbox.checked=!1,this.hasReflectionTable()&&(this.unindexedReflections.empty()||(this.unindexedReflectionsCheckbox.checked=!0),this.indexedReflections.empty()||(this.indexedReflectionsCheckbox.checked=!0),this.crystalFrameCheckbox.checked=this.crystalFrame,this.updateReflectionsVisibility())}updateReflectionCheckboxStatus(){if(!this.hasReflectionTable()){this.indexedReflectionsCheckbox.disabled=!0,this.unindexedReflectionsCheckbox.disabled=!0,this.calculatedReflectionsCheckbox.disabled=!0,this.integratedReflectionsCheckbox.disabled=!0,this.crystalFrameCheckbox.disabled=!0;return}this.indexedReflectionsCheckbox.disabled=this.indexedReflections.empty(),this.unindexedReflectionsCheckbox.disabled=this.unindexedReflections.empty(),this.calculatedReflectionsCheckbox.disabled=this.calculatedReflections.empty(),this.integratedReflectionsCheckbox.disabled=this.integratedReflections.empty(),this.crystalFrameCheckbox.disabled=this.indexedReflections.empty()}updateReciprocalCellCheckboxStatus(){this.hasExperiment()?(this.reciprocalCellCheckbox.disabled=this.orientationReciprocalCells.empty()&&this.crystalReciprocalCells.empty(),this.crystalFrameCheckbox.disabled=this.orientationReciprocalCells.empty()&&this.crystalReciprocalCells.empty()):(this.reciprocalCellCheckbox.disabled=!0,this.crystalFrameCheckbox.disabled=!0)}addBeam(){var t=Yr.sizes().beamLength,n=this.expt.getBeamDirection(0),r=[];r.push(new ue(n.x*-800,n.y*-800,n.z*-800)),r.push(new ue(n.x*-800*.5,n.y*-800*.5,n.z*-800*.5)),r.push(new ue(0,0,0));const o=new Er().setFromPoints(r),c=new Wp({color:this.colors.beam,fog:!0,depthWrite:!1}),d=new dg(o,c);this.beamMeshes.push(d),window.scene.add(d);var p=[];p.push(new ue(0,0,0)),p.push(new ue(n.x*t*.5,n.y*t*.5,n.z*t*.5)),p.push(new ue(n.x*t,n.y*t,n.z*t));const v=new Er().setFromPoints(p),_=new Wp({color:this.colors.beam,transparent:!0,opacity:.25,fog:!0,depthWrite:!1}),x=new dg(v,_);this.beamMeshes.push(x),window.scene.add(x)}addSample(){const t=new dx(Yr.sizes().sample),n=new Hp({color:this.colors.sample,transparent:!0,depthWrite:!1}),r=new As(t,n);r.name="sample",this.sampleMesh=r,window.scene.add(r)}clearReciprocalCells(){this.orientationReciprocalCells.destroy(),this.crystalReciprocalCells.destroy(),this.reciprocalCellCheckbox.checked=!1,this.reciprocalCellCheckbox.disabled=!0,this.crystalFrameCheckbox.checked=!1,this.crystalFrameCheckbox.disabled=!0}addReciprocalCells(){if(!this.expt.hasCrystal(0))return;const t=this.reciprocalCellCheckbox.checked,n=this.crystalFrameCheckbox.checked;this.clearReciprocalCells();var r;this.crystalFrame?r=this.expt.getAllCrystalRCVs():r=this.expt.getAllCrystalRLVs();var o={},c={};for(let p=0;p<r.length;p++){let v=r[p];const _=(v[0].length()+v[1].length()+v[2].length())/3,x=Yr.sizes().minRLVLineWidth,M=Yr.sizes().maxRLVLineWidth,b=Yr.sizes().RLVLineWidthScaleFactor,E=Math.min(Math.max(_*b,x),M),U=Math.max(_*Yr.sizes().RLVLabelScaleFactor,1);var d=Yr.sizes().minRLVLabelSize;d*=U,v[0].multiplyScalar(this.rLPScaleFactor),v[1].multiplyScalar(this.rLPScaleFactor),v[2].multiplyScalar(this.rLPScaleFactor),c[p]=new Mb(v,this.colors.reflectionCrystalIndexed[p%this.colors.reflectionCrystalIndexed.length],E,d),o[p]=new Mb(v,this.colors.reciprocalCell,E,d)}this.orientationReciprocalCells=new hi(o),this.crystalReciprocalCells=new hi(c),this.updateReciprocalCellCheckboxStatus(),this.reciprocalCellCheckbox.checked=t,this.crystalFrameCheckbox.checked=n,this.updateReciprocalCellsVisibility(),this.requestRender()}setCameraSmooth(t){this.rotateToPos(t),this.resetCameraZoomSmooth()}setCameraToDefaultPosition(){this.setCameraSmooth(Yr.cameraPositions().default)}setCameraToDefaultPositionWithExperiment(){this.setCameraSmooth(Yr.cameraPositions().defaultWithExperiment)}setCameraToCentrePosition(){this.setCameraSmooth(Yr.cameraPositions().centre)}displayHeaderText(t){this.showHeaderText(),this.headerText.innerHTML=t}appendHeaderText(t){this.headerText.innerHTML+=t}hideHeaderText(){this.headerText.style.display="none"}showHeaderText(){this.headerText.style.display="block"}displayDefaultHeaderText(){this.hasExperiment()||!this.isStandalone?this.hideHeaderText():this.displayHeaderText(Yr.text().default)}displayImageFilenames(t){this.displayHeaderText(this.expt.experiments[t].imageFilename),this.displayingTextFromHTMLEvent=!0}displayNumberOfReflections(){this.displayHeaderText(this.refl.numReflections+" reflections"),this.displayingTextFromHTMLEvent=!0}stopDisplayingText(){this.displayingTextFromHTMLEvent=!1}highlightObject(t){t.material.color=new Qn(this.colors.highlight)}beamHidden(){return this.beamMeshes.length===0?!0:this.beamMeshes[0].material.opacity<.01}sampleHidden(){return this.sampleMesh===null?!0:this.sampleMesh.material.opacity<.01}disableMouseClick(){this.preventMouseClick=!0}enableMouseClick(){this.preventMouseClick=!1}updateGUIInfo(){function t(o){function c(p,v,_){return(1/new ue(p[3*v]/_.rLPScaleFactor,p[3*v+1]/_.rLPScaleFactor,p[3*v+2]/_.rLPScaleFactor).length()).toFixed(3)}if(o.indexedReflectionsCheckbox.checked){let p;o.crystalView?p=o.crystalIndexedReflections:p=o.indexedReflections;for(const[v,_]of p){window.rayCaster.setFromCamera(window.mousePosition,window.camera);const x=window.rayCaster.intersectObjects(_.points);if(x.length>0)for(var d=0;d<x.length;d++){const M=o.refl.getIndexedSummaryById(x[d].index);o.displayHeaderText(M+" <b>res: </b>"+c(_.positions,x[d].index,o)+" Angstrom")}}}if(o.unindexedReflectionsCheckbox.checked)for(const[p,v]of o.unindexedReflections){const _=window.rayCaster.intersectObjects(v.points);if(window.rayCaster.setFromCamera(window.mousePosition,window.camera),_.length>0)for(var d=0;d<_.length;d++){const M=o.refl.getUnindexedSummaryById(_[d].index);o.displayHeaderText(M+" <b>res: </b>"+c(v.positions,_[d].index,o)+" Angstrom")}}}function n(o){if(o.beamHidden())return;const c=window.rayCaster.intersectObjects(o.beamMeshes);if(window.rayCaster.setFromCamera(window.mousePosition,window.camera),c.length>0){const d="<b>beam: </b>"+o.expt.getBeamSummary(0);o.displayHeaderText(d)}}function r(o){if(o.sampleHidden()||o.expt.getCrystalSummary()===null)return;const c=window.rayCaster.intersectObjects([o.sampleMesh]);if(window.rayCaster.setFromCamera(window.mousePosition,window.camera),c.length>0){const d="<b>crystal: </b>"+o.expt.getCrystalSummary();o.displayHeaderText(d)}}if(!this.displayingTextFromHTMLEvent){if(this.loading){this.displayHeaderText("Loading..");return}this.displayDefaultHeaderText(),t(this),n(this),r(this)}}rotateToPos(t){Op.to(window.camera.position,{duration:1,x:-t.x,y:-t.y,z:-t.z,onUpdate:function(){window.camera.lookAt(t),window.viewer.requestRender()}})}resetCameraZoomSmooth(){Op.to(window.camera,{duration:1,zoom:1,onUpdate:function(){window.camera.updateProjectionMatrix(),window.viewer.requestRender()}}),window.controls.update()}zoomInOnObject(t,n=.2){const r=new ue,o=new ue,c=new Ah;c.makeEmpty(),c.expandByObject(t),c.getSize(r),c.getCenter(o);const p=[new ue(o.x-r.x/2,o.y-r.y/2,o.z-r.z/2),new ue(o.x-r.x/2,o.y-r.y/2,o.z+r.z/2),new ue(o.x-r.x/2,o.y+r.y/2,o.z-r.z/2),new ue(o.x-r.x/2,o.y+r.y/2,o.z+r.z/2),new ue(o.x+r.x/2,o.y-r.y/2,o.z-r.z/2),new ue(o.x+r.x/2,o.y-r.y/2,o.z+r.z/2),new ue(o.x+r.x/2,o.y+r.y/2,o.z-r.z/2),new ue(o.x+r.x/2,o.y+r.y/2,o.z+r.z/2)].map(x=>{const M=x.clone().project(camera);return M.x=(M.x+1)/2*window.innerWidth,M.y=(1-M.y)/2*window.innerHeight,M});let v=0;for(let x=0;x<p.length;x++)for(let M=x+1;M<p.length;M++){const b=p[x].distanceTo(p[M]);b>v&&(v=b)}const _=window.camera.zoom*(window.innerWidth*n)/v;Op.to(window.camera,{duration:1,zoom:_,onUpdate:function(){window.camera.updateProjectionMatrix(),window.viewer.requestRender()}}),window.controls.update()}toggleExperimentList(){document.getElementById("selectionDropdown").classList.toggle("show");var t=document.getElementById("dropdownIcon");t.classList.toggle("fa-chevron-down"),t.classList.toggle("fa-chevron-right")}toggleCrystalVisibility(t){var n=parseInt(t.split("-").pop());this.visibleCrystalIDs[n]=!this.visibleCrystalIDs[n],this.updateReflectionsVisibility(),this.updateReciprocalCellsVisibility();var r=document.getElementById("crystalID-dropdown-icon-"+n.toString());r.classList.toggle("fa-check")}toggleAllCrystalVisibility(){var t=document.getElementById("crystalID-dropdown-icon-all");t.classList.toggle("fa-check");var n=t.classList.contains("fa-check"),r=Object.keys(this.visibleCrystalIDs);for(var o of r){this.visibleCrystalIDs[o]=n;var t=document.getElementById("crystalID-dropdown-icon-"+o.toString());t.classList.contains("fa-check")!==n&&t.classList.toggle("fa-check")}this.updateReflectionsVisibility()}updateExptIDVisibility(){if(!this.crystalView)for(const[t,n]of Object.entries(this.visibleExptIDs)){let r=document.getElementById("exptID-dropdown-icon-"+t.toString());(!r.classList.contains("fa-check")&&n||r.classList.contains("fa-check")&&!n)&&r.classList.toggle("fa-check")}}updateCrystalIDVisibility(){if(this.crystalView)for(const[t,n]of Object.entries(this.visibleCrystalIDs)){let r=document.getElementById("crystalID-dropdown-icon-"+t.toString());(!r.classList.contains("fa-check")&&n||r.classList.contains("fa-check")&&!n)&&r.classList.toggle("fa-check")}}toggleExptVisibility(t){var n=parseInt(t.split("-").pop());this.visibleExptIDs[n]=!this.visibleExptIDs[n],this.updateReflectionsVisibility();var r=document.getElementById("exptID-dropdown-icon-"+n.toString());r.classList.toggle("fa-check")}toggleAllExptVisibility(){var t=document.getElementById("exptID-dropdown-icon-all");t.classList.toggle("fa-check");for(var n=t.classList.contains("fa-check"),r=0;r<this.visibleExptIDs.length;r++){this.visibleExptIDs[r]=n;var t=document.getElementById("exptID-dropdown-icon-"+r.toString());t.classList.contains("fa-check")!==n&&t.classList.toggle("fa-check")}this.updateReflectionsVisibility()}clearSelectionDropdown(){var t=document.getElementById("selectionDropdown");t.innerHTML=""}getCrystalIDs(){return this.crystalIndexedReflections.empty()?["-1"]:this.crystalIndexedReflections.keys()}getCrystalLabels(){var t=this.getCrystalIDs();return t=t.map(n=>n==="-1"?"unindexed":n),t}setSelectionDropdownToCrystals(){var t=22,n=4,r=this.getCrystalLabels(),o=r.length>n,c=null;const d={};var p=document.getElementById("selectionDropdown");p.innerHTML="";for(var v=0;v<r.length;v++)if(r[v]!=="unindexed"){var _=document.createElement("label");_.classList.add("experiment-label");var x=null;x=this.colors.reflectionCrystalIndexed[parseInt(v)%this.colors.reflectionCrystalIndexed.length];var M="#"+x.toString(16).padStart(6,"0");_.style.color=M;var b=document.createElement("i");b.classList.add("fa","fa-check"),b.style.float="right",b.id="crystalID-dropdown-icon-"+v;var E=r[v];E.length>t&&(E=E.slice(0,19)+"..."),_.textContent=E,_.id="crystalID-"+v,_.appendChild(b),_.addEventListener("click",U=>{this.toggleCrystalVisibility(U.target.id)}),o&&c===null&&(c=_),p.appendChild(_),p.appendChild(document.createElement("br")),d[v]=!0}if(o){console.assert(c!==null);var _=document.createElement("label");_.classList.add("experiment-label");var b=document.createElement("i");b.classList.add("fa","fa-check"),b.style.float="right",b.id="crystalID-dropdown-icon-all";var E="All";_.textContent=E,_.id="crystalID-all",_.appendChild(b),_.addEventListener("click",A=>{this.toggleAllCrystalVisibility()}),p.insertBefore(_,c),p.insertBefore(_,c)}this.visibleCrystalIDs=d}setSelectionDropdownToOrientations(){var t=22,n=4,r=this.expt.getImagesetIDs(),o=this.expt.getExptLabels(),c=o.length>n,d=null;const p=[];var v=document.getElementById("selectionDropdown");v.innerHTML="";for(var _=0;_<r.length;_++){var x=document.createElement("label");x.classList.add("experiment-label");var M="#"+this.colors.reflectionUnindexed[r[_]%this.colors.reflectionUnindexed.length].toString(16).padStart(6,"0");x.style.color=M;var b=document.createElement("i");b.classList.add("fa","fa-check"),b.style.float="right",b.id="exptID-dropdown-icon-"+r[_];var E=o[_];E.length>t&&(E=E.slice(0,19)+"..."),x.textContent=E,x.id="exptID-"+r[_],x.appendChild(b),x.addEventListener("click",L=>{this.toggleExptVisibility(L.target.id)}),c&&d===null&&(d=x),v.appendChild(x),v.appendChild(document.createElement("br")),p.push(!0)}if(c){console.assert(d!==null);var x=document.createElement("label");x.classList.add("experiment-label");var b=document.createElement("i");b.classList.add("fa","fa-check"),b.style.float="right",b.id="exptID-dropdown-icon-all";var E="All";x.textContent=E,x.id="exptID-all",x.appendChild(b),x.addEventListener("click",A=>{this.toggleAllExptVisibility()}),v.insertBefore(x,d),v.insertBefore(x,d)}this.visibleExptIDs=p}animate(){this.renderRequested&&(window.viewer.updateGUIInfo(),window.controls.update(),window.renderer.render(window.scene,window.camera),this.renderRequested=!1,window.viewer.enableMouseClick())}requestRender(){typeof window<"u"&&!this.renderRequested&&(this.renderRequested=!0,window.requestAnimationFrame(this.animate.bind(this)))}}function QB(){if(!(typeof window.viewer>"u")){window.renderer=new yO,window.renderer.setClearColor(window.viewer.colors.background),window.renderer.setSize(window.innerWidth,window.innerHeight),document.body.appendChild(window.renderer.domElement),window.scene=new ML,window.scene.fog=new fx(window.viewer.colors.background,500,8e3);var a=500,t=window.innerWidth/window.innerHeight;window.camera=new zE(a*t/-2,a*t/2,a/2,a/-2,1,5e4),window.renderer.render(window.scene,window.camera),window.rayCaster=new FL,window.controls=new SO(window.camera,window.renderer.domElement),window.controls.maxDistance=3e3,window.controls.enablePan=!1,window.controls.rotateSpeed=.2,window.controls.update(),window.controls.addEventListener("change",function(){window.viewer.requestRender()}),window.mousePosition=new ln,window.addEventListener("mousemove",function(n){window.mousePosition.x=n.clientX/window.innerWidth*2-1,window.mousePosition.y=-(n.clientY/window.innerHeight)*2+1,window.viewer.requestRender()}),window.addEventListener("resize",function(){window.camera.aspect=window.innerWidth/window.innerHeight,window.camera.updateProjectionMatrix(),window.renderer.setSize(window.innerWidth,window.innerHeight),window.viewer.requestRender()}),window.addEventListener("dragstart",n=>{dragged=n.target}),window.addEventListener("dragover",n=>{n.preventDefault()}),window.addEventListener("drop",function(n){n.preventDefault(),n.stopPropagation();const r=n.dataTransfer.files[0],o=r.name.split(".").pop();o=="refl"&&window.viewer.isStandalone?window.viewer.addReflectionTable(r):o=="expt"&&window.viewer.isStandalone&&window.viewer.addExperiment(r)}),window.addEventListener("dblclick",function(n){}),window.addEventListener("mousedown",function(n){n.button==2&&window.viewer.setCameraToDefaultPositionWithExperiment()}),window.addEventListener("keydown",function(n){n.key==="s"&&window.viewer.toggleSidebar()}),window.viewer.setCameraToDefaultPosition(),window.viewer.requestRender()}}/*! pako 2.1.0 https://github.com/nodeca/pako @license (MIT AND Zlib) */const ez=4,Sb=0,bb=1,tz=2;function Ch(a){let t=a.length;for(;--t>=0;)a[t]=0}const nz=0,Xw=1,iz=2,rz=3,sz=258,Nx=29,ff=256,Ju=ff+1+Nx,uh=30,Fx=19,qw=2*Ju+1,Il=15,Pg=16,az=7,Ox=256,Yw=16,Zw=17,$w=18,$0=new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]),Bp=new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]),oz=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]),Kw=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),lz=512,Ba=new Array((Ju+2)*2);Ch(Ba);const Bu=new Array(uh*2);Ch(Bu);const ju=new Array(lz);Ch(ju);const Qu=new Array(sz-rz+1);Ch(Qu);const Bx=new Array(Nx);Ch(Bx);const em=new Array(uh);Ch(em);function Ig(a,t,n,r,o){this.static_tree=a,this.extra_bits=t,this.extra_base=n,this.elems=r,this.max_length=o,this.has_stree=a&&a.length}let Jw,jw,Qw;function Dg(a,t){this.dyn_tree=a,this.max_code=0,this.stat_desc=t}const eT=a=>a<256?ju[a]:ju[256+(a>>>7)],ef=(a,t)=>{a.pending_buf[a.pending++]=t&255,a.pending_buf[a.pending++]=t>>>8&255},Zr=(a,t,n)=>{a.bi_valid>Pg-n?(a.bi_buf|=t<<a.bi_valid&65535,ef(a,a.bi_buf),a.bi_buf=t>>Pg-a.bi_valid,a.bi_valid+=n-Pg):(a.bi_buf|=t<<a.bi_valid&65535,a.bi_valid+=n)},la=(a,t,n)=>{Zr(a,n[t*2],n[t*2+1])},tT=(a,t)=>{let n=0;do n|=a&1,a>>>=1,n<<=1;while(--t>0);return n>>>1},cz=a=>{a.bi_valid===16?(ef(a,a.bi_buf),a.bi_buf=0,a.bi_valid=0):a.bi_valid>=8&&(a.pending_buf[a.pending++]=a.bi_buf&255,a.bi_buf>>=8,a.bi_valid-=8)},hz=(a,t)=>{const n=t.dyn_tree,r=t.max_code,o=t.stat_desc.static_tree,c=t.stat_desc.has_stree,d=t.stat_desc.extra_bits,p=t.stat_desc.extra_base,v=t.stat_desc.max_length;let _,x,M,b,E,U,L=0;for(b=0;b<=Il;b++)a.bl_count[b]=0;for(n[a.heap[a.heap_max]*2+1]=0,_=a.heap_max+1;_<qw;_++)x=a.heap[_],b=n[n[x*2+1]*2+1]+1,b>v&&(b=v,L++),n[x*2+1]=b,!(x>r)&&(a.bl_count[b]++,E=0,x>=p&&(E=d[x-p]),U=n[x*2],a.opt_len+=U*(b+E),c&&(a.static_len+=U*(o[x*2+1]+E)));if(L!==0){do{for(b=v-1;a.bl_count[b]===0;)b--;a.bl_count[b]--,a.bl_count[b+1]+=2,a.bl_count[v]--,L-=2}while(L>0);for(b=v;b!==0;b--)for(x=a.bl_count[b];x!==0;)M=a.heap[--_],!(M>r)&&(n[M*2+1]!==b&&(a.opt_len+=(b-n[M*2+1])*n[M*2],n[M*2+1]=b),x--)}},nT=(a,t,n)=>{const r=new Array(Il+1);let o=0,c,d;for(c=1;c<=Il;c++)o=o+n[c-1]<<1,r[c]=o;for(d=0;d<=t;d++){let p=a[d*2+1];p!==0&&(a[d*2]=tT(r[p]++,p))}},uz=()=>{let a,t,n,r,o;const c=new Array(Il+1);for(n=0,r=0;r<Nx-1;r++)for(Bx[r]=n,a=0;a<1<<$0[r];a++)Qu[n++]=r;for(Qu[n-1]=r,o=0,r=0;r<16;r++)for(em[r]=o,a=0;a<1<<Bp[r];a++)ju[o++]=r;for(o>>=7;r<uh;r++)for(em[r]=o<<7,a=0;a<1<<Bp[r]-7;a++)ju[256+o++]=r;for(t=0;t<=Il;t++)c[t]=0;for(a=0;a<=143;)Ba[a*2+1]=8,a++,c[8]++;for(;a<=255;)Ba[a*2+1]=9,a++,c[9]++;for(;a<=279;)Ba[a*2+1]=7,a++,c[7]++;for(;a<=287;)Ba[a*2+1]=8,a++,c[8]++;for(nT(Ba,Ju+1,c),a=0;a<uh;a++)Bu[a*2+1]=5,Bu[a*2]=tT(a,5);Jw=new Ig(Ba,$0,ff+1,Ju,Il),jw=new Ig(Bu,Bp,0,uh,Il),Qw=new Ig(new Array(0),oz,0,Fx,az)},iT=a=>{let t;for(t=0;t<Ju;t++)a.dyn_ltree[t*2]=0;for(t=0;t<uh;t++)a.dyn_dtree[t*2]=0;for(t=0;t<Fx;t++)a.bl_tree[t*2]=0;a.dyn_ltree[Ox*2]=1,a.opt_len=a.static_len=0,a.sym_next=a.matches=0},rT=a=>{a.bi_valid>8?ef(a,a.bi_buf):a.bi_valid>0&&(a.pending_buf[a.pending++]=a.bi_buf),a.bi_buf=0,a.bi_valid=0},Eb=(a,t,n,r)=>{const o=t*2,c=n*2;return a[o]<a[c]||a[o]===a[c]&&r[t]<=r[n]},Lg=(a,t,n)=>{const r=a.heap[n];let o=n<<1;for(;o<=a.heap_len&&(o<a.heap_len&&Eb(t,a.heap[o+1],a.heap[o],a.depth)&&o++,!Eb(t,r,a.heap[o],a.depth));)a.heap[n]=a.heap[o],n=o,o<<=1;a.heap[n]=r},wb=(a,t,n)=>{let r,o,c=0,d,p;if(a.sym_next!==0)do r=a.pending_buf[a.sym_buf+c++]&255,r+=(a.pending_buf[a.sym_buf+c++]&255)<<8,o=a.pending_buf[a.sym_buf+c++],r===0?la(a,o,t):(d=Qu[o],la(a,d+ff+1,t),p=$0[d],p!==0&&(o-=Bx[d],Zr(a,o,p)),r--,d=eT(r),la(a,d,n),p=Bp[d],p!==0&&(r-=em[d],Zr(a,r,p)));while(c<a.sym_next);la(a,Ox,t)},K0=(a,t)=>{const n=t.dyn_tree,r=t.stat_desc.static_tree,o=t.stat_desc.has_stree,c=t.stat_desc.elems;let d,p,v=-1,_;for(a.heap_len=0,a.heap_max=qw,d=0;d<c;d++)n[d*2]!==0?(a.heap[++a.heap_len]=v=d,a.depth[d]=0):n[d*2+1]=0;for(;a.heap_len<2;)_=a.heap[++a.heap_len]=v<2?++v:0,n[_*2]=1,a.depth[_]=0,a.opt_len--,o&&(a.static_len-=r[_*2+1]);for(t.max_code=v,d=a.heap_len>>1;d>=1;d--)Lg(a,n,d);_=c;do d=a.heap[1],a.heap[1]=a.heap[a.heap_len--],Lg(a,n,1),p=a.heap[1],a.heap[--a.heap_max]=d,a.heap[--a.heap_max]=p,n[_*2]=n[d*2]+n[p*2],a.depth[_]=(a.depth[d]>=a.depth[p]?a.depth[d]:a.depth[p])+1,n[d*2+1]=n[p*2+1]=_,a.heap[1]=_++,Lg(a,n,1);while(a.heap_len>=2);a.heap[--a.heap_max]=a.heap[1],hz(a,t),nT(n,v,a.bl_count)},Tb=(a,t,n)=>{let r,o=-1,c,d=t[0*2+1],p=0,v=7,_=4;for(d===0&&(v=138,_=3),t[(n+1)*2+1]=65535,r=0;r<=n;r++)c=d,d=t[(r+1)*2+1],!(++p<v&&c===d)&&(p<_?a.bl_tree[c*2]+=p:c!==0?(c!==o&&a.bl_tree[c*2]++,a.bl_tree[Yw*2]++):p<=10?a.bl_tree[Zw*2]++:a.bl_tree[$w*2]++,p=0,o=c,d===0?(v=138,_=3):c===d?(v=6,_=3):(v=7,_=4))},Ab=(a,t,n)=>{let r,o=-1,c,d=t[0*2+1],p=0,v=7,_=4;for(d===0&&(v=138,_=3),r=0;r<=n;r++)if(c=d,d=t[(r+1)*2+1],!(++p<v&&c===d)){if(p<_)do la(a,c,a.bl_tree);while(--p!==0);else c!==0?(c!==o&&(la(a,c,a.bl_tree),p--),la(a,Yw,a.bl_tree),Zr(a,p-3,2)):p<=10?(la(a,Zw,a.bl_tree),Zr(a,p-3,3)):(la(a,$w,a.bl_tree),Zr(a,p-11,7));p=0,o=c,d===0?(v=138,_=3):c===d?(v=6,_=3):(v=7,_=4)}},fz=a=>{let t;for(Tb(a,a.dyn_ltree,a.l_desc.max_code),Tb(a,a.dyn_dtree,a.d_desc.max_code),K0(a,a.bl_desc),t=Fx-1;t>=3&&a.bl_tree[Kw[t]*2+1]===0;t--);return a.opt_len+=3*(t+1)+5+5+4,t},dz=(a,t,n,r)=>{let o;for(Zr(a,t-257,5),Zr(a,n-1,5),Zr(a,r-4,4),o=0;o<r;o++)Zr(a,a.bl_tree[Kw[o]*2+1],3);Ab(a,a.dyn_ltree,t-1),Ab(a,a.dyn_dtree,n-1)},pz=a=>{let t=4093624447,n;for(n=0;n<=31;n++,t>>>=1)if(t&1&&a.dyn_ltree[n*2]!==0)return Sb;if(a.dyn_ltree[9*2]!==0||a.dyn_ltree[10*2]!==0||a.dyn_ltree[13*2]!==0)return bb;for(n=32;n<ff;n++)if(a.dyn_ltree[n*2]!==0)return bb;return Sb};let Rb=!1;const mz=a=>{Rb||(uz(),Rb=!0),a.l_desc=new Dg(a.dyn_ltree,Jw),a.d_desc=new Dg(a.dyn_dtree,jw),a.bl_desc=new Dg(a.bl_tree,Qw),a.bi_buf=0,a.bi_valid=0,iT(a)},sT=(a,t,n,r)=>{Zr(a,(nz<<1)+(r?1:0),3),rT(a),ef(a,n),ef(a,~n),n&&a.pending_buf.set(a.window.subarray(t,t+n),a.pending),a.pending+=n},_z=a=>{Zr(a,Xw<<1,3),la(a,Ox,Ba),cz(a)},gz=(a,t,n,r)=>{let o,c,d=0;a.level>0?(a.strm.data_type===tz&&(a.strm.data_type=pz(a)),K0(a,a.l_desc),K0(a,a.d_desc),d=fz(a),o=a.opt_len+3+7>>>3,c=a.static_len+3+7>>>3,c<=o&&(o=c)):o=c=n+5,n+4<=o&&t!==-1?sT(a,t,n,r):a.strategy===ez||c===o?(Zr(a,(Xw<<1)+(r?1:0),3),wb(a,Ba,Bu)):(Zr(a,(iz<<1)+(r?1:0),3),dz(a,a.l_desc.max_code+1,a.d_desc.max_code+1,d+1),wb(a,a.dyn_ltree,a.dyn_dtree)),iT(a),r&&rT(a)},xz=(a,t,n)=>(a.pending_buf[a.sym_buf+a.sym_next++]=t,a.pending_buf[a.sym_buf+a.sym_next++]=t>>8,a.pending_buf[a.sym_buf+a.sym_next++]=n,t===0?a.dyn_ltree[n*2]++:(a.matches++,t--,a.dyn_ltree[(Qu[n]+ff+1)*2]++,a.dyn_dtree[eT(t)*2]++),a.sym_next===a.sym_end);var vz=mz,yz=sT,Mz=gz,Sz=xz,bz=_z,Ez={_tr_init:vz,_tr_stored_block:yz,_tr_flush_block:Mz,_tr_tally:Sz,_tr_align:bz};const wz=(a,t,n,r)=>{let o=a&65535|0,c=a>>>16&65535|0,d=0;for(;n!==0;){d=n>2e3?2e3:n,n-=d;do o=o+t[r++]|0,c=c+o|0;while(--d);o%=65521,c%=65521}return o|c<<16|0};var tf=wz;const Tz=()=>{let a,t=[];for(var n=0;n<256;n++){a=n;for(var r=0;r<8;r++)a=a&1?3988292384^a>>>1:a>>>1;t[n]=a}return t},Az=new Uint32Array(Tz()),Rz=(a,t,n,r)=>{const o=Az,c=r+n;a^=-1;for(let d=r;d<c;d++)a=a>>>8^o[(a^t[d])&255];return a^-1};var or=Rz,Hl={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"},df={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_MEM_ERROR:-4,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8};const{_tr_init:Cz,_tr_stored_block:J0,_tr_flush_block:Pz,_tr_tally:Co,_tr_align:Iz}=Ez,{Z_NO_FLUSH:Po,Z_PARTIAL_FLUSH:Dz,Z_FULL_FLUSH:Lz,Z_FINISH:Ts,Z_BLOCK:Cb,Z_OK:fr,Z_STREAM_END:Pb,Z_STREAM_ERROR:fa,Z_DATA_ERROR:Uz,Z_BUF_ERROR:Ug,Z_DEFAULT_COMPRESSION:Nz,Z_FILTERED:Fz,Z_HUFFMAN_ONLY:Sp,Z_RLE:Oz,Z_FIXED:Bz,Z_DEFAULT_STRATEGY:zz,Z_UNKNOWN:kz,Z_DEFLATED:cm}=df,Vz=9,Hz=15,Gz=8,Wz=29,Xz=256,j0=Xz+1+Wz,qz=30,Yz=19,Zz=2*j0+1,$z=15,Gn=3,bo=258,da=bo+Gn+1,Kz=32,wh=42,zx=57,Q0=69,ex=73,tx=91,nx=103,Dl=113,Lu=666,Br=1,Ph=2,Gl=3,Ih=4,Jz=3,Ll=(a,t)=>(a.msg=Hl[t],t),Ib=a=>a*2-(a>4?9:0),vo=a=>{let t=a.length;for(;--t>=0;)a[t]=0},jz=a=>{let t,n,r,o=a.w_size;t=a.hash_size,r=t;do n=a.head[--r],a.head[r]=n>=o?n-o:0;while(--t);t=o,r=t;do n=a.prev[--r],a.prev[r]=n>=o?n-o:0;while(--t)};let Qz=(a,t,n)=>(t<<a.hash_shift^n)&a.hash_mask,Io=Qz;const ls=a=>{const t=a.state;let n=t.pending;n>a.avail_out&&(n=a.avail_out),n!==0&&(a.output.set(t.pending_buf.subarray(t.pending_out,t.pending_out+n),a.next_out),a.next_out+=n,t.pending_out+=n,a.total_out+=n,a.avail_out-=n,t.pending-=n,t.pending===0&&(t.pending_out=0))},fs=(a,t)=>{Pz(a,a.block_start>=0?a.block_start:-1,a.strstart-a.block_start,t),a.block_start=a.strstart,ls(a.strm)},ii=(a,t)=>{a.pending_buf[a.pending++]=t},Ru=(a,t)=>{a.pending_buf[a.pending++]=t>>>8&255,a.pending_buf[a.pending++]=t&255},ix=(a,t,n,r)=>{let o=a.avail_in;return o>r&&(o=r),o===0?0:(a.avail_in-=o,t.set(a.input.subarray(a.next_in,a.next_in+o),n),a.state.wrap===1?a.adler=tf(a.adler,t,o,n):a.state.wrap===2&&(a.adler=or(a.adler,t,o,n)),a.next_in+=o,a.total_in+=o,o)},aT=(a,t)=>{let n=a.max_chain_length,r=a.strstart,o,c,d=a.prev_length,p=a.nice_match;const v=a.strstart>a.w_size-da?a.strstart-(a.w_size-da):0,_=a.window,x=a.w_mask,M=a.prev,b=a.strstart+bo;let E=_[r+d-1],U=_[r+d];a.prev_length>=a.good_match&&(n>>=2),p>a.lookahead&&(p=a.lookahead);do if(o=t,!(_[o+d]!==U||_[o+d-1]!==E||_[o]!==_[r]||_[++o]!==_[r+1])){r+=2,o++;do;while(_[++r]===_[++o]&&_[++r]===_[++o]&&_[++r]===_[++o]&&_[++r]===_[++o]&&_[++r]===_[++o]&&_[++r]===_[++o]&&_[++r]===_[++o]&&_[++r]===_[++o]&&r<b);if(c=bo-(b-r),r=b-bo,c>d){if(a.match_start=t,d=c,c>=p)break;E=_[r+d-1],U=_[r+d]}}while((t=M[t&x])>v&&--n!==0);return d<=a.lookahead?d:a.lookahead},Th=a=>{const t=a.w_size;let n,r,o;do{if(r=a.window_size-a.lookahead-a.strstart,a.strstart>=t+(t-da)&&(a.window.set(a.window.subarray(t,t+t-r),0),a.match_start-=t,a.strstart-=t,a.block_start-=t,a.insert>a.strstart&&(a.insert=a.strstart),jz(a),r+=t),a.strm.avail_in===0)break;if(n=ix(a.strm,a.window,a.strstart+a.lookahead,r),a.lookahead+=n,a.lookahead+a.insert>=Gn)for(o=a.strstart-a.insert,a.ins_h=a.window[o],a.ins_h=Io(a,a.ins_h,a.window[o+1]);a.insert&&(a.ins_h=Io(a,a.ins_h,a.window[o+Gn-1]),a.prev[o&a.w_mask]=a.head[a.ins_h],a.head[a.ins_h]=o,o++,a.insert--,!(a.lookahead+a.insert<Gn)););}while(a.lookahead<da&&a.strm.avail_in!==0)},oT=(a,t)=>{let n=a.pending_buf_size-5>a.w_size?a.w_size:a.pending_buf_size-5,r,o,c,d=0,p=a.strm.avail_in;do{if(r=65535,c=a.bi_valid+42>>3,a.strm.avail_out<c||(c=a.strm.avail_out-c,o=a.strstart-a.block_start,r>o+a.strm.avail_in&&(r=o+a.strm.avail_in),r>c&&(r=c),r<n&&(r===0&&t!==Ts||t===Po||r!==o+a.strm.avail_in)))break;d=t===Ts&&r===o+a.strm.avail_in?1:0,J0(a,0,0,d),a.pending_buf[a.pending-4]=r,a.pending_buf[a.pending-3]=r>>8,a.pending_buf[a.pending-2]=~r,a.pending_buf[a.pending-1]=~r>>8,ls(a.strm),o&&(o>r&&(o=r),a.strm.output.set(a.window.subarray(a.block_start,a.block_start+o),a.strm.next_out),a.strm.next_out+=o,a.strm.avail_out-=o,a.strm.total_out+=o,a.block_start+=o,r-=o),r&&(ix(a.strm,a.strm.output,a.strm.next_out,r),a.strm.next_out+=r,a.strm.avail_out-=r,a.strm.total_out+=r)}while(d===0);return p-=a.strm.avail_in,p&&(p>=a.w_size?(a.matches=2,a.window.set(a.strm.input.subarray(a.strm.next_in-a.w_size,a.strm.next_in),0),a.strstart=a.w_size,a.insert=a.strstart):(a.window_size-a.strstart<=p&&(a.strstart-=a.w_size,a.window.set(a.window.subarray(a.w_size,a.w_size+a.strstart),0),a.matches<2&&a.matches++,a.insert>a.strstart&&(a.insert=a.strstart)),a.window.set(a.strm.input.subarray(a.strm.next_in-p,a.strm.next_in),a.strstart),a.strstart+=p,a.insert+=p>a.w_size-a.insert?a.w_size-a.insert:p),a.block_start=a.strstart),a.high_water<a.strstart&&(a.high_water=a.strstart),d?Ih:t!==Po&&t!==Ts&&a.strm.avail_in===0&&a.strstart===a.block_start?Ph:(c=a.window_size-a.strstart,a.strm.avail_in>c&&a.block_start>=a.w_size&&(a.block_start-=a.w_size,a.strstart-=a.w_size,a.window.set(a.window.subarray(a.w_size,a.w_size+a.strstart),0),a.matches<2&&a.matches++,c+=a.w_size,a.insert>a.strstart&&(a.insert=a.strstart)),c>a.strm.avail_in&&(c=a.strm.avail_in),c&&(ix(a.strm,a.window,a.strstart,c),a.strstart+=c,a.insert+=c>a.w_size-a.insert?a.w_size-a.insert:c),a.high_water<a.strstart&&(a.high_water=a.strstart),c=a.bi_valid+42>>3,c=a.pending_buf_size-c>65535?65535:a.pending_buf_size-c,n=c>a.w_size?a.w_size:c,o=a.strstart-a.block_start,(o>=n||(o||t===Ts)&&t!==Po&&a.strm.avail_in===0&&o<=c)&&(r=o>c?c:o,d=t===Ts&&a.strm.avail_in===0&&r===o?1:0,J0(a,a.block_start,r,d),a.block_start+=r,ls(a.strm)),d?Gl:Br)},Ng=(a,t)=>{let n,r;for(;;){if(a.lookahead<da){if(Th(a),a.lookahead<da&&t===Po)return Br;if(a.lookahead===0)break}if(n=0,a.lookahead>=Gn&&(a.ins_h=Io(a,a.ins_h,a.window[a.strstart+Gn-1]),n=a.prev[a.strstart&a.w_mask]=a.head[a.ins_h],a.head[a.ins_h]=a.strstart),n!==0&&a.strstart-n<=a.w_size-da&&(a.match_length=aT(a,n)),a.match_length>=Gn)if(r=Co(a,a.strstart-a.match_start,a.match_length-Gn),a.lookahead-=a.match_length,a.match_length<=a.max_lazy_match&&a.lookahead>=Gn){a.match_length--;do a.strstart++,a.ins_h=Io(a,a.ins_h,a.window[a.strstart+Gn-1]),n=a.prev[a.strstart&a.w_mask]=a.head[a.ins_h],a.head[a.ins_h]=a.strstart;while(--a.match_length!==0);a.strstart++}else a.strstart+=a.match_length,a.match_length=0,a.ins_h=a.window[a.strstart],a.ins_h=Io(a,a.ins_h,a.window[a.strstart+1]);else r=Co(a,0,a.window[a.strstart]),a.lookahead--,a.strstart++;if(r&&(fs(a,!1),a.strm.avail_out===0))return Br}return a.insert=a.strstart<Gn-1?a.strstart:Gn-1,t===Ts?(fs(a,!0),a.strm.avail_out===0?Gl:Ih):a.sym_next&&(fs(a,!1),a.strm.avail_out===0)?Br:Ph},Jc=(a,t)=>{let n,r,o;for(;;){if(a.lookahead<da){if(Th(a),a.lookahead<da&&t===Po)return Br;if(a.lookahead===0)break}if(n=0,a.lookahead>=Gn&&(a.ins_h=Io(a,a.ins_h,a.window[a.strstart+Gn-1]),n=a.prev[a.strstart&a.w_mask]=a.head[a.ins_h],a.head[a.ins_h]=a.strstart),a.prev_length=a.match_length,a.prev_match=a.match_start,a.match_length=Gn-1,n!==0&&a.prev_length<a.max_lazy_match&&a.strstart-n<=a.w_size-da&&(a.match_length=aT(a,n),a.match_length<=5&&(a.strategy===Fz||a.match_length===Gn&&a.strstart-a.match_start>4096)&&(a.match_length=Gn-1)),a.prev_length>=Gn&&a.match_length<=a.prev_length){o=a.strstart+a.lookahead-Gn,r=Co(a,a.strstart-1-a.prev_match,a.prev_length-Gn),a.lookahead-=a.prev_length-1,a.prev_length-=2;do++a.strstart<=o&&(a.ins_h=Io(a,a.ins_h,a.window[a.strstart+Gn-1]),n=a.prev[a.strstart&a.w_mask]=a.head[a.ins_h],a.head[a.ins_h]=a.strstart);while(--a.prev_length!==0);if(a.match_available=0,a.match_length=Gn-1,a.strstart++,r&&(fs(a,!1),a.strm.avail_out===0))return Br}else if(a.match_available){if(r=Co(a,0,a.window[a.strstart-1]),r&&fs(a,!1),a.strstart++,a.lookahead--,a.strm.avail_out===0)return Br}else a.match_available=1,a.strstart++,a.lookahead--}return a.match_available&&(r=Co(a,0,a.window[a.strstart-1]),a.match_available=0),a.insert=a.strstart<Gn-1?a.strstart:Gn-1,t===Ts?(fs(a,!0),a.strm.avail_out===0?Gl:Ih):a.sym_next&&(fs(a,!1),a.strm.avail_out===0)?Br:Ph},ek=(a,t)=>{let n,r,o,c;const d=a.window;for(;;){if(a.lookahead<=bo){if(Th(a),a.lookahead<=bo&&t===Po)return Br;if(a.lookahead===0)break}if(a.match_length=0,a.lookahead>=Gn&&a.strstart>0&&(o=a.strstart-1,r=d[o],r===d[++o]&&r===d[++o]&&r===d[++o])){c=a.strstart+bo;do;while(r===d[++o]&&r===d[++o]&&r===d[++o]&&r===d[++o]&&r===d[++o]&&r===d[++o]&&r===d[++o]&&r===d[++o]&&o<c);a.match_length=bo-(c-o),a.match_length>a.lookahead&&(a.match_length=a.lookahead)}if(a.match_length>=Gn?(n=Co(a,1,a.match_length-Gn),a.lookahead-=a.match_length,a.strstart+=a.match_length,a.match_length=0):(n=Co(a,0,a.window[a.strstart]),a.lookahead--,a.strstart++),n&&(fs(a,!1),a.strm.avail_out===0))return Br}return a.insert=0,t===Ts?(fs(a,!0),a.strm.avail_out===0?Gl:Ih):a.sym_next&&(fs(a,!1),a.strm.avail_out===0)?Br:Ph},tk=(a,t)=>{let n;for(;;){if(a.lookahead===0&&(Th(a),a.lookahead===0)){if(t===Po)return Br;break}if(a.match_length=0,n=Co(a,0,a.window[a.strstart]),a.lookahead--,a.strstart++,n&&(fs(a,!1),a.strm.avail_out===0))return Br}return a.insert=0,t===Ts?(fs(a,!0),a.strm.avail_out===0?Gl:Ih):a.sym_next&&(fs(a,!1),a.strm.avail_out===0)?Br:Ph};function ia(a,t,n,r,o){this.good_length=a,this.max_lazy=t,this.nice_length=n,this.max_chain=r,this.func=o}const Uu=[new ia(0,0,0,0,oT),new ia(4,4,8,4,Ng),new ia(4,5,16,8,Ng),new ia(4,6,32,32,Ng),new ia(4,4,16,16,Jc),new ia(8,16,32,32,Jc),new ia(8,16,128,128,Jc),new ia(8,32,128,256,Jc),new ia(32,128,258,1024,Jc),new ia(32,258,258,4096,Jc)],nk=a=>{a.window_size=2*a.w_size,vo(a.head),a.max_lazy_match=Uu[a.level].max_lazy,a.good_match=Uu[a.level].good_length,a.nice_match=Uu[a.level].nice_length,a.max_chain_length=Uu[a.level].max_chain,a.strstart=0,a.block_start=0,a.lookahead=0,a.insert=0,a.match_length=a.prev_length=Gn-1,a.match_available=0,a.ins_h=0};function ik(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=cm,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new Uint16Array(Zz*2),this.dyn_dtree=new Uint16Array((2*qz+1)*2),this.bl_tree=new Uint16Array((2*Yz+1)*2),vo(this.dyn_ltree),vo(this.dyn_dtree),vo(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new Uint16Array($z+1),this.heap=new Uint16Array(2*j0+1),vo(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new Uint16Array(2*j0+1),vo(this.depth),this.sym_buf=0,this.lit_bufsize=0,this.sym_next=0,this.sym_end=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}const pf=a=>{if(!a)return 1;const t=a.state;return!t||t.strm!==a||t.status!==wh&&t.status!==zx&&t.status!==Q0&&t.status!==ex&&t.status!==tx&&t.status!==nx&&t.status!==Dl&&t.status!==Lu?1:0},lT=a=>{if(pf(a))return Ll(a,fa);a.total_in=a.total_out=0,a.data_type=kz;const t=a.state;return t.pending=0,t.pending_out=0,t.wrap<0&&(t.wrap=-t.wrap),t.status=t.wrap===2?zx:t.wrap?wh:Dl,a.adler=t.wrap===2?0:1,t.last_flush=-2,Cz(t),fr},cT=a=>{const t=lT(a);return t===fr&&nk(a.state),t},rk=(a,t)=>pf(a)||a.state.wrap!==2?fa:(a.state.gzhead=t,fr),hT=(a,t,n,r,o,c)=>{if(!a)return fa;let d=1;if(t===Nz&&(t=6),r<0?(d=0,r=-r):r>15&&(d=2,r-=16),o<1||o>Vz||n!==cm||r<8||r>15||t<0||t>9||c<0||c>Bz||r===8&&d!==1)return Ll(a,fa);r===8&&(r=9);const p=new ik;return a.state=p,p.strm=a,p.status=wh,p.wrap=d,p.gzhead=null,p.w_bits=r,p.w_size=1<<p.w_bits,p.w_mask=p.w_size-1,p.hash_bits=o+7,p.hash_size=1<<p.hash_bits,p.hash_mask=p.hash_size-1,p.hash_shift=~~((p.hash_bits+Gn-1)/Gn),p.window=new Uint8Array(p.w_size*2),p.head=new Uint16Array(p.hash_size),p.prev=new Uint16Array(p.w_size),p.lit_bufsize=1<<o+6,p.pending_buf_size=p.lit_bufsize*4,p.pending_buf=new Uint8Array(p.pending_buf_size),p.sym_buf=p.lit_bufsize,p.sym_end=(p.lit_bufsize-1)*3,p.level=t,p.strategy=c,p.method=n,cT(a)},sk=(a,t)=>hT(a,t,cm,Hz,Gz,zz),ak=(a,t)=>{if(pf(a)||t>Cb||t<0)return a?Ll(a,fa):fa;const n=a.state;if(!a.output||a.avail_in!==0&&!a.input||n.status===Lu&&t!==Ts)return Ll(a,a.avail_out===0?Ug:fa);const r=n.last_flush;if(n.last_flush=t,n.pending!==0){if(ls(a),a.avail_out===0)return n.last_flush=-1,fr}else if(a.avail_in===0&&Ib(t)<=Ib(r)&&t!==Ts)return Ll(a,Ug);if(n.status===Lu&&a.avail_in!==0)return Ll(a,Ug);if(n.status===wh&&n.wrap===0&&(n.status=Dl),n.status===wh){let o=cm+(n.w_bits-8<<4)<<8,c=-1;if(n.strategy>=Sp||n.level<2?c=0:n.level<6?c=1:n.level===6?c=2:c=3,o|=c<<6,n.strstart!==0&&(o|=Kz),o+=31-o%31,Ru(n,o),n.strstart!==0&&(Ru(n,a.adler>>>16),Ru(n,a.adler&65535)),a.adler=1,n.status=Dl,ls(a),n.pending!==0)return n.last_flush=-1,fr}if(n.status===zx){if(a.adler=0,ii(n,31),ii(n,139),ii(n,8),n.gzhead)ii(n,(n.gzhead.text?1:0)+(n.gzhead.hcrc?2:0)+(n.gzhead.extra?4:0)+(n.gzhead.name?8:0)+(n.gzhead.comment?16:0)),ii(n,n.gzhead.time&255),ii(n,n.gzhead.time>>8&255),ii(n,n.gzhead.time>>16&255),ii(n,n.gzhead.time>>24&255),ii(n,n.level===9?2:n.strategy>=Sp||n.level<2?4:0),ii(n,n.gzhead.os&255),n.gzhead.extra&&n.gzhead.extra.length&&(ii(n,n.gzhead.extra.length&255),ii(n,n.gzhead.extra.length>>8&255)),n.gzhead.hcrc&&(a.adler=or(a.adler,n.pending_buf,n.pending,0)),n.gzindex=0,n.status=Q0;else if(ii(n,0),ii(n,0),ii(n,0),ii(n,0),ii(n,0),ii(n,n.level===9?2:n.strategy>=Sp||n.level<2?4:0),ii(n,Jz),n.status=Dl,ls(a),n.pending!==0)return n.last_flush=-1,fr}if(n.status===Q0){if(n.gzhead.extra){let o=n.pending,c=(n.gzhead.extra.length&65535)-n.gzindex;for(;n.pending+c>n.pending_buf_size;){let p=n.pending_buf_size-n.pending;if(n.pending_buf.set(n.gzhead.extra.subarray(n.gzindex,n.gzindex+p),n.pending),n.pending=n.pending_buf_size,n.gzhead.hcrc&&n.pending>o&&(a.adler=or(a.adler,n.pending_buf,n.pending-o,o)),n.gzindex+=p,ls(a),n.pending!==0)return n.last_flush=-1,fr;o=0,c-=p}let d=new Uint8Array(n.gzhead.extra);n.pending_buf.set(d.subarray(n.gzindex,n.gzindex+c),n.pending),n.pending+=c,n.gzhead.hcrc&&n.pending>o&&(a.adler=or(a.adler,n.pending_buf,n.pending-o,o)),n.gzindex=0}n.status=ex}if(n.status===ex){if(n.gzhead.name){let o=n.pending,c;do{if(n.pending===n.pending_buf_size){if(n.gzhead.hcrc&&n.pending>o&&(a.adler=or(a.adler,n.pending_buf,n.pending-o,o)),ls(a),n.pending!==0)return n.last_flush=-1,fr;o=0}n.gzindex<n.gzhead.name.length?c=n.gzhead.name.charCodeAt(n.gzindex++)&255:c=0,ii(n,c)}while(c!==0);n.gzhead.hcrc&&n.pending>o&&(a.adler=or(a.adler,n.pending_buf,n.pending-o,o)),n.gzindex=0}n.status=tx}if(n.status===tx){if(n.gzhead.comment){let o=n.pending,c;do{if(n.pending===n.pending_buf_size){if(n.gzhead.hcrc&&n.pending>o&&(a.adler=or(a.adler,n.pending_buf,n.pending-o,o)),ls(a),n.pending!==0)return n.last_flush=-1,fr;o=0}n.gzindex<n.gzhead.comment.length?c=n.gzhead.comment.charCodeAt(n.gzindex++)&255:c=0,ii(n,c)}while(c!==0);n.gzhead.hcrc&&n.pending>o&&(a.adler=or(a.adler,n.pending_buf,n.pending-o,o))}n.status=nx}if(n.status===nx){if(n.gzhead.hcrc){if(n.pending+2>n.pending_buf_size&&(ls(a),n.pending!==0))return n.last_flush=-1,fr;ii(n,a.adler&255),ii(n,a.adler>>8&255),a.adler=0}if(n.status=Dl,ls(a),n.pending!==0)return n.last_flush=-1,fr}if(a.avail_in!==0||n.lookahead!==0||t!==Po&&n.status!==Lu){let o=n.level===0?oT(n,t):n.strategy===Sp?tk(n,t):n.strategy===Oz?ek(n,t):Uu[n.level].func(n,t);if((o===Gl||o===Ih)&&(n.status=Lu),o===Br||o===Gl)return a.avail_out===0&&(n.last_flush=-1),fr;if(o===Ph&&(t===Dz?Iz(n):t!==Cb&&(J0(n,0,0,!1),t===Lz&&(vo(n.head),n.lookahead===0&&(n.strstart=0,n.block_start=0,n.insert=0))),ls(a),a.avail_out===0))return n.last_flush=-1,fr}return t!==Ts?fr:n.wrap<=0?Pb:(n.wrap===2?(ii(n,a.adler&255),ii(n,a.adler>>8&255),ii(n,a.adler>>16&255),ii(n,a.adler>>24&255),ii(n,a.total_in&255),ii(n,a.total_in>>8&255),ii(n,a.total_in>>16&255),ii(n,a.total_in>>24&255)):(Ru(n,a.adler>>>16),Ru(n,a.adler&65535)),ls(a),n.wrap>0&&(n.wrap=-n.wrap),n.pending!==0?fr:Pb)},ok=a=>{if(pf(a))return fa;const t=a.state.status;return a.state=null,t===Dl?Ll(a,Uz):fr},lk=(a,t)=>{let n=t.length;if(pf(a))return fa;const r=a.state,o=r.wrap;if(o===2||o===1&&r.status!==wh||r.lookahead)return fa;if(o===1&&(a.adler=tf(a.adler,t,n,0)),r.wrap=0,n>=r.w_size){o===0&&(vo(r.head),r.strstart=0,r.block_start=0,r.insert=0);let v=new Uint8Array(r.w_size);v.set(t.subarray(n-r.w_size,n),0),t=v,n=r.w_size}const c=a.avail_in,d=a.next_in,p=a.input;for(a.avail_in=n,a.next_in=0,a.input=t,Th(r);r.lookahead>=Gn;){let v=r.strstart,_=r.lookahead-(Gn-1);do r.ins_h=Io(r,r.ins_h,r.window[v+Gn-1]),r.prev[v&r.w_mask]=r.head[r.ins_h],r.head[r.ins_h]=v,v++;while(--_);r.strstart=v,r.lookahead=Gn-1,Th(r)}return r.strstart+=r.lookahead,r.block_start=r.strstart,r.insert=r.lookahead,r.lookahead=0,r.match_length=r.prev_length=Gn-1,r.match_available=0,a.next_in=d,a.input=p,a.avail_in=c,r.wrap=o,fr};var ck=sk,hk=hT,uk=cT,fk=lT,dk=rk,pk=ak,mk=ok,_k=lk,gk="pako deflate (from Nodeca project)",zu={deflateInit:ck,deflateInit2:hk,deflateReset:uk,deflateResetKeep:fk,deflateSetHeader:dk,deflate:pk,deflateEnd:mk,deflateSetDictionary:_k,deflateInfo:gk};const xk=(a,t)=>Object.prototype.hasOwnProperty.call(a,t);var vk=function(a){const t=Array.prototype.slice.call(arguments,1);for(;t.length;){const n=t.shift();if(n){if(typeof n!="object")throw new TypeError(n+"must be non-object");for(const r in n)xk(n,r)&&(a[r]=n[r])}}return a},yk=a=>{let t=0;for(let r=0,o=a.length;r<o;r++)t+=a[r].length;const n=new Uint8Array(t);for(let r=0,o=0,c=a.length;r<c;r++){let d=a[r];n.set(d,o),o+=d.length}return n},hm={assign:vk,flattenChunks:yk};let uT=!0;try{String.fromCharCode.apply(null,new Uint8Array(1))}catch{uT=!1}const nf=new Uint8Array(256);for(let a=0;a<256;a++)nf[a]=a>=252?6:a>=248?5:a>=240?4:a>=224?3:a>=192?2:1;nf[254]=nf[254]=1;var Mk=a=>{if(typeof TextEncoder=="function"&&TextEncoder.prototype.encode)return new TextEncoder().encode(a);let t,n,r,o,c,d=a.length,p=0;for(o=0;o<d;o++)n=a.charCodeAt(o),(n&64512)===55296&&o+1<d&&(r=a.charCodeAt(o+1),(r&64512)===56320&&(n=65536+(n-55296<<10)+(r-56320),o++)),p+=n<128?1:n<2048?2:n<65536?3:4;for(t=new Uint8Array(p),c=0,o=0;c<p;o++)n=a.charCodeAt(o),(n&64512)===55296&&o+1<d&&(r=a.charCodeAt(o+1),(r&64512)===56320&&(n=65536+(n-55296<<10)+(r-56320),o++)),n<128?t[c++]=n:n<2048?(t[c++]=192|n>>>6,t[c++]=128|n&63):n<65536?(t[c++]=224|n>>>12,t[c++]=128|n>>>6&63,t[c++]=128|n&63):(t[c++]=240|n>>>18,t[c++]=128|n>>>12&63,t[c++]=128|n>>>6&63,t[c++]=128|n&63);return t};const Sk=(a,t)=>{if(t<65534&&a.subarray&&uT)return String.fromCharCode.apply(null,a.length===t?a:a.subarray(0,t));let n="";for(let r=0;r<t;r++)n+=String.fromCharCode(a[r]);return n};var bk=(a,t)=>{const n=t||a.length;if(typeof TextDecoder=="function"&&TextDecoder.prototype.decode)return new TextDecoder().decode(a.subarray(0,t));let r,o;const c=new Array(n*2);for(o=0,r=0;r<n;){let d=a[r++];if(d<128){c[o++]=d;continue}let p=nf[d];if(p>4){c[o++]=65533,r+=p-1;continue}for(d&=p===2?31:p===3?15:7;p>1&&r<n;)d=d<<6|a[r++]&63,p--;if(p>1){c[o++]=65533;continue}d<65536?c[o++]=d:(d-=65536,c[o++]=55296|d>>10&1023,c[o++]=56320|d&1023)}return Sk(c,o)},Ek=(a,t)=>{t=t||a.length,t>a.length&&(t=a.length);let n=t-1;for(;n>=0&&(a[n]&192)===128;)n--;return n<0||n===0?t:n+nf[a[n]]>t?n:t},rf={string2buf:Mk,buf2string:bk,utf8border:Ek};function wk(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}var fT=wk;const dT=Object.prototype.toString,{Z_NO_FLUSH:Tk,Z_SYNC_FLUSH:Ak,Z_FULL_FLUSH:Rk,Z_FINISH:Ck,Z_OK:tm,Z_STREAM_END:Pk,Z_DEFAULT_COMPRESSION:Ik,Z_DEFAULT_STRATEGY:Dk,Z_DEFLATED:Lk}=df;function mf(a){this.options=hm.assign({level:Ik,method:Lk,chunkSize:16384,windowBits:15,memLevel:8,strategy:Dk},a||{});let t=this.options;t.raw&&t.windowBits>0?t.windowBits=-t.windowBits:t.gzip&&t.windowBits>0&&t.windowBits<16&&(t.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new fT,this.strm.avail_out=0;let n=zu.deflateInit2(this.strm,t.level,t.method,t.windowBits,t.memLevel,t.strategy);if(n!==tm)throw new Error(Hl[n]);if(t.header&&zu.deflateSetHeader(this.strm,t.header),t.dictionary){let r;if(typeof t.dictionary=="string"?r=rf.string2buf(t.dictionary):dT.call(t.dictionary)==="[object ArrayBuffer]"?r=new Uint8Array(t.dictionary):r=t.dictionary,n=zu.deflateSetDictionary(this.strm,r),n!==tm)throw new Error(Hl[n]);this._dict_set=!0}}mf.prototype.push=function(a,t){const n=this.strm,r=this.options.chunkSize;let o,c;if(this.ended)return!1;for(t===~~t?c=t:c=t===!0?Ck:Tk,typeof a=="string"?n.input=rf.string2buf(a):dT.call(a)==="[object ArrayBuffer]"?n.input=new Uint8Array(a):n.input=a,n.next_in=0,n.avail_in=n.input.length;;){if(n.avail_out===0&&(n.output=new Uint8Array(r),n.next_out=0,n.avail_out=r),(c===Ak||c===Rk)&&n.avail_out<=6){this.onData(n.output.subarray(0,n.next_out)),n.avail_out=0;continue}if(o=zu.deflate(n,c),o===Pk)return n.next_out>0&&this.onData(n.output.subarray(0,n.next_out)),o=zu.deflateEnd(this.strm),this.onEnd(o),this.ended=!0,o===tm;if(n.avail_out===0){this.onData(n.output);continue}if(c>0&&n.next_out>0){this.onData(n.output.subarray(0,n.next_out)),n.avail_out=0;continue}if(n.avail_in===0)break}return!0};mf.prototype.onData=function(a){this.chunks.push(a)};mf.prototype.onEnd=function(a){a===tm&&(this.result=hm.flattenChunks(this.chunks)),this.chunks=[],this.err=a,this.msg=this.strm.msg};function kx(a,t){const n=new mf(t);if(n.push(a,!0),n.err)throw n.msg||Hl[n.err];return n.result}function Uk(a,t){return t=t||{},t.raw=!0,kx(a,t)}function Nk(a,t){return t=t||{},t.gzip=!0,kx(a,t)}var Fk=mf,Ok=kx,Bk=Uk,zk=Nk,kk={Deflate:Fk,deflate:Ok,deflateRaw:Bk,gzip:zk};const bp=16209,Vk=16191;var Hk=function(t,n){let r,o,c,d,p,v,_,x,M,b,E,U,L,P,A,X,k,O,z,Y,W,te,N,B;const ee=t.state;r=t.next_in,N=t.input,o=r+(t.avail_in-5),c=t.next_out,B=t.output,d=c-(n-t.avail_out),p=c+(t.avail_out-257),v=ee.dmax,_=ee.wsize,x=ee.whave,M=ee.wnext,b=ee.window,E=ee.hold,U=ee.bits,L=ee.lencode,P=ee.distcode,A=(1<<ee.lenbits)-1,X=(1<<ee.distbits)-1;e:do{U<15&&(E+=N[r++]<<U,U+=8,E+=N[r++]<<U,U+=8),k=L[E&A];t:for(;;){if(O=k>>>24,E>>>=O,U-=O,O=k>>>16&255,O===0)B[c++]=k&65535;else if(O&16){z=k&65535,O&=15,O&&(U<O&&(E+=N[r++]<<U,U+=8),z+=E&(1<<O)-1,E>>>=O,U-=O),U<15&&(E+=N[r++]<<U,U+=8,E+=N[r++]<<U,U+=8),k=P[E&X];n:for(;;){if(O=k>>>24,E>>>=O,U-=O,O=k>>>16&255,O&16){if(Y=k&65535,O&=15,U<O&&(E+=N[r++]<<U,U+=8,U<O&&(E+=N[r++]<<U,U+=8)),Y+=E&(1<<O)-1,Y>v){t.msg="invalid distance too far back",ee.mode=bp;break e}if(E>>>=O,U-=O,O=c-d,Y>O){if(O=Y-O,O>x&&ee.sane){t.msg="invalid distance too far back",ee.mode=bp;break e}if(W=0,te=b,M===0){if(W+=_-O,O<z){z-=O;do B[c++]=b[W++];while(--O);W=c-Y,te=B}}else if(M<O){if(W+=_+M-O,O-=M,O<z){z-=O;do B[c++]=b[W++];while(--O);if(W=0,M<z){O=M,z-=O;do B[c++]=b[W++];while(--O);W=c-Y,te=B}}}else if(W+=M-O,O<z){z-=O;do B[c++]=b[W++];while(--O);W=c-Y,te=B}for(;z>2;)B[c++]=te[W++],B[c++]=te[W++],B[c++]=te[W++],z-=3;z&&(B[c++]=te[W++],z>1&&(B[c++]=te[W++]))}else{W=c-Y;do B[c++]=B[W++],B[c++]=B[W++],B[c++]=B[W++],z-=3;while(z>2);z&&(B[c++]=B[W++],z>1&&(B[c++]=B[W++]))}}else if((O&64)===0){k=P[(k&65535)+(E&(1<<O)-1)];continue n}else{t.msg="invalid distance code",ee.mode=bp;break e}break}}else if((O&64)===0){k=L[(k&65535)+(E&(1<<O)-1)];continue t}else if(O&32){ee.mode=Vk;break e}else{t.msg="invalid literal/length code",ee.mode=bp;break e}break}}while(r<o&&c<p);z=U>>3,r-=z,U-=z<<3,E&=(1<<U)-1,t.next_in=r,t.next_out=c,t.avail_in=r<o?5+(o-r):5-(r-o),t.avail_out=c<p?257+(p-c):257-(c-p),ee.hold=E,ee.bits=U};const jc=15,Db=852,Lb=592,Ub=0,Fg=1,Nb=2,Gk=new Uint16Array([3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0]),Wk=new Uint8Array([16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78]),Xk=new Uint16Array([1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0]),qk=new Uint8Array([16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64]),Yk=(a,t,n,r,o,c,d,p)=>{const v=p.bits;let _=0,x=0,M=0,b=0,E=0,U=0,L=0,P=0,A=0,X=0,k,O,z,Y,W,te=null,N;const B=new Uint16Array(jc+1),ee=new Uint16Array(jc+1);let Ee=null,de,be,Ae;for(_=0;_<=jc;_++)B[_]=0;for(x=0;x<r;x++)B[t[n+x]]++;for(E=v,b=jc;b>=1&&B[b]===0;b--);if(E>b&&(E=b),b===0)return o[c++]=1<<24|64<<16|0,o[c++]=1<<24|64<<16|0,p.bits=1,0;for(M=1;M<b&&B[M]===0;M++);for(E<M&&(E=M),P=1,_=1;_<=jc;_++)if(P<<=1,P-=B[_],P<0)return-1;if(P>0&&(a===Ub||b!==1))return-1;for(ee[1]=0,_=1;_<jc;_++)ee[_+1]=ee[_]+B[_];for(x=0;x<r;x++)t[n+x]!==0&&(d[ee[t[n+x]]++]=x);if(a===Ub?(te=Ee=d,N=20):a===Fg?(te=Gk,Ee=Wk,N=257):(te=Xk,Ee=qk,N=0),X=0,x=0,_=M,W=c,U=E,L=0,z=-1,A=1<<E,Y=A-1,a===Fg&&A>Db||a===Nb&&A>Lb)return 1;for(;;){de=_-L,d[x]+1<N?(be=0,Ae=d[x]):d[x]>=N?(be=Ee[d[x]-N],Ae=te[d[x]-N]):(be=96,Ae=0),k=1<<_-L,O=1<<U,M=O;do O-=k,o[W+(X>>L)+O]=de<<24|be<<16|Ae|0;while(O!==0);for(k=1<<_-1;X&k;)k>>=1;if(k!==0?(X&=k-1,X+=k):X=0,x++,--B[_]===0){if(_===b)break;_=t[n+d[x]]}if(_>E&&(X&Y)!==z){for(L===0&&(L=E),W+=M,U=_-L,P=1<<U;U+L<b&&(P-=B[U+L],!(P<=0));)U++,P<<=1;if(A+=1<<U,a===Fg&&A>Db||a===Nb&&A>Lb)return 1;z=X&Y,o[z]=E<<24|U<<16|W-c|0}}return X!==0&&(o[W+X]=_-L<<24|64<<16|0),p.bits=E,0};var ku=Yk;const Zk=0,pT=1,mT=2,{Z_FINISH:Fb,Z_BLOCK:$k,Z_TREES:Ep,Z_OK:Wl,Z_STREAM_END:Kk,Z_NEED_DICT:Jk,Z_STREAM_ERROR:Is,Z_DATA_ERROR:_T,Z_MEM_ERROR:gT,Z_BUF_ERROR:jk,Z_DEFLATED:Ob}=df,um=16180,Bb=16181,zb=16182,kb=16183,Vb=16184,Hb=16185,Gb=16186,Wb=16187,Xb=16188,qb=16189,nm=16190,Ua=16191,Og=16192,Yb=16193,Bg=16194,Zb=16195,$b=16196,Kb=16197,Jb=16198,wp=16199,Tp=16200,jb=16201,Qb=16202,eE=16203,tE=16204,nE=16205,zg=16206,iE=16207,rE=16208,Ei=16209,xT=16210,vT=16211,Qk=852,eV=592,tV=15,nV=tV,sE=a=>(a>>>24&255)+(a>>>8&65280)+((a&65280)<<8)+((a&255)<<24);function iV(){this.strm=null,this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new Uint16Array(320),this.work=new Uint16Array(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}const Zl=a=>{if(!a)return 1;const t=a.state;return!t||t.strm!==a||t.mode<um||t.mode>vT?1:0},yT=a=>{if(Zl(a))return Is;const t=a.state;return a.total_in=a.total_out=t.total=0,a.msg="",t.wrap&&(a.adler=t.wrap&1),t.mode=um,t.last=0,t.havedict=0,t.flags=-1,t.dmax=32768,t.head=null,t.hold=0,t.bits=0,t.lencode=t.lendyn=new Int32Array(Qk),t.distcode=t.distdyn=new Int32Array(eV),t.sane=1,t.back=-1,Wl},MT=a=>{if(Zl(a))return Is;const t=a.state;return t.wsize=0,t.whave=0,t.wnext=0,yT(a)},ST=(a,t)=>{let n;if(Zl(a))return Is;const r=a.state;return t<0?(n=0,t=-t):(n=(t>>4)+5,t<48&&(t&=15)),t&&(t<8||t>15)?Is:(r.window!==null&&r.wbits!==t&&(r.window=null),r.wrap=n,r.wbits=t,MT(a))},bT=(a,t)=>{if(!a)return Is;const n=new iV;a.state=n,n.strm=a,n.window=null,n.mode=um;const r=ST(a,t);return r!==Wl&&(a.state=null),r},rV=a=>bT(a,nV);let aE=!0,kg,Vg;const sV=a=>{if(aE){kg=new Int32Array(512),Vg=new Int32Array(32);let t=0;for(;t<144;)a.lens[t++]=8;for(;t<256;)a.lens[t++]=9;for(;t<280;)a.lens[t++]=7;for(;t<288;)a.lens[t++]=8;for(ku(pT,a.lens,0,288,kg,0,a.work,{bits:9}),t=0;t<32;)a.lens[t++]=5;ku(mT,a.lens,0,32,Vg,0,a.work,{bits:5}),aE=!1}a.lencode=kg,a.lenbits=9,a.distcode=Vg,a.distbits=5},ET=(a,t,n,r)=>{let o;const c=a.state;return c.window===null&&(c.wsize=1<<c.wbits,c.wnext=0,c.whave=0,c.window=new Uint8Array(c.wsize)),r>=c.wsize?(c.window.set(t.subarray(n-c.wsize,n),0),c.wnext=0,c.whave=c.wsize):(o=c.wsize-c.wnext,o>r&&(o=r),c.window.set(t.subarray(n-r,n-r+o),c.wnext),r-=o,r?(c.window.set(t.subarray(n-r,n),0),c.wnext=r,c.whave=c.wsize):(c.wnext+=o,c.wnext===c.wsize&&(c.wnext=0),c.whave<c.wsize&&(c.whave+=o))),0},aV=(a,t)=>{let n,r,o,c,d,p,v,_,x,M,b,E,U,L,P=0,A,X,k,O,z,Y,W,te;const N=new Uint8Array(4);let B,ee;const Ee=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);if(Zl(a)||!a.output||!a.input&&a.avail_in!==0)return Is;n=a.state,n.mode===Ua&&(n.mode=Og),d=a.next_out,o=a.output,v=a.avail_out,c=a.next_in,r=a.input,p=a.avail_in,_=n.hold,x=n.bits,M=p,b=v,te=Wl;e:for(;;)switch(n.mode){case um:if(n.wrap===0){n.mode=Og;break}for(;x<16;){if(p===0)break e;p--,_+=r[c++]<<x,x+=8}if(n.wrap&2&&_===35615){n.wbits===0&&(n.wbits=15),n.check=0,N[0]=_&255,N[1]=_>>>8&255,n.check=or(n.check,N,2,0),_=0,x=0,n.mode=Bb;break}if(n.head&&(n.head.done=!1),!(n.wrap&1)||(((_&255)<<8)+(_>>8))%31){a.msg="incorrect header check",n.mode=Ei;break}if((_&15)!==Ob){a.msg="unknown compression method",n.mode=Ei;break}if(_>>>=4,x-=4,W=(_&15)+8,n.wbits===0&&(n.wbits=W),W>15||W>n.wbits){a.msg="invalid window size",n.mode=Ei;break}n.dmax=1<<n.wbits,n.flags=0,a.adler=n.check=1,n.mode=_&512?qb:Ua,_=0,x=0;break;case Bb:for(;x<16;){if(p===0)break e;p--,_+=r[c++]<<x,x+=8}if(n.flags=_,(n.flags&255)!==Ob){a.msg="unknown compression method",n.mode=Ei;break}if(n.flags&57344){a.msg="unknown header flags set",n.mode=Ei;break}n.head&&(n.head.text=_>>8&1),n.flags&512&&n.wrap&4&&(N[0]=_&255,N[1]=_>>>8&255,n.check=or(n.check,N,2,0)),_=0,x=0,n.mode=zb;case zb:for(;x<32;){if(p===0)break e;p--,_+=r[c++]<<x,x+=8}n.head&&(n.head.time=_),n.flags&512&&n.wrap&4&&(N[0]=_&255,N[1]=_>>>8&255,N[2]=_>>>16&255,N[3]=_>>>24&255,n.check=or(n.check,N,4,0)),_=0,x=0,n.mode=kb;case kb:for(;x<16;){if(p===0)break e;p--,_+=r[c++]<<x,x+=8}n.head&&(n.head.xflags=_&255,n.head.os=_>>8),n.flags&512&&n.wrap&4&&(N[0]=_&255,N[1]=_>>>8&255,n.check=or(n.check,N,2,0)),_=0,x=0,n.mode=Vb;case Vb:if(n.flags&1024){for(;x<16;){if(p===0)break e;p--,_+=r[c++]<<x,x+=8}n.length=_,n.head&&(n.head.extra_len=_),n.flags&512&&n.wrap&4&&(N[0]=_&255,N[1]=_>>>8&255,n.check=or(n.check,N,2,0)),_=0,x=0}else n.head&&(n.head.extra=null);n.mode=Hb;case Hb:if(n.flags&1024&&(E=n.length,E>p&&(E=p),E&&(n.head&&(W=n.head.extra_len-n.length,n.head.extra||(n.head.extra=new Uint8Array(n.head.extra_len)),n.head.extra.set(r.subarray(c,c+E),W)),n.flags&512&&n.wrap&4&&(n.check=or(n.check,r,E,c)),p-=E,c+=E,n.length-=E),n.length))break e;n.length=0,n.mode=Gb;case Gb:if(n.flags&2048){if(p===0)break e;E=0;do W=r[c+E++],n.head&&W&&n.length<65536&&(n.head.name+=String.fromCharCode(W));while(W&&E<p);if(n.flags&512&&n.wrap&4&&(n.check=or(n.check,r,E,c)),p-=E,c+=E,W)break e}else n.head&&(n.head.name=null);n.length=0,n.mode=Wb;case Wb:if(n.flags&4096){if(p===0)break e;E=0;do W=r[c+E++],n.head&&W&&n.length<65536&&(n.head.comment+=String.fromCharCode(W));while(W&&E<p);if(n.flags&512&&n.wrap&4&&(n.check=or(n.check,r,E,c)),p-=E,c+=E,W)break e}else n.head&&(n.head.comment=null);n.mode=Xb;case Xb:if(n.flags&512){for(;x<16;){if(p===0)break e;p--,_+=r[c++]<<x,x+=8}if(n.wrap&4&&_!==(n.check&65535)){a.msg="header crc mismatch",n.mode=Ei;break}_=0,x=0}n.head&&(n.head.hcrc=n.flags>>9&1,n.head.done=!0),a.adler=n.check=0,n.mode=Ua;break;case qb:for(;x<32;){if(p===0)break e;p--,_+=r[c++]<<x,x+=8}a.adler=n.check=sE(_),_=0,x=0,n.mode=nm;case nm:if(n.havedict===0)return a.next_out=d,a.avail_out=v,a.next_in=c,a.avail_in=p,n.hold=_,n.bits=x,Jk;a.adler=n.check=1,n.mode=Ua;case Ua:if(t===$k||t===Ep)break e;case Og:if(n.last){_>>>=x&7,x-=x&7,n.mode=zg;break}for(;x<3;){if(p===0)break e;p--,_+=r[c++]<<x,x+=8}switch(n.last=_&1,_>>>=1,x-=1,_&3){case 0:n.mode=Yb;break;case 1:if(sV(n),n.mode=wp,t===Ep){_>>>=2,x-=2;break e}break;case 2:n.mode=$b;break;case 3:a.msg="invalid block type",n.mode=Ei}_>>>=2,x-=2;break;case Yb:for(_>>>=x&7,x-=x&7;x<32;){if(p===0)break e;p--,_+=r[c++]<<x,x+=8}if((_&65535)!==(_>>>16^65535)){a.msg="invalid stored block lengths",n.mode=Ei;break}if(n.length=_&65535,_=0,x=0,n.mode=Bg,t===Ep)break e;case Bg:n.mode=Zb;case Zb:if(E=n.length,E){if(E>p&&(E=p),E>v&&(E=v),E===0)break e;o.set(r.subarray(c,c+E),d),p-=E,c+=E,v-=E,d+=E,n.length-=E;break}n.mode=Ua;break;case $b:for(;x<14;){if(p===0)break e;p--,_+=r[c++]<<x,x+=8}if(n.nlen=(_&31)+257,_>>>=5,x-=5,n.ndist=(_&31)+1,_>>>=5,x-=5,n.ncode=(_&15)+4,_>>>=4,x-=4,n.nlen>286||n.ndist>30){a.msg="too many length or distance symbols",n.mode=Ei;break}n.have=0,n.mode=Kb;case Kb:for(;n.have<n.ncode;){for(;x<3;){if(p===0)break e;p--,_+=r[c++]<<x,x+=8}n.lens[Ee[n.have++]]=_&7,_>>>=3,x-=3}for(;n.have<19;)n.lens[Ee[n.have++]]=0;if(n.lencode=n.lendyn,n.lenbits=7,B={bits:n.lenbits},te=ku(Zk,n.lens,0,19,n.lencode,0,n.work,B),n.lenbits=B.bits,te){a.msg="invalid code lengths set",n.mode=Ei;break}n.have=0,n.mode=Jb;case Jb:for(;n.have<n.nlen+n.ndist;){for(;P=n.lencode[_&(1<<n.lenbits)-1],A=P>>>24,X=P>>>16&255,k=P&65535,!(A<=x);){if(p===0)break e;p--,_+=r[c++]<<x,x+=8}if(k<16)_>>>=A,x-=A,n.lens[n.have++]=k;else{if(k===16){for(ee=A+2;x<ee;){if(p===0)break e;p--,_+=r[c++]<<x,x+=8}if(_>>>=A,x-=A,n.have===0){a.msg="invalid bit length repeat",n.mode=Ei;break}W=n.lens[n.have-1],E=3+(_&3),_>>>=2,x-=2}else if(k===17){for(ee=A+3;x<ee;){if(p===0)break e;p--,_+=r[c++]<<x,x+=8}_>>>=A,x-=A,W=0,E=3+(_&7),_>>>=3,x-=3}else{for(ee=A+7;x<ee;){if(p===0)break e;p--,_+=r[c++]<<x,x+=8}_>>>=A,x-=A,W=0,E=11+(_&127),_>>>=7,x-=7}if(n.have+E>n.nlen+n.ndist){a.msg="invalid bit length repeat",n.mode=Ei;break}for(;E--;)n.lens[n.have++]=W}}if(n.mode===Ei)break;if(n.lens[256]===0){a.msg="invalid code -- missing end-of-block",n.mode=Ei;break}if(n.lenbits=9,B={bits:n.lenbits},te=ku(pT,n.lens,0,n.nlen,n.lencode,0,n.work,B),n.lenbits=B.bits,te){a.msg="invalid literal/lengths set",n.mode=Ei;break}if(n.distbits=6,n.distcode=n.distdyn,B={bits:n.distbits},te=ku(mT,n.lens,n.nlen,n.ndist,n.distcode,0,n.work,B),n.distbits=B.bits,te){a.msg="invalid distances set",n.mode=Ei;break}if(n.mode=wp,t===Ep)break e;case wp:n.mode=Tp;case Tp:if(p>=6&&v>=258){a.next_out=d,a.avail_out=v,a.next_in=c,a.avail_in=p,n.hold=_,n.bits=x,Hk(a,b),d=a.next_out,o=a.output,v=a.avail_out,c=a.next_in,r=a.input,p=a.avail_in,_=n.hold,x=n.bits,n.mode===Ua&&(n.back=-1);break}for(n.back=0;P=n.lencode[_&(1<<n.lenbits)-1],A=P>>>24,X=P>>>16&255,k=P&65535,!(A<=x);){if(p===0)break e;p--,_+=r[c++]<<x,x+=8}if(X&&(X&240)===0){for(O=A,z=X,Y=k;P=n.lencode[Y+((_&(1<<O+z)-1)>>O)],A=P>>>24,X=P>>>16&255,k=P&65535,!(O+A<=x);){if(p===0)break e;p--,_+=r[c++]<<x,x+=8}_>>>=O,x-=O,n.back+=O}if(_>>>=A,x-=A,n.back+=A,n.length=k,X===0){n.mode=nE;break}if(X&32){n.back=-1,n.mode=Ua;break}if(X&64){a.msg="invalid literal/length code",n.mode=Ei;break}n.extra=X&15,n.mode=jb;case jb:if(n.extra){for(ee=n.extra;x<ee;){if(p===0)break e;p--,_+=r[c++]<<x,x+=8}n.length+=_&(1<<n.extra)-1,_>>>=n.extra,x-=n.extra,n.back+=n.extra}n.was=n.length,n.mode=Qb;case Qb:for(;P=n.distcode[_&(1<<n.distbits)-1],A=P>>>24,X=P>>>16&255,k=P&65535,!(A<=x);){if(p===0)break e;p--,_+=r[c++]<<x,x+=8}if((X&240)===0){for(O=A,z=X,Y=k;P=n.distcode[Y+((_&(1<<O+z)-1)>>O)],A=P>>>24,X=P>>>16&255,k=P&65535,!(O+A<=x);){if(p===0)break e;p--,_+=r[c++]<<x,x+=8}_>>>=O,x-=O,n.back+=O}if(_>>>=A,x-=A,n.back+=A,X&64){a.msg="invalid distance code",n.mode=Ei;break}n.offset=k,n.extra=X&15,n.mode=eE;case eE:if(n.extra){for(ee=n.extra;x<ee;){if(p===0)break e;p--,_+=r[c++]<<x,x+=8}n.offset+=_&(1<<n.extra)-1,_>>>=n.extra,x-=n.extra,n.back+=n.extra}if(n.offset>n.dmax){a.msg="invalid distance too far back",n.mode=Ei;break}n.mode=tE;case tE:if(v===0)break e;if(E=b-v,n.offset>E){if(E=n.offset-E,E>n.whave&&n.sane){a.msg="invalid distance too far back",n.mode=Ei;break}E>n.wnext?(E-=n.wnext,U=n.wsize-E):U=n.wnext-E,E>n.length&&(E=n.length),L=n.window}else L=o,U=d-n.offset,E=n.length;E>v&&(E=v),v-=E,n.length-=E;do o[d++]=L[U++];while(--E);n.length===0&&(n.mode=Tp);break;case nE:if(v===0)break e;o[d++]=n.length,v--,n.mode=Tp;break;case zg:if(n.wrap){for(;x<32;){if(p===0)break e;p--,_|=r[c++]<<x,x+=8}if(b-=v,a.total_out+=b,n.total+=b,n.wrap&4&&b&&(a.adler=n.check=n.flags?or(n.check,o,b,d-b):tf(n.check,o,b,d-b)),b=v,n.wrap&4&&(n.flags?_:sE(_))!==n.check){a.msg="incorrect data check",n.mode=Ei;break}_=0,x=0}n.mode=iE;case iE:if(n.wrap&&n.flags){for(;x<32;){if(p===0)break e;p--,_+=r[c++]<<x,x+=8}if(n.wrap&4&&_!==(n.total&4294967295)){a.msg="incorrect length check",n.mode=Ei;break}_=0,x=0}n.mode=rE;case rE:te=Kk;break e;case Ei:te=_T;break e;case xT:return gT;case vT:default:return Is}return a.next_out=d,a.avail_out=v,a.next_in=c,a.avail_in=p,n.hold=_,n.bits=x,(n.wsize||b!==a.avail_out&&n.mode<Ei&&(n.mode<zg||t!==Fb))&&ET(a,a.output,a.next_out,b-a.avail_out),M-=a.avail_in,b-=a.avail_out,a.total_in+=M,a.total_out+=b,n.total+=b,n.wrap&4&&b&&(a.adler=n.check=n.flags?or(n.check,o,b,a.next_out-b):tf(n.check,o,b,a.next_out-b)),a.data_type=n.bits+(n.last?64:0)+(n.mode===Ua?128:0)+(n.mode===wp||n.mode===Bg?256:0),(M===0&&b===0||t===Fb)&&te===Wl&&(te=jk),te},oV=a=>{if(Zl(a))return Is;let t=a.state;return t.window&&(t.window=null),a.state=null,Wl},lV=(a,t)=>{if(Zl(a))return Is;const n=a.state;return(n.wrap&2)===0?Is:(n.head=t,t.done=!1,Wl)},cV=(a,t)=>{const n=t.length;let r,o,c;return Zl(a)||(r=a.state,r.wrap!==0&&r.mode!==nm)?Is:r.mode===nm&&(o=1,o=tf(o,t,n,0),o!==r.check)?_T:(c=ET(a,t,n,n),c?(r.mode=xT,gT):(r.havedict=1,Wl))};var hV=MT,uV=ST,fV=yT,dV=rV,pV=bT,mV=aV,_V=oV,gV=lV,xV=cV,vV="pako inflate (from Nodeca project)",za={inflateReset:hV,inflateReset2:uV,inflateResetKeep:fV,inflateInit:dV,inflateInit2:pV,inflate:mV,inflateEnd:_V,inflateGetHeader:gV,inflateSetDictionary:xV,inflateInfo:vV};function yV(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}var MV=yV;const wT=Object.prototype.toString,{Z_NO_FLUSH:SV,Z_FINISH:bV,Z_OK:sf,Z_STREAM_END:Hg,Z_NEED_DICT:Gg,Z_STREAM_ERROR:EV,Z_DATA_ERROR:oE,Z_MEM_ERROR:wV}=df;function _f(a){this.options=hm.assign({chunkSize:1024*64,windowBits:15,to:""},a||{});const t=this.options;t.raw&&t.windowBits>=0&&t.windowBits<16&&(t.windowBits=-t.windowBits,t.windowBits===0&&(t.windowBits=-15)),t.windowBits>=0&&t.windowBits<16&&!(a&&a.windowBits)&&(t.windowBits+=32),t.windowBits>15&&t.windowBits<48&&(t.windowBits&15)===0&&(t.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new fT,this.strm.avail_out=0;let n=za.inflateInit2(this.strm,t.windowBits);if(n!==sf)throw new Error(Hl[n]);if(this.header=new MV,za.inflateGetHeader(this.strm,this.header),t.dictionary&&(typeof t.dictionary=="string"?t.dictionary=rf.string2buf(t.dictionary):wT.call(t.dictionary)==="[object ArrayBuffer]"&&(t.dictionary=new Uint8Array(t.dictionary)),t.raw&&(n=za.inflateSetDictionary(this.strm,t.dictionary),n!==sf)))throw new Error(Hl[n])}_f.prototype.push=function(a,t){const n=this.strm,r=this.options.chunkSize,o=this.options.dictionary;let c,d,p;if(this.ended)return!1;for(t===~~t?d=t:d=t===!0?bV:SV,wT.call(a)==="[object ArrayBuffer]"?n.input=new Uint8Array(a):n.input=a,n.next_in=0,n.avail_in=n.input.length;;){for(n.avail_out===0&&(n.output=new Uint8Array(r),n.next_out=0,n.avail_out=r),c=za.inflate(n,d),c===Gg&&o&&(c=za.inflateSetDictionary(n,o),c===sf?c=za.inflate(n,d):c===oE&&(c=Gg));n.avail_in>0&&c===Hg&&n.state.wrap>0&&a[n.next_in]!==0;)za.inflateReset(n),c=za.inflate(n,d);switch(c){case EV:case oE:case Gg:case wV:return this.onEnd(c),this.ended=!0,!1}if(p=n.avail_out,n.next_out&&(n.avail_out===0||c===Hg))if(this.options.to==="string"){let v=rf.utf8border(n.output,n.next_out),_=n.next_out-v,x=rf.buf2string(n.output,v);n.next_out=_,n.avail_out=r-_,_&&n.output.set(n.output.subarray(v,v+_),0),this.onData(x)}else this.onData(n.output.length===n.next_out?n.output:n.output.subarray(0,n.next_out));if(!(c===sf&&p===0)){if(c===Hg)return c=za.inflateEnd(this.strm),this.onEnd(c),this.ended=!0,!0;if(n.avail_in===0)break}}return!0};_f.prototype.onData=function(a){this.chunks.push(a)};_f.prototype.onEnd=function(a){a===sf&&(this.options.to==="string"?this.result=this.chunks.join(""):this.result=hm.flattenChunks(this.chunks)),this.chunks=[],this.err=a,this.msg=this.strm.msg};function Vx(a,t){const n=new _f(t);if(n.push(a),n.err)throw n.msg||Hl[n.err];return n.result}function TV(a,t){return t=t||{},t.raw=!0,Vx(a,t)}var AV=_f,RV=Vx,CV=TV,PV=Vx,IV={Inflate:AV,inflate:RV,inflateRaw:CV,ungzip:PV};const{Deflate:DV,deflate:LV,deflateRaw:UV,gzip:NV}=kk,{Inflate:FV,inflate:OV,inflateRaw:BV,ungzip:zV}=IV;var kV=DV,VV=LV,HV=UV,GV=NV,WV=FV,XV=OV,qV=BV,YV=zV,ZV=df,$V={Deflate:kV,deflate:VV,deflateRaw:HV,gzip:GV,Inflate:WV,inflate:XV,inflateRaw:qV,ungzip:YV,constants:ZV},Wg={exports:{}},lE;function KV(){return lE||(lE=1,function(a){(function(){function t(d,p){if(p&&p.multiple&&!Array.isArray(d))throw new Error("Invalid argument type: Expected an Array to serialize multiple values.");const v=4294967296;let _,x,M=new Uint8Array(128),b=0;if(p&&p.multiple)for(let N=0;N<d.length;N++)E(d[N]);else E(d);return M.subarray(0,b);function E(N,B){switch(typeof N){case"undefined":U();break;case"boolean":L(N);break;case"number":P(N);break;case"string":A(N);break;case"object":N===null?U():N instanceof Date?z(N):Array.isArray(N)?X(N):N instanceof Uint8Array||N instanceof Uint8ClampedArray?k(N):N instanceof Int8Array||N instanceof Int16Array||N instanceof Uint16Array||N instanceof Int32Array||N instanceof Uint32Array||N instanceof Float32Array||N instanceof Float64Array?X(N):O(N);break;default:if(!B&&p&&p.invalidTypeReplacement)typeof p.invalidTypeReplacement=="function"?E(p.invalidTypeReplacement(N),!0):E(p.invalidTypeReplacement,!0);else throw new Error("Invalid argument type: The type '"+typeof N+"' cannot be serialized.")}}function U(N){Y(192)}function L(N){Y(N?195:194)}function P(N){if(isFinite(N)&&Math.floor(N)===N)if(N>=0&&N<=127)Y(N);else if(N<0&&N>=-32)Y(N);else if(N>0&&N<=255)W([204,N]);else if(N>=-128&&N<=127)W([208,N]);else if(N>0&&N<=65535)W([205,N>>>8,N]);else if(N>=-32768&&N<=32767)W([209,N>>>8,N]);else if(N>0&&N<=4294967295)W([206,N>>>24,N>>>16,N>>>8,N]);else if(N>=-2147483648&&N<=2147483647)W([210,N>>>24,N>>>16,N>>>8,N]);else if(N>0&&N<=18446744073709552e3){let B=N/v,ee=N%v;W([211,B>>>24,B>>>16,B>>>8,B,ee>>>24,ee>>>16,ee>>>8,ee])}else N>=-9223372036854776e3&&N<=9223372036854776e3?(Y(211),te(N)):N<0?W([211,128,0,0,0,0,0,0,0]):W([207,255,255,255,255,255,255,255,255]);else x||(_=new ArrayBuffer(8),x=new DataView(_)),x.setFloat64(0,N),Y(203),W(new Uint8Array(_))}function A(N){let B=r(N),ee=B.length;ee<=31?Y(160+ee):ee<=255?W([217,ee]):ee<=65535?W([218,ee>>>8,ee]):W([219,ee>>>24,ee>>>16,ee>>>8,ee]),W(B)}function X(N){let B=N.length;B<=15?Y(144+B):B<=65535?W([220,B>>>8,B]):W([221,B>>>24,B>>>16,B>>>8,B]);for(let ee=0;ee<B;ee++)E(N[ee])}function k(N){let B=N.length;B<=15?W([196,B]):B<=65535?W([197,B>>>8,B]):W([198,B>>>24,B>>>16,B>>>8,B]),W(N)}function O(N){let B=0;for(let ee in N)N[ee]!==void 0&&B++;B<=15?Y(128+B):B<=65535?W([222,B>>>8,B]):W([223,B>>>24,B>>>16,B>>>8,B]);for(let ee in N){let Ee=N[ee];Ee!==void 0&&(E(ee),E(Ee))}}function z(N){let B=N.getTime()/1e3;if(N.getMilliseconds()===0&&B>=0&&B<4294967296)W([214,255,B>>>24,B>>>16,B>>>8,B]);else if(B>=0&&B<17179869184){let ee=N.getMilliseconds()*1e6;W([215,255,ee>>>22,ee>>>14,ee>>>6,ee<<2>>>0|B/v,B>>>24,B>>>16,B>>>8,B])}else{let ee=N.getMilliseconds()*1e6;W([199,12,255,ee>>>24,ee>>>16,ee>>>8,ee]),te(B)}}function Y(N){if(M.length<b+1){let B=M.length*2;for(;B<b+1;)B*=2;let ee=new Uint8Array(B);ee.set(M),M=ee}M[b]=N,b++}function W(N){if(M.length<b+N.length){let B=M.length*2;for(;B<b+N.length;)B*=2;let ee=new Uint8Array(B);ee.set(M),M=ee}M.set(N,b),b+=N.length}function te(N){let B,ee;N>=0?(B=N/v,ee=N%v):(N++,B=Math.abs(N)/v,ee=Math.abs(N)%v,B=~B,ee=~ee),W([B>>>24,B>>>16,B>>>8,B,ee>>>24,ee>>>16,ee>>>8,ee])}}function n(d,p){let _=0;if(d instanceof ArrayBuffer&&(d=new Uint8Array(d)),typeof d!="object"||typeof d.length>"u")throw new Error("Invalid argument type: Expected a byte array (Array or Uint8Array) to deserialize.");if(!d.length)throw new Error("Invalid argument: The byte array to deserialize is empty.");d instanceof Uint8Array||(d=new Uint8Array(d));let x;if(p&&p.multiple)for(x=[];_<d.length;)x.push(M());else x=M();return x;function M(){const z=d[_++];if(z>=0&&z<=127)return z;if(z>=128&&z<=143)return P(z-128);if(z>=144&&z<=159)return A(z-144);if(z>=160&&z<=191)return X(z-160);if(z===192)return null;if(z===193)throw new Error("Invalid byte code 0xc1 found.");if(z===194)return!1;if(z===195)return!0;if(z===196)return L(-1,1);if(z===197)return L(-1,2);if(z===198)return L(-1,4);if(z===199)return k(-1,1);if(z===200)return k(-1,2);if(z===201)return k(-1,4);if(z===202)return U(4);if(z===203)return U(8);if(z===204)return E(1);if(z===205)return E(2);if(z===206)return E(4);if(z===207)return E(8);if(z===208)return b(1);if(z===209)return b(2);if(z===210)return b(4);if(z===211)return b(8);if(z===212)return k(1);if(z===213)return k(2);if(z===214)return k(4);if(z===215)return k(8);if(z===216)return k(16);if(z===217)return X(-1,1);if(z===218)return X(-1,2);if(z===219)return X(-1,4);if(z===220)return A(-1,2);if(z===221)return A(-1,4);if(z===222)return P(-1,2);if(z===223)return P(-1,4);if(z>=224&&z<=255)return z-256;throw console.debug("msgpack array:",d),new Error("Invalid byte value '"+z+"' at index "+(_-1)+" in the MessagePack binary data (length "+d.length+"): Expecting a range of 0 to 255. This is not a byte array.")}function b(z){let Y=0,W=!0;for(;z-- >0;)if(W){let te=d[_++];Y+=te&127,te&128&&(Y-=128),W=!1}else Y*=256,Y+=d[_++];return Y}function E(z){let Y=0;for(;z-- >0;)Y*=256,Y+=d[_++];return Y}function U(z){let Y=new DataView(d.buffer,_+d.byteOffset,z);if(_+=z,z===4)return Y.getFloat32(0,!1);if(z===8)return Y.getFloat64(0,!1)}function L(z,Y){z<0&&(z=E(Y));let W=d.subarray(_,_+z);return _+=z,W}function P(z,Y){z<0&&(z=E(Y));let W={};for(;z-- >0;){let te=M();W[te]=M()}return W}function A(z,Y){z<0&&(z=E(Y));let W=[];for(;z-- >0;)W.push(M());return W}function X(z,Y){z<0&&(z=E(Y));let W=_;return _+=z,o(d,W,z)}function k(z,Y){z<0&&(z=E(Y));let W=E(1),te=L(z);switch(W){case 255:return O(te)}return{type:W,data:te}}function O(z){if(z.length===4){let Y=(z[0]<<24>>>0)+(z[1]<<16>>>0)+(z[2]<<8>>>0)+z[3];return new Date(Y*1e3)}if(z.length===8){let Y=(z[0]<<22>>>0)+(z[1]<<14>>>0)+(z[2]<<6>>>0)+(z[3]>>>2),W=(z[3]&3)*4294967296+(z[4]<<24>>>0)+(z[5]<<16>>>0)+(z[6]<<8>>>0)+z[7];return new Date(W*1e3+Y/1e6)}if(z.length===12){let Y=(z[0]<<24>>>0)+(z[1]<<16>>>0)+(z[2]<<8>>>0)+z[3];_-=8;let W=b(8);return new Date(W*1e3+Y/1e6)}throw new Error("Invalid data length for a date value.")}}function r(d){let p=!0,v=d.length;for(let M=0;M<v;M++)if(d.charCodeAt(M)>127){p=!1;break}let _=0,x=new Uint8Array(d.length*(p?1:4));for(let M=0;M!==v;M++){let b=d.charCodeAt(M);if(b<128){x[_++]=b;continue}if(b<2048)x[_++]=b>>6|192;else{if(b>55295&&b<56320){if(++M>=v)throw new Error("UTF-8 encode: incomplete surrogate pair");let E=d.charCodeAt(M);if(E<56320||E>57343)throw new Error("UTF-8 encode: second surrogate character 0x"+E.toString(16)+" at index "+M+" out of range");b=65536+((b&1023)<<10)+(E&1023),x[_++]=b>>18|240,x[_++]=b>>12&63|128}else x[_++]=b>>12|224;x[_++]=b>>6&63|128}x[_++]=b&63|128}return p?x:x.subarray(0,_)}function o(d,p,v){let _=p,x="";for(v+=p;_<v;){let M=d[_++];if(M>127)if(M>191&&M<224){if(_>=v)throw new Error("UTF-8 decode: incomplete 2-byte sequence");M=(M&31)<<6|d[_++]&63}else if(M>223&&M<240){if(_+1>=v)throw new Error("UTF-8 decode: incomplete 3-byte sequence");M=(M&15)<<12|(d[_++]&63)<<6|d[_++]&63}else if(M>239&&M<248){if(_+2>=v)throw new Error("UTF-8 decode: incomplete 4-byte sequence");M=(M&7)<<18|(d[_++]&63)<<12|(d[_++]&63)<<6|d[_++]&63}else throw new Error("UTF-8 decode: unknown multibyte start 0x"+M.toString(16)+" at index "+(_-1));if(M<=65535)x+=String.fromCharCode(M);else if(M<=1114111)M-=65536,x+=String.fromCharCode(M>>10|55296),x+=String.fromCharCode(M&1023|56320);else throw new Error("UTF-8 decode: code point 0x"+M.toString(16)+" exceeds UTF-16 reach")}return x}let c={serialize:t,deserialize:n,encode:t,decode:n};a?a.exports=c:window[window.msgpackJsName||"msgpack"]=c})()}(Wg)),Wg.exports}var Vu=KV();class cE{constructor(t,n,r,o,c,d,p){this.imageFilenames=t,this.crystalSummary=n,this.goniometer=r,this.crystal=o,this.scan=c,this.detectorPanelData=d,this.imageFilename=p,this.imageData={}}parseImageData(t,n){const r=af.decompressImageData(t);this.imageData[n]=r}parseExptImageData(t){for(let n=0;n<t.length;n++){const r=af.decompressImageData(t[n]);this.imageData[n]=r}}clearExperiment(){this.imageFilenames=null,this.crystalSummary=null,this.goniometer=null,this.crystal=null,this.scan=null,this.detectorPanelData=null,this.imageFilename=null,this.imageData={}}}class af{constructor(){co(this,"parseExperiment",t=>{const n=new FileReader;return new Promise((r,o)=>{n.onerror=()=>{n.abort(),o(new DOMException("Problem parsing .expt file."))},n.onloadend=()=>{if(r(n.result),af.isDIALSExpt(t,n.result)){this.exptJSON=JSON.parse(n.result);for(var c=0;c<this.numExperiments();c++)this.experiments[c]=new cE(this.getImageFilenames(c),this.getCrystalSummary(c),this.getGoniometer(c),this.getCrystal(c),this.getScan(c),this.getDetectorData(c),this.getImageFilenames(c));this.filename=t.name}},n.readAsText(t)})});this.exptJSON=null,this.filename=null,this.experiments={},this.crystals={}}hasExptJSON(){return this.exptJSON!=null}static isDIALSExpt(t,n){return t.name.split(".").pop()==="expt"&&n[0]==="{"}static isExptJSON(t){try{return t.__id__=="ExperimentList"}catch{return!1}}static decompressImageData(t){t=Vu.decode(t);const{data:n,shape:r,dtype:o}=t,c=$V.inflate(n);let d;switch(o){case"float32":d=Float32Array;break;case"float64":d=Float64Array;break;case"int32":d=Int32Array;break;default:throw new Error(`Unsupported data type: ${o}`)}const p=new d(c.buffer,c.byteOffset,c.byteLength/d.BYTES_PER_ELEMENT);if(r.length===2){const[v,_]=r;if(p.length!==v*_)throw new Error("Data length mismatch for 2D reshape");return Array.from({length:v},(x,M)=>p.slice(M*_,(M+1)*_))}else if(r.length===3){const[v,_,x]=r;if(p.length!==v*_*x)throw new Error("Data length mismatch for 3D reshape");return Array.from({length:v},(M,b)=>Array.from({length:_},(E,U)=>p.slice(b*_*x+U*x,b*_*x+(U+1)*x)))}else throw new Error("Only 2D and 3D arrays are supported")}clearExperiment(){this.exptJSON=null,this.filename=null,Object.values(this.experiments).forEach(t=>t.clearExperiment()),this.experiments={},this.crystals={}}numExperiments(){return this.exptJSON==null?0:this.exptJSON.imageset.length}parseExperimentJSON(t){this.exptJSON=t,this.imageFilenames=[];for(var n=0;n<this.numExperiments();n++)this.experiments[n]=new cE(this.getImageFilenames(n),this.getCrystalSummary(n),this.getGoniometer(n),this.getCrystal(n),this.getScan(n),this.getDetectorData(n),this.getImageFilenames(n)),this.imageFilenames.push(this.getImageFilenames(n)),this.crystals=this.getAllCrystals()}parseImageData(t,n,r){this.experiments[r].parseImageData(t,n)}parseExptImageData(t,n){this.experiments[n].parseExptImageData(t)}getImageFilenames(t){const n=this.exptJSON.experiment[t].imageset;return this.exptJSON.imageset[n].template}getDetectorData(t){const n=this.getRawDetectorPanelData(t);for(var r=this.getDetectorOrientationData(t),o=[],c=0;c<n.length;c++){const W=n[c];var d=new ln(W.pixel_size[0],W.pixel_size[1]),p=new ln(W.image_size[0],W.image_size[1]),v=new ln(d.x*p.x,d.y*p.y),_=new ue(W.fast_axis[0],W.fast_axis[1],W.fast_axis[2]),x=new ue(W.slow_axis[0],W.slow_axis[1],W.slow_axis[2]),M=new ue(W.origin[0],W.origin[1],W.origin[2]),b=new nn(_.x,x.x,M.x,_.y,x.y,M.y,_.z,x.z,M.z),E=new ue(r.fast_axis[0],r.fast_axis[1],r.fast_axis[2]),U=new ue(r.slow_axis[0],r.slow_axis[1],r.slow_axis[2]),L=E.clone().cross(U),P=new nn(E.x,U.x,L.x,E.y,U.y,L.y,E.z,U.z,L.z),A=new ue(r.origin[0],r.origin[1],r.origin[2]),X=P.clone().multiply(b),k=X.elements;k[6]+=A.x,k[7]+=A.y,k[8]+=A.z;var O=new nn().fromArray(k),z=_.clone().multiplyScalar(v.x),Y=x.clone().multiplyScalar(v.y);let te=M.clone();te.add(z.clone().multiplyScalar(.5)),te.add(Y.clone().multiplyScalar(.5)),o.push({panelSize:v,pxSize:d,pxs:p,fastAxis:_,slowAxis:x,scaledFastAxis:z,scaledSlowAxis:Y,origin:M,dMatrix:O,centroid:te,name:W.name})}return o}getRawDetectorPanelData(t){const n=this.exptJSON.experiment[t].detector;return this.exptJSON.detector[n].panels}getBeamData(t){const n=this.exptJSON.experiment[t].beam;return this.exptJSON.beam[n]}getBeamSummary(t){const n=this.getBeamData(t);var r=n.direction;r=[r[0].toFixed(3),r[1].toFixed(3),r[2].toFixed(3)];const o=n.wavelength;var c="direction: ("+r+"), ";return o&&(c+=" wavelength: "+o.toFixed(3)),c}getGoniometer(t){function n(v){const _=["axes","angles","scan_axis"];for(var x=0;x<_.length;x++)if(!(_[x]in v))return!1;return!0}function r(v){const _=v.fixed_rotation,x=v.setting_rotation,M=v.rotation_axis;return{fixedRotation:new nn(_[0],_[1],_[2],_[3],_[4],_[5],_[6],_[7],_[8]),settingRotation:new nn(x[0],x[1],x[2],x[3],x[4],x[5],x[6],x[7],x[8]),rotationAxis:new ue(M[0],M[1],M[2])}}function o(v){function _(X,k){const O=new ue(X[0],X[1],X[2]).normalize(),z=Math.cos(k*Math.PI/180),Y=Math.sin(k*Math.PI/180),[W,te,N]=O.toArray(),B=z+(1-z)*W*W,ee=(1-z)*W*te-Y*N,Ee=(1-z)*W*N+Y*te,de=(1-z)*W*te+Y*N,be=z+(1-z)*te*te,Ae=(1-z)*te*N-Y*W,Me=(1-z)*W*N-Y*te,me=(1-z)*te*N+Y*W,_e=z+(1-z)*N*N;return new nn().set(B,ee,Ee,de,be,Ae,Me,me,_e).transpose()}const x=v.axes,M=v.angles,b=v.scan_axis,E=x[b],U=new ue(E[0],E[1],E[2]);var L=new nn(1,0,0,0,1,0,0,0,1);const P=new nn(1,0,0,0,1,0,0,0,1);for(var A=0;A<b;A++){const X=_(x[A],M[A]);L=L.clone().multiply(X)}for(var A=b+1;A<x.length;A++){const k=_(x[A],M[A]);P.multiply(k)}return{fixedRotation:L,settingRotation:P,rotationAxis:U}}const c=this.exptJSON.goniometer;if(!c||c.length===0){this.goniometer=null;return}const d=this.exptJSON.experiment[t].goniometer,p=c[d];return n(p)?o(p):r(p)}getCrystalData(t){if(this.exptJSON.crystal.length===0||t===void 0)return null;var n=this.exptJSON.experiment[t].crystal;return this.exptJSON.crystal[n]}getAllCrystalData(){return this.exptJSON.crystal}hasCrystal(t){return this.exptJSON===null||this.experiments===void 0?!1:this.experiments[t].crystal!==null&&this.experiments[t].crystal!==void 0}latticeParameters(t,n,r){const o=t.length(),c=n.length(),d=r.length(),p=Math.acos(n.dot(r)/(c*d)),v=Math.acos(t.dot(r)/(o*d)),_=Math.acos(t.dot(n)/(o*c));return[o,c,d,p,v,_]}unitCellVolume(t,n,r,o,c,d){const p=Math.cos(o)**2,v=Math.cos(c)**2,_=Math.cos(d)**2,x=Math.cos(o),M=Math.cos(c),b=Math.cos(d);return t*n*r*Math.sqrt(1-p-v-_+2*x*M*b)}reciprocalLatticeConstants(t,n,r,o,c,d,p){const v=new Array(6);return v[0]=n*r*Math.sin(o)/p,v[1]=r*t*Math.sin(c)/p,v[2]=t*n*Math.sin(d)/p,v[3]=Math.cos(c)*Math.cos(d)-Math.cos(o),v[3]/=Math.sin(c)*Math.sin(d),v[4]=Math.cos(d)*Math.cos(o)-Math.cos(c),v[4]/=Math.sin(d)*Math.sin(o),v[5]=Math.cos(o)*Math.cos(c)-Math.cos(d),v[5]/=Math.sin(o)*Math.sin(c),v}getBMatrix(t,n,r){const[o,c,d,p,v,_]=this.latticeParameters(t,n,r),x=this.unitCellVolume(o,c,d,p,v,_),M=this.reciprocalLatticeConstants(o,c,d,p,v,_,x),b=Math.sqrt(1-M[3]*M[3]),E=new Array(9);return E[0]=1/o,E[1]=-Math.cos(_)/(Math.sin(_)*o),E[2]=-(Math.cos(_)*Math.sin(v)*M[3]+Math.cos(v)*Math.sin(_)),E[2]/=Math.sin(v)*b*Math.sin(_)*o,E[3]=0,E[4]=1/(Math.sin(_)*c),E[5]=M[3]/(b*Math.sin(_)*c),E[6]=0,E[7]=0,E[8]=1/(Math.sin(v)*b*d),new nn(E[0],E[1],E[2],E[3],E[4],E[5],E[6],E[7],E[8])}getAllCrystals(){const t=this.getAllCrystalData();if(!t){this.crystalSummary=null;return}const n=[];for(let d=0;d<t.length;d++){const p=t[d];var r=p.real_space_a;r=new ue(r[0],r[1],r[2]);var o=p.real_space_b;o=new ue(o[0],o[1],o[2]);var c=p.real_space_c;c=new ue(c[0],c[1],c[2]);const v=this.getBMatrix(r.clone(),o.clone(),c.clone()),_=new nn(r.x,r.y,r.z,o.x,o.y,o.z,c.x,c.y,c.z).invert(),x=_.elements;_.transpose();const M=new nn;M.multiplyMatrices(v.clone().invert(),_.clone());const b=[new ue(x[0],x[3],x[6]),new ue(x[1],x[4],x[7]),new ue(x[2],x[5],x[8])];n.push({U:M,B:v,UB:_,reciprocalCell:b})}return n}getCrystal(t){const n=this.getCrystalData(t);if(!n){this.crystalSummary=null;return}var r=n.real_space_a;r=new ue(r[0],r[1],r[2]);var o=n.real_space_b;o=new ue(o[0],o[1],o[2]);var c=n.real_space_c;c=new ue(c[0],c[1],c[2]);const d=this.getBMatrix(r.clone(),o.clone(),c.clone()),p=new nn(r.x,r.y,r.z,o.x,o.y,o.z,c.x,c.y,c.z).invert(),v=p.elements;p.transpose();const _=new nn;_.multiplyMatrices(d.clone().invert(),p.clone());const x=[new ue(v[0],v[3],v[6]),new ue(v[1],v[4],v[7]),new ue(v[2],v[5],v[8])];return{U:_,B:d,UB:p,reciprocalCell:x,exptID:t}}getCrystalRLV(t){return this.experiments[t].crystal.reciprocalCell}getAllCrystalRLVs(){if(!this.crystals)return null;const t=[];for(let n=0;n<this.crystals.length;n++)t.push([this.crystals[n].reciprocalCell[0].clone(),this.crystals[n].reciprocalCell[1].clone(),this.crystals[n].reciprocalCell[2].clone()]);return t}getAllCrystalRCVs(){if(!this.crystals)return null;const t=[];for(let n=0;n<this.crystals.length;n++){const r=this.crystals[n].B.clone().elements;t.push([new ue(r[0],r[3],r[6]),new ue(r[1],r[4],r[7]),new ue(r[2],r[5],r[8])])}return t}getCrystalU(t){return this.crystals[t].U.clone()}getCrystalSummary(t){if(this.experiments!==void 0&&this.experiments[t]!==void 0)return this.experiments[t].crystalSummary!==void 0?this.experiments[t].crystalSummary:null;const n=this.getCrystalData(t);if(!n)return null;const r=n.real_space_a,o=new ue(r[0],r[1],r[2]),c=n.real_space_b,d=new ue(c[0],c[1],c[2]),p=n.real_space_c,v=new ue(p[0],p[1],p[2]),_=o.length().toFixed(3),x=d.length().toFixed(3),M=v.length().toFixed(3),b=(d.angleTo(v)*(180/Math.PI)).toFixed(3),E=(o.angleTo(v)*(180/Math.PI)).toFixed(3),U=(o.angleTo(d)*(180/Math.PI)).toFixed(3);var L="a: "+_+" b: "+x+" c: "+M;return L+=" alpha: "+b+" beta: "+E+" gamma: "+U,L+=" ("+n.space_group_hall_symbol+")",L}getDetectorOrientationData(t){const n=this.exptJSON.experiment[t].detector;return this.exptJSON.detector[n].hierarchy}getDetectorPanelDataByIdx(t,n){return this.experiments[t].detectorPanelData[n]}getDetectorPanelName(t,n){return this.getDetectorPanelDataByIdx(t,n).name}getDetectorPanelCorners(t,n){const r=this.getDetectorPanelDataByIdx(t,n);var o=r.origin.clone(),c=r.origin.clone().add(r.scaledFastAxis),d=r.origin.clone().add(r.scaledFastAxis).add(r.scaledSlowAxis),p=r.origin.clone().add(r.scaledSlowAxis);return[o,c,d,p]}getDetectorPanelNormal(t,n){const r=this.getDetectorPanelDataByIdx(t,n);return r.scaledFastAxis.clone().cross(r.scaledSlowAxis.clone()).normalize()}getDetectorPanelIdxByName(t,n){const r=this.experiments[t].detectorPanelData;for(let o=0;o<r.length;o++)if(r[o].name===n)return o;return null}getDetectorPanelDataByName(t,n){const r=this.experiments[t].detectorPanelData;for(let o=0;o<r.length;o++)if(r[o].name===n)return r[o];return null}getDetectorPanelCentroidByName(t,n){const r=this.getDetectorPanelDataByName(t,n);return r!==null?r.centroid:null}getDetectorPanelSize(t,n){return this.experiments[t].detectorPanelData[n].pxs}getBeamDirection(t){const n=this.getBeamData(t);return new ue(n.direction[0],n.direction[1],n.direction[2])}getNumDetectorPanels(t){return this.experiments[t].detectorPanelData.length}getScanData(t){if(!("scan"in this.exptJSON))return null;var n=this.exptJSON.experiment[t].scan;return this.exptJSON.scan[n]}getScan(t){const n=this.getScanData(t);if(!n||!("oscillation"in n.properties))return null;const r=new ln(n.properties.oscillation[0]*Math.PI/180,n.properties.oscillation[1]*Math.PI/180),o=new ln(n.image_range[0]-1,n.image_range[1]-1);return{oscillation:r,imageRange:o}}getAngleFromFrame(t,n){if(t===null)return null;const r=t.oscillation,o=t.imageRange;return r.x+(n-o.x)*r.y}addAnglesToReflections(t){for(var n=0;n<t.length;n++){var r=this.experiments[t[n].exptID].scan;if("xyzObs"in t[n]){var o;r==null?o=0:o=this.getAngleFromFrame(r,t[n].xyzObs[2]),t[n].angleObs=o}if("xyzCal"in t[n]){var c;r===null?c=0:c=this.getAngleFromFrame(r,t[n].xyzCal[2]),t[n].angleCal=c}}return t}getExptIDs(){let t=[];return this.exptJSON.experiment.forEach((n,r)=>{t.push(r)}),t}getImagesetIDs(){return Object.keys(this.experiments)}getExptLabels(){var t=window.navigator.oscpu?window.navigator.oscpu.indexOf("Windows")>-1:window.navigator.platform.indexOf("Win")>-1,n=[];for(let o in this.experiments){var r=this.experiments[o].imageFilename;t?n.push(r.split("\\").pop()):n.push(r.split("/").pop())}return n}getCrystalIDsMap(){const t={"-1":"-1"};return this.exptJSON.experiment.forEach((n,r)=>{"crystal"in n?t[r.toString()]=n.crystal.toString():t[r.toString()]="-1"}),t}}class hE{constructor(){co(this,"parseReflectionTableFromMsgpackFile",t=>{const n=new FileReader;return new Promise((r,o)=>{n.onerror=()=>{n.abort(),o(new DOMException("Problem parsing input file."))},n.onloadend=()=>{r(n.result);const c=Vu.deserialize(new Uint8Array(n.result));this.refl=c[2].data},n.readAsArrayBuffer(t),this.filename=t.name})});co(this,"parseReflectionTableFromMsgpack",t=>{const n=Vu.deserialize(new Uint8Array(t));this.refl=n[2].data,this.rawReflData=t});co(this,"parseReflectionTableFromJSONMsgpack",t=>{const n=Uint8Array.from(atob(t),o=>o.charCodeAt(0)),r=Vu.decode(n);this.refl=r[2].data,this.rawReflData=t});this.refl=null,this.indexedMap={},this.unindexedMap={},this.filename=null,this.rawReflData=null}hasReflTable(){return this.refl!=null}clearReflectionTable(){this.refl=null,this.rawReflData=null,this.indexedMap={},this.unindexedMap={},this.filename=null}containsColumn(t){return t in this.refl}getColumnBuffer(t){return this.refl[t][1][1]}getUint32Array(t){if(!this.containsColumn(t))return null;const n=this.getColumnBuffer(t),r=new DataView(n.buffer),o=new Uint32Array(n.byteLength/8);let c=0;for(let d=0;d<n.byteLength;d+=8)o[c]=r.getUint32(n.byteOffset+d,!0),c++;return o}getInt32Array(t){if(!this.containsColumn(t))return null;const n=this.getColumnBuffer(t),r=new DataView(n.buffer),o=new Int32Array(n.byteLength/4);let c=0;for(let d=0;d<n.byteLength;d+=4)o[c]=r.getInt32(n.byteOffset+d,!0),c++;return o}getDoubleArray(t){if(!this.containsColumn(t))return null;const n=this.getColumnBuffer(t),r=new DataView(n.buffer),o=new Float64Array(n.length/8);let c=0;for(let d=0;d<n.byteLength;d+=8)o[c]=r.getFloat64(n.byteOffset+d,!0),c++;return o}getVec3DoubleArray(t){if(!this.containsColumn(t))return null;const n=this.getColumnBuffer(t),r=new DataView(n.buffer),o=new Array(n.length/(8*3));let c=0;for(let d=0;d<n.byteLength;d+=24){const p=new Float64Array(3);p[0]=r.getFloat64(n.byteOffset+d,!0),p[1]=r.getFloat64(n.byteOffset+d+8,!0),p[2]=r.getFloat64(n.byteOffset+d+16,!0),o[c]=p,c++}return o}getVec6Int32Array(t){if(!this.containsColumn(t))return null;const n=this.getColumnBuffer(t),r=new Array(n.length/(6*4)),o=new DataView(n.buffer);let c=0;for(let d=0;d<n.length;d+=24){const p=new Int32Array(6);p[0]=o.getInt32(n.byteOffset+d,!0),p[1]=o.getInt32(n.byteOffset+d+4,!0),p[2]=o.getInt32(n.byteOffset+d+8,!0),p[3]=o.getInt32(n.byteOffset+d+12,!0),p[4]=o.getInt32(n.byteOffset+d+16,!0),p[5]=o.getInt32(n.byteOffset+d+20,!0),r[c]=p,c++}return r}getVec3Int32Array(t){if(!this.containsColumn(t))return null;const n=this.getColumnBuffer(t),r=new Array(n.length/(3*4)),o=new DataView(n.buffer);let c=0;for(let d=0;d<n.length;d+=12){const p=new Int32Array(3);p[0]=o.getInt32(n.byteOffset+d,!0),p[1]=o.getInt32(n.byteOffset+d+4,!0),p[2]=o.getInt32(n.byteOffset+d+8,!0),r[c]=p,c++}return r}getPanelNumbers(){return this.getUint32Array("panel")}getFlags(){return this.getUint32Array("flags")}isSummationIntegrated(t){return(t&256)===256}isPrfIntegrated(t){return(t&512)===512}isIndexed(t){return(t&4)===4}isObserved(t){return(t&2)===2}isPredicted(t){return(t&1)===1}getXYZObs(){return this.getVec3DoubleArray("xyzobs.px.value")}containsXYZObs(){return this.containsColumn("xyzobs.px.value")}getXYZObsMm(){return this.getVec3DoubleArray("xyzobs.mm.value")}containsXYZObsMm(){return this.containsColumn("xyzobs.mm.value")}getCrystalIDs(){return this.getInt32Array("crystal_id")}getWavelengths(){return this.getDoubleArray("wavelength")}containsWavelengths(){return this.containsColumn("wavelength")}getCalculatedWavelengths(){return this.getDoubleArray("wavelength_cal")}containsCalculatedWavelengths(){return this.containsColumn("wavelength_cal")}getXYZCal(){return this.getVec3DoubleArray("xyzcal.px")}containsXYZCal(){return this.containsColumn("xyzcal.px")}getXYZCalMm(){return this.getVec3DoubleArray("xyzcal.mm")}containsXYZCalMm(){return this.containsColumn("xyzcal.mm")}containsSummationIntensities(){return this.containsColumn("intensity.sum.value")}containsProfileIntensities(){return this.containsColumn("intensity.prf.value")}containsBoundingBoxes(){return this.containsColumn("bbox")}getBoundingBoxes(){return this.getVec6Int32Array("bbox")}containsMillerIndices(){return this.containsColumn("miller_index")}getMillerIndices(){return this.getVec3Int32Array("miller_index")}isValidMillerIndex(t){return Math.abs(t[0])+Math.abs(t[1])+Math.abs(t[2])>0}containsExperimentIDs(){return this.containsColumn("id")}getExperimentIDs(){return this.getInt32Array("id")}getImagesetIDs(){return this.getInt32Array("imageset_id")}getMillerIndexById(t){return this.indexedMap[t]}}function JV(a){return"channel"in a&&a.channel=="rlv"}const jV={background:133143,sample:16643811,reflectionUnindexed:[9894267,7715837,12548086,1305289,16756860,16765407,13696766,16777092,16777215,16749576,129478,11468140,16646146,10030923,7918006,16775447,16713609,13959167,6936655,5680727],reflectionCrystalIndexed:[9894267,7715837,12548086,1305289,16756860,16765407,13696766,16777092,16777215,16749576,129478,11468140,16646146,10030923,7918006,16775447,16713609,13959167,6936655,5680727],reflectionIndexed:15158332,reflectionCrystalUnindexed:6977160,reciprocalMesh:6977160,reflectionCalculated:16755370,reflectionIntegrated:16761436,highlight:16777215,resolutionCircle:6977160,beam:16777215,reciprocalCell:16777215,rlVLabels:"white"};window.onload=function(){window.viewer=new Yr(new af,new hE,new hE,!1,jV);const a="ws://127.0.0.1:50010/";window.viewer.serverWS=new WebSocket(a),window.viewer.serverWS.binaryType="arraybuffer",window.viewer.serverWS.onopen=()=>{console.log("Reciprocal lattice viewer opened Connection to server"),window.viewer.serverWS.send(JSON.stringify({channel:"server",command:"record_connection",id:"rlv"}))},window.viewer.serverWS.onclose=()=>{console.log("Reciprocal lattice viewer closed Connection to server")},window.viewer.serverWS.onmessage=t=>{let n=t.data;if(console.log("msg received",n),n instanceof ArrayBuffer){const c=new Uint8Array(n);try{const d=Vu.decode(c);let p=d.command;switch(console.log("Command: ",p),p){case"update_mesh":window.viewer.addContourMeshFromData(d.mesh_data,d.mesh_dimensions,d.rlp_min,d.rlp_max,d.rlp_step);break}return}catch(d){console.error("Invalid Msgpack",d);return}}const r=JSON.parse(t.data);if(!JV(r))return;const o=r.command;switch(console.log("Command: ",o),o){case"new_experiment":window.viewer.addExperimentFromJSONString(r,!0);break;case"update_experiment":window.viewer.addExperimentFromJSONString(r,!1);break;case"clear_experiment":window.viewer.clearExperiment();break;case"update_reflection_table":window.viewer.addReflectionsFromJSONMsgpack(r.refl_msgpack);break;case"update_calculated_integrated_reflection_table":window.viewer.addCalculatedIntegratedReflectionsFromJSONMsgpack(r.refl_msgpack);break;case"show_rlv_orientation_view":window.viewer.switchToOrientationView();break;case"show_rlv_crystal_view":window.viewer.switchToCrystalView();break;case"toggle_sidebar":window.viewer.toggleSidebar();break;case"update_mesh":window.viewer.addContourMeshFromData(r.mesh_data,r.mesh_dimensions,r.rlp_min,r.rlp_max,r.rlp_step);break;case"show_mesh":window.viewer.updateMeshVisibility(!0);break;case"hide_mesh":window.viewer.updateMeshVisibility(!1);break;default:console.warn("Unrecognised command ",o)}},QB()};
